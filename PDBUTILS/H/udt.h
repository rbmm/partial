enum {
	ASSOCF_NONE = 0x0,
	ASSOCF_INIT_NOREMAPCLSID = 0x1,
	ASSOCF_INIT_BYEXENAME = 0x2,
	ASSOCF_OPEN_BYEXENAME = 0x2,
	ASSOCF_INIT_DEFAULTTOSTAR = 0x4,
	ASSOCF_INIT_DEFAULTTOFOLDER = 0x8,
	ASSOCF_NOUSERSETTINGS = 0x10,
	ASSOCF_NOTRUNCATE = 0x20,
	ASSOCF_VERIFY = 0x40,
	ASSOCF_REMAPRUNDLL = 0x80,
	ASSOCF_NOFIXUPS = 0x100,
	ASSOCF_IGNOREBASECLASS = 0x200,
	ASSOCF_INIT_IGNOREUNKNOWN = 0x400,
	ASSOCF_INIT_FIXED_PROGID = 0x800,
	ASSOCF_IS_PROTOCOL = 0x1000,
	ASSOCF_INIT_FOR_FILE = 0x2000,
	ASSOCF_IS_FULL_URI = 0x4000,
	ASSOCF_PER_MACHINE_ONLY = 0x8000,
	ASSOCF_APP_TO_APP = 0x10000
};

enum {
	ASSOCMAKEF_VERIFY = 0x40,
	ASSOCMAKEF_USEEXPAND = 0x200,
	ASSOCMAKEF_SUBSTENV = 0x400,
	ASSOCMAKEF_VOLATILE = 0x800,
	ASSOCMAKEF_DELETE = 0x2000
};

enum {
	CTF_COINIT_ASTA = 0x4000,
	CTF_DISABLE_IME = 0x8000
};

enum {
	CTF_INSIST = 0x1,
	CTF_THREAD_REF = 0x2,
	CTF_PROCESS_REF = 0x4,
	CTF_COINIT_STA = 0x8,
	CTF_COINIT = 0x8,
	CTF_FREELIBANDEXIT = 0x10,
	CTF_REF_COUNTED = 0x20,
	CTF_WAIT_ALLOWCOM = 0x40,
	CTF_UNUSED = 0x80,
	CTF_INHERITWOW64 = 0x100,
	CTF_WAIT_NO_REENTRANCY = 0x200,
	CTF_KEYBOARD_LOCALE = 0x400,
	CTF_OLEINITIALIZE = 0x800,
	CTF_COINIT_MTA = 0x1000,
	CTF_NOADDREFLIB = 0x2000
};

enum {
	LdrpNoDevice = 0x0,
	LdrpWebDAV = 0x1,
	LdrpRemote = 0x2,
	LdrpAnyDevice = 0xffffffff,
	LdrpAnyDevice2bit = 0x3
};

enum {
	MidlInterceptionInfoVersionOne = 0x1
};

enum {
	MidlWinrtTypeSerializationInfoVersionOne = 0x1
};

enum {
	NcuStatsColumnInterfaceLuid = 0x0,
	NcuStatsColumnL2ProfileId = 0x1,
	NcuStatsColumnConnectedTime = 0x2,
	NcuStatsColumConnectStartTime = 0x3,
	NcuStatsColumnL2ProfileFlags = 0x4,
	NcuStatsColumnMax = 0x5
};

enum {
	NduStatsColumnInterfaceLuid = 0x0,
	NduStatsColumnL2ProfileId = 0x1,
	NduStatsColumnL2ProfileFlags = 0x2,
	NduStatsColumnBytesSent = 0x3,
	NduStatsColumnBytesRecvd = 0x4,
	NduStatsColumnProcessId = 0x5,
	NduStatsColumnOuterProcessId = 0x6,
	NduStatsColumnDataSourceType = 0x7,
	NduStatsColumnUserName = 0x8,
	NduStatsColumnMax = 0x9,
	NduStatsColumnMaxPersisted = 0x5
};

enum {
	OBJCOMPATF_OTNEEDSSFCACHE = 0x1,
	OBJCOMPATF_NO_WEBVIEW = 0x2,
	OBJCOMPATF_UNBINDABLE = 0x4,
	OBJCOMPATF_PINDLL = 0x8,
	OBJCOMPATF_NEEDSFILESYSANCESTOR = 0x10,
	OBJCOMPATF_NOTAFILESYSTEM = 0x20,
	OBJCOMPATF_CTXMENU_NOVERBS = 0x40,
	OBJCOMPATF_CTXMENU_LIMITEDQI = 0x80,
	OBJCOMPATF_COCREATESHELLFOLDERONLY = 0x100,
	OBJCOMPATF_NEEDSSTORAGEANCESTOR = 0x200,
	OBJCOMPATF_NOLEGACYWEBVIEW = 0x400,
	OBJCOMPATF_BLOCKSHELLSERVICEOBJECT = 0x800,
	OBJCOMPATF_CTXMENU_XPQCMFLAGS = 0x1000,
	OBJCOMPATF_NOIPROPERTYSTORE = 0x2000
};

enum {
	STREAM_COLUMN_SHOWTIME = 0x0,
	STREAM_COLUMN_APPID = 0x1,
	STREAM_COLUMN_EVENTID = 0x2,
	STREAM_COLUMN_NOTIFICATION_TYPE = 0x3
};

enum {
	WPP_TRACE_OPTIONS = 0x2b
};

enum {
	WPP_VER_WIN2K_CB_FORWARD_PTR = 0x1,
	WPP_VER_WHISTLER_CB_FORWARD_PTR = 0x2,
	WPP_VER_LH_CB_FORWARD_PTR = 0x3
};

enum {
	__crt_maximum_pointer_shift = 0x40
};

struct {
	/*0001*/
};

struct {
	/*0000*/ void * pad[0x2];
	/*0010*/ void * userContext;
	/*0018*/
};

struct {
	/*0001*/
};

struct {
	/*0000*/ _tlgProviderMetadata_t _tlgProv;
	/*0013*/ CHAR _tlgName[0x27];
	/*003a*/ USHORT _tlgOptionSize1;
	/*003c*/ UCHAR _tlgOptionEnum1;
	/*003d*/ _GUID _tlgOptionVal1;
	/*004d*/
};

struct {
	/*0000*/ _tlgProviderMetadata_t _tlgProv;
	/*0013*/ CHAR _tlgName[0x25];
	/*0038*/ USHORT _tlgOptionSize1;
	/*003a*/ UCHAR _tlgOptionEnum1;
	/*003b*/ _GUID _tlgOptionVal1;
	/*004b*/
};

struct {
	/*0000*/ _tlgProviderMetadata_t _tlgProv;
	/*0013*/ CHAR _tlgName[0x19];
	/*002c*/
};

struct {
	/*0000*/ _tlgProviderMetadata_t _tlgProv;
	/*0013*/ CHAR _tlgName[0x10];
	/*0023*/ USHORT _tlgOptionSize1;
	/*0025*/ UCHAR _tlgOptionEnum1;
	/*0026*/ _GUID _tlgOptionVal1;
	/*0036*/
};

struct {
	/*0000*/ WINDOWCOMPOSITIONATTRIB Attrib;
	/*0008*/ ULONGLONG cbData;
	/*0010*/
};

enum ACCESS_TYPE_PREFERENCE {
	ACCESS_TYPE_PREFERENCE_UNSPECIFIED = 0x0,
	ACCESS_TYPE_PREFERENCE_3GPP = 0x1,
	ACCESS_TYPE_PREFERENCE_NON3GPP = 0x2
};

enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE {
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0x0,
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 0x1,
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 0x2,
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 0x3
};

enum ACTCTX_REQUESTED_RUN_LEVEL {
	ACTCTX_RUN_LEVEL_UNSPECIFIED = 0x0,
	ACTCTX_RUN_LEVEL_AS_INVOKER = 0x1,
	ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 0x2,
	ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 0x3,
	ACTCTX_RUN_LEVEL_NUMBERS = 0x4
};

enum ACTIVATEOPTIONS {
	AO_NONE = 0x0,
	AO_DESIGNMODE = 0x1,
	AO_NOERRORUI = 0x2,
	AO_NOSPLASHSCREEN = 0x4,
	AO_PRELAUNCH = 0x2000000
};

enum ACTIVATE_ON_HOST_FLAGS {
	ACTIVATE_ON_HOST_FLAGS_NONE = 0x0,
	ACTIVATE_ON_HOST_FLAGS_VAIL = 0x1,
	ACTIVATE_ON_HOST_FLAGS_WDAG = 0x2,
	ACTIVATE_ON_HOST_FLAGS_GAMECORE = 0x4
};

enum ACTIVATION_OBJECT_STATE {
	AOS_NONE = 0x0,
	AOS_ENABLED = 0x1,
	AOS_SUPPRESS_SPATIAL = 0x2,
	AOS_FOREGROUND = 0x4
};

enum ADJACENT_DISPLAY_EDGES {
	ADE_NONE = 0x0,
	ADE_LEFT = 0x1,
	ADE_RIGHT = 0x2
};

enum AHE_TYPE {
	AHE_DESKTOP = 0x0,
	AHE_IMMERSIVE = 0x1
};

enum AHTYPE {
	AHTYPE_UNDEFINED = 0x0,
	AHTYPE_USER_APPLICATION = 0x8,
	AHTYPE_ANY_APPLICATION = 0x10,
	AHTYPE_MACHINEDEFAULT = 0x20,
	AHTYPE_PROGID = 0x40,
	AHTYPE_APPLICATION = 0x80,
	AHTYPE_CLASS_APPLICATION = 0x100,
	AHTYPE_ANY_PROGID = 0x200
};

struct ANON_OBJECT_HEADER {
	/*0000*/ USHORT Sig1;
	/*0002*/ USHORT Sig2;
	/*0004*/ USHORT Version;
	/*0006*/ USHORT Machine;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ _GUID ClassID;
	/*001c*/ ULONG SizeOfData;
	/*0020*/
};

struct ANON_OBJECT_HEADER_BIGOBJ {
	/*0000*/ USHORT Sig1;
	/*0002*/ USHORT Sig2;
	/*0004*/ USHORT Version;
	/*0006*/ USHORT Machine;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ _GUID ClassID;
	/*001c*/ ULONG SizeOfData;
	/*0020*/ ULONG Flags;
	/*0024*/ ULONG MetaDataSize;
	/*0028*/ ULONG MetaDataOffset;
	/*002c*/ ULONG NumberOfSections;
	/*0030*/ ULONG PointerToSymbolTable;
	/*0034*/ ULONG NumberOfSymbols;
	/*0038*/
};

struct ANON_OBJECT_HEADER_V2 {
	/*0000*/ USHORT Sig1;
	/*0002*/ USHORT Sig2;
	/*0004*/ USHORT Version;
	/*0006*/ USHORT Machine;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ _GUID ClassID;
	/*001c*/ ULONG SizeOfData;
	/*0020*/ ULONG Flags;
	/*0024*/ ULONG MetaDataSize;
	/*0028*/ ULONG MetaDataOffset;
	/*002c*/
};

struct APARTMENT_SHUTDOWN_REGISTRATION_COOKIE__ {
	/*0000*/ INT unused;
	/*0004*/
};

enum APPCOMPATMODEID {
	ACMID_NONE = 0x0,
	ACMID_CONTEXTMENU = 0x1,
	ACMID_DOCOBJECT = 0x2,
	ACMID_WIN95DEFVIEW = 0x3,
	ACMID_MYCOMPUTERFIRST = 0x4,
	ACMID_OLDREGITEMGDN = 0x5,
	ACMID_STATICJUMPLISTSIZE = 0x6,
	ACMID_LOADCOLUMNHANDLER = 0x7,
	ACMID_ANSI = 0x8,
	ACMID_STRIPFOLDERBIT = 0x9,
	ACMID_WIN95SHLEXEC = 0xa,
	ACMID_STAROFFICE5PRINTER = 0xb,
	ACMID_NOVALIDATEFSIDS = 0xc,
	ACMID_FORCELIBRARYPARSE = 0xd,
	ACMID_WIN95BINDTOOBJECT = 0xe,
	ACMID_IGNOREENUMRESET = 0xf,
	ACMID_NOTHREADUSECHECKS = 0x10,
	ACMID_ANSIDISPLAYNAMES = 0x11,
	ACMID_FILEOPENBOGUSCTRLID = 0x12,
	ACMID_FORCELFNIDLIST = 0x13,
	ACMID_APPISOFFICE = 0x14,
	ACMID_RETURNALLATTRIBS = 0x15,
	ACMID_NODEFVIEWMSGPUMP = 0x16,
	ACMID_RETURNNONURLSASURLS = 0x17,
	ACMID_IGNOREDEFAULTTOKEN = 0x18,
	ACMID_COINITIALIZE_COMPAREIDS = 0x19,
	ACMID_LAST = 0x1a
};

enum APPDOCLISTTYPE {
	ADLT_RECENT = 0x0,
	ADLT_FREQUENT = 0x1
};

enum APPLICATION_LAYOUT_MODE {
	ALM_NORMAL = 0x0,
	ALM_LOCKSCREEN = 0x1
};

enum APPLICATION_SEARCH_TYPE {
	AST_LOCAL = 0x0,
	AST_GLOBAL = 0x1
};

enum APPLICATION_VIEW_MIN_WIDTH {
	AVMW_DEFAULT = 0x0,
	AVMW_320 = 0x1,
	AVMW_500 = 0x2
};

enum APPLICATION_VIEW_ORIENTATION {
	AVO_LANDSCAPE = 0x0,
	AVO_PORTRAIT = 0x1
};

enum APPLICATION_VIEW_SIZE_PREFERENCE {
	AVSP_DEFAULT = 0x0,
	AVSP_USE_LESS = 0x1,
	AVSP_USE_HALF = 0x2,
	AVSP_USE_MORE = 0x3,
	AVSP_USE_MINIMUM = 0x4,
	AVSP_USE_NONE = 0x5,
	AVSP_CUSTOM = 0x6
};

enum APPLICATION_VIEW_STATE {
	AVS_FULLSCREEN_LANDSCAPE = 0x0,
	AVS_FILLED = 0x1,
	AVS_SNAPPED = 0x2,
	AVS_FULLSCREEN_PORTRAIT = 0x3
};

struct APP_LOCAL_DEVICE_ID {
	/*0000*/ UCHAR value[0x20];
	/*0020*/
};

enum ARM64_FNPDATA_CR {
	PdataCrUnchained = 0x0,
	PdataCrUnchainedSavedLr = 0x1,
	PdataCrChainedWithPac = 0x2,
	PdataCrChained = 0x3
};

enum ARM64_FNPDATA_FLAGS {
	PdataRefToFullXdata = 0x0,
	PdataPackedUnwindFunction = 0x1,
	PdataPackedUnwindFragment = 0x2
};

struct ARRAY_INFO {
	/*0000*/ LONG Dimension;
	/*0008*/ ULONG * BufferConformanceMark;
	/*0010*/ ULONG * BufferVarianceMark;
	/*0018*/ ULONG * MaxCountArray;
	/*0020*/ ULONG * OffsetArray;
	/*0028*/ ULONG * ActualCountArray;
	/*0030*/
};

enum ASSOCDATA {
	ASSOCDATA_MSIDESCRIPTOR = 0x1,
	ASSOCDATA_NOACTIVATEHANDLER = 0x2,
	ASSOCDATA_UNUSED1 = 0x3,
	ASSOCDATA_HASPERUSERASSOC = 0x4,
	ASSOCDATA_EDITFLAGS = 0x5,
	ASSOCDATA_VALUE = 0x6,
	ASSOCDATA_MAX = 0x7
};

enum ASSOCENUM {
	ASSOCENUM_NONE = 0x0
};

enum ASSOCIATIONLEVEL {
	AL_MACHINE = 0x0,
	AL_EFFECTIVE = 0x1,
	AL_USER = 0x2
};

enum ASSOCIATIONTYPE {
	AT_FILEEXTENSION = 0x0,
	AT_URLPROTOCOL = 0x1,
	AT_STARTMENUCLIENT = 0x2,
	AT_MIMETYPE = 0x3
};

enum ASSOCKEY {
	ASSOCKEY_SHELLEXECCLASS = 0x1,
	ASSOCKEY_APP = 0x2,
	ASSOCKEY_CLASS = 0x3,
	ASSOCKEY_BASECLASS = 0x4,
	ASSOCKEY_MAX = 0x5
};

enum ASSOCSTR {
	ASSOCSTR_COMMAND = 0x1,
	ASSOCSTR_EXECUTABLE = 0x2,
	ASSOCSTR_FRIENDLYDOCNAME = 0x3,
	ASSOCSTR_FRIENDLYAPPNAME = 0x4,
	ASSOCSTR_NOOPEN = 0x5,
	ASSOCSTR_SHELLNEWVALUE = 0x6,
	ASSOCSTR_DDECOMMAND = 0x7,
	ASSOCSTR_DDEIFEXEC = 0x8,
	ASSOCSTR_DDEAPPLICATION = 0x9,
	ASSOCSTR_DDETOPIC = 0xa,
	ASSOCSTR_INFOTIP = 0xb,
	ASSOCSTR_QUICKTIP = 0xc,
	ASSOCSTR_TILEINFO = 0xd,
	ASSOCSTR_CONTENTTYPE = 0xe,
	ASSOCSTR_DEFAULTICON = 0xf,
	ASSOCSTR_SHELLEXTENSION = 0x10,
	ASSOCSTR_DROPTARGET = 0x11,
	ASSOCSTR_DELEGATEEXECUTE = 0x12,
	ASSOCSTR_SUPPORTED_URI_PROTOCOLS = 0x13,
	ASSOCSTR_PROGID = 0x14,
	ASSOCSTR_APPID = 0x15,
	ASSOCSTR_APPPUBLISHER = 0x16,
	ASSOCSTR_APPICONREFERENCE = 0x17,
	ASSOCSTR_MAX = 0x18
};

enum ASSOC_FILTER {
	ASSOC_FILTER_NONE = 0x0,
	ASSOC_FILTER_RECOMMENDED = 0x1
};

enum ASTA_TEST_MODE_FLAGS {
	ASTA_TEST_MODE_NONE = 0x0,
	ASTA_TEST_MODE_RO_INIT_SINGLETHREADED_CREATES_ASTAS = 0x1,
	ASTA_TEST_MODE_GIT_LIFETIME_EXTENSION_ENABLED = 0x2,
	ASTA_TEST_MODE_ROINITIALIZEASTA_ALLOWED = 0x4
};

enum ATTACHMENT_ACTION {
	ATTACHMENT_ACTION_CANCEL = 0x0,
	ATTACHMENT_ACTION_SAVE = 0x1,
	ATTACHMENT_ACTION_EXEC = 0x2
};

enum ATTACHMENT_PROMPT {
	ATTACHMENT_PROMPT_NONE = 0x0,
	ATTACHMENT_PROMPT_SAVE = 0x1,
	ATTACHMENT_PROMPT_EXEC = 0x2,
	ATTACHMENT_PROMPT_EXEC_OR_SAVE = 0x3
};

class AgileGitPtr {
public:
	HRESULT Initialize( _GUID const & , IUnknown * );
	HRESULT Initialize( AgileReferenceOptions , _GUID const & , IUnknown * );
	BOOLEAN IsInitialized() const;
	HRESULT CopyLocal( _GUID const & , void * * ) const;
	HRESULT Revoke();
private:
	/*0000*/ AgileRef m_agileRef;
public:
	void AgileGitPtr( AgileGitPtr && );
	void AgileGitPtr( AgileGitPtr const & );
	void AgileGitPtr();
	void ~AgileGitPtr();
	AgileGitPtr & operator=( AgileGitPtr && );
	AgileGitPtr & operator=( AgileGitPtr const & );
	void * __vecDelDtor( UINT );
	/*0008*/
};

enum AgileReferenceOptions {
	AGILEREFERENCE_DEFAULT = 0x0,
	AGILEREFERENCE_DELAYEDMARSHAL = 0x1
};

enum AnnoScope {
	ANNO_THIS = 0x0,
	ANNO_CONTAINER = 0x1
};

enum ApartmentType {
	ApartmentType_STA = 0x0,
	ApartmentType_ASTA = 0x1,
	ApartmentType_MTA = 0x2,
	ApartmentType_NA = 0x3,
	ApartmentType_BSTA = 0x4
};

enum AppPolicyClrCompat {
	AppPolicyClrCompat_Other = 0x0,
	AppPolicyClrCompat_ClassicDesktop = 0x1,
	AppPolicyClrCompat_Universal = 0x2,
	AppPolicyClrCompat_PackagedDesktop = 0x3
};

enum AppPolicyCreateFileAccess {
	AppPolicyCreateFileAccess_Full = 0x0,
	AppPolicyCreateFileAccess_Limited = 0x1
};

enum AppPolicyLifecycleManagement {
	AppPolicyLifecycleManagement_Unmanaged = 0x0,
	AppPolicyLifecycleManagement_Managed = 0x1
};

enum AppPolicyMediaFoundationCodecLoading {
	AppPolicyMediaFoundationCodecLoading_All = 0x0,
	AppPolicyMediaFoundationCodecLoading_InboxOnly = 0x1
};

enum AppPolicyProcessTerminationMethod {
	AppPolicyProcessTerminationMethod_ExitProcess = 0x0,
	AppPolicyProcessTerminationMethod_TerminateProcess = 0x1
};

enum AppPolicyShowDeveloperDiagnostic {
	AppPolicyShowDeveloperDiagnostic_None = 0x0,
	AppPolicyShowDeveloperDiagnostic_ShowUI = 0x1
};

enum AppPolicyThreadInitializationType {
	AppPolicyThreadInitializationType_None = 0x0,
	AppPolicyThreadInitializationType_InitializeWinRT = 0x1
};

enum AppPolicyWindowingModel {
	AppPolicyWindowingModel_None = 0x0,
	AppPolicyWindowingModel_Universal = 0x1,
	AppPolicyWindowingModel_ClassicDesktop = 0x2,
	AppPolicyWindowingModel_ClassicPhone = 0x3
};

struct AsyncIAdviseSink : IUnknown {
	/*0018*/ virtual void Begin_OnDataChange( tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0020*/ virtual void Finish_OnDataChange() = 0;
	/*0028*/ virtual void Begin_OnViewChange( ULONG , LONG ) = 0;
	/*0030*/ virtual void Finish_OnViewChange() = 0;
	/*0038*/ virtual void Begin_OnRename( IMoniker * ) = 0;
	/*0040*/ virtual void Finish_OnRename() = 0;
	/*0048*/ virtual void Begin_OnSave() = 0;
	/*0050*/ virtual void Finish_OnSave() = 0;
	/*0058*/ virtual void Begin_OnClose() = 0;
	/*0060*/ virtual void Finish_OnClose() = 0;
	void AsyncIAdviseSink( AsyncIAdviseSink && );
	void AsyncIAdviseSink( AsyncIAdviseSink const & );
	void AsyncIAdviseSink();
	AsyncIAdviseSink & operator=( AsyncIAdviseSink && );
	AsyncIAdviseSink & operator=( AsyncIAdviseSink const & );
	/*0008*/
};

struct AsyncIAdviseSink2 : AsyncIAdviseSink {
	/*0068*/ virtual void Begin_OnLinkSrcChange( IMoniker * ) = 0;
	/*0070*/ virtual void Finish_OnLinkSrcChange() = 0;
	void AsyncIAdviseSink2( AsyncIAdviseSink2 && );
	void AsyncIAdviseSink2( AsyncIAdviseSink2 const & );
	void AsyncIAdviseSink2();
	AsyncIAdviseSink2 & operator=( AsyncIAdviseSink2 && );
	AsyncIAdviseSink2 & operator=( AsyncIAdviseSink2 const & );
	/*0008*/
};

struct AsyncIMultiQI : IUnknown {
	/*0018*/ virtual HRESULT Begin_QueryMultipleInterfaces( ULONG , tagMULTI_QI * ) = 0;
	/*0020*/ virtual HRESULT Finish_QueryMultipleInterfaces( tagMULTI_QI * ) = 0;
	void AsyncIMultiQI( AsyncIMultiQI && );
	void AsyncIMultiQI( AsyncIMultiQI const & );
	void AsyncIMultiQI();
	AsyncIMultiQI & operator=( AsyncIMultiQI && );
	AsyncIMultiQI & operator=( AsyncIMultiQI const & );
	/*0008*/
};

struct AsyncIPipeByte : IUnknown {
	/*0018*/ virtual HRESULT Begin_Pull( ULONG ) = 0;
	/*0020*/ virtual HRESULT Finish_Pull( UCHAR * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Begin_Push( UCHAR * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Finish_Push() = 0;
	void AsyncIPipeByte( AsyncIPipeByte && );
	void AsyncIPipeByte( AsyncIPipeByte const & );
	void AsyncIPipeByte();
	AsyncIPipeByte & operator=( AsyncIPipeByte && );
	AsyncIPipeByte & operator=( AsyncIPipeByte const & );
	/*0008*/
};

struct AsyncIPipeDouble : IUnknown {
	/*0018*/ virtual HRESULT Begin_Pull( ULONG ) = 0;
	/*0020*/ virtual HRESULT Finish_Pull( double * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Begin_Push( double * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Finish_Push() = 0;
	void AsyncIPipeDouble( AsyncIPipeDouble && );
	void AsyncIPipeDouble( AsyncIPipeDouble const & );
	void AsyncIPipeDouble();
	AsyncIPipeDouble & operator=( AsyncIPipeDouble && );
	AsyncIPipeDouble & operator=( AsyncIPipeDouble const & );
	/*0008*/
};

struct AsyncIPipeLong : IUnknown {
	/*0018*/ virtual HRESULT Begin_Pull( ULONG ) = 0;
	/*0020*/ virtual HRESULT Finish_Pull( LONG * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Begin_Push( LONG * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Finish_Push() = 0;
	void AsyncIPipeLong( AsyncIPipeLong && );
	void AsyncIPipeLong( AsyncIPipeLong const & );
	void AsyncIPipeLong();
	AsyncIPipeLong & operator=( AsyncIPipeLong && );
	AsyncIPipeLong & operator=( AsyncIPipeLong const & );
	/*0008*/
};

struct AsyncIUnknown : IUnknown {
	/*0018*/ virtual HRESULT Begin_QueryInterface( _GUID const & ) = 0;
	/*0020*/ virtual HRESULT Finish_QueryInterface( void * * ) = 0;
	/*0028*/ virtual HRESULT Begin_AddRef() = 0;
	/*0030*/ virtual ULONG Finish_AddRef() = 0;
	/*0038*/ virtual HRESULT Begin_Release() = 0;
	/*0040*/ virtual ULONG Finish_Release() = 0;
	void AsyncIUnknown( AsyncIUnknown && );
	void AsyncIUnknown( AsyncIUnknown const & );
	void AsyncIUnknown();
	AsyncIUnknown & operator=( AsyncIUnknown && );
	AsyncIUnknown & operator=( AsyncIUnknown const & );
	/*0008*/
};

class AsyncOperationEventTracing {
public:
	static void AsyncOperationStarted( UINT , IAsyncInfo * );
	static void AsyncOperationStartFailure( UINT , IAsyncInfo * , HRESULT );
	static void AsyncOperationCompleted( UINT , IAsyncInfo * );
	static void AsyncOperationFailure( UINT , IAsyncInfo * , HRESULT );
	static void AsyncOperationCancelled( UINT , IAsyncInfo * );
	static void AsyncOperationClosed( UINT , IAsyncInfo * );
	static void FireCompletion( UINT , IAsyncInfo * , void * );
	static void FireProgress( UINT , IAsyncInfo * , void * );
	static void RevokeHandlerFailure( UINT , IAsyncInfo * , HRESULT );
	static void RegisterHandlerFailure( UINT , IAsyncInfo * , HRESULT );
	static void RetrieveHandlerFailure( UINT , IAsyncInfo * , HRESULT );
	static void SetEventProvider( IAsyncOperationEventProvider * );
private:
	static IAsyncOperationEventProvider * GetEventProvider();
	static IAsyncOperationEventProvider * traceEventProvider;
	/*0001*/
};

enum AsyncStatus {
	Started = 0x0,
	Completed = 0x1,
	Canceled = 0x2,
	Error = 0x3
};

class AutoArray<unsigned short *> : public AutoPtr<unsigned short *,&DeleteArray<unsigned short *>,0> {
public:
	void AutoArray<unsigned short *>( WCHAR * );
	void AutoArray<unsigned short *>();
	void ~AutoArray<unsigned short *>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class AutoBSTR : public AutoPtr<unsigned short *,&DeleteBSTR,0> {
public:
	void AutoBSTR( WCHAR * );
	void AutoBSTR();
	UINT Length();
	void ~AutoBSTR();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class AutoComInitializer {
public:
	void AutoComInitializer( RO_INIT_TYPE );
	void ~AutoComInitializer();
private:
	/*0000*/ HRESULT hr;
public:
	void * __vecDelDtor( UINT );
	/*0004*/
};

class AutoLock {
	void AutoLock( AutoLock const & );
public:
	void AutoLock( Lock * );
	void ~AutoLock();
	void Enter();
	void Leave();
private:
	AutoLock & operator=( AutoLock const & );
	/*0000*/ Lock * lock;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class AutoPtr<unsigned short *,&DeleteArray<unsigned short *>,0> {
protected:
	/*0000*/ WCHAR * obj;
public:
	void AutoPtr<unsigned short *,&DeleteArray<unsigned short *>,0>( WCHAR * );
	void AutoPtr<unsigned short *,&DeleteArray<unsigned short *>,0>();
private:
	void AutoPtr<unsigned short *,&DeleteArray<unsigned short *>,0>( AutoPtr<unsigned short *,&DeleteArray<unsigned short *>,0> const & );
	WCHAR * operator=( WCHAR * );
	AutoPtr<unsigned short *,&DeleteArray<unsigned short *>,0> & operator=( AutoPtr<unsigned short *,&DeleteArray<unsigned short *>,0> const & );
public:
	void ~AutoPtr<unsigned short *,&DeleteArray<unsigned short *>,0>();
	WCHAR * operator unsigned short *() const;
	WCHAR * operator->() const;
	WCHAR * * operator&();
	WCHAR * * AddressOf();
	BOOLEAN IsNull();
	void Attach( WCHAR * );
	WCHAR * Detach();
	void Clear();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class AutoPtr<unsigned short *,&DeleteBSTR,0> {
protected:
	/*0000*/ WCHAR * obj;
public:
	void AutoPtr<unsigned short *,&DeleteBSTR,0>( WCHAR * );
	void AutoPtr<unsigned short *,&DeleteBSTR,0>();
private:
	void AutoPtr<unsigned short *,&DeleteBSTR,0>( AutoPtr<unsigned short *,&DeleteBSTR,0> const & );
	WCHAR * operator=( WCHAR * );
	AutoPtr<unsigned short *,&DeleteBSTR,0> & operator=( AutoPtr<unsigned short *,&DeleteBSTR,0> const & );
public:
	void ~AutoPtr<unsigned short *,&DeleteBSTR,0>();
	WCHAR * operator unsigned short *() const;
	WCHAR * operator->() const;
	WCHAR * * operator&();
	WCHAR * * AddressOf();
	BOOLEAN IsNull();
	void Attach( WCHAR * );
	WCHAR * Detach();
	void Clear();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class AutoPtr<unsigned short *,&DeleteSecureString,0>;

class AutoPtr<void *,&DeleteHandle,0>;

class AutoPtr<void *,&DeleteInvalidHandle,-1>;

class AutoStubBias<IUnknown,Windows::Internal::INilDelegate> {
public:
	void AutoStubBias<IUnknown,Windows::Internal::INilDelegate>( AutoStubBias<IUnknown,Windows::Internal::INilDelegate> const & );
	void AutoStubBias<IUnknown,Windows::Internal::INilDelegate>( IRpcOptions * , IUnknown * , INilDelegate * );
	void ~AutoStubBias<IUnknown,Windows::Internal::INilDelegate>();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<IUnknown,Windows::Internal::INilDelegate> & operator=( AutoStubBias<IUnknown,Windows::Internal::INilDelegate> const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorVi( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorVi( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::AttributedNetworkUsage *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::AttributedNetworkUsage *> *> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorV();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Wi( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Wi( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::ConnectionProfile *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::ConnectionProfile *> *> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<W();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::ConnectivityInterval *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::ConnectivityInterval *> *> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorVie();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::NetworkUsage *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::NetworkUsage *> *> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Window();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::ProviderNetworkUsage *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::ProviderNetworkUsage *> *> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorVie();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionProfile *> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionProfile *> >( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionProfile *> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionProfile *> >( IRpcOptions * , IAsyncOperation<Networking::Connectivity::ConnectionProfile *> * , IAsyncOperationCompletedHandler<Networking::Connectivity::ConnectionProfile *> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionProfile *> >();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionProfile *> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionProfile *> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionSession *> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionSession *> >( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionSession *> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionSession *> >( IRpcOptions * , IAsyncOperation<Networking::Connectivity::ConnectionSession *> * , IAsyncOperationCompletedHandler<Networking::Connectivity::ConnectionSession *> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionSession *> >();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionSession *> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionSession *> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *> >( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *> >( IRpcOptions * , IAsyncOperation<Networking::Connectivity::ProxyConfiguration *> * , IAsyncOperationCompletedHandler<Networking::Connectivity::ProxyConfiguration *> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *> >();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

class AutoStubBias<Windows::Foundation::IAsyncOperation<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus> > {
public:
	void AutoStubBias<Windows::Foundation::IAsyncOperation<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus> >( AutoStubBias<Windows::Foundation::IAsyncOperation<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus> > const & );
	void AutoStubBias<Windows::Foundation::IAsyncOperation<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus> >( IRpcOptions * , IAsyncOperation<enum Networking::Connectivity::ConnectionProfileDeleteStatus> * , IAsyncOperationCompletedHandler<enum Networking::Connectivity::ConnectionProfileDeleteStatus> * );
	void ~AutoStubBias<Windows::Foundation::IAsyncOperation<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus> >();
private:
	/*0000*/ ComPtr<IStream> spStream_;
	/*0008*/ HRESULT hr_;
public:
	AutoStubBias<Windows::Foundation::IAsyncOperation<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus> > & operator=( AutoStubBias<Windows::Foundation::IAsyncOperation<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus> > const & );
	void * __vecDelDtor( UINT );
	/*0010*/
};

struct BANNER_NOTIFICATION {
	/*0000*/ BANNER_NOTIFICATION_EVENT event;
	/*0008*/ WCHAR const * providerIdentity;
	/*0010*/ WCHAR const * contentId;
	/*0018*/
};

enum BANNER_NOTIFICATION_EVENT {
	BNE_Rendered = 0x0,
	BNE_Hovered = 0x1,
	BNE_Closed = 0x2,
	BNE_Dismissed = 0x3,
	BNE_Button1Clicked = 0x4,
	BNE_Button2Clicked = 0x5
};

struct BATTERY_REPORTING_SCALE {
	/*0000*/ ULONG Granularity;
	/*0004*/ ULONG Capacity;
	/*0008*/
};

struct BITMAPV4HEADER {
	/*0000*/ ULONG bV4Size;
	/*0004*/ LONG bV4Width;
	/*0008*/ LONG bV4Height;
	/*000c*/ USHORT bV4Planes;
	/*000e*/ USHORT bV4BitCount;
	/*0010*/ ULONG bV4V4Compression;
	/*0014*/ ULONG bV4SizeImage;
	/*0018*/ LONG bV4XPelsPerMeter;
	/*001c*/ LONG bV4YPelsPerMeter;
	/*0020*/ ULONG bV4ClrUsed;
	/*0024*/ ULONG bV4ClrImportant;
	/*0028*/ ULONG bV4RedMask;
	/*002c*/ ULONG bV4GreenMask;
	/*0030*/ ULONG bV4BlueMask;
	/*0034*/ ULONG bV4AlphaMask;
	/*0038*/ ULONG bV4CSType;
	/*003c*/ tagICEXYZTRIPLE bV4Endpoints;
	/*0060*/ ULONG bV4GammaRed;
	/*0064*/ ULONG bV4GammaGreen;
	/*0068*/ ULONG bV4GammaBlue;
	/*006c*/
};

struct BITMAPV5HEADER {
	/*0000*/ ULONG bV5Size;
	/*0004*/ LONG bV5Width;
	/*0008*/ LONG bV5Height;
	/*000c*/ USHORT bV5Planes;
	/*000e*/ USHORT bV5BitCount;
	/*0010*/ ULONG bV5Compression;
	/*0014*/ ULONG bV5SizeImage;
	/*0018*/ LONG bV5XPelsPerMeter;
	/*001c*/ LONG bV5YPelsPerMeter;
	/*0020*/ ULONG bV5ClrUsed;
	/*0024*/ ULONG bV5ClrImportant;
	/*0028*/ ULONG bV5RedMask;
	/*002c*/ ULONG bV5GreenMask;
	/*0030*/ ULONG bV5BlueMask;
	/*0034*/ ULONG bV5AlphaMask;
	/*0038*/ ULONG bV5CSType;
	/*003c*/ tagICEXYZTRIPLE bV5Endpoints;
	/*0060*/ ULONG bV5GammaRed;
	/*0064*/ ULONG bV5GammaGreen;
	/*0068*/ ULONG bV5GammaBlue;
	/*006c*/ ULONG bV5Intent;
	/*0070*/ ULONG bV5ProfileData;
	/*0074*/ ULONG bV5ProfileSize;
	/*0078*/ ULONG bV5Reserved;
	/*007c*/
};

struct BREAK_ON_STATUS_BUFFER {
	/*0000*/ LONG NtStatus;
	/*0004*/ ULONG Win32Error;
	/*0008*/ ULONG ThreadId;
	/*000c*/ ULONG ProcessId;
	/*0010*/ CHAR ImageFileName[0x10];
	/*0020*/
};

struct BSMINFO {
	/*0000*/ UINT cbSize;
	/*0008*/ HDESK__ * hdesk;
	/*0010*/ HWND__ * hwnd;
	/*0018*/ _LUID luid;
	/*0020*/
};

struct BULK_SECURITY_TEST_DATA {
	/*0000*/ ULONG DesiredAccess;
	/*0004*/ ULONG SecurityIds[0x1];
	/*0008*/
};

struct BUTTON_IMAGELIST {
	/*0000*/ _IMAGELIST * himl;
	/*0008*/ tagRECT margin;
	/*0018*/ UINT uAlign;
	/*0020*/
};

enum BackgroundTaskThrottleCounterRemote {
	All = 0x0,
	Cpu = 0x1,
	Networking = 0x2
};

struct BiasHelper<IUnknown,Windows::Internal::INilDelegate,1> {
	static AutoStubBias<IUnknown,Windows::Internal::INilDelegate> CreateBias( IRpcOptions * , IUnknown * , INilDelegate * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::AttributedNetworkUsage *> *> > CreateBias( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::AttributedNetworkUsage *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::AttributedNetworkUsage *> *> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectionProfile *> *> > CreateBias( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::ConnectionProfile *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::ConnectionProfile *> *> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ConnectivityInterval *> *> > CreateBias( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::ConnectivityInterval *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::ConnectivityInterval *> *> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::NetworkUsage *> *> > CreateBias( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::NetworkUsage *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::NetworkUsage *> *> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Foundation::Collections::IVectorView<Windows::Networking::Connectivity::ProviderNetworkUsage *> *> > CreateBias( IRpcOptions * , IAsyncOperation<Collections::IVectorView<Networking::Connectivity::ProviderNetworkUsage *> *> * , IAsyncOperationCompletedHandler<Collections::IVectorView<Networking::Connectivity::ProviderNetworkUsage *> *> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionProfile *>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionProfile *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionProfile *> > CreateBias( IRpcOptions * , IAsyncOperation<Networking::Connectivity::ConnectionProfile *> * , IAsyncOperationCompletedHandler<Networking::Connectivity::ConnectionProfile *> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionSession *>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ConnectionSession *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ConnectionSession *> > CreateBias( IRpcOptions * , IAsyncOperation<Networking::Connectivity::ConnectionSession *> * , IAsyncOperationCompletedHandler<Networking::Connectivity::ConnectionSession *> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *> > CreateBias( IRpcOptions * , IAsyncOperation<Networking::Connectivity::ProxyConfiguration *> * , IAsyncOperationCompletedHandler<Networking::Connectivity::ProxyConfiguration *> * );
	/*0001*/
};

struct BiasHelper<Windows::Foundation::IAsyncOperation<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,1> {
	static AutoStubBias<Windows::Foundation::IAsyncOperation<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus>,Windows::Foundation::IAsyncOperationCompletedHandler<enum Windows::Networking::Connectivity::ConnectionProfileDeleteStatus> > CreateBias( IRpcOptions * , IAsyncOperation<enum Networking::Connectivity::ConnectionProfileDeleteStatus> * , IAsyncOperationCompletedHandler<enum Networking::Connectivity::ConnectionProfileDeleteStatus> * );
	/*0001*/
};

enum CATEGORYINFO_FLAGS {
	CATINFO_NORMAL = 0x0,
	CATINFO_COLLAPSED = 0x1,
	CATINFO_HIDDEN = 0x2,
	CATINFO_EXPANDED = 0x4,
	CATINFO_NOHEADER = 0x8,
	CATINFO_NOTCOLLAPSIBLE = 0x10,
	CATINFO_NOHEADERCOUNT = 0x20,
	CATINFO_SUBSETTED = 0x40,
	CATINFO_SEPARATE_IMAGES = 0x80,
	CATINFO_SHOWEMPTY = 0x100
};

struct CATEGORY_INFO {
	/*0000*/ CATEGORYINFO_FLAGS cif;
	/*0004*/ WCHAR wszName[0x104];
	/*020c*/
};

enum CATSORT_FLAGS {
	CATSORT_DEFAULT = 0x0,
	CATSORT_NAME = 0x1
};

class CAutoHandle<void *> : public CTSmartObj<void *,CAutoHandle_Policy<void *> > {
public:
	void CAutoHandle<void *>( CAutoHandle<void *> && );
	void CAutoHandle<void *>( void * );
	void CAutoHandle<void *>();
	CAutoHandle<void *> && Move();
	CAutoHandle<void *> & operator=( CAutoHandle<void *> && );
	void * const & operator void *const &() const;
	void ~CAutoHandle<void *>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CAutoHandle_HGLOBALPolicy {
public:
	static void Destroy( void * );
	static void Clear( void * * );
	static BOOLEAN IsEmpty( void * );
	/*0001*/
};

class CAutoHandle_Policy<HACCEL__ *> {
public:
	static INT DestroyHandle( HACCEL__ * );
	static void Destroy( HACCEL__ * );
	static void Clear( HACCEL__ * * );
	static BOOLEAN IsEmpty( HACCEL__ * );
	/*0001*/
};

class CAutoHandle_Policy<HBITMAP__ *> {
public:
	static INT DestroyHandle( HBITMAP__ * );
	static void Destroy( HBITMAP__ * );
	static void Clear( HBITMAP__ * * );
	static BOOLEAN IsEmpty( HBITMAP__ * );
	/*0001*/
};

class CAutoHandle_Policy<HBRUSH__ *> {
public:
	static INT DestroyHandle( HBRUSH__ * );
	static void Destroy( HBRUSH__ * );
	static void Clear( HBRUSH__ * * );
	static BOOLEAN IsEmpty( HBRUSH__ * );
	/*0001*/
};

class CAutoHandle_Policy<HDC__ *> {
public:
	static INT DestroyHandle( HDC__ * );
	static void Destroy( HDC__ * );
	static void Clear( HDC__ * * );
	static BOOLEAN IsEmpty( HDC__ * );
	/*0001*/
};

class CAutoHandle_Policy<HDESK__ *> {
public:
	static INT DestroyHandle( HDESK__ * );
	static void Destroy( HDESK__ * );
	static void Clear( HDESK__ * * );
	static BOOLEAN IsEmpty( HDESK__ * );
	/*0001*/
};

class CAutoHandle_Policy<HFONT__ *> {
public:
	static INT DestroyHandle( HFONT__ * );
	static void Destroy( HFONT__ * );
	static void Clear( HFONT__ * * );
	static BOOLEAN IsEmpty( HFONT__ * );
	/*0001*/
};

class CAutoHandle_Policy<HICON__ *> {
public:
	static INT DestroyHandle( HICON__ * );
	static void Destroy( HICON__ * );
	static void Clear( HICON__ * * );
	static BOOLEAN IsEmpty( HICON__ * );
	/*0001*/
};

class CAutoHandle_Policy<HINSTANCE__ *> {
public:
	static INT DestroyHandle( HINSTANCE__ * );
	static void Destroy( HINSTANCE__ * );
	static void Clear( HINSTANCE__ * * );
	static BOOLEAN IsEmpty( HINSTANCE__ * );
	/*0001*/
};

class CAutoHandle_Policy<HKEY__ *> {
public:
	static INT DestroyHandle( HKEY__ * );
	static void Destroy( HKEY__ * );
	static void Clear( HKEY__ * * );
	static BOOLEAN IsEmpty( HKEY__ * );
	/*0001*/
};

class CAutoHandle_Policy<HMENU__ *> {
public:
	static INT DestroyHandle( HMENU__ * );
	static void Destroy( HMENU__ * );
	static void Clear( HMENU__ * * );
	static BOOLEAN IsEmpty( HMENU__ * );
	/*0001*/
};

class CAutoHandle_Policy<HPALETTE__ *> {
public:
	static INT DestroyHandle( HPALETTE__ * );
	static void Destroy( HPALETTE__ * );
	static void Clear( HPALETTE__ * * );
	static BOOLEAN IsEmpty( HPALETTE__ * );
	/*0001*/
};

class CAutoHandle_Policy<HPEN__ *> {
public:
	static INT DestroyHandle( HPEN__ * );
	static void Destroy( HPEN__ * );
	static void Clear( HPEN__ * * );
	static BOOLEAN IsEmpty( HPEN__ * );
	/*0001*/
};

class CAutoHandle_Policy<HRGN__ *> {
public:
	static INT DestroyHandle( HRGN__ * );
	static void Destroy( HRGN__ * );
	static void Clear( HRGN__ * * );
	static BOOLEAN IsEmpty( HRGN__ * );
	/*0001*/
};

class CAutoHandle_Policy<HWINSTA__ *> {
public:
	static INT DestroyHandle( HWINSTA__ * );
	static void Destroy( HWINSTA__ * );
	static void Clear( HWINSTA__ * * );
	static BOOLEAN IsEmpty( HWINSTA__ * );
	/*0001*/
};

class CAutoHandle_Policy<HWND__ *> {
public:
	static INT DestroyHandle( HWND__ * );
	static void Destroy( HWND__ * );
	static void Clear( HWND__ * * );
	static BOOLEAN IsEmpty( HWND__ * );
	/*0001*/
};

class CAutoHandle_Policy<_IMAGELIST *> {
public:
	static INT DestroyHandle( _IMAGELIST * );
	static void Destroy( _IMAGELIST * );
	static void Clear( _IMAGELIST * * );
	static BOOLEAN IsEmpty( _IMAGELIST * );
	/*0001*/
};

class CAutoHandle_Policy<void *> {
public:
	static INT DestroyHandle( void * );
	static void Destroy( void * );
	static void Clear( void * * );
	static BOOLEAN IsEmpty( void * );
	/*0001*/
};

class CBaseRPCTimeout {
public:
	void Arm( ULONG );
	void Disarm();
	BOOLEAN TimedOut() const;
protected:
	void CBaseRPCTimeout();
	void ~CBaseRPCTimeout();
private:
	static void s_Callback( void * , UCHAR );
	static ULONG const s_dwDefaultRPCTimeOut;
	static ULONG const s_dwRepeatRPCTimeOut;
	/*0000*/ ULONG _dwThreadId;
	/*0004*/ BOOLEAN _fTimedOut;
	/*0008*/ HRESULT _hrCancelEnabled;
	/*0010*/ void * _hTimer;
protected:
	void * __vecDelDtor( UINT );
	/*0018*/
};

class CBreakOnFailureT<CEmptyType> {
public:
	static void CheckToBreakOnFailure( HRESULT );
private:
	static HRESULT g_hResultToBreakOn;
	/*0001*/
};

struct CBuffer {
	/*0000*/ UCHAR * Cursor;
	/*0008*/ ULONGLONG BytesRemaining;
	/*0010*/
};

class CCoTaskMemPtr<unsigned char> : public CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem> {
public:
	void CCoTaskMemPtr<unsigned char>( CCoTaskMemPtr<unsigned char> && );
	void CCoTaskMemPtr<unsigned char>( UCHAR * );
	void CCoTaskMemPtr<unsigned char>();
	CCoTaskMemPtr<unsigned char> && Move();
	CCoTaskMemPtr<unsigned char> & operator=( CCoTaskMemPtr<unsigned char> && );
	void ~CCoTaskMemPtr<unsigned char>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CCoTaskMemPtr<unsigned short *> : public CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem> {
public:
	void CCoTaskMemPtr<unsigned short *>( CCoTaskMemPtr<unsigned short *> && );
	void CCoTaskMemPtr<unsigned short *>( WCHAR * * );
	void CCoTaskMemPtr<unsigned short *>();
	CCoTaskMemPtr<unsigned short *> && Move();
	CCoTaskMemPtr<unsigned short *> & operator=( CCoTaskMemPtr<unsigned short *> && );
	void ~CCoTaskMemPtr<unsigned short *>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CCoTaskMemPtr<unsigned short> : public CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem> {
public:
	void CCoTaskMemPtr<unsigned short>( CCoTaskMemPtr<unsigned short> && );
	void CCoTaskMemPtr<unsigned short>( WCHAR * );
	void CCoTaskMemPtr<unsigned short>();
	CCoTaskMemPtr<unsigned short> && Move();
	CCoTaskMemPtr<unsigned short> & operator=( CCoTaskMemPtr<unsigned short> && );
	void ~CCoTaskMemPtr<unsigned short>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CContainer_PolicySysFree {
public:
	static void Destroy( WCHAR * );
	/*0001*/
};

enum CDCONTROLSTATEF {
	CDCS_INACTIVE = 0x0,
	CDCS_ENABLED = 0x1,
	CDCS_VISIBLE = 0x2,
	CDCS_ENABLEDVISIBLE = 0x3
};

enum CI_WINDOWS_LOCKDOWN_RESTRICTION {
	CI_WINDOWS_LOCKDOWN_RESTRICTION_NONE = 0x0,
	CI_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK = 0x1,
	CI_WINDOWS_LOCKDOWN_RESTRICTION_NOUNLOCK_PERMANENT = 0x2,
	CI_WINDOWS_LOCKDOWN_RESTRICTION_MAX = 0x3
};

class CLocalMemPtr<unsigned short> : public CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem> {
public:
	void CLocalMemPtr<unsigned short>( CLocalMemPtr<unsigned short> && );
	void CLocalMemPtr<unsigned short>( WCHAR * );
	void CLocalMemPtr<unsigned short>();
	void ~CLocalMemPtr<unsigned short>();
	CLocalMemPtr<unsigned short> & operator=( CLocalMemPtr<unsigned short> && );
	void * __vecDelDtor( UINT );
	/*0008*/
};

struct CM_COLUMNINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwMask;
	/*0008*/ ULONG dwState;
	/*000c*/ UINT uWidth;
	/*0010*/ UINT uDefaultWidth;
	/*0014*/ UINT uIdealWidth;
	/*0018*/ WCHAR wszName[0x50];
	/*00b8*/
};

enum CM_ENUM_FLAGS {
	CM_ENUM_ALL = 0x1,
	CM_ENUM_VISIBLE = 0x2
};

struct CM_EXTENDED_PARAMETER {
	/*0000*/ ULONGLONG Type : 08; // 0x00000000000000ff;
	/*0000*/ ULONGLONG Reserved : 56; // 0xffffffffffffff00;
	/*0008*/ ULONGLONG ULong64;
	/*0008*/ void * Pointer;
	/*0008*/ ULONGLONG Size;
	/*0008*/ void * Handle;
	/*0008*/ ULONG ULong;
	/*0008*/ ULONG AccessMask;
	/*0010*/
};

enum CM_EXTENDED_PARAMETER_TYPE {
	CmExtendedParameterInvalidType = 0x0,
	CmExtendedParameterTrustClassKey = 0x1,
	CmExtendedParameterEvent = 0x2,
	CmExtendedParameterFileAccessToken = 0x3,
	CmExtendedParameterMax = 0x4
};

enum CM_MASK {
	CM_MASK_WIDTH = 0x1,
	CM_MASK_DEFAULTWIDTH = 0x2,
	CM_MASK_IDEALWIDTH = 0x4,
	CM_MASK_NAME = 0x8,
	CM_MASK_STATE = 0x10
};

struct CM_Power_Data_s {
	/*0000*/ ULONG PD_Size;
	/*0004*/ _DEVICE_POWER_STATE PD_MostRecentPowerState;
	/*0008*/ ULONG PD_Capabilities;
	/*000c*/ ULONG PD_D1Latency;
	/*0010*/ ULONG PD_D2Latency;
	/*0014*/ ULONG PD_D3Latency;
	/*0018*/ _DEVICE_POWER_STATE PD_PowerStateMapping[0x7];
	/*0034*/ _SYSTEM_POWER_STATE PD_DeepestSystemWake;
	/*0038*/
};

enum CM_SET_WIDTH_VALUE {
	CM_WIDTH_USEDEFAULT = 0xffffffff,
	CM_WIDTH_AUTOSIZE = 0xfffffffe
};

enum CM_STATE {
	CM_STATE_NONE = 0x0,
	CM_STATE_VISIBLE = 0x1,
	CM_STATE_FIXEDWIDTH = 0x2,
	CM_STATE_NOSORTBYFOLDERNESS = 0x4,
	CM_STATE_ALWAYSVISIBLE = 0x8
};

class CMarshaledInterface {

	struct BoolStruct {
		/*0000*/ INT Member;
		/*0004*/
	};


	class CMarshalStream : public RuntimeClass<RuntimeClassFlags<2>,IUnknown> {
	public:
		HRESULT RuntimeClassInitialize( IStream * );
		HRESULT RuntimeClassInitialize( _GUID const & , IUnknown * , MARSHAL_KIND );
		/*    */ virtual void ~CMarshalStream();
		BOOLEAN CanUnmarshalMultipleTimes() const;
		HRESULT Unmarshal( _GUID const & , void * * );
	private:
		/*0010*/ ComPtr<IStream> m_stream;
		/*0018*/ MARSHAL_KIND m_marshalingKind;
		/*0020*/ AgileGitPtr m_agileRef;
		/*0028*/ ULONG m_marshalThreadId;
	public:
		void CMarshalStream();
		void __local_vftable_ctor_closure();
		/*0018*/ virtual void * __vecDelDtor( UINT );
		/*0030*/
	};

public:
	void CMarshaledInterface( CMarshaledInterface && );
	void CMarshaledInterface( CMarshaledInterface const & );
	void CMarshaledInterface();
	CMarshaledInterface & operator=( CMarshaledInterface && );
	CMarshaledInterface & operator=( CMarshaledInterface const & );
	HRESULT Marshal( _GUID const & , IUnknown * , MARSHAL_KIND );
	HRESULT Unmarshal( _GUID const & , void * * );
	HRESULT UnmarshalAndRelease( _GUID const & , void * * );
	void Release();
	BOOLEAN HasStream() const;
	HRESULT AttachStream( IStream * , tagMSHLFLAGS );
	INT BoolStruct::* operator int CMarshaledInterface::BoolStruct::*() const;
private:
	HRESULT _Unmarshal( _GUID const & , void * * , BOOLEAN );
	/*0000*/ ComPtr<CMarshaledInterface::CMarshalStream> m_marshal;
public:
	void ~CMarshaledInterface();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CMemString<CMemString_PolicyCoTaskMem> {
	void CMemString<CMemString_PolicyCoTaskMem>( CMemString<CMemString_PolicyCoTaskMem> const & );
public:
	void CMemString<CMemString_PolicyCoTaskMem>( CMemString<CMemString_PolicyCoTaskMem> && );
	void CMemString<CMemString_PolicyCoTaskMem>();
	void ~CMemString<CMemString_PolicyCoTaskMem>();
	WCHAR * * operator&();
	WCHAR * operator unsigned short *();
	WCHAR const * operator const unsigned short *() const;
	CMemString<CMemString_PolicyCoTaskMem> && Move();
private:
	CMemString<CMemString_PolicyCoTaskMem> & operator=( CMemString<CMemString_PolicyCoTaskMem> const & );
public:
	CMemString<CMemString_PolicyCoTaskMem> & operator=( CMemString<CMemString_PolicyCoTaskMem> && );
	WCHAR const * Get() const;
	void Attach( WCHAR * );
	WCHAR * Detach();
	void Release();
	BOOLEAN IsEmpty() const;
private:
	/*0000*/ WCHAR * _psz;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

struct CMemString_PolicyAutoMem {
	static void Free( WCHAR * );
	/*0001*/
};

struct CMemString_PolicyCoTaskMem {
	static void Free( WCHAR * );
	/*0001*/
};

struct CMemString_PolicyLocalMem {
	static void Free( WCHAR * );
	/*0001*/
};

union COLORREF_COMPONENTS {
	
	/*0000*/ <unnamed-type-component> component;
	/*0000*/ ULONG _cr;
	void COLORREF_COMPONENTS( ULONG );
	/*0004*/
};

enum COMMAND_SET {
	CS_FIRST = 0x0,
	CS_SORTORDER = 0x0,
	CS_NAVPANE = 0x1,
	CS_PREVIEWPANE = 0x2,
	CS_SHOWHIDE = 0x3,
	CS_CLIPBOARD = 0x4,
	CS_VOLUMEADDREMOVE = 0x5,
	CS_LIBRARYADD = 0x6,
	CS_LEGACYBARSCHANGED = 0x7,
	CS_WORKOFFLINE = 0x8,
	CS_LAST = 0x9
};

enum COMPARTMENT_ID {
	UNSPECIFIED_COMPARTMENT_ID = 0x0,
	DEFAULT_COMPARTMENT_ID = 0x1
};

enum COM_CALL_LOCALITY {
	COM_CALL_LOCALITY_SAME_PROCESS = 0x0,
	COM_CALL_LOCALITY_CROSS_PROCESS = 0x1,
	COM_CALL_LOCALITY_CROSS_CONTAINER = 0x2,
	COM_CALL_LOCALITY_CROSS_MACHINE = 0x3
};

enum CONFIRMATIONRESPONSE {
	CONFRES_CONTINUE = 0x0,
	CONFRES_SKIP = 0x1,
	CONFRES_RETRY = 0x2,
	CONFRES_RENAME = 0x3,
	CONFRES_CANCEL = 0x4,
	CONFRES_UNDO = 0x5,
	CONFRES_RENAME_LEFT = 0x3,
	CONFRES_RENAME_RIGHT = 0x6,
	CONFRES_ELEVATE = 0x7,
	CONFRES_CLOSE = 0x8
};

struct CONFIRMSAFETY {
	/*0000*/ _GUID clsid;
	/*0010*/ IUnknown * pUnk;
	/*0018*/ ULONG dwFlags;
	/*0020*/
};

struct CONFIRM_CONFLICT_ITEM {
	/*0000*/ IShellItem2 * pShellItem;
	/*0008*/ WCHAR * pszOriginalName;
	/*0010*/ WCHAR * pszAlternateName;
	/*0018*/ WCHAR * pszLocationShort;
	/*0020*/ WCHAR * pszLocationFull;
	/*0028*/ SYNCMGR_CONFLICT_ITEM_TYPE nType;
	/*0030*/
};

struct CONFLICT_ITEM_METADATA {
	/*0000*/ _FILETIME ftDateModified;
	/*0008*/ ULONGLONG ullSize;
	/*0010*/ WCHAR * pszItemName;
	/*0018*/ WCHAR * pszItemPath;
	/*0020*/ INT fHasConnectedElement;
	/*0028*/
};

struct COPYFILE2_EXTENDED_PARAMETERS {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwCopyFlags;
	/*0008*/ INT * pfCancel;
	/*0010*/ _COPYFILE2_MESSAGE_ACTION (* pProgressRoutine)( COPYFILE2_MESSAGE const * , void * );
	/*0018*/ void * pvCallbackContext;
	/*0020*/
};

struct COPYFILE2_MESSAGE {
	
	/*0000*/ _COPYFILE2_MESSAGE_TYPE Type;
	/*0004*/ ULONG dwPadding;
	/*0008*/ <unnamed-type-Info> Info;
	/*0050*/
};

struct CORRELATION_VECTOR {
	/*0000*/ CHAR Version;
	/*0001*/ CHAR Vector[0x81];
	/*0082*/
};

enum COST_SET_MEDIA {
	COST_SET_MEDIA_UNKNOWN = 0x0,
	COST_SET_MEDIA_WLAN = 0x1,
	COST_SET_MEDIA_3G = 0x2,
	COST_SET_MEDIA_4G = 0x3
};

enum COST_SET_SOURCE {
	COST_SET_SOURCE_UNKNOWN = 0x0,
	COST_SET_SOURCE_GP = 0x1,
	COST_SET_SOURCE_USER = 0x2,
	COST_SET_SOURCE_PUBLIC = 0x3,
	COST_SET_SOURCE_OPERATOR = 0x4
};

struct CO_DEVICE_CATALOG_COOKIE__ {
	/*0000*/ INT unused;
	/*0004*/
};

enum CO_MARSHALING_CONTEXT_ATTRIBUTES {
	CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0x0,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = 0x80000000,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = 0x80000001,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = 0x80000002,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = 0x80000003,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = 0x80000004,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = 0x80000005,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = 0x80000006,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = 0x80000007,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = 0x80000008,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = 0x80000009,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = 0x8000000a,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = 0x8000000b,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = 0x8000000c,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = 0x8000000d,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = 0x8000000e,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = 0x8000000f,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = 0x80000010,
	CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = 0x80000011
};

struct CO_MTA_USAGE_COOKIE__ {
	/*0000*/ INT unused;
	/*0004*/
};

enum CPVIEW {
	CPVIEW_CLASSIC = 0x0,
	CPVIEW_ALLITEMS = 0x0,
	CPVIEW_CATEGORY = 0x1,
	CPVIEW_HOME = 0x1
};

struct CREATE_USN_JOURNAL_DATA {
	/*0000*/ ULONGLONG MaximumSize;
	/*0008*/ ULONGLONG AllocationDelta;
	/*0010*/
};

enum CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS {
	CPAO_NONE = 0x0,
	CPAO_EMPTY_LOCAL = 0x1,
	CPAO_EMPTY_CONNECTED = 0x2
};

enum CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS {
	CPCFO_NONE = 0x0,
	CPCFO_ENABLE_PASSWORD_REVEAL = 0x1,
	CPCFO_IS_EMAIL_ADDRESS = 0x2,
	CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = 0x4,
	CPCFO_NUMBERS_ONLY = 0x8,
	CPCFO_SHOW_ENGLISH_KEYBOARD = 0x10
};

class CRPCTimeout : public CBaseRPCTimeout {
public:
	void CRPCTimeout( ULONG );
private:
	static void * operator new( ULONGLONG );
	static void * operator new[]( ULONGLONG );
public:
	void ~CRPCTimeout();
	void __dflt_ctor_closure();
	void * __vecDelDtor( UINT );
	/*0018*/
};

class CSTARequiringThreadRefTaker : public CThreadRefTaker {
public:
	void CSTARequiringThreadRefTaker( CSTARequiringThreadRefTaker && );
	void CSTARequiringThreadRefTaker( CSTARequiringThreadRefTaker const & );
	void CSTARequiringThreadRefTaker();
	/*    */ virtual void ~CSTARequiringThreadRefTaker();
	CSTARequiringThreadRefTaker & operator=( CSTARequiringThreadRefTaker && );
	CSTARequiringThreadRefTaker & operator=( CSTARequiringThreadRefTaker const & );
	void __local_vftable_ctor_closure();
	/*0000*/ virtual void * __vecDelDtor( UINT );
	/*0010*/
};

enum CSTN_FILE_EXTENSION_OPTION {
	CTSN_IGNORE_FILE_EXTENSION = 0x0,
	CTSN_UNIQUE_NAME_WITH_EXTENSION = 0x1
};

class CTCoAllocPolicy {
	static ULONGLONG _CoTaskMemSize( void * );
public:
	static HRESULT Alloc( void * , ULONG , ULONGLONG , void * * );
	static HRESULT Realloc( void * , ULONG , void * , ULONGLONG , void * * );
	/*0001*/
};

class CTContainer_PolicyCoTaskMem {
public:
	static void Destroy( void * );
	/*0001*/
};

class CTContainer_PolicyHeapMem {
public:
	static INT DestroyMem( void * );
	/*0001*/
};

class CTContainer_PolicyLocalMem {
public:
	static INT DestroyMem( void * );
	/*0001*/
};

class CTGlobalAllocPolicy {
public:
	static HRESULT Alloc( void * , ULONG , ULONGLONG , void * * );
	static HRESULT Realloc( void * , ULONG , void * , ULONGLONG , void * * );
	/*0001*/
};

class CTHeapAllocPolicy {
public:
	static HRESULT Alloc( void * , ULONG , ULONGLONG , void * * );
	static HRESULT Realloc( void * , ULONG , void * , ULONGLONG , void * * );
	/*0001*/
};

class CTLocalAllocPolicy {
public:
	static HRESULT Alloc( void * , ULONG , ULONGLONG , void * * );
	static HRESULT Realloc( void * , ULONG , void * , ULONGLONG , void * * );
	/*0001*/
};

class CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > {
	void CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >( CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > const & );
public:
	void CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >( CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > && );
	void CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >( UCHAR * const & );
	void CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >();
	void ~CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >();
private:
	void Attach( CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > const & );
public:
	void Attach( UCHAR * const & );
	UCHAR * Detach();
	UCHAR * const & Get() const;
	UCHAR * * operator&();
	UCHAR * * GetAddress();
	void Release();
	BOOLEAN IsEmpty() const;
	CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > && Move();
private:
	CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > & operator=( UCHAR * const & );
	CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > & operator=( CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > const & );
public:
	CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > & operator=( CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > && );
protected:
	/*0000*/ UCHAR * _obj;
	void Clear();
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > {
	void CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >( CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > const & );
public:
	void CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >( CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > && );
	void CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >( WCHAR * * const & );
	void CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >();
	void ~CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >();
private:
	void Attach( CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > const & );
public:
	void Attach( WCHAR * * const & );
	WCHAR * * Detach();
	WCHAR * * const & Get() const;
	WCHAR * * * operator&();
	WCHAR * * * GetAddress();
	void Release();
	BOOLEAN IsEmpty() const;
	CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > && Move();
private:
	CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > & operator=( WCHAR * * const & );
	CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > & operator=( CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > const & );
public:
	CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > & operator=( CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > && );
protected:
	/*0000*/ WCHAR * * _obj;
	void Clear();
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > {
	void CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > const & );
public:
	void CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > && );
	void CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >( WCHAR * const & );
	void CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >();
	void ~CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> >();
private:
	void Attach( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > const & );
public:
	void Attach( WCHAR * const & );
	WCHAR * Detach();
	WCHAR * const & Get() const;
	WCHAR * * operator&();
	WCHAR * * GetAddress();
	void Release();
	BOOLEAN IsEmpty() const;
	CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > && Move();
private:
	CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > & operator=( WCHAR * const & );
	CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > & operator=( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > const & );
public:
	CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > & operator=( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > && );
protected:
	/*0000*/ WCHAR * _obj;
	void Clear();
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > {
	void CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> >( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > const & );
public:
	void CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> >( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > && );
	void CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> >( WCHAR * const & );
	void CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> >();
	void ~CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> >();
private:
	void Attach( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > const & );
public:
	void Attach( WCHAR * const & );
	WCHAR * Detach();
	WCHAR * const & Get() const;
	WCHAR * * operator&();
	WCHAR * * GetAddress();
	void Release();
	BOOLEAN IsEmpty() const;
	CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > && Move();
private:
	CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > & operator=( WCHAR * const & );
	CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > & operator=( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > const & );
public:
	CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > & operator=( CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > && );
protected:
	/*0000*/ WCHAR * _obj;
	void Clear();
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CTSmartObj<void *,CAutoHandle_Policy<void *> > {
	void CTSmartObj<void *,CAutoHandle_Policy<void *> >( CTSmartObj<void *,CAutoHandle_Policy<void *> > const & );
public:
	void CTSmartObj<void *,CAutoHandle_Policy<void *> >( CTSmartObj<void *,CAutoHandle_Policy<void *> > && );
	void CTSmartObj<void *,CAutoHandle_Policy<void *> >( void * const & );
	void CTSmartObj<void *,CAutoHandle_Policy<void *> >();
	void ~CTSmartObj<void *,CAutoHandle_Policy<void *> >();
private:
	void Attach( CTSmartObj<void *,CAutoHandle_Policy<void *> > const & );
public:
	void Attach( void * const & );
	void * Detach();
	void * const & Get() const;
	void * * operator&();
	void * * GetAddress();
	void Release();
	BOOLEAN IsEmpty() const;
	CTSmartObj<void *,CAutoHandle_Policy<void *> > && Move();
private:
	CTSmartObj<void *,CAutoHandle_Policy<void *> > & operator=( void * const & );
	CTSmartObj<void *,CAutoHandle_Policy<void *> > & operator=( CTSmartObj<void *,CAutoHandle_Policy<void *> > const & );
public:
	CTSmartObj<void *,CAutoHandle_Policy<void *> > & operator=( CTSmartObj<void *,CAutoHandle_Policy<void *> > && );
protected:
	/*0000*/ void * _obj;
	void Clear();
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem> : public CTSmartObj<unsigned char *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > {
public:
	void CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem>( CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem> && );
	void CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem>( UCHAR * );
	void CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem>();
	UCHAR * const & operator unsigned char *const &() const;
	UCHAR * const & operator->() const;
	CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem> && Move();
	CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem> & operator=( CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem> && );
	void ~CTSmartPtr<unsigned char,CTContainer_PolicyCoTaskMem>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem> : public CTSmartObj<unsigned short * *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > {
public:
	void CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem>( CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem> && );
	void CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem>( WCHAR * * );
	void CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem>();
	WCHAR * * const & operator unsigned short **const &() const;
	WCHAR * * const & operator->() const;
	CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem> && Move();
	CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem> & operator=( CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem> && );
	void ~CTSmartPtr<unsigned short *,CTContainer_PolicyCoTaskMem>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem> : public CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> > {
public:
	void CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem>( CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem> && );
	void CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem>( WCHAR * );
	void CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem>();
	WCHAR * const & operator unsigned short *const &() const;
	WCHAR * const & operator->() const;
	CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem> && Move();
	CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem> & operator=( CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem> && );
	void ~CTSmartPtr<unsigned short,CTContainer_PolicyCoTaskMem>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem> : public CTSmartObj<unsigned short *,CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> > {
public:
	void CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem>( CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem> && );
	void CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem>( WCHAR * );
	void CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem>();
	WCHAR * const & operator unsigned short *const &() const;
	WCHAR * const & operator->() const;
	CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem> && Move();
	CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem> & operator=( CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem> && );
	void ~CTSmartPtr<unsigned short,CTContainer_PolicyLocalMem>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class CTSmartPtr_PolicyComplete<CTContainer_PolicyCoTaskMem> : public CTContainer_PolicyCoTaskMem {
	/*0001*/
};

class CTSmartPtr_PolicyComplete<CTContainer_PolicyLocalMem> : public CTContainer_PolicyLocalMem {
	/*0001*/
};

class CThreadRefTaker {
public:
	void CThreadRefTaker( CThreadRefTaker const & );
	void CThreadRefTaker();
	/*0000*/ virtual void ~CThreadRefTaker();
protected:
	/*0008*/ IUnknown * _punkThreadRef;
public:
	CThreadRefTaker & operator=( CThreadRefTaker const & );
	void __local_vftable_ctor_closure();
	/*0000*/ virtual void * __vecDelDtor( UINT );
	/*0010*/
};

class CUIInfoT<CEmptyType> {
public:
	static HRESULT CanRunUI( INT * );
private:
	static HRESULT GetUserObjectName( void * , WCHAR * * );
	/*0001*/
};

class CUXDisplayUtilT<CEmptyType> {

	class ARGB : public ARGBBASE {
	public:
		void ARGB( ULONG const );
		void ARGB( UCHAR const , UCHAR const , UCHAR const , UCHAR const );
		void ARGB();
		ULONG operator unsigned long() const;
		/*0004*/
	};


	class ARGBBASE {
	public:
		/*0000*/ UCHAR Blue;
		/*0001*/ UCHAR Green;
		/*0002*/ UCHAR Red;
		/*0003*/ UCHAR Alpha;
		void ARGBBASE( ULONG const );
		void ARGBBASE( UCHAR const , UCHAR const , UCHAR const , UCHAR const );
		void ARGBBASE();
		ULONG operator unsigned long() const;
		/*0004*/
	};

public:
	static INT GetPrimaryMonitorPhysicalWorkArea( tagRECT * );
	static HRESULT DrawTextInternal( HDC__ * , WCHAR const * , HFONT__ * , ULONG , tagRECT * );
	static HRESULT CreateFontInternal( LONG , WCHAR const * , LONG , INT , HFONT__ * * );
	static HRESULT GetInitialBitmapSize( _BITMAP_TYPE , tagRECT * , INT * , INT * );
	static HRESULT CalculateBorders( _BITMAP_TYPE , INT * , INT * , INT * , INT * );
	static HRESULT GetFontSizes( _BITMAP_TYPE , LONG * , LONG * );
	static HRESULT CreateBitmap( HDC__ * , INT , INT , HBITMAP__ * * , tagBITMAPINFO * );
	static HRESULT IsHighContrastModeOn( INT * );
	static void UpdateRectForDPI( INT , tagRECT * );
	static HRESULT CalculateBitMapPosition( _BITMAP_TYPE , INT , INT , INT , tagPOINT * );
	static HRESULT IsValidDibSection( HDC__ * , INT * );
	static HRESULT GetDPISetting( INT * , tagRECT * );
	static HRESULT DrawThemeText( HDC__ * , WCHAR const * , HFONT__ * , ULONG , _BITMAP_TYPE , INT , tagRECT * );
private:
	static void DrawTextOverARGB( tagRGBQUAD * , INT , INT , INT , INT , tagRGBQUAD * , INT , INT , INT , ULONG );
	/*0001*/
};

class CUxDisplayStringsT<CEmptyType> {
public:
	static HRESULT GetAllPreferredStrings( WCHAR * , UINT , WCHAR * * * , INT * , _LANG_FONT_NAMES * );
private:
	static HRESULT GetPreferredLanguagesArray( ULONG * * , ULONG * );
	static HRESULT CheckBiDirectionalLanguage( ULONG , INT * );
	static HRESULT GetFontsForLCIDIndex( UINT , _LANG_FONT_NAMES * );
	/*0001*/
};

enum CWMO_FLAGS {
	CWMO_DEFAULT = 0x0,
	CWMO_DISPATCH_CALLS = 0x1,
	CWMO_DISPATCH_WINDOW_MESSAGES = 0x2
};

class ConditionVariable : public Lock {
	void ConditionVariable( ConditionVariable const & );
public:
	void ConditionVariable();
	HRESULT Sleep();
	void Wake();
private:
	ConditionVariable & operator=( ConditionVariable const & );
	/*0028*/ _RTL_CONDITION_VARIABLE conditionVariable;
public:
	void ~ConditionVariable();
	void * __vecDelDtor( UINT );
	/*0030*/
};

struct CsFrame {
	/*0000*/ unsigned __int8 SavedR10;
	/*0008*/ unsigned __int8 SavedR11;
	/*0010*/
};

enum DATAOBJ_GET_ITEM_FLAGS {
	DOGIF_DEFAULT = 0x0,
	DOGIF_TRAVERSE_LINK = 0x1,
	DOGIF_NO_HDROP = 0x2,
	DOGIF_NO_URL = 0x4,
	DOGIF_ONLY_IF_ONE = 0x8
};

enum DEFAULTSAVEFOLDERTYPE {
	DSFT_DETECT = 0x1,
	DSFT_PRIVATE = 0x2,
	DSFT_PUBLIC = 0x3
};

enum DEFAULT_FOLDER_MENU_RESTRICTIONS {
	DFMR_DEFAULT = 0x0,
	DFMR_NO_STATIC_VERBS = 0x8,
	DFMR_STATIC_VERBS_ONLY = 0x10,
	DFMR_NO_RESOURCE_VERBS = 0x20,
	DFMR_OPTIN_HANDLERS_ONLY = 0x40,
	DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY = 0x80,
	DFMR_USE_SPECIFIED_HANDLERS = 0x100,
	DFMR_USE_SPECIFIED_VERBS = 0x200,
	DFMR_NO_ASYNC_VERBS = 0x400,
	DFMR_NO_NATIVECPU_VERBS = 0x800
};

enum DEF_SHARE_ID {
	DEFSHAREID_USERS = 0x1,
	DEFSHAREID_PUBLIC = 0x2
};

enum DELAYED_RETRIEVAL_TYPE {
	DRT_FILEITEM = 0x0,
	DRT_PREFETCHEDTHUMBNAIL = 0x1,
	DRT_PREFETCHEDPROPERTIES = 0x2,
	DRT_PROPERTIES = 0x3,
	DRT_MUSICPROPERTIES = 0x4,
	DRT_IMAGEPROPERTIES = 0x5,
	DRT_VIDEOPROPERTIES = 0x6,
	DRT_DOCUMENTPROPERTIES = 0x7,
	DRT_BASICPROPERTIES = 0x8,
	DRT_REMOTEFILEITEM = 0x9
};

struct DELEGATEITEMID {
	/*0000*/ USHORT cbSize;
	/*0002*/ USHORT wOuter;
	/*0004*/ USHORT cbInner;
	/*0006*/ UCHAR rgb[0x1];
	/*0007*/
};

struct DELETE_USN_JOURNAL_DATA {
	/*0000*/ ULONGLONG UsnJournalID;
	/*0008*/ ULONG DeleteFlags;
	/*0010*/
};

struct DESKBANDINFO {
	/*0000*/ ULONG dwMask;
	/*0004*/ _POINTL ptMinSize;
	/*000c*/ _POINTL ptMaxSize;
	/*0014*/ _POINTL ptIntegral;
	/*001c*/ _POINTL ptActual;
	/*0024*/ WCHAR wszTitle[0x100];
	/*0224*/ ULONG dwModeFlags;
	/*0228*/ ULONG crBkgnd;
	/*022c*/
};

enum DESKTOP_SLIDESHOW_DIRECTION {
	DSD_FORWARD = 0x0,
	DSD_BACKWARD = 0x1
};

enum DESKTOP_SLIDESHOW_OPTIONS {
	DSO_SHUFFLEIMAGES = 0x1
};

enum DESKTOP_SLIDESHOW_STATE {
	DSS_ENABLED = 0x1,
	DSS_SLIDESHOW = 0x2,
	DSS_DISABLED_BY_REMOTE_SESSION = 0x4
};

enum DESKTOP_VISIBILITY_NOTIFICATION_TYPE {
	DVNT_GLOBAL = 0x0,
	DVNT_PERMONITOR = 0x1
};

enum DESKTOP_WALLPAPER_POSITION {
	DWPOS_CENTER = 0x0,
	DWPOS_TILE = 0x1,
	DWPOS_STRETCH = 0x2,
	DWPOS_FIT = 0x3,
	DWPOS_FILL = 0x4,
	DWPOS_SPAN = 0x5
};

enum DESTLISTKIND {
	DESTLISTKIND_FIRST = 0x0,
	DESTLISTKIND_AUTOMATIC = 0x0,
	DESTLISTKIND_CUSTOM = 0x1,
	DESTLISTKIND_LAST = 0x1
};

enum DESTLISTTYPE {
	DLT_PINNED = 0x0,
	DLT_RECENT = 0x1,
	DLT_FREQUENT = 0x2
};

enum DEVICE_SCALE_FACTOR {
	DEVICE_SCALE_FACTOR_INVALID = 0x0,
	SCALE_100_PERCENT = 0x64,
	SCALE_120_PERCENT = 0x78,
	SCALE_125_PERCENT = 0x7d,
	SCALE_140_PERCENT = 0x8c,
	SCALE_150_PERCENT = 0x96,
	SCALE_160_PERCENT = 0xa0,
	SCALE_175_PERCENT = 0xaf,
	SCALE_180_PERCENT = 0xb4,
	SCALE_200_PERCENT = 0xc8,
	SCALE_225_PERCENT = 0xe1,
	SCALE_250_PERCENT = 0xfa,
	SCALE_300_PERCENT = 0x12c,
	SCALE_350_PERCENT = 0x15e,
	SCALE_400_PERCENT = 0x190,
	SCALE_450_PERCENT = 0x1c2,
	SCALE_500_PERCENT = 0x1f4
};

class DH_FILENT : public SH<void *,DH_FILENT> {
public:
	void DH_FILENT( void * );
	void DH_FILENT( DH_FILENT const & );
	void DH_FILENT();
	DH_FILENT & operator=( void * );
	DH_FILENT & operator=( DH_FILENT const & );
	DH_FILENT & operator=( INT const );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
	void ~DH_FILENT();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class DH_HANDLE : public SH<void *,DH_HANDLE> {
public:
	void DH_HANDLE( void * );
	void DH_HANDLE( DH_HANDLE const & );
	void DH_HANDLE();
	DH_HANDLE & operator=( void * );
	DH_HANDLE & operator=( DH_HANDLE const & );
	DH_HANDLE & operator=( INT const );
	static void Destroy( void * );
	void ~DH_HANDLE();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class DH_HMODULE : public SH<HINSTANCE__ *,DH_HMODULE> {
public:
	void DH_HMODULE( HINSTANCE__ * );
	void DH_HMODULE( DH_HMODULE const & );
	void DH_HMODULE();
	DH_HMODULE & operator=( HINSTANCE__ * );
	DH_HMODULE & operator=( DH_HMODULE const & );
	DH_HMODULE & operator=( INT const );
	static void Destroy( HINSTANCE__ * );
	void ~DH_HMODULE();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class DH_WAITHANDLE : public SH<void *,DH_WAITHANDLE> {
public:
	void DH_WAITHANDLE( void * );
	void DH_WAITHANDLE( DH_WAITHANDLE const & );
	void DH_WAITHANDLE();
	DH_WAITHANDLE & operator=( void * );
	DH_WAITHANDLE & operator=( DH_WAITHANDLE const & );
	DH_WAITHANDLE & operator=( INT const );
	static void Destroy( void * );
	void ~DH_WAITHANDLE();
	void * __vecDelDtor( UINT );
	/*0008*/
};

enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS {
	DCDC_DEFAULT = 0x0,
	DCDC_DISABLE_FONT_UPDATE = 0x1,
	DCDC_DISABLE_RELAYOUT = 0x2
};

enum DIALOG_DPI_CHANGE_BEHAVIORS {
	DDC_DEFAULT = 0x0,
	DDC_DISABLE_ALL = 0x1,
	DDC_DISABLE_RESIZE = 0x2,
	DDC_DISABLE_CONTROL_RELAYOUT = 0x4
};

struct DISK_SPACE_INFORMATION {
	/*0000*/ ULONGLONG ActualTotalAllocationUnits;
	/*0008*/ ULONGLONG ActualAvailableAllocationUnits;
	/*0010*/ ULONGLONG ActualPoolUnavailableAllocationUnits;
	/*0018*/ ULONGLONG CallerTotalAllocationUnits;
	/*0020*/ ULONGLONG CallerAvailableAllocationUnits;
	/*0028*/ ULONGLONG CallerPoolUnavailableAllocationUnits;
	/*0030*/ ULONGLONG UsedAllocationUnits;
	/*0038*/ ULONGLONG TotalReservedAllocationUnits;
	/*0040*/ ULONGLONG VolumeStorageReserveAllocationUnits;
	/*0048*/ ULONGLONG AvailableCommittedAllocationUnits;
	/*0050*/ ULONGLONG PoolAvailableAllocationUnits;
	/*0058*/ ULONG SectorsPerAllocationUnit;
	/*005c*/ ULONG BytesPerSector;
	/*0060*/
};

struct DISPLAYCONFIG_2DREGION {
	/*0000*/ UINT cx;
	/*0004*/ UINT cy;
	/*0008*/
};

struct DISPLAYCONFIG_ADAPTER_NAME {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ WCHAR adapterDevicePath[0x80];
	/*0114*/
};

struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO {
	/*0000*/ _POINTL PathSourceSize;
	/*0008*/ _RECTL DesktopImageRegion;
	/*0018*/ _RECTL DesktopImageClip;
	/*0028*/
};

struct DISPLAYCONFIG_DEVICE_INFO_HEADER {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_TYPE type;
	/*0004*/ UINT size;
	/*0008*/ _LUID adapterId;
	/*0010*/ UINT id;
	/*0014*/
};

enum DISPLAYCONFIG_DEVICE_INFO_TYPE {
	DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 0x1,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 0x2,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 0x3,
	DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 0x4,
	DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 0x5,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 0x6,
	DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 0x7,
	DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 0x8,
	DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 0x9,
	DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 0xa,
	DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 0xb,
	DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_MODE_INFO {
	/*0000*/ DISPLAYCONFIG_MODE_INFO_TYPE infoType;
	/*0004*/ UINT id;
	/*0008*/ _LUID adapterId;
	/*0010*/ DISPLAYCONFIG_TARGET_MODE targetMode;
	/*0010*/ DISPLAYCONFIG_SOURCE_MODE sourceMode;
	/*0010*/ DISPLAYCONFIG_DESKTOP_IMAGE_INFO desktopImageInfo;
	/*0040*/
};

enum DISPLAYCONFIG_MODE_INFO_TYPE {
	DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 0x1,
	DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 0x2,
	DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 0x3,
	DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_PATH_INFO {
	/*0000*/ DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
	/*0014*/ DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
	/*0044*/ UINT flags;
	/*0048*/
};

struct DISPLAYCONFIG_PATH_SOURCE_INFO {
	/*0000*/ _LUID adapterId;
	/*0008*/ UINT id;
	/*000c*/ UINT modeInfoIdx;
	/*000c*/ UINT cloneGroupId : 16; // 0x0000ffff;
	/*000c*/ UINT sourceModeInfoIdx : 16; // 0xffff0000;
	/*0010*/ UINT statusFlags;
	/*0014*/
};

struct DISPLAYCONFIG_PATH_TARGET_INFO {
	/*0000*/ _LUID adapterId;
	/*0008*/ UINT id;
	/*000c*/ UINT modeInfoIdx;
	/*000c*/ UINT desktopModeInfoIdx : 16; // 0x0000ffff;
	/*000c*/ UINT targetModeInfoIdx : 16; // 0xffff0000;
	/*0010*/ DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
	/*0014*/ DISPLAYCONFIG_ROTATION rotation;
	/*0018*/ DISPLAYCONFIG_SCALING scaling;
	/*001c*/ DISPLAYCONFIG_RATIONAL refreshRate;
	/*0024*/ DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
	/*0028*/ INT targetAvailable;
	/*002c*/ UINT statusFlags;
	/*0030*/
};

enum DISPLAYCONFIG_PIXELFORMAT {
	DISPLAYCONFIG_PIXELFORMAT_8BPP = 0x1,
	DISPLAYCONFIG_PIXELFORMAT_16BPP = 0x2,
	DISPLAYCONFIG_PIXELFORMAT_24BPP = 0x3,
	DISPLAYCONFIG_PIXELFORMAT_32BPP = 0x4,
	DISPLAYCONFIG_PIXELFORMAT_NONGDI = 0x5,
	DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_RATIONAL {
	/*0000*/ UINT Numerator;
	/*0004*/ UINT Denominator;
	/*0008*/
};

enum DISPLAYCONFIG_ROTATION {
	DISPLAYCONFIG_ROTATION_IDENTITY = 0x1,
	DISPLAYCONFIG_ROTATION_ROTATE90 = 0x2,
	DISPLAYCONFIG_ROTATION_ROTATE180 = 0x3,
	DISPLAYCONFIG_ROTATION_ROTATE270 = 0x4,
	DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xffffffff
};

enum DISPLAYCONFIG_SCALING {
	DISPLAYCONFIG_SCALING_IDENTITY = 0x1,
	DISPLAYCONFIG_SCALING_CENTERED = 0x2,
	DISPLAYCONFIG_SCALING_STRETCHED = 0x3,
	DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 0x4,
	DISPLAYCONFIG_SCALING_CUSTOM = 0x5,
	DISPLAYCONFIG_SCALING_PREFERRED = 0x80,
	DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xffffffff
};

enum DISPLAYCONFIG_SCANLINE_ORDERING {
	DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0x0,
	DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 0x1,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 0x2,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 0x2,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 0x3,
	DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT bootPersistenceOn : 01; // 0x00000001;
	/*0014*/ UINT reserved : 31; // 0xfffffffe;
	/*0014*/ UINT value;
	/*0018*/
};

struct DISPLAYCONFIG_SOURCE_DEVICE_NAME {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ WCHAR viewGdiDeviceName[0x20];
	/*0054*/
};

struct DISPLAYCONFIG_SOURCE_MODE {
	/*0000*/ UINT width;
	/*0004*/ UINT height;
	/*0008*/ DISPLAYCONFIG_PIXELFORMAT pixelFormat;
	/*000c*/ _POINTL position;
	/*0014*/
};

struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT disableMonitorVirtualResolution : 01; // 0x00000001;
	/*0014*/ UINT reserved : 31; // 0xfffffffe;
	/*0014*/ UINT value;
	/*0018*/
};

struct DISPLAYCONFIG_TARGET_BASE_TYPE {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
	/*0018*/
};

struct DISPLAYCONFIG_TARGET_DEVICE_NAME {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
	/*0018*/ DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
	/*001c*/ USHORT edidManufactureId;
	/*001e*/ USHORT edidProductCodeId;
	/*0020*/ UINT connectorInstance;
	/*0024*/ WCHAR monitorFriendlyDeviceName[0x40];
	/*00a4*/ WCHAR monitorDevicePath[0x80];
	/*01a4*/
};

struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
	/*0000*/ UINT friendlyNameFromEdid : 01; // 0x00000001;
	/*0000*/ UINT friendlyNameForced : 01; // 0x00000002;
	/*0000*/ UINT edidIdsValid : 01; // 0x00000004;
	/*0000*/ UINT reserved : 29; // 0xfffffff8;
	/*0000*/ UINT value;
	/*0004*/
};

struct DISPLAYCONFIG_TARGET_MODE {
	/*0000*/ DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
	/*0030*/
};

struct DISPLAYCONFIG_TARGET_PREFERRED_MODE {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT width;
	/*0018*/ UINT height;
	/*0020*/ DISPLAYCONFIG_TARGET_MODE targetMode;
	/*0050*/
};

enum DISPLAYCONFIG_TOPOLOGY_ID {
	DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x1,
	DISPLAYCONFIG_TOPOLOGY_CLONE = 0x2,
	DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x4,
	DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x8,
	DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xffffffff
};

enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY {
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = 0xffffffff,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0x0,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 0x1,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 0x2,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 0x3,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 0x4,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 0x5,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 0x6,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 0x8,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 0x9,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 0xa,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 0xb,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 0xc,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 0xd,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 0xe,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 0xf,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 0x10,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 0x11,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xffffffff
};

struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
	
	/*0000*/ ULONGLONG pixelRate;
	/*0008*/ DISPLAYCONFIG_RATIONAL hSyncFreq;
	/*0010*/ DISPLAYCONFIG_RATIONAL vSyncFreq;
	/*0018*/ DISPLAYCONFIG_2DREGION activeSize;
	/*0020*/ DISPLAYCONFIG_2DREGION totalSize;
	/*0028*/ <unnamed-type-AdditionalSignalInfo> AdditionalSignalInfo;
	/*0028*/ UINT videoStandard;
	/*002c*/ DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
	/*0030*/
};

enum DIT_HITTESTATTRIBUTES {
	DIT_HITTESTATTRIBUTES_NONE = 0x0,
	DIT_HITTESTATTRIBUTES_MOUSEWHEEL = 0x1,
	DIT_HITTESTATTRIBUTES_MOUSEWHEELISINCREASING = 0x2,
	DIT_HITTESTATTRIBUTES_MOUSEWHEELISHORIZONTAL = 0x4,
	DIT_HITTESTATTRIBUTES_MOUSEBUTTONDOWN = 0x8,
	DIT_HITTESTATTRIBUTES_TOUCHTARGETING = 0x10,
	DIT_HITTESTATTRIBUTES_NOHOVERPOINTER = 0x20,
	DIT_HITTESTATTRIBUTES_BARRELBUTTONDOWN = 0x40,
	DIT_HITTESTATTRIBUTES_ERASERDOWN = 0x80,
	DIT_HITTESTATTRIBUTES_CONTROLDOWN = 0x100,
	DIT_HITTESTATTRIBUTES_VALID = 0xff
};

struct DLGITEMTEMPLATE {
	/*0000*/ ULONG style;
	/*0004*/ ULONG dwExtendedStyle;
	/*0008*/ SHORT x;
	/*000a*/ SHORT y;
	/*000c*/ SHORT cx;
	/*000e*/ SHORT cy;
	/*0010*/ USHORT id;
	/*0012*/
};

struct DLGTEMPLATE {
	/*0000*/ ULONG style;
	/*0004*/ ULONG dwExtendedStyle;
	/*0008*/ USHORT cdit;
	/*000a*/ SHORT x;
	/*000c*/ SHORT y;
	/*000e*/ SHORT cx;
	/*0010*/ SHORT cy;
	/*0012*/
};

enum DL_ADDRESS_TYPE {
	DlUnicast = 0x0,
	DlMulticast = 0x1,
	DlBroadcast = 0x2
};

struct DNN_LIST {
	/*0000*/ ULONG count;
	/*0004*/ DNN_TYPE DNNValues[0x1];
	/*00d0*/
};

struct DNN_TYPE {
	/*0000*/ WCHAR DNN[0x65];
	/*00ca*/
};

struct DNS_AAAA_DATA {
	/*0000*/ IP6_ADDRESS Ip6Address;
	/*0010*/
};

struct DNS_ATMA_DATA {
	/*0000*/ UCHAR AddressType;
	/*0001*/ UCHAR Address[0x14];
	/*0015*/
};

struct DNS_A_DATA {
	/*0000*/ ULONG IpAddress;
	/*0004*/
};

enum DNS_CONFIG_TYPE {
	DnsConfigPrimaryDomainName_W = 0x0,
	DnsConfigPrimaryDomainName_A = 0x1,
	DnsConfigPrimaryDomainName_UTF8 = 0x2,
	DnsConfigAdapterDomainName_W = 0x3,
	DnsConfigAdapterDomainName_A = 0x4,
	DnsConfigAdapterDomainName_UTF8 = 0x5,
	DnsConfigDnsServerList = 0x6,
	DnsConfigSearchList = 0x7,
	DnsConfigAdapterInfo = 0x8,
	DnsConfigPrimaryHostNameRegistrationEnabled = 0x9,
	DnsConfigAdapterHostNameRegistrationEnabled = 0xa,
	DnsConfigAddressRegistrationMaxCount = 0xb,
	DnsConfigHostName_W = 0xc,
	DnsConfigHostName_A = 0xd,
	DnsConfigHostName_UTF8 = 0xe,
	DnsConfigFullHostName_W = 0xf,
	DnsConfigFullHostName_A = 0x10,
	DnsConfigFullHostName_UTF8 = 0x11,
	DnsConfigNameServer = 0x12
};

enum DNS_CONNECTION_POLICY_TAG {
	TAG_DNS_CONNECTION_POLICY_TAG_DEFAULT = 0x0,
	TAG_DNS_CONNECTION_POLICY_TAG_CONNECTION_MANAGER = 0x1,
	TAG_DNS_CONNECTION_POLICY_TAG_WWWPT = 0x2
};

struct DNS_DHCID_DATA {
	/*0000*/ ULONG dwByteCount;
	/*0004*/ UCHAR DHCID[0x1];
	/*0008*/
};

struct DNS_DS_DATA {
	/*0000*/ USHORT wKeyTag;
	/*0002*/ UCHAR chAlgorithm;
	/*0003*/ UCHAR chDigestType;
	/*0004*/ USHORT wDigestLength;
	/*0006*/ USHORT wPad;
	/*0008*/ UCHAR Digest[0x1];
	/*000a*/
};

enum DNS_FREE_TYPE {
	DnsFreeFlat = 0x0,
	DnsFreeRecordList = 0x1,
	DnsFreeParsedMessageFields = 0x2
};

struct DNS_KEY_DATA {
	/*0000*/ USHORT wFlags;
	/*0002*/ UCHAR chProtocol;
	/*0003*/ UCHAR chAlgorithm;
	/*0004*/ USHORT wKeyLength;
	/*0006*/ USHORT wPad;
	/*0008*/ UCHAR Key[0x1];
	/*000a*/
};

struct DNS_LOC_DATA {
	/*0000*/ USHORT wVersion;
	/*0002*/ USHORT wSize;
	/*0004*/ USHORT wHorPrec;
	/*0006*/ USHORT wVerPrec;
	/*0008*/ ULONG dwLatitude;
	/*000c*/ ULONG dwLongitude;
	/*0010*/ ULONG dwAltitude;
	/*0014*/
};

struct DNS_MINFO_DATAA {
	/*0000*/ CHAR * pNameMailbox;
	/*0008*/ CHAR * pNameErrorsMailbox;
	/*0010*/
};

struct DNS_MINFO_DATAW {
	/*0000*/ WCHAR * pNameMailbox;
	/*0008*/ WCHAR * pNameErrorsMailbox;
	/*0010*/
};

struct DNS_MX_DATAA {
	/*0000*/ CHAR * pNameExchange;
	/*0008*/ USHORT wPreference;
	/*000a*/ USHORT Pad;
	/*0010*/
};

struct DNS_MX_DATAW {
	/*0000*/ WCHAR * pNameExchange;
	/*0008*/ USHORT wPreference;
	/*000a*/ USHORT Pad;
	/*0010*/
};

struct DNS_NAPTR_DATAA {
	/*0000*/ USHORT wOrder;
	/*0002*/ USHORT wPreference;
	/*0008*/ CHAR * pFlags;
	/*0010*/ CHAR * pService;
	/*0018*/ CHAR * pRegularExpression;
	/*0020*/ CHAR * pReplacement;
	/*0028*/
};

struct DNS_NAPTR_DATAW {
	/*0000*/ USHORT wOrder;
	/*0002*/ USHORT wPreference;
	/*0008*/ WCHAR * pFlags;
	/*0010*/ WCHAR * pService;
	/*0018*/ WCHAR * pRegularExpression;
	/*0020*/ WCHAR * pReplacement;
	/*0028*/
};

struct DNS_NSEC3PARAM_DATA {
	/*0000*/ UCHAR chAlgorithm;
	/*0001*/ UCHAR bFlags;
	/*0002*/ USHORT wIterations;
	/*0004*/ UCHAR bSaltLength;
	/*0005*/ UCHAR bPad[0x3];
	/*0008*/ UCHAR pbSalt[0x1];
	/*000a*/
};

struct DNS_NSEC3_DATA {
	/*0000*/ UCHAR chAlgorithm;
	/*0001*/ UCHAR bFlags;
	/*0002*/ USHORT wIterations;
	/*0004*/ UCHAR bSaltLength;
	/*0005*/ UCHAR bHashLength;
	/*0006*/ USHORT wTypeBitMapsLength;
	/*0008*/ UCHAR chData[0x1];
	/*000a*/
};

struct DNS_NSEC_DATAA {
	/*0000*/ CHAR * pNextDomainName;
	/*0008*/ USHORT wTypeBitMapsLength;
	/*000a*/ USHORT wPad;
	/*000c*/ UCHAR TypeBitMaps[0x1];
	/*0010*/
};

struct DNS_NSEC_DATAW {
	/*0000*/ WCHAR * pNextDomainName;
	/*0008*/ USHORT wTypeBitMapsLength;
	/*000a*/ USHORT wPad;
	/*000c*/ UCHAR TypeBitMaps[0x1];
	/*0010*/
};

struct DNS_NULL_DATA {
	/*0000*/ ULONG dwByteCount;
	/*0004*/ UCHAR Data[0x1];
	/*0008*/
};

struct DNS_NXT_DATAA {
	/*0000*/ CHAR * pNameNext;
	/*0008*/ USHORT wNumTypes;
	/*000a*/ USHORT wTypes[0x1];
	/*0010*/
};

struct DNS_NXT_DATAW {
	/*0000*/ WCHAR * pNameNext;
	/*0008*/ USHORT wNumTypes;
	/*000a*/ USHORT wTypes[0x1];
	/*0010*/
};

struct DNS_OPT_DATA {
	/*0000*/ USHORT wDataLength;
	/*0002*/ USHORT wPad;
	/*0004*/ UCHAR Data[0x1];
	/*0006*/
};

struct DNS_PROXY_INFORMATION {
	/*0000*/ ULONG version;
	/*0004*/ DNS_PROXY_INFORMATION_TYPE proxyInformationType;
	/*0008*/ WCHAR * proxyName;
	/*0010*/
};

enum DNS_PROXY_INFORMATION_TYPE {
	DNS_PROXY_INFORMATION_DIRECT = 0x0,
	DNS_PROXY_INFORMATION_DEFAULT_SETTINGS = 0x1,
	DNS_PROXY_INFORMATION_PROXY_NAME = 0x2,
	DNS_PROXY_INFORMATION_DOES_NOT_EXIST = 0x3
};

struct DNS_PTR_DATAA {
	/*0000*/ CHAR * pNameHost;
	/*0008*/
};

struct DNS_PTR_DATAW {
	/*0000*/ WCHAR * pNameHost;
	/*0008*/
};

struct DNS_SIG_DATAA {
	/*0000*/ USHORT wTypeCovered;
	/*0002*/ UCHAR chAlgorithm;
	/*0003*/ UCHAR chLabelCount;
	/*0004*/ ULONG dwOriginalTtl;
	/*0008*/ ULONG dwExpiration;
	/*000c*/ ULONG dwTimeSigned;
	/*0010*/ USHORT wKeyTag;
	/*0012*/ USHORT wSignatureLength;
	/*0018*/ CHAR * pNameSigner;
	/*0020*/ UCHAR Signature[0x1];
	/*0028*/
};

struct DNS_SIG_DATAW {
	/*0000*/ USHORT wTypeCovered;
	/*0002*/ UCHAR chAlgorithm;
	/*0003*/ UCHAR chLabelCount;
	/*0004*/ ULONG dwOriginalTtl;
	/*0008*/ ULONG dwExpiration;
	/*000c*/ ULONG dwTimeSigned;
	/*0010*/ USHORT wKeyTag;
	/*0012*/ USHORT wSignatureLength;
	/*0018*/ WCHAR * pNameSigner;
	/*0020*/ UCHAR Signature[0x1];
	/*0028*/
};

struct DNS_SOA_DATAA {
	/*0000*/ CHAR * pNamePrimaryServer;
	/*0008*/ CHAR * pNameAdministrator;
	/*0010*/ ULONG dwSerialNo;
	/*0014*/ ULONG dwRefresh;
	/*0018*/ ULONG dwRetry;
	/*001c*/ ULONG dwExpire;
	/*0020*/ ULONG dwDefaultTtl;
	/*0028*/
};

struct DNS_SOA_DATAW {
	/*0000*/ WCHAR * pNamePrimaryServer;
	/*0008*/ WCHAR * pNameAdministrator;
	/*0010*/ ULONG dwSerialNo;
	/*0014*/ ULONG dwRefresh;
	/*0018*/ ULONG dwRetry;
	/*001c*/ ULONG dwExpire;
	/*0020*/ ULONG dwDefaultTtl;
	/*0028*/
};

struct DNS_SRV_DATAA {
	/*0000*/ CHAR * pNameTarget;
	/*0008*/ USHORT wPriority;
	/*000a*/ USHORT wWeight;
	/*000c*/ USHORT wPort;
	/*000e*/ USHORT Pad;
	/*0010*/
};

struct DNS_SRV_DATAW {
	/*0000*/ WCHAR * pNameTarget;
	/*0008*/ USHORT wPriority;
	/*000a*/ USHORT wWeight;
	/*000c*/ USHORT wPort;
	/*000e*/ USHORT Pad;
	/*0010*/
};

struct DNS_TKEY_DATAA {
	/*0000*/ CHAR * pNameAlgorithm;
	/*0008*/ UCHAR * pAlgorithmPacket;
	/*0010*/ UCHAR * pKey;
	/*0018*/ UCHAR * pOtherData;
	/*0020*/ ULONG dwCreateTime;
	/*0024*/ ULONG dwExpireTime;
	/*0028*/ USHORT wMode;
	/*002a*/ USHORT wError;
	/*002c*/ USHORT wKeyLength;
	/*002e*/ USHORT wOtherLength;
	/*0030*/ UCHAR cAlgNameLength;
	/*0034*/ INT bPacketPointers;
	/*0038*/
};

struct DNS_TKEY_DATAW {
	/*0000*/ WCHAR * pNameAlgorithm;
	/*0008*/ UCHAR * pAlgorithmPacket;
	/*0010*/ UCHAR * pKey;
	/*0018*/ UCHAR * pOtherData;
	/*0020*/ ULONG dwCreateTime;
	/*0024*/ ULONG dwExpireTime;
	/*0028*/ USHORT wMode;
	/*002a*/ USHORT wError;
	/*002c*/ USHORT wKeyLength;
	/*002e*/ USHORT wOtherLength;
	/*0030*/ UCHAR cAlgNameLength;
	/*0034*/ INT bPacketPointers;
	/*0038*/
};

struct DNS_TLSA_DATA {
	/*0000*/ UCHAR bCertUsage;
	/*0001*/ UCHAR bSelector;
	/*0002*/ UCHAR bMatchingType;
	/*0004*/ USHORT bCertificateAssociationDataLength;
	/*0006*/ UCHAR bPad[0x3];
	/*0009*/ UCHAR bCertificateAssociationData[0x1];
	/*000a*/
};

struct DNS_TSIG_DATAA {
	/*0000*/ CHAR * pNameAlgorithm;
	/*0008*/ UCHAR * pAlgorithmPacket;
	/*0010*/ UCHAR * pSignature;
	/*0018*/ UCHAR * pOtherData;
	/*0020*/ LONGLONG i64CreateTime;
	/*0028*/ USHORT wFudgeTime;
	/*002a*/ USHORT wOriginalXid;
	/*002c*/ USHORT wError;
	/*002e*/ USHORT wSigLength;
	/*0030*/ USHORT wOtherLength;
	/*0032*/ UCHAR cAlgNameLength;
	/*0034*/ INT bPacketPointers;
	/*0038*/
};

struct DNS_TSIG_DATAW {
	/*0000*/ WCHAR * pNameAlgorithm;
	/*0008*/ UCHAR * pAlgorithmPacket;
	/*0010*/ UCHAR * pSignature;
	/*0018*/ UCHAR * pOtherData;
	/*0020*/ LONGLONG i64CreateTime;
	/*0028*/ USHORT wFudgeTime;
	/*002a*/ USHORT wOriginalXid;
	/*002c*/ USHORT wError;
	/*002e*/ USHORT wSigLength;
	/*0030*/ USHORT wOtherLength;
	/*0032*/ UCHAR cAlgNameLength;
	/*0034*/ INT bPacketPointers;
	/*0038*/
};

struct DNS_TXT_DATAA {
	/*0000*/ ULONG dwStringCount;
	/*0008*/ CHAR * pStringArray[0x1];
	/*0010*/
};

struct DNS_TXT_DATAW {
	/*0000*/ ULONG dwStringCount;
	/*0008*/ WCHAR * pStringArray[0x1];
	/*0010*/
};

struct DNS_UNKNOWN_DATA {
	/*0000*/ ULONG dwByteCount;
	/*0004*/ UCHAR bData[0x1];
	/*0008*/
};

struct DNS_WINSR_DATAA {
	/*0000*/ ULONG dwMappingFlag;
	/*0004*/ ULONG dwLookupTimeout;
	/*0008*/ ULONG dwCacheTimeout;
	/*0010*/ CHAR * pNameResultDomain;
	/*0018*/
};

struct DNS_WINSR_DATAW {
	/*0000*/ ULONG dwMappingFlag;
	/*0004*/ ULONG dwLookupTimeout;
	/*0008*/ ULONG dwCacheTimeout;
	/*0010*/ WCHAR * pNameResultDomain;
	/*0018*/
};

struct DNS_WINS_DATA {
	/*0000*/ ULONG dwMappingFlag;
	/*0004*/ ULONG dwLookupTimeout;
	/*0008*/ ULONG dwCacheTimeout;
	/*000c*/ ULONG cWinsServerCount;
	/*0010*/ ULONG WinsServers[0x1];
	/*0014*/
};

struct DNS_WKS_DATA {
	/*0000*/ ULONG IpAddress;
	/*0004*/ UCHAR chProtocol;
	/*0005*/ UCHAR BitMask[0x1];
	/*0008*/
};

struct DOT11_ACCESSNETWORKOPTIONS {
	/*0000*/ UCHAR AccessNetworkType;
	/*0001*/ UCHAR Internet;
	/*0002*/ UCHAR ASRA;
	/*0003*/ UCHAR ESR;
	/*0004*/ UCHAR UESA;
	/*0005*/
};

struct DOT11_ASSOCIATION_COMPLETION_EX_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR MacAddr[0x6];
	/*000c*/ ULONG uStatus;
	/*0010*/ UCHAR bReAssocReq;
	/*0011*/ UCHAR bReAssocResp;
	/*0014*/ ULONG uAssocReqOffset;
	/*0018*/ ULONG uAssocReqSize;
	/*001c*/ ULONG uAssocRespOffset;
	/*0020*/ ULONG uAssocRespSize;
	/*0024*/ ULONG uBeaconOffset;
	/*0028*/ ULONG uBeaconSize;
	/*002c*/ ULONG uIHVDataOffset;
	/*0030*/ ULONG uIHVDataSize;
	/*0034*/ _DOT11_AUTH_ALGORITHM AuthAlgo;
	/*0038*/ _DOT11_CIPHER_ALGORITHM UnicastCipher;
	/*003c*/ _DOT11_CIPHER_ALGORITHM MulticastCipher;
	/*0040*/ ULONG uActivePhyListOffset;
	/*0044*/ ULONG uActivePhyListSize;
	/*0048*/ UCHAR bFourAddressSupported;
	/*0049*/ UCHAR bPortAuthorized;
	/*004a*/ UCHAR ucActiveQoSProtocol;
	/*004c*/ DOT11_DS_INFO DSInfo;
	/*0050*/ ULONG uEncapTableOffset;
	/*0054*/ ULONG uEncapTableSize;
	/*0058*/ _DOT11_CIPHER_ALGORITHM MulticastMgmtCipher;
	/*005c*/ ULONG uAssocComebackTime;
	/*0060*/ _DOT11_ASSOCIATION_TYPE AssociationType;
	/*0064*/
};

struct DOT11_ASSOCIATION_COMPLETION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR MacAddr[0x6];
	/*000c*/ ULONG uStatus;
	/*0010*/ UCHAR bReAssocReq;
	/*0011*/ UCHAR bReAssocResp;
	/*0014*/ ULONG uAssocReqOffset;
	/*0018*/ ULONG uAssocReqSize;
	/*001c*/ ULONG uAssocRespOffset;
	/*0020*/ ULONG uAssocRespSize;
	/*0024*/ ULONG uBeaconOffset;
	/*0028*/ ULONG uBeaconSize;
	/*002c*/ ULONG uIHVDataOffset;
	/*0030*/ ULONG uIHVDataSize;
	/*0034*/ _DOT11_AUTH_ALGORITHM AuthAlgo;
	/*0038*/ _DOT11_CIPHER_ALGORITHM UnicastCipher;
	/*003c*/ _DOT11_CIPHER_ALGORITHM MulticastCipher;
	/*0040*/ ULONG uActivePhyListOffset;
	/*0044*/ ULONG uActivePhyListSize;
	/*0048*/ UCHAR bFourAddressSupported;
	/*0049*/ UCHAR bPortAuthorized;
	/*004a*/ UCHAR ucActiveQoSProtocol;
	/*004c*/ DOT11_DS_INFO DSInfo;
	/*0050*/ ULONG uEncapTableOffset;
	/*0054*/ ULONG uEncapTableSize;
	/*0058*/ _DOT11_CIPHER_ALGORITHM MulticastMgmtCipher;
	/*005c*/ ULONG uAssocComebackTime;
	/*0060*/
};

struct DOT11_ASSOCIATION_INFO_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*0010*/ _DOT11_ASSOCIATION_INFO_EX dot11AssocInfo[0x1];
	/*0158*/
};

struct DOT11_ASSOCIATION_PARAMS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR BSSID[0x6];
	/*000c*/ ULONG uAssocRequestIEsOffset;
	/*0010*/ ULONG uAssocRequestIEsLength;
	/*0014*/
};

struct DOT11_ASSOCIATION_START_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR MacAddr[0x6];
	/*000c*/ _DOT11_SSID SSID;
	/*0030*/ ULONG uIHVDataOffset;
	/*0034*/ ULONG uIHVDataSize;
	/*0038*/
};

struct DOT11_AUTH_ALGORITHM_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ _DOT11_AUTH_ALGORITHM AlgorithmIds[0x1];
	/*0010*/
};

struct DOT11_AUTH_CIPHER_PAIR {
	/*0000*/ _DOT11_AUTH_ALGORITHM AuthAlgoId;
	/*0004*/ _DOT11_CIPHER_ALGORITHM CipherAlgoId;
	/*0008*/
};

struct DOT11_AUTH_CIPHER_PAIR_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ DOT11_AUTH_CIPHER_PAIR AuthCipherPairs[0x1];
	/*0014*/
};

enum DOT11_BAND {
	dot11_band_2p4g = 0x1,
	dot11_band_4p9g = 0x2,
	dot11_band_5g = 0x3
};

struct DOT11_BSSID_CANDIDATE {
	/*0000*/ UCHAR BSSID[0x6];
	/*0008*/ ULONG uFlags;
	/*000c*/
};

struct DOT11_BSSID_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ UCHAR BSSIDs[0x1][0x6];
	/*0014*/
};

struct DOT11_BSS_ENTRY {
	/*0000*/ ULONG uPhyId;
	/*0004*/ DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
	/*0010*/ UCHAR dot11BSSID[0x6];
	/*0018*/ _DOT11_BSS_TYPE dot11BSSType;
	/*001c*/ LONG lRSSI;
	/*0020*/ ULONG uLinkQuality;
	/*0024*/ UCHAR bInRegDomain;
	/*0026*/ USHORT usBeaconPeriod;
	/*0028*/ ULONGLONG ullTimestamp;
	/*0030*/ ULONGLONG ullHostTimestamp;
	/*0038*/ USHORT usCapabilityInformation;
	/*003c*/ ULONG uBufferLength;
	/*0040*/ UCHAR ucBuffer[0x1];
	/*0048*/
};

union DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO {
	
	/*0000*/ ULONG uChCenterFrequency;
	/*0000*/ <unnamed-type-FHSS> FHSS;
	/*000c*/
};

struct DOT11_BYTE_ARRAY {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfBytes;
	/*0008*/ ULONG uTotalNumOfBytes;
	/*000c*/ UCHAR ucBuffer[0x1];
	/*0010*/
};

struct DOT11_CHANNEL_HINT {
	/*0000*/ _DOT11_PHY_TYPE Dot11PhyType;
	/*0004*/ ULONG uChannelNumber;
	/*0008*/
};

struct DOT11_CIPHER_ALGORITHM_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ _DOT11_CIPHER_ALGORITHM AlgorithmIds[0x1];
	/*0010*/
};

struct DOT11_CIPHER_DEFAULT_KEY_VALUE {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uKeyIndex;
	/*0008*/ _DOT11_CIPHER_ALGORITHM AlgorithmId;
	/*000c*/ UCHAR MacAddr[0x6];
	/*0012*/ UCHAR bDelete;
	/*0013*/ UCHAR bStatic;
	/*0014*/ USHORT usKeyLength;
	/*0016*/ UCHAR ucKey[0x1];
	/*0018*/
};

struct DOT11_CIPHER_KEY_MAPPING_KEY_VALUE {
	/*0000*/ UCHAR PeerMacAddr[0x6];
	/*0008*/ _DOT11_CIPHER_ALGORITHM AlgorithmId;
	/*000c*/ DOT11_DIRECTION Direction;
	/*0010*/ UCHAR bDelete;
	/*0011*/ UCHAR bStatic;
	/*0012*/ USHORT usKeyLength;
	/*0014*/ UCHAR ucKey[0x1];
	/*0018*/
};

struct DOT11_CONNECTION_COMPLETION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uStatus;
	/*0008*/
};

struct DOT11_CONNECTION_START_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_BSS_TYPE BSSType;
	/*0008*/ UCHAR AdhocBSSID[0x6];
	/*0010*/ _DOT11_SSID AdhocSSID;
	/*0034*/
};

struct DOT11_COUNTRY_OR_REGION_STRING_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ UCHAR CountryOrRegionStrings[0x1][0x3];
	/*0010*/
};

struct DOT11_DATA_RATE_MAPPING_ENTRY {
	/*0000*/ UCHAR ucDataRateIndex;
	/*0001*/ UCHAR ucDataRateFlag;
	/*0002*/ USHORT usDataRateValue;
	/*0004*/
};

enum DOT11_DIRECTION {
	DOT11_DIR_INBOUND = 0x1,
	DOT11_DIR_OUTBOUND = 0x2,
	DOT11_DIR_BOTH = 0x3
};

struct DOT11_DISASSOCIATION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR MacAddr[0x6];
	/*000c*/ ULONG uReason;
	/*0010*/ ULONG uIHVDataOffset;
	/*0014*/ ULONG uIHVDataSize;
	/*0018*/
};

enum DOT11_DS_INFO {
	DOT11_DS_CHANGED = 0x0,
	DOT11_DS_UNCHANGED = 0x1,
	DOT11_DS_UNKNOWN = 0x2
};

struct DOT11_ENCAP_ENTRY {
	/*0000*/ USHORT usEtherType;
	/*0002*/ USHORT usEncapType;
	/*0004*/
};

struct DOT11_ERP_PHY_ATTRIBUTES {
	/*0000*/ DOT11_HRDSSS_PHY_ATTRIBUTES HRDSSSAttributes;
	/*0008*/ UCHAR bERPPBCCOptionImplemented;
	/*0009*/ UCHAR bDSSSOFDMOptionImplemented;
	/*000a*/ UCHAR bShortSlotTimeOptionImplemented;
	/*000c*/
};

struct DOT11_EXTSTA_ATTRIBUTES {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uScanSSIDListSize;
	/*0008*/ ULONG uDesiredBSSIDListSize;
	/*000c*/ ULONG uDesiredSSIDListSize;
	/*0010*/ ULONG uExcludedMacAddressListSize;
	/*0014*/ ULONG uPrivacyExemptionListSize;
	/*0018*/ ULONG uKeyMappingTableSize;
	/*001c*/ ULONG uDefaultKeyTableSize;
	/*0020*/ ULONG uWEPKeyValueMaxLength;
	/*0024*/ ULONG uPMKIDCacheSize;
	/*0028*/ ULONG uMaxNumPerSTADefaultKeyTables;
	/*002c*/ UCHAR bStrictlyOrderedServiceClassImplemented;
	/*002d*/ UCHAR ucSupportedQoSProtocolFlags;
	/*002e*/ UCHAR bSafeModeImplemented;
	/*0030*/ ULONG uNumSupportedCountryOrRegionStrings;
	/*0038*/ UCHAR (* pSupportedCountryOrRegionStrings)[0x3];
	/*0040*/ ULONG uInfraNumSupportedUcastAlgoPairs;
	/*0048*/ DOT11_AUTH_CIPHER_PAIR * pInfraSupportedUcastAlgoPairs;
	/*0050*/ ULONG uInfraNumSupportedMcastAlgoPairs;
	/*0058*/ DOT11_AUTH_CIPHER_PAIR * pInfraSupportedMcastAlgoPairs;
	/*0060*/ ULONG uAdhocNumSupportedUcastAlgoPairs;
	/*0068*/ DOT11_AUTH_CIPHER_PAIR * pAdhocSupportedUcastAlgoPairs;
	/*0070*/ ULONG uAdhocNumSupportedMcastAlgoPairs;
	/*0078*/ DOT11_AUTH_CIPHER_PAIR * pAdhocSupportedMcastAlgoPairs;
	/*0080*/ UCHAR bAutoPowerSaveMode;
	/*0084*/ ULONG uMaxNetworkOffloadListSize;
	/*0088*/ UCHAR bMFPCapable;
	/*008c*/ ULONG uInfraNumSupportedMcastMgmtAlgoPairs;
	/*0090*/ DOT11_AUTH_CIPHER_PAIR * pInfraSupportedMcastMgmtAlgoPairs;
	/*0098*/ UCHAR bNeighborReportSupported;
	/*0099*/ UCHAR bAPChannelReportSupported;
	/*009a*/ UCHAR bActionFramesSupported;
	/*009b*/ UCHAR bANQPQueryOffloadSupported;
	/*009c*/ UCHAR bHESSIDConnectionSupported;
	/*00a0*/
};

struct DOT11_EXTSTA_CAPABILITY {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uScanSSIDListSize;
	/*0008*/ ULONG uDesiredBSSIDListSize;
	/*000c*/ ULONG uDesiredSSIDListSize;
	/*0010*/ ULONG uExcludedMacAddressListSize;
	/*0014*/ ULONG uPrivacyExemptionListSize;
	/*0018*/ ULONG uKeyMappingTableSize;
	/*001c*/ ULONG uDefaultKeyTableSize;
	/*0020*/ ULONG uWEPKeyValueMaxLength;
	/*0024*/ ULONG uPMKIDCacheSize;
	/*0028*/ ULONG uMaxNumPerSTADefaultKeyTables;
	/*002c*/
};

struct DOT11_EXTSTA_RECV_CONTEXT {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uReceiveFlags;
	/*0008*/ ULONG uPhyId;
	/*000c*/ ULONG uChCenterFrequency;
	/*0010*/ USHORT usNumberOfMPDUsReceived;
	/*0014*/ LONG lRSSI;
	/*0018*/ UCHAR ucDataRate;
	/*001c*/ ULONG uSizeMediaSpecificInfo;
	/*0020*/ void * pvMediaSpecificInfo;
	/*0028*/ ULONGLONG ullTimestamp;
	/*0030*/
};

struct DOT11_EXTSTA_SEND_CONTEXT {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ USHORT usExemptionActionType;
	/*0008*/ ULONG uPhyId;
	/*000c*/ ULONG uDelayedSleepValue;
	/*0010*/ void * pvMediaSpecificInfo;
	/*0018*/ ULONG uSendFlags;
	/*0020*/
};

struct DOT11_HRDSSS_PHY_ATTRIBUTES {
	/*0000*/ UCHAR bShortPreambleOptionImplemented;
	/*0001*/ UCHAR bPBCCOptionImplemented;
	/*0002*/ UCHAR bChannelAgilityPresent;
	/*0004*/ ULONG uHRCCAModeSupported;
	/*0008*/
};

struct DOT11_IBSS_PARAMS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR bJoinOnly;
	/*0008*/ ULONG uIEsOffset;
	/*000c*/ ULONG uIEsLength;
	/*0010*/
};

struct DOT11_KEY_ALGO_BIP {
	/*0000*/ UCHAR ucIPN[0x6];
	/*0008*/ ULONG ulBIPKeyLength;
	/*000c*/ UCHAR ucBIPKey[0x1];
	/*0010*/
};

struct DOT11_KEY_ALGO_BIP_GMAC_256 {
	/*0000*/ UCHAR ucIPN[0x6];
	/*0008*/ ULONG ulBIPGmac256KeyLength;
	/*000c*/ UCHAR ucBIPGmac256Key[0x1];
	/*0010*/
};

struct DOT11_KEY_ALGO_CCMP {
	/*0000*/ UCHAR ucIV48Counter[0x6];
	/*0008*/ ULONG ulCCMPKeyLength;
	/*000c*/ UCHAR ucCCMPKey[0x1];
	/*0010*/
};

struct DOT11_KEY_ALGO_GCMP {
	/*0000*/ UCHAR ucIV48Counter[0x6];
	/*0008*/ ULONG ulGCMPKeyLength;
	/*000c*/ UCHAR ucGCMPKey[0x1];
	/*0010*/
};

struct DOT11_KEY_ALGO_GCMP_256 {
	/*0000*/ UCHAR ucIV48Counter[0x6];
	/*0008*/ ULONG ulGCMP256KeyLength;
	/*000c*/ UCHAR ucGCMP256Key[0x1];
	/*0010*/
};

struct DOT11_KEY_ALGO_TKIP_MIC {
	/*0000*/ UCHAR ucIV48Counter[0x6];
	/*0008*/ ULONG ulTKIPKeyLength;
	/*000c*/ ULONG ulMICKeyLength;
	/*0010*/ UCHAR ucTKIPMICKeys[0x1];
	/*0014*/
};

struct DOT11_LINK_QUALITY_ENTRY {
	/*0000*/ UCHAR PeerMacAddr[0x6];
	/*0006*/ UCHAR ucLinkQuality;
	/*0007*/
};

struct DOT11_LINK_QUALITY_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uLinkQualityListSize;
	/*0008*/ ULONG uLinkQualityListOffset;
	/*000c*/
};

struct DOT11_MAC_ADDRESS_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ UCHAR MacAddrs[0x1][0x6];
	/*0014*/
};

struct DOT11_MAC_FRAME_STATISTICS {
	/*0000*/ ULONGLONG ullTransmittedFrameCount;
	/*0008*/ ULONGLONG ullReceivedFrameCount;
	/*0010*/ ULONGLONG ullTransmittedFailureFrameCount;
	/*0018*/ ULONGLONG ullReceivedFailureFrameCount;
	/*0020*/ ULONGLONG ullWEPExcludedCount;
	/*0028*/ ULONGLONG ullTKIPLocalMICFailures;
	/*0030*/ ULONGLONG ullTKIPReplays;
	/*0038*/ ULONGLONG ullTKIPICVErrorCount;
	/*0040*/ ULONGLONG ullCCMPReplays;
	/*0048*/ ULONGLONG ullCCMPDecryptErrors;
	/*0050*/ ULONGLONG ullWEPUndecryptableCount;
	/*0058*/ ULONGLONG ullWEPICVErrorCount;
	/*0060*/ ULONGLONG ullDecryptSuccessCount;
	/*0068*/ ULONGLONG ullDecryptFailureCount;
	/*0070*/
};

struct DOT11_MAC_INFO {
	/*0000*/ ULONG uReserved;
	/*0004*/ ULONG uNdisPortNumber;
	/*0008*/ UCHAR MacAddr[0x6];
	/*0010*/
};

struct DOT11_MANUFACTURING_CALLBACK_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_MANUFACTURING_CALLBACK_TYPE dot11ManufacturingCallbackType;
	/*0008*/ ULONG uStatus;
	/*0010*/ void * pvContext;
	/*0018*/
};

enum DOT11_MANUFACTURING_SELF_TEST_TYPE {
	DOT11_MANUFACTURING_SELF_TEST_TYPE_INTERFACE = 0x1,
	DOT11_MANUFACTURING_SELF_TEST_TYPE_RF_INTERFACE = 0x2,
	DOT11_MANUFACTURING_SELF_TEST_TYPE_BT_COEXISTENCE = 0x3
};

struct DOT11_MPDU_MAX_LENGTH_INDICATION {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uPhyId;
	/*0008*/ ULONG uMPDUMaxLength;
	/*000c*/
};

struct DOT11_OFDM_PHY_ATTRIBUTES {
	/*0000*/ ULONG uFrequencyBandsSupported;
	/*0004*/
};

struct DOT11_OFFLOAD_NETWORK {
	/*0000*/ _DOT11_SSID Ssid;
	/*0024*/ _DOT11_CIPHER_ALGORITHM UnicastCipher;
	/*0028*/ _DOT11_AUTH_ALGORITHM AuthAlgo;
	/*002c*/ DOT11_CHANNEL_HINT Dot11ChannelHints[0x4];
	/*004c*/
};

struct DOT11_PHY_ATTRIBUTES {
	
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_PHY_TYPE PhyType;
	/*0008*/ UCHAR bHardwarePhyState;
	/*0009*/ UCHAR bSoftwarePhyState;
	/*000a*/ UCHAR bCFPollable;
	/*000c*/ ULONG uMPDUMaxLength;
	/*0010*/ _DOT11_TEMP_TYPE TempType;
	/*0014*/ _DOT11_DIVERSITY_SUPPORT DiversitySupport;
	/*0018*/ <unnamed-type-PhySpecificAttributes> PhySpecificAttributes;
	/*0024*/ ULONG uNumberSupportedPowerLevels;
	/*0028*/ ULONG TxPowerLevels[0x8];
	/*0048*/ ULONG uNumDataRateMappingEntries;
	/*004c*/ DOT11_DATA_RATE_MAPPING_ENTRY DataRateMappingEntries[0x7e];
	/*0244*/ _DOT11_SUPPORTED_DATA_RATES_VALUE_V2 SupportedDataRatesValue;
	/*0444*/
};

struct DOT11_PHY_FRAME_STATISTICS {
	/*0000*/ ULONGLONG ullTransmittedFrameCount;
	/*0008*/ ULONGLONG ullMulticastTransmittedFrameCount;
	/*0010*/ ULONGLONG ullFailedCount;
	/*0018*/ ULONGLONG ullRetryCount;
	/*0020*/ ULONGLONG ullMultipleRetryCount;
	/*0028*/ ULONGLONG ullMaxTXLifetimeExceededCount;
	/*0030*/ ULONGLONG ullTransmittedFragmentCount;
	/*0038*/ ULONGLONG ullRTSSuccessCount;
	/*0040*/ ULONGLONG ullRTSFailureCount;
	/*0048*/ ULONGLONG ullACKFailureCount;
	/*0050*/ ULONGLONG ullReceivedFrameCount;
	/*0058*/ ULONGLONG ullMulticastReceivedFrameCount;
	/*0060*/ ULONGLONG ullPromiscuousReceivedFrameCount;
	/*0068*/ ULONGLONG ullMaxRXLifetimeExceededCount;
	/*0070*/ ULONGLONG ullFrameDuplicateCount;
	/*0078*/ ULONGLONG ullReceivedFragmentCount;
	/*0080*/ ULONGLONG ullPromiscuousReceivedFragmentCount;
	/*0088*/ ULONGLONG ullFCSErrorCount;
	/*0090*/
};

struct DOT11_PHY_ID_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ ULONG dot11PhyId[0x1];
	/*0010*/
};

struct DOT11_PHY_STATE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uPhyId;
	/*0008*/ UCHAR bHardwarePhyState;
	/*0009*/ UCHAR bSoftwarePhyState;
	/*000c*/
};

struct DOT11_PHY_TYPE_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ _DOT11_PHY_TYPE dot11PhyType[0x1];
	/*0010*/
};

struct DOT11_PMKID_CANDIDATE_LIST_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uCandidateListSize;
	/*0008*/ ULONG uCandidateListOffset;
	/*000c*/
};

struct DOT11_PMKID_ENTRY {
	/*0000*/ UCHAR BSSID[0x6];
	/*0006*/ UCHAR PMKID[0x10];
	/*0018*/ ULONG uFlags;
	/*001c*/
};

struct DOT11_PMKID_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ DOT11_PMKID_ENTRY PMKIDs[0x1];
	/*0028*/
};

struct DOT11_PORT_STATE_NOTIFICATION {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerMac[0x6];
	/*000a*/ UCHAR bOpen;
	/*000c*/
};

struct DOT11_PRIVACY_EXEMPTION {
	/*0000*/ USHORT usEtherType;
	/*0002*/ USHORT usExemptionActionType;
	/*0004*/ USHORT usExemptionPacketType;
	/*0006*/
};

struct DOT11_PRIVACY_EXEMPTION_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ DOT11_PRIVACY_EXEMPTION PrivacyExemptionEntries[0x1];
	/*0014*/
};

struct DOT11_QOS_PARAMS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR ucEnabledQoSProtocolFlags;
	/*0006*/
};

struct DOT11_ROAMING_COMPLETION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uStatus;
	/*0008*/
};

struct DOT11_ROAMING_START_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR AdhocBSSID[0x6];
	/*000c*/ _DOT11_SSID AdhocSSID;
	/*0030*/ ULONG uRoamingReason;
	/*0034*/
};

struct DOT11_SSID_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ _DOT11_SSID SSIDs[0x1];
	/*0030*/
};

struct DOT11_STATISTICS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0008*/ ULONGLONG ullFourWayHandshakeFailures;
	/*0010*/ ULONGLONG ullTKIPCounterMeasuresInvoked;
	/*0018*/ ULONGLONG ullReserved;
	/*0020*/ DOT11_MAC_FRAME_STATISTICS MacUcastCounters;
	/*0090*/ DOT11_MAC_FRAME_STATISTICS MacMcastCounters;
	/*0100*/ DOT11_PHY_FRAME_STATISTICS PhyCounters[0x1];
	/*0190*/
};

struct DOT11_TKIPMIC_FAILURE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR bDefaultKeyFailure;
	/*0008*/ ULONG uKeyIndex;
	/*000c*/ UCHAR PeerMac[0x6];
	/*0014*/
};

struct DOT11_VENUEINFO {
	/*0000*/ UCHAR VenueGroup;
	/*0001*/ UCHAR VenueType;
	/*0002*/
};

struct DOT11_VWIFI_ATTRIBUTES {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_VWIFI_COMBINATION Combinations[0x1];
	/*0018*/
};

enum DPI_AWARENESS {
	DPI_AWARENESS_INVALID = 0xffffffff,
	DPI_AWARENESS_UNAWARE = 0x0,
	DPI_AWARENESS_SYSTEM_AWARE = 0x1,
	DPI_AWARENESS_PER_MONITOR_AWARE = 0x2
};

struct DPI_AWARENESS_CONTEXT__ {
	/*0000*/ INT unused;
	/*0004*/
};

enum DPI_HOSTING_BEHAVIOR {
	DPI_HOSTING_BEHAVIOR_INVALID = 0xffffffff,
	DPI_HOSTING_BEHAVIOR_DEFAULT = 0x0,
	DPI_HOSTING_BEHAVIOR_MIXED = 0x1
};

union EAP_UI_DATA_FORMAT {
	/*0000*/ _EAP_CONFIG_INPUT_FIELD_ARRAY * credData;
	/*0000*/ _EAP_CRED_EXPIRY_REQ * credExpiryData;
	/*0000*/ _EAP_CONFIG_INPUT_FIELD_ARRAY * credLogonData;
	/*0008*/
};

enum EC_ENDOFLINE {
	EC_ENDOFLINE_DETECTFROMCONTENT = 0x0,
	EC_ENDOFLINE_CRLF = 0x1,
	EC_ENDOFLINE_CR = 0x2,
	EC_ENDOFLINE_LF = 0x3
};

enum EC_HOST_UI_MODE {
	ECHUIM_DESKTOP = 0x0,
	ECHUIM_IMMERSIVE = 0x1,
	ECHUIM_SYSTEM_LAUNCHER = 0x2
};

enum EC_SEARCHWEB_ENTRYPOINT {
	EC_SEARCHWEB_ENTRYPOINT_EXTERNAL = 0x0,
	EC_SEARCHWEB_ENTRYPOINT_CONTEXTMENU = 0x1
};

enum EDGE_GESTURE_KIND {
	EGK_TOUCH = 0x0,
	EGK_KEYBOARD = 0x1,
	EGK_MOUSE = 0x2
};

enum EDIT_CONTROL_FEATURE {
	EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0x0,
	EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 0x1
};

struct EHExceptionRecord {

	struct EHParameters {
		/*0000*/ ULONG magicNumber;
		/*0008*/ void * pExceptionObject;
		/*0010*/ _s_ThrowInfo const * pThrowInfo;
		/*0018*/ void * pThrowImageBase;
		/*0020*/
	};

	/*0000*/ ULONG ExceptionCode;
	/*0004*/ ULONG ExceptionFlags;
	/*0008*/ _EXCEPTION_RECORD * ExceptionRecord;
	/*0010*/ void * ExceptionAddress;
	/*0018*/ ULONG NumberParameters;
	/*0020*/ EHParameters params;
	/*0040*/
};

enum ELEVATION_STATE {
	ELEVATION_NOT_CHECKED = 0x0,
	ELEVATION_CHECKED_SHIELD = 0x1,
	ELEVATION_CHECKED_NOSHIELD = 0x2
};

struct ENTRYID {
	/*0000*/ UCHAR abFlags[0x4];
	/*0004*/ UCHAR ab[0x1];
	/*0005*/
};

enum ENUM_FILE_INFORMATION_CLASS {
	ENUM_FILE_ID_BOTH_DIR_INFO = 0x0,
	ENUM_FILE_BOTH_DIR_INFO = 0x1,
	ENUM_FILE_FULL_DIR_INFO = 0x2
};

enum ETW_COMPRESSION_RESUMPTION_MODE {
	EtwCompressionModeRestart = 0x0,
	EtwCompressionModeNoDisable = 0x1,
	EtwCompressionModeNoRestart = 0x2
};

struct EVENT_ENTRY {
	/*0000*/ _EVENT_DESCRIPTOR EventDescriptor;
	/*0010*/ _EVENT_DATA_DESCRIPTOR * UserData;
	/*0018*/ EVENT_ENTRY * LeftEntry;
	/*0020*/ EVENT_ENTRY * RightEntry;
	/*0028*/ UINT Hash;
	/*002c*/ UCHAR UserDataCount;
	/*002d*/ UCHAR NumAggregateFields;
	/*002e*/
};

struct EVENT_ENTRY_LOOKUP_TABLE {
	/*0000*/ EVENT_ENTRY * EntryBuckets[0x20];
	/*0100*/ ULONG NumEventEntries;
	/*0104*/ ULONG NextBucketToFlush;
	/*0108*/
};

struct EVENT_INSTANCE_INFO {
	/*0000*/ void * RegHandle;
	/*0008*/ ULONG InstanceId;
	/*0010*/
};

enum EXPLORER_BROWSER_FILL_FLAGS {
	EBF_NONE = 0x0,
	EBF_SELECTFROMDATAOBJECT = 0x100,
	EBF_NODROPTARGET = 0x200
};

enum EXPLORER_BROWSER_OPTIONS {
	EBO_NONE = 0x0,
	EBO_NAVIGATEONCE = 0x1,
	EBO_SHOWFRAMES = 0x2,
	EBO_ALWAYSNAVIGATE = 0x4,
	EBO_NOTRAVELLOG = 0x8,
	EBO_NOWRAPPERWINDOW = 0x10,
	EBO_HTMLSHAREPOINTVIEW = 0x20,
	EBO_NOBORDER = 0x40,
	EBO_NOPERSISTVIEWSTATE = 0x80
};

enum EXTENDED_NAME_FORMAT {
	NameUnknown = 0x0,
	NameFullyQualifiedDN = 0x1,
	NameSamCompatible = 0x2,
	NameDisplay = 0x3,
	NameUniqueId = 0x6,
	NameCanonical = 0x7,
	NameUserPrincipal = 0x8,
	NameCanonicalEx = 0x9,
	NameServicePrincipal = 0xa,
	NameDnsDomain = 0xc,
	NameGivenName = 0xd,
	NameSurname = 0xe
};

struct EXTRASEARCH {
	/*0000*/ _GUID guidSearch;
	/*0010*/ WCHAR wszFriendlyName[0x50];
	/*00b0*/ WCHAR wszUrl[0x824];
	/*10f8*/
};

union EapCredentialTypeData {
	/*0000*/ _EapUsernamePasswordCredential username_password;
	/*0000*/ _EapCertificateCredential certificate;
	/*0000*/ _EapSimCredential sim;
	/*0020*/
};

class ErrorHandler {
public:
	static HRESULT Report( HRESULT , WCHAR const * );
	static HRESULT Report( HRESULT , ErrorHandlerOptions );
	static HRESULT Report( HRESULT );
	static HRESULT Report( HRESULT , WCHAR const * , ErrorHandlerOptions );
	/*0001*/
};

enum ErrorHandlerOptions {
	ErrorHandlerOptions_None = 0x0,
	ErrorHandlerOptions_SkipOriginateError = 0x1
};

struct EventRegistrationToken {
	/*0000*/ LONGLONG value;
	/*0008*/
};

enum FDAP {
	FDAP_BOTTOM = 0x0,
	FDAP_TOP = 0x1
};

enum FDE_OVERWRITE_RESPONSE {
	FDEOR_DEFAULT = 0x0,
	FDEOR_ACCEPT = 0x1,
	FDEOR_REFUSE = 0x2
};

enum FDE_SHAREVIOLATION_RESPONSE {
	FDESVR_DEFAULT = 0x0,
	FDESVR_ACCEPT = 0x1,
	FDESVR_REFUSE = 0x2
};

enum FFFP_MODE {
	FFFP_EXACTMATCH = 0x0,
	FFFP_NEARESTPARENTMATCH = 0x1
};

enum FILETYPEATTRIBUTEFLAGS {
	FTA_None = 0x0,
	FTA_Exclude = 0x1,
	FTA_Show = 0x2,
	FTA_HasExtension = 0x4,
	FTA_NoEdit = 0x8,
	FTA_NoRemove = 0x10,
	FTA_NoNewVerb = 0x20,
	FTA_NoEditVerb = 0x40,
	FTA_NoRemoveVerb = 0x80,
	FTA_NoEditDesc = 0x100,
	FTA_NoEditIcon = 0x200,
	FTA_NoEditDflt = 0x400,
	FTA_NoEditVerbCmd = 0x800,
	FTA_NoEditVerbExe = 0x1000,
	FTA_NoDDE = 0x2000,
	FTA_NoEditMIME = 0x8000,
	FTA_OpenIsSafe = 0x10000,
	FTA_AlwaysUnsafe = 0x20000,
	FTA_NoRecentDocs = 0x100000,
	FTA_SafeForElevation = 0x200000,
	FTA_AlwaysUseDirectInvoke = 0x400000
};

struct FILE_ID_DESCRIPTOR {
	/*0000*/ ULONG dwSize;
	/*0004*/ _FILE_ID_TYPE Type;
	/*0008*/ _LARGE_INTEGER FileId;
	/*0008*/ _GUID ObjectId;
	/*0008*/ _FILE_ID_128 ExtendedFileId;
	/*0018*/
};

enum FILE_OPERATION_FLAGS2 {
	FOF2_NONE = 0x0,
	FOF2_MERGEFOLDERSONCOLLISION = 0x1
};

enum FILE_USAGE_TYPE {
	FUT_PLAYING = 0x0,
	FUT_EDITING = 0x1,
	FUT_GENERIC = 0x2
};

struct FIND_BY_SID_DATA {
	/*0000*/ ULONG Restart;
	/*0004*/ _SID Sid;
	/*0010*/
};

struct FIND_BY_SID_OUTPUT {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ ULONG FileNameLength;
	/*000c*/ WCHAR FileName[0x1];
	/*0010*/
};

struct FIXED_INFO_W2KSP1 {
	/*0000*/ CHAR HostName[0x84];
	/*0084*/ CHAR DomainName[0x84];
	/*0108*/ _IP_ADDR_STRING * CurrentDnsServer;
	/*0110*/ _IP_ADDR_STRING DnsServerList;
	/*0140*/ UINT NodeType;
	/*0144*/ CHAR ScopeId[0x104];
	/*0248*/ UINT EnableRouting;
	/*024c*/ UINT EnableProxy;
	/*0250*/ UINT EnableDns;
	/*0258*/
};

struct FLASHWINFO {
	/*0000*/ UINT cbSize;
	/*0008*/ HWND__ * hwnd;
	/*0010*/ ULONG dwFlags;
	/*0014*/ UINT uCount;
	/*0018*/ ULONG dwTimeout;
	/*0020*/
};

struct FLATENTRY {
	/*0000*/ ULONG cb;
	/*0004*/ UCHAR abEntry[0x1];
	/*0008*/
};

struct FLATENTRYLIST {
	/*0000*/ ULONG cEntries;
	/*0004*/ ULONG cbEntries;
	/*0008*/ UCHAR abEntries[0x1];
	/*000c*/
};

struct FLATMTSIDLIST {
	/*0000*/ ULONG cMTSIDs;
	/*0004*/ ULONG cbMTSIDs;
	/*0008*/ UCHAR abMTSIDs[0x1];
	/*000c*/
};

enum FLYOUT_PLACEMENT {
	FP_DEFAULT = 0x0,
	FP_ABOVE = 0x1,
	FP_BELOW = 0x2,
	FP_LEFT = 0x3,
	FP_RIGHT = 0x4
};

enum FOLDERFLAGS {
	FWF_NONE = 0x0,
	FWF_AUTOARRANGE = 0x1,
	FWF_ABBREVIATEDNAMES = 0x2,
	FWF_SNAPTOGRID = 0x4,
	FWF_OWNERDATA = 0x8,
	FWF_BESTFITWINDOW = 0x10,
	FWF_DESKTOP = 0x20,
	FWF_SINGLESEL = 0x40,
	FWF_NOSUBFOLDERS = 0x80,
	FWF_TRANSPARENT = 0x100,
	FWF_NOCLIENTEDGE = 0x200,
	FWF_NOSCROLL = 0x400,
	FWF_ALIGNLEFT = 0x800,
	FWF_NOICONS = 0x1000,
	FWF_SHOWSELALWAYS = 0x2000,
	FWF_NOVISIBLE = 0x4000,
	FWF_SINGLECLICKACTIVATE = 0x8000,
	FWF_NOWEBVIEW = 0x10000,
	FWF_HIDEFILENAMES = 0x20000,
	FWF_CHECKSELECT = 0x40000,
	FWF_NOENUMREFRESH = 0x80000,
	FWF_NOGROUPING = 0x100000,
	FWF_FULLROWSELECT = 0x200000,
	FWF_NOFILTERS = 0x400000,
	FWF_NOCOLUMNHEADER = 0x800000,
	FWF_NOHEADERINALLVIEWS = 0x1000000,
	FWF_EXTENDEDTILES = 0x2000000,
	FWF_TRICHECKSELECT = 0x4000000,
	FWF_AUTOCHECKSELECT = 0x8000000,
	FWF_NOBROWSERVIEWSTATE = 0x10000000,
	FWF_SUBSETGROUPS = 0x20000000,
	FWF_USESEARCHFOLDER = 0x40000000,
	FWF_ALLOWRTLREADING = 0x80000000
};

enum FOLDERLOGICALVIEWMODE {
	FLVM_UNSPECIFIED = 0xffffffff,
	FLVM_FIRST = 0x1,
	FLVM_DETAILS = 0x1,
	FLVM_TILES = 0x2,
	FLVM_ICONS = 0x3,
	FLVM_LIST = 0x4,
	FLVM_CONTENT = 0x5,
	FLVM_LAST = 0x5
};

struct FOLDERSETTINGS {
	/*0000*/ UINT ViewMode;
	/*0004*/ UINT fFlags;
	/*0008*/
};

enum FOLDERVIEWMODE {
	FVM_AUTO = 0xffffffff,
	FVM_FIRST = 0x1,
	FVM_ICON = 0x1,
	FVM_SMALLICON = 0x2,
	FVM_LIST = 0x3,
	FVM_DETAILS = 0x4,
	FVM_THUMBNAIL = 0x5,
	FVM_TILE = 0x6,
	FVM_THUMBSTRIP = 0x7,
	FVM_CONTENT = 0x8,
	FVM_LAST = 0x8
};

enum FOLDER_ENUM_MODE {
	FEM_VIEWRESULT = 0x0,
	FEM_NAVIGATION = 0x1
};

enum FRAMEWORK_INPUT_PANE_BEHAVIOR_MODE {
	FIPBM_AUTO = 0x0,
	FIPBM_STORE_APP = 0x1,
	FIPBM_DESKTOP_APP = 0x2
};

union FT {
	/*0000*/ ULONGLONG ft_scalar;
	/*0000*/ _FILETIME ft_struct;
	/*0008*/
};

enum FVTEXTTYPE {
	FVST_EMPTYTEXT = 0x0
};

enum GETPROPERTYSTOREFLAGS {
	GPS_DEFAULT = 0x0,
	GPS_HANDLERPROPERTIESONLY = 0x1,
	GPS_READWRITE = 0x2,
	GPS_TEMPORARY = 0x4,
	GPS_FASTPROPERTIESONLY = 0x8,
	GPS_OPENSLOWITEM = 0x10,
	GPS_DELAYCREATION = 0x20,
	GPS_BESTEFFORT = 0x40,
	GPS_NO_OPLOCK = 0x80,
	GPS_PREFERQUERYPROPERTIES = 0x100,
	GPS_EXTRINSICPROPERTIES = 0x200,
	GPS_EXTRINSICPROPERTIESONLY = 0x400,
	GPS_VOLATILEPROPERTIES = 0x800,
	GPS_VOLATILEPROPERTIESONLY = 0x1000,
	GPS_MASK_VALID = 0x1fff
};

enum GET_PROPERTY_STORE_TYPE {
	GIPST_CACHED = 0x0,
	GIPST_FALLBACK = 0x1
};

enum GLOBALOPT_SERVICE_REFCOUNT_ENFORCEMENT {
	GLOBALOPT_SERVICE_REFCOUNT_ENFORCEMENT_DEFAULT = 0x0,
	GLOBALOPT_SERVICE_REFCOUNT_ENFORCEMENT_DISALLOWGLOBALREFCOUNT = 0x1,
	GLOBALOPT_SERVICE_REFCOUNT_ENFORCEMENT_VALUECOUNT = 0x2
};

enum GROUP_WINDOW_MANAGEMENT_POLICY {
	GWMP_NONE = 0x0,
	GWMP_DELEGATE_CLOSE_REQUEST = 0x1
};

enum GROUP_WINDOW_ROLE {
	GWR_DEFAULT = 0x0,
	GWR_APPLICATION = 0x1,
	GWR_FALLBACK = 0x2,
	GWR_MAX = 0x2
};

class GetProxyConfigurationOperationServer : public RuntimeClass<Windows::Foundation::IAsyncOperation<Windows::Networking::Connectivity::ProxyConfiguration *>,Windows::Internal::AsyncBaseFTM<Windows::Foundation::IAsyncOperationCompletedHandler<Windows::Networking::Connectivity::ProxyConfiguration *>,1,AsyncOptions<-1,0,&GUID_CAUSALITY_WINDOWS_PLATFORM_ID,2> > > {
public:
	static WCHAR const * InternalGetRuntimeClassName();
	static TrustLevel InternalGetTrustLevel();
	/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
	/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
	/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
	/*    */ virtual ULONG Release();
	/*    */ virtual ULONG AddRef();
	/*    */ virtual HRESULT get_Completed( IAsyncOperationCompletedHandler<Networking::Connectivity::ProxyConfiguration *> * * );
	/*    */ virtual HRESULT put_Completed( IAsyncOperationCompletedHandler<Networking::Connectivity::ProxyConfiguration *> * );
	/*    */ virtual HRESULT GetResults( IProxyConfiguration * * );
	void GetProxyConfigurationOperationServer();
	/*    */ virtual void ~GetProxyConfigurationOperationServer();
	HRESULT Initialize( IUriRuntimeClass * );
private:
	/*    */ virtual HRESULT OnStart();
	/*    */ virtual void OnClose();
	/*    */ virtual void OnCancel();
	static void DoGetProxyConfigurationWorker( _TP_CALLBACK_INSTANCE * , void * , _TP_WORK * );
	void DoGetProxyConfiguration();
	static UINT currentId;
	/*00a8*/ String inputUriString;
	/*00b0*/ ComPtr<Windows::Networking::Connectivity::IProxyConfiguration> proxyConfiguration;
	/*00b8*/ void * threadReadyEvent;
	/*00c0*/ HRESULT hrThreadInit;
public:
	void __local_vftable_ctor_closure();
	/*0058*/ virtual void * __vecDelDtor( UINT );
	/*00c8*/
};

class GlobalInterfaceTable {
public:
	static UINT const c_InvalidCookie;
	static HRESULT Marshal( IUnknown * , _GUID const & , ULONG * );
	static HRESULT Unmarshal( ULONG , _GUID const & , void * * );
	static void Revoke( ULONG );
private:
	static HRESULT s_Retrieve();
	static IGlobalInterfaceTable * s_pGlobalInterfaceTable;
	/*0001*/
};

struct HACCEL__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HBITMAP__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HBRUSH__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HCOLORSPACE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HDC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HDESK__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HDROP__;

struct HENHMETAFILE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HFONT__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HGESTUREINFO__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HGLRC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HHOOK__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HICON__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HIFTIMESTAMPCHANGE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HIMCC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HIMC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HINSTANCE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HKEY__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HKL__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HLSURF__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HMENU__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HMETAFILE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HMONITOR__ {
	/*0000*/ INT unused;
	/*0004*/
};

enum HOMEGROUPSHARINGCHOICES {
	HGSC_NONE = 0x0,
	HGSC_MUSICLIBRARY = 0x1,
	HGSC_PICTURESLIBRARY = 0x2,
	HGSC_VIDEOSLIBRARY = 0x4,
	HGSC_DOCUMENTSLIBRARY = 0x8,
	HGSC_PRINTERS = 0x10
};

enum HOSTED_APP_CHANGED {
	HAC_STARTED = 0x0,
	HAC_CLOSED = 0x1,
	HAC_INTERACTIVE = 0x2,
	HAC_NON_INTERACTIVE = 0x3
};

struct HPALETTE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HPEN__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HRAWINPUT__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HRGN__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HRSRC__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSAVEDUILANGUAGES__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSPRITE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSTRING_BUFFER__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSTRING_HEADER {
	
	/*0000*/ <unnamed-type-Reserved> Reserved;
	/*0018*/
};

struct HSTRING__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSTR__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HSYNTHETICPOINTERDEVICE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HTASK__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HTOUCHINPUT__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HUMPD__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HWINEVENTHOOK__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HWINSTA__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct HWND__ {
	/*0000*/ INT unused;
	/*0004*/
};

class HandleManager : public RuntimeClass<IHandleManager,FtmBase> {
public:
	static HRESULT GetHandleManager( IHandleManager * * );
	/*    */ virtual HRESULT GetWlanHandle( void * * );
	/*    */ virtual HRESULT GetWwanHandle( void * * );
	/*    */ virtual HRESULT GetWcmHandle( void * * );
	/*    */ virtual HRESULT GetNetworkListManager( ComPtr<INetworkListManagerPrivate> * );
	/*    */ virtual HRESULT GetNetworkListManager2( ComPtr<INetworkListManagerPrivate2> * );
private:
	static WeakRef s_HandleManager;
	static critical_section s_HandleManagerLock;
	/*0040*/ critical_section m_Lock;
	/*0068*/ unique_any_t<details::unique_storage<details::resource_policy<void *,void (__cdecl*)(void *),&details::CloseWlanHandle,wistd::integral_constant<unsigned __int64,0>,void *,__int64,-1,std::nullptr_t> > > m_hWlanHandle;
	/*0070*/ unique_any_t<details::unique_storage<details::resource_policy<void *,void (__cdecl*)(void *),&details::CloseWwanHandle,wistd::integral_constant<unsigned __int64,0>,void *,__int64,-1,std::nullptr_t> > > m_hWwanHandle;
	/*0078*/ unique_any_t<details::unique_storage<details::resource_policy<void *,void (__cdecl*)(void *),&details::CloseWcmHandle,wistd::integral_constant<unsigned __int64,0>,void *,__int64,0,std::nullptr_t> > > m_hWcmHandle;
	/*0080*/ ComPtr<INetworkListManagerPrivate> m_networkListManager;
	/*0088*/ ComPtr<INetworkListManagerPrivate2> m_networkListManager2;
public:
	void HandleManager();
	/*    */ virtual void ~HandleManager();
	void __local_vftable_ctor_closure();
	/*0058*/ virtual void * __vecDelDtor( UINT );
	/*0090*/
};

struct IABContainer : IMAPIContainer {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT GetContentsTable( ULONG , IMAPITable * * ) = 0;
	/*    */ virtual HRESULT GetHierarchyTable( ULONG , IMAPITable * * ) = 0;
	/*    */ virtual HRESULT OpenEntry( ULONG , ENTRYID * , _GUID const * , ULONG , ULONG * , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetSearchCriteria( _SRestriction * , _SBinaryArray * , ULONG ) = 0;
	/*    */ virtual HRESULT GetSearchCriteria( ULONG , _SRestriction * * , _SBinaryArray * * , ULONG * ) = 0;
	/*0098*/ virtual HRESULT CreateEntry( ULONG , ENTRYID * , ULONG , IMAPIProp * * ) = 0;
	/*00a0*/ virtual HRESULT CopyEntries( _SBinaryArray * , ULONG , IMAPIProgress * , ULONG ) = 0;
	/*00a8*/ virtual HRESULT DeleteEntries( _SBinaryArray * , ULONG ) = 0;
	/*00b0*/ virtual HRESULT ResolveNames( _SPropTagArray * , ULONG , _ADRLIST * , _flaglist * ) = 0;
	void IABContainer( IABContainer && );
	void IABContainer( IABContainer const & );
	void IABContainer();
	IABContainer & operator=( IABContainer && );
	IABContainer & operator=( IABContainer const & );
	/*0008*/
};

struct IAccIdentity : IUnknown {
	/*0018*/ virtual HRESULT GetIdentityString( ULONG , UCHAR * * , ULONG * ) = 0;
	void IAccIdentity( IAccIdentity && );
	void IAccIdentity( IAccIdentity const & );
	void IAccIdentity();
	IAccIdentity & operator=( IAccIdentity && );
	IAccIdentity & operator=( IAccIdentity const & );
	/*0008*/
};

struct IAccPropServer : IUnknown {
	/*0018*/ virtual HRESULT GetPropValue( UCHAR const * , ULONG , _GUID , tagVARIANT * , INT * ) = 0;
	void IAccPropServer( IAccPropServer && );
	void IAccPropServer( IAccPropServer const & );
	void IAccPropServer();
	IAccPropServer & operator=( IAccPropServer && );
	IAccPropServer & operator=( IAccPropServer const & );
	/*0008*/
};

struct IAccPropServices : IUnknown {
	/*0018*/ virtual HRESULT SetPropValue( UCHAR const * , ULONG , _GUID , tagVARIANT ) = 0;
	/*0020*/ virtual HRESULT SetPropServer( UCHAR const * , ULONG , _GUID const * , INT , IAccPropServer * , AnnoScope ) = 0;
	/*0028*/ virtual HRESULT ClearProps( UCHAR const * , ULONG , _GUID const * , INT ) = 0;
	/*0030*/ virtual HRESULT SetHwndProp( HWND__ * , ULONG , ULONG , _GUID , tagVARIANT ) = 0;
	/*0038*/ virtual HRESULT SetHwndPropStr( HWND__ * , ULONG , ULONG , _GUID , WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT SetHwndPropServer( HWND__ * , ULONG , ULONG , _GUID const * , INT , IAccPropServer * , AnnoScope ) = 0;
	/*0048*/ virtual HRESULT ClearHwndProps( HWND__ * , ULONG , ULONG , _GUID const * , INT ) = 0;
	/*0050*/ virtual HRESULT ComposeHwndIdentityString( HWND__ * , ULONG , ULONG , UCHAR * * , ULONG * ) = 0;
	/*0058*/ virtual HRESULT DecomposeHwndIdentityString( UCHAR const * , ULONG , HWND__ * * , ULONG * , ULONG * ) = 0;
	/*0060*/ virtual HRESULT SetHmenuProp( HMENU__ * , ULONG , _GUID , tagVARIANT ) = 0;
	/*0068*/ virtual HRESULT SetHmenuPropStr( HMENU__ * , ULONG , _GUID , WCHAR const * ) = 0;
	/*0070*/ virtual HRESULT SetHmenuPropServer( HMENU__ * , ULONG , _GUID const * , INT , IAccPropServer * , AnnoScope ) = 0;
	/*0078*/ virtual HRESULT ClearHmenuProps( HMENU__ * , ULONG , _GUID const * , INT ) = 0;
	/*0080*/ virtual HRESULT ComposeHmenuIdentityString( HMENU__ * , ULONG , UCHAR * * , ULONG * ) = 0;
	/*0088*/ virtual HRESULT DecomposeHmenuIdentityString( UCHAR const * , ULONG , HMENU__ * * , ULONG * ) = 0;
	void IAccPropServices( IAccPropServices && );
	void IAccPropServices( IAccPropServices const & );
	void IAccPropServices();
	IAccPropServices & operator=( IAccPropServices && );
	IAccPropServices & operator=( IAccPropServices const & );
	/*0008*/
};

struct IAccessible : IDispatch {
	/*0038*/ virtual HRESULT get_accParent( IDispatch * * ) = 0;
	/*0040*/ virtual HRESULT get_accChildCount( LONG * ) = 0;
	/*0048*/ virtual HRESULT get_accChild( tagVARIANT , IDispatch * * ) = 0;
	/*0050*/ virtual HRESULT get_accName( tagVARIANT , WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT get_accValue( tagVARIANT , WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT get_accDescription( tagVARIANT , WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT get_accRole( tagVARIANT , tagVARIANT * ) = 0;
	/*0070*/ virtual HRESULT get_accState( tagVARIANT , tagVARIANT * ) = 0;
	/*0078*/ virtual HRESULT get_accHelp( tagVARIANT , WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT get_accHelpTopic( WCHAR * * , tagVARIANT , LONG * ) = 0;
	/*0088*/ virtual HRESULT get_accKeyboardShortcut( tagVARIANT , WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT get_accFocus( tagVARIANT * ) = 0;
	/*0098*/ virtual HRESULT get_accSelection( tagVARIANT * ) = 0;
	/*00a0*/ virtual HRESULT get_accDefaultAction( tagVARIANT , WCHAR * * ) = 0;
	/*00a8*/ virtual HRESULT accSelect( LONG , tagVARIANT ) = 0;
	/*00b0*/ virtual HRESULT accLocation( LONG * , LONG * , LONG * , LONG * , tagVARIANT ) = 0;
	/*00b8*/ virtual HRESULT accNavigate( LONG , tagVARIANT , tagVARIANT * ) = 0;
	/*00c0*/ virtual HRESULT accHitTest( LONG , LONG , tagVARIANT * ) = 0;
	/*00c8*/ virtual HRESULT accDoDefaultAction( tagVARIANT ) = 0;
	/*00d0*/ virtual HRESULT put_accName( tagVARIANT , WCHAR * ) = 0;
	/*00d8*/ virtual HRESULT put_accValue( tagVARIANT , WCHAR * ) = 0;
	void IAccessible( IAccessible && );
	void IAccessible( IAccessible const & );
	void IAccessible();
	IAccessible & operator=( IAccessible && );
	IAccessible & operator=( IAccessible const & );
	/*0008*/
};

struct IAccessibleHandler : IUnknown {
	/*0018*/ virtual HRESULT AccessibleObjectFromID( LONG , LONG , IAccessible * * ) = 0;
	void IAccessibleHandler( IAccessibleHandler && );
	void IAccessibleHandler( IAccessibleHandler const & );
	void IAccessibleHandler();
	IAccessibleHandler & operator=( IAccessibleHandler && );
	IAccessibleHandler & operator=( IAccessibleHandler const & );
	/*0008*/
};

struct IAccessibleProxy : IUnknown {
	/*0018*/ virtual HRESULT SetServer( IAccessible * , IAccessibleServer * ) = 0;
	void IAccessibleProxy( IAccessibleProxy && );
	void IAccessibleProxy( IAccessibleProxy const & );
	void IAccessibleProxy();
	IAccessibleProxy & operator=( IAccessibleProxy && );
	IAccessibleProxy & operator=( IAccessibleProxy const & );
	/*0008*/
};

struct IAccessibleServer : IUnknown {
	/*0018*/ virtual HRESULT SetProxy( IAccessibleProxy * ) = 0;
	/*0020*/ virtual HRESULT GetHWND( HWND__ * * ) = 0;
	/*0028*/ virtual HRESULT GetEnumVariant( IEnumVARIANT * * ) = 0;
	void IAccessibleServer( IAccessibleServer && );
	void IAccessibleServer( IAccessibleServer const & );
	void IAccessibleServer();
	IAccessibleServer & operator=( IAccessibleServer && );
	IAccessibleServer & operator=( IAccessibleServer const & );
	/*0008*/
};

struct IAccessibleWindowlessSite : IUnknown {
	/*0018*/ virtual HRESULT AcquireObjectIdRange( LONG , IAccessibleHandler * , LONG * ) = 0;
	/*0020*/ virtual HRESULT ReleaseObjectIdRange( LONG , IAccessibleHandler * ) = 0;
	/*0028*/ virtual HRESULT QueryObjectIdRanges( IAccessibleHandler * , tagSAFEARRAY * * ) = 0;
	/*0030*/ virtual HRESULT GetParentAccessible( IAccessible * * ) = 0;
	void IAccessibleWindowlessSite( IAccessibleWindowlessSite && );
	void IAccessibleWindowlessSite( IAccessibleWindowlessSite const & );
	void IAccessibleWindowlessSite();
	IAccessibleWindowlessSite & operator=( IAccessibleWindowlessSite && );
	IAccessibleWindowlessSite & operator=( IAccessibleWindowlessSite const & );
	/*0008*/
};

struct IActionProgress : IUnknown {
	/*0018*/ virtual HRESULT Begin( _SPACTION , ULONG ) = 0;
	/*0020*/ virtual HRESULT UpdateProgress( ULONGLONG , ULONGLONG ) = 0;
	/*0028*/ virtual HRESULT UpdateText( _SPTEXT , WCHAR const * , INT ) = 0;
	/*0030*/ virtual HRESULT QueryCancel( INT * ) = 0;
	/*0038*/ virtual HRESULT ResetCancel() = 0;
	/*0040*/ virtual HRESULT End() = 0;
	void IActionProgress( IActionProgress && );
	void IActionProgress( IActionProgress const & );
	void IActionProgress();
	IActionProgress & operator=( IActionProgress && );
	IActionProgress & operator=( IActionProgress const & );
	/*0008*/
};

struct IActionProgressDialog : IUnknown {
	/*0018*/ virtual HRESULT Initialize( ULONG , WCHAR const * , WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT Stop() = 0;
	void IActionProgressDialog( IActionProgressDialog && );
	void IActionProgressDialog( IActionProgressDialog const & );
	void IActionProgressDialog();
	IActionProgressDialog & operator=( IActionProgressDialog && );
	IActionProgressDialog & operator=( IActionProgressDialog const & );
	/*0008*/
};

struct IActivationFactory : IInspectable {
	/*0030*/ virtual HRESULT ActivateInstance( IInspectable * * ) = 0;
	void IActivationFactory( IActivationFactory && );
	void IActivationFactory( IActivationFactory const & );
	void IActivationFactory();
	IActivationFactory & operator=( IActivationFactory && );
	IActivationFactory & operator=( IActivationFactory const & );
	/*0008*/
};

struct IActivationFilter : IUnknown {
	/*0018*/ virtual HRESULT HandleActivation( ULONG , _GUID const & , _GUID * ) = 0;
	void IActivationFilter( IActivationFilter && );
	void IActivationFilter( IActivationFilter const & );
	void IActivationFilter();
	IActivationFilter & operator=( IActivationFilter && );
	IActivationFilter & operator=( IActivationFilter const & );
	/*0008*/
};

struct IAddrBook : IMAPIProp {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	/*0070*/ virtual HRESULT OpenEntry( ULONG , ENTRYID * , _GUID const * , ULONG , ULONG * , IUnknown * * ) = 0;
	/*0078*/ virtual HRESULT CompareEntryIDs( ULONG , ENTRYID * , ULONG , ENTRYID * , ULONG , ULONG * ) = 0;
	/*0080*/ virtual HRESULT Advise( ULONG , ENTRYID * , ULONG , IMAPIAdviseSink * , ULONG * ) = 0;
	/*0088*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0090*/ virtual HRESULT CreateOneOff( WCHAR * , WCHAR * , WCHAR * , ULONG , ULONG * , ENTRYID * * ) = 0;
	/*0098*/ virtual HRESULT NewEntry( ULONG , ULONG , ULONG , ENTRYID * , ULONG , ENTRYID * , ULONG * , ENTRYID * * ) = 0;
	/*00a0*/ virtual HRESULT ResolveName( ULONG , ULONG , WCHAR * , _ADRLIST * ) = 0;
	/*00a8*/ virtual HRESULT Address( ULONG * , _ADRPARM * , _ADRLIST * * ) = 0;
	/*00b0*/ virtual HRESULT Details( ULONG * , void (* )( ULONG , void * ), void * , ULONG , ENTRYID * , LONG (* )( ULONG , void * , ULONG , ENTRYID * , ULONG ), void * , WCHAR * , ULONG ) = 0;
	/*00b8*/ virtual HRESULT RecipOptions( ULONG , ULONG , _ADRENTRY * ) = 0;
	/*00c0*/ virtual HRESULT QueryDefaultRecipOpt( WCHAR * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*00c8*/ virtual HRESULT GetPAB( ULONG * , ENTRYID * * ) = 0;
	/*00d0*/ virtual HRESULT SetPAB( ULONG , ENTRYID * ) = 0;
	/*00d8*/ virtual HRESULT GetDefaultDir( ULONG * , ENTRYID * * ) = 0;
	/*00e0*/ virtual HRESULT SetDefaultDir( ULONG , ENTRYID * ) = 0;
	/*00e8*/ virtual HRESULT GetSearchPath( ULONG , _SRowSet * * ) = 0;
	/*00f0*/ virtual HRESULT SetSearchPath( ULONG , _SRowSet * ) = 0;
	/*00f8*/ virtual HRESULT PrepareRecips( ULONG , _SPropTagArray * , _ADRLIST * ) = 0;
	void IAddrBook( IAddrBook && );
	void IAddrBook( IAddrBook const & );
	void IAddrBook();
	IAddrBook & operator=( IAddrBook && );
	IAddrBook & operator=( IAddrBook const & );
	/*0008*/
};

struct IAddrExclusionControl : IUnknown {
	/*0018*/ virtual HRESULT GetCurrentAddrExclusionList( _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT UpdateAddrExclusionList( IUnknown * ) = 0;
	void IAddrExclusionControl( IAddrExclusionControl && );
	void IAddrExclusionControl( IAddrExclusionControl const & );
	void IAddrExclusionControl();
	IAddrExclusionControl & operator=( IAddrExclusionControl && );
	IAddrExclusionControl & operator=( IAddrExclusionControl const & );
	/*0008*/
};

struct IAddrTrackingControl : IUnknown {
	/*0018*/ virtual HRESULT EnableCOMDynamicAddrTracking() = 0;
	/*0020*/ virtual HRESULT DisableCOMDynamicAddrTracking() = 0;
	void IAddrTrackingControl( IAddrTrackingControl && );
	void IAddrTrackingControl( IAddrTrackingControl const & );
	void IAddrTrackingControl();
	IAddrTrackingControl & operator=( IAddrTrackingControl && );
	IAddrTrackingControl & operator=( IAddrTrackingControl const & );
	/*0008*/
};

struct IAdviseSink : IUnknown {
	/*0018*/ virtual void OnDataChange( tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0020*/ virtual void OnViewChange( ULONG , LONG ) = 0;
	/*0028*/ virtual void OnRename( IMoniker * ) = 0;
	/*0030*/ virtual void OnSave() = 0;
	/*0038*/ virtual void OnClose() = 0;
	void IAdviseSink( IAdviseSink && );
	void IAdviseSink( IAdviseSink const & );
	void IAdviseSink();
	IAdviseSink & operator=( IAdviseSink && );
	IAdviseSink & operator=( IAdviseSink const & );
	/*0008*/
};

struct IAdviseSink2 : IAdviseSink {
	/*0040*/ virtual void OnLinkSrcChange( IMoniker * ) = 0;
	void IAdviseSink2( IAdviseSink2 && );
	void IAdviseSink2( IAdviseSink2 const & );
	void IAdviseSink2();
	IAdviseSink2 & operator=( IAdviseSink2 && );
	IAdviseSink2 & operator=( IAdviseSink2 const & );
	/*0008*/
};

struct IAdviseSinkEx : IAdviseSink {
	/*0040*/ virtual void OnViewStatusChange( ULONG ) = 0;
	void IAdviseSinkEx( IAdviseSinkEx && );
	void IAdviseSinkEx( IAdviseSinkEx const & );
	void IAdviseSinkEx();
	IAdviseSinkEx & operator=( IAdviseSinkEx && );
	IAdviseSinkEx & operator=( IAdviseSinkEx const & );
	/*0008*/
};

struct IAgileDataObject : IDataObject {
	void IAgileDataObject( IAgileDataObject && );
	void IAgileDataObject( IAgileDataObject const & );
	void IAgileDataObject();
	IAgileDataObject & operator=( IAgileDataObject && );
	IAgileDataObject & operator=( IAgileDataObject const & );
	/*0008*/
};

struct IAgileObject : IUnknown {
	void IAgileObject( IAgileObject && );
	void IAgileObject( IAgileObject const & );
	void IAgileObject();
	IAgileObject & operator=( IAgileObject && );
	IAgileObject & operator=( IAgileObject const & );
	/*0008*/
};

struct IAgileReference : IUnknown {
	/*0018*/ virtual HRESULT Resolve( _GUID const & , void * * ) = 0;
	void IAgileReference( IAgileReference && );
	void IAgileReference( IAgileReference const & );
	void IAgileReference();
	IAgileReference & operator=( IAgileReference && );
	IAgileReference & operator=( IAgileReference const & );
	/*0008*/
};

struct IAllowAstaToAstaDeadlockRisk : IUnknown {
	void IAllowAstaToAstaDeadlockRisk( IAllowAstaToAstaDeadlockRisk && );
	void IAllowAstaToAstaDeadlockRisk( IAllowAstaToAstaDeadlockRisk const & );
	void IAllowAstaToAstaDeadlockRisk();
	IAllowAstaToAstaDeadlockRisk & operator=( IAllowAstaToAstaDeadlockRisk && );
	IAllowAstaToAstaDeadlockRisk & operator=( IAllowAstaToAstaDeadlockRisk const & );
	/*0008*/
};

struct IApartmentShutdown : IUnknown {
	/*0018*/ virtual void OnUninitialize( ULONGLONG ) = 0;
	void IApartmentShutdown( IApartmentShutdown && );
	void IApartmentShutdown( IApartmentShutdown const & );
	void IApartmentShutdown();
	IApartmentShutdown & operator=( IApartmentShutdown && );
	IApartmentShutdown & operator=( IApartmentShutdown const & );
	/*0008*/
};

struct IAppActivationUIInfo : IUnknown {
	/*0018*/ virtual HRESULT GetMonitor( HMONITOR__ * * ) = 0;
	/*0020*/ virtual HRESULT GetInvokePoint( tagPOINT * ) = 0;
	/*0028*/ virtual HRESULT GetShowCommand( INT * ) = 0;
	/*0030*/ virtual HRESULT GetShowUI( INT * ) = 0;
	/*0038*/ virtual HRESULT GetKeyState( ULONG * ) = 0;
	void IAppActivationUIInfo( IAppActivationUIInfo && );
	void IAppActivationUIInfo( IAppActivationUIInfo const & );
	void IAppActivationUIInfo();
	IAppActivationUIInfo & operator=( IAppActivationUIInfo && );
	IAppActivationUIInfo & operator=( IAppActivationUIInfo const & );
	/*0008*/
};

struct IAppVisibility : IUnknown {
	/*0018*/ virtual HRESULT GetAppVisibilityOnMonitor( HMONITOR__ * , MONITOR_APP_VISIBILITY * ) = 0;
	/*0020*/ virtual HRESULT IsLauncherVisible( INT * ) = 0;
	/*0028*/ virtual HRESULT Advise( IAppVisibilityEvents * , ULONG * ) = 0;
	/*0030*/ virtual HRESULT Unadvise( ULONG ) = 0;
	void IAppVisibility( IAppVisibility && );
	void IAppVisibility( IAppVisibility const & );
	void IAppVisibility();
	IAppVisibility & operator=( IAppVisibility && );
	IAppVisibility & operator=( IAppVisibility const & );
	/*0008*/
};

struct IAppVisibilityEvents : IUnknown {
	/*0018*/ virtual HRESULT AppVisibilityOnMonitorChanged( HMONITOR__ * , MONITOR_APP_VISIBILITY , MONITOR_APP_VISIBILITY ) = 0;
	/*0020*/ virtual HRESULT LauncherVisibilityChange( INT ) = 0;
	void IAppVisibilityEvents( IAppVisibilityEvents && );
	void IAppVisibilityEvents( IAppVisibilityEvents const & );
	void IAppVisibilityEvents();
	IAppVisibilityEvents & operator=( IAppVisibilityEvents && );
	IAppVisibilityEvents & operator=( IAppVisibilityEvents const & );
	/*0008*/
};

struct IApplicationActivationManager : IUnknown {
	/*0018*/ virtual HRESULT ActivateApplication( WCHAR const * , WCHAR const * , ACTIVATEOPTIONS , ULONG * ) = 0;
	/*0020*/ virtual HRESULT ActivateForFile( WCHAR const * , IShellItemArray * , WCHAR const * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT ActivateForProtocol( WCHAR const * , IShellItemArray * , ULONG * ) = 0;
	void IApplicationActivationManager( IApplicationActivationManager && );
	void IApplicationActivationManager( IApplicationActivationManager const & );
	void IApplicationActivationManager();
	IApplicationActivationManager & operator=( IApplicationActivationManager && );
	IApplicationActivationManager & operator=( IApplicationActivationManager const & );
	/*0008*/
};

struct IApplicationAssociationRegistration : IUnknown {
	/*0018*/ virtual HRESULT QueryCurrentDefault( WCHAR const * , ASSOCIATIONTYPE , ASSOCIATIONLEVEL , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT QueryAppIsDefault( WCHAR const * , ASSOCIATIONTYPE , ASSOCIATIONLEVEL , WCHAR const * , INT * ) = 0;
	/*0028*/ virtual HRESULT QueryAppIsDefaultAll( ASSOCIATIONLEVEL , WCHAR const * , INT * ) = 0;
	/*0030*/ virtual HRESULT SetAppAsDefault( WCHAR const * , WCHAR const * , ASSOCIATIONTYPE ) = 0;
	/*0038*/ virtual HRESULT SetAppAsDefaultAll( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT ClearUserAssociations() = 0;
	void IApplicationAssociationRegistration( IApplicationAssociationRegistration && );
	void IApplicationAssociationRegistration( IApplicationAssociationRegistration const & );
	void IApplicationAssociationRegistration();
	IApplicationAssociationRegistration & operator=( IApplicationAssociationRegistration && );
	IApplicationAssociationRegistration & operator=( IApplicationAssociationRegistration const & );
	/*0008*/
};

struct IApplicationDesignModeSettings : IUnknown {
	/*0018*/ virtual HRESULT SetNativeDisplaySize( tagSIZE ) = 0;
	/*0020*/ virtual HRESULT SetScaleFactor( DEVICE_SCALE_FACTOR ) = 0;
	/*0028*/ virtual HRESULT SetApplicationViewState( APPLICATION_VIEW_STATE ) = 0;
	/*0030*/ virtual HRESULT ComputeApplicationSize( tagSIZE * ) = 0;
	/*0038*/ virtual HRESULT IsApplicationViewStateSupported( APPLICATION_VIEW_STATE , tagSIZE , DEVICE_SCALE_FACTOR , INT * ) = 0;
	/*0040*/ virtual HRESULT TriggerEdgeGesture( EDGE_GESTURE_KIND ) = 0;
	void IApplicationDesignModeSettings( IApplicationDesignModeSettings && );
	void IApplicationDesignModeSettings( IApplicationDesignModeSettings const & );
	void IApplicationDesignModeSettings();
	IApplicationDesignModeSettings & operator=( IApplicationDesignModeSettings && );
	IApplicationDesignModeSettings & operator=( IApplicationDesignModeSettings const & );
	/*0008*/
};

struct IApplicationDesignModeSettings2 : IApplicationDesignModeSettings {
	/*0048*/ virtual HRESULT SetNativeDisplayOrientation( NATIVE_DISPLAY_ORIENTATION ) = 0;
	/*0050*/ virtual HRESULT SetApplicationViewOrientation( APPLICATION_VIEW_ORIENTATION ) = 0;
	/*0058*/ virtual HRESULT SetAdjacentDisplayEdges( ADJACENT_DISPLAY_EDGES ) = 0;
	/*0060*/ virtual HRESULT SetIsOnLockScreen( INT ) = 0;
	/*0068*/ virtual HRESULT SetApplicationViewMinWidth( APPLICATION_VIEW_MIN_WIDTH ) = 0;
	/*0070*/ virtual HRESULT GetApplicationSizeBounds( tagSIZE * , tagSIZE * ) = 0;
	/*0078*/ virtual HRESULT GetApplicationViewOrientation( tagSIZE , APPLICATION_VIEW_ORIENTATION * ) = 0;
	void IApplicationDesignModeSettings2( IApplicationDesignModeSettings2 && );
	void IApplicationDesignModeSettings2( IApplicationDesignModeSettings2 const & );
	void IApplicationDesignModeSettings2();
	IApplicationDesignModeSettings2 & operator=( IApplicationDesignModeSettings2 && );
	IApplicationDesignModeSettings2 & operator=( IApplicationDesignModeSettings2 const & );
	/*0008*/
};

struct IApplicationDestinations : IUnknown {
	/*0018*/ virtual HRESULT SetAppID( WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT RemoveDestination( IUnknown * ) = 0;
	/*0028*/ virtual HRESULT RemoveAllDestinations() = 0;
	void IApplicationDestinations( IApplicationDestinations && );
	void IApplicationDestinations( IApplicationDestinations const & );
	void IApplicationDestinations();
	IApplicationDestinations & operator=( IApplicationDestinations && );
	IApplicationDestinations & operator=( IApplicationDestinations const & );
	/*0008*/
};

struct IApplicationDocumentLists : IUnknown {
	/*0018*/ virtual HRESULT SetAppID( WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT GetList( APPDOCLISTTYPE , UINT , _GUID const & , void * * ) = 0;
	void IApplicationDocumentLists( IApplicationDocumentLists && );
	void IApplicationDocumentLists( IApplicationDocumentLists const & );
	void IApplicationDocumentLists();
	IApplicationDocumentLists & operator=( IApplicationDocumentLists && );
	IApplicationDocumentLists & operator=( IApplicationDocumentLists const & );
	/*0008*/
};

struct IAssocHandler : IUnknown {
	/*0018*/ virtual HRESULT GetName( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetUIName( WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetIconLocation( WCHAR * * , INT * ) = 0;
	/*0030*/ virtual HRESULT IsRecommended() = 0;
	/*0038*/ virtual HRESULT MakeDefault( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT Invoke( IDataObject * ) = 0;
	/*0048*/ virtual HRESULT CreateInvoker( IDataObject * , IAssocHandlerInvoker * * ) = 0;
	void IAssocHandler( IAssocHandler && );
	void IAssocHandler( IAssocHandler const & );
	void IAssocHandler();
	IAssocHandler & operator=( IAssocHandler && );
	IAssocHandler & operator=( IAssocHandler const & );
	/*0008*/
};

struct IAssocHandlerInvoker : IUnknown {
	/*0018*/ virtual HRESULT SupportsSelection() = 0;
	/*0020*/ virtual HRESULT Invoke() = 0;
	void IAssocHandlerInvoker( IAssocHandlerInvoker && );
	void IAssocHandlerInvoker( IAssocHandlerInvoker const & );
	void IAssocHandlerInvoker();
	IAssocHandlerInvoker & operator=( IAssocHandlerInvoker && );
	IAssocHandlerInvoker & operator=( IAssocHandlerInvoker const & );
	/*0008*/
};

struct IAsyncInfo : IInspectable {
	/*0030*/ virtual HRESULT get_Id( UINT * ) = 0;
	/*0038*/ virtual HRESULT get_Status( AsyncStatus * ) = 0;
	/*0040*/ virtual HRESULT get_ErrorCode( HRESULT * ) = 0;
	/*0048*/ virtual HRESULT Cancel() = 0;
	/*0050*/ virtual HRESULT Close() = 0;
	void IAsyncInfo( IAsyncInfo && );
	void IAsyncInfo( IAsyncInfo const & );
	void IAsyncInfo();
	IAsyncInfo & operator=( IAsyncInfo && );
	IAsyncInfo & operator=( IAsyncInfo const & );
	/*0008*/
};

struct IAsyncManager : IUnknown {
	/*0018*/ virtual HRESULT CompleteCall( HRESULT ) = 0;
	/*0020*/ virtual HRESULT GetCallContext( _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT GetState( ULONG * ) = 0;
	void IAsyncManager( IAsyncManager && );
	void IAsyncManager( IAsyncManager const & );
	void IAsyncManager();
	IAsyncManager & operator=( IAsyncManager && );
	IAsyncManager & operator=( IAsyncManager const & );
	/*0008*/
};

class IAsyncOperationEventProvider {
public:
	/*0000*/ virtual void AsyncOperationStarted( UINT , IAsyncInfo * ) = 0;
	/*0008*/ virtual void AsyncOperationStartFailure( UINT , IAsyncInfo * , HRESULT ) = 0;
	/*0010*/ virtual void AsyncOperationCompleted( UINT , IAsyncInfo * ) = 0;
	/*0018*/ virtual void AsyncOperationFailure( UINT , IAsyncInfo * , HRESULT ) = 0;
	/*0020*/ virtual void AsyncOperationCancelled( UINT , IAsyncInfo * ) = 0;
	/*0028*/ virtual void AsyncOperationClosed( UINT , IAsyncInfo * ) = 0;
	/*0030*/ virtual void FireCompletion( UINT , IAsyncInfo * , void * ) = 0;
	/*0038*/ virtual void FireProgress( UINT , IAsyncInfo * , void * ) = 0;
	/*0040*/ virtual void RevokeHandlerFailure( UINT , IAsyncInfo * , HRESULT ) = 0;
	/*0048*/ virtual void RegisterHandlerFailure( UINT , IAsyncInfo * , HRESULT ) = 0;
	/*0050*/ virtual void RetrieveHandlerFailure( UINT , IAsyncInfo * , HRESULT ) = 0;
	void IAsyncOperationEventProvider( IAsyncOperationEventProvider && );
	void IAsyncOperationEventProvider( IAsyncOperationEventProvider const & );
	void IAsyncOperationEventProvider();
	IAsyncOperationEventProvider & operator=( IAsyncOperationEventProvider && );
	IAsyncOperationEventProvider & operator=( IAsyncOperationEventProvider const & );
	/*0008*/
};

struct IAsyncRpcChannelBuffer : IRpcChannelBuffer2 {
	/*0048*/ virtual HRESULT Send( tagRPCOLEMESSAGE * , ISynchronize * , ULONG * ) = 0;
	/*0050*/ virtual HRESULT Receive( tagRPCOLEMESSAGE * , ULONG * ) = 0;
	/*0058*/ virtual HRESULT GetDestCtxEx( tagRPCOLEMESSAGE * , ULONG * , void * * ) = 0;
	void IAsyncRpcChannelBuffer( IAsyncRpcChannelBuffer && );
	void IAsyncRpcChannelBuffer( IAsyncRpcChannelBuffer const & );
	void IAsyncRpcChannelBuffer();
	IAsyncRpcChannelBuffer & operator=( IAsyncRpcChannelBuffer && );
	IAsyncRpcChannelBuffer & operator=( IAsyncRpcChannelBuffer const & );
	/*0008*/
};

struct IAttach : IMAPIProp {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	void IAttach( IAttach && );
	void IAttach( IAttach const & );
	void IAttach();
	IAttach & operator=( IAttach && );
	IAttach & operator=( IAttach const & );
	/*0008*/
};

struct IAttachmentExecute : IUnknown {
	/*0018*/ virtual HRESULT SetClientTitle( WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT SetClientGuid( _GUID const & ) = 0;
	/*0028*/ virtual HRESULT SetLocalPath( WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT SetFileName( WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT SetSource( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT SetReferrer( WCHAR const * ) = 0;
	/*0048*/ virtual HRESULT CheckPolicy() = 0;
	/*0050*/ virtual HRESULT Prompt( HWND__ * , ATTACHMENT_PROMPT , ATTACHMENT_ACTION * ) = 0;
	/*0058*/ virtual HRESULT Save() = 0;
	/*0060*/ virtual HRESULT Execute( HWND__ * , WCHAR const * , void * * ) = 0;
	/*0068*/ virtual HRESULT SaveWithUI( HWND__ * ) = 0;
	/*0070*/ virtual HRESULT ClearClientState() = 0;
	void IAttachmentExecute( IAttachmentExecute && );
	void IAttachmentExecute( IAttachmentExecute const & );
	void IAttachmentExecute();
	IAttachmentExecute & operator=( IAttachmentExecute && );
	IAttachmentExecute & operator=( IAttachmentExecute const & );
	/*0008*/
};

struct IAuthenticate : IUnknown {
	/*0018*/ virtual HRESULT Authenticate( HWND__ * * , WCHAR * * , WCHAR * * ) = 0;
	void IAuthenticate( IAuthenticate && );
	void IAuthenticate( IAuthenticate const & );
	void IAuthenticate();
	IAuthenticate & operator=( IAuthenticate && );
	IAuthenticate & operator=( IAuthenticate const & );
	/*0008*/
};

struct IAuthenticateEx : IAuthenticate {
	/*0020*/ virtual HRESULT AuthenticateEx( HWND__ * * , WCHAR * * , WCHAR * * , _tagAUTHENTICATEINFO * ) = 0;
	void IAuthenticateEx( IAuthenticateEx && );
	void IAuthenticateEx( IAuthenticateEx const & );
	void IAuthenticateEx();
	IAuthenticateEx & operator=( IAuthenticateEx && );
	IAuthenticateEx & operator=( IAuthenticateEx const & );
	/*0008*/
};

struct IAxWinAmbientDispatch : IDispatch {
	/*0038*/ virtual HRESULT put_AllowWindowlessActivation( SHORT ) = 0;
	/*0040*/ virtual HRESULT get_AllowWindowlessActivation( SHORT * ) = 0;
	/*0048*/ virtual HRESULT put_BackColor( ULONG ) = 0;
	/*0050*/ virtual HRESULT get_BackColor( ULONG * ) = 0;
	/*0058*/ virtual HRESULT put_ForeColor( ULONG ) = 0;
	/*0060*/ virtual HRESULT get_ForeColor( ULONG * ) = 0;
	/*0068*/ virtual HRESULT put_LocaleID( ULONG ) = 0;
	/*0070*/ virtual HRESULT get_LocaleID( ULONG * ) = 0;
	/*0078*/ virtual HRESULT put_UserMode( SHORT ) = 0;
	/*0080*/ virtual HRESULT get_UserMode( SHORT * ) = 0;
	/*0088*/ virtual HRESULT put_DisplayAsDefault( SHORT ) = 0;
	/*0090*/ virtual HRESULT get_DisplayAsDefault( SHORT * ) = 0;
	/*0098*/ virtual HRESULT put_Font( IFontDisp * ) = 0;
	/*00a0*/ virtual HRESULT get_Font( IFontDisp * * ) = 0;
	/*00a8*/ virtual HRESULT put_MessageReflect( SHORT ) = 0;
	/*00b0*/ virtual HRESULT get_MessageReflect( SHORT * ) = 0;
	/*00b8*/ virtual HRESULT get_ShowGrabHandles( SHORT * ) = 0;
	/*00c0*/ virtual HRESULT get_ShowHatching( SHORT * ) = 0;
	/*00c8*/ virtual HRESULT put_DocHostFlags( ULONG ) = 0;
	/*00d0*/ virtual HRESULT get_DocHostFlags( ULONG * ) = 0;
	/*00d8*/ virtual HRESULT put_DocHostDoubleClickFlags( ULONG ) = 0;
	/*00e0*/ virtual HRESULT get_DocHostDoubleClickFlags( ULONG * ) = 0;
	/*00e8*/ virtual HRESULT put_AllowContextMenu( SHORT ) = 0;
	/*00f0*/ virtual HRESULT get_AllowContextMenu( SHORT * ) = 0;
	/*00f8*/ virtual HRESULT put_AllowShowUI( SHORT ) = 0;
	/*0100*/ virtual HRESULT get_AllowShowUI( SHORT * ) = 0;
	/*0108*/ virtual HRESULT put_OptionKeyPath( WCHAR * ) = 0;
	/*0110*/ virtual HRESULT get_OptionKeyPath( WCHAR * * ) = 0;
	void IAxWinAmbientDispatch( IAxWinAmbientDispatch && );
	void IAxWinAmbientDispatch( IAxWinAmbientDispatch const & );
	void IAxWinAmbientDispatch();
	IAxWinAmbientDispatch & operator=( IAxWinAmbientDispatch && );
	IAxWinAmbientDispatch & operator=( IAxWinAmbientDispatch const & );
	/*0008*/
};

struct IAxWinAmbientDispatchEx : IAxWinAmbientDispatch {
	/*0118*/ virtual HRESULT SetAmbientDispatch( IDispatch * ) = 0;
	void IAxWinAmbientDispatchEx( IAxWinAmbientDispatchEx && );
	void IAxWinAmbientDispatchEx( IAxWinAmbientDispatchEx const & );
	void IAxWinAmbientDispatchEx();
	IAxWinAmbientDispatchEx & operator=( IAxWinAmbientDispatchEx && );
	IAxWinAmbientDispatchEx & operator=( IAxWinAmbientDispatchEx const & );
	/*0008*/
};

struct IAxWinHostWindow : IUnknown {
	/*0018*/ virtual HRESULT CreateControl( WCHAR const * , HWND__ * , IStream * ) = 0;
	/*0020*/ virtual HRESULT CreateControlEx( WCHAR const * , HWND__ * , IStream * , IUnknown * * , _GUID const & , IUnknown * ) = 0;
	/*0028*/ virtual HRESULT AttachControl( IUnknown * , HWND__ * ) = 0;
	/*0030*/ virtual HRESULT QueryControl( _GUID const & , void * * ) = 0;
	/*0038*/ virtual HRESULT SetExternalDispatch( IDispatch * ) = 0;
	/*0040*/ virtual HRESULT SetExternalUIHandler( IDocHostUIHandlerDispatch * ) = 0;
	void IAxWinHostWindow( IAxWinHostWindow && );
	void IAxWinHostWindow( IAxWinHostWindow const & );
	void IAxWinHostWindow();
	IAxWinHostWindow & operator=( IAxWinHostWindow && );
	IAxWinHostWindow & operator=( IAxWinHostWindow const & );
	/*0008*/
};

struct IAxWinHostWindowLic : IAxWinHostWindow {
	/*0048*/ virtual HRESULT CreateControlLic( WCHAR const * , HWND__ * , IStream * , WCHAR * ) = 0;
	/*0050*/ virtual HRESULT CreateControlLicEx( WCHAR const * , HWND__ * , IStream * , IUnknown * * , _GUID const & , IUnknown * , WCHAR * ) = 0;
	void IAxWinHostWindowLic( IAxWinHostWindowLic && );
	void IAxWinHostWindowLic( IAxWinHostWindowLic const & );
	void IAxWinHostWindowLic();
	IAxWinHostWindowLic & operator=( IAxWinHostWindowLic && );
	IAxWinHostWindowLic & operator=( IAxWinHostWindowLic const & );
	/*0008*/
};

struct IBackgroundEventDetailsFactory : IUnknown {
	/*0018*/ virtual HRESULT CreateEventDetailsInstance( ULONG , UCHAR * , IUnknown * , _GUID const & , void * * ) = 0;
	void IBackgroundEventDetailsFactory( IBackgroundEventDetailsFactory && );
	void IBackgroundEventDetailsFactory( IBackgroundEventDetailsFactory const & );
	void IBackgroundEventDetailsFactory();
	IBackgroundEventDetailsFactory & operator=( IBackgroundEventDetailsFactory && );
	IBackgroundEventDetailsFactory & operator=( IBackgroundEventDetailsFactory const & );
	/*0008*/
};

struct IBandSite : IUnknown {
	/*0018*/ virtual HRESULT AddBand( IUnknown * ) = 0;
	/*0020*/ virtual HRESULT EnumBands( UINT , ULONG * ) = 0;
	/*0028*/ virtual HRESULT QueryBand( ULONG , IDeskBand * * , ULONG * , WCHAR * , INT ) = 0;
	/*0030*/ virtual HRESULT SetBandState( ULONG , ULONG , ULONG ) = 0;
	/*0038*/ virtual HRESULT RemoveBand( ULONG ) = 0;
	/*0040*/ virtual HRESULT GetBandObject( ULONG , _GUID const & , void * * ) = 0;
	/*0048*/ virtual HRESULT SetBandSiteInfo( tagBANDSITEINFO const * ) = 0;
	/*0050*/ virtual HRESULT GetBandSiteInfo( tagBANDSITEINFO * ) = 0;
	void IBandSite( IBandSite && );
	void IBandSite( IBandSite const & );
	void IBandSite();
	IBandSite & operator=( IBandSite && );
	IBandSite & operator=( IBandSite const & );
	/*0008*/
};

struct IBandwidthEstimationPrivate : IUnknown {
	/*0018*/ virtual HRESULT Begin( ULONG , tagBANDWIDTH_PARAMS const * ) = 0;
	/*0020*/ virtual HRESULT Get( _GUID const * , _GUID const * , ULONG * , tagBANDWIDTH_DATA * * ) = 0;
	/*0028*/ virtual HRESULT End() = 0;
	void IBandwidthEstimationPrivate( IBandwidthEstimationPrivate && );
	void IBandwidthEstimationPrivate( IBandwidthEstimationPrivate const & );
	void IBandwidthEstimationPrivate();
	IBandwidthEstimationPrivate & operator=( IBandwidthEstimationPrivate && );
	IBandwidthEstimationPrivate & operator=( IBandwidthEstimationPrivate const & );
	/*0008*/
};

struct IBannerNotificationHandler : IUnknown {
	/*0018*/ virtual HRESULT OnBannerEvent( BANNER_NOTIFICATION const * ) = 0;
	void IBannerNotificationHandler( IBannerNotificationHandler && );
	void IBannerNotificationHandler( IBannerNotificationHandler const & );
	void IBannerNotificationHandler();
	IBannerNotificationHandler & operator=( IBannerNotificationHandler && );
	IBannerNotificationHandler & operator=( IBannerNotificationHandler const & );
	/*0008*/
};

struct IBindCallbackRedirect : IUnknown {
	/*0018*/ virtual HRESULT Redirect( WCHAR const * , SHORT * ) = 0;
	void IBindCallbackRedirect( IBindCallbackRedirect && );
	void IBindCallbackRedirect( IBindCallbackRedirect const & );
	void IBindCallbackRedirect();
	IBindCallbackRedirect & operator=( IBindCallbackRedirect && );
	IBindCallbackRedirect & operator=( IBindCallbackRedirect const & );
	/*0008*/
};

struct IBindCtx : IUnknown {
	/*0018*/ virtual HRESULT RegisterObjectBound( IUnknown * ) = 0;
	/*0020*/ virtual HRESULT RevokeObjectBound( IUnknown * ) = 0;
	/*0028*/ virtual HRESULT ReleaseBoundObjects() = 0;
	/*0030*/ virtual HRESULT SetBindOptions( tagBIND_OPTS * ) = 0;
	/*0038*/ virtual HRESULT GetBindOptions( tagBIND_OPTS * ) = 0;
	/*0040*/ virtual HRESULT GetRunningObjectTable( IRunningObjectTable * * ) = 0;
	/*0048*/ virtual HRESULT RegisterObjectParam( WCHAR * , IUnknown * ) = 0;
	/*0050*/ virtual HRESULT GetObjectParam( WCHAR * , IUnknown * * ) = 0;
	/*0058*/ virtual HRESULT EnumObjectParam( IEnumString * * ) = 0;
	/*0060*/ virtual HRESULT RevokeObjectParam( WCHAR * ) = 0;
	void IBindCtx( IBindCtx && );
	void IBindCtx( IBindCtx const & );
	void IBindCtx();
	IBindCtx & operator=( IBindCtx && );
	IBindCtx & operator=( IBindCtx const & );
	/*0008*/
};

struct IBindHost : IUnknown {
	/*0018*/ virtual HRESULT CreateMoniker( WCHAR * , IBindCtx * , IMoniker * * , ULONG ) = 0;
	/*0020*/ virtual HRESULT MonikerBindToStorage( IMoniker * , IBindCtx * , IBindStatusCallback * , _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT MonikerBindToObject( IMoniker * , IBindCtx * , IBindStatusCallback * , _GUID const & , void * * ) = 0;
	void IBindHost( IBindHost && );
	void IBindHost( IBindHost const & );
	void IBindHost();
	IBindHost & operator=( IBindHost && );
	IBindHost & operator=( IBindHost const & );
	/*0008*/
};

struct IBindHttpSecurity : IUnknown {
	/*0018*/ virtual HRESULT GetIgnoreCertMask( ULONG * ) = 0;
	void IBindHttpSecurity( IBindHttpSecurity && );
	void IBindHttpSecurity( IBindHttpSecurity const & );
	void IBindHttpSecurity();
	IBindHttpSecurity & operator=( IBindHttpSecurity && );
	IBindHttpSecurity & operator=( IBindHttpSecurity const & );
	/*0008*/
};

struct IBindProtocol : IUnknown {
	/*0018*/ virtual HRESULT CreateBinding( WCHAR const * , IBindCtx * , IBinding * * ) = 0;
	void IBindProtocol( IBindProtocol && );
	void IBindProtocol( IBindProtocol const & );
	void IBindProtocol();
	IBindProtocol & operator=( IBindProtocol && );
	IBindProtocol & operator=( IBindProtocol const & );
	/*0008*/
};

struct IBindStatusCallback : IUnknown {
	/*0018*/ virtual HRESULT OnStartBinding( ULONG , IBinding * ) = 0;
	/*0020*/ virtual HRESULT GetPriority( LONG * ) = 0;
	/*0028*/ virtual HRESULT OnLowResource( ULONG ) = 0;
	/*0030*/ virtual HRESULT OnProgress( ULONG , ULONG , ULONG , WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT OnStopBinding( HRESULT , WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT GetBindInfo( ULONG * , _tagBINDINFO * ) = 0;
	/*0048*/ virtual HRESULT OnDataAvailable( ULONG , ULONG , tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0050*/ virtual HRESULT OnObjectAvailable( _GUID const & , IUnknown * ) = 0;
	void IBindStatusCallback( IBindStatusCallback && );
	void IBindStatusCallback( IBindStatusCallback const & );
	void IBindStatusCallback();
	IBindStatusCallback & operator=( IBindStatusCallback && );
	IBindStatusCallback & operator=( IBindStatusCallback const & );
	/*0008*/
};

struct IBindStatusCallbackEx : IBindStatusCallback {
	/*0058*/ virtual HRESULT GetBindInfoEx( ULONG * , _tagBINDINFO * , ULONG * , ULONG * ) = 0;
	void IBindStatusCallbackEx( IBindStatusCallbackEx && );
	void IBindStatusCallbackEx( IBindStatusCallbackEx const & );
	void IBindStatusCallbackEx();
	IBindStatusCallbackEx & operator=( IBindStatusCallbackEx && );
	IBindStatusCallbackEx & operator=( IBindStatusCallbackEx const & );
	/*0008*/
};

struct IBinding : IUnknown {
	/*0018*/ virtual HRESULT Abort() = 0;
	/*0020*/ virtual HRESULT Suspend() = 0;
	/*0028*/ virtual HRESULT Resume() = 0;
	/*0030*/ virtual HRESULT SetPriority( LONG ) = 0;
	/*0038*/ virtual HRESULT GetPriority( LONG * ) = 0;
	/*0040*/ virtual HRESULT GetBindResult( _GUID * , ULONG * , WCHAR * * , ULONG * ) = 0;
	void IBinding( IBinding && );
	void IBinding( IBinding const & );
	void IBinding();
	IBinding & operator=( IBinding && );
	IBinding & operator=( IBinding const & );
	/*0008*/
};

struct IBlockingLock : IUnknown {
	/*0018*/ virtual HRESULT Lock( ULONG ) = 0;
	/*0020*/ virtual HRESULT Unlock() = 0;
	void IBlockingLock( IBlockingLock && );
	void IBlockingLock( IBlockingLock const & );
	void IBlockingLock();
	IBlockingLock & operator=( IBlockingLock && );
	IBlockingLock & operator=( IBlockingLock const & );
	/*0008*/
};

struct IBrowserFrameOptions : IUnknown {
	/*0018*/ virtual HRESULT GetFrameOptions( ULONG , ULONG * ) = 0;
	void IBrowserFrameOptions( IBrowserFrameOptions && );
	void IBrowserFrameOptions( IBrowserFrameOptions const & );
	void IBrowserFrameOptions();
	IBrowserFrameOptions & operator=( IBrowserFrameOptions && );
	IBrowserFrameOptions & operator=( IBrowserFrameOptions const & );
	/*0008*/
};

enum ICMP4_TYPE {
	ICMP4_ECHO_REPLY = 0x0,
	ICMP4_DST_UNREACH = 0x3,
	ICMP4_SOURCE_QUENCH = 0x4,
	ICMP4_REDIRECT = 0x5,
	ICMP4_ECHO_REQUEST = 0x8,
	ICMP4_ROUTER_ADVERT = 0x9,
	ICMP4_ROUTER_SOLICIT = 0xa,
	ICMP4_TIME_EXCEEDED = 0xb,
	ICMP4_PARAM_PROB = 0xc,
	ICMP4_TIMESTAMP_REQUEST = 0xd,
	ICMP4_TIMESTAMP_REPLY = 0xe,
	ICMP4_MASK_REQUEST = 0x11,
	ICMP4_MASK_REPLY = 0x12
};

enum ICMP6_TYPE {
	ICMP6_DST_UNREACH = 0x1,
	ICMP6_PACKET_TOO_BIG = 0x2,
	ICMP6_TIME_EXCEEDED = 0x3,
	ICMP6_PARAM_PROB = 0x4,
	ICMP6_ECHO_REQUEST = 0x80,
	ICMP6_ECHO_REPLY = 0x81,
	ICMP6_MEMBERSHIP_QUERY = 0x82,
	ICMP6_MEMBERSHIP_REPORT = 0x83,
	ICMP6_MEMBERSHIP_REDUCTION = 0x84,
	ND_ROUTER_SOLICIT = 0x85,
	ND_ROUTER_ADVERT = 0x86,
	ND_NEIGHBOR_SOLICIT = 0x87,
	ND_NEIGHBOR_ADVERT = 0x88,
	ND_REDIRECT = 0x89,
	ICMP6_V2_MEMBERSHIP_REPORT = 0x8f
};

struct ICallFactory : IUnknown {
	/*0018*/ virtual HRESULT CreateCall( _GUID const & , IUnknown * , _GUID const & , IUnknown * * ) = 0;
	void ICallFactory( ICallFactory && );
	void ICallFactory( ICallFactory const & );
	void ICallFactory();
	ICallFactory & operator=( ICallFactory && );
	ICallFactory & operator=( ICallFactory const & );
	/*0008*/
};

struct ICallingProcessInfo : IUnknown {
	/*0018*/ virtual HRESULT OpenCallerProcessHandle( ULONG , void * * ) = 0;
	void ICallingProcessInfo( ICallingProcessInfo && );
	void ICallingProcessInfo( ICallingProcessInfo const & );
	void ICallingProcessInfo();
	ICallingProcessInfo & operator=( ICallingProcessInfo && );
	ICallingProcessInfo & operator=( ICallingProcessInfo const & );
	/*0008*/
};

struct ICancelMethodCalls : IUnknown {
	/*0018*/ virtual HRESULT Cancel( ULONG ) = 0;
	/*0020*/ virtual HRESULT TestCancel() = 0;
	void ICancelMethodCalls( ICancelMethodCalls && );
	void ICancelMethodCalls( ICancelMethodCalls const & );
	void ICancelMethodCalls();
	ICancelMethodCalls & operator=( ICancelMethodCalls && );
	ICancelMethodCalls & operator=( ICancelMethodCalls const & );
	/*0008*/
};

struct ICatInformation : IUnknown {
	/*0018*/ virtual HRESULT EnumCategories( ULONG , IEnumCATEGORYINFO * * ) = 0;
	/*0020*/ virtual HRESULT GetCategoryDesc( _GUID const & , ULONG , WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT EnumClassesOfCategories( ULONG , _GUID const * , ULONG , _GUID const * , IEnumGUID * * ) = 0;
	/*0030*/ virtual HRESULT IsClassOfCategories( _GUID const & , ULONG , _GUID const * , ULONG , _GUID const * ) = 0;
	/*0038*/ virtual HRESULT EnumImplCategoriesOfClass( _GUID const & , IEnumGUID * * ) = 0;
	/*0040*/ virtual HRESULT EnumReqCategoriesOfClass( _GUID const & , IEnumGUID * * ) = 0;
	void ICatInformation( ICatInformation && );
	void ICatInformation( ICatInformation const & );
	void ICatInformation();
	ICatInformation & operator=( ICatInformation && );
	ICatInformation & operator=( ICatInformation const & );
	/*0008*/
};

struct ICatRegister : IUnknown {
	/*0018*/ virtual HRESULT RegisterCategories( ULONG , tagCATEGORYINFO * ) = 0;
	/*0020*/ virtual HRESULT UnRegisterCategories( ULONG , _GUID * ) = 0;
	/*0028*/ virtual HRESULT RegisterClassImplCategories( _GUID const & , ULONG , _GUID * ) = 0;
	/*0030*/ virtual HRESULT UnRegisterClassImplCategories( _GUID const & , ULONG , _GUID * ) = 0;
	/*0038*/ virtual HRESULT RegisterClassReqCategories( _GUID const & , ULONG , _GUID * ) = 0;
	/*0040*/ virtual HRESULT UnRegisterClassReqCategories( _GUID const & , ULONG , _GUID * ) = 0;
	void ICatRegister( ICatRegister && );
	void ICatRegister( ICatRegister const & );
	void ICatRegister();
	ICatRegister & operator=( ICatRegister && );
	ICatRegister & operator=( ICatRegister const & );
	/*0008*/
};

struct ICatalogFileInfo : IUnknown {
	/*0018*/ virtual HRESULT GetCatalogFile( CHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetJavaTrust( void * * ) = 0;
	void ICatalogFileInfo( ICatalogFileInfo && );
	void ICatalogFileInfo( ICatalogFileInfo const & );
	void ICatalogFileInfo();
	ICatalogFileInfo & operator=( ICatalogFileInfo && );
	ICatalogFileInfo & operator=( ICatalogFileInfo const & );
	/*0008*/
};

struct ICategorizer : IUnknown {
	/*0018*/ virtual HRESULT GetDescription( WCHAR * , UINT ) = 0;
	/*0020*/ virtual HRESULT GetCategory( UINT , _ITEMIDLIST const __unaligned * * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT GetCategoryInfo( ULONG , CATEGORY_INFO * ) = 0;
	/*0030*/ virtual HRESULT CompareCategory( CATSORT_FLAGS , ULONG , ULONG ) = 0;
	void ICategorizer( ICategorizer && );
	void ICategorizer( ICategorizer const & );
	void ICategorizer();
	ICategorizer & operator=( ICategorizer && );
	ICategorizer & operator=( ICategorizer const & );
	/*0008*/
};

struct ICategoryProvider : IUnknown {
	/*0018*/ virtual HRESULT CanCategorizeOnSCID( _tagpropertykey const * ) = 0;
	/*0020*/ virtual HRESULT GetDefaultCategory( _GUID * , _tagpropertykey * ) = 0;
	/*0028*/ virtual HRESULT GetCategoryForSCID( _tagpropertykey const * , _GUID * ) = 0;
	/*0030*/ virtual HRESULT EnumCategories( IEnumGUID * * ) = 0;
	/*0038*/ virtual HRESULT GetCategoryName( _GUID const * , WCHAR * , UINT ) = 0;
	/*0040*/ virtual HRESULT CreateCategory( _GUID const * , _GUID const & , void * * ) = 0;
	void ICategoryProvider( ICategoryProvider && );
	void ICategoryProvider( ICategoryProvider const & );
	void ICategoryProvider();
	ICategoryProvider & operator=( ICategoryProvider && );
	ICategoryProvider & operator=( ICategoryProvider const & );
	/*0008*/
};

struct IChannelHook : IUnknown {
	/*0018*/ virtual void ClientGetSize( _GUID const & , _GUID const & , ULONG * ) = 0;
	/*0020*/ virtual void ClientFillBuffer( _GUID const & , _GUID const & , ULONG * , void * ) = 0;
	/*0028*/ virtual void ClientNotify( _GUID const & , _GUID const & , ULONG , void * , ULONG , HRESULT ) = 0;
	/*0030*/ virtual void ServerNotify( _GUID const & , _GUID const & , ULONG , void * , ULONG ) = 0;
	/*0038*/ virtual void ServerGetSize( _GUID const & , _GUID const & , HRESULT , ULONG * ) = 0;
	/*0040*/ virtual void ServerFillBuffer( _GUID const & , _GUID const & , ULONG * , void * , HRESULT ) = 0;
	void IChannelHook( IChannelHook && );
	void IChannelHook( IChannelHook const & );
	void IChannelHook();
	IChannelHook & operator=( IChannelHook && );
	IChannelHook & operator=( IChannelHook const & );
	/*0008*/
};

struct IClassActivator : IUnknown {
	/*0018*/ virtual HRESULT GetClassObject( _GUID const & , ULONG , ULONG , _GUID const & , void * * ) = 0;
	void IClassActivator( IClassActivator && );
	void IClassActivator( IClassActivator const & );
	void IClassActivator();
	IClassActivator & operator=( IClassActivator && );
	IClassActivator & operator=( IClassActivator const & );
	/*0008*/
};

struct IClassFactory : IUnknown {
	/*0018*/ virtual HRESULT CreateInstance( IUnknown * , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT LockServer( INT ) = 0;
	void IClassFactory( IClassFactory && );
	void IClassFactory( IClassFactory const & );
	void IClassFactory();
	IClassFactory & operator=( IClassFactory && );
	IClassFactory & operator=( IClassFactory const & );
	/*0008*/
};

struct IClassFactory2 : IClassFactory {
	/*0028*/ virtual HRESULT GetLicInfo( tagLICINFO * ) = 0;
	/*0030*/ virtual HRESULT RequestLicKey( ULONG , WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT CreateInstanceLic( IUnknown * , IUnknown * , _GUID const & , WCHAR * , void * * ) = 0;
	void IClassFactory2( IClassFactory2 && );
	void IClassFactory2( IClassFactory2 const & );
	void IClassFactory2();
	IClassFactory2 & operator=( IClassFactory2 && );
	IClassFactory2 & operator=( IClassFactory2 const & );
	/*0008*/
};

struct IClientSecurity : IUnknown {
	/*0018*/ virtual HRESULT QueryBlanket( IUnknown * , ULONG * , ULONG * , WCHAR * * , ULONG * , ULONG * , void * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT SetBlanket( IUnknown * , ULONG , ULONG , WCHAR * , ULONG , ULONG , void * , ULONG ) = 0;
	/*0028*/ virtual HRESULT CopyProxy( IUnknown * , IUnknown * * ) = 0;
	void IClientSecurity( IClientSecurity && );
	void IClientSecurity( IClientSecurity const & );
	void IClientSecurity();
	IClientSecurity & operator=( IClientSecurity && );
	IClientSecurity & operator=( IClientSecurity const & );
	/*0008*/
};

struct ICodeInstall : IWindowForBindingUI {
	/*0020*/ virtual HRESULT OnCodeInstallProblem( ULONG , WCHAR const * , WCHAR const * , ULONG ) = 0;
	void ICodeInstall( ICodeInstall && );
	void ICodeInstall( ICodeInstall const & );
	void ICodeInstall();
	ICodeInstall & operator=( ICodeInstall && );
	ICodeInstall & operator=( ICodeInstall const & );
	/*0008*/
};

struct IColumnManager : IUnknown {
	/*0018*/ virtual HRESULT SetColumnInfo( _tagpropertykey const & , CM_COLUMNINFO const * ) = 0;
	/*0020*/ virtual HRESULT GetColumnInfo( _tagpropertykey const & , CM_COLUMNINFO * ) = 0;
	/*0028*/ virtual HRESULT GetColumnCount( CM_ENUM_FLAGS , UINT * ) = 0;
	/*0030*/ virtual HRESULT GetColumns( CM_ENUM_FLAGS , _tagpropertykey * , UINT ) = 0;
	/*0038*/ virtual HRESULT SetColumns( _tagpropertykey const * , UINT ) = 0;
	void IColumnManager( IColumnManager && );
	void IColumnManager( IColumnManager const & );
	void IColumnManager();
	IColumnManager & operator=( IColumnManager && );
	IColumnManager & operator=( IColumnManager const & );
	/*0008*/
};

struct IComThreadingInfo : IUnknown {
	/*0018*/ virtual HRESULT GetCurrentApartmentType( _APTTYPE * ) = 0;
	/*0020*/ virtual HRESULT GetCurrentThreadType( _THDTYPE * ) = 0;
	/*0028*/ virtual HRESULT GetCurrentLogicalThreadId( _GUID * ) = 0;
	/*0030*/ virtual HRESULT SetCurrentLogicalThreadId( _GUID const & ) = 0;
	void IComThreadingInfo( IComThreadingInfo && );
	void IComThreadingInfo( IComThreadingInfo const & );
	void IComThreadingInfo();
	IComThreadingInfo & operator=( IComThreadingInfo && );
	IComThreadingInfo & operator=( IComThreadingInfo const & );
	/*0008*/
};

struct ICommDlgBrowser : IUnknown {
	/*0018*/ virtual HRESULT OnDefaultCommand( IShellView * ) = 0;
	/*0020*/ virtual HRESULT OnStateChange( IShellView * , ULONG ) = 0;
	/*0028*/ virtual HRESULT IncludeObject( IShellView * , _ITEMIDLIST const __unaligned * ) = 0;
	void ICommDlgBrowser( ICommDlgBrowser && );
	void ICommDlgBrowser( ICommDlgBrowser const & );
	void ICommDlgBrowser();
	ICommDlgBrowser & operator=( ICommDlgBrowser && );
	ICommDlgBrowser & operator=( ICommDlgBrowser const & );
	/*0008*/
};

struct ICommDlgBrowser2 : ICommDlgBrowser {
	/*0030*/ virtual HRESULT Notify( IShellView * , ULONG ) = 0;
	/*0038*/ virtual HRESULT GetDefaultMenuText( IShellView * , WCHAR * , INT ) = 0;
	/*0040*/ virtual HRESULT GetViewFlags( ULONG * ) = 0;
	void ICommDlgBrowser2( ICommDlgBrowser2 && );
	void ICommDlgBrowser2( ICommDlgBrowser2 const & );
	void ICommDlgBrowser2();
	ICommDlgBrowser2 & operator=( ICommDlgBrowser2 && );
	ICommDlgBrowser2 & operator=( ICommDlgBrowser2 const & );
	/*0008*/
};

struct ICondition : IPersistStream {
	/*0040*/ virtual HRESULT GetConditionType( tagCONDITION_TYPE * ) = 0;
	/*0048*/ virtual HRESULT GetSubConditions( _GUID const & , void * * ) = 0;
	/*0050*/ virtual HRESULT GetComparisonInfo( WCHAR * * , tagCONDITION_OPERATION * , tagPROPVARIANT * ) = 0;
	/*0058*/ virtual HRESULT GetValueType( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT GetValueNormalization( WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT GetInputTerms( IRichChunk * * , IRichChunk * * , IRichChunk * * ) = 0;
	/*0070*/ virtual HRESULT Clone( ICondition * * ) = 0;
	void ICondition( ICondition && );
	void ICondition( ICondition const & );
	void ICondition();
	ICondition & operator=( ICondition && );
	ICondition & operator=( ICondition const & );
	/*0008*/
};

struct ICondition2 : ICondition {
	/*0078*/ virtual HRESULT GetLocale( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT GetLeafConditionInfo( _tagpropertykey * , tagCONDITION_OPERATION * , tagPROPVARIANT * ) = 0;
	void ICondition2( ICondition2 && );
	void ICondition2( ICondition2 const & );
	void ICondition2();
	ICondition2 & operator=( ICondition2 && );
	ICondition2 & operator=( ICondition2 const & );
	/*0008*/
};

struct IConnectableCredentialProviderCredential : ICredentialProviderCredential {
	/*00a0*/ virtual HRESULT Connect( IQueryContinueWithStatus * ) = 0;
	/*00a8*/ virtual HRESULT Disconnect() = 0;
	void IConnectableCredentialProviderCredential( IConnectableCredentialProviderCredential && );
	void IConnectableCredentialProviderCredential( IConnectableCredentialProviderCredential const & );
	void IConnectableCredentialProviderCredential();
	IConnectableCredentialProviderCredential & operator=( IConnectableCredentialProviderCredential && );
	IConnectableCredentialProviderCredential & operator=( IConnectableCredentialProviderCredential const & );
	/*0008*/
};

struct IConnectionPoint : IUnknown {
	/*0018*/ virtual HRESULT GetConnectionInterface( _GUID * ) = 0;
	/*0020*/ virtual HRESULT GetConnectionPointContainer( IConnectionPointContainer * * ) = 0;
	/*0028*/ virtual HRESULT Advise( IUnknown * , ULONG * ) = 0;
	/*0030*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0038*/ virtual HRESULT EnumConnections( IEnumConnections * * ) = 0;
	void IConnectionPoint( IConnectionPoint && );
	void IConnectionPoint( IConnectionPoint const & );
	void IConnectionPoint();
	IConnectionPoint & operator=( IConnectionPoint && );
	IConnectionPoint & operator=( IConnectionPoint const & );
	/*0008*/
};

struct IConnectionPointContainer : IUnknown {
	/*0018*/ virtual HRESULT EnumConnectionPoints( IEnumConnectionPoints * * ) = 0;
	/*0020*/ virtual HRESULT FindConnectionPoint( _GUID const & , IConnectionPoint * * ) = 0;
	void IConnectionPointContainer( IConnectionPointContainer && );
	void IConnectionPointContainer( IConnectionPointContainer const & );
	void IConnectionPointContainer();
	IConnectionPointContainer & operator=( IConnectionPointContainer && );
	IConnectionPointContainer & operator=( IConnectionPointContainer const & );
	/*0008*/
};

struct IContactManagerInterop : IUnknown {
	/*0018*/ virtual HRESULT ShowContactCardForWindow( HWND__ * , IUnknown * , tagRECT const * , FLYOUT_PLACEMENT ) = 0;
	void IContactManagerInterop( IContactManagerInterop && );
	void IContactManagerInterop( IContactManagerInterop const & );
	void IContactManagerInterop();
	IContactManagerInterop & operator=( IContactManagerInterop && );
	IContactManagerInterop & operator=( IContactManagerInterop const & );
	/*0008*/
};

struct IContextMenu : IUnknown {
	/*0018*/ virtual HRESULT QueryContextMenu( HMENU__ * , UINT , UINT , UINT , UINT ) = 0;
	/*0020*/ virtual HRESULT InvokeCommand( _CMINVOKECOMMANDINFO * ) = 0;
	/*0028*/ virtual HRESULT GetCommandString( ULONGLONG , UINT , UINT * , CHAR * , UINT ) = 0;
	void IContextMenu( IContextMenu && );
	void IContextMenu( IContextMenu const & );
	void IContextMenu();
	IContextMenu & operator=( IContextMenu && );
	IContextMenu & operator=( IContextMenu const & );
	/*0008*/
};

struct IContextMenu2 : IContextMenu {
	/*0030*/ virtual HRESULT HandleMenuMsg( UINT , ULONGLONG , LONGLONG ) = 0;
	void IContextMenu2( IContextMenu2 && );
	void IContextMenu2( IContextMenu2 const & );
	void IContextMenu2();
	IContextMenu2 & operator=( IContextMenu2 && );
	IContextMenu2 & operator=( IContextMenu2 const & );
	/*0008*/
};

struct IContextMenu3 : IContextMenu2 {
	/*0038*/ virtual HRESULT HandleMenuMsg2( UINT , ULONGLONG , LONGLONG , LONGLONG * ) = 0;
	void IContextMenu3( IContextMenu3 && );
	void IContextMenu3( IContextMenu3 const & );
	void IContextMenu3();
	IContextMenu3 & operator=( IContextMenu3 && );
	IContextMenu3 & operator=( IContextMenu3 const & );
	/*0008*/
};

struct IContextMenuCB : IUnknown {
	/*0018*/ virtual HRESULT CallBack( IShellFolder * , HWND__ * , IDataObject * , UINT , ULONGLONG , LONGLONG ) = 0;
	void IContextMenuCB( IContextMenuCB && );
	void IContextMenuCB( IContextMenuCB const & );
	void IContextMenuCB();
	IContextMenuCB & operator=( IContextMenuCB && );
	IContextMenuCB & operator=( IContextMenuCB const & );
	/*0008*/
};

struct IContextMenuSite : IUnknown {
	/*0018*/ virtual HRESULT DoContextMenuPopup( IUnknown * , UINT , tagPOINT ) = 0;
	void IContextMenuSite( IContextMenuSite && );
	void IContextMenuSite( IContextMenuSite const & );
	void IContextMenuSite();
	IContextMenuSite & operator=( IContextMenuSite && );
	IContextMenuSite & operator=( IContextMenuSite const & );
	/*0008*/
};

struct IContinue : IUnknown {
	/*0018*/ virtual HRESULT FContinue() = 0;
	void IContinue( IContinue && );
	void IContinue( IContinue const & );
	void IContinue();
	IContinue & operator=( IContinue && );
	IContinue & operator=( IContinue const & );
	/*0008*/
};

struct ICreateErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT SetGUID( _GUID const & ) = 0;
	/*0020*/ virtual HRESULT SetSource( WCHAR * ) = 0;
	/*0028*/ virtual HRESULT SetDescription( WCHAR * ) = 0;
	/*0030*/ virtual HRESULT SetHelpFile( WCHAR * ) = 0;
	/*0038*/ virtual HRESULT SetHelpContext( ULONG ) = 0;
	void ICreateErrorInfo( ICreateErrorInfo && );
	void ICreateErrorInfo( ICreateErrorInfo const & );
	void ICreateErrorInfo();
	ICreateErrorInfo & operator=( ICreateErrorInfo && );
	ICreateErrorInfo & operator=( ICreateErrorInfo const & );
	/*0008*/
};

struct ICreateObject : IUnknown {
	/*0018*/ virtual HRESULT CreateObject( _GUID const & , IUnknown * , _GUID const & , void * * ) = 0;
	void ICreateObject( ICreateObject && );
	void ICreateObject( ICreateObject const & );
	void ICreateObject();
	ICreateObject & operator=( ICreateObject && );
	ICreateObject & operator=( ICreateObject const & );
	/*0008*/
};

struct ICreateProcessInputs : IUnknown {
	/*0018*/ virtual HRESULT GetCreateFlags( ULONG * ) = 0;
	/*0020*/ virtual HRESULT SetCreateFlags( ULONG ) = 0;
	/*0028*/ virtual HRESULT AddCreateFlags( ULONG ) = 0;
	/*0030*/ virtual HRESULT SetHotKey( USHORT ) = 0;
	/*0038*/ virtual HRESULT AddStartupFlags( ULONG ) = 0;
	/*0040*/ virtual HRESULT SetTitle( WCHAR const * ) = 0;
	/*0048*/ virtual HRESULT SetEnvironmentVariableW( WCHAR const * , WCHAR const * ) = 0;
	void ICreateProcessInputs( ICreateProcessInputs && );
	void ICreateProcessInputs( ICreateProcessInputs const & );
	void ICreateProcessInputs();
	ICreateProcessInputs & operator=( ICreateProcessInputs && );
	ICreateProcessInputs & operator=( ICreateProcessInputs const & );
	/*0008*/
};

struct ICreateTypeInfo : IUnknown {
	/*0018*/ virtual HRESULT SetGuid( _GUID const & ) = 0;
	/*0020*/ virtual HRESULT SetTypeFlags( UINT ) = 0;
	/*0028*/ virtual HRESULT SetDocString( WCHAR * ) = 0;
	/*0030*/ virtual HRESULT SetHelpContext( ULONG ) = 0;
	/*0038*/ virtual HRESULT SetVersion( USHORT , USHORT ) = 0;
	/*0040*/ virtual HRESULT AddRefTypeInfo( ITypeInfo * , ULONG * ) = 0;
	/*0048*/ virtual HRESULT AddFuncDesc( UINT , tagFUNCDESC * ) = 0;
	/*0050*/ virtual HRESULT AddImplType( UINT , ULONG ) = 0;
	/*0058*/ virtual HRESULT SetImplTypeFlags( UINT , INT ) = 0;
	/*0060*/ virtual HRESULT SetAlignment( USHORT ) = 0;
	/*0068*/ virtual HRESULT SetSchema( WCHAR * ) = 0;
	/*0070*/ virtual HRESULT AddVarDesc( UINT , tagVARDESC * ) = 0;
	/*0078*/ virtual HRESULT SetFuncAndParamNames( UINT , WCHAR * * , UINT ) = 0;
	/*0080*/ virtual HRESULT SetVarName( UINT , WCHAR * ) = 0;
	/*0088*/ virtual HRESULT SetTypeDescAlias( tagTYPEDESC * ) = 0;
	/*0090*/ virtual HRESULT DefineFuncAsDllEntry( UINT , WCHAR * , WCHAR * ) = 0;
	/*0098*/ virtual HRESULT SetFuncDocString( UINT , WCHAR * ) = 0;
	/*00a0*/ virtual HRESULT SetVarDocString( UINT , WCHAR * ) = 0;
	/*00a8*/ virtual HRESULT SetFuncHelpContext( UINT , ULONG ) = 0;
	/*00b0*/ virtual HRESULT SetVarHelpContext( UINT , ULONG ) = 0;
	/*00b8*/ virtual HRESULT SetMops( UINT , WCHAR * ) = 0;
	/*00c0*/ virtual HRESULT SetTypeIdldesc( tagIDLDESC * ) = 0;
	/*00c8*/ virtual HRESULT LayOut() = 0;
	void ICreateTypeInfo( ICreateTypeInfo && );
	void ICreateTypeInfo( ICreateTypeInfo const & );
	void ICreateTypeInfo();
	ICreateTypeInfo & operator=( ICreateTypeInfo && );
	ICreateTypeInfo & operator=( ICreateTypeInfo const & );
	/*0008*/
};

struct ICreateTypeInfo2 : ICreateTypeInfo {
	/*00d0*/ virtual HRESULT DeleteFuncDesc( UINT ) = 0;
	/*00d8*/ virtual HRESULT DeleteFuncDescByMemId( LONG , tagINVOKEKIND ) = 0;
	/*00e0*/ virtual HRESULT DeleteVarDesc( UINT ) = 0;
	/*00e8*/ virtual HRESULT DeleteVarDescByMemId( LONG ) = 0;
	/*00f0*/ virtual HRESULT DeleteImplType( UINT ) = 0;
	/*00f8*/ virtual HRESULT SetCustData( _GUID const & , tagVARIANT * ) = 0;
	/*0100*/ virtual HRESULT SetFuncCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*0108*/ virtual HRESULT SetParamCustData( UINT , UINT , _GUID const & , tagVARIANT * ) = 0;
	/*0110*/ virtual HRESULT SetVarCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*0118*/ virtual HRESULT SetImplTypeCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*0120*/ virtual HRESULT SetHelpStringContext( ULONG ) = 0;
	/*0128*/ virtual HRESULT SetFuncHelpStringContext( UINT , ULONG ) = 0;
	/*0130*/ virtual HRESULT SetVarHelpStringContext( UINT , ULONG ) = 0;
	/*0138*/ virtual HRESULT Invalidate() = 0;
	/*0140*/ virtual HRESULT SetName( WCHAR * ) = 0;
	void ICreateTypeInfo2( ICreateTypeInfo2 && );
	void ICreateTypeInfo2( ICreateTypeInfo2 const & );
	void ICreateTypeInfo2();
	ICreateTypeInfo2 & operator=( ICreateTypeInfo2 && );
	ICreateTypeInfo2 & operator=( ICreateTypeInfo2 const & );
	/*0008*/
};

struct ICreateTypeLib : IUnknown {
	/*0018*/ virtual HRESULT CreateTypeInfo( WCHAR * , tagTYPEKIND , ICreateTypeInfo * * ) = 0;
	/*0020*/ virtual HRESULT SetName( WCHAR * ) = 0;
	/*0028*/ virtual HRESULT SetVersion( USHORT , USHORT ) = 0;
	/*0030*/ virtual HRESULT SetGuid( _GUID const & ) = 0;
	/*0038*/ virtual HRESULT SetDocString( WCHAR * ) = 0;
	/*0040*/ virtual HRESULT SetHelpFileName( WCHAR * ) = 0;
	/*0048*/ virtual HRESULT SetHelpContext( ULONG ) = 0;
	/*0050*/ virtual HRESULT SetLcid( ULONG ) = 0;
	/*0058*/ virtual HRESULT SetLibFlags( UINT ) = 0;
	/*0060*/ virtual HRESULT SaveAllChanges() = 0;
	void ICreateTypeLib( ICreateTypeLib && );
	void ICreateTypeLib( ICreateTypeLib const & );
	void ICreateTypeLib();
	ICreateTypeLib & operator=( ICreateTypeLib && );
	ICreateTypeLib & operator=( ICreateTypeLib const & );
	/*0008*/
};

struct ICreateTypeLib2 : ICreateTypeLib {
	/*0068*/ virtual HRESULT DeleteTypeInfo( WCHAR * ) = 0;
	/*0070*/ virtual HRESULT SetCustData( _GUID const & , tagVARIANT * ) = 0;
	/*0078*/ virtual HRESULT SetHelpStringContext( ULONG ) = 0;
	/*0080*/ virtual HRESULT SetHelpStringDll( WCHAR * ) = 0;
	void ICreateTypeLib2( ICreateTypeLib2 && );
	void ICreateTypeLib2( ICreateTypeLib2 const & );
	void ICreateTypeLib2();
	ICreateTypeLib2 & operator=( ICreateTypeLib2 && );
	ICreateTypeLib2 & operator=( ICreateTypeLib2 const & );
	/*0008*/
};

struct ICreatingProcess : IUnknown {
	/*0018*/ virtual HRESULT OnCreating( ICreateProcessInputs * ) = 0;
	void ICreatingProcess( ICreatingProcess && );
	void ICreatingProcess( ICreatingProcess const & );
	void ICreatingProcess();
	ICreatingProcess & operator=( ICreatingProcess && );
	ICreatingProcess & operator=( ICreatingProcess const & );
	/*0008*/
};

struct ICredentialProvider : IUnknown {
	/*0018*/ virtual HRESULT SetUsageScenario( _CREDENTIAL_PROVIDER_USAGE_SCENARIO , ULONG ) = 0;
	/*0020*/ virtual HRESULT SetSerialization( _CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION const * ) = 0;
	/*0028*/ virtual HRESULT Advise( ICredentialProviderEvents * , ULONGLONG ) = 0;
	/*0030*/ virtual HRESULT UnAdvise() = 0;
	/*0038*/ virtual HRESULT GetFieldDescriptorCount( ULONG * ) = 0;
	/*0040*/ virtual HRESULT GetFieldDescriptorAt( ULONG , _CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR * * ) = 0;
	/*0048*/ virtual HRESULT GetCredentialCount( ULONG * , ULONG * , INT * ) = 0;
	/*0050*/ virtual HRESULT GetCredentialAt( ULONG , ICredentialProviderCredential * * ) = 0;
	void ICredentialProvider( ICredentialProvider && );
	void ICredentialProvider( ICredentialProvider const & );
	void ICredentialProvider();
	ICredentialProvider & operator=( ICredentialProvider && );
	ICredentialProvider & operator=( ICredentialProvider const & );
	/*0008*/
};

struct ICredentialProviderCredential : IUnknown {
	/*0018*/ virtual HRESULT Advise( ICredentialProviderCredentialEvents * ) = 0;
	/*0020*/ virtual HRESULT UnAdvise() = 0;
	/*0028*/ virtual HRESULT SetSelected( INT * ) = 0;
	/*0030*/ virtual HRESULT SetDeselected() = 0;
	/*0038*/ virtual HRESULT GetFieldState( ULONG , _CREDENTIAL_PROVIDER_FIELD_STATE * , _CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE * ) = 0;
	/*0040*/ virtual HRESULT GetStringValue( ULONG , WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT GetBitmapValue( ULONG , HBITMAP__ * * ) = 0;
	/*0050*/ virtual HRESULT GetCheckboxValue( ULONG , INT * , WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT GetSubmitButtonValue( ULONG , ULONG * ) = 0;
	/*0060*/ virtual HRESULT GetComboBoxValueCount( ULONG , ULONG * , ULONG * ) = 0;
	/*0068*/ virtual HRESULT GetComboBoxValueAt( ULONG , ULONG , WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT SetStringValue( ULONG , WCHAR const * ) = 0;
	/*0078*/ virtual HRESULT SetCheckboxValue( ULONG , INT ) = 0;
	/*0080*/ virtual HRESULT SetComboBoxSelectedValue( ULONG , ULONG ) = 0;
	/*0088*/ virtual HRESULT CommandLinkClicked( ULONG ) = 0;
	/*0090*/ virtual HRESULT GetSerialization( _CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE * , _CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION * , WCHAR * * , _CREDENTIAL_PROVIDER_STATUS_ICON * ) = 0;
	/*0098*/ virtual HRESULT ReportResult( LONG , LONG , WCHAR * * , _CREDENTIAL_PROVIDER_STATUS_ICON * ) = 0;
	void ICredentialProviderCredential( ICredentialProviderCredential && );
	void ICredentialProviderCredential( ICredentialProviderCredential const & );
	void ICredentialProviderCredential();
	ICredentialProviderCredential & operator=( ICredentialProviderCredential && );
	ICredentialProviderCredential & operator=( ICredentialProviderCredential const & );
	/*0008*/
};

struct ICredentialProviderCredential2 : ICredentialProviderCredential {
	/*00a0*/ virtual HRESULT GetUserSid( WCHAR * * ) = 0;
	void ICredentialProviderCredential2( ICredentialProviderCredential2 && );
	void ICredentialProviderCredential2( ICredentialProviderCredential2 const & );
	void ICredentialProviderCredential2();
	ICredentialProviderCredential2 & operator=( ICredentialProviderCredential2 && );
	ICredentialProviderCredential2 & operator=( ICredentialProviderCredential2 const & );
	/*0008*/
};

struct ICredentialProviderCredentialEvents : IUnknown {
	/*0018*/ virtual HRESULT SetFieldState( ICredentialProviderCredential * , ULONG , _CREDENTIAL_PROVIDER_FIELD_STATE ) = 0;
	/*0020*/ virtual HRESULT SetFieldInteractiveState( ICredentialProviderCredential * , ULONG , _CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE ) = 0;
	/*0028*/ virtual HRESULT SetFieldString( ICredentialProviderCredential * , ULONG , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT SetFieldCheckbox( ICredentialProviderCredential * , ULONG , INT , WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT SetFieldBitmap( ICredentialProviderCredential * , ULONG , HBITMAP__ * ) = 0;
	/*0040*/ virtual HRESULT SetFieldComboBoxSelectedItem( ICredentialProviderCredential * , ULONG , ULONG ) = 0;
	/*0048*/ virtual HRESULT DeleteFieldComboBoxItem( ICredentialProviderCredential * , ULONG , ULONG ) = 0;
	/*0050*/ virtual HRESULT AppendFieldComboBoxItem( ICredentialProviderCredential * , ULONG , WCHAR const * ) = 0;
	/*0058*/ virtual HRESULT SetFieldSubmitButton( ICredentialProviderCredential * , ULONG , ULONG ) = 0;
	/*0060*/ virtual HRESULT OnCreatingWindow( HWND__ * * ) = 0;
	void ICredentialProviderCredentialEvents( ICredentialProviderCredentialEvents && );
	void ICredentialProviderCredentialEvents( ICredentialProviderCredentialEvents const & );
	void ICredentialProviderCredentialEvents();
	ICredentialProviderCredentialEvents & operator=( ICredentialProviderCredentialEvents && );
	ICredentialProviderCredentialEvents & operator=( ICredentialProviderCredentialEvents const & );
	/*0008*/
};

struct ICredentialProviderCredentialEvents2 : ICredentialProviderCredentialEvents {
	/*0068*/ virtual HRESULT BeginFieldUpdates() = 0;
	/*0070*/ virtual HRESULT EndFieldUpdates() = 0;
	/*0078*/ virtual HRESULT SetFieldOptions( ICredentialProviderCredential * , ULONG , CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS ) = 0;
	void ICredentialProviderCredentialEvents2( ICredentialProviderCredentialEvents2 && );
	void ICredentialProviderCredentialEvents2( ICredentialProviderCredentialEvents2 const & );
	void ICredentialProviderCredentialEvents2();
	ICredentialProviderCredentialEvents2 & operator=( ICredentialProviderCredentialEvents2 && );
	ICredentialProviderCredentialEvents2 & operator=( ICredentialProviderCredentialEvents2 const & );
	/*0008*/
};

struct ICredentialProviderCredentialWithFieldOptions : IUnknown {
	/*0018*/ virtual HRESULT GetFieldOptions( ULONG , CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS * ) = 0;
	void ICredentialProviderCredentialWithFieldOptions( ICredentialProviderCredentialWithFieldOptions && );
	void ICredentialProviderCredentialWithFieldOptions( ICredentialProviderCredentialWithFieldOptions const & );
	void ICredentialProviderCredentialWithFieldOptions();
	ICredentialProviderCredentialWithFieldOptions & operator=( ICredentialProviderCredentialWithFieldOptions && );
	ICredentialProviderCredentialWithFieldOptions & operator=( ICredentialProviderCredentialWithFieldOptions const & );
	/*0008*/
};

struct ICredentialProviderEvents : IUnknown {
	/*0018*/ virtual HRESULT CredentialsChanged( ULONGLONG ) = 0;
	void ICredentialProviderEvents( ICredentialProviderEvents && );
	void ICredentialProviderEvents( ICredentialProviderEvents const & );
	void ICredentialProviderEvents();
	ICredentialProviderEvents & operator=( ICredentialProviderEvents && );
	ICredentialProviderEvents & operator=( ICredentialProviderEvents const & );
	/*0008*/
};

struct ICredentialProviderFilter : IUnknown {
	/*0018*/ virtual HRESULT Filter( _CREDENTIAL_PROVIDER_USAGE_SCENARIO , ULONG , _GUID * , INT * , ULONG ) = 0;
	/*0020*/ virtual HRESULT UpdateRemoteCredential( _CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION const * , _CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION * ) = 0;
	void ICredentialProviderFilter( ICredentialProviderFilter && );
	void ICredentialProviderFilter( ICredentialProviderFilter const & );
	void ICredentialProviderFilter();
	ICredentialProviderFilter & operator=( ICredentialProviderFilter && );
	ICredentialProviderFilter & operator=( ICredentialProviderFilter const & );
	/*0008*/
};

struct ICredentialProviderSetUserArray : IUnknown {
	/*0018*/ virtual HRESULT SetUserArray( ICredentialProviderUserArray * ) = 0;
	void ICredentialProviderSetUserArray( ICredentialProviderSetUserArray && );
	void ICredentialProviderSetUserArray( ICredentialProviderSetUserArray const & );
	void ICredentialProviderSetUserArray();
	ICredentialProviderSetUserArray & operator=( ICredentialProviderSetUserArray && );
	ICredentialProviderSetUserArray & operator=( ICredentialProviderSetUserArray const & );
	/*0008*/
};

struct ICredentialProviderUser : IUnknown {
	/*0018*/ virtual HRESULT GetSid( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetProviderID( _GUID * ) = 0;
	/*0028*/ virtual HRESULT GetStringValue( _tagpropertykey const & , WCHAR * * ) = 0;
	/*0030*/ virtual HRESULT GetValue( _tagpropertykey const & , tagPROPVARIANT * ) = 0;
	void ICredentialProviderUser( ICredentialProviderUser && );
	void ICredentialProviderUser( ICredentialProviderUser const & );
	void ICredentialProviderUser();
	ICredentialProviderUser & operator=( ICredentialProviderUser && );
	ICredentialProviderUser & operator=( ICredentialProviderUser const & );
	/*0008*/
};

struct ICredentialProviderUserArray : IUnknown {
	/*0018*/ virtual HRESULT SetProviderFilter( _GUID const & ) = 0;
	/*0020*/ virtual HRESULT GetAccountOptions( CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS * ) = 0;
	/*0028*/ virtual HRESULT GetCount( ULONG * ) = 0;
	/*0030*/ virtual HRESULT GetAt( ULONG , ICredentialProviderUser * * ) = 0;
	void ICredentialProviderUserArray( ICredentialProviderUserArray && );
	void ICredentialProviderUserArray( ICredentialProviderUserArray const & );
	void ICredentialProviderUserArray();
	ICredentialProviderUserArray & operator=( ICredentialProviderUserArray && );
	ICredentialProviderUserArray & operator=( ICredentialProviderUserArray const & );
	/*0008*/
};

struct ICurrentItem : IRelatedItem {
	void ICurrentItem( ICurrentItem && );
	void ICurrentItem( ICurrentItem const & );
	void ICurrentItem();
	ICurrentItem & operator=( ICurrentItem && );
	ICurrentItem & operator=( ICurrentItem const & );
	/*0008*/
};

struct ICustomDestinationList : IUnknown {
	/*0018*/ virtual HRESULT SetAppID( WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT BeginList( UINT * , _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT AppendCategory( WCHAR const * , IObjectArray * ) = 0;
	/*0030*/ virtual HRESULT AppendKnownCategory( KNOWNDESTCATEGORY ) = 0;
	/*0038*/ virtual HRESULT AddUserTasks( IObjectArray * ) = 0;
	/*0040*/ virtual HRESULT CommitList() = 0;
	/*0048*/ virtual HRESULT GetRemovedDestinations( _GUID const & , void * * ) = 0;
	/*0050*/ virtual HRESULT DeleteList( WCHAR const * ) = 0;
	/*0058*/ virtual HRESULT AbortList() = 0;
	void ICustomDestinationList( ICustomDestinationList && );
	void ICustomDestinationList( ICustomDestinationList const & );
	void ICustomDestinationList();
	ICustomDestinationList & operator=( ICustomDestinationList && );
	ICustomDestinationList & operator=( ICustomDestinationList const & );
	/*0008*/
};

struct IDataAdviseHolder : IUnknown {
	/*0018*/ virtual HRESULT Advise( IDataObject * , tagFORMATETC * , ULONG , IAdviseSink * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0028*/ virtual HRESULT EnumAdvise( IEnumSTATDATA * * ) = 0;
	/*0030*/ virtual HRESULT SendOnDataChange( IDataObject * , ULONG , ULONG ) = 0;
	void IDataAdviseHolder( IDataAdviseHolder && );
	void IDataAdviseHolder( IDataAdviseHolder const & );
	void IDataAdviseHolder();
	IDataAdviseHolder & operator=( IDataAdviseHolder && );
	IDataAdviseHolder & operator=( IDataAdviseHolder const & );
	/*0008*/
};

struct IDataFilter : IUnknown {
	/*0018*/ virtual HRESULT DoEncode( ULONG , LONG , UCHAR * , LONG , UCHAR * , LONG , LONG * , LONG * , ULONG ) = 0;
	/*0020*/ virtual HRESULT DoDecode( ULONG , LONG , UCHAR * , LONG , UCHAR * , LONG , LONG * , LONG * , ULONG ) = 0;
	/*0028*/ virtual HRESULT SetEncodingLevel( ULONG ) = 0;
	void IDataFilter( IDataFilter && );
	void IDataFilter( IDataFilter const & );
	void IDataFilter();
	IDataFilter & operator=( IDataFilter && );
	IDataFilter & operator=( IDataFilter const & );
	/*0008*/
};

struct IDataObject : IUnknown {
	/*0018*/ virtual HRESULT GetData( tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0020*/ virtual HRESULT GetDataHere( tagFORMATETC * , tagSTGMEDIUM * ) = 0;
	/*0028*/ virtual HRESULT QueryGetData( tagFORMATETC * ) = 0;
	/*0030*/ virtual HRESULT GetCanonicalFormatEtc( tagFORMATETC * , tagFORMATETC * ) = 0;
	/*0038*/ virtual HRESULT SetData( tagFORMATETC * , tagSTGMEDIUM * , INT ) = 0;
	/*0040*/ virtual HRESULT EnumFormatEtc( ULONG , IEnumFORMATETC * * ) = 0;
	/*0048*/ virtual HRESULT DAdvise( tagFORMATETC * , ULONG , IAdviseSink * , ULONG * ) = 0;
	/*0050*/ virtual HRESULT DUnadvise( ULONG ) = 0;
	/*0058*/ virtual HRESULT EnumDAdvise( IEnumSTATDATA * * ) = 0;
	void IDataObject( IDataObject && );
	void IDataObject( IDataObject const & );
	void IDataObject();
	IDataObject & operator=( IDataObject && );
	IDataObject & operator=( IDataObject const & );
	/*0008*/
};

struct IDataObjectProvider : IUnknown {
	/*0018*/ virtual HRESULT GetDataObject( IDataObject * * ) = 0;
	/*0020*/ virtual HRESULT SetDataObject( IDataObject * ) = 0;
	void IDataObjectProvider( IDataObjectProvider && );
	void IDataObjectProvider( IDataObjectProvider const & );
	void IDataObjectProvider();
	IDataObjectProvider & operator=( IDataObjectProvider && );
	IDataObjectProvider & operator=( IDataObjectProvider const & );
	/*0008*/
};

struct IDataTransferManagerInterop : IUnknown {
	/*0018*/ virtual HRESULT GetForWindow( HWND__ * , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT ShowShareUIForWindow( HWND__ * ) = 0;
	void IDataTransferManagerInterop( IDataTransferManagerInterop && );
	void IDataTransferManagerInterop( IDataTransferManagerInterop const & );
	void IDataTransferManagerInterop();
	IDataTransferManagerInterop & operator=( IDataTransferManagerInterop && );
	IDataTransferManagerInterop & operator=( IDataTransferManagerInterop const & );
	/*0008*/
};

struct IDefaultExtractIconInit : IUnknown {
	/*0018*/ virtual HRESULT SetFlags( UINT ) = 0;
	/*0020*/ virtual HRESULT SetKey( HKEY__ * ) = 0;
	/*0028*/ virtual HRESULT SetNormalIcon( WCHAR const * , INT ) = 0;
	/*0030*/ virtual HRESULT SetOpenIcon( WCHAR const * , INT ) = 0;
	/*0038*/ virtual HRESULT SetShortcutIcon( WCHAR const * , INT ) = 0;
	/*0040*/ virtual HRESULT SetDefaultIcon( WCHAR const * , INT ) = 0;
	void IDefaultExtractIconInit( IDefaultExtractIconInit && );
	void IDefaultExtractIconInit( IDefaultExtractIconInit const & );
	void IDefaultExtractIconInit();
	IDefaultExtractIconInit & operator=( IDefaultExtractIconInit && );
	IDefaultExtractIconInit & operator=( IDefaultExtractIconInit const & );
	/*0008*/
};

struct IDefaultFolderMenuInitialize : IUnknown {
	/*0018*/ virtual HRESULT Initialize( HWND__ * , IContextMenuCB * , _ITEMIDLIST const __unaligned * , IShellFolder * , UINT , _ITEMIDLIST const __unaligned * * , IUnknown * , UINT , HKEY__ * const * ) = 0;
	/*0020*/ virtual HRESULT SetMenuRestrictions( DEFAULT_FOLDER_MENU_RESTRICTIONS ) = 0;
	/*0028*/ virtual HRESULT GetMenuRestrictions( DEFAULT_FOLDER_MENU_RESTRICTIONS , DEFAULT_FOLDER_MENU_RESTRICTIONS * ) = 0;
	/*0030*/ virtual HRESULT SetHandlerClsid( _GUID const & ) = 0;
	void IDefaultFolderMenuInitialize( IDefaultFolderMenuInitialize && );
	void IDefaultFolderMenuInitialize( IDefaultFolderMenuInitialize const & );
	void IDefaultFolderMenuInitialize();
	IDefaultFolderMenuInitialize & operator=( IDefaultFolderMenuInitialize && );
	IDefaultFolderMenuInitialize & operator=( IDefaultFolderMenuInitialize const & );
	/*0008*/
};

struct IDelayedPropertyStoreFactory : IPropertyStoreFactory {
	/*0028*/ virtual HRESULT GetDelayedPropertyStore( GETPROPERTYSTOREFLAGS , ULONG , _GUID const & , void * * ) = 0;
	void IDelayedPropertyStoreFactory( IDelayedPropertyStoreFactory && );
	void IDelayedPropertyStoreFactory( IDelayedPropertyStoreFactory const & );
	void IDelayedPropertyStoreFactory();
	IDelayedPropertyStoreFactory & operator=( IDelayedPropertyStoreFactory && );
	IDelayedPropertyStoreFactory & operator=( IDelayedPropertyStoreFactory const & );
	/*0008*/
};

struct IDelegateFolder : IUnknown {
	/*0018*/ virtual HRESULT SetItemAlloc( IMalloc * ) = 0;
	void IDelegateFolder( IDelegateFolder && );
	void IDelegateFolder( IDelegateFolder const & );
	void IDelegateFolder();
	IDelegateFolder & operator=( IDelegateFolder && );
	IDelegateFolder & operator=( IDelegateFolder const & );
	/*0008*/
};

struct IDelegateItem : IRelatedItem {
	void IDelegateItem( IDelegateItem && );
	void IDelegateItem( IDelegateItem const & );
	void IDelegateItem();
	IDelegateItem & operator=( IDelegateItem && );
	IDelegateItem & operator=( IDelegateItem const & );
	/*0008*/
};

struct IDeskBand : IDockingWindow {
	/*0040*/ virtual HRESULT GetBandInfo( ULONG , ULONG , DESKBANDINFO * ) = 0;
	void IDeskBand( IDeskBand && );
	void IDeskBand( IDeskBand const & );
	void IDeskBand();
	IDeskBand & operator=( IDeskBand && );
	IDeskBand & operator=( IDeskBand const & );
	/*0008*/
};

struct IDeskBandInfo : IUnknown {
	/*0018*/ virtual HRESULT GetDefaultBandWidth( ULONG , ULONG , INT * ) = 0;
	void IDeskBandInfo( IDeskBandInfo && );
	void IDeskBandInfo( IDeskBandInfo const & );
	void IDeskBandInfo();
	IDeskBandInfo & operator=( IDeskBandInfo && );
	IDeskBandInfo & operator=( IDeskBandInfo const & );
	/*0008*/
};

struct IDeskBar : IOleWindow {
	/*0028*/ virtual HRESULT SetClient( IUnknown * ) = 0;
	/*0030*/ virtual HRESULT GetClient( IUnknown * * ) = 0;
	/*0038*/ virtual HRESULT OnPosRectChangeDB( tagRECT * ) = 0;
	void IDeskBar( IDeskBar && );
	void IDeskBar( IDeskBar const & );
	void IDeskBar();
	IDeskBar & operator=( IDeskBar && );
	IDeskBar & operator=( IDeskBar const & );
	/*0008*/
};

struct IDesktopWallpaper : IUnknown {
	/*0018*/ virtual HRESULT SetWallpaper( WCHAR const * , WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT GetWallpaper( WCHAR const * , WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetMonitorDevicePathAt( UINT , WCHAR * * ) = 0;
	/*0030*/ virtual HRESULT GetMonitorDevicePathCount( UINT * ) = 0;
	/*0038*/ virtual HRESULT GetMonitorRECT( WCHAR const * , tagRECT * ) = 0;
	/*0040*/ virtual HRESULT SetBackgroundColor( ULONG ) = 0;
	/*0048*/ virtual HRESULT GetBackgroundColor( ULONG * ) = 0;
	/*0050*/ virtual HRESULT SetPosition( DESKTOP_WALLPAPER_POSITION ) = 0;
	/*0058*/ virtual HRESULT GetPosition( DESKTOP_WALLPAPER_POSITION * ) = 0;
	/*0060*/ virtual HRESULT SetSlideshow( IShellItemArray * ) = 0;
	/*0068*/ virtual HRESULT GetSlideshow( IShellItemArray * * ) = 0;
	/*0070*/ virtual HRESULT SetSlideshowOptions( DESKTOP_SLIDESHOW_OPTIONS , UINT ) = 0;
	/*0078*/ virtual HRESULT GetSlideshowOptions( DESKTOP_SLIDESHOW_OPTIONS * , UINT * ) = 0;
	/*0080*/ virtual HRESULT AdvanceSlideshow( WCHAR const * , DESKTOP_SLIDESHOW_DIRECTION ) = 0;
	/*0088*/ virtual HRESULT GetStatus( DESKTOP_SLIDESHOW_STATE * ) = 0;
	/*0090*/ virtual HRESULT Enable( INT ) = 0;
	void IDesktopWallpaper( IDesktopWallpaper && );
	void IDesktopWallpaper( IDesktopWallpaper const & );
	void IDesktopWallpaper();
	IDesktopWallpaper & operator=( IDesktopWallpaper && );
	IDesktopWallpaper & operator=( IDesktopWallpaper const & );
	/*0008*/
};

struct IDestinationStreamFactory : IUnknown {
	/*0018*/ virtual HRESULT GetDestinationStream( IStream * * ) = 0;
	void IDestinationStreamFactory( IDestinationStreamFactory && );
	void IDestinationStreamFactory( IDestinationStreamFactory const & );
	void IDestinationStreamFactory();
	IDestinationStreamFactory & operator=( IDestinationStreamFactory && );
	IDestinationStreamFactory & operator=( IDestinationStreamFactory const & );
	/*0008*/
};

struct IDirectWriterLock : IUnknown {
	/*0018*/ virtual HRESULT WaitForWriteAccess( ULONG ) = 0;
	/*0020*/ virtual HRESULT ReleaseWriteAccess() = 0;
	/*0028*/ virtual HRESULT HaveWriteAccess() = 0;
	void IDirectWriterLock( IDirectWriterLock && );
	void IDirectWriterLock( IDirectWriterLock const & );
	void IDirectWriterLock();
	IDirectWriterLock & operator=( IDirectWriterLock && );
	IDirectWriterLock & operator=( IDirectWriterLock const & );
	/*0008*/
};

struct IDisableAsyncRemotingForWinrtAsync : IUnknown {
	void IDisableAsyncRemotingForWinrtAsync( IDisableAsyncRemotingForWinrtAsync && );
	void IDisableAsyncRemotingForWinrtAsync( IDisableAsyncRemotingForWinrtAsync const & );
	void IDisableAsyncRemotingForWinrtAsync();
	IDisableAsyncRemotingForWinrtAsync & operator=( IDisableAsyncRemotingForWinrtAsync && );
	IDisableAsyncRemotingForWinrtAsync & operator=( IDisableAsyncRemotingForWinrtAsync const & );
	/*0008*/
};

struct IDisableFastRundown : IUnknown {
	void IDisableFastRundown( IDisableFastRundown && );
	void IDisableFastRundown( IDisableFastRundown const & );
	void IDisableFastRundown();
	IDisableFastRundown & operator=( IDisableFastRundown && );
	IDisableFastRundown & operator=( IDisableFastRundown const & );
	/*0008*/
};

struct IDispatch : IUnknown {
	/*0018*/ virtual HRESULT GetTypeInfoCount( UINT * ) = 0;
	/*0020*/ virtual HRESULT GetTypeInfo( UINT , ULONG , ITypeInfo * * ) = 0;
	/*0028*/ virtual HRESULT GetIDsOfNames( _GUID const & , WCHAR * * , UINT , ULONG , LONG * ) = 0;
	/*0030*/ virtual HRESULT Invoke( LONG , _GUID const & , ULONG , USHORT , tagDISPPARAMS * , tagVARIANT * , tagEXCEPINFO * , UINT * ) = 0;
	void IDispatch( IDispatch && );
	void IDispatch( IDispatch const & );
	void IDispatch();
	IDispatch & operator=( IDispatch && );
	IDispatch & operator=( IDispatch const & );
	/*0008*/
};

struct IDisplayItem : IRelatedItem {
	void IDisplayItem( IDisplayItem && );
	void IDisplayItem( IDisplayItem const & );
	void IDisplayItem();
	IDisplayItem & operator=( IDisplayItem && );
	IDisplayItem & operator=( IDisplayItem const & );
	/*0008*/
};

struct IDistList : IMAPIContainer {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT GetContentsTable( ULONG , IMAPITable * * ) = 0;
	/*    */ virtual HRESULT GetHierarchyTable( ULONG , IMAPITable * * ) = 0;
	/*    */ virtual HRESULT OpenEntry( ULONG , ENTRYID * , _GUID const * , ULONG , ULONG * , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetSearchCriteria( _SRestriction * , _SBinaryArray * , ULONG ) = 0;
	/*    */ virtual HRESULT GetSearchCriteria( ULONG , _SRestriction * * , _SBinaryArray * * , ULONG * ) = 0;
	/*0098*/ virtual HRESULT CreateEntry( ULONG , ENTRYID * , ULONG , IMAPIProp * * ) = 0;
	/*00a0*/ virtual HRESULT CopyEntries( _SBinaryArray * , ULONG , IMAPIProgress * , ULONG ) = 0;
	/*00a8*/ virtual HRESULT DeleteEntries( _SBinaryArray * , ULONG ) = 0;
	/*00b0*/ virtual HRESULT ResolveNames( _SPropTagArray * , ULONG , _ADRLIST * , _flaglist * ) = 0;
	void IDistList( IDistList && );
	void IDistList( IDistList const & );
	void IDistList();
	IDistList & operator=( IDistList && );
	IDistList & operator=( IDistList const & );
	/*0008*/
};

struct IDocHostUIHandlerDispatch : IDispatch {
	/*0038*/ virtual HRESULT ShowContextMenu( ULONG , ULONG , ULONG , IUnknown * , IDispatch * , HRESULT * ) = 0;
	/*0040*/ virtual HRESULT GetHostInfo( ULONG * , ULONG * ) = 0;
	/*0048*/ virtual HRESULT ShowUI( ULONG , IUnknown * , IUnknown * , IUnknown * , IUnknown * , HRESULT * ) = 0;
	/*0050*/ virtual HRESULT HideUI() = 0;
	/*0058*/ virtual HRESULT UpdateUI() = 0;
	/*0060*/ virtual HRESULT EnableModeless( SHORT ) = 0;
	/*0068*/ virtual HRESULT OnDocWindowActivate( SHORT ) = 0;
	/*0070*/ virtual HRESULT OnFrameWindowActivate( SHORT ) = 0;
	/*0078*/ virtual HRESULT ResizeBorder( LONG , LONG , LONG , LONG , IUnknown * , SHORT ) = 0;
	/*0080*/ virtual HRESULT TranslateAcceleratorW( ULONGLONG , ULONG , ULONGLONG , ULONGLONG , WCHAR * , ULONG , HRESULT * ) = 0;
	/*0088*/ virtual HRESULT GetOptionKeyPath( WCHAR * * , ULONG ) = 0;
	/*0090*/ virtual HRESULT GetDropTarget( IUnknown * , IUnknown * * ) = 0;
	/*0098*/ virtual HRESULT GetExternal( IDispatch * * ) = 0;
	/*00a0*/ virtual HRESULT TranslateUrl( ULONG , WCHAR * , WCHAR * * ) = 0;
	/*00a8*/ virtual HRESULT FilterDataObject( IUnknown * , IUnknown * * ) = 0;
	void IDocHostUIHandlerDispatch( IDocHostUIHandlerDispatch && );
	void IDocHostUIHandlerDispatch( IDocHostUIHandlerDispatch const & );
	void IDocHostUIHandlerDispatch();
	IDocHostUIHandlerDispatch & operator=( IDocHostUIHandlerDispatch && );
	IDocHostUIHandlerDispatch & operator=( IDocHostUIHandlerDispatch const & );
	/*0008*/
};

struct IDockingWindow : IOleWindow {
	/*0028*/ virtual HRESULT ShowDW( INT ) = 0;
	/*0030*/ virtual HRESULT CloseDW( ULONG ) = 0;
	/*0038*/ virtual HRESULT ResizeBorderDW( tagRECT const * , IUnknown * , INT ) = 0;
	void IDockingWindow( IDockingWindow && );
	void IDockingWindow( IDockingWindow const & );
	void IDockingWindow();
	IDockingWindow & operator=( IDockingWindow && );
	IDockingWindow & operator=( IDockingWindow const & );
	/*0008*/
};

struct IDragSourceHelper : IUnknown {
	/*0018*/ virtual HRESULT InitializeFromBitmap( SHDRAGIMAGE * , IDataObject * ) = 0;
	/*0020*/ virtual HRESULT InitializeFromWindow( HWND__ * , tagPOINT * , IDataObject * ) = 0;
	void IDragSourceHelper( IDragSourceHelper && );
	void IDragSourceHelper( IDragSourceHelper const & );
	void IDragSourceHelper();
	IDragSourceHelper & operator=( IDragSourceHelper && );
	IDragSourceHelper & operator=( IDragSourceHelper const & );
	/*0008*/
};

struct IDropSource : IUnknown {
	/*0018*/ virtual HRESULT QueryContinueDrag( INT , ULONG ) = 0;
	/*0020*/ virtual HRESULT GiveFeedback( ULONG ) = 0;
	void IDropSource( IDropSource && );
	void IDropSource( IDropSource const & );
	void IDropSource();
	IDropSource & operator=( IDropSource && );
	IDropSource & operator=( IDropSource const & );
	/*0008*/
};

struct IDropSourceNotify : IUnknown {
	/*0018*/ virtual HRESULT DragEnterTarget( HWND__ * ) = 0;
	/*0020*/ virtual HRESULT DragLeaveTarget() = 0;
	void IDropSourceNotify( IDropSourceNotify && );
	void IDropSourceNotify( IDropSourceNotify const & );
	void IDropSourceNotify();
	IDropSourceNotify & operator=( IDropSourceNotify && );
	IDropSourceNotify & operator=( IDropSourceNotify const & );
	/*0008*/
};

struct IDropTarget : IUnknown {
	/*0018*/ virtual HRESULT DragEnter( IDataObject * , ULONG , _POINTL , ULONG * ) = 0;
	/*0020*/ virtual HRESULT DragOver( ULONG , _POINTL , ULONG * ) = 0;
	/*0028*/ virtual HRESULT DragLeave() = 0;
	/*0030*/ virtual HRESULT Drop( IDataObject * , ULONG , _POINTL , ULONG * ) = 0;
	void IDropTarget( IDropTarget && );
	void IDropTarget( IDropTarget const & );
	void IDropTarget();
	IDropTarget & operator=( IDropTarget && );
	IDropTarget & operator=( IDropTarget const & );
	/*0008*/
};

struct IDropTargetHelper : IUnknown {
	/*0018*/ virtual HRESULT DragEnter( HWND__ * , IDataObject * , tagPOINT * , ULONG ) = 0;
	/*0020*/ virtual HRESULT DragLeave() = 0;
	/*0028*/ virtual HRESULT DragOver( tagPOINT * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Drop( IDataObject * , tagPOINT * , ULONG ) = 0;
	/*0038*/ virtual HRESULT Show( INT ) = 0;
	void IDropTargetHelper( IDropTargetHelper && );
	void IDropTargetHelper( IDropTargetHelper const & );
	void IDropTargetHelper();
	IDropTargetHelper & operator=( IDropTargetHelper && );
	IDropTargetHelper & operator=( IDropTargetHelper const & );
	/*0008*/
};

struct IDummyHICONIncluder : IUnknown {
	/*0018*/ virtual HRESULT Dummy( HICON__ * , HDC__ * ) = 0;
	void IDummyHICONIncluder( IDummyHICONIncluder && );
	void IDummyHICONIncluder( IDummyHICONIncluder const & );
	void IDummyHICONIncluder();
	IDummyHICONIncluder & operator=( IDummyHICONIncluder && );
	IDummyHICONIncluder & operator=( IDummyHICONIncluder const & );
	/*0008*/
};

enum IEObjectType {
	IE_EPM_OBJECT_EVENT = 0x0,
	IE_EPM_OBJECT_MUTEX = 0x1,
	IE_EPM_OBJECT_SEMAPHORE = 0x2,
	IE_EPM_OBJECT_SHARED_MEMORY = 0x3,
	IE_EPM_OBJECT_WAITABLE_TIMER = 0x4,
	IE_EPM_OBJECT_FILE = 0x5,
	IE_EPM_OBJECT_NAMED_PIPE = 0x6,
	IE_EPM_OBJECT_REGISTRY = 0x7
};

struct IEncodingFilterFactory : IUnknown {
	/*0018*/ virtual HRESULT FindBestFilter( WCHAR const * , WCHAR const * , _tagDATAINFO , IDataFilter * * ) = 0;
	/*0020*/ virtual HRESULT GetDefaultFilter( WCHAR const * , WCHAR const * , IDataFilter * * ) = 0;
	void IEncodingFilterFactory( IEncodingFilterFactory && );
	void IEncodingFilterFactory( IEncodingFilterFactory const & );
	void IEncodingFilterFactory();
	IEncodingFilterFactory & operator=( IEncodingFilterFactory && );
	IEncodingFilterFactory & operator=( IEncodingFilterFactory const & );
	/*0008*/
};

struct IEnterpriseDropTarget : IUnknown {
	/*0018*/ virtual HRESULT SetDropSourceEnterpriseId( WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT IsEvaluatingEdpPolicy( INT * ) = 0;
	void IEnterpriseDropTarget( IEnterpriseDropTarget && );
	void IEnterpriseDropTarget( IEnterpriseDropTarget const & );
	void IEnterpriseDropTarget();
	IEnterpriseDropTarget & operator=( IEnterpriseDropTarget && );
	IEnterpriseDropTarget & operator=( IEnterpriseDropTarget const & );
	/*0008*/
};

struct IEnumAssocHandlers : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , IAssocHandler * * , ULONG * ) = 0;
	void IEnumAssocHandlers( IEnumAssocHandlers && );
	void IEnumAssocHandlers( IEnumAssocHandlers const & );
	void IEnumAssocHandlers();
	IEnumAssocHandlers & operator=( IEnumAssocHandlers && );
	IEnumAssocHandlers & operator=( IEnumAssocHandlers const & );
	/*0008*/
};

struct IEnumCATEGORYINFO : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagCATEGORYINFO * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumCATEGORYINFO * * ) = 0;
	void IEnumCATEGORYINFO( IEnumCATEGORYINFO && );
	void IEnumCATEGORYINFO( IEnumCATEGORYINFO const & );
	void IEnumCATEGORYINFO();
	IEnumCATEGORYINFO & operator=( IEnumCATEGORYINFO && );
	IEnumCATEGORYINFO & operator=( IEnumCATEGORYINFO const & );
	/*0008*/
};

struct IEnumConnectionPoints : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , IConnectionPoint * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumConnectionPoints * * ) = 0;
	void IEnumConnectionPoints( IEnumConnectionPoints && );
	void IEnumConnectionPoints( IEnumConnectionPoints const & );
	void IEnumConnectionPoints();
	IEnumConnectionPoints & operator=( IEnumConnectionPoints && );
	IEnumConnectionPoints & operator=( IEnumConnectionPoints const & );
	/*0008*/
};

struct IEnumConnections : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagCONNECTDATA * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumConnections * * ) = 0;
	void IEnumConnections( IEnumConnections && );
	void IEnumConnections( IEnumConnections const & );
	void IEnumConnections();
	IEnumConnections & operator=( IEnumConnections && );
	IEnumConnections & operator=( IEnumConnections const & );
	/*0008*/
};

struct IEnumExplorerCommand : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , IExplorerCommand * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumExplorerCommand * * ) = 0;
	void IEnumExplorerCommand( IEnumExplorerCommand && );
	void IEnumExplorerCommand( IEnumExplorerCommand const & );
	void IEnumExplorerCommand();
	IEnumExplorerCommand & operator=( IEnumExplorerCommand && );
	IEnumExplorerCommand & operator=( IEnumExplorerCommand const & );
	/*0008*/
};

struct IEnumExtraSearch : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , EXTRASEARCH * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumExtraSearch * * ) = 0;
	void IEnumExtraSearch( IEnumExtraSearch && );
	void IEnumExtraSearch( IEnumExtraSearch const & );
	void IEnumExtraSearch();
	IEnumExtraSearch & operator=( IEnumExtraSearch && );
	IEnumExtraSearch & operator=( IEnumExtraSearch const & );
	/*0008*/
};

struct IEnumFORMATETC : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagFORMATETC * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumFORMATETC * * ) = 0;
	void IEnumFORMATETC( IEnumFORMATETC && );
	void IEnumFORMATETC( IEnumFORMATETC const & );
	void IEnumFORMATETC();
	IEnumFORMATETC & operator=( IEnumFORMATETC && );
	IEnumFORMATETC & operator=( IEnumFORMATETC const & );
	/*0008*/
};

struct IEnumFullIDList : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , _ITEMIDLIST __unaligned * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumFullIDList * * ) = 0;
	void IEnumFullIDList( IEnumFullIDList && );
	void IEnumFullIDList( IEnumFullIDList const & );
	void IEnumFullIDList();
	IEnumFullIDList & operator=( IEnumFullIDList && );
	IEnumFullIDList & operator=( IEnumFullIDList const & );
	/*0008*/
};

struct IEnumGUID : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , _GUID * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumGUID * * ) = 0;
	void IEnumGUID( IEnumGUID && );
	void IEnumGUID( IEnumGUID const & );
	void IEnumGUID();
	IEnumGUID & operator=( IEnumGUID && );
	IEnumGUID & operator=( IEnumGUID const & );
	/*0008*/
};

struct IEnumIDList : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , _ITEMIDLIST __unaligned * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumIDList * * ) = 0;
	void IEnumIDList( IEnumIDList && );
	void IEnumIDList( IEnumIDList const & );
	void IEnumIDList();
	IEnumIDList & operator=( IEnumIDList && );
	IEnumIDList & operator=( IEnumIDList const & );
	/*0008*/
};

struct IEnumMoniker : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , IMoniker * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumMoniker * * ) = 0;
	void IEnumMoniker( IEnumMoniker && );
	void IEnumMoniker( IEnumMoniker const & );
	void IEnumMoniker();
	IEnumMoniker & operator=( IEnumMoniker && );
	IEnumMoniker & operator=( IEnumMoniker const & );
	/*0008*/
};

struct IEnumNetCfgBindingInterface : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , INetCfgBindingInterface * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetCfgBindingInterface * * ) = 0;
	void IEnumNetCfgBindingInterface( IEnumNetCfgBindingInterface && );
	void IEnumNetCfgBindingInterface( IEnumNetCfgBindingInterface const & );
	void IEnumNetCfgBindingInterface();
	IEnumNetCfgBindingInterface & operator=( IEnumNetCfgBindingInterface && );
	IEnumNetCfgBindingInterface & operator=( IEnumNetCfgBindingInterface const & );
	/*0008*/
};

struct IEnumNetCfgBindingPath : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , INetCfgBindingPath * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetCfgBindingPath * * ) = 0;
	void IEnumNetCfgBindingPath( IEnumNetCfgBindingPath && );
	void IEnumNetCfgBindingPath( IEnumNetCfgBindingPath const & );
	void IEnumNetCfgBindingPath();
	IEnumNetCfgBindingPath & operator=( IEnumNetCfgBindingPath && );
	IEnumNetCfgBindingPath & operator=( IEnumNetCfgBindingPath const & );
	/*0008*/
};

struct IEnumNetCfgComponent : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , INetCfgComponent * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetCfgComponent * * ) = 0;
	void IEnumNetCfgComponent( IEnumNetCfgComponent && );
	void IEnumNetCfgComponent( IEnumNetCfgComponent const & );
	void IEnumNetCfgComponent();
	IEnumNetCfgComponent & operator=( IEnumNetCfgComponent && );
	IEnumNetCfgComponent & operator=( IEnumNetCfgComponent const & );
	/*0008*/
};

struct IEnumNetConnection : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , INetConnection * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetConnection * * ) = 0;
	void IEnumNetConnection( IEnumNetConnection && );
	void IEnumNetConnection( IEnumNetConnection const & );
	void IEnumNetConnection();
	IEnumNetConnection & operator=( IEnumNetConnection && );
	IEnumNetConnection & operator=( IEnumNetConnection const & );
	/*0008*/
};

struct IEnumNetSharingEveryConnection : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagVARIANT * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetSharingEveryConnection * * ) = 0;
	void IEnumNetSharingEveryConnection( IEnumNetSharingEveryConnection && );
	void IEnumNetSharingEveryConnection( IEnumNetSharingEveryConnection const & );
	void IEnumNetSharingEveryConnection();
	IEnumNetSharingEveryConnection & operator=( IEnumNetSharingEveryConnection && );
	IEnumNetSharingEveryConnection & operator=( IEnumNetSharingEveryConnection const & );
	/*0008*/
};

struct IEnumNetSharingPortMapping : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagVARIANT * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetSharingPortMapping * * ) = 0;
	void IEnumNetSharingPortMapping( IEnumNetSharingPortMapping && );
	void IEnumNetSharingPortMapping( IEnumNetSharingPortMapping const & );
	void IEnumNetSharingPortMapping();
	IEnumNetSharingPortMapping & operator=( IEnumNetSharingPortMapping && );
	IEnumNetSharingPortMapping & operator=( IEnumNetSharingPortMapping const & );
	/*0008*/
};

struct IEnumNetSharingPrivateConnection : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagVARIANT * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetSharingPrivateConnection * * ) = 0;
	void IEnumNetSharingPrivateConnection( IEnumNetSharingPrivateConnection && );
	void IEnumNetSharingPrivateConnection( IEnumNetSharingPrivateConnection const & );
	void IEnumNetSharingPrivateConnection();
	IEnumNetSharingPrivateConnection & operator=( IEnumNetSharingPrivateConnection && );
	IEnumNetSharingPrivateConnection & operator=( IEnumNetSharingPrivateConnection const & );
	/*0008*/
};

struct IEnumNetSharingPublicConnection : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagVARIANT * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetSharingPublicConnection * * ) = 0;
	void IEnumNetSharingPublicConnection( IEnumNetSharingPublicConnection && );
	void IEnumNetSharingPublicConnection( IEnumNetSharingPublicConnection const & );
	void IEnumNetSharingPublicConnection();
	IEnumNetSharingPublicConnection & operator=( IEnumNetSharingPublicConnection && );
	IEnumNetSharingPublicConnection & operator=( IEnumNetSharingPublicConnection const & );
	/*0008*/
};

struct IEnumNetworkConnectionProfilePrivate : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , INetworkConnectionProfilePrivate * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetworkConnectionProfilePrivate * * ) = 0;
	void IEnumNetworkConnectionProfilePrivate( IEnumNetworkConnectionProfilePrivate && );
	void IEnumNetworkConnectionProfilePrivate( IEnumNetworkConnectionProfilePrivate const & );
	void IEnumNetworkConnectionProfilePrivate();
	IEnumNetworkConnectionProfilePrivate & operator=( IEnumNetworkConnectionProfilePrivate && );
	IEnumNetworkConnectionProfilePrivate & operator=( IEnumNetworkConnectionProfilePrivate const & );
	/*0008*/
};

struct IEnumNetworkConnections : IDispatch {
	/*0038*/ virtual HRESULT get__NewEnum( IEnumVARIANT * * ) = 0;
	/*0040*/ virtual HRESULT Next( ULONG , INetworkConnection * * , ULONG * ) = 0;
	/*0048*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0050*/ virtual HRESULT Reset() = 0;
	/*0058*/ virtual HRESULT Clone( IEnumNetworkConnections * * ) = 0;
	void IEnumNetworkConnections( IEnumNetworkConnections && );
	void IEnumNetworkConnections( IEnumNetworkConnections const & );
	void IEnumNetworkConnections();
	IEnumNetworkConnections & operator=( IEnumNetworkConnections && );
	IEnumNetworkConnections & operator=( IEnumNetworkConnections const & );
	/*0008*/
};

struct IEnumNetworkInterfacePrivate : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , INetworkInterfacePrivate * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetworkInterfacePrivate * * ) = 0;
	void IEnumNetworkInterfacePrivate( IEnumNetworkInterfacePrivate && );
	void IEnumNetworkInterfacePrivate( IEnumNetworkInterfacePrivate const & );
	void IEnumNetworkInterfacePrivate();
	IEnumNetworkInterfacePrivate & operator=( IEnumNetworkInterfacePrivate && );
	IEnumNetworkInterfacePrivate & operator=( IEnumNetworkInterfacePrivate const & );
	/*0008*/
};

struct IEnumNetworkPrivate : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , INetworkPrivate * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetworkPrivate * * ) = 0;
	void IEnumNetworkPrivate( IEnumNetworkPrivate && );
	void IEnumNetworkPrivate( IEnumNetworkPrivate const & );
	void IEnumNetworkPrivate();
	IEnumNetworkPrivate & operator=( IEnumNetworkPrivate && );
	IEnumNetworkPrivate & operator=( IEnumNetworkPrivate const & );
	/*0008*/
};

struct IEnumNetworkSignaturePrivate : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , INetworkSignaturePrivate * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumNetworkSignaturePrivate * * ) = 0;
	void IEnumNetworkSignaturePrivate( IEnumNetworkSignaturePrivate && );
	void IEnumNetworkSignaturePrivate( IEnumNetworkSignaturePrivate const & );
	void IEnumNetworkSignaturePrivate();
	IEnumNetworkSignaturePrivate & operator=( IEnumNetworkSignaturePrivate && );
	IEnumNetworkSignaturePrivate & operator=( IEnumNetworkSignaturePrivate const & );
	/*0008*/
};

struct IEnumNetworks : IDispatch {
	/*0038*/ virtual HRESULT get__NewEnum( IEnumVARIANT * * ) = 0;
	/*0040*/ virtual HRESULT Next( ULONG , INetwork * * , ULONG * ) = 0;
	/*0048*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0050*/ virtual HRESULT Reset() = 0;
	/*0058*/ virtual HRESULT Clone( IEnumNetworks * * ) = 0;
	void IEnumNetworks( IEnumNetworks && );
	void IEnumNetworks( IEnumNetworks const & );
	void IEnumNetworks();
	IEnumNetworks & operator=( IEnumNetworks && );
	IEnumNetworks & operator=( IEnumNetworks const & );
	/*0008*/
};

struct IEnumOLEVERB : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagOLEVERB * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumOLEVERB * * ) = 0;
	void IEnumOLEVERB( IEnumOLEVERB && );
	void IEnumOLEVERB( IEnumOLEVERB const & );
	void IEnumOLEVERB();
	IEnumOLEVERB & operator=( IEnumOLEVERB && );
	IEnumOLEVERB & operator=( IEnumOLEVERB const & );
	/*0008*/
};

struct IEnumObjects : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , _GUID const & , void * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumObjects * * ) = 0;
	void IEnumObjects( IEnumObjects && );
	void IEnumObjects( IEnumObjects const & );
	void IEnumObjects();
	IEnumObjects & operator=( IEnumObjects && );
	IEnumObjects & operator=( IEnumObjects const & );
	/*0008*/
};

struct IEnumOleUndoUnits : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , IOleUndoUnit * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumOleUndoUnits * * ) = 0;
	void IEnumOleUndoUnits( IEnumOleUndoUnits && );
	void IEnumOleUndoUnits( IEnumOleUndoUnits const & );
	void IEnumOleUndoUnits();
	IEnumOleUndoUnits & operator=( IEnumOleUndoUnits && );
	IEnumOleUndoUnits & operator=( IEnumOleUndoUnits const & );
	/*0008*/
};

struct IEnumResources : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , SHELL_ITEM_RESOURCE * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumResources * * ) = 0;
	void IEnumResources( IEnumResources && );
	void IEnumResources( IEnumResources const & );
	void IEnumResources();
	IEnumResources & operator=( IEnumResources && );
	IEnumResources & operator=( IEnumResources const & );
	/*0008*/
};

struct IEnumSTATDATA : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagSTATDATA * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumSTATDATA * * ) = 0;
	void IEnumSTATDATA( IEnumSTATDATA && );
	void IEnumSTATDATA( IEnumSTATDATA const & );
	void IEnumSTATDATA();
	IEnumSTATDATA & operator=( IEnumSTATDATA && );
	IEnumSTATDATA & operator=( IEnumSTATDATA const & );
	/*0008*/
};

struct IEnumSTATPROPSETSTG : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagSTATPROPSETSTG * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumSTATPROPSETSTG * * ) = 0;
	void IEnumSTATPROPSETSTG( IEnumSTATPROPSETSTG && );
	void IEnumSTATPROPSETSTG( IEnumSTATPROPSETSTG const & );
	void IEnumSTATPROPSETSTG();
	IEnumSTATPROPSETSTG & operator=( IEnumSTATPROPSETSTG && );
	IEnumSTATPROPSETSTG & operator=( IEnumSTATPROPSETSTG const & );
	/*0008*/
};

struct IEnumSTATPROPSTG : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagSTATPROPSTG * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumSTATPROPSTG * * ) = 0;
	void IEnumSTATPROPSTG( IEnumSTATPROPSTG && );
	void IEnumSTATPROPSTG( IEnumSTATPROPSTG const & );
	void IEnumSTATPROPSTG();
	IEnumSTATPROPSTG & operator=( IEnumSTATPROPSTG && );
	IEnumSTATPROPSTG & operator=( IEnumSTATPROPSTG const & );
	/*0008*/
};

struct IEnumSTATSTG : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagSTATSTG * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumSTATSTG * * ) = 0;
	void IEnumSTATSTG( IEnumSTATSTG && );
	void IEnumSTATSTG( IEnumSTATSTG const & );
	void IEnumSTATSTG();
	IEnumSTATSTG & operator=( IEnumSTATSTG && );
	IEnumSTATSTG & operator=( IEnumSTATSTG const & );
	/*0008*/
};

struct IEnumShellItems : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , IShellItem * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumShellItems * * ) = 0;
	void IEnumShellItems( IEnumShellItems && );
	void IEnumShellItems( IEnumShellItems const & );
	void IEnumShellItems();
	IEnumShellItems & operator=( IEnumShellItems && );
	IEnumShellItems & operator=( IEnumShellItems const & );
	/*0008*/
};

struct IEnumString : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , WCHAR * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumString * * ) = 0;
	void IEnumString( IEnumString && );
	void IEnumString( IEnumString const & );
	void IEnumString();
	IEnumString & operator=( IEnumString && );
	IEnumString & operator=( IEnumString const & );
	/*0008*/
};

struct IEnumUnknown : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , IUnknown * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumUnknown * * ) = 0;
	void IEnumUnknown( IEnumUnknown && );
	void IEnumUnknown( IEnumUnknown const & );
	void IEnumUnknown();
	IEnumUnknown & operator=( IEnumUnknown && );
	IEnumUnknown & operator=( IEnumUnknown const & );
	/*0008*/
};

struct IEnumVARIANT : IUnknown {
	/*0018*/ virtual HRESULT Next( ULONG , tagVARIANT * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Skip( ULONG ) = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	/*0030*/ virtual HRESULT Clone( IEnumVARIANT * * ) = 0;
	void IEnumVARIANT( IEnumVARIANT && );
	void IEnumVARIANT( IEnumVARIANT const & );
	void IEnumVARIANT();
	IEnumVARIANT & operator=( IEnumVARIANT && );
	IEnumVARIANT & operator=( IEnumVARIANT const & );
	/*0008*/
};

struct IErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT GetGUID( _GUID * ) = 0;
	/*0020*/ virtual HRESULT GetSource( WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetDescription( WCHAR * * ) = 0;
	/*0030*/ virtual HRESULT GetHelpFile( WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT GetHelpContext( ULONG * ) = 0;
	void IErrorInfo( IErrorInfo && );
	void IErrorInfo( IErrorInfo const & );
	void IErrorInfo();
	IErrorInfo & operator=( IErrorInfo && );
	IErrorInfo & operator=( IErrorInfo const & );
	/*0008*/
};

struct IErrorLog : IUnknown {
	/*0018*/ virtual HRESULT AddError( WCHAR const * , tagEXCEPINFO * ) = 0;
	void IErrorLog( IErrorLog && );
	void IErrorLog( IErrorLog const & );
	void IErrorLog();
	IErrorLog & operator=( IErrorLog && );
	IErrorLog & operator=( IErrorLog const & );
	/*0008*/
};

struct IExecuteCommand : IUnknown {
	/*0018*/ virtual HRESULT SetKeyState( ULONG ) = 0;
	/*0020*/ virtual HRESULT SetParameters( WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT SetPosition( tagPOINT ) = 0;
	/*0030*/ virtual HRESULT SetShowWindow( INT ) = 0;
	/*0038*/ virtual HRESULT SetNoShowUI( INT ) = 0;
	/*0040*/ virtual HRESULT SetDirectory( WCHAR const * ) = 0;
	/*0048*/ virtual HRESULT Execute() = 0;
	void IExecuteCommand( IExecuteCommand && );
	void IExecuteCommand( IExecuteCommand const & );
	void IExecuteCommand();
	IExecuteCommand & operator=( IExecuteCommand && );
	IExecuteCommand & operator=( IExecuteCommand const & );
	/*0008*/
};

struct IExecuteCommandApplicationHostEnvironment : IUnknown {
	/*0018*/ virtual HRESULT GetValue( AHE_TYPE * ) = 0;
	void IExecuteCommandApplicationHostEnvironment( IExecuteCommandApplicationHostEnvironment && );
	void IExecuteCommandApplicationHostEnvironment( IExecuteCommandApplicationHostEnvironment const & );
	void IExecuteCommandApplicationHostEnvironment();
	IExecuteCommandApplicationHostEnvironment & operator=( IExecuteCommandApplicationHostEnvironment && );
	IExecuteCommandApplicationHostEnvironment & operator=( IExecuteCommandApplicationHostEnvironment const & );
	/*0008*/
};

struct IExecuteCommandHost : IUnknown {
	/*0018*/ virtual HRESULT GetUIMode( EC_HOST_UI_MODE * ) = 0;
	void IExecuteCommandHost( IExecuteCommandHost && );
	void IExecuteCommandHost( IExecuteCommandHost const & );
	void IExecuteCommandHost();
	IExecuteCommandHost & operator=( IExecuteCommandHost && );
	IExecuteCommandHost & operator=( IExecuteCommandHost const & );
	/*0008*/
};

struct IExplorerBrowser : IUnknown {
	/*0018*/ virtual HRESULT Initialize( HWND__ * , tagRECT const * , FOLDERSETTINGS const * ) = 0;
	/*0020*/ virtual HRESULT Destroy() = 0;
	/*0028*/ virtual HRESULT SetRect( void * * , tagRECT ) = 0;
	/*0030*/ virtual HRESULT SetPropertyBag( WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT SetEmptyText( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT SetFolderSettings( FOLDERSETTINGS const * ) = 0;
	/*0048*/ virtual HRESULT Advise( IExplorerBrowserEvents * , ULONG * ) = 0;
	/*0050*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0058*/ virtual HRESULT SetOptions( EXPLORER_BROWSER_OPTIONS ) = 0;
	/*0060*/ virtual HRESULT GetOptions( EXPLORER_BROWSER_OPTIONS * ) = 0;
	/*0068*/ virtual HRESULT BrowseToIDList( _ITEMIDLIST const __unaligned * , UINT ) = 0;
	/*0070*/ virtual HRESULT BrowseToObject( IUnknown * , UINT ) = 0;
	/*0078*/ virtual HRESULT FillFromObject( IUnknown * , EXPLORER_BROWSER_FILL_FLAGS ) = 0;
	/*0080*/ virtual HRESULT RemoveAll() = 0;
	/*0088*/ virtual HRESULT GetCurrentView( _GUID const & , void * * ) = 0;
	void IExplorerBrowser( IExplorerBrowser && );
	void IExplorerBrowser( IExplorerBrowser const & );
	void IExplorerBrowser();
	IExplorerBrowser & operator=( IExplorerBrowser && );
	IExplorerBrowser & operator=( IExplorerBrowser const & );
	/*0008*/
};

struct IExplorerBrowserEvents : IUnknown {
	/*0018*/ virtual HRESULT OnNavigationPending( _ITEMIDLIST const __unaligned * ) = 0;
	/*0020*/ virtual HRESULT OnViewCreated( IShellView * ) = 0;
	/*0028*/ virtual HRESULT OnNavigationComplete( _ITEMIDLIST const __unaligned * ) = 0;
	/*0030*/ virtual HRESULT OnNavigationFailed( _ITEMIDLIST const __unaligned * ) = 0;
	void IExplorerBrowserEvents( IExplorerBrowserEvents && );
	void IExplorerBrowserEvents( IExplorerBrowserEvents const & );
	void IExplorerBrowserEvents();
	IExplorerBrowserEvents & operator=( IExplorerBrowserEvents && );
	IExplorerBrowserEvents & operator=( IExplorerBrowserEvents const & );
	/*0008*/
};

struct IExplorerCommand : IUnknown {
	/*0018*/ virtual HRESULT GetTitle( IShellItemArray * , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetIcon( IShellItemArray * , WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetToolTip( IShellItemArray * , WCHAR * * ) = 0;
	/*0030*/ virtual HRESULT GetCanonicalName( _GUID * ) = 0;
	/*0038*/ virtual HRESULT GetState( IShellItemArray * , INT , ULONG * ) = 0;
	/*0040*/ virtual HRESULT Invoke( IShellItemArray * , IBindCtx * ) = 0;
	/*0048*/ virtual HRESULT GetFlags( ULONG * ) = 0;
	/*0050*/ virtual HRESULT EnumSubCommands( IEnumExplorerCommand * * ) = 0;
	void IExplorerCommand( IExplorerCommand && );
	void IExplorerCommand( IExplorerCommand const & );
	void IExplorerCommand();
	IExplorerCommand & operator=( IExplorerCommand && );
	IExplorerCommand & operator=( IExplorerCommand const & );
	/*0008*/
};

struct IExplorerCommandProvider : IUnknown {
	/*0018*/ virtual HRESULT GetCommands( IUnknown * , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT GetCommand( _GUID const & , _GUID const & , void * * ) = 0;
	void IExplorerCommandProvider( IExplorerCommandProvider && );
	void IExplorerCommandProvider( IExplorerCommandProvider const & );
	void IExplorerCommandProvider();
	IExplorerCommandProvider & operator=( IExplorerCommandProvider && );
	IExplorerCommandProvider & operator=( IExplorerCommandProvider const & );
	/*0008*/
};

struct IExplorerCommandState : IUnknown {
	/*0018*/ virtual HRESULT GetState( IShellItemArray * , INT , ULONG * ) = 0;
	void IExplorerCommandState( IExplorerCommandState && );
	void IExplorerCommandState( IExplorerCommandState const & );
	void IExplorerCommandState();
	IExplorerCommandState & operator=( IExplorerCommandState && );
	IExplorerCommandState & operator=( IExplorerCommandState const & );
	/*0008*/
};

struct IExplorerPaneVisibility : IUnknown {
	/*0018*/ virtual HRESULT GetPaneState( _GUID const & , ULONG * ) = 0;
	void IExplorerPaneVisibility( IExplorerPaneVisibility && );
	void IExplorerPaneVisibility( IExplorerPaneVisibility const & );
	void IExplorerPaneVisibility();
	IExplorerPaneVisibility & operator=( IExplorerPaneVisibility && );
	IExplorerPaneVisibility & operator=( IExplorerPaneVisibility const & );
	/*0008*/
};

struct IExternalConnection : IUnknown {
	/*0018*/ virtual ULONG AddConnection( ULONG , ULONG ) = 0;
	/*0020*/ virtual ULONG ReleaseConnection( ULONG , ULONG , INT ) = 0;
	void IExternalConnection( IExternalConnection && );
	void IExternalConnection( IExternalConnection const & );
	void IExternalConnection();
	IExternalConnection & operator=( IExternalConnection && );
	IExternalConnection & operator=( IExternalConnection const & );
	/*0008*/
};

struct IExtractImage : IUnknown {
	/*0018*/ virtual HRESULT GetLocation( WCHAR * , ULONG , ULONG * , tagSIZE const * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Extract( HBITMAP__ * * ) = 0;
	void IExtractImage( IExtractImage && );
	void IExtractImage( IExtractImage const & );
	void IExtractImage();
	IExtractImage & operator=( IExtractImage && );
	IExtractImage & operator=( IExtractImage const & );
	/*0008*/
};

struct IExtractImage2 : IExtractImage {
	/*0028*/ virtual HRESULT GetDateStamp( _FILETIME * ) = 0;
	void IExtractImage2( IExtractImage2 && );
	void IExtractImage2( IExtractImage2 const & );
	void IExtractImage2();
	IExtractImage2 & operator=( IExtractImage2 && );
	IExtractImage2 & operator=( IExtractImage2 const & );
	/*0008*/
};

enum IF_OPER_STATUS {
	IfOperStatusUp = 0x1,
	IfOperStatusDown = 0x2,
	IfOperStatusTesting = 0x3,
	IfOperStatusUnknown = 0x4,
	IfOperStatusDormant = 0x5,
	IfOperStatusNotPresent = 0x6,
	IfOperStatusLowerLayerDown = 0x7
};

struct IFastRundown : IUnknown {
	void IFastRundown( IFastRundown && );
	void IFastRundown( IFastRundown const & );
	void IFastRundown();
	IFastRundown & operator=( IFastRundown && );
	IFastRundown & operator=( IFastRundown const & );
	/*0008*/
};

struct IFileDialog : IModalWindow {
	/*0020*/ virtual HRESULT SetFileTypes( UINT , _COMDLG_FILTERSPEC const * ) = 0;
	/*0028*/ virtual HRESULT SetFileTypeIndex( UINT ) = 0;
	/*0030*/ virtual HRESULT GetFileTypeIndex( UINT * ) = 0;
	/*0038*/ virtual HRESULT Advise( IFileDialogEvents * , ULONG * ) = 0;
	/*0040*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0048*/ virtual HRESULT SetOptions( ULONG ) = 0;
	/*0050*/ virtual HRESULT GetOptions( ULONG * ) = 0;
	/*0058*/ virtual HRESULT SetDefaultFolder( IShellItem * ) = 0;
	/*0060*/ virtual HRESULT SetFolder( IShellItem * ) = 0;
	/*0068*/ virtual HRESULT GetFolder( IShellItem * * ) = 0;
	/*0070*/ virtual HRESULT GetCurrentSelection( IShellItem * * ) = 0;
	/*0078*/ virtual HRESULT SetFileName( WCHAR const * ) = 0;
	/*0080*/ virtual HRESULT GetFileName( WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT SetTitle( WCHAR const * ) = 0;
	/*0090*/ virtual HRESULT SetOkButtonLabel( WCHAR const * ) = 0;
	/*0098*/ virtual HRESULT SetFileNameLabel( WCHAR const * ) = 0;
	/*00a0*/ virtual HRESULT GetResult( IShellItem * * ) = 0;
	/*00a8*/ virtual HRESULT AddPlace( IShellItem * , FDAP ) = 0;
	/*00b0*/ virtual HRESULT SetDefaultExtension( WCHAR const * ) = 0;
	/*00b8*/ virtual HRESULT Close( HRESULT ) = 0;
	/*00c0*/ virtual HRESULT SetClientGuid( _GUID const & ) = 0;
	/*00c8*/ virtual HRESULT ClearClientData() = 0;
	/*00d0*/ virtual HRESULT SetFilter( IShellItemFilter * ) = 0;
	void IFileDialog( IFileDialog && );
	void IFileDialog( IFileDialog const & );
	void IFileDialog();
	IFileDialog & operator=( IFileDialog && );
	IFileDialog & operator=( IFileDialog const & );
	/*0008*/
};

struct IFileDialogCustomize : IUnknown {
	/*0018*/ virtual HRESULT EnableOpenDropDown( ULONG ) = 0;
	/*0020*/ virtual HRESULT AddMenu( ULONG , WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT AddPushButton( ULONG , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT AddComboBox( ULONG ) = 0;
	/*0038*/ virtual HRESULT AddRadioButtonList( ULONG ) = 0;
	/*0040*/ virtual HRESULT AddCheckButton( ULONG , WCHAR const * , INT ) = 0;
	/*0048*/ virtual HRESULT AddEditBox( ULONG , WCHAR const * ) = 0;
	/*0050*/ virtual HRESULT AddSeparator( ULONG ) = 0;
	/*0058*/ virtual HRESULT AddText( ULONG , WCHAR const * ) = 0;
	/*0060*/ virtual HRESULT SetControlLabel( ULONG , WCHAR const * ) = 0;
	/*0068*/ virtual HRESULT GetControlState( ULONG , CDCONTROLSTATEF * ) = 0;
	/*0070*/ virtual HRESULT SetControlState( ULONG , CDCONTROLSTATEF ) = 0;
	/*0078*/ virtual HRESULT GetEditBoxText( ULONG , WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT SetEditBoxText( ULONG , WCHAR const * ) = 0;
	/*0088*/ virtual HRESULT GetCheckButtonState( ULONG , INT * ) = 0;
	/*0090*/ virtual HRESULT SetCheckButtonState( ULONG , INT ) = 0;
	/*0098*/ virtual HRESULT AddControlItem( ULONG , ULONG , WCHAR const * ) = 0;
	/*00a0*/ virtual HRESULT RemoveControlItem( ULONG , ULONG ) = 0;
	/*00a8*/ virtual HRESULT RemoveAllControlItems( ULONG ) = 0;
	/*00b0*/ virtual HRESULT GetControlItemState( ULONG , ULONG , CDCONTROLSTATEF * ) = 0;
	/*00b8*/ virtual HRESULT SetControlItemState( ULONG , ULONG , CDCONTROLSTATEF ) = 0;
	/*00c0*/ virtual HRESULT GetSelectedControlItem( ULONG , ULONG * ) = 0;
	/*00c8*/ virtual HRESULT SetSelectedControlItem( ULONG , ULONG ) = 0;
	/*00d0*/ virtual HRESULT StartVisualGroup( ULONG , WCHAR const * ) = 0;
	/*00d8*/ virtual HRESULT EndVisualGroup() = 0;
	/*00e0*/ virtual HRESULT MakeProminent( ULONG ) = 0;
	/*00e8*/ virtual HRESULT SetControlItemText( ULONG , ULONG , WCHAR const * ) = 0;
	void IFileDialogCustomize( IFileDialogCustomize && );
	void IFileDialogCustomize( IFileDialogCustomize const & );
	void IFileDialogCustomize();
	IFileDialogCustomize & operator=( IFileDialogCustomize && );
	IFileDialogCustomize & operator=( IFileDialogCustomize const & );
	/*0008*/
};

struct IFileDialogEvents : IUnknown {
	/*0018*/ virtual HRESULT OnFileOk( IFileDialog * ) = 0;
	/*0020*/ virtual HRESULT OnFolderChanging( IFileDialog * , IShellItem * ) = 0;
	/*0028*/ virtual HRESULT OnFolderChange( IFileDialog * ) = 0;
	/*0030*/ virtual HRESULT OnSelectionChange( IFileDialog * ) = 0;
	/*0038*/ virtual HRESULT OnShareViolation( IFileDialog * , IShellItem * , FDE_SHAREVIOLATION_RESPONSE * ) = 0;
	/*0040*/ virtual HRESULT OnTypeChange( IFileDialog * ) = 0;
	/*0048*/ virtual HRESULT OnOverwrite( IFileDialog * , IShellItem * , FDE_OVERWRITE_RESPONSE * ) = 0;
	void IFileDialogEvents( IFileDialogEvents && );
	void IFileDialogEvents( IFileDialogEvents const & );
	void IFileDialogEvents();
	IFileDialogEvents & operator=( IFileDialogEvents && );
	IFileDialogEvents & operator=( IFileDialogEvents const & );
	/*0008*/
};

struct IFileIsInUse : IUnknown {
	/*0018*/ virtual HRESULT GetAppName( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetUsage( FILE_USAGE_TYPE * ) = 0;
	/*0028*/ virtual HRESULT GetCapabilities( ULONG * ) = 0;
	/*0030*/ virtual HRESULT GetSwitchToHWND( HWND__ * * ) = 0;
	/*0038*/ virtual HRESULT CloseFile() = 0;
	void IFileIsInUse( IFileIsInUse && );
	void IFileIsInUse( IFileIsInUse const & );
	void IFileIsInUse();
	IFileIsInUse & operator=( IFileIsInUse && );
	IFileIsInUse & operator=( IFileIsInUse const & );
	/*0008*/
};

struct IFileOpenDialog : IFileDialog {
	/*00d8*/ virtual HRESULT GetResults( IShellItemArray * * ) = 0;
	/*00e0*/ virtual HRESULT GetSelectedItems( IShellItemArray * * ) = 0;
	void IFileOpenDialog( IFileOpenDialog && );
	void IFileOpenDialog( IFileOpenDialog const & );
	void IFileOpenDialog();
	IFileOpenDialog & operator=( IFileOpenDialog && );
	IFileOpenDialog & operator=( IFileOpenDialog const & );
	/*0008*/
};

struct IFileOperation : IUnknown {
	/*0018*/ virtual HRESULT Advise( IFileOperationProgressSink * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0028*/ virtual HRESULT SetOperationFlags( ULONG ) = 0;
	/*0030*/ virtual HRESULT SetProgressMessage( WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT SetProgressDialog( IOperationsProgressDialog * ) = 0;
	/*0040*/ virtual HRESULT SetProperties( IPropertyChangeArray * ) = 0;
	/*0048*/ virtual HRESULT SetOwnerWindow( HWND__ * ) = 0;
	/*0050*/ virtual HRESULT ApplyPropertiesToItem( IShellItem * ) = 0;
	/*0058*/ virtual HRESULT ApplyPropertiesToItems( IUnknown * ) = 0;
	/*0060*/ virtual HRESULT RenameItem( IShellItem * , WCHAR const * , IFileOperationProgressSink * ) = 0;
	/*0068*/ virtual HRESULT RenameItems( IUnknown * , WCHAR const * ) = 0;
	/*0070*/ virtual HRESULT MoveItem( IShellItem * , IShellItem * , WCHAR const * , IFileOperationProgressSink * ) = 0;
	/*0078*/ virtual HRESULT MoveItems( IUnknown * , IShellItem * ) = 0;
	/*0080*/ virtual HRESULT CopyItem( IShellItem * , IShellItem * , WCHAR const * , IFileOperationProgressSink * ) = 0;
	/*0088*/ virtual HRESULT CopyItems( IUnknown * , IShellItem * ) = 0;
	/*0090*/ virtual HRESULT DeleteItem( IShellItem * , IFileOperationProgressSink * ) = 0;
	/*0098*/ virtual HRESULT DeleteItems( IUnknown * ) = 0;
	/*00a0*/ virtual HRESULT NewItem( IShellItem * , ULONG , WCHAR const * , WCHAR const * , IFileOperationProgressSink * ) = 0;
	/*00a8*/ virtual HRESULT PerformOperations() = 0;
	/*00b0*/ virtual HRESULT GetAnyOperationsAborted( INT * ) = 0;
	void IFileOperation( IFileOperation && );
	void IFileOperation( IFileOperation const & );
	void IFileOperation();
	IFileOperation & operator=( IFileOperation && );
	IFileOperation & operator=( IFileOperation const & );
	/*0008*/
};

struct IFileOperation2 : IFileOperation {
	/*00b8*/ virtual HRESULT SetOperationFlags2( FILE_OPERATION_FLAGS2 ) = 0;
	void IFileOperation2( IFileOperation2 && );
	void IFileOperation2( IFileOperation2 const & );
	void IFileOperation2();
	IFileOperation2 & operator=( IFileOperation2 && );
	IFileOperation2 & operator=( IFileOperation2 const & );
	/*0008*/
};

struct IFileOperationProgressSink : IUnknown {
	/*0018*/ virtual HRESULT StartOperations() = 0;
	/*0020*/ virtual HRESULT FinishOperations( HRESULT ) = 0;
	/*0028*/ virtual HRESULT PreRenameItem( ULONG , IShellItem * , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT PostRenameItem( ULONG , IShellItem * , WCHAR const * , HRESULT , IShellItem * ) = 0;
	/*0038*/ virtual HRESULT PreMoveItem( ULONG , IShellItem * , IShellItem * , WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT PostMoveItem( ULONG , IShellItem * , IShellItem * , WCHAR const * , HRESULT , IShellItem * ) = 0;
	/*0048*/ virtual HRESULT PreCopyItem( ULONG , IShellItem * , IShellItem * , WCHAR const * ) = 0;
	/*0050*/ virtual HRESULT PostCopyItem( ULONG , IShellItem * , IShellItem * , WCHAR const * , HRESULT , IShellItem * ) = 0;
	/*0058*/ virtual HRESULT PreDeleteItem( ULONG , IShellItem * ) = 0;
	/*0060*/ virtual HRESULT PostDeleteItem( ULONG , IShellItem * , HRESULT , IShellItem * ) = 0;
	/*0068*/ virtual HRESULT PreNewItem( ULONG , IShellItem * , WCHAR const * ) = 0;
	/*0070*/ virtual HRESULT PostNewItem( ULONG , IShellItem * , WCHAR const * , WCHAR const * , ULONG , HRESULT , IShellItem * ) = 0;
	/*0078*/ virtual HRESULT UpdateProgress( UINT , UINT ) = 0;
	/*0080*/ virtual HRESULT ResetTimer() = 0;
	/*0088*/ virtual HRESULT PauseTimer() = 0;
	/*0090*/ virtual HRESULT ResumeTimer() = 0;
	void IFileOperationProgressSink( IFileOperationProgressSink && );
	void IFileOperationProgressSink( IFileOperationProgressSink const & );
	void IFileOperationProgressSink();
	IFileOperationProgressSink & operator=( IFileOperationProgressSink && );
	IFileOperationProgressSink & operator=( IFileOperationProgressSink const & );
	/*0008*/
};

struct IFileSaveDialog : IFileDialog {
	/*00d8*/ virtual HRESULT SetSaveAsItem( IShellItem * ) = 0;
	/*00e0*/ virtual HRESULT SetProperties( IPropertyStore * ) = 0;
	/*00e8*/ virtual HRESULT SetCollectedProperties( IPropertyDescriptionList * , INT ) = 0;
	/*00f0*/ virtual HRESULT GetProperties( IPropertyStore * * ) = 0;
	/*00f8*/ virtual HRESULT ApplyProperties( IShellItem * , IPropertyStore * , HWND__ * , IFileOperationProgressSink * ) = 0;
	void IFileSaveDialog( IFileSaveDialog && );
	void IFileSaveDialog( IFileSaveDialog const & );
	void IFileSaveDialog();
	IFileSaveDialog & operator=( IFileSaveDialog && );
	IFileSaveDialog & operator=( IFileSaveDialog const & );
	/*0008*/
};

struct IFileSyncMergeHandler : IUnknown {
	/*0018*/ virtual HRESULT Merge( WCHAR const * , WCHAR const * , MERGE_UPDATE_STATUS * ) = 0;
	/*0020*/ virtual HRESULT ShowResolveConflictUIAsync( WCHAR const * , HMONITOR__ * ) = 0;
	void IFileSyncMergeHandler( IFileSyncMergeHandler && );
	void IFileSyncMergeHandler( IFileSyncMergeHandler const & );
	void IFileSyncMergeHandler();
	IFileSyncMergeHandler & operator=( IFileSyncMergeHandler && );
	IFileSyncMergeHandler & operator=( IFileSyncMergeHandler const & );
	/*0008*/
};

struct IFileSystemBindData : IUnknown {
	/*0018*/ virtual HRESULT SetFindData( _WIN32_FIND_DATAW const * ) = 0;
	/*0020*/ virtual HRESULT GetFindData( _WIN32_FIND_DATAW * ) = 0;
	void IFileSystemBindData( IFileSystemBindData && );
	void IFileSystemBindData( IFileSystemBindData const & );
	void IFileSystemBindData();
	IFileSystemBindData & operator=( IFileSystemBindData && );
	IFileSystemBindData & operator=( IFileSystemBindData const & );
	/*0008*/
};

struct IFileSystemBindData2 : IFileSystemBindData {
	/*0028*/ virtual HRESULT SetFileID( _LARGE_INTEGER ) = 0;
	/*0030*/ virtual HRESULT GetFileID( _LARGE_INTEGER * ) = 0;
	/*0038*/ virtual HRESULT SetJunctionCLSID( _GUID const & ) = 0;
	/*0040*/ virtual HRESULT GetJunctionCLSID( _GUID * ) = 0;
	void IFileSystemBindData2( IFileSystemBindData2 && );
	void IFileSystemBindData2( IFileSystemBindData2 const & );
	void IFileSystemBindData2();
	IFileSystemBindData2 & operator=( IFileSystemBindData2 && );
	IFileSystemBindData2 & operator=( IFileSystemBindData2 const & );
	/*0008*/
};

struct IFillLockBytes : IUnknown {
	/*0018*/ virtual HRESULT FillAppend( void const * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT FillAt( _ULARGE_INTEGER , void const * , ULONG , ULONG * ) = 0;
	/*0028*/ virtual HRESULT SetFillSize( _ULARGE_INTEGER ) = 0;
	/*0030*/ virtual HRESULT Terminate( INT ) = 0;
	void IFillLockBytes( IFillLockBytes && );
	void IFillLockBytes( IFillLockBytes const & );
	void IFillLockBytes();
	IFillLockBytes & operator=( IFillLockBytes && );
	IFillLockBytes & operator=( IFillLockBytes const & );
	/*0008*/
};

struct IFolderFilter : IUnknown {
	/*0018*/ virtual HRESULT ShouldShow( IShellFolder * , _ITEMIDLIST const __unaligned * , _ITEMIDLIST const __unaligned * ) = 0;
	/*0020*/ virtual HRESULT GetEnumFlags( IShellFolder * , _ITEMIDLIST const __unaligned * , HWND__ * * , ULONG * ) = 0;
	void IFolderFilter( IFolderFilter && );
	void IFolderFilter( IFolderFilter const & );
	void IFolderFilter();
	IFolderFilter & operator=( IFolderFilter && );
	IFolderFilter & operator=( IFolderFilter const & );
	/*0008*/
};

struct IFolderFilterSite : IUnknown {
	/*0018*/ virtual HRESULT SetFilter( IUnknown * ) = 0;
	void IFolderFilterSite( IFolderFilterSite && );
	void IFolderFilterSite( IFolderFilterSite const & );
	void IFolderFilterSite();
	IFolderFilterSite & operator=( IFolderFilterSite && );
	IFolderFilterSite & operator=( IFolderFilterSite const & );
	/*0008*/
};

struct IFolderView : IUnknown {
	/*0018*/ virtual HRESULT GetCurrentViewMode( UINT * ) = 0;
	/*0020*/ virtual HRESULT SetCurrentViewMode( UINT ) = 0;
	/*0028*/ virtual HRESULT GetFolder( _GUID const & , void * * ) = 0;
	/*0030*/ virtual HRESULT Item( INT , _ITEMIDLIST __unaligned * * ) = 0;
	/*0038*/ virtual HRESULT ItemCount( UINT , INT * ) = 0;
	/*0040*/ virtual HRESULT Items( UINT , _GUID const & , void * * ) = 0;
	/*0048*/ virtual HRESULT GetSelectionMarkedItem( INT * ) = 0;
	/*0050*/ virtual HRESULT GetFocusedItem( INT * ) = 0;
	/*0058*/ virtual HRESULT GetItemPosition( _ITEMIDLIST const __unaligned * , tagPOINT * ) = 0;
	/*0060*/ virtual HRESULT GetSpacing( tagPOINT * ) = 0;
	/*0068*/ virtual HRESULT GetDefaultSpacing( tagPOINT * ) = 0;
	/*0070*/ virtual HRESULT GetAutoArrange() = 0;
	/*0078*/ virtual HRESULT SelectItem( INT , ULONG ) = 0;
	/*0080*/ virtual HRESULT SelectAndPositionItems( UINT , _ITEMIDLIST const __unaligned * * , tagPOINT * , ULONG ) = 0;
	void IFolderView( IFolderView && );
	void IFolderView( IFolderView const & );
	void IFolderView();
	IFolderView & operator=( IFolderView && );
	IFolderView & operator=( IFolderView const & );
	/*0008*/
};

struct IFolderView2 : IFolderView {
	/*0088*/ virtual HRESULT SetGroupBy( _tagpropertykey const & , INT ) = 0;
	/*0090*/ virtual HRESULT GetGroupBy( _tagpropertykey * , INT * ) = 0;
	/*0098*/ virtual HRESULT SetViewProperty( _ITEMIDLIST const __unaligned * , _tagpropertykey const & , tagPROPVARIANT const & ) = 0;
	/*00a0*/ virtual HRESULT GetViewProperty( _ITEMIDLIST const __unaligned * , _tagpropertykey const & , tagPROPVARIANT * ) = 0;
	/*00a8*/ virtual HRESULT SetTileViewProperties( _ITEMIDLIST const __unaligned * , WCHAR const * ) = 0;
	/*00b0*/ virtual HRESULT SetExtendedTileViewProperties( _ITEMIDLIST const __unaligned * , WCHAR const * ) = 0;
	/*00b8*/ virtual HRESULT SetText( FVTEXTTYPE , WCHAR const * ) = 0;
	/*00c0*/ virtual HRESULT SetCurrentFolderFlags( ULONG , ULONG ) = 0;
	/*00c8*/ virtual HRESULT GetCurrentFolderFlags( ULONG * ) = 0;
	/*00d0*/ virtual HRESULT GetSortColumnCount( INT * ) = 0;
	/*00d8*/ virtual HRESULT SetSortColumns( SORTCOLUMN const * , INT ) = 0;
	/*00e0*/ virtual HRESULT GetSortColumns( SORTCOLUMN * , INT ) = 0;
	/*00e8*/ virtual HRESULT GetItem( INT , _GUID const & , void * * ) = 0;
	/*00f0*/ virtual HRESULT GetVisibleItem( INT , INT , INT * ) = 0;
	/*00f8*/ virtual HRESULT GetSelectedItem( INT , INT * ) = 0;
	/*0100*/ virtual HRESULT GetSelection( INT , IShellItemArray * * ) = 0;
	/*0108*/ virtual HRESULT GetSelectionState( _ITEMIDLIST const __unaligned * , ULONG * ) = 0;
	/*0110*/ virtual HRESULT InvokeVerbOnSelection( CHAR const * ) = 0;
	/*0118*/ virtual HRESULT SetViewModeAndIconSize( FOLDERVIEWMODE , INT ) = 0;
	/*0120*/ virtual HRESULT GetViewModeAndIconSize( FOLDERVIEWMODE * , INT * ) = 0;
	/*0128*/ virtual HRESULT SetGroupSubsetCount( UINT ) = 0;
	/*0130*/ virtual HRESULT GetGroupSubsetCount( UINT * ) = 0;
	/*0138*/ virtual HRESULT SetRedraw( INT ) = 0;
	/*0140*/ virtual HRESULT IsMoveInSameFolder() = 0;
	/*0148*/ virtual HRESULT DoRename() = 0;
	void IFolderView2( IFolderView2 && );
	void IFolderView2( IFolderView2 const & );
	void IFolderView2();
	IFolderView2 & operator=( IFolderView2 && );
	IFolderView2 & operator=( IFolderView2 const & );
	/*0008*/
};

struct IFolderViewSettings : IUnknown {
	/*0018*/ virtual HRESULT GetColumnPropertyList( _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT GetGroupByProperty( _tagpropertykey * , INT * ) = 0;
	/*0028*/ virtual HRESULT GetViewMode( FOLDERLOGICALVIEWMODE * ) = 0;
	/*0030*/ virtual HRESULT GetIconSize( UINT * ) = 0;
	/*0038*/ virtual HRESULT GetFolderFlags( FOLDERFLAGS * , FOLDERFLAGS * ) = 0;
	/*0040*/ virtual HRESULT GetSortColumns( SORTCOLUMN * , UINT , UINT * ) = 0;
	/*0048*/ virtual HRESULT GetGroupSubsetCount( UINT * ) = 0;
	void IFolderViewSettings( IFolderViewSettings && );
	void IFolderViewSettings( IFolderViewSettings const & );
	void IFolderViewSettings();
	IFolderViewSettings & operator=( IFolderViewSettings && );
	IFolderViewSettings & operator=( IFolderViewSettings const & );
	/*0008*/
};

struct IFont : IUnknown {
	/*0018*/ virtual HRESULT get_Name( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT put_Name( WCHAR * ) = 0;
	/*0028*/ virtual HRESULT get_Size( tagCY * ) = 0;
	/*0030*/ virtual HRESULT put_Size( tagCY ) = 0;
	/*0038*/ virtual HRESULT get_Bold( INT * ) = 0;
	/*0040*/ virtual HRESULT put_Bold( INT ) = 0;
	/*0048*/ virtual HRESULT get_Italic( INT * ) = 0;
	/*0050*/ virtual HRESULT put_Italic( INT ) = 0;
	/*0058*/ virtual HRESULT get_Underline( INT * ) = 0;
	/*0060*/ virtual HRESULT put_Underline( INT ) = 0;
	/*0068*/ virtual HRESULT get_Strikethrough( INT * ) = 0;
	/*0070*/ virtual HRESULT put_Strikethrough( INT ) = 0;
	/*0078*/ virtual HRESULT get_Weight( SHORT * ) = 0;
	/*0080*/ virtual HRESULT put_Weight( SHORT ) = 0;
	/*0088*/ virtual HRESULT get_Charset( SHORT * ) = 0;
	/*0090*/ virtual HRESULT put_Charset( SHORT ) = 0;
	/*0098*/ virtual HRESULT get_hFont( HFONT__ * * ) = 0;
	/*00a0*/ virtual HRESULT Clone( IFont * * ) = 0;
	/*00a8*/ virtual HRESULT IsEqual( IFont * ) = 0;
	/*00b0*/ virtual HRESULT SetRatio( LONG , LONG ) = 0;
	/*00b8*/ virtual HRESULT QueryTextMetrics( tagTEXTMETRICW * ) = 0;
	/*00c0*/ virtual HRESULT AddRefHfont( HFONT__ * ) = 0;
	/*00c8*/ virtual HRESULT ReleaseHfont( HFONT__ * ) = 0;
	/*00d0*/ virtual HRESULT SetHdc( HDC__ * ) = 0;
	void IFont( IFont && );
	void IFont( IFont const & );
	void IFont();
	IFont & operator=( IFont && );
	IFont & operator=( IFont const & );
	/*0008*/
};

struct IFontDisp : IDispatch {
	void IFontDisp( IFontDisp && );
	void IFontDisp( IFontDisp const & );
	void IFontDisp();
	IFontDisp & operator=( IFontDisp && );
	IFontDisp & operator=( IFontDisp const & );
	/*0008*/
};

struct IFontEventsDisp : IDispatch {
	void IFontEventsDisp( IFontEventsDisp && );
	void IFontEventsDisp( IFontEventsDisp const & );
	void IFontEventsDisp();
	IFontEventsDisp & operator=( IFontEventsDisp && );
	IFontEventsDisp & operator=( IFontEventsDisp const & );
	/*0008*/
};

struct IForegroundTransfer : IUnknown {
	/*0018*/ virtual HRESULT AllowForegroundTransfer( void * ) = 0;
	void IForegroundTransfer( IForegroundTransfer && );
	void IForegroundTransfer( IForegroundTransfer const & );
	void IForegroundTransfer();
	IForegroundTransfer & operator=( IForegroundTransfer && );
	IForegroundTransfer & operator=( IForegroundTransfer const & );
	/*0008*/
};

struct IFrameworkInputPane : IUnknown {
	/*0018*/ virtual HRESULT Advise( IUnknown * , IFrameworkInputPaneHandler * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT AdviseWithHWND( HWND__ * , IFrameworkInputPaneHandler * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0030*/ virtual HRESULT Location( tagRECT * ) = 0;
	void IFrameworkInputPane( IFrameworkInputPane && );
	void IFrameworkInputPane( IFrameworkInputPane const & );
	void IFrameworkInputPane();
	IFrameworkInputPane & operator=( IFrameworkInputPane && );
	IFrameworkInputPane & operator=( IFrameworkInputPane const & );
	/*0008*/
};

struct IFrameworkInputPaneHandler : IUnknown {
	/*0018*/ virtual HRESULT Showing( tagRECT * , INT ) = 0;
	/*0020*/ virtual HRESULT Hiding( INT ) = 0;
	void IFrameworkInputPaneHandler( IFrameworkInputPaneHandler && );
	void IFrameworkInputPaneHandler( IFrameworkInputPaneHandler const & );
	void IFrameworkInputPaneHandler();
	IFrameworkInputPaneHandler & operator=( IFrameworkInputPaneHandler && );
	IFrameworkInputPaneHandler & operator=( IFrameworkInputPaneHandler const & );
	/*0008*/
};

struct IGetBindHandle : IUnknown {
	/*0018*/ virtual HRESULT GetBindHandle( __MIDL_IGetBindHandle_0001 , void * * ) = 0;
	void IGetBindHandle( IGetBindHandle && );
	void IGetBindHandle( IGetBindHandle const & );
	void IGetBindHandle();
	IGetBindHandle & operator=( IGetBindHandle && );
	IGetBindHandle & operator=( IGetBindHandle const & );
	/*0008*/
};

struct IGlobalInterfaceTable : IUnknown {
	/*0018*/ virtual HRESULT RegisterInterfaceInGlobal( IUnknown * , _GUID const & , ULONG * ) = 0;
	/*0020*/ virtual HRESULT RevokeInterfaceFromGlobal( ULONG ) = 0;
	/*0028*/ virtual HRESULT GetInterfaceFromGlobal( ULONG , _GUID const & , void * * ) = 0;
	void IGlobalInterfaceTable( IGlobalInterfaceTable && );
	void IGlobalInterfaceTable( IGlobalInterfaceTable const & );
	void IGlobalInterfaceTable();
	IGlobalInterfaceTable & operator=( IGlobalInterfaceTable && );
	IGlobalInterfaceTable & operator=( IGlobalInterfaceTable const & );
	/*0008*/
};

struct IGlobalOptions : IUnknown {
	/*0018*/ virtual HRESULT Set( tagGLOBALOPT_PROPERTIES , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT Query( tagGLOBALOPT_PROPERTIES , ULONGLONG * ) = 0;
	void IGlobalOptions( IGlobalOptions && );
	void IGlobalOptions( IGlobalOptions const & );
	void IGlobalOptions();
	IGlobalOptions & operator=( IGlobalOptions && );
	IGlobalOptions & operator=( IGlobalOptions const & );
	/*0008*/
};

enum IHM_DISPLAY_MODE {
	IDM_NONE = 0x0,
	IDM_IMMERSIVE = 0x1,
	IDM_FLOATING = 0x2,
	IDM_DOCKED = 0x3,
	IDM_SPLIT = 0x4
};

struct IHandleManager : IInspectable {
	/*0030*/ virtual HRESULT GetWlanHandle( void * * ) = 0;
	/*0038*/ virtual HRESULT GetWwanHandle( void * * ) = 0;
	/*0040*/ virtual HRESULT GetWcmHandle( void * * ) = 0;
	/*0048*/ virtual HRESULT GetNetworkListManager( ComPtr<INetworkListManagerPrivate> * ) = 0;
	/*0050*/ virtual HRESULT GetNetworkListManager2( ComPtr<INetworkListManagerPrivate2> * ) = 0;
	void IHandleManager( IHandleManager && );
	void IHandleManager( IHandleManager const & );
	void IHandleManager();
	IHandleManager & operator=( IHandleManager && );
	IHandleManager & operator=( IHandleManager const & );
	/*0008*/
};

struct IHandlerActivationHost : IUnknown {
	/*0018*/ virtual HRESULT BeforeCoCreateInstance( _GUID const & , IShellItemArray * , IHandlerInfo * ) = 0;
	/*0020*/ virtual HRESULT BeforeCreateProcess( WCHAR const * , WCHAR const * , IHandlerInfo * ) = 0;
	void IHandlerActivationHost( IHandlerActivationHost && );
	void IHandlerActivationHost( IHandlerActivationHost const & );
	void IHandlerActivationHost();
	IHandlerActivationHost & operator=( IHandlerActivationHost && );
	IHandlerActivationHost & operator=( IHandlerActivationHost const & );
	/*0008*/
};

struct IHandlerInfo : IUnknown {
	/*0018*/ virtual HRESULT GetApplicationDisplayName( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetApplicationPublisher( WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetApplicationIconReference( WCHAR * * ) = 0;
	void IHandlerInfo( IHandlerInfo && );
	void IHandlerInfo( IHandlerInfo const & );
	void IHandlerInfo();
	IHandlerInfo & operator=( IHandlerInfo && );
	IHandlerInfo & operator=( IHandlerInfo const & );
	/*0008*/
};

struct IHandlerInfo2 : IHandlerInfo {
	/*0030*/ virtual HRESULT GetApplicationId( WCHAR * * ) = 0;
	void IHandlerInfo2( IHandlerInfo2 && );
	void IHandlerInfo2( IHandlerInfo2 const & );
	void IHandlerInfo2();
	IHandlerInfo2 & operator=( IHandlerInfo2 && );
	IHandlerInfo2 & operator=( IHandlerInfo2 const & );
	/*0008*/
};

struct IHomeGroup : IUnknown {
	/*0018*/ virtual HRESULT IsMember( INT * ) = 0;
	/*0020*/ virtual HRESULT ShowSharingWizard( HWND__ * , HOMEGROUPSHARINGCHOICES * ) = 0;
	void IHomeGroup( IHomeGroup && );
	void IHomeGroup( IHomeGroup const & );
	void IHomeGroup();
	IHomeGroup & operator=( IHomeGroup && );
	IHomeGroup & operator=( IHomeGroup const & );
	/*0008*/
};

struct IHttpNegotiate : IUnknown {
	/*0018*/ virtual HRESULT BeginningTransaction( WCHAR const * , WCHAR const * , ULONG , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT OnResponse( ULONG , WCHAR const * , WCHAR const * , WCHAR * * ) = 0;
	void IHttpNegotiate( IHttpNegotiate && );
	void IHttpNegotiate( IHttpNegotiate const & );
	void IHttpNegotiate();
	IHttpNegotiate & operator=( IHttpNegotiate && );
	IHttpNegotiate & operator=( IHttpNegotiate const & );
	/*0008*/
};

struct IHttpNegotiate2 : IHttpNegotiate {
	/*0028*/ virtual HRESULT GetRootSecurityId( UCHAR * , ULONG * , ULONGLONG ) = 0;
	void IHttpNegotiate2( IHttpNegotiate2 && );
	void IHttpNegotiate2( IHttpNegotiate2 const & );
	void IHttpNegotiate2();
	IHttpNegotiate2 & operator=( IHttpNegotiate2 && );
	IHttpNegotiate2 & operator=( IHttpNegotiate2 const & );
	/*0008*/
};

struct IHttpNegotiate3 : IHttpNegotiate2 {
	/*0030*/ virtual HRESULT GetSerializedClientCertContext( UCHAR * * , ULONG * ) = 0;
	void IHttpNegotiate3( IHttpNegotiate3 && );
	void IHttpNegotiate3( IHttpNegotiate3 const & );
	void IHttpNegotiate3();
	IHttpNegotiate3 & operator=( IHttpNegotiate3 && );
	IHttpNegotiate3 & operator=( IHttpNegotiate3 const & );
	/*0008*/
};

struct IHttpSecurity : IWindowForBindingUI {
	/*0020*/ virtual HRESULT OnSecurityProblem( ULONG ) = 0;
	void IHttpSecurity( IHttpSecurity && );
	void IHttpSecurity( IHttpSecurity const & );
	void IHttpSecurity();
	IHttpSecurity & operator=( IHttpSecurity && );
	IHttpSecurity & operator=( IHttpSecurity const & );
	/*0008*/
};

struct IIOCancelInformation : IUnknown {
	/*0018*/ virtual HRESULT SetCancelInformation( ULONG , UINT ) = 0;
	/*0020*/ virtual HRESULT GetCancelInformation( ULONG * , UINT * ) = 0;
	void IIOCancelInformation( IIOCancelInformation && );
	void IIOCancelInformation( IIOCancelInformation const & );
	void IIOCancelInformation();
	IIOCancelInformation & operator=( IIOCancelInformation && );
	IIOCancelInformation & operator=( IIOCancelInformation const & );
	/*0008*/
};

struct IIdentityName : IRelatedItem {
	void IIdentityName( IIdentityName && );
	void IIdentityName( IIdentityName const & );
	void IIdentityName();
	IIdentityName & operator=( IIdentityName && );
	IIdentityName & operator=( IIdentityName const & );
	/*0008*/
};

struct IImageList : IUnknown {
	/*0018*/ virtual HRESULT Add( HBITMAP__ * , HBITMAP__ * , INT * ) = 0;
	/*0020*/ virtual HRESULT ReplaceIcon( INT , HICON__ * , INT * ) = 0;
	/*0028*/ virtual HRESULT SetOverlayImage( INT , INT ) = 0;
	/*0030*/ virtual HRESULT Replace( INT , HBITMAP__ * , HBITMAP__ * ) = 0;
	/*0038*/ virtual HRESULT AddMasked( HBITMAP__ * , ULONG , INT * ) = 0;
	/*0040*/ virtual HRESULT Draw( _IMAGELISTDRAWPARAMS * ) = 0;
	/*0048*/ virtual HRESULT Remove( INT ) = 0;
	/*0050*/ virtual HRESULT GetIcon( INT , UINT , HICON__ * * ) = 0;
	/*0058*/ virtual HRESULT GetImageInfo( INT , _IMAGEINFO * ) = 0;
	/*0060*/ virtual HRESULT Copy( INT , IUnknown * , INT , UINT ) = 0;
	/*0068*/ virtual HRESULT Merge( INT , IUnknown * , INT , INT , INT , _GUID const & , void * * ) = 0;
	/*0070*/ virtual HRESULT Clone( _GUID const & , void * * ) = 0;
	/*0078*/ virtual HRESULT GetImageRect( INT , tagRECT * ) = 0;
	/*0080*/ virtual HRESULT GetIconSize( INT * , INT * ) = 0;
	/*0088*/ virtual HRESULT SetIconSize( INT , INT ) = 0;
	/*0090*/ virtual HRESULT GetImageCount( INT * ) = 0;
	/*0098*/ virtual HRESULT SetImageCount( UINT ) = 0;
	/*00a0*/ virtual HRESULT SetBkColor( ULONG , ULONG * ) = 0;
	/*00a8*/ virtual HRESULT GetBkColor( ULONG * ) = 0;
	/*00b0*/ virtual HRESULT BeginDrag( INT , INT , INT ) = 0;
	/*00b8*/ virtual HRESULT EndDrag() = 0;
	/*00c0*/ virtual HRESULT DragEnter( HWND__ * , INT , INT ) = 0;
	/*00c8*/ virtual HRESULT DragLeave( HWND__ * ) = 0;
	/*00d0*/ virtual HRESULT DragMove( INT , INT ) = 0;
	/*00d8*/ virtual HRESULT SetDragCursorImage( IUnknown * , INT , INT , INT ) = 0;
	/*00e0*/ virtual HRESULT DragShowNolock( INT ) = 0;
	/*00e8*/ virtual HRESULT GetDragImage( tagPOINT * , tagPOINT * , _GUID const & , void * * ) = 0;
	/*00f0*/ virtual HRESULT GetItemFlags( INT , ULONG * ) = 0;
	/*00f8*/ virtual HRESULT GetOverlayImage( INT , INT * ) = 0;
	void IImageList( IImageList && );
	void IImageList( IImageList const & );
	void IImageList();
	IImageList & operator=( IImageList && );
	IImageList & operator=( IImageList const & );
	/*0008*/
};

struct IInitializeCommand : IUnknown {
	/*0018*/ virtual HRESULT Initialize( WCHAR const * , IPropertyBag * ) = 0;
	void IInitializeCommand( IInitializeCommand && );
	void IInitializeCommand( IInitializeCommand const & );
	void IInitializeCommand();
	IInitializeCommand & operator=( IInitializeCommand && );
	IInitializeCommand & operator=( IInitializeCommand const & );
	/*0008*/
};

struct IInitializeNetworkFolder : IUnknown {
	/*0018*/ virtual HRESULT Initialize( _ITEMIDLIST const __unaligned * , _ITEMIDLIST const __unaligned * , UINT , WCHAR const * , WCHAR const * ) = 0;
	void IInitializeNetworkFolder( IInitializeNetworkFolder && );
	void IInitializeNetworkFolder( IInitializeNetworkFolder const & );
	void IInitializeNetworkFolder();
	IInitializeNetworkFolder & operator=( IInitializeNetworkFolder && );
	IInitializeNetworkFolder & operator=( IInitializeNetworkFolder const & );
	/*0008*/
};

struct IInitializeSpy : IUnknown {
	/*0018*/ virtual HRESULT PreInitialize( ULONG , ULONG ) = 0;
	/*0020*/ virtual HRESULT PostInitialize( HRESULT , ULONG , ULONG ) = 0;
	/*0028*/ virtual HRESULT PreUninitialize( ULONG ) = 0;
	/*0030*/ virtual HRESULT PostUninitialize( ULONG ) = 0;
	void IInitializeSpy( IInitializeSpy && );
	void IInitializeSpy( IInitializeSpy const & );
	void IInitializeSpy();
	IInitializeSpy & operator=( IInitializeSpy && );
	IInitializeSpy & operator=( IInitializeSpy const & );
	/*0008*/
};

struct IInitializeWithBindCtx : IUnknown {
	/*0018*/ virtual HRESULT Initialize( IBindCtx * ) = 0;
	void IInitializeWithBindCtx( IInitializeWithBindCtx && );
	void IInitializeWithBindCtx( IInitializeWithBindCtx const & );
	void IInitializeWithBindCtx();
	IInitializeWithBindCtx & operator=( IInitializeWithBindCtx && );
	IInitializeWithBindCtx & operator=( IInitializeWithBindCtx const & );
	/*0008*/
};

struct IInitializeWithFile : IUnknown {
	/*0018*/ virtual HRESULT Initialize( WCHAR const * , ULONG ) = 0;
	void IInitializeWithFile( IInitializeWithFile && );
	void IInitializeWithFile( IInitializeWithFile const & );
	void IInitializeWithFile();
	IInitializeWithFile & operator=( IInitializeWithFile && );
	IInitializeWithFile & operator=( IInitializeWithFile const & );
	/*0008*/
};

struct IInitializeWithItem : IUnknown {
	/*0018*/ virtual HRESULT Initialize( IShellItem * , ULONG ) = 0;
	void IInitializeWithItem( IInitializeWithItem && );
	void IInitializeWithItem( IInitializeWithItem const & );
	void IInitializeWithItem();
	IInitializeWithItem & operator=( IInitializeWithItem && );
	IInitializeWithItem & operator=( IInitializeWithItem const & );
	/*0008*/
};

struct IInitializeWithPropertyStore : IUnknown {
	/*0018*/ virtual HRESULT Initialize( IPropertyStore * ) = 0;
	void IInitializeWithPropertyStore( IInitializeWithPropertyStore && );
	void IInitializeWithPropertyStore( IInitializeWithPropertyStore const & );
	void IInitializeWithPropertyStore();
	IInitializeWithPropertyStore & operator=( IInitializeWithPropertyStore && );
	IInitializeWithPropertyStore & operator=( IInitializeWithPropertyStore const & );
	/*0008*/
};

struct IInitializeWithStream : IUnknown {
	/*0018*/ virtual HRESULT Initialize( IStream * , ULONG ) = 0;
	void IInitializeWithStream( IInitializeWithStream && );
	void IInitializeWithStream( IInitializeWithStream const & );
	void IInitializeWithStream();
	IInitializeWithStream & operator=( IInitializeWithStream && );
	IInitializeWithStream & operator=( IInitializeWithStream const & );
	/*0008*/
};

struct IInitializeWithWindow : IUnknown {
	/*0018*/ virtual HRESULT Initialize( HWND__ * ) = 0;
	void IInitializeWithWindow( IInitializeWithWindow && );
	void IInitializeWithWindow( IInitializeWithWindow const & );
	void IInitializeWithWindow();
	IInitializeWithWindow & operator=( IInitializeWithWindow && );
	IInitializeWithWindow & operator=( IInitializeWithWindow const & );
	/*0008*/
};

struct IInputObject : IUnknown {
	/*0018*/ virtual HRESULT UIActivateIO( INT , tagMSG * ) = 0;
	/*0020*/ virtual HRESULT HasFocusIO() = 0;
	/*0028*/ virtual HRESULT TranslateAcceleratorIO( tagMSG * ) = 0;
	void IInputObject( IInputObject && );
	void IInputObject( IInputObject const & );
	void IInputObject();
	IInputObject & operator=( IInputObject && );
	IInputObject & operator=( IInputObject const & );
	/*0008*/
};

struct IInputObject2 : IInputObject {
	/*0030*/ virtual HRESULT TranslateAcceleratorGlobal( tagMSG * ) = 0;
	void IInputObject2( IInputObject2 && );
	void IInputObject2( IInputObject2 const & );
	void IInputObject2();
	IInputObject2 & operator=( IInputObject2 && );
	IInputObject2 & operator=( IInputObject2 const & );
	/*0008*/
};

struct IInputObjectSite : IUnknown {
	/*0018*/ virtual HRESULT OnFocusChangeIS( IUnknown * , INT ) = 0;
	void IInputObjectSite( IInputObjectSite && );
	void IInputObjectSite( IInputObjectSite const & );
	void IInputObjectSite();
	IInputObjectSite & operator=( IInputObjectSite && );
	IInputObjectSite & operator=( IInputObjectSite const & );
	/*0008*/
};

struct IInspectable : IUnknown {
	/*0018*/ virtual HRESULT GetIids( ULONG * , _GUID * * ) = 0;
	/*0020*/ virtual HRESULT GetRuntimeClassName( HSTRING__ * * ) = 0;
	/*0028*/ virtual HRESULT GetTrustLevel( TrustLevel * ) = 0;
	void IInspectable( IInspectable && );
	void IInspectable( IInspectable const & );
	void IInspectable();
	IInspectable & operator=( IInspectable && );
	IInspectable & operator=( IInspectable const & );
	/*0008*/
};

struct IInternalConnection : IUnknown {
	/*0018*/ virtual HRESULT AddConnection() = 0;
	/*0020*/ virtual HRESULT ReleaseConnection() = 0;
	void IInternalConnection( IInternalConnection && );
	void IInternalConnection( IInternalConnection const & );
	void IInternalConnection();
	IInternalConnection & operator=( IInternalConnection && );
	IInternalConnection & operator=( IInternalConnection const & );
	/*0008*/
};

struct IInternalUnknown : IUnknown {
	/*0018*/ virtual HRESULT QueryInternalInterface( _GUID const & , void * * ) = 0;
	void IInternalUnknown( IInternalUnknown && );
	void IInternalUnknown( IInternalUnknown const & );
	void IInternalUnknown();
	IInternalUnknown & operator=( IInternalUnknown && );
	IInternalUnknown & operator=( IInternalUnknown const & );
	/*0008*/
};

struct IInternet : IUnknown {
	void IInternet( IInternet && );
	void IInternet( IInternet const & );
	void IInternet();
	IInternet & operator=( IInternet && );
	IInternet & operator=( IInternet const & );
	/*0008*/
};

struct IInternetBindInfo : IUnknown {
	/*0018*/ virtual HRESULT GetBindInfo( ULONG * , _tagBINDINFO * ) = 0;
	/*0020*/ virtual HRESULT GetBindString( ULONG , WCHAR * * , ULONG , ULONG * ) = 0;
	void IInternetBindInfo( IInternetBindInfo && );
	void IInternetBindInfo( IInternetBindInfo const & );
	void IInternetBindInfo();
	IInternetBindInfo & operator=( IInternetBindInfo && );
	IInternetBindInfo & operator=( IInternetBindInfo const & );
	/*0008*/
};

struct IInternetBindInfoEx : IInternetBindInfo {
	/*0028*/ virtual HRESULT GetBindInfoEx( ULONG * , _tagBINDINFO * , ULONG * , ULONG * ) = 0;
	void IInternetBindInfoEx( IInternetBindInfoEx && );
	void IInternetBindInfoEx( IInternetBindInfoEx const & );
	void IInternetBindInfoEx();
	IInternetBindInfoEx & operator=( IInternetBindInfoEx && );
	IInternetBindInfoEx & operator=( IInternetBindInfoEx const & );
	/*0008*/
};

struct IInternetHostSecurityManager : IUnknown {
	/*0018*/ virtual HRESULT GetSecurityId( UCHAR * , ULONG * , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT ProcessUrlAction( ULONG , UCHAR * , ULONG , UCHAR * , ULONG , ULONG , ULONG ) = 0;
	/*0028*/ virtual HRESULT QueryCustomPolicy( _GUID const & , UCHAR * * , ULONG * , UCHAR * , ULONG , ULONG ) = 0;
	void IInternetHostSecurityManager( IInternetHostSecurityManager && );
	void IInternetHostSecurityManager( IInternetHostSecurityManager const & );
	void IInternetHostSecurityManager();
	IInternetHostSecurityManager & operator=( IInternetHostSecurityManager && );
	IInternetHostSecurityManager & operator=( IInternetHostSecurityManager const & );
	/*0008*/
};

struct IInternetPriority : IUnknown {
	/*0018*/ virtual HRESULT SetPriority( LONG ) = 0;
	/*0020*/ virtual HRESULT GetPriority( LONG * ) = 0;
	void IInternetPriority( IInternetPriority && );
	void IInternetPriority( IInternetPriority const & );
	void IInternetPriority();
	IInternetPriority & operator=( IInternetPriority && );
	IInternetPriority & operator=( IInternetPriority const & );
	/*0008*/
};

struct IInternetProtocol : IInternetProtocolRoot {
	/*0048*/ virtual HRESULT Read( void * , ULONG , ULONG * ) = 0;
	/*0050*/ virtual HRESULT Seek( _LARGE_INTEGER , ULONG , _ULARGE_INTEGER * ) = 0;
	/*0058*/ virtual HRESULT LockRequest( ULONG ) = 0;
	/*0060*/ virtual HRESULT UnlockRequest() = 0;
	void IInternetProtocol( IInternetProtocol && );
	void IInternetProtocol( IInternetProtocol const & );
	void IInternetProtocol();
	IInternetProtocol & operator=( IInternetProtocol && );
	IInternetProtocol & operator=( IInternetProtocol const & );
	/*0008*/
};

struct IInternetProtocolEx : IInternetProtocol {
	/*0068*/ virtual HRESULT StartEx( IUri * , IInternetProtocolSink * , IInternetBindInfo * , ULONG , ULONGLONG ) = 0;
	void IInternetProtocolEx( IInternetProtocolEx && );
	void IInternetProtocolEx( IInternetProtocolEx const & );
	void IInternetProtocolEx();
	IInternetProtocolEx & operator=( IInternetProtocolEx && );
	IInternetProtocolEx & operator=( IInternetProtocolEx const & );
	/*0008*/
};

struct IInternetProtocolInfo : IUnknown {
	/*0018*/ virtual HRESULT ParseUrl( WCHAR const * , _tagPARSEACTION , ULONG , WCHAR * , ULONG , ULONG * , ULONG ) = 0;
	/*0020*/ virtual HRESULT CombineUrl( WCHAR const * , WCHAR const * , ULONG , WCHAR * , ULONG , ULONG * , ULONG ) = 0;
	/*0028*/ virtual HRESULT CompareUrl( WCHAR const * , WCHAR const * , ULONG ) = 0;
	/*0030*/ virtual HRESULT QueryInfo( WCHAR const * , _tagQUERYOPTION , ULONG , void * , ULONG , ULONG * , ULONG ) = 0;
	void IInternetProtocolInfo( IInternetProtocolInfo && );
	void IInternetProtocolInfo( IInternetProtocolInfo const & );
	void IInternetProtocolInfo();
	IInternetProtocolInfo & operator=( IInternetProtocolInfo && );
	IInternetProtocolInfo & operator=( IInternetProtocolInfo const & );
	/*0008*/
};

struct IInternetProtocolRoot : IUnknown {
	/*0018*/ virtual HRESULT Start( WCHAR const * , IInternetProtocolSink * , IInternetBindInfo * , ULONG , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT Continue( _tagPROTOCOLDATA * ) = 0;
	/*0028*/ virtual HRESULT Abort( HRESULT , ULONG ) = 0;
	/*0030*/ virtual HRESULT Terminate( ULONG ) = 0;
	/*0038*/ virtual HRESULT Suspend() = 0;
	/*0040*/ virtual HRESULT Resume() = 0;
	void IInternetProtocolRoot( IInternetProtocolRoot && );
	void IInternetProtocolRoot( IInternetProtocolRoot const & );
	void IInternetProtocolRoot();
	IInternetProtocolRoot & operator=( IInternetProtocolRoot && );
	IInternetProtocolRoot & operator=( IInternetProtocolRoot const & );
	/*0008*/
};

struct IInternetProtocolSink : IUnknown {
	/*0018*/ virtual HRESULT Switch( _tagPROTOCOLDATA * ) = 0;
	/*0020*/ virtual HRESULT ReportProgress( ULONG , WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT ReportData( ULONG , ULONG , ULONG ) = 0;
	/*0030*/ virtual HRESULT ReportResult( HRESULT , ULONG , WCHAR const * ) = 0;
	void IInternetProtocolSink( IInternetProtocolSink && );
	void IInternetProtocolSink( IInternetProtocolSink const & );
	void IInternetProtocolSink();
	IInternetProtocolSink & operator=( IInternetProtocolSink && );
	IInternetProtocolSink & operator=( IInternetProtocolSink const & );
	/*0008*/
};

struct IInternetProtocolSinkStackable : IUnknown {
	/*0018*/ virtual HRESULT SwitchSink( IInternetProtocolSink * ) = 0;
	/*0020*/ virtual HRESULT CommitSwitch() = 0;
	/*0028*/ virtual HRESULT RollbackSwitch() = 0;
	void IInternetProtocolSinkStackable( IInternetProtocolSinkStackable && );
	void IInternetProtocolSinkStackable( IInternetProtocolSinkStackable const & );
	void IInternetProtocolSinkStackable();
	IInternetProtocolSinkStackable & operator=( IInternetProtocolSinkStackable && );
	IInternetProtocolSinkStackable & operator=( IInternetProtocolSinkStackable const & );
	/*0008*/
};

struct IInternetSecurityManager : IUnknown {
	/*0018*/ virtual HRESULT SetSecuritySite( IInternetSecurityMgrSite * ) = 0;
	/*0020*/ virtual HRESULT GetSecuritySite( IInternetSecurityMgrSite * * ) = 0;
	/*0028*/ virtual HRESULT MapUrlToZone( WCHAR const * , ULONG * , ULONG ) = 0;
	/*0030*/ virtual HRESULT GetSecurityId( WCHAR const * , UCHAR * , ULONG * , ULONGLONG ) = 0;
	/*0038*/ virtual HRESULT ProcessUrlAction( WCHAR const * , ULONG , UCHAR * , ULONG , UCHAR * , ULONG , ULONG , ULONG ) = 0;
	/*0040*/ virtual HRESULT QueryCustomPolicy( WCHAR const * , _GUID const & , UCHAR * * , ULONG * , UCHAR * , ULONG , ULONG ) = 0;
	/*0048*/ virtual HRESULT SetZoneMapping( ULONG , WCHAR const * , ULONG ) = 0;
	/*0050*/ virtual HRESULT GetZoneMappings( ULONG , IEnumString * * , ULONG ) = 0;
	void IInternetSecurityManager( IInternetSecurityManager && );
	void IInternetSecurityManager( IInternetSecurityManager const & );
	void IInternetSecurityManager();
	IInternetSecurityManager & operator=( IInternetSecurityManager && );
	IInternetSecurityManager & operator=( IInternetSecurityManager const & );
	/*0008*/
};

struct IInternetSecurityManagerEx : IInternetSecurityManager {
	/*0058*/ virtual HRESULT ProcessUrlActionEx( WCHAR const * , ULONG , UCHAR * , ULONG , UCHAR * , ULONG , ULONG , ULONG , ULONG * ) = 0;
	void IInternetSecurityManagerEx( IInternetSecurityManagerEx && );
	void IInternetSecurityManagerEx( IInternetSecurityManagerEx const & );
	void IInternetSecurityManagerEx();
	IInternetSecurityManagerEx & operator=( IInternetSecurityManagerEx && );
	IInternetSecurityManagerEx & operator=( IInternetSecurityManagerEx const & );
	/*0008*/
};

struct IInternetSecurityManagerEx2 : IInternetSecurityManagerEx {
	/*0060*/ virtual HRESULT MapUrlToZoneEx2( IUri * , ULONG * , ULONG , WCHAR * * , ULONG * ) = 0;
	/*0068*/ virtual HRESULT ProcessUrlActionEx2( IUri * , ULONG , UCHAR * , ULONG , UCHAR * , ULONG , ULONG , ULONGLONG , ULONG * ) = 0;
	/*0070*/ virtual HRESULT GetSecurityIdEx2( IUri * , UCHAR * , ULONG * , ULONGLONG ) = 0;
	/*0078*/ virtual HRESULT QueryCustomPolicyEx2( IUri * , _GUID const & , UCHAR * * , ULONG * , UCHAR * , ULONG , ULONGLONG ) = 0;
	void IInternetSecurityManagerEx2( IInternetSecurityManagerEx2 && );
	void IInternetSecurityManagerEx2( IInternetSecurityManagerEx2 const & );
	void IInternetSecurityManagerEx2();
	IInternetSecurityManagerEx2 & operator=( IInternetSecurityManagerEx2 && );
	IInternetSecurityManagerEx2 & operator=( IInternetSecurityManagerEx2 const & );
	/*0008*/
};

struct IInternetSecurityMgrSite : IUnknown {
	/*0018*/ virtual HRESULT GetWindow( HWND__ * * ) = 0;
	/*0020*/ virtual HRESULT EnableModeless( INT ) = 0;
	void IInternetSecurityMgrSite( IInternetSecurityMgrSite && );
	void IInternetSecurityMgrSite( IInternetSecurityMgrSite const & );
	void IInternetSecurityMgrSite();
	IInternetSecurityMgrSite & operator=( IInternetSecurityMgrSite && );
	IInternetSecurityMgrSite & operator=( IInternetSecurityMgrSite const & );
	/*0008*/
};

struct IInternetSession : IUnknown {
	/*0018*/ virtual HRESULT RegisterNameSpace( IClassFactory * , _GUID const & , WCHAR const * , ULONG , WCHAR const * const * , ULONG ) = 0;
	/*0020*/ virtual HRESULT UnregisterNameSpace( IClassFactory * , WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT RegisterMimeFilter( IClassFactory * , _GUID const & , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT UnregisterMimeFilter( IClassFactory * , WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT CreateBinding( IBindCtx * , WCHAR const * , IUnknown * , IUnknown * * , IInternetProtocol * * , ULONG ) = 0;
	/*0040*/ virtual HRESULT SetSessionOption( ULONG , void * , ULONG , ULONG ) = 0;
	/*0048*/ virtual HRESULT GetSessionOption( ULONG , void * , ULONG * , ULONG ) = 0;
	void IInternetSession( IInternetSession && );
	void IInternetSession( IInternetSession const & );
	void IInternetSession();
	IInternetSession & operator=( IInternetSession && );
	IInternetSession & operator=( IInternetSession const & );
	/*0008*/
};

struct IInternetThreadSwitch : IUnknown {
	/*0018*/ virtual HRESULT Prepare() = 0;
	/*0020*/ virtual HRESULT Continue() = 0;
	void IInternetThreadSwitch( IInternetThreadSwitch && );
	void IInternetThreadSwitch( IInternetThreadSwitch const & );
	void IInternetThreadSwitch();
	IInternetThreadSwitch & operator=( IInternetThreadSwitch && );
	IInternetThreadSwitch & operator=( IInternetThreadSwitch const & );
	/*0008*/
};

struct IInternetZoneManager : IUnknown {
	/*0018*/ virtual HRESULT GetZoneAttributes( ULONG , _ZONEATTRIBUTES * ) = 0;
	/*0020*/ virtual HRESULT SetZoneAttributes( ULONG , _ZONEATTRIBUTES * ) = 0;
	/*0028*/ virtual HRESULT GetZoneCustomPolicy( ULONG , _GUID const & , UCHAR * * , ULONG * , _URLZONEREG ) = 0;
	/*0030*/ virtual HRESULT SetZoneCustomPolicy( ULONG , _GUID const & , UCHAR * , ULONG , _URLZONEREG ) = 0;
	/*0038*/ virtual HRESULT GetZoneActionPolicy( ULONG , ULONG , UCHAR * , ULONG , _URLZONEREG ) = 0;
	/*0040*/ virtual HRESULT SetZoneActionPolicy( ULONG , ULONG , UCHAR * , ULONG , _URLZONEREG ) = 0;
	/*0048*/ virtual HRESULT PromptAction( ULONG , HWND__ * , WCHAR const * , WCHAR const * , ULONG ) = 0;
	/*0050*/ virtual HRESULT LogAction( ULONG , WCHAR const * , WCHAR const * , ULONG ) = 0;
	/*0058*/ virtual HRESULT CreateZoneEnumerator( ULONG * , ULONG * , ULONG ) = 0;
	/*0060*/ virtual HRESULT GetZoneAt( ULONG , ULONG , ULONG * ) = 0;
	/*0068*/ virtual HRESULT DestroyZoneEnumerator( ULONG ) = 0;
	/*0070*/ virtual HRESULT CopyTemplatePoliciesToZone( ULONG , ULONG , ULONG ) = 0;
	void IInternetZoneManager( IInternetZoneManager && );
	void IInternetZoneManager( IInternetZoneManager const & );
	void IInternetZoneManager();
	IInternetZoneManager & operator=( IInternetZoneManager && );
	IInternetZoneManager & operator=( IInternetZoneManager const & );
	/*0008*/
};

struct IInternetZoneManagerEx : IInternetZoneManager {
	/*0078*/ virtual HRESULT GetZoneActionPolicyEx( ULONG , ULONG , UCHAR * , ULONG , _URLZONEREG , ULONG ) = 0;
	/*0080*/ virtual HRESULT SetZoneActionPolicyEx( ULONG , ULONG , UCHAR * , ULONG , _URLZONEREG , ULONG ) = 0;
	void IInternetZoneManagerEx( IInternetZoneManagerEx && );
	void IInternetZoneManagerEx( IInternetZoneManagerEx const & );
	void IInternetZoneManagerEx();
	IInternetZoneManagerEx & operator=( IInternetZoneManagerEx && );
	IInternetZoneManagerEx & operator=( IInternetZoneManagerEx const & );
	/*0008*/
};

struct IInternetZoneManagerEx2 : IInternetZoneManagerEx {
	/*0088*/ virtual HRESULT GetZoneAttributesEx( ULONG , _ZONEATTRIBUTES * , ULONG ) = 0;
	/*0090*/ virtual HRESULT GetZoneSecurityState( ULONG , INT , ULONG * , INT * ) = 0;
	/*0098*/ virtual HRESULT GetIESecurityState( INT , ULONG * , INT * , INT ) = 0;
	/*00a0*/ virtual HRESULT FixUnsecureSettings() = 0;
	void IInternetZoneManagerEx2( IInternetZoneManagerEx2 && );
	void IInternetZoneManagerEx2( IInternetZoneManagerEx2 const & );
	void IInternetZoneManagerEx2();
	IInternetZoneManagerEx2 & operator=( IInternetZoneManagerEx2 && );
	IInternetZoneManagerEx2 & operator=( IInternetZoneManagerEx2 const & );
	/*0008*/
};

struct IIpxAdapterInfo : IUnknown {
	/*0018*/ virtual HRESULT GetFrameTypesForAdapter( WCHAR const * , ULONG , ULONG * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT GetVirtualNetworkNumber( ULONG * ) = 0;
	/*0028*/ virtual HRESULT SetVirtualNetworkNumber( ULONG ) = 0;
	void IIpxAdapterInfo( IIpxAdapterInfo && );
	void IIpxAdapterInfo( IIpxAdapterInfo const & );
	void IIpxAdapterInfo();
	IIpxAdapterInfo & operator=( IIpxAdapterInfo && );
	IIpxAdapterInfo & operator=( IIpxAdapterInfo const & );
	/*0008*/
};

struct IItemNameLimits : IUnknown {
	/*0018*/ virtual HRESULT GetValidCharacters( WCHAR * * , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetMaxLength( WCHAR const * , INT * ) = 0;
	void IItemNameLimits( IItemNameLimits && );
	void IItemNameLimits( IItemNameLimits const & );
	void IItemNameLimits();
	IItemNameLimits & operator=( IItemNameLimits && );
	IItemNameLimits & operator=( IItemNameLimits const & );
	/*0008*/
};

struct IKnownFolder : IUnknown {
	/*0018*/ virtual HRESULT GetId( _GUID * ) = 0;
	/*0020*/ virtual HRESULT GetCategory( KF_CATEGORY * ) = 0;
	/*0028*/ virtual HRESULT GetShellItem( ULONG , _GUID const & , void * * ) = 0;
	/*0030*/ virtual HRESULT GetPath( ULONG , WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT SetPath( ULONG , WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT GetIDList( ULONG , _ITEMIDLIST __unaligned * * ) = 0;
	/*0048*/ virtual HRESULT GetFolderType( _GUID * ) = 0;
	/*0050*/ virtual HRESULT GetRedirectionCapabilities( ULONG * ) = 0;
	/*0058*/ virtual HRESULT GetFolderDefinition( KNOWNFOLDER_DEFINITION * ) = 0;
	void IKnownFolder( IKnownFolder && );
	void IKnownFolder( IKnownFolder const & );
	void IKnownFolder();
	IKnownFolder & operator=( IKnownFolder && );
	IKnownFolder & operator=( IKnownFolder const & );
	/*0008*/
};

struct IKnownFolderManager : IUnknown {
	/*0018*/ virtual HRESULT FolderIdFromCsidl( INT , _GUID * ) = 0;
	/*0020*/ virtual HRESULT FolderIdToCsidl( _GUID const & , INT * ) = 0;
	/*0028*/ virtual HRESULT GetFolderIds( _GUID * * , UINT * ) = 0;
	/*0030*/ virtual HRESULT GetFolder( _GUID const & , IKnownFolder * * ) = 0;
	/*0038*/ virtual HRESULT GetFolderByName( WCHAR const * , IKnownFolder * * ) = 0;
	/*0040*/ virtual HRESULT RegisterFolder( _GUID const & , KNOWNFOLDER_DEFINITION const * ) = 0;
	/*0048*/ virtual HRESULT UnregisterFolder( _GUID const & ) = 0;
	/*0050*/ virtual HRESULT FindFolderFromPath( WCHAR const * , FFFP_MODE , IKnownFolder * * ) = 0;
	/*0058*/ virtual HRESULT FindFolderFromIDList( _ITEMIDLIST const __unaligned * , IKnownFolder * * ) = 0;
	/*0060*/ virtual HRESULT Redirect( _GUID const & , HWND__ * , ULONG , WCHAR const * , UINT , _GUID const * , WCHAR * * ) = 0;
	void IKnownFolderManager( IKnownFolderManager && );
	void IKnownFolderManager( IKnownFolderManager const & );
	void IKnownFolderManager();
	IKnownFolderManager & operator=( IKnownFolderManager && );
	IKnownFolderManager & operator=( IKnownFolderManager const & );
	/*0008*/
};

struct ILanguageExceptionErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT GetLanguageException( IUnknown * * ) = 0;
	void ILanguageExceptionErrorInfo( ILanguageExceptionErrorInfo && );
	void ILanguageExceptionErrorInfo( ILanguageExceptionErrorInfo const & );
	void ILanguageExceptionErrorInfo();
	ILanguageExceptionErrorInfo & operator=( ILanguageExceptionErrorInfo && );
	ILanguageExceptionErrorInfo & operator=( ILanguageExceptionErrorInfo const & );
	/*0008*/
};

struct ILanguageExceptionErrorInfo2 : ILanguageExceptionErrorInfo {
	/*0020*/ virtual HRESULT GetPreviousLanguageExceptionErrorInfo( ILanguageExceptionErrorInfo2 * * ) = 0;
	/*0028*/ virtual HRESULT CapturePropagationContext( IUnknown * ) = 0;
	/*0030*/ virtual HRESULT GetPropagationContextHead( ILanguageExceptionErrorInfo2 * * ) = 0;
	void ILanguageExceptionErrorInfo2( ILanguageExceptionErrorInfo2 && );
	void ILanguageExceptionErrorInfo2( ILanguageExceptionErrorInfo2 const & );
	void ILanguageExceptionErrorInfo2();
	ILanguageExceptionErrorInfo2 & operator=( ILanguageExceptionErrorInfo2 && );
	ILanguageExceptionErrorInfo2 & operator=( ILanguageExceptionErrorInfo2 const & );
	/*0008*/
};

struct ILanguageExceptionStackBackTrace : IUnknown {
	/*0018*/ virtual HRESULT GetStackBackTrace( ULONG , ULONGLONG * , ULONG * ) = 0;
	void ILanguageExceptionStackBackTrace( ILanguageExceptionStackBackTrace && );
	void ILanguageExceptionStackBackTrace( ILanguageExceptionStackBackTrace const & );
	void ILanguageExceptionStackBackTrace();
	ILanguageExceptionStackBackTrace & operator=( ILanguageExceptionStackBackTrace && );
	ILanguageExceptionStackBackTrace & operator=( ILanguageExceptionStackBackTrace const & );
	/*0008*/
};

struct ILanguageExceptionTransform : IUnknown {
	/*0018*/ virtual HRESULT GetTransformedRestrictedErrorInfo( IRestrictedErrorInfo * * ) = 0;
	void ILanguageExceptionTransform( ILanguageExceptionTransform && );
	void ILanguageExceptionTransform( ILanguageExceptionTransform const & );
	void ILanguageExceptionTransform();
	ILanguageExceptionTransform & operator=( ILanguageExceptionTransform && );
	ILanguageExceptionTransform & operator=( ILanguageExceptionTransform const & );
	/*0008*/
};

struct ILaunchSourceAppUserModelId : IUnknown {
	/*0018*/ virtual HRESULT GetAppUserModelId( WCHAR * * ) = 0;
	void ILaunchSourceAppUserModelId( ILaunchSourceAppUserModelId && );
	void ILaunchSourceAppUserModelId( ILaunchSourceAppUserModelId const & );
	void ILaunchSourceAppUserModelId();
	ILaunchSourceAppUserModelId & operator=( ILaunchSourceAppUserModelId && );
	ILaunchSourceAppUserModelId & operator=( ILaunchSourceAppUserModelId const & );
	/*0008*/
};

struct ILaunchSourceViewSizePreference : IUnknown {
	/*0018*/ virtual HRESULT GetSourceViewToPosition( HWND__ * * ) = 0;
	/*0020*/ virtual HRESULT GetSourceViewSizePreference( APPLICATION_VIEW_SIZE_PREFERENCE * ) = 0;
	void ILaunchSourceViewSizePreference( ILaunchSourceViewSizePreference && );
	void ILaunchSourceViewSizePreference( ILaunchSourceViewSizePreference const & );
	void ILaunchSourceViewSizePreference();
	ILaunchSourceViewSizePreference & operator=( ILaunchSourceViewSizePreference && );
	ILaunchSourceViewSizePreference & operator=( ILaunchSourceViewSizePreference const & );
	/*0008*/
};

struct ILaunchTargetMonitor : IUnknown {
	/*0018*/ virtual HRESULT GetMonitor( HMONITOR__ * * ) = 0;
	void ILaunchTargetMonitor( ILaunchTargetMonitor && );
	void ILaunchTargetMonitor( ILaunchTargetMonitor const & );
	void ILaunchTargetMonitor();
	ILaunchTargetMonitor & operator=( ILaunchTargetMonitor && );
	ILaunchTargetMonitor & operator=( ILaunchTargetMonitor const & );
	/*0008*/
};

struct ILaunchTargetViewSizePreference : IUnknown {
	/*0018*/ virtual HRESULT GetTargetViewSizePreference( APPLICATION_VIEW_SIZE_PREFERENCE * ) = 0;
	void ILaunchTargetViewSizePreference( ILaunchTargetViewSizePreference && );
	void ILaunchTargetViewSizePreference( ILaunchTargetViewSizePreference const & );
	void ILaunchTargetViewSizePreference();
	ILaunchTargetViewSizePreference & operator=( ILaunchTargetViewSizePreference && );
	ILaunchTargetViewSizePreference & operator=( ILaunchTargetViewSizePreference const & );
	/*0008*/
};

struct ILaunchUIContext : IUnknown {
	/*0018*/ virtual HRESULT SetAssociatedWindow( HWND__ * ) = 0;
	/*0020*/ virtual HRESULT SetTabGroupingPreference( ULONG ) = 0;
	void ILaunchUIContext( ILaunchUIContext && );
	void ILaunchUIContext( ILaunchUIContext const & );
	void ILaunchUIContext();
	ILaunchUIContext & operator=( ILaunchUIContext && );
	ILaunchUIContext & operator=( ILaunchUIContext const & );
	/*0008*/
};

struct ILaunchUIContextProvider : IUnknown {
	/*0018*/ virtual HRESULT UpdateContext( ILaunchUIContext * ) = 0;
	void ILaunchUIContextProvider( ILaunchUIContextProvider && );
	void ILaunchUIContextProvider( ILaunchUIContextProvider const & );
	void ILaunchUIContextProvider();
	ILaunchUIContextProvider & operator=( ILaunchUIContextProvider && );
	ILaunchUIContextProvider & operator=( ILaunchUIContextProvider const & );
	/*0008*/
};

struct ILayoutStorage : IUnknown {
	/*0018*/ virtual HRESULT LayoutScript( tagStorageLayout * , ULONG , ULONG ) = 0;
	/*0020*/ virtual HRESULT BeginMonitor() = 0;
	/*0028*/ virtual HRESULT EndMonitor() = 0;
	/*0030*/ virtual HRESULT ReLayoutDocfile( WCHAR * ) = 0;
	/*0038*/ virtual HRESULT ReLayoutDocfileOnILockBytes( ILockBytes * ) = 0;
	void ILayoutStorage( ILayoutStorage && );
	void ILayoutStorage( ILayoutStorage const & );
	void ILayoutStorage();
	ILayoutStorage & operator=( ILayoutStorage && );
	ILayoutStorage & operator=( ILayoutStorage const & );
	/*0008*/
};

struct ILockBytes : IUnknown {
	/*0018*/ virtual HRESULT ReadAt( _ULARGE_INTEGER , void * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT WriteAt( _ULARGE_INTEGER , void const * , ULONG , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Flush() = 0;
	/*0030*/ virtual HRESULT SetSize( _ULARGE_INTEGER ) = 0;
	/*0038*/ virtual HRESULT LockRegion( _ULARGE_INTEGER , _ULARGE_INTEGER , ULONG ) = 0;
	/*0040*/ virtual HRESULT UnlockRegion( _ULARGE_INTEGER , _ULARGE_INTEGER , ULONG ) = 0;
	/*0048*/ virtual HRESULT Stat( tagSTATSTG * , ULONG ) = 0;
	void ILockBytes( ILockBytes && );
	void ILockBytes( ILockBytes const & );
	void ILockBytes();
	ILockBytes & operator=( ILockBytes && );
	ILockBytes & operator=( ILockBytes const & );
	/*0008*/
};

union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {
	/*0000*/ ULONG HeaderData;
	/*0000*/ ULONG FunctionLength : 18; // 0x0003ffff;
	/*0000*/ ULONG Version : 02; // 0x000c0000;
	/*0000*/ ULONG ExceptionDataPresent : 01; // 0x00100000;
	/*0000*/ ULONG EpilogInHeader : 01; // 0x00200000;
	/*0000*/ ULONG EpilogCount : 05; // 0x07c00000;
	/*0000*/ ULONG CodeWords : 05; // 0xf8000000;
	/*0004*/
};

struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
	/*0000*/ UCHAR bAuxType;
	/*0001*/ UCHAR bReserved;
	/*0002*/ ULONG SymbolTableIndex;
	/*0006*/ UCHAR rgbReserved[0xc];
	/*0012*/
};

enum IMAGE_AUX_SYMBOL_TYPE {
	IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 0x1
};

struct IMAGE_COR20_HEADER {
	/*0000*/ ULONG cb;
	/*0004*/ USHORT MajorRuntimeVersion;
	/*0006*/ USHORT MinorRuntimeVersion;
	/*0008*/ _IMAGE_DATA_DIRECTORY MetaData;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG EntryPointToken;
	/*0014*/ ULONG EntryPointRVA;
	/*0018*/ _IMAGE_DATA_DIRECTORY Resources;
	/*0020*/ _IMAGE_DATA_DIRECTORY StrongNameSignature;
	/*0028*/ _IMAGE_DATA_DIRECTORY CodeManagerTable;
	/*0030*/ _IMAGE_DATA_DIRECTORY VTableFixups;
	/*0038*/ _IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
	/*0040*/ _IMAGE_DATA_DIRECTORY ManagedNativeHeader;
	/*0048*/
};

struct IMAPIAdviseSink : IUnknown {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*0018*/ virtual ULONG OnNotify( ULONG , _NOTIFICATION * ) = 0;
	void IMAPIAdviseSink( IMAPIAdviseSink && );
	void IMAPIAdviseSink( IMAPIAdviseSink const & );
	void IMAPIAdviseSink();
	IMAPIAdviseSink & operator=( IMAPIAdviseSink && );
	IMAPIAdviseSink & operator=( IMAPIAdviseSink const & );
	/*0008*/
};

struct IMAPIContainer : IMAPIProp {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	/*0070*/ virtual HRESULT GetContentsTable( ULONG , IMAPITable * * ) = 0;
	/*0078*/ virtual HRESULT GetHierarchyTable( ULONG , IMAPITable * * ) = 0;
	/*0080*/ virtual HRESULT OpenEntry( ULONG , ENTRYID * , _GUID const * , ULONG , ULONG * , IUnknown * * ) = 0;
	/*0088*/ virtual HRESULT SetSearchCriteria( _SRestriction * , _SBinaryArray * , ULONG ) = 0;
	/*0090*/ virtual HRESULT GetSearchCriteria( ULONG , _SRestriction * * , _SBinaryArray * * , ULONG * ) = 0;
	void IMAPIContainer( IMAPIContainer && );
	void IMAPIContainer( IMAPIContainer const & );
	void IMAPIContainer();
	IMAPIContainer & operator=( IMAPIContainer && );
	IMAPIContainer & operator=( IMAPIContainer const & );
	/*0008*/
};

struct IMAPIControl : IUnknown {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*0018*/ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*0020*/ virtual HRESULT Activate( ULONG , ULONG ) = 0;
	/*0028*/ virtual HRESULT GetState( ULONG , ULONG * ) = 0;
	void IMAPIControl( IMAPIControl && );
	void IMAPIControl( IMAPIControl const & );
	void IMAPIControl();
	IMAPIControl & operator=( IMAPIControl && );
	IMAPIControl & operator=( IMAPIControl const & );
	/*0008*/
};

struct IMAPIFolder : IMAPIContainer {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT GetContentsTable( ULONG , IMAPITable * * ) = 0;
	/*    */ virtual HRESULT GetHierarchyTable( ULONG , IMAPITable * * ) = 0;
	/*    */ virtual HRESULT OpenEntry( ULONG , ENTRYID * , _GUID const * , ULONG , ULONG * , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetSearchCriteria( _SRestriction * , _SBinaryArray * , ULONG ) = 0;
	/*    */ virtual HRESULT GetSearchCriteria( ULONG , _SRestriction * * , _SBinaryArray * * , ULONG * ) = 0;
	/*0098*/ virtual HRESULT CreateMessage( _GUID const * , ULONG , IMessage * * ) = 0;
	/*00a0*/ virtual HRESULT CopyMessages( _SBinaryArray * , _GUID const * , void * , ULONG , IMAPIProgress * , ULONG ) = 0;
	/*00a8*/ virtual HRESULT DeleteMessages( _SBinaryArray * , ULONG , IMAPIProgress * , ULONG ) = 0;
	/*00b0*/ virtual HRESULT CreateFolder( ULONG , WCHAR * , WCHAR * , _GUID const * , ULONG , IMAPIFolder * * ) = 0;
	/*00b8*/ virtual HRESULT CopyFolder( ULONG , ENTRYID * , _GUID const * , void * , WCHAR * , ULONG , IMAPIProgress * , ULONG ) = 0;
	/*00c0*/ virtual HRESULT DeleteFolder( ULONG , ENTRYID * , ULONG , IMAPIProgress * , ULONG ) = 0;
	/*00c8*/ virtual HRESULT SetReadFlags( _SBinaryArray * , ULONG , IMAPIProgress * , ULONG ) = 0;
	/*00d0*/ virtual HRESULT GetMessageStatus( ULONG , ENTRYID * , ULONG , ULONG * ) = 0;
	/*00d8*/ virtual HRESULT SetMessageStatus( ULONG , ENTRYID * , ULONG , ULONG , ULONG * ) = 0;
	/*00e0*/ virtual HRESULT SaveContentsSort( _SSortOrderSet * , ULONG ) = 0;
	/*00e8*/ virtual HRESULT EmptyFolder( ULONG , IMAPIProgress * , ULONG ) = 0;
	void IMAPIFolder( IMAPIFolder && );
	void IMAPIFolder( IMAPIFolder const & );
	void IMAPIFolder();
	IMAPIFolder & operator=( IMAPIFolder && );
	IMAPIFolder & operator=( IMAPIFolder const & );
	/*0008*/
};

struct IMAPIProgress : IUnknown {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*0018*/ virtual HRESULT Progress( ULONG , ULONG , ULONG ) = 0;
	/*0020*/ virtual HRESULT GetFlags( ULONG * ) = 0;
	/*0028*/ virtual HRESULT GetMax( ULONG * ) = 0;
	/*0030*/ virtual HRESULT GetMin( ULONG * ) = 0;
	/*0038*/ virtual HRESULT SetLimits( ULONG * , ULONG * , ULONG * ) = 0;
	void IMAPIProgress( IMAPIProgress && );
	void IMAPIProgress( IMAPIProgress const & );
	void IMAPIProgress();
	IMAPIProgress & operator=( IMAPIProgress && );
	IMAPIProgress & operator=( IMAPIProgress const & );
	/*0008*/
};

struct IMAPIProp : IUnknown {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*0018*/ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*0020*/ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*0028*/ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*0030*/ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*0038*/ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*0040*/ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*0048*/ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*0050*/ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*0058*/ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*0060*/ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*0068*/ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	void IMAPIProp( IMAPIProp && );
	void IMAPIProp( IMAPIProp const & );
	void IMAPIProp();
	IMAPIProp & operator=( IMAPIProp && );
	IMAPIProp & operator=( IMAPIProp const & );
	/*0008*/
};

struct IMAPISession : IUnknown {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*0018*/ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*0020*/ virtual HRESULT GetMsgStoresTable( ULONG , IMAPITable * * ) = 0;
	/*0028*/ virtual HRESULT OpenMsgStore( ULONG , ULONG , ENTRYID * , _GUID const * , ULONG , IMsgStore * * ) = 0;
	/*0030*/ virtual HRESULT OpenAddressBook( ULONG , _GUID const * , ULONG , IAddrBook * * ) = 0;
	/*0038*/ virtual HRESULT OpenProfileSection( _MAPIUID * , _GUID const * , ULONG , IProfSect * * ) = 0;
	/*0040*/ virtual HRESULT GetStatusTable( ULONG , IMAPITable * * ) = 0;
	/*0048*/ virtual HRESULT OpenEntry( ULONG , ENTRYID * , _GUID const * , ULONG , ULONG * , IUnknown * * ) = 0;
	/*0050*/ virtual HRESULT CompareEntryIDs( ULONG , ENTRYID * , ULONG , ENTRYID * , ULONG , ULONG * ) = 0;
	/*0058*/ virtual HRESULT Advise( ULONG , ENTRYID * , ULONG , IMAPIAdviseSink * , ULONG * ) = 0;
	/*0060*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0068*/ virtual HRESULT MessageOptions( ULONG , ULONG , WCHAR * , IMessage * ) = 0;
	/*0070*/ virtual HRESULT QueryDefaultMessageOpt( WCHAR * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*0078*/ virtual HRESULT EnumAdrTypes( ULONG , ULONG * , WCHAR * * * ) = 0;
	/*0080*/ virtual HRESULT QueryIdentity( ULONG * , ENTRYID * * ) = 0;
	/*0088*/ virtual HRESULT Logoff( ULONG , ULONG , ULONG ) = 0;
	/*0090*/ virtual HRESULT SetDefaultStore( ULONG , ULONG , ENTRYID * ) = 0;
	/*0098*/ virtual HRESULT AdminServices( ULONG , IMsgServiceAdmin * * ) = 0;
	/*00a0*/ virtual HRESULT ShowForm( ULONG , IMsgStore * , IMAPIFolder * , _GUID const * , ULONG , IMessage * , ULONG , ULONG , ULONG , ULONG , CHAR * ) = 0;
	/*00a8*/ virtual HRESULT PrepareForm( _GUID const * , IMessage * , ULONG * ) = 0;
	void IMAPISession( IMAPISession && );
	void IMAPISession( IMAPISession const & );
	void IMAPISession();
	IMAPISession & operator=( IMAPISession && );
	IMAPISession & operator=( IMAPISession const & );
	/*0008*/
};

struct IMAPIStatus : IMAPIProp {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	/*0070*/ virtual HRESULT ValidateState( ULONG , ULONG ) = 0;
	/*0078*/ virtual HRESULT SettingsDialog( ULONG , ULONG ) = 0;
	/*0080*/ virtual HRESULT ChangePassword( WCHAR * , WCHAR * , ULONG ) = 0;
	/*0088*/ virtual HRESULT FlushQueues( ULONG , ULONG , ENTRYID * , ULONG ) = 0;
	void IMAPIStatus( IMAPIStatus && );
	void IMAPIStatus( IMAPIStatus const & );
	void IMAPIStatus();
	IMAPIStatus & operator=( IMAPIStatus && );
	IMAPIStatus & operator=( IMAPIStatus const & );
	/*0008*/
};

struct IMAPITable : IUnknown {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*0018*/ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*0020*/ virtual HRESULT Advise( ULONG , IMAPIAdviseSink * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0030*/ virtual HRESULT GetStatus( ULONG * , ULONG * ) = 0;
	/*0038*/ virtual HRESULT SetColumns( _SPropTagArray * , ULONG ) = 0;
	/*0040*/ virtual HRESULT QueryColumns( ULONG , _SPropTagArray * * ) = 0;
	/*0048*/ virtual HRESULT GetRowCount( ULONG , ULONG * ) = 0;
	/*0050*/ virtual HRESULT SeekRow( ULONG , LONG , LONG * ) = 0;
	/*0058*/ virtual HRESULT SeekRowApprox( ULONG , ULONG ) = 0;
	/*0060*/ virtual HRESULT QueryPosition( ULONG * , ULONG * , ULONG * ) = 0;
	/*0068*/ virtual HRESULT FindRow( _SRestriction * , ULONG , ULONG ) = 0;
	/*0070*/ virtual HRESULT Restrict( _SRestriction * , ULONG ) = 0;
	/*0078*/ virtual HRESULT CreateBookmark( ULONG * ) = 0;
	/*0080*/ virtual HRESULT FreeBookmark( ULONG ) = 0;
	/*0088*/ virtual HRESULT SortTable( _SSortOrderSet * , ULONG ) = 0;
	/*0090*/ virtual HRESULT QuerySortOrder( _SSortOrderSet * * ) = 0;
	/*0098*/ virtual HRESULT QueryRows( LONG , ULONG , _SRowSet * * ) = 0;
	/*00a0*/ virtual HRESULT Abort() = 0;
	/*00a8*/ virtual HRESULT ExpandRow( ULONG , UCHAR * , ULONG , ULONG , _SRowSet * * , ULONG * ) = 0;
	/*00b0*/ virtual HRESULT CollapseRow( ULONG , UCHAR * , ULONG , ULONG * ) = 0;
	/*00b8*/ virtual HRESULT WaitForCompletion( ULONG , ULONG , ULONG * ) = 0;
	/*00c0*/ virtual HRESULT GetCollapseState( ULONG , ULONG , UCHAR * , ULONG * , UCHAR * * ) = 0;
	/*00c8*/ virtual HRESULT SetCollapseState( ULONG , ULONG , UCHAR * , ULONG * ) = 0;
	void IMAPITable( IMAPITable && );
	void IMAPITable( IMAPITable const & );
	void IMAPITable();
	IMAPITable & operator=( IMAPITable && );
	IMAPITable & operator=( IMAPITable const & );
	/*0008*/
};

enum IMMAPP_SETTHUMBNAIL_PREVIEW_STATE {
	IMMSPS_VISIBLE = 0x0,
	IMMSPS_HIDDEN = 0x1
};

enum IMMERSIVE_APPLICATION_GET_WINDOWS_FILTER {
	IAGWF_ANY = 0x0,
	IAGWF_STRONGLY_NAMED = 0x1,
	IAGWF_PREFER_PENDING_PRESENTED = 0x2,
	IAGWF_ONLY_PENDING_PRESENTED = 0x3,
	IAGWF_PRESENTATION = 0x4,
	IAGWF_FRAME = 0x5
};

enum IMMERSIVE_APPLICATION_PRESENTATION_CHANGE {
	IAPC_ISAPPLICATIONWINDOWPRESENTED = 0x0,
	IAPC_SHOULDSHOWBACKBUTTON = 0x1
};

enum IMMERSIVE_APPLICATION_QUERY_SERVICE_OPTION {
	IAQSO_DEFAULT = 0x0,
	IAQSO_FIRST_PACKAGED = 0x1,
	IAQSO_ANY_PACKAGED = 0x2
};

enum IMMERSIVE_MONITOR_MOVE_DIRECTION {
	IMMD_PREVIOUS = 0x0,
	IMMD_NEXT = 0x1
};

enum IMM_APP_CHANGED {
	IAC_UNKNOWN = 0x0,
	IAC_STARTED = 0x1,
	IAC_FOREGROUND = 0x2,
	IAC_BACKGROUND = 0x3,
	IAC_SHOWN = 0x4,
	IAC_HIDDEN = 0x5,
	IAC_CLOSED = 0x6,
	IAC_WINDOWPRESENTATIONDECLINED = 0x7,
	IAC_PRESENTEDWINDOWCHANGED = 0x8,
	IAC_MOBODYENTERED = 0x9,
	IAC_MOBODYEXIT = 0xa,
	IAC_HASPACKAGEID = 0xb,
	IAC_FORGOTTEN = 0xc,
	IAC_INTERACTIVE = 0xd,
	IAC_NON_INTERACTIVE = 0xe,
	IAC_PENDINGPRESENTEDWINDOWCANCELED = 0xf,
	IAC_FORGOTTEN_FOR_TERMINATION = 0x10,
	IAC_MONITORCHANGED = 0x11
};

enum IMM_SYSTEM_MODE {
	ISM_NONE = 0xffffffff,
	ISM_DESKTOP = 0x0,
	ISM_IMMERSIVE = 0x1
};

struct IMPORT_OBJECT_HEADER {
	/*0000*/ USHORT Sig1;
	/*0002*/ USHORT Sig2;
	/*0004*/ USHORT Version;
	/*0006*/ USHORT Machine;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ ULONG SizeOfData;
	/*0010*/ USHORT Ordinal;
	/*0010*/ USHORT Hint;
	/*0012*/ USHORT Type : 02; // 0x0003;
	/*0012*/ USHORT NameType : 03; // 0x001c;
	/*0012*/ USHORT Reserved : 11; // 0xffe0;
	/*0014*/
};

enum IMPORT_OBJECT_NAME_TYPE {
	IMPORT_OBJECT_ORDINAL = 0x0,
	IMPORT_OBJECT_NAME = 0x1,
	IMPORT_OBJECT_NAME_NO_PREFIX = 0x2,
	IMPORT_OBJECT_NAME_UNDECORATE = 0x3,
	IMPORT_OBJECT_NAME_EXPORTAS = 0x4
};

enum IMPORT_OBJECT_TYPE {
	IMPORT_OBJECT_CODE = 0x0,
	IMPORT_OBJECT_DATA = 0x1,
	IMPORT_OBJECT_CONST = 0x2
};

struct IMXAttributes : IDispatch {
	/*0038*/ virtual HRESULT addAttribute( WCHAR * , WCHAR * , WCHAR * , WCHAR * , WCHAR * ) = 0;
	/*0040*/ virtual HRESULT addAttributeFromIndex( tagVARIANT , INT ) = 0;
	/*0048*/ virtual HRESULT clear() = 0;
	/*0050*/ virtual HRESULT removeAttribute( INT ) = 0;
	/*0058*/ virtual HRESULT setAttribute( INT , WCHAR * , WCHAR * , WCHAR * , WCHAR * , WCHAR * ) = 0;
	/*0060*/ virtual HRESULT setAttributes( tagVARIANT ) = 0;
	/*0068*/ virtual HRESULT setLocalName( INT , WCHAR * ) = 0;
	/*0070*/ virtual HRESULT setQName( INT , WCHAR * ) = 0;
	/*0078*/ virtual HRESULT setType( INT , WCHAR * ) = 0;
	/*0080*/ virtual HRESULT setURI( INT , WCHAR * ) = 0;
	/*0088*/ virtual HRESULT setValue( INT , WCHAR * ) = 0;
	void IMXAttributes( IMXAttributes && );
	void IMXAttributes( IMXAttributes const & );
	void IMXAttributes();
	IMXAttributes & operator=( IMXAttributes && );
	IMXAttributes & operator=( IMXAttributes const & );
	/*0008*/
};

struct IMXNamespaceManager : IUnknown {
	/*0018*/ virtual HRESULT putAllowOverride( SHORT ) = 0;
	/*0020*/ virtual HRESULT getAllowOverride( SHORT * ) = 0;
	/*0028*/ virtual HRESULT reset() = 0;
	/*0030*/ virtual HRESULT pushContext() = 0;
	/*0038*/ virtual HRESULT pushNodeContext( IXMLDOMNode * , SHORT ) = 0;
	/*0040*/ virtual HRESULT popContext() = 0;
	/*0048*/ virtual HRESULT declarePrefix( WCHAR const * , WCHAR const * ) = 0;
	/*0050*/ virtual HRESULT getDeclaredPrefix( LONG , WCHAR * , INT * ) = 0;
	/*0058*/ virtual HRESULT getPrefix( WCHAR const * , LONG , WCHAR * , INT * ) = 0;
	/*0060*/ virtual HRESULT getURI( WCHAR const * , IXMLDOMNode * , WCHAR * , INT * ) = 0;
	void IMXNamespaceManager( IMXNamespaceManager && );
	void IMXNamespaceManager( IMXNamespaceManager const & );
	void IMXNamespaceManager();
	IMXNamespaceManager & operator=( IMXNamespaceManager && );
	IMXNamespaceManager & operator=( IMXNamespaceManager const & );
	/*0008*/
};

struct IMXNamespacePrefixes : IDispatch {
	/*0038*/ virtual HRESULT get_item( LONG , WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0048*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	void IMXNamespacePrefixes( IMXNamespacePrefixes && );
	void IMXNamespacePrefixes( IMXNamespacePrefixes const & );
	void IMXNamespacePrefixes();
	IMXNamespacePrefixes & operator=( IMXNamespacePrefixes && );
	IMXNamespacePrefixes & operator=( IMXNamespacePrefixes const & );
	/*0008*/
};

struct IMXReaderControl : IDispatch {
	/*0038*/ virtual HRESULT abort() = 0;
	/*0040*/ virtual HRESULT resume() = 0;
	/*0048*/ virtual HRESULT suspend() = 0;
	void IMXReaderControl( IMXReaderControl && );
	void IMXReaderControl( IMXReaderControl const & );
	void IMXReaderControl();
	IMXReaderControl & operator=( IMXReaderControl && );
	IMXReaderControl & operator=( IMXReaderControl const & );
	/*0008*/
};

struct IMXSchemaDeclHandler : IDispatch {
	/*0038*/ virtual HRESULT schemaElementDecl( ISchemaElement * ) = 0;
	void IMXSchemaDeclHandler( IMXSchemaDeclHandler && );
	void IMXSchemaDeclHandler( IMXSchemaDeclHandler const & );
	void IMXSchemaDeclHandler();
	IMXSchemaDeclHandler & operator=( IMXSchemaDeclHandler && );
	IMXSchemaDeclHandler & operator=( IMXSchemaDeclHandler const & );
	/*0008*/
};

struct IMXWriter : IDispatch {
	/*0038*/ virtual HRESULT put_output( tagVARIANT ) = 0;
	/*0040*/ virtual HRESULT get_output( tagVARIANT * ) = 0;
	/*0048*/ virtual HRESULT put_encoding( WCHAR * ) = 0;
	/*0050*/ virtual HRESULT get_encoding( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT put_byteOrderMark( SHORT ) = 0;
	/*0060*/ virtual HRESULT get_byteOrderMark( SHORT * ) = 0;
	/*0068*/ virtual HRESULT put_indent( SHORT ) = 0;
	/*0070*/ virtual HRESULT get_indent( SHORT * ) = 0;
	/*0078*/ virtual HRESULT put_standalone( SHORT ) = 0;
	/*0080*/ virtual HRESULT get_standalone( SHORT * ) = 0;
	/*0088*/ virtual HRESULT put_omitXMLDeclaration( SHORT ) = 0;
	/*0090*/ virtual HRESULT get_omitXMLDeclaration( SHORT * ) = 0;
	/*0098*/ virtual HRESULT put_version( WCHAR * ) = 0;
	/*00a0*/ virtual HRESULT get_version( WCHAR * * ) = 0;
	/*00a8*/ virtual HRESULT put_disableOutputEscaping( SHORT ) = 0;
	/*00b0*/ virtual HRESULT get_disableOutputEscaping( SHORT * ) = 0;
	/*00b8*/ virtual HRESULT flush() = 0;
	void IMXWriter( IMXWriter && );
	void IMXWriter( IMXWriter const & );
	void IMXWriter();
	IMXWriter & operator=( IMXWriter && );
	IMXWriter & operator=( IMXWriter const & );
	/*0008*/
};

struct IMXXMLFilter : IDispatch {
	/*0038*/ virtual HRESULT getFeature( WCHAR * , SHORT * ) = 0;
	/*0040*/ virtual HRESULT putFeature( WCHAR * , SHORT ) = 0;
	/*0048*/ virtual HRESULT getProperty( WCHAR * , tagVARIANT * ) = 0;
	/*0050*/ virtual HRESULT putProperty( WCHAR * , tagVARIANT ) = 0;
	/*0058*/ virtual HRESULT get_entityResolver( IUnknown * * ) = 0;
	/*0060*/ virtual HRESULT putref_entityResolver( IUnknown * ) = 0;
	/*0068*/ virtual HRESULT get_contentHandler( IUnknown * * ) = 0;
	/*0070*/ virtual HRESULT putref_contentHandler( IUnknown * ) = 0;
	/*0078*/ virtual HRESULT get_dtdHandler( IUnknown * * ) = 0;
	/*0080*/ virtual HRESULT putref_dtdHandler( IUnknown * ) = 0;
	/*0088*/ virtual HRESULT get_errorHandler( IUnknown * * ) = 0;
	/*0090*/ virtual HRESULT putref_errorHandler( IUnknown * ) = 0;
	void IMXXMLFilter( IMXXMLFilter && );
	void IMXXMLFilter( IMXXMLFilter const & );
	void IMXXMLFilter();
	IMXXMLFilter & operator=( IMXXMLFilter && );
	IMXXMLFilter & operator=( IMXXMLFilter const & );
	/*0008*/
};

struct IMachineGlobalObjectTable : IUnknown {
	/*0018*/ virtual HRESULT RegisterObject( MGOTFLAGS , _GUID const & , HSTRING__ * , IUnknown * , <unnamed-type-MachineGlobalObjectTableRegistrationToken> * * ) = 0;
	/*0020*/ virtual HRESULT EnumerateObjectIdentifiers( _GUID const & , IVectorView<HSTRING__ *> * * ) = 0;
	/*0028*/ virtual HRESULT GetObjectW( _GUID const & , HSTRING__ * , _GUID const & , void * * ) = 0;
	/*0030*/ virtual HRESULT RevokeObject( <unnamed-type-MachineGlobalObjectTableRegistrationToken> * ) = 0;
	void IMachineGlobalObjectTable( IMachineGlobalObjectTable && );
	void IMachineGlobalObjectTable( IMachineGlobalObjectTable const & );
	void IMachineGlobalObjectTable();
	IMachineGlobalObjectTable & operator=( IMachineGlobalObjectTable && );
	IMachineGlobalObjectTable & operator=( IMachineGlobalObjectTable const & );
	/*0008*/
};

struct IMailUser : IMAPIProp {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	void IMailUser( IMailUser && );
	void IMailUser( IMailUser const & );
	void IMailUser();
	IMailUser & operator=( IMailUser && );
	IMailUser & operator=( IMailUser const & );
	/*0008*/
};

struct IMalloc : IUnknown {
	/*0018*/ virtual void * Alloc( ULONGLONG ) = 0;
	/*0020*/ virtual void * Realloc( void * , ULONGLONG ) = 0;
	/*0028*/ virtual void Free( void * ) = 0;
	/*0030*/ virtual ULONGLONG GetSize( void * ) = 0;
	/*0038*/ virtual INT DidAlloc( void * ) = 0;
	/*0040*/ virtual void HeapMinimize() = 0;
	void IMalloc( IMalloc && );
	void IMalloc( IMalloc const & );
	void IMalloc();
	IMalloc & operator=( IMalloc && );
	IMalloc & operator=( IMalloc const & );
	/*0008*/
};

struct IMallocSpy : IUnknown {
	/*0018*/ virtual ULONGLONG PreAlloc( ULONGLONG ) = 0;
	/*0020*/ virtual void * PostAlloc( void * ) = 0;
	/*0028*/ virtual void * PreFree( void * , INT ) = 0;
	/*0030*/ virtual void PostFree( INT ) = 0;
	/*0038*/ virtual ULONGLONG PreRealloc( void * , ULONGLONG , void * * , INT ) = 0;
	/*0040*/ virtual void * PostRealloc( void * , INT ) = 0;
	/*0048*/ virtual void * PreGetSize( void * , INT ) = 0;
	/*0050*/ virtual ULONGLONG PostGetSize( ULONGLONG , INT ) = 0;
	/*0058*/ virtual void * PreDidAlloc( void * , INT ) = 0;
	/*0060*/ virtual INT PostDidAlloc( void * , INT , INT ) = 0;
	/*0068*/ virtual void PreHeapMinimize() = 0;
	/*0070*/ virtual void PostHeapMinimize() = 0;
	void IMallocSpy( IMallocSpy && );
	void IMallocSpy( IMallocSpy const & );
	void IMallocSpy();
	IMallocSpy & operator=( IMallocSpy && );
	IMallocSpy & operator=( IMallocSpy const & );
	/*0008*/
};

struct IMarshal : IUnknown {
	/*0018*/ virtual HRESULT GetUnmarshalClass( _GUID const & , void * , ULONG , void * , ULONG , _GUID * ) = 0;
	/*0020*/ virtual HRESULT GetMarshalSizeMax( _GUID const & , void * , ULONG , void * , ULONG , ULONG * ) = 0;
	/*0028*/ virtual HRESULT MarshalInterface( IStream * , _GUID const & , void * , ULONG , void * , ULONG ) = 0;
	/*0030*/ virtual HRESULT UnmarshalInterface( IStream * , _GUID const & , void * * ) = 0;
	/*0038*/ virtual HRESULT ReleaseMarshalData( IStream * ) = 0;
	/*0040*/ virtual HRESULT DisconnectObject( ULONG ) = 0;
	void IMarshal( IMarshal && );
	void IMarshal( IMarshal const & );
	void IMarshal();
	IMarshal & operator=( IMarshal && );
	IMarshal & operator=( IMarshal const & );
	/*0008*/
};

struct IMarshal2 : IMarshal {
	void IMarshal2( IMarshal2 && );
	void IMarshal2( IMarshal2 const & );
	void IMarshal2();
	IMarshal2 & operator=( IMarshal2 && );
	IMarshal2 & operator=( IMarshal2 const & );
	/*0008*/
};

struct IMarshalingStream : IStream {
	/*0070*/ virtual HRESULT GetMarshalingContextAttribute( CO_MARSHALING_CONTEXT_ATTRIBUTES , ULONGLONG * ) = 0;
	void IMarshalingStream( IMarshalingStream && );
	void IMarshalingStream( IMarshalingStream const & );
	void IMarshalingStream();
	IMarshalingStream & operator=( IMarshalingStream && );
	IMarshalingStream & operator=( IMarshalingStream const & );
	/*0008*/
};

struct IMenuBand : IUnknown {
	/*0018*/ virtual HRESULT IsMenuMessage( tagMSG * ) = 0;
	/*0020*/ virtual HRESULT TranslateMenuMessage( tagMSG * , LONGLONG * ) = 0;
	void IMenuBand( IMenuBand && );
	void IMenuBand( IMenuBand const & );
	void IMenuBand();
	IMenuBand & operator=( IMenuBand && );
	IMenuBand & operator=( IMenuBand const & );
	/*0008*/
};

struct IMenuPopup : IDeskBar {
	/*0040*/ virtual HRESULT Popup( _POINTL * , _RECTL * , INT ) = 0;
	/*0048*/ virtual HRESULT OnSelect( ULONG ) = 0;
	/*0050*/ virtual HRESULT SetSubMenu( IMenuPopup * , INT ) = 0;
	void IMenuPopup( IMenuPopup && );
	void IMenuPopup( IMenuPopup const & );
	void IMenuPopup();
	IMenuPopup & operator=( IMenuPopup && );
	IMenuPopup & operator=( IMenuPopup const & );
	/*0008*/
};

struct IMessage : IMAPIProp {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	/*0070*/ virtual HRESULT GetAttachmentTable( ULONG , IMAPITable * * ) = 0;
	/*0078*/ virtual HRESULT OpenAttach( ULONG , _GUID const * , ULONG , IAttach * * ) = 0;
	/*0080*/ virtual HRESULT CreateAttach( _GUID const * , ULONG , ULONG * , IAttach * * ) = 0;
	/*0088*/ virtual HRESULT DeleteAttach( ULONG , ULONG , IMAPIProgress * , ULONG ) = 0;
	/*0090*/ virtual HRESULT GetRecipientTable( ULONG , IMAPITable * * ) = 0;
	/*0098*/ virtual HRESULT ModifyRecipients( ULONG , _ADRLIST * ) = 0;
	/*00a0*/ virtual HRESULT SubmitMessage( ULONG ) = 0;
	/*00a8*/ virtual HRESULT SetReadFlag( ULONG ) = 0;
	void IMessage( IMessage && );
	void IMessage( IMessage const & );
	void IMessage();
	IMessage & operator=( IMessage && );
	IMessage & operator=( IMessage const & );
	/*0008*/
};

struct IMessageFilter : IUnknown {
	/*0018*/ virtual ULONG HandleInComingCall( ULONG , HTASK__ * , ULONG , tagINTERFACEINFO * ) = 0;
	/*0020*/ virtual ULONG RetryRejectedCall( HTASK__ * , ULONG , ULONG ) = 0;
	/*0028*/ virtual ULONG MessagePending( HTASK__ * , ULONG , ULONG ) = 0;
	void IMessageFilter( IMessageFilter && );
	void IMessageFilter( IMessageFilter const & );
	void IMessageFilter();
	IMessageFilter & operator=( IMessageFilter && );
	IMessageFilter & operator=( IMessageFilter const & );
	/*0008*/
};

struct IModalWindow : IUnknown {
	/*0018*/ virtual HRESULT Show( HWND__ * ) = 0;
	void IModalWindow( IModalWindow && );
	void IModalWindow( IModalWindow const & );
	void IModalWindow();
	IModalWindow & operator=( IModalWindow && );
	IModalWindow & operator=( IModalWindow const & );
	/*0008*/
};

struct IMoniker : IPersistStream {
	/*0040*/ virtual HRESULT BindToObject( IBindCtx * , IMoniker * , _GUID const & , void * * ) = 0;
	/*0048*/ virtual HRESULT BindToStorage( IBindCtx * , IMoniker * , _GUID const & , void * * ) = 0;
	/*0050*/ virtual HRESULT Reduce( IBindCtx * , ULONG , IMoniker * * , IMoniker * * ) = 0;
	/*0058*/ virtual HRESULT ComposeWith( IMoniker * , INT , IMoniker * * ) = 0;
	/*0060*/ virtual HRESULT Enum( INT , IEnumMoniker * * ) = 0;
	/*0068*/ virtual HRESULT IsEqual( IMoniker * ) = 0;
	/*0070*/ virtual HRESULT Hash( ULONG * ) = 0;
	/*0078*/ virtual HRESULT IsRunning( IBindCtx * , IMoniker * , IMoniker * ) = 0;
	/*0080*/ virtual HRESULT GetTimeOfLastChange( IBindCtx * , IMoniker * , _FILETIME * ) = 0;
	/*0088*/ virtual HRESULT Inverse( IMoniker * * ) = 0;
	/*0090*/ virtual HRESULT CommonPrefixWith( IMoniker * , IMoniker * * ) = 0;
	/*0098*/ virtual HRESULT RelativePathTo( IMoniker * , IMoniker * * ) = 0;
	/*00a0*/ virtual HRESULT GetDisplayName( IBindCtx * , IMoniker * , WCHAR * * ) = 0;
	/*00a8*/ virtual HRESULT ParseDisplayName( IBindCtx * , IMoniker * , WCHAR * , ULONG * , IMoniker * * ) = 0;
	/*00b0*/ virtual HRESULT IsSystemMoniker( ULONG * ) = 0;
	void IMoniker( IMoniker && );
	void IMoniker( IMoniker const & );
	void IMoniker();
	IMoniker & operator=( IMoniker && );
	IMoniker & operator=( IMoniker const & );
	/*0008*/
};

struct IMonikerProp : IUnknown {
	/*0018*/ virtual HRESULT PutProperty( __MIDL_IMonikerProp_0001 , WCHAR const * ) = 0;
	void IMonikerProp( IMonikerProp && );
	void IMonikerProp( IMonikerProp const & );
	void IMonikerProp();
	IMonikerProp & operator=( IMonikerProp && );
	IMonikerProp & operator=( IMonikerProp const & );
	/*0008*/
};

struct IMsgServiceAdmin : IUnknown {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*0018*/ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*0020*/ virtual HRESULT GetMsgServiceTable( ULONG , IMAPITable * * ) = 0;
	/*0028*/ virtual HRESULT CreateMsgService( WCHAR * , WCHAR * , ULONG , ULONG ) = 0;
	/*0030*/ virtual HRESULT DeleteMsgService( _MAPIUID * ) = 0;
	/*0038*/ virtual HRESULT CopyMsgService( _MAPIUID * , WCHAR * , _GUID const * , _GUID const * , void * , ULONG , ULONG ) = 0;
	/*0040*/ virtual HRESULT RenameMsgService( _MAPIUID * , ULONG , WCHAR * ) = 0;
	/*0048*/ virtual HRESULT ConfigureMsgService( _MAPIUID * , ULONG , ULONG , ULONG , _SPropValue * ) = 0;
	/*0050*/ virtual HRESULT OpenProfileSection( _MAPIUID * , _GUID const * , ULONG , IProfSect * * ) = 0;
	/*0058*/ virtual HRESULT MsgServiceTransportOrder( ULONG , _MAPIUID * , ULONG ) = 0;
	/*0060*/ virtual HRESULT AdminProviders( _MAPIUID * , ULONG , IProviderAdmin * * ) = 0;
	/*0068*/ virtual HRESULT SetPrimaryIdentity( _MAPIUID * , ULONG ) = 0;
	/*0070*/ virtual HRESULT GetProviderTable( ULONG , IMAPITable * * ) = 0;
	void IMsgServiceAdmin( IMsgServiceAdmin && );
	void IMsgServiceAdmin( IMsgServiceAdmin const & );
	void IMsgServiceAdmin();
	IMsgServiceAdmin & operator=( IMsgServiceAdmin && );
	IMsgServiceAdmin & operator=( IMsgServiceAdmin const & );
	/*0008*/
};

struct IMsgStore : IMAPIProp {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	/*0070*/ virtual HRESULT Advise( ULONG , ENTRYID * , ULONG , IMAPIAdviseSink * , ULONG * ) = 0;
	/*0078*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0080*/ virtual HRESULT CompareEntryIDs( ULONG , ENTRYID * , ULONG , ENTRYID * , ULONG , ULONG * ) = 0;
	/*0088*/ virtual HRESULT OpenEntry( ULONG , ENTRYID * , _GUID const * , ULONG , ULONG * , IUnknown * * ) = 0;
	/*0090*/ virtual HRESULT SetReceiveFolder( WCHAR * , ULONG , ULONG , ENTRYID * ) = 0;
	/*0098*/ virtual HRESULT GetReceiveFolder( WCHAR * , ULONG , ULONG * , ENTRYID * * , WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT GetReceiveFolderTable( ULONG , IMAPITable * * ) = 0;
	/*00a8*/ virtual HRESULT StoreLogoff( ULONG * ) = 0;
	/*00b0*/ virtual HRESULT AbortSubmit( ULONG , ENTRYID * , ULONG ) = 0;
	/*00b8*/ virtual HRESULT GetOutgoingQueue( ULONG , IMAPITable * * ) = 0;
	/*00c0*/ virtual HRESULT SetLockState( IMessage * , ULONG ) = 0;
	/*00c8*/ virtual HRESULT FinishedMsg( ULONG , ULONG , ENTRYID * ) = 0;
	/*00d0*/ virtual HRESULT NotifyNewMail( _NOTIFICATION * ) = 0;
	void IMsgStore( IMsgStore && );
	void IMsgStore( IMsgStore const & );
	void IMsgStore();
	IMsgStore & operator=( IMsgStore && );
	IMsgStore & operator=( IMsgStore const & );
	/*0008*/
};

struct IMultiQI : IUnknown {
	/*0018*/ virtual HRESULT QueryMultipleInterfaces( ULONG , tagMULTI_QI * ) = 0;
	void IMultiQI( IMultiQI && );
	void IMultiQI( IMultiQI const & );
	void IMultiQI();
	IMultiQI & operator=( IMultiQI && );
	IMultiQI & operator=( IMultiQI const & );
	/*0008*/
};

enum INPUTDELEGATION_MODE_FLAGS {
	IDLM_OFF = 0x0,
	IDLM_KEYBOARD = 0x1,
	IDLM_SPATIAL = 0x2,
	IDLM_VALID_FLAGS = 0x3
};

enum INPUT_DESTINATION_IDENTITY {
	IDID_NONE = 0x0,
	IDID_LUID = 0x1,
	IDID_INPUTROUTINGINFO = 0x2,
	IDID_WINDOW = 0x4
};

enum INPUT_DESTINATION_ROUTING_MODE {
	IDRM_DEFAULT = 0x0,
	IDRM_OBSERVE = 0x1,
	IDRM_ISM = 0x2,
	IDRM_ROUTE_TO_MT = 0x3
};

enum INTERNET_SCHEME {
	INTERNET_SCHEME_PARTIAL = 0xfffffffe,
	INTERNET_SCHEME_UNKNOWN = 0xffffffff,
	INTERNET_SCHEME_DEFAULT = 0x0,
	INTERNET_SCHEME_FTP = 0x1,
	INTERNET_SCHEME_GOPHER = 0x2,
	INTERNET_SCHEME_HTTP = 0x3,
	INTERNET_SCHEME_HTTPS = 0x4,
	INTERNET_SCHEME_FILE = 0x5,
	INTERNET_SCHEME_NEWS = 0x6,
	INTERNET_SCHEME_MAILTO = 0x7,
	INTERNET_SCHEME_SOCKS = 0x8,
	INTERNET_SCHEME_JAVASCRIPT = 0x9,
	INTERNET_SCHEME_VBSCRIPT = 0xa,
	INTERNET_SCHEME_RES = 0xb,
	INTERNET_SCHEME_FIRST = 0x1,
	INTERNET_SCHEME_LAST = 0xb
};

struct INameSpaceTreeControl : IUnknown {
	/*0018*/ virtual HRESULT Initialize( HWND__ * , tagRECT * , ULONG ) = 0;
	/*0020*/ virtual HRESULT TreeAdvise( IUnknown * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT TreeUnadvise( ULONG ) = 0;
	/*0030*/ virtual HRESULT AppendRoot( IShellItem * , ULONG , ULONG , IShellItemFilter * ) = 0;
	/*0038*/ virtual HRESULT InsertRoot( INT , IShellItem * , ULONG , ULONG , IShellItemFilter * ) = 0;
	/*0040*/ virtual HRESULT RemoveRoot( IShellItem * ) = 0;
	/*0048*/ virtual HRESULT RemoveAllRoots() = 0;
	/*0050*/ virtual HRESULT GetRootItems( IShellItemArray * * ) = 0;
	/*0058*/ virtual HRESULT SetItemState( IShellItem * , ULONG , ULONG ) = 0;
	/*0060*/ virtual HRESULT GetItemState( IShellItem * , ULONG , ULONG * ) = 0;
	/*0068*/ virtual HRESULT GetSelectedItems( IShellItemArray * * ) = 0;
	/*0070*/ virtual HRESULT GetItemCustomState( IShellItem * , INT * ) = 0;
	/*0078*/ virtual HRESULT SetItemCustomState( IShellItem * , INT ) = 0;
	/*0080*/ virtual HRESULT EnsureItemVisible( IShellItem * ) = 0;
	/*0088*/ virtual HRESULT SetTheme( WCHAR const * ) = 0;
	/*0090*/ virtual HRESULT GetNextItem( IShellItem * , NSTCGNI , IShellItem * * ) = 0;
	/*0098*/ virtual HRESULT HitTest( tagPOINT * , IShellItem * * ) = 0;
	/*00a0*/ virtual HRESULT GetItemRect( IShellItem * , tagRECT * ) = 0;
	/*00a8*/ virtual HRESULT CollapseAll() = 0;
	void INameSpaceTreeControl( INameSpaceTreeControl && );
	void INameSpaceTreeControl( INameSpaceTreeControl const & );
	void INameSpaceTreeControl();
	INameSpaceTreeControl & operator=( INameSpaceTreeControl && );
	INameSpaceTreeControl & operator=( INameSpaceTreeControl const & );
	/*0008*/
};

struct INameSpaceTreeControlFolderCapabilities : IUnknown {
	/*0018*/ virtual HRESULT GetFolderCapabilities( NSTCFOLDERCAPABILITIES , NSTCFOLDERCAPABILITIES * ) = 0;
	void INameSpaceTreeControlFolderCapabilities( INameSpaceTreeControlFolderCapabilities && );
	void INameSpaceTreeControlFolderCapabilities( INameSpaceTreeControlFolderCapabilities const & );
	void INameSpaceTreeControlFolderCapabilities();
	INameSpaceTreeControlFolderCapabilities & operator=( INameSpaceTreeControlFolderCapabilities && );
	INameSpaceTreeControlFolderCapabilities & operator=( INameSpaceTreeControlFolderCapabilities const & );
	/*0008*/
};

struct INamedPropertyStore : IUnknown {
	/*0018*/ virtual HRESULT GetNamedValue( WCHAR const * , tagPROPVARIANT * ) = 0;
	/*0020*/ virtual HRESULT SetNamedValue( WCHAR const * , tagPROPVARIANT const & ) = 0;
	/*0028*/ virtual HRESULT GetNameCount( ULONG * ) = 0;
	/*0030*/ virtual HRESULT GetNameAt( ULONG , WCHAR * * ) = 0;
	void INamedPropertyStore( INamedPropertyStore && );
	void INamedPropertyStore( INamedPropertyStore const & );
	void INamedPropertyStore();
	INamedPropertyStore & operator=( INamedPropertyStore && );
	INamedPropertyStore & operator=( INamedPropertyStore const & );
	/*0008*/
};

struct INamespaceWalk : IUnknown {
	/*0018*/ virtual HRESULT Walk( IUnknown * , ULONG , INT , INamespaceWalkCB * ) = 0;
	/*0020*/ virtual HRESULT GetIDArrayResult( UINT * , _ITEMIDLIST __unaligned * * * ) = 0;
	void INamespaceWalk( INamespaceWalk && );
	void INamespaceWalk( INamespaceWalk const & );
	void INamespaceWalk();
	INamespaceWalk & operator=( INamespaceWalk && );
	INamespaceWalk & operator=( INamespaceWalk const & );
	/*0008*/
};

struct INamespaceWalkCB : IUnknown {
	/*0018*/ virtual HRESULT FoundItem( IShellFolder * , _ITEMIDLIST const __unaligned * ) = 0;
	/*0020*/ virtual HRESULT EnterFolder( IShellFolder * , _ITEMIDLIST const __unaligned * ) = 0;
	/*0028*/ virtual HRESULT LeaveFolder( IShellFolder * , _ITEMIDLIST const __unaligned * ) = 0;
	/*0030*/ virtual HRESULT InitializeProgressDialog( WCHAR * * , WCHAR * * ) = 0;
	void INamespaceWalkCB( INamespaceWalkCB && );
	void INamespaceWalkCB( INamespaceWalkCB const & );
	void INamespaceWalkCB();
	INamespaceWalkCB & operator=( INamespaceWalkCB && );
	INamespaceWalkCB & operator=( INamespaceWalkCB const & );
	/*0008*/
};

struct INamespaceWalkCB2 : INamespaceWalkCB {
	/*0038*/ virtual HRESULT WalkComplete( HRESULT ) = 0;
	void INamespaceWalkCB2( INamespaceWalkCB2 && );
	void INamespaceWalkCB2( INamespaceWalkCB2 const & );
	void INamespaceWalkCB2();
	INamespaceWalkCB2 & operator=( INamespaceWalkCB2 && );
	INamespaceWalkCB2 & operator=( INamespaceWalkCB2 const & );
	/*0008*/
};

struct INetCfg : IUnknown {
	/*0018*/ virtual HRESULT Initialize( void * ) = 0;
	/*0020*/ virtual HRESULT Uninitialize() = 0;
	/*0028*/ virtual HRESULT Apply() = 0;
	/*0030*/ virtual HRESULT Cancel() = 0;
	/*0038*/ virtual HRESULT EnumComponents( _GUID const * , IEnumNetCfgComponent * * ) = 0;
	/*0040*/ virtual HRESULT FindComponent( WCHAR const * , INetCfgComponent * * ) = 0;
	/*0048*/ virtual HRESULT QueryNetCfgClass( _GUID const * , _GUID const & , void * * ) = 0;
	void INetCfg( INetCfg && );
	void INetCfg( INetCfg const & );
	void INetCfg();
	INetCfg & operator=( INetCfg && );
	INetCfg & operator=( INetCfg const & );
	/*0008*/
};

struct INetCfgBindingInterface : IUnknown {
	/*0018*/ virtual HRESULT GetName( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetUpperComponent( INetCfgComponent * * ) = 0;
	/*0028*/ virtual HRESULT GetLowerComponent( INetCfgComponent * * ) = 0;
	void INetCfgBindingInterface( INetCfgBindingInterface && );
	void INetCfgBindingInterface( INetCfgBindingInterface const & );
	void INetCfgBindingInterface();
	INetCfgBindingInterface & operator=( INetCfgBindingInterface && );
	INetCfgBindingInterface & operator=( INetCfgBindingInterface const & );
	/*0008*/
};

struct INetCfgBindingPath : IUnknown {
	/*0018*/ virtual HRESULT IsSamePathAs( INetCfgBindingPath * ) = 0;
	/*0020*/ virtual HRESULT IsSubPathOf( INetCfgBindingPath * ) = 0;
	/*0028*/ virtual HRESULT IsEnabled() = 0;
	/*0030*/ virtual HRESULT Enable( INT ) = 0;
	/*0038*/ virtual HRESULT GetPathToken( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT GetOwner( INetCfgComponent * * ) = 0;
	/*0048*/ virtual HRESULT GetDepth( ULONG * ) = 0;
	/*0050*/ virtual HRESULT EnumBindingInterfaces( IEnumNetCfgBindingInterface * * ) = 0;
	void INetCfgBindingPath( INetCfgBindingPath && );
	void INetCfgBindingPath( INetCfgBindingPath const & );
	void INetCfgBindingPath();
	INetCfgBindingPath & operator=( INetCfgBindingPath && );
	INetCfgBindingPath & operator=( INetCfgBindingPath const & );
	/*0008*/
};

struct INetCfgClass : IUnknown {
	/*0018*/ virtual HRESULT FindComponent( WCHAR const * , INetCfgComponent * * ) = 0;
	/*0020*/ virtual HRESULT EnumComponents( IEnumNetCfgComponent * * ) = 0;
	void INetCfgClass( INetCfgClass && );
	void INetCfgClass( INetCfgClass const & );
	void INetCfgClass();
	INetCfgClass & operator=( INetCfgClass && );
	INetCfgClass & operator=( INetCfgClass const & );
	/*0008*/
};

struct INetCfgClassSetup : IUnknown {
	/*0018*/ virtual HRESULT SelectAndInstall( HWND__ * , tagOBO_TOKEN * , INetCfgComponent * * ) = 0;
	/*0020*/ virtual HRESULT Install( WCHAR const * , tagOBO_TOKEN * , ULONG , ULONG , WCHAR const * , WCHAR const * , INetCfgComponent * * ) = 0;
	/*0028*/ virtual HRESULT DeInstall( INetCfgComponent * , tagOBO_TOKEN * , WCHAR * * ) = 0;
	void INetCfgClassSetup( INetCfgClassSetup && );
	void INetCfgClassSetup( INetCfgClassSetup const & );
	void INetCfgClassSetup();
	INetCfgClassSetup & operator=( INetCfgClassSetup && );
	INetCfgClassSetup & operator=( INetCfgClassSetup const & );
	/*0008*/
};

struct INetCfgClassSetup2 : INetCfgClassSetup {
	/*0030*/ virtual HRESULT UpdateNonEnumeratedComponent( INetCfgComponent * , ULONG , ULONG ) = 0;
	void INetCfgClassSetup2( INetCfgClassSetup2 && );
	void INetCfgClassSetup2( INetCfgClassSetup2 const & );
	void INetCfgClassSetup2();
	INetCfgClassSetup2 & operator=( INetCfgClassSetup2 && );
	INetCfgClassSetup2 & operator=( INetCfgClassSetup2 const & );
	/*0008*/
};

struct INetCfgClassSetupDirect : IUnknown {
	/*0018*/ virtual HRESULT InstallDirect( tagNETCFG_INSTALL_PARAMETERS * , tagOBO_TOKEN * , INetCfgComponent * * ) = 0;
	void INetCfgClassSetupDirect( INetCfgClassSetupDirect && );
	void INetCfgClassSetupDirect( INetCfgClassSetupDirect const & );
	void INetCfgClassSetupDirect();
	INetCfgClassSetupDirect & operator=( INetCfgClassSetupDirect && );
	INetCfgClassSetupDirect & operator=( INetCfgClassSetupDirect const & );
	/*0008*/
};

struct INetCfgComponent : IUnknown {
	/*0018*/ virtual HRESULT GetDisplayName( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT SetDisplayName( WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT GetHelpText( WCHAR * * ) = 0;
	/*0030*/ virtual HRESULT GetId( WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT GetCharacteristics( ULONG * ) = 0;
	/*0040*/ virtual HRESULT GetInstanceGuid( _GUID * ) = 0;
	/*0048*/ virtual HRESULT GetPnpDevNodeId( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT GetClassGuid( _GUID * ) = 0;
	/*0058*/ virtual HRESULT GetBindName( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT GetDeviceStatus( ULONG * ) = 0;
	/*0068*/ virtual HRESULT OpenParamKey( HKEY__ * * ) = 0;
	/*0070*/ virtual HRESULT RaisePropertyUi( HWND__ * , ULONG , IUnknown * ) = 0;
	void INetCfgComponent( INetCfgComponent && );
	void INetCfgComponent( INetCfgComponent const & );
	void INetCfgComponent();
	INetCfgComponent & operator=( INetCfgComponent && );
	INetCfgComponent & operator=( INetCfgComponent const & );
	/*0008*/
};

struct INetCfgComponentBindings : IUnknown {
	/*0018*/ virtual HRESULT BindTo( INetCfgComponent * ) = 0;
	/*0020*/ virtual HRESULT UnbindFrom( INetCfgComponent * ) = 0;
	/*0028*/ virtual HRESULT SupportsBindingInterface( ULONG , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT IsBoundTo( INetCfgComponent * ) = 0;
	/*0038*/ virtual HRESULT IsBindableTo( INetCfgComponent * ) = 0;
	/*0040*/ virtual HRESULT EnumBindingPaths( ULONG , IEnumNetCfgBindingPath * * ) = 0;
	/*0048*/ virtual HRESULT MoveBefore( INetCfgBindingPath * , INetCfgBindingPath * ) = 0;
	/*0050*/ virtual HRESULT MoveAfter( INetCfgBindingPath * , INetCfgBindingPath * ) = 0;
	void INetCfgComponentBindings( INetCfgComponentBindings && );
	void INetCfgComponentBindings( INetCfgComponentBindings const & );
	void INetCfgComponentBindings();
	INetCfgComponentBindings & operator=( INetCfgComponentBindings && );
	INetCfgComponentBindings & operator=( INetCfgComponentBindings const & );
	/*0008*/
};

struct INetCfgComponentFilterBindings : IUnknown {
	/*0018*/ virtual HRESULT EnumFilterBindingPaths( IEnumNetCfgBindingPath * * ) = 0;
	/*0020*/ virtual HRESULT MoveFilterBefore( INetCfgBindingPath * , INetCfgBindingPath * ) = 0;
	/*0028*/ virtual HRESULT MoveFilterAfter( INetCfgBindingPath * , INetCfgBindingPath * ) = 0;
	/*0030*/ virtual HRESULT GetFilterClass( WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT IsModifyingFilter( INT * ) = 0;
	/*0040*/ virtual HRESULT IsMandatoryFilter( INT * ) = 0;
	/*0048*/ virtual HRESULT GetFilterMediaTypes( WCHAR * * ) = 0;
	void INetCfgComponentFilterBindings( INetCfgComponentFilterBindings && );
	void INetCfgComponentFilterBindings( INetCfgComponentFilterBindings const & );
	void INetCfgComponentFilterBindings();
	INetCfgComponentFilterBindings & operator=( INetCfgComponentFilterBindings && );
	INetCfgComponentFilterBindings & operator=( INetCfgComponentFilterBindings const & );
	/*0008*/
};

struct INetCfgComponentPrivate : IUnknown {
	/*0018*/ virtual HRESULT QueryNotifyObject( _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT SetDirty() = 0;
	/*0028*/ virtual HRESULT NotifyUpperEdgeConfigChange() = 0;
	void INetCfgComponentPrivate( INetCfgComponentPrivate && );
	void INetCfgComponentPrivate( INetCfgComponentPrivate const & );
	void INetCfgComponentPrivate();
	INetCfgComponentPrivate & operator=( INetCfgComponentPrivate && );
	INetCfgComponentPrivate & operator=( INetCfgComponentPrivate const & );
	/*0008*/
};

struct INetCfgComponentReadOnly : IUnknown {
	/*0018*/ virtual HRESULT OpenParamKeyReadOnly( HKEY__ * * ) = 0;
	void INetCfgComponentReadOnly( INetCfgComponentReadOnly && );
	void INetCfgComponentReadOnly( INetCfgComponentReadOnly const & );
	void INetCfgComponentReadOnly();
	INetCfgComponentReadOnly & operator=( INetCfgComponentReadOnly && );
	INetCfgComponentReadOnly & operator=( INetCfgComponentReadOnly const & );
	/*0008*/
};

struct INetCfgInternalSetup : IUnknown {
	/*0018*/ virtual HRESULT BeginBatchOperation() = 0;
	/*0020*/ virtual HRESULT CommitBatchOperation() = 0;
	/*0028*/ virtual HRESULT SelectWithFilterAndInstall( HWND__ * , _GUID const * , tagOBO_TOKEN * , tagCI_FILTER_INFO const * , INetCfgComponent * * ) = 0;
	/*0030*/ virtual HRESULT EnumeratedComponentInstalled( void * ) = 0;
	/*0038*/ virtual HRESULT EnumeratedComponentUpdated( _GUID const * ) = 0;
	/*0040*/ virtual HRESULT UpdateNonEnumeratedComponent( INetCfgComponent * , ULONG , ULONG ) = 0;
	/*0048*/ virtual HRESULT EnumeratedComponentRemoved( _GUID const * ) = 0;
	void INetCfgInternalSetup( INetCfgInternalSetup && );
	void INetCfgInternalSetup( INetCfgInternalSetup const & );
	void INetCfgInternalSetup();
	INetCfgInternalSetup & operator=( INetCfgInternalSetup && );
	INetCfgInternalSetup & operator=( INetCfgInternalSetup const & );
	/*0008*/
};

struct INetCfgLock : IUnknown {
	/*0018*/ virtual HRESULT AcquireWriteLock( ULONG , WCHAR const * , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT ReleaseWriteLock() = 0;
	/*0028*/ virtual HRESULT IsWriteLocked( WCHAR * * ) = 0;
	void INetCfgLock( INetCfgLock && );
	void INetCfgLock( INetCfgLock const & );
	void INetCfgLock();
	INetCfgLock & operator=( INetCfgLock && );
	INetCfgLock & operator=( INetCfgLock const & );
	/*0008*/
};

struct INetCfgSpecialCase : IUnknown {
	/*0018*/ virtual HRESULT GetAdapterOrder( ULONG * , INetCfgComponent * * * , INT * ) = 0;
	/*0020*/ virtual HRESULT SetAdapterOrder( ULONG , INetCfgComponent * * , INT ) = 0;
	/*0028*/ virtual HRESULT GetWanAdaptersFirst( INT * ) = 0;
	/*0030*/ virtual HRESULT SetWanAdaptersFirst( INT ) = 0;
	void INetCfgSpecialCase( INetCfgSpecialCase && );
	void INetCfgSpecialCase( INetCfgSpecialCase const & );
	void INetCfgSpecialCase();
	INetCfgSpecialCase & operator=( INetCfgSpecialCase && );
	INetCfgSpecialCase & operator=( INetCfgSpecialCase const & );
	/*0008*/
};

struct INetCfgSysPrep : IUnknown {
	/*0018*/ virtual HRESULT HrSetupSetFirstDword( WCHAR const * , WCHAR const * , ULONG ) = 0;
	/*0020*/ virtual HRESULT HrSetupSetFirstString( WCHAR const * , WCHAR const * , WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT HrSetupSetFirstStringAsBool( WCHAR const * , WCHAR const * , INT ) = 0;
	/*0030*/ virtual HRESULT HrSetupSetFirstMultiSzField( WCHAR const * , WCHAR const * , WCHAR const * ) = 0;
	void INetCfgSysPrep( INetCfgSysPrep && );
	void INetCfgSysPrep( INetCfgSysPrep const & );
	void INetCfgSysPrep();
	INetCfgSysPrep & operator=( INetCfgSysPrep && );
	INetCfgSysPrep & operator=( INetCfgSysPrep const & );
	/*0008*/
};

struct INetConnection : IUnknown {
	/*0018*/ virtual HRESULT Connect() = 0;
	/*0020*/ virtual HRESULT Disconnect() = 0;
	/*0028*/ virtual HRESULT Delete() = 0;
	/*0030*/ virtual HRESULT Duplicate( WCHAR const * , INetConnection * * ) = 0;
	/*0038*/ virtual HRESULT GetProperties( tagNETCON_PROPERTIES * * ) = 0;
	/*0040*/ virtual HRESULT GetUiObjectClassId( _GUID * ) = 0;
	/*0048*/ virtual HRESULT Rename( WCHAR const * ) = 0;
	void INetConnection( INetConnection && );
	void INetConnection( INetConnection const & );
	void INetConnection();
	INetConnection & operator=( INetConnection && );
	INetConnection & operator=( INetConnection const & );
	/*0008*/
};

struct INetConnection2 : IUnknown {
	/*0018*/ virtual HRESULT GetPropertiesEx( tagNETCON_PROPERTIES_EX * * ) = 0;
	void INetConnection2( INetConnection2 && );
	void INetConnection2( INetConnection2 const & );
	void INetConnection2();
	INetConnection2 & operator=( INetConnection2 && );
	INetConnection2 & operator=( INetConnection2 const & );
	/*0008*/
};

struct INetConnectionBrandingInfo : IUnknown {
	/*0018*/ virtual HRESULT GetBrandingIconPaths( tagCON_BRANDING_INFO * * ) = 0;
	void INetConnectionBrandingInfo( INetConnectionBrandingInfo && );
	void INetConnectionBrandingInfo( INetConnectionBrandingInfo const & );
	void INetConnectionBrandingInfo();
	INetConnectionBrandingInfo & operator=( INetConnectionBrandingInfo && );
	INetConnectionBrandingInfo & operator=( INetConnectionBrandingInfo const & );
	/*0008*/
};

struct INetConnectionCMUtil : IUnknown {
	/*0018*/ virtual HRESULT MapCMHiddenConnectionToOwner( _GUID const & , _GUID * ) = 0;
	void INetConnectionCMUtil( INetConnectionCMUtil && );
	void INetConnectionCMUtil( INetConnectionCMUtil const & );
	void INetConnectionCMUtil();
	INetConnectionCMUtil & operator=( INetConnectionCMUtil && );
	INetConnectionCMUtil & operator=( INetConnectionCMUtil const & );
	/*0008*/
};

struct INetConnectionCommonUi : IUnknown {
	/*0018*/ virtual HRESULT ChooseConnection( tagNETCON_CHOOSECONN * , INetConnection * * ) = 0;
	/*0020*/ virtual HRESULT ShowConnectionProperties( HWND__ * , INetConnection * ) = 0;
	/*0028*/ virtual HRESULT StartNewConnectionWizard( HWND__ * , INetConnection * * ) = 0;
	void INetConnectionCommonUi( INetConnectionCommonUi && );
	void INetConnectionCommonUi( INetConnectionCommonUi const & );
	void INetConnectionCommonUi();
	INetConnectionCommonUi & operator=( INetConnectionCommonUi && );
	INetConnectionCommonUi & operator=( INetConnectionCommonUi const & );
	/*0008*/
};

struct INetConnectionCommonUi2 : INetConnectionCommonUi {
	/*0030*/ virtual HRESULT SetPropertiesStartPage( ULONG ) = 0;
	void INetConnectionCommonUi2( INetConnectionCommonUi2 && );
	void INetConnectionCommonUi2( INetConnectionCommonUi2 const & );
	void INetConnectionCommonUi2();
	INetConnectionCommonUi2 & operator=( INetConnectionCommonUi2 && );
	INetConnectionCommonUi2 & operator=( INetConnectionCommonUi2 const & );
	/*0008*/
};

struct INetConnectionConnectUi : IUnknown {
	/*0018*/ virtual HRESULT SetConnection( INetConnection * ) = 0;
	/*0020*/ virtual HRESULT Connect( HWND__ * , ULONG ) = 0;
	/*0028*/ virtual HRESULT Disconnect( HWND__ * , ULONG ) = 0;
	void INetConnectionConnectUi( INetConnectionConnectUi && );
	void INetConnectionConnectUi( INetConnectionConnectUi const & );
	void INetConnectionConnectUi();
	INetConnectionConnectUi & operator=( INetConnectionConnectUi && );
	INetConnectionConnectUi & operator=( INetConnectionConnectUi const & );
	/*0008*/
};

struct INetConnectionHNetUtil : IUnknown {
	/*0018*/ virtual HRESULT NotifyUpdate() = 0;
	void INetConnectionHNetUtil( INetConnectionHNetUtil && );
	void INetConnectionHNetUtil( INetConnectionHNetUtil const & );
	void INetConnectionHNetUtil();
	INetConnectionHNetUtil & operator=( INetConnectionHNetUtil && );
	INetConnectionHNetUtil & operator=( INetConnectionHNetUtil const & );
	/*0008*/
};

struct INetConnectionManager : IUnknown {
	/*0018*/ virtual HRESULT EnumConnections( tagNETCONMGR_ENUM_FLAGS , IEnumNetConnection * * ) = 0;
	void INetConnectionManager( INetConnectionManager && );
	void INetConnectionManager( INetConnectionManager const & );
	void INetConnectionManager();
	INetConnectionManager & operator=( INetConnectionManager && );
	INetConnectionManager & operator=( INetConnectionManager const & );
	/*0008*/
};

struct INetConnectionManager2 : IUnknown {
	/*0018*/ virtual HRESULT EnumConnectionProperties( tagSAFEARRAY * * ) = 0;
	void INetConnectionManager2( INetConnectionManager2 && );
	void INetConnectionManager2( INetConnectionManager2 const & );
	void INetConnectionManager2();
	INetConnectionManager2 & operator=( INetConnectionManager2 && );
	INetConnectionManager2 & operator=( INetConnectionManager2 const & );
	/*0008*/
};

struct INetConnectionManager3 : IUnknown {
	/*0018*/ virtual HRESULT CreateINetConnection( _GUID const & , INetConnection * * ) = 0;
	void INetConnectionManager3( INetConnectionManager3 && );
	void INetConnectionManager3( INetConnectionManager3 const & );
	void INetConnectionManager3();
	INetConnectionManager3 & operator=( INetConnectionManager3 && );
	INetConnectionManager3 & operator=( INetConnectionManager3 const & );
	/*0008*/
};

struct INetConnectionManagerDebug : IUnknown {
	/*0018*/ virtual HRESULT NotifyTestStart() = 0;
	/*0020*/ virtual HRESULT NotifyTestStop() = 0;
	void INetConnectionManagerDebug( INetConnectionManagerDebug && );
	void INetConnectionManagerDebug( INetConnectionManagerDebug const & );
	void INetConnectionManagerDebug();
	INetConnectionManagerDebug & operator=( INetConnectionManagerDebug && );
	INetConnectionManagerDebug & operator=( INetConnectionManagerDebug const & );
	/*0008*/
};

struct INetConnectionManagerEvents : IUnknown {
	/*0018*/ virtual HRESULT RefreshConnections() = 0;
	/*0020*/ virtual HRESULT Enable() = 0;
	/*0028*/ virtual HRESULT Disable( ULONG ) = 0;
	void INetConnectionManagerEvents( INetConnectionManagerEvents && );
	void INetConnectionManagerEvents( INetConnectionManagerEvents const & );
	void INetConnectionManagerEvents();
	INetConnectionManagerEvents & operator=( INetConnectionManagerEvents && );
	INetConnectionManagerEvents & operator=( INetConnectionManagerEvents const & );
	/*0008*/
};

struct INetConnectionNotifySink : IUnknown {
	/*0018*/ virtual HRESULT ConnectionAdded( tagNETCON_PROPERTIES_EX const * ) = 0;
	/*0020*/ virtual HRESULT ConnectionBandWidthChange( _GUID const * ) = 0;
	/*0028*/ virtual HRESULT ConnectionDeleted( _GUID const * ) = 0;
	/*0030*/ virtual HRESULT ConnectionModified( tagNETCON_PROPERTIES_EX const * ) = 0;
	/*0038*/ virtual HRESULT ConnectionRenamed( _GUID const * , WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT ConnectionStatusChange( _GUID const * , tagNETCON_STATUS ) = 0;
	/*0048*/ virtual HRESULT RefreshAll() = 0;
	/*0050*/ virtual HRESULT ConnectionAddressChange( _GUID const * ) = 0;
	/*0058*/ virtual HRESULT ShowBalloon( _GUID const * , WCHAR * const , WCHAR * const ) = 0;
	/*0060*/ virtual HRESULT DisableEvents( INT const , ULONG const ) = 0;
	void INetConnectionNotifySink( INetConnectionNotifySink && );
	void INetConnectionNotifySink( INetConnectionNotifySink const & );
	void INetConnectionNotifySink();
	INetConnectionNotifySink & operator=( INetConnectionNotifySink && );
	INetConnectionNotifySink & operator=( INetConnectionNotifySink const & );
	/*0008*/
};

struct INetConnectionPropertyUi : IUnknown {
	/*0018*/ virtual HRESULT SetConnection( INetConnection * ) = 0;
	/*0020*/ virtual HRESULT AddPages( HWND__ * , INT (* )( _PSP * , LONGLONG ), LONGLONG ) = 0;
	void INetConnectionPropertyUi( INetConnectionPropertyUi && );
	void INetConnectionPropertyUi( INetConnectionPropertyUi const & );
	void INetConnectionPropertyUi();
	INetConnectionPropertyUi & operator=( INetConnectionPropertyUi && );
	INetConnectionPropertyUi & operator=( INetConnectionPropertyUi const & );
	/*0008*/
};

struct INetConnectionPropertyUi2 : INetConnectionPropertyUi {
	/*0028*/ virtual HRESULT GetIcon( ULONG , HICON__ * * ) = 0;
	void INetConnectionPropertyUi2( INetConnectionPropertyUi2 && );
	void INetConnectionPropertyUi2( INetConnectionPropertyUi2 const & );
	void INetConnectionPropertyUi2();
	INetConnectionPropertyUi2 & operator=( INetConnectionPropertyUi2 && );
	INetConnectionPropertyUi2 & operator=( INetConnectionPropertyUi2 const & );
	/*0008*/
};

struct INetConnectionProps : IDispatch {
	/*0038*/ virtual HRESULT get_Guid( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT get_Name( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT get_DeviceName( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT get_Status( tagNETCON_STATUS * ) = 0;
	/*0058*/ virtual HRESULT get_MediaType( tagNETCON_MEDIATYPE * ) = 0;
	/*0060*/ virtual HRESULT get_Characteristics( ULONG * ) = 0;
	void INetConnectionProps( INetConnectionProps && );
	void INetConnectionProps( INetConnectionProps const & );
	void INetConnectionProps();
	INetConnectionProps & operator=( INetConnectionProps && );
	INetConnectionProps & operator=( INetConnectionProps const & );
	/*0008*/
};

struct INetConnectionRefresh : IUnknown {
	/*0018*/ virtual HRESULT RefreshAll() = 0;
	/*0020*/ virtual HRESULT ConnectionAdded( INetConnection * ) = 0;
	/*0028*/ virtual HRESULT ConnectionDeleted( _GUID const * ) = 0;
	/*0030*/ virtual HRESULT ConnectionModified( INetConnection * ) = 0;
	/*0038*/ virtual HRESULT ConnectionRenamed( INetConnection * ) = 0;
	/*0040*/ virtual HRESULT ConnectionStatusChanged( _GUID const * , tagNETCON_STATUS const ) = 0;
	/*0048*/ virtual HRESULT ShowBalloon( _GUID const * , WCHAR * const , WCHAR * const ) = 0;
	/*0050*/ virtual HRESULT DisableEvents( INT const , ULONG const ) = 0;
	/*0058*/ virtual HRESULT MediaUiRequest( ULONG , _GUID const * , _GUID const * , WCHAR * const ) = 0;
	void INetConnectionRefresh( INetConnectionRefresh && );
	void INetConnectionRefresh( INetConnectionRefresh const & );
	void INetConnectionRefresh();
	INetConnectionRefresh & operator=( INetConnectionRefresh && );
	INetConnectionRefresh & operator=( INetConnectionRefresh const & );
	/*0008*/
};

struct INetConnectionUiLock : IUnknown {
	/*0018*/ virtual HRESULT QueryLock( WCHAR * * ) = 0;
	void INetConnectionUiLock( INetConnectionUiLock && );
	void INetConnectionUiLock( INetConnectionUiLock const & );
	void INetConnectionUiLock();
	INetConnectionUiLock & operator=( INetConnectionUiLock && );
	INetConnectionUiLock & operator=( INetConnectionUiLock const & );
	/*0008*/
};

struct INetConnectionUiUtilities : IUnknown {
	/*0018*/ virtual HRESULT QueryUserAndRemoveComponent( HWND__ * , INetCfg * , INetCfgComponent * ) = 0;
	/*0020*/ virtual HRESULT QueryUserForReboot( HWND__ * , WCHAR const * , ULONG ) = 0;
	/*0028*/ virtual HRESULT DisplayAddComponentDialog( HWND__ * , INetCfg * , tagCI_FILTER_INFO * ) = 0;
	/*0030*/ virtual INT UserHasPermission( ULONG ) = 0;
	void INetConnectionUiUtilities( INetConnectionUiUtilities && );
	void INetConnectionUiUtilities( INetConnectionUiUtilities const & );
	void INetConnectionUiUtilities();
	INetConnectionUiUtilities & operator=( INetConnectionUiUtilities && );
	INetConnectionUiUtilities & operator=( INetConnectionUiUtilities const & );
	/*0008*/
};

struct INetDefaultConnection : IUnknown {
	/*0018*/ virtual HRESULT SetDefault( INT ) = 0;
	/*0020*/ virtual HRESULT GetDefault( INT * ) = 0;
	void INetDefaultConnection( INetDefaultConnection && );
	void INetDefaultConnection( INetDefaultConnection const & );
	void INetDefaultConnection();
	INetDefaultConnection & operator=( INetDefaultConnection && );
	INetDefaultConnection & operator=( INetDefaultConnection const & );
	/*0008*/
};

struct INetDialog : IUnknown {
	/*0018*/ virtual HRESULT ShowDialog( HWND__ * ) = 0;
	void INetDialog( INetDialog && );
	void INetDialog( INetDialog const & );
	void INetDialog();
	INetDialog & operator=( INetDialog && );
	INetDialog & operator=( INetDialog const & );
	/*0008*/
};

struct INetInboundConnection : IUnknown {
	/*0018*/ virtual HRESULT GetServerConnectionHandle( ULONGLONG * ) = 0;
	/*0020*/ virtual HRESULT InitializeAsConfigConnection( INT ) = 0;
	void INetInboundConnection( INetInboundConnection && );
	void INetInboundConnection( INetInboundConnection const & );
	void INetInboundConnection();
	INetInboundConnection & operator=( INetInboundConnection && );
	INetInboundConnection & operator=( INetInboundConnection const & );
	/*0008*/
};

struct INetLanConnection : IUnknown {
	/*0018*/ virtual HRESULT GetInfo( ULONG , tagLANCON_INFO * ) = 0;
	/*0020*/ virtual HRESULT SetInfo( ULONG , tagLANCON_INFO const * ) = 0;
	/*0028*/ virtual HRESULT GetDeviceGuid( _GUID * ) = 0;
	void INetLanConnection( INetLanConnection && );
	void INetLanConnection( INetLanConnection const & );
	void INetLanConnection();
	INetLanConnection & operator=( INetLanConnection && );
	INetLanConnection & operator=( INetLanConnection const & );
	/*0008*/
};

struct INetLua : IUnknown {
	/*0018*/ virtual HRESULT SetAutoElevateHWND( HWND__ * ) = 0;
	/*0020*/ virtual HRESULT DisableAutoElevate( INT ) = 0;
	/*0028*/ virtual HRESULT RunAs( HWND__ * , tagNET_LUA_ELEVATION_LEVEL ) = 0;
	/*0030*/ virtual HRESULT GetElevationLevel( tagNET_LUA_ELEVATION_LEVEL * ) = 0;
	/*0038*/ virtual HRESULT Unwrap( _GUID const & , void * * ) = 0;
	void INetLua( INetLua && );
	void INetLua( INetLua const & );
	void INetLua();
	INetLua & operator=( INetLua && );
	INetLua & operator=( INetLua const & );
	/*0008*/
};

struct INetMachinePolicies : IUnknown {
	/*0018*/ virtual HRESULT VerifyPermission( ULONG const , INT * ) = 0;
	/*0020*/ virtual HRESULT IsSameNetworkAsGroupPolicies( INT * ) = 0;
	void INetMachinePolicies( INetMachinePolicies && );
	void INetMachinePolicies( INetMachinePolicies const & );
	void INetMachinePolicies();
	INetMachinePolicies & operator=( INetMachinePolicies && );
	INetMachinePolicies & operator=( INetMachinePolicies const & );
	/*0008*/
};

struct INetRasConnection : IUnknown {
	/*0018*/ virtual HRESULT GetRasConnectionInfo( tagRASCON_INFO * ) = 0;
	/*0020*/ virtual HRESULT SetRasConnectionInfo( tagRASCON_INFO const * ) = 0;
	/*0028*/ virtual HRESULT GetRasConnectionHandle( ULONGLONG * ) = 0;
	void INetRasConnection( INetRasConnection && );
	void INetRasConnection( INetRasConnection const & );
	void INetRasConnection();
	INetRasConnection & operator=( INetRasConnection && );
	INetRasConnection & operator=( INetRasConnection const & );
	/*0008*/
};

struct INetSharedAccessConnection : IUnknown {
	/*0018*/ virtual HRESULT GetLocalAdapterGUID( _GUID * ) = 0;
	/*0020*/ virtual HRESULT GetService( tagSAHOST_SERVICES , IUPnPService * * ) = 0;
	void INetSharedAccessConnection( INetSharedAccessConnection && );
	void INetSharedAccessConnection( INetSharedAccessConnection const & );
	void INetSharedAccessConnection();
	INetSharedAccessConnection & operator=( INetSharedAccessConnection && );
	INetSharedAccessConnection & operator=( INetSharedAccessConnection const & );
	/*0008*/
};

struct INetSharingConfiguration : IDispatch {
	/*0038*/ virtual HRESULT get_SharingEnabled( SHORT * ) = 0;
	/*0040*/ virtual HRESULT get_SharingConnectionType( tagSHARINGCONNECTIONTYPE * ) = 0;
	/*0048*/ virtual HRESULT DisableSharing() = 0;
	/*0050*/ virtual HRESULT EnableSharing( tagSHARINGCONNECTIONTYPE ) = 0;
	/*0058*/ virtual HRESULT get_InternetFirewallEnabled( SHORT * ) = 0;
	/*0060*/ virtual HRESULT DisableInternetFirewall() = 0;
	/*0068*/ virtual HRESULT EnableInternetFirewall() = 0;
	/*0070*/ virtual HRESULT get_EnumPortMappings( tagSHARINGCONNECTION_ENUM_FLAGS , INetSharingPortMappingCollection * * ) = 0;
	/*0078*/ virtual HRESULT AddPortMapping( WCHAR * , UCHAR , USHORT , USHORT , ULONG , WCHAR * , tagICS_TARGETTYPE , INetSharingPortMapping * * ) = 0;
	/*0080*/ virtual HRESULT RemovePortMapping( INetSharingPortMapping * ) = 0;
	void INetSharingConfiguration( INetSharingConfiguration && );
	void INetSharingConfiguration( INetSharingConfiguration const & );
	void INetSharingConfiguration();
	INetSharingConfiguration & operator=( INetSharingConfiguration && );
	INetSharingConfiguration & operator=( INetSharingConfiguration const & );
	/*0008*/
};

struct INetSharingEveryConnectionCollection : IDispatch {
	/*0038*/ virtual HRESULT get__NewEnum( IUnknown * * ) = 0;
	/*0040*/ virtual HRESULT get_Count( LONG * ) = 0;
	void INetSharingEveryConnectionCollection( INetSharingEveryConnectionCollection && );
	void INetSharingEveryConnectionCollection( INetSharingEveryConnectionCollection const & );
	void INetSharingEveryConnectionCollection();
	INetSharingEveryConnectionCollection & operator=( INetSharingEveryConnectionCollection && );
	INetSharingEveryConnectionCollection & operator=( INetSharingEveryConnectionCollection const & );
	/*0008*/
};

struct INetSharingManager : IDispatch {
	/*0038*/ virtual HRESULT get_SharingInstalled( SHORT * ) = 0;
	/*0040*/ virtual HRESULT get_EnumPublicConnections( tagSHARINGCONNECTION_ENUM_FLAGS , INetSharingPublicConnectionCollection * * ) = 0;
	/*0048*/ virtual HRESULT get_EnumPrivateConnections( tagSHARINGCONNECTION_ENUM_FLAGS , INetSharingPrivateConnectionCollection * * ) = 0;
	/*0050*/ virtual HRESULT get_INetSharingConfigurationForINetConnection( INetConnection * , INetSharingConfiguration * * ) = 0;
	/*0058*/ virtual HRESULT get_EnumEveryConnection( INetSharingEveryConnectionCollection * * ) = 0;
	/*0060*/ virtual HRESULT get_NetConnectionProps( INetConnection * , INetConnectionProps * * ) = 0;
	void INetSharingManager( INetSharingManager && );
	void INetSharingManager( INetSharingManager const & );
	void INetSharingManager();
	INetSharingManager & operator=( INetSharingManager && );
	INetSharingManager & operator=( INetSharingManager const & );
	/*0008*/
};

struct INetSharingPortMapping : IDispatch {
	/*0038*/ virtual HRESULT Disable() = 0;
	/*0040*/ virtual HRESULT Enable() = 0;
	/*0048*/ virtual HRESULT get_Properties( INetSharingPortMappingProps * * ) = 0;
	/*0050*/ virtual HRESULT Delete() = 0;
	void INetSharingPortMapping( INetSharingPortMapping && );
	void INetSharingPortMapping( INetSharingPortMapping const & );
	void INetSharingPortMapping();
	INetSharingPortMapping & operator=( INetSharingPortMapping && );
	INetSharingPortMapping & operator=( INetSharingPortMapping const & );
	/*0008*/
};

struct INetSharingPortMappingCollection : IDispatch {
	/*0038*/ virtual HRESULT get__NewEnum( IUnknown * * ) = 0;
	/*0040*/ virtual HRESULT get_Count( LONG * ) = 0;
	void INetSharingPortMappingCollection( INetSharingPortMappingCollection && );
	void INetSharingPortMappingCollection( INetSharingPortMappingCollection const & );
	void INetSharingPortMappingCollection();
	INetSharingPortMappingCollection & operator=( INetSharingPortMappingCollection && );
	INetSharingPortMappingCollection & operator=( INetSharingPortMappingCollection const & );
	/*0008*/
};

struct INetSharingPortMappingProps : IDispatch {
	/*0038*/ virtual HRESULT get_Name( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT get_IPProtocol( UCHAR * ) = 0;
	/*0048*/ virtual HRESULT get_ExternalPort( LONG * ) = 0;
	/*0050*/ virtual HRESULT get_InternalPort( LONG * ) = 0;
	/*0058*/ virtual HRESULT get_Options( LONG * ) = 0;
	/*0060*/ virtual HRESULT get_TargetName( WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT get_TargetIPAddress( WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT get_Enabled( SHORT * ) = 0;
	void INetSharingPortMappingProps( INetSharingPortMappingProps && );
	void INetSharingPortMappingProps( INetSharingPortMappingProps const & );
	void INetSharingPortMappingProps();
	INetSharingPortMappingProps & operator=( INetSharingPortMappingProps && );
	INetSharingPortMappingProps & operator=( INetSharingPortMappingProps const & );
	/*0008*/
};

struct INetSharingPrivateConnectionCollection : IDispatch {
	/*0038*/ virtual HRESULT get__NewEnum( IUnknown * * ) = 0;
	/*0040*/ virtual HRESULT get_Count( LONG * ) = 0;
	void INetSharingPrivateConnectionCollection( INetSharingPrivateConnectionCollection && );
	void INetSharingPrivateConnectionCollection( INetSharingPrivateConnectionCollection const & );
	void INetSharingPrivateConnectionCollection();
	INetSharingPrivateConnectionCollection & operator=( INetSharingPrivateConnectionCollection && );
	INetSharingPrivateConnectionCollection & operator=( INetSharingPrivateConnectionCollection const & );
	/*0008*/
};

struct INetSharingPublicConnectionCollection : IDispatch {
	/*0038*/ virtual HRESULT get__NewEnum( IUnknown * * ) = 0;
	/*0040*/ virtual HRESULT get_Count( LONG * ) = 0;
	void INetSharingPublicConnectionCollection( INetSharingPublicConnectionCollection && );
	void INetSharingPublicConnectionCollection( INetSharingPublicConnectionCollection const & );
	void INetSharingPublicConnectionCollection();
	INetSharingPublicConnectionCollection & operator=( INetSharingPublicConnectionCollection && );
	INetSharingPublicConnectionCollection & operator=( INetSharingPublicConnectionCollection const & );
	/*0008*/
};

struct INetwork : IDispatch {
	/*0038*/ virtual HRESULT GetName( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT SetName( WCHAR * ) = 0;
	/*0048*/ virtual HRESULT GetDescription( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT SetDescription( WCHAR * ) = 0;
	/*0058*/ virtual HRESULT GetNetworkId( _GUID * ) = 0;
	/*0060*/ virtual HRESULT GetDomainType( NLM_DOMAIN_TYPE * ) = 0;
	/*0068*/ virtual HRESULT GetNetworkConnections( IEnumNetworkConnections * * ) = 0;
	/*0070*/ virtual HRESULT GetTimeCreatedAndConnected( ULONG * , ULONG * , ULONG * , ULONG * ) = 0;
	/*0078*/ virtual HRESULT get_IsConnectedToInternet( SHORT * ) = 0;
	/*0080*/ virtual HRESULT get_IsConnected( SHORT * ) = 0;
	/*0088*/ virtual HRESULT GetConnectivity( NLM_CONNECTIVITY * ) = 0;
	/*0090*/ virtual HRESULT GetCategory( NLM_NETWORK_CATEGORY * ) = 0;
	/*0098*/ virtual HRESULT SetCategory( NLM_NETWORK_CATEGORY ) = 0;
	void INetwork( INetwork && );
	void INetwork( INetwork const & );
	void INetwork();
	INetwork & operator=( INetwork && );
	INetwork & operator=( INetwork const & );
	/*0008*/
};

struct INetworkConnection : IDispatch {
	/*0038*/ virtual HRESULT GetNetwork( INetwork * * ) = 0;
	/*0040*/ virtual HRESULT get_IsConnectedToInternet( SHORT * ) = 0;
	/*0048*/ virtual HRESULT get_IsConnected( SHORT * ) = 0;
	/*0050*/ virtual HRESULT GetConnectivity( NLM_CONNECTIVITY * ) = 0;
	/*0058*/ virtual HRESULT GetConnectionId( _GUID * ) = 0;
	/*0060*/ virtual HRESULT GetAdapterId( _GUID * ) = 0;
	/*0068*/ virtual HRESULT GetDomainType( NLM_DOMAIN_TYPE * ) = 0;
	void INetworkConnection( INetworkConnection && );
	void INetworkConnection( INetworkConnection const & );
	void INetworkConnection();
	INetworkConnection & operator=( INetworkConnection && );
	INetworkConnection & operator=( INetworkConnection const & );
	/*0008*/
};

struct INetworkConnectionCost : IUnknown {
	/*0018*/ virtual HRESULT GetCost( ULONG * ) = 0;
	/*0020*/ virtual HRESULT GetDataPlanStatus( NLM_DATAPLAN_STATUS * ) = 0;
	void INetworkConnectionCost( INetworkConnectionCost && );
	void INetworkConnectionCost( INetworkConnectionCost const & );
	void INetworkConnectionCost();
	INetworkConnectionCost & operator=( INetworkConnectionCost && );
	INetworkConnectionCost & operator=( INetworkConnectionCost const & );
	/*0008*/
};

struct INetworkConnectionCostEvents : IUnknown {
	/*0018*/ virtual HRESULT ConnectionCostChanged( _GUID , ULONG ) = 0;
	/*0020*/ virtual HRESULT ConnectionDataPlanStatusChanged( _GUID ) = 0;
	void INetworkConnectionCostEvents( INetworkConnectionCostEvents && );
	void INetworkConnectionCostEvents( INetworkConnectionCostEvents const & );
	void INetworkConnectionCostEvents();
	INetworkConnectionCostEvents & operator=( INetworkConnectionCostEvents && );
	INetworkConnectionCostEvents & operator=( INetworkConnectionCostEvents const & );
	/*0008*/
};

struct INetworkConnectionEvents : IUnknown {
	/*0018*/ virtual HRESULT NetworkConnectionConnectivityChanged( _GUID , NLM_CONNECTIVITY ) = 0;
	/*0020*/ virtual HRESULT NetworkConnectionPropertyChanged( _GUID , NLM_CONNECTION_PROPERTY_CHANGE ) = 0;
	void INetworkConnectionEvents( INetworkConnectionEvents && );
	void INetworkConnectionEvents( INetworkConnectionEvents const & );
	void INetworkConnectionEvents();
	INetworkConnectionEvents & operator=( INetworkConnectionEvents && );
	INetworkConnectionEvents & operator=( INetworkConnectionEvents const & );
	/*0008*/
};

struct INetworkConnectionProfilePrivate : IUnknown {
	/*0018*/ virtual HRESULT GetName( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetState( tagNP_PROFILE_STATE * ) = 0;
	/*0028*/ virtual HRESULT GetNetworkInterface( INetworkInterfacePrivate2 * * ) = 0;
	void INetworkConnectionProfilePrivate( INetworkConnectionProfilePrivate && );
	void INetworkConnectionProfilePrivate( INetworkConnectionProfilePrivate const & );
	void INetworkConnectionProfilePrivate();
	INetworkConnectionProfilePrivate & operator=( INetworkConnectionProfilePrivate && );
	INetworkConnectionProfilePrivate & operator=( INetworkConnectionProfilePrivate const & );
	/*0008*/
};

struct INetworkCostManager : IUnknown {
	/*0018*/ virtual HRESULT GetCost( ULONG * , NLM_SOCKADDR * ) = 0;
	/*0020*/ virtual HRESULT GetDataPlanStatus( NLM_DATAPLAN_STATUS * , NLM_SOCKADDR * ) = 0;
	/*0028*/ virtual HRESULT SetDestinationAddresses( UINT , NLM_SOCKADDR * , SHORT ) = 0;
	void INetworkCostManager( INetworkCostManager && );
	void INetworkCostManager( INetworkCostManager const & );
	void INetworkCostManager();
	INetworkCostManager & operator=( INetworkCostManager && );
	INetworkCostManager & operator=( INetworkCostManager const & );
	/*0008*/
};

struct INetworkCostManagerEvents : IUnknown {
	/*0018*/ virtual HRESULT CostChanged( ULONG , NLM_SOCKADDR * ) = 0;
	/*0020*/ virtual HRESULT DataPlanStatusChanged( NLM_SOCKADDR * ) = 0;
	void INetworkCostManagerEvents( INetworkCostManagerEvents && );
	void INetworkCostManagerEvents( INetworkCostManagerEvents const & );
	void INetworkCostManagerEvents();
	INetworkCostManagerEvents & operator=( INetworkCostManagerEvents && );
	INetworkCostManagerEvents & operator=( INetworkCostManagerEvents const & );
	/*0008*/
};

struct INetworkEvents : IUnknown {
	/*0018*/ virtual HRESULT NetworkAdded( _GUID ) = 0;
	/*0020*/ virtual HRESULT NetworkDeleted( _GUID ) = 0;
	/*0028*/ virtual HRESULT NetworkConnectivityChanged( _GUID , NLM_CONNECTIVITY ) = 0;
	/*0030*/ virtual HRESULT NetworkPropertyChanged( _GUID , NLM_NETWORK_PROPERTY_CHANGE ) = 0;
	void INetworkEvents( INetworkEvents && );
	void INetworkEvents( INetworkEvents const & );
	void INetworkEvents();
	INetworkEvents & operator=( INetworkEvents && );
	INetworkEvents & operator=( INetworkEvents const & );
	/*0008*/
};

struct INetworkFolderInternal : IUnknown {
	/*0018*/ virtual HRESULT GetResourceDisplayType( UINT * ) = 0;
	/*0020*/ virtual HRESULT GetIDList( _ITEMIDLIST __unaligned * * ) = 0;
	/*0028*/ virtual HRESULT GetProvider( UINT , _ITEMIDLIST const __unaligned * * , UINT , WCHAR * ) = 0;
	void INetworkFolderInternal( INetworkFolderInternal && );
	void INetworkFolderInternal( INetworkFolderInternal const & );
	void INetworkFolderInternal();
	INetworkFolderInternal & operator=( INetworkFolderInternal && );
	INetworkFolderInternal & operator=( INetworkFolderInternal const & );
	/*0008*/
};

struct INetworkInterfacePrivate : IUnknown {
	/*0018*/ virtual HRESULT GetId( ULONG * , UCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetInterfaceGuid( _GUID * ) = 0;
	/*0028*/ virtual HRESULT GetNetworkId( _GUID * ) = 0;
	/*0030*/ virtual HRESULT GetType( tagNP_NETWORK_INTERFACE_TYPE * ) = 0;
	/*0038*/ virtual HRESULT GetState( tagNP_INTERFACE_STATE * ) = 0;
	/*0040*/ virtual HRESULT GetCost( ULONG * ) = 0;
	/*0048*/ virtual HRESULT GetDataPlanStatus( NP_DATAPLAN_STATUS * ) = 0;
	void INetworkInterfacePrivate( INetworkInterfacePrivate && );
	void INetworkInterfacePrivate( INetworkInterfacePrivate const & );
	void INetworkInterfacePrivate();
	INetworkInterfacePrivate & operator=( INetworkInterfacePrivate && );
	INetworkInterfacePrivate & operator=( INetworkInterfacePrivate const & );
	/*0008*/
};

struct INetworkInterfacePrivate2 : INetworkInterfacePrivate {
	/*0050*/ virtual HRESULT GetInterfaceInfo( tagNP_INTERFACE_INFO * ) = 0;
	/*0058*/ virtual HRESULT GetConnectedProfile( INetworkConnectionProfilePrivate * * ) = 0;
	void INetworkInterfacePrivate2( INetworkInterfacePrivate2 && );
	void INetworkInterfacePrivate2( INetworkInterfacePrivate2 const & );
	void INetworkInterfacePrivate2();
	INetworkInterfacePrivate2 & operator=( INetworkInterfacePrivate2 && );
	INetworkInterfacePrivate2 & operator=( INetworkInterfacePrivate2 const & );
	/*0008*/
};

struct INetworkListManager : IDispatch {
	/*0038*/ virtual HRESULT GetNetworks( NLM_ENUM_NETWORK , IEnumNetworks * * ) = 0;
	/*0040*/ virtual HRESULT GetNetwork( _GUID , INetwork * * ) = 0;
	/*0048*/ virtual HRESULT GetNetworkConnections( IEnumNetworkConnections * * ) = 0;
	/*0050*/ virtual HRESULT GetNetworkConnection( _GUID , INetworkConnection * * ) = 0;
	/*0058*/ virtual HRESULT get_IsConnectedToInternet( SHORT * ) = 0;
	/*0060*/ virtual HRESULT get_IsConnected( SHORT * ) = 0;
	/*0068*/ virtual HRESULT GetConnectivity( NLM_CONNECTIVITY * ) = 0;
	/*0070*/ virtual HRESULT SetSimulatedProfileInfo( NLM_SIMULATED_PROFILE_INFO * ) = 0;
	/*0078*/ virtual HRESULT ClearSimulatedProfileInfo() = 0;
	void INetworkListManager( INetworkListManager && );
	void INetworkListManager( INetworkListManager const & );
	void INetworkListManager();
	INetworkListManager & operator=( INetworkListManager && );
	INetworkListManager & operator=( INetworkListManager const & );
	/*0008*/
};

struct INetworkListManagerEvents : IUnknown {
	/*0018*/ virtual HRESULT ConnectivityChanged( NLM_CONNECTIVITY ) = 0;
	void INetworkListManagerEvents( INetworkListManagerEvents && );
	void INetworkListManagerEvents( INetworkListManagerEvents const & );
	void INetworkListManagerEvents();
	INetworkListManagerEvents & operator=( INetworkListManagerEvents && );
	INetworkListManagerEvents & operator=( INetworkListManagerEvents const & );
	/*0008*/
};

struct INetworkListManagerPrivate : IUnknown {
	/*0018*/ virtual HRESULT CreateNetwork( WCHAR * const , INetworkPrivate * * ) = 0;
	/*0020*/ virtual HRESULT EnumNetworks( tagNP_ENUM_NETWORK , IEnumNetworkPrivate * * ) = 0;
	/*0028*/ virtual HRESULT EnumNetworkInterfaces( IEnumNetworkInterfacePrivate * * ) = 0;
	/*0030*/ virtual HRESULT GetNetwork( _GUID const * , INetworkPrivate * * ) = 0;
	/*0038*/ virtual HRESULT GetNetworkInterface( ULONG , UCHAR const * , INetworkInterfacePrivate * * ) = 0;
	/*0040*/ virtual HRESULT GetBandwidthEstimation( IBandwidthEstimationPrivate * * ) = 0;
	/*0048*/ virtual HRESULT GetNetworkSignature( ULONG , UCHAR const * , INetworkSignaturePrivate * * ) = 0;
	/*0050*/ virtual HRESULT GetNetworkInterfaces( _GUID const * , ULONG * , WCHAR * * * ) = 0;
	/*0058*/ virtual HRESULT DeleteNetwork( _GUID const * ) = 0;
	/*0060*/ virtual HRESULT DeleteNetworkSignature( ULONG , UCHAR const * ) = 0;
	/*0068*/ virtual HRESULT GetNetworkIdByInterface( WCHAR * const , ULONG * , _GUID * * ) = 0;
	/*0070*/ virtual HRESULT GetNewNetworks( ULONG * , INetworkPrivate * * * ) = 0;
	/*0078*/ virtual HRESULT IsConnectedToInternet( SHORT * ) = 0;
	/*0080*/ virtual HRESULT IsConnected( SHORT * ) = 0;
	/*0088*/ virtual HRESULT GetConnectivity( tagNP_NETWORK_STATE * ) = 0;
	/*0090*/ virtual HRESULT GetCost( ULONG * ) = 0;
	/*0098*/ virtual HRESULT GetDataPlanStatus( NP_DATAPLAN_STATUS * ) = 0;
	/*00a0*/ virtual HRESULT GetPhysicalInterfaceForInternet( _GUID const * , _GUID * ) = 0;
	/*00a8*/ virtual HRESULT PublishNetworkConnectivityChange( ULONG ) = 0;
	/*00b0*/ virtual HRESULT SetSimulatedProfileInfo( NP_SIMULATED_PROFILE_INFO * , ULONG , INT ) = 0;
	/*00b8*/ virtual HRESULT ClearSimulatedProfileInfo( ULONG , INT ) = 0;
	/*00c0*/ virtual HRESULT QuerySimulatedProfileInfo( NP_SIMULATED_PROFILE_INFO * ) = 0;
	/*00c8*/ virtual HRESULT GetPreferredInterface( _GUID * ) = 0;
	/*00d0*/ virtual HRESULT GetAggregatedConnectivity( _GUID , tagNP_NETWORK_STATE * ) = 0;
	/*00d8*/ virtual HRESULT SetCurrentConnectionCategory( _GUID , WCHAR * const , INT , INT ) = 0;
	/*00e0*/ virtual HRESULT SetInterfaceProperties( _GUID , INT ) = 0;
	/*00e8*/ virtual HRESULT EnumNetworkInterfacesEx( tagNP_ENUM_NETWORK_INTERFACE , IEnumNetworkInterfacePrivate * * ) = 0;
	void INetworkListManagerPrivate( INetworkListManagerPrivate && );
	void INetworkListManagerPrivate( INetworkListManagerPrivate const & );
	void INetworkListManagerPrivate();
	INetworkListManagerPrivate & operator=( INetworkListManagerPrivate && );
	INetworkListManagerPrivate & operator=( INetworkListManagerPrivate const & );
	/*0008*/
};

struct INetworkListManagerPrivate2 : INetworkListManagerPrivate {
	/*00f0*/ virtual HRESULT EnumNetworkConnectionProfiles( tagNP_ENUM_NETWORK_CONNECTION_PROFILE , IEnumNetworkConnectionProfilePrivate * * ) = 0;
	void INetworkListManagerPrivate2( INetworkListManagerPrivate2 && );
	void INetworkListManagerPrivate2( INetworkListManagerPrivate2 const & );
	void INetworkListManagerPrivate2();
	INetworkListManagerPrivate2 & operator=( INetworkListManagerPrivate2 && );
	INetworkListManagerPrivate2 & operator=( INetworkListManagerPrivate2 const & );
	/*0008*/
};

struct INetworkPrivate : IUnknown {
	/*0018*/ virtual HRESULT GetName( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetDescription( WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT SetDescription( WCHAR * const ) = 0;
	/*0030*/ virtual HRESULT GetId( _GUID * ) = 0;
	/*0038*/ virtual HRESULT Rename( WCHAR * const ) = 0;
	/*0040*/ virtual HRESULT GetIcon( tagNP_ICON_SIZE , ULONG * , UCHAR * * ) = 0;
	/*0048*/ virtual HRESULT SetIcon( ULONG , UCHAR const * , ULONG , UCHAR const * , ULONG , UCHAR const * , ULONG , UCHAR const * ) = 0;
	/*0050*/ virtual HRESULT GetType( tagNP_NETWORK_TYPE * ) = 0;
	/*0058*/ virtual HRESULT GetTimeCreatedAndConnected( ULONG * , ULONG * , ULONG * , ULONG * ) = 0;
	/*0060*/ virtual HRESULT GetState( tagNP_NETWORK_STATE * ) = 0;
	/*0068*/ virtual HRESULT GetCategory( tagNP_NETWORK_CATEGORY * ) = 0;
	/*0070*/ virtual HRESULT SetCategory( tagNP_NETWORK_CATEGORY ) = 0;
	/*0078*/ virtual HRESULT EnumNetworkInterfaces( IEnumNetworkInterfacePrivate * * ) = 0;
	/*0080*/ virtual HRESULT EnumNetworkSignatures( tagNP_ENUM_NETWORK_SIGNATURE , IEnumNetworkSignaturePrivate * * ) = 0;
	/*0088*/ virtual HRESULT EnumNetworkInterfacesEx( tagNP_ENUM_NETWORK_INTERFACE , IEnumNetworkInterfacePrivate * * ) = 0;
	void INetworkPrivate( INetworkPrivate && );
	void INetworkPrivate( INetworkPrivate const & );
	void INetworkPrivate();
	INetworkPrivate & operator=( INetworkPrivate && );
	INetworkPrivate & operator=( INetworkPrivate const & );
	/*0008*/
};

struct INetworkSignaturePrivate : IUnknown {
	/*0018*/ virtual HRESULT GetId( ULONG * , UCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetNetworkId( _GUID * ) = 0;
	/*0028*/ virtual HRESULT GetDescription( WCHAR * * ) = 0;
	/*0030*/ virtual HRESULT SetDescription( WCHAR * const ) = 0;
	/*0038*/ virtual HRESULT GetType( tagNP_NETWORK_SIGNATURE_TYPE * ) = 0;
	/*0040*/ virtual HRESULT GetState( tagNP_NETWORK_SIGNATURE_STATE * ) = 0;
	/*0048*/ virtual HRESULT GetNetworkProperties( WCHAR * * , WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT MoveTo( INetworkPrivate * ) = 0;
	void INetworkSignaturePrivate( INetworkSignaturePrivate && );
	void INetworkSignaturePrivate( INetworkSignaturePrivate const & );
	void INetworkSignaturePrivate();
	INetworkSignaturePrivate & operator=( INetworkSignaturePrivate && );
	INetworkSignaturePrivate & operator=( INetworkSignaturePrivate const & );
	/*0008*/
};

struct INetworkStatus : IUnknown {
	/*0018*/ virtual HRESULT GetNetworkStatus( _NETWORK_STATUS * , _WIRELESS_SIGNAL_STRENGTH * , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetResumeNetworkStatus( _NETWORK_STATUS * , _WIRELESS_SIGNAL_STRENGTH * ) = 0;
	/*0028*/ virtual void NeedNetworkName() = 0;
	void INetworkStatus( INetworkStatus && );
	void INetworkStatus( INetworkStatus const & );
	void INetworkStatus();
	INetworkStatus & operator=( INetworkStatus && );
	INetworkStatus & operator=( INetworkStatus const & );
	/*0008*/
};

struct INetworkStatusNotifySink : IUnknown {
	/*0018*/ virtual HRESULT OnNetworkStatusChange( _NETWORK_STATUS , _WIRELESS_SIGNAL_STRENGTH , WCHAR const * ) = 0;
	void INetworkStatusNotifySink( INetworkStatusNotifySink && );
	void INetworkStatusNotifySink( INetworkStatusNotifySink const & );
	void INetworkStatusNotifySink();
	INetworkStatusNotifySink & operator=( INetworkStatusNotifySink && );
	INetworkStatusNotifySink & operator=( INetworkStatusNotifySink const & );
	/*0008*/
};

struct INewMenuClient : IUnknown {
	/*0018*/ virtual HRESULT IncludeItems( INT * ) = 0;
	/*0020*/ virtual HRESULT SelectAndEditItem( _ITEMIDLIST const __unaligned * , INT ) = 0;
	void INewMenuClient( INewMenuClient && );
	void INewMenuClient( INewMenuClient const & );
	void INewMenuClient();
	INewMenuClient & operator=( INewMenuClient && );
	INewMenuClient & operator=( INewMenuClient const & );
	/*0008*/
};

struct INewWindowManager : IUnknown {
	/*0018*/ virtual HRESULT EvaluateNewWindow( WCHAR const * , WCHAR const * , WCHAR const * , WCHAR const * , INT , ULONG , ULONG ) = 0;
	void INewWindowManager( INewWindowManager && );
	void INewWindowManager( INewWindowManager const & );
	void INewWindowManager();
	INewWindowManager & operator=( INewWindowManager && );
	INewWindowManager & operator=( INewWindowManager const & );
	/*0008*/
};

struct INoMarshal : IUnknown {
	void INoMarshal( INoMarshal && );
	void INoMarshal( INoMarshal const & );
	void INoMarshal();
	INoMarshal & operator=( INoMarshal && );
	INoMarshal & operator=( INoMarshal const & );
	/*0008*/
};

struct INotifyNetworkEventsPrivate : IUnknown {
	/*0018*/ virtual HRESULT OnNetworkAdded( _GUID const * ) = 0;
	/*0020*/ virtual HRESULT OnNetworkDeleted( _GUID const * ) = 0;
	/*0028*/ virtual HRESULT OnNetworkConnected( _GUID const * ) = 0;
	/*0030*/ virtual HRESULT OnNetworkDisconnected( _GUID const * ) = 0;
	/*0038*/ virtual HRESULT OnNetworkPropertyChange( _GUID const * , tagNP_NETWORK_PROPERTY_CHANGE ) = 0;
	void INotifyNetworkEventsPrivate( INotifyNetworkEventsPrivate && );
	void INotifyNetworkEventsPrivate( INotifyNetworkEventsPrivate const & );
	void INotifyNetworkEventsPrivate();
	INotifyNetworkEventsPrivate & operator=( INotifyNetworkEventsPrivate && );
	INotifyNetworkEventsPrivate & operator=( INotifyNetworkEventsPrivate const & );
	/*0008*/
};

struct INotifyNetworkGlobalCostEventsPrivate : IUnknown {
	/*0018*/ virtual HRESULT OnCostChanged( ULONG ) = 0;
	/*0020*/ virtual HRESULT OnDataPlanStatusChanged() = 0;
	void INotifyNetworkGlobalCostEventsPrivate( INotifyNetworkGlobalCostEventsPrivate && );
	void INotifyNetworkGlobalCostEventsPrivate( INotifyNetworkGlobalCostEventsPrivate const & );
	void INotifyNetworkGlobalCostEventsPrivate();
	INotifyNetworkGlobalCostEventsPrivate & operator=( INotifyNetworkGlobalCostEventsPrivate && );
	INotifyNetworkGlobalCostEventsPrivate & operator=( INotifyNetworkGlobalCostEventsPrivate const & );
	/*0008*/
};

struct INotifyNetworkGlobalStateEventsPrivate : IUnknown {
	/*0018*/ virtual HRESULT OnNetworkGlobalStateChanged() = 0;
	void INotifyNetworkGlobalStateEventsPrivate( INotifyNetworkGlobalStateEventsPrivate && );
	void INotifyNetworkGlobalStateEventsPrivate( INotifyNetworkGlobalStateEventsPrivate const & );
	void INotifyNetworkGlobalStateEventsPrivate();
	INotifyNetworkGlobalStateEventsPrivate & operator=( INotifyNetworkGlobalStateEventsPrivate && );
	INotifyNetworkGlobalStateEventsPrivate & operator=( INotifyNetworkGlobalStateEventsPrivate const & );
	/*0008*/
};

struct INotifyNetworkInterfaceEventsPrivate : IUnknown {
	/*0018*/ virtual HRESULT OnNetworkInterfaceConnected( _GUID const * , ULONG , UCHAR const * ) = 0;
	/*0020*/ virtual HRESULT OnNetworkInterfaceDisconnected( _GUID const * , ULONG , UCHAR const * ) = 0;
	/*0028*/ virtual HRESULT OnInterfacePropertyChange( _GUID const * , ULONG , UCHAR const * , tagNP_INTERFACE_PROPERTY_CHANGE ) = 0;
	void INotifyNetworkInterfaceEventsPrivate( INotifyNetworkInterfaceEventsPrivate && );
	void INotifyNetworkInterfaceEventsPrivate( INotifyNetworkInterfaceEventsPrivate const & );
	void INotifyNetworkInterfaceEventsPrivate();
	INotifyNetworkInterfaceEventsPrivate & operator=( INotifyNetworkInterfaceEventsPrivate && );
	INotifyNetworkInterfaceEventsPrivate & operator=( INotifyNetworkInterfaceEventsPrivate const & );
	/*0008*/
};

struct INotifyNetworkListManagerEventsPrivate : IUnknown {
	/*0018*/ virtual HRESULT OnConnectivityChanged( tagNP_NETWORK_STATE ) = 0;
	void INotifyNetworkListManagerEventsPrivate( INotifyNetworkListManagerEventsPrivate && );
	void INotifyNetworkListManagerEventsPrivate( INotifyNetworkListManagerEventsPrivate const & );
	void INotifyNetworkListManagerEventsPrivate();
	INotifyNetworkListManagerEventsPrivate & operator=( INotifyNetworkListManagerEventsPrivate && );
	INotifyNetworkListManagerEventsPrivate & operator=( INotifyNetworkListManagerEventsPrivate const & );
	/*0008*/
};

struct INotifyNetworkSignatureEventsPrivate : IUnknown {
	/*0018*/ virtual HRESULT OnNetworkSignatureAdded( _GUID const * , ULONG , UCHAR const * ) = 0;
	/*0020*/ virtual HRESULT OnNetworkSignatureDeleted( _GUID const * , ULONG , UCHAR const * ) = 0;
	/*0028*/ virtual HRESULT OnNetworkSignatureConnected( _GUID const * , ULONG , UCHAR const * ) = 0;
	/*0030*/ virtual HRESULT OnNetworkSignatureDisconnected( _GUID const * , ULONG , UCHAR const * ) = 0;
	/*0038*/ virtual HRESULT OnNetworkSignaturePropertyChange( _GUID const * , ULONG , UCHAR const * , tagNP_NETWORK_SIGNATURE_PROPERTY_CHANGE ) = 0;
	/*0040*/ virtual HRESULT OnNetworkSignatureMoved( _GUID const * , _GUID const * , ULONG , UCHAR const * ) = 0;
	void INotifyNetworkSignatureEventsPrivate( INotifyNetworkSignatureEventsPrivate && );
	void INotifyNetworkSignatureEventsPrivate( INotifyNetworkSignatureEventsPrivate const & );
	void INotifyNetworkSignatureEventsPrivate();
	INotifyNetworkSignatureEventsPrivate & operator=( INotifyNetworkSignatureEventsPrivate && );
	INotifyNetworkSignatureEventsPrivate & operator=( INotifyNetworkSignatureEventsPrivate const & );
	/*0008*/
};

struct IObjectArray : IUnknown {
	/*0018*/ virtual HRESULT GetCount( UINT * ) = 0;
	/*0020*/ virtual HRESULT GetAt( UINT , _GUID const & , void * * ) = 0;
	void IObjectArray( IObjectArray && );
	void IObjectArray( IObjectArray const & );
	void IObjectArray();
	IObjectArray & operator=( IObjectArray && );
	IObjectArray & operator=( IObjectArray const & );
	/*0008*/
};

struct IObjectCollection : IObjectArray {
	/*0028*/ virtual HRESULT AddObject( IUnknown * ) = 0;
	/*0030*/ virtual HRESULT AddFromArray( IObjectArray * ) = 0;
	/*0038*/ virtual HRESULT RemoveObjectAt( UINT ) = 0;
	/*0040*/ virtual HRESULT Clear() = 0;
	void IObjectCollection( IObjectCollection && );
	void IObjectCollection( IObjectCollection const & );
	void IObjectCollection();
	IObjectCollection & operator=( IObjectCollection && );
	IObjectCollection & operator=( IObjectCollection const & );
	/*0008*/
};

struct IObjectProvider : IUnknown {
	/*0018*/ virtual HRESULT QueryObject( _GUID const & , _GUID const & , void * * ) = 0;
	void IObjectProvider( IObjectProvider && );
	void IObjectProvider( IObjectProvider const & );
	void IObjectProvider();
	IObjectProvider & operator=( IObjectProvider && );
	IObjectProvider & operator=( IObjectProvider const & );
	/*0008*/
};

struct IObjectWithAppUserModelID : IUnknown {
	/*0018*/ virtual HRESULT SetAppID( WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT GetAppID( WCHAR * * ) = 0;
	void IObjectWithAppUserModelID( IObjectWithAppUserModelID && );
	void IObjectWithAppUserModelID( IObjectWithAppUserModelID const & );
	void IObjectWithAppUserModelID();
	IObjectWithAppUserModelID & operator=( IObjectWithAppUserModelID && );
	IObjectWithAppUserModelID & operator=( IObjectWithAppUserModelID const & );
	/*0008*/
};

struct IObjectWithBackReferences : IUnknown {
	/*0018*/ virtual HRESULT RemoveBackReferences() = 0;
	void IObjectWithBackReferences( IObjectWithBackReferences && );
	void IObjectWithBackReferences( IObjectWithBackReferences const & );
	void IObjectWithBackReferences();
	IObjectWithBackReferences & operator=( IObjectWithBackReferences && );
	IObjectWithBackReferences & operator=( IObjectWithBackReferences const & );
	/*0008*/
};

struct IObjectWithCancelEvent : IUnknown {
	/*0018*/ virtual HRESULT GetCancelEvent( void * * ) = 0;
	void IObjectWithCancelEvent( IObjectWithCancelEvent && );
	void IObjectWithCancelEvent( IObjectWithCancelEvent const & );
	void IObjectWithCancelEvent();
	IObjectWithCancelEvent & operator=( IObjectWithCancelEvent && );
	IObjectWithCancelEvent & operator=( IObjectWithCancelEvent const & );
	/*0008*/
};

struct IObjectWithFolderEnumMode : IUnknown {
	/*0018*/ virtual HRESULT SetMode( FOLDER_ENUM_MODE ) = 0;
	/*0020*/ virtual HRESULT GetMode( FOLDER_ENUM_MODE * ) = 0;
	void IObjectWithFolderEnumMode( IObjectWithFolderEnumMode && );
	void IObjectWithFolderEnumMode( IObjectWithFolderEnumMode const & );
	void IObjectWithFolderEnumMode();
	IObjectWithFolderEnumMode & operator=( IObjectWithFolderEnumMode && );
	IObjectWithFolderEnumMode & operator=( IObjectWithFolderEnumMode const & );
	/*0008*/
};

struct IObjectWithProgID : IUnknown {
	/*0018*/ virtual HRESULT SetProgID( WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT GetProgID( WCHAR * * ) = 0;
	void IObjectWithProgID( IObjectWithProgID && );
	void IObjectWithProgID( IObjectWithProgID const & );
	void IObjectWithProgID();
	IObjectWithProgID & operator=( IObjectWithProgID && );
	IObjectWithProgID & operator=( IObjectWithProgID const & );
	/*0008*/
};

struct IObjectWithPropertyKey : IUnknown {
	/*0018*/ virtual HRESULT SetPropertyKey( _tagpropertykey const & ) = 0;
	/*0020*/ virtual HRESULT GetPropertyKey( _tagpropertykey * ) = 0;
	void IObjectWithPropertyKey( IObjectWithPropertyKey && );
	void IObjectWithPropertyKey( IObjectWithPropertyKey const & );
	void IObjectWithPropertyKey();
	IObjectWithPropertyKey & operator=( IObjectWithPropertyKey && );
	IObjectWithPropertyKey & operator=( IObjectWithPropertyKey const & );
	/*0008*/
};

struct IObjectWithSelection : IUnknown {
	/*0018*/ virtual HRESULT SetSelection( IShellItemArray * ) = 0;
	/*0020*/ virtual HRESULT GetSelection( _GUID const & , void * * ) = 0;
	void IObjectWithSelection( IObjectWithSelection && );
	void IObjectWithSelection( IObjectWithSelection const & );
	void IObjectWithSelection();
	IObjectWithSelection & operator=( IObjectWithSelection && );
	IObjectWithSelection & operator=( IObjectWithSelection const & );
	/*0008*/
};

struct IObjectWithSite : IUnknown {
	/*0018*/ virtual HRESULT SetSite( IUnknown * ) = 0;
	/*0020*/ virtual HRESULT GetSite( _GUID const & , void * * ) = 0;
	void IObjectWithSite( IObjectWithSite && );
	void IObjectWithSite( IObjectWithSite const & );
	void IObjectWithSite();
	IObjectWithSite & operator=( IObjectWithSite && );
	IObjectWithSite & operator=( IObjectWithSite const & );
	/*0008*/
};

struct IOleAdviseHolder : IUnknown {
	/*0018*/ virtual HRESULT Advise( IAdviseSink * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0028*/ virtual HRESULT EnumAdvise( IEnumSTATDATA * * ) = 0;
	/*0030*/ virtual HRESULT SendOnRename( IMoniker * ) = 0;
	/*0038*/ virtual HRESULT SendOnSave() = 0;
	/*0040*/ virtual HRESULT SendOnClose() = 0;
	void IOleAdviseHolder( IOleAdviseHolder && );
	void IOleAdviseHolder( IOleAdviseHolder const & );
	void IOleAdviseHolder();
	IOleAdviseHolder & operator=( IOleAdviseHolder && );
	IOleAdviseHolder & operator=( IOleAdviseHolder const & );
	/*0008*/
};

struct IOleCache : IUnknown {
	/*0018*/ virtual HRESULT Cache( tagFORMATETC * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Uncache( ULONG ) = 0;
	/*0028*/ virtual HRESULT EnumCache( IEnumSTATDATA * * ) = 0;
	/*0030*/ virtual HRESULT InitCache( IDataObject * ) = 0;
	/*0038*/ virtual HRESULT SetData( tagFORMATETC * , tagSTGMEDIUM * , INT ) = 0;
	void IOleCache( IOleCache && );
	void IOleCache( IOleCache const & );
	void IOleCache();
	IOleCache & operator=( IOleCache && );
	IOleCache & operator=( IOleCache const & );
	/*0008*/
};

struct IOleCache2 : IOleCache {
	/*0040*/ virtual HRESULT UpdateCache( IDataObject * , ULONG , void * ) = 0;
	/*0048*/ virtual HRESULT DiscardCache( ULONG ) = 0;
	void IOleCache2( IOleCache2 && );
	void IOleCache2( IOleCache2 const & );
	void IOleCache2();
	IOleCache2 & operator=( IOleCache2 && );
	IOleCache2 & operator=( IOleCache2 const & );
	/*0008*/
};

struct IOleCacheControl : IUnknown {
	/*0018*/ virtual HRESULT OnRun( IDataObject * ) = 0;
	/*0020*/ virtual HRESULT OnStop() = 0;
	void IOleCacheControl( IOleCacheControl && );
	void IOleCacheControl( IOleCacheControl const & );
	void IOleCacheControl();
	IOleCacheControl & operator=( IOleCacheControl && );
	IOleCacheControl & operator=( IOleCacheControl const & );
	/*0008*/
};

struct IOleClientSite : IUnknown {
	/*0018*/ virtual HRESULT SaveObject() = 0;
	/*0020*/ virtual HRESULT GetMoniker( ULONG , ULONG , IMoniker * * ) = 0;
	/*0028*/ virtual HRESULT GetContainer( IOleContainer * * ) = 0;
	/*0030*/ virtual HRESULT ShowObject() = 0;
	/*0038*/ virtual HRESULT OnShowWindow( INT ) = 0;
	/*0040*/ virtual HRESULT RequestNewObjectLayout() = 0;
	void IOleClientSite( IOleClientSite && );
	void IOleClientSite( IOleClientSite const & );
	void IOleClientSite();
	IOleClientSite & operator=( IOleClientSite && );
	IOleClientSite & operator=( IOleClientSite const & );
	/*0008*/
};

struct IOleContainer : IParseDisplayName {
	/*0020*/ virtual HRESULT EnumObjects( ULONG , IEnumUnknown * * ) = 0;
	/*0028*/ virtual HRESULT LockContainer( INT ) = 0;
	void IOleContainer( IOleContainer && );
	void IOleContainer( IOleContainer const & );
	void IOleContainer();
	IOleContainer & operator=( IOleContainer && );
	IOleContainer & operator=( IOleContainer const & );
	/*0008*/
};

struct IOleControl : IUnknown {
	/*0018*/ virtual HRESULT GetControlInfo( tagCONTROLINFO * ) = 0;
	/*0020*/ virtual HRESULT OnMnemonic( tagMSG * ) = 0;
	/*0028*/ virtual HRESULT OnAmbientPropertyChange( LONG ) = 0;
	/*0030*/ virtual HRESULT FreezeEvents( INT ) = 0;
	void IOleControl( IOleControl && );
	void IOleControl( IOleControl const & );
	void IOleControl();
	IOleControl & operator=( IOleControl && );
	IOleControl & operator=( IOleControl const & );
	/*0008*/
};

struct IOleControlSite : IUnknown {
	/*0018*/ virtual HRESULT OnControlInfoChanged() = 0;
	/*0020*/ virtual HRESULT LockInPlaceActive( INT ) = 0;
	/*0028*/ virtual HRESULT GetExtendedControl( IDispatch * * ) = 0;
	/*0030*/ virtual HRESULT TransformCoords( _POINTL * , tagPOINTF * , ULONG ) = 0;
	/*0038*/ virtual HRESULT TranslateAcceleratorW( tagMSG * , ULONG ) = 0;
	/*0040*/ virtual HRESULT OnFocus( INT ) = 0;
	/*0048*/ virtual HRESULT ShowPropertyFrame() = 0;
	void IOleControlSite( IOleControlSite && );
	void IOleControlSite( IOleControlSite const & );
	void IOleControlSite();
	IOleControlSite & operator=( IOleControlSite && );
	IOleControlSite & operator=( IOleControlSite const & );
	/*0008*/
};

struct IOleInPlaceActiveObject : IOleWindow {
	/*0028*/ virtual HRESULT TranslateAcceleratorW( tagMSG * ) = 0;
	/*0030*/ virtual HRESULT OnFrameWindowActivate( INT ) = 0;
	/*0038*/ virtual HRESULT OnDocWindowActivate( INT ) = 0;
	/*0040*/ virtual HRESULT ResizeBorder( tagRECT const * , IOleInPlaceUIWindow * , INT ) = 0;
	/*0048*/ virtual HRESULT EnableModeless( INT ) = 0;
	void IOleInPlaceActiveObject( IOleInPlaceActiveObject && );
	void IOleInPlaceActiveObject( IOleInPlaceActiveObject const & );
	void IOleInPlaceActiveObject();
	IOleInPlaceActiveObject & operator=( IOleInPlaceActiveObject && );
	IOleInPlaceActiveObject & operator=( IOleInPlaceActiveObject const & );
	/*0008*/
};

struct IOleInPlaceFrame : IOleInPlaceUIWindow {
	/*0048*/ virtual HRESULT InsertMenus( HMENU__ * , tagOleMenuGroupWidths * ) = 0;
	/*0050*/ virtual HRESULT SetMenu( HMENU__ * , void * , HWND__ * ) = 0;
	/*0058*/ virtual HRESULT RemoveMenus( HMENU__ * ) = 0;
	/*0060*/ virtual HRESULT SetStatusText( WCHAR const * ) = 0;
	/*0068*/ virtual HRESULT EnableModeless( INT ) = 0;
	/*0070*/ virtual HRESULT TranslateAcceleratorW( tagMSG * , USHORT ) = 0;
	void IOleInPlaceFrame( IOleInPlaceFrame && );
	void IOleInPlaceFrame( IOleInPlaceFrame const & );
	void IOleInPlaceFrame();
	IOleInPlaceFrame & operator=( IOleInPlaceFrame && );
	IOleInPlaceFrame & operator=( IOleInPlaceFrame const & );
	/*0008*/
};

struct IOleInPlaceObject : IOleWindow {
	/*0028*/ virtual HRESULT InPlaceDeactivate() = 0;
	/*0030*/ virtual HRESULT UIDeactivate() = 0;
	/*0038*/ virtual HRESULT SetObjectRects( tagRECT const * , tagRECT const * ) = 0;
	/*0040*/ virtual HRESULT ReactivateAndUndo() = 0;
	void IOleInPlaceObject( IOleInPlaceObject && );
	void IOleInPlaceObject( IOleInPlaceObject const & );
	void IOleInPlaceObject();
	IOleInPlaceObject & operator=( IOleInPlaceObject && );
	IOleInPlaceObject & operator=( IOleInPlaceObject const & );
	/*0008*/
};

struct IOleInPlaceObjectWindowless : IOleInPlaceObject {
	/*0048*/ virtual HRESULT OnWindowMessage( UINT , ULONGLONG , LONGLONG , LONGLONG * ) = 0;
	/*0050*/ virtual HRESULT GetDropTarget( IDropTarget * * ) = 0;
	void IOleInPlaceObjectWindowless( IOleInPlaceObjectWindowless && );
	void IOleInPlaceObjectWindowless( IOleInPlaceObjectWindowless const & );
	void IOleInPlaceObjectWindowless();
	IOleInPlaceObjectWindowless & operator=( IOleInPlaceObjectWindowless && );
	IOleInPlaceObjectWindowless & operator=( IOleInPlaceObjectWindowless const & );
	/*0008*/
};

struct IOleInPlaceSite : IOleWindow {
	/*0028*/ virtual HRESULT CanInPlaceActivate() = 0;
	/*0030*/ virtual HRESULT OnInPlaceActivate() = 0;
	/*0038*/ virtual HRESULT OnUIActivate() = 0;
	/*0040*/ virtual HRESULT GetWindowContext( IOleInPlaceFrame * * , IOleInPlaceUIWindow * * , tagRECT * , tagRECT * , tagOIFI * ) = 0;
	/*0048*/ virtual HRESULT Scroll( tagSIZE ) = 0;
	/*0050*/ virtual HRESULT OnUIDeactivate( INT ) = 0;
	/*0058*/ virtual HRESULT OnInPlaceDeactivate() = 0;
	/*0060*/ virtual HRESULT DiscardUndoState() = 0;
	/*0068*/ virtual HRESULT DeactivateAndUndo() = 0;
	/*0070*/ virtual HRESULT OnPosRectChange( tagRECT const * ) = 0;
	void IOleInPlaceSite( IOleInPlaceSite && );
	void IOleInPlaceSite( IOleInPlaceSite const & );
	void IOleInPlaceSite();
	IOleInPlaceSite & operator=( IOleInPlaceSite && );
	IOleInPlaceSite & operator=( IOleInPlaceSite const & );
	/*0008*/
};

struct IOleInPlaceSiteEx : IOleInPlaceSite {
	/*0078*/ virtual HRESULT OnInPlaceActivateEx( INT * , ULONG ) = 0;
	/*0080*/ virtual HRESULT OnInPlaceDeactivateEx( INT ) = 0;
	/*0088*/ virtual HRESULT RequestUIActivate() = 0;
	void IOleInPlaceSiteEx( IOleInPlaceSiteEx && );
	void IOleInPlaceSiteEx( IOleInPlaceSiteEx const & );
	void IOleInPlaceSiteEx();
	IOleInPlaceSiteEx & operator=( IOleInPlaceSiteEx && );
	IOleInPlaceSiteEx & operator=( IOleInPlaceSiteEx const & );
	/*0008*/
};

struct IOleInPlaceSiteWindowless : IOleInPlaceSiteEx {
	/*0090*/ virtual HRESULT CanWindowlessActivate() = 0;
	/*0098*/ virtual HRESULT GetCapture() = 0;
	/*00a0*/ virtual HRESULT SetCapture( INT ) = 0;
	/*00a8*/ virtual HRESULT GetFocus() = 0;
	/*00b0*/ virtual HRESULT SetFocus( INT ) = 0;
	/*00b8*/ virtual HRESULT GetDC( tagRECT const * , ULONG , HDC__ * * ) = 0;
	/*00c0*/ virtual HRESULT ReleaseDC( HDC__ * ) = 0;
	/*00c8*/ virtual HRESULT InvalidateRect( tagRECT const * , INT ) = 0;
	/*00d0*/ virtual HRESULT InvalidateRgn( HRGN__ * , INT ) = 0;
	/*00d8*/ virtual HRESULT ScrollRect( INT , INT , tagRECT const * , tagRECT const * ) = 0;
	/*00e0*/ virtual HRESULT AdjustRect( tagRECT * ) = 0;
	/*00e8*/ virtual HRESULT OnDefWindowMessage( UINT , ULONGLONG , LONGLONG , LONGLONG * ) = 0;
	void IOleInPlaceSiteWindowless( IOleInPlaceSiteWindowless && );
	void IOleInPlaceSiteWindowless( IOleInPlaceSiteWindowless const & );
	void IOleInPlaceSiteWindowless();
	IOleInPlaceSiteWindowless & operator=( IOleInPlaceSiteWindowless && );
	IOleInPlaceSiteWindowless & operator=( IOleInPlaceSiteWindowless const & );
	/*0008*/
};

struct IOleInPlaceUIWindow : IOleWindow {
	/*0028*/ virtual HRESULT GetBorder( tagRECT * ) = 0;
	/*0030*/ virtual HRESULT RequestBorderSpace( tagRECT const * ) = 0;
	/*0038*/ virtual HRESULT SetBorderSpace( tagRECT const * ) = 0;
	/*0040*/ virtual HRESULT SetActiveObject( IOleInPlaceActiveObject * , WCHAR const * ) = 0;
	void IOleInPlaceUIWindow( IOleInPlaceUIWindow && );
	void IOleInPlaceUIWindow( IOleInPlaceUIWindow const & );
	void IOleInPlaceUIWindow();
	IOleInPlaceUIWindow & operator=( IOleInPlaceUIWindow && );
	IOleInPlaceUIWindow & operator=( IOleInPlaceUIWindow const & );
	/*0008*/
};

struct IOleItemContainer : IOleContainer {
	/*0030*/ virtual HRESULT GetObjectW( WCHAR * , ULONG , IBindCtx * , _GUID const & , void * * ) = 0;
	/*0038*/ virtual HRESULT GetObjectStorage( WCHAR * , IBindCtx * , _GUID const & , void * * ) = 0;
	/*0040*/ virtual HRESULT IsRunning( WCHAR * ) = 0;
	void IOleItemContainer( IOleItemContainer && );
	void IOleItemContainer( IOleItemContainer const & );
	void IOleItemContainer();
	IOleItemContainer & operator=( IOleItemContainer && );
	IOleItemContainer & operator=( IOleItemContainer const & );
	/*0008*/
};

struct IOleLink : IUnknown {
	/*0018*/ virtual HRESULT SetUpdateOptions( ULONG ) = 0;
	/*0020*/ virtual HRESULT GetUpdateOptions( ULONG * ) = 0;
	/*0028*/ virtual HRESULT SetSourceMoniker( IMoniker * , _GUID const & ) = 0;
	/*0030*/ virtual HRESULT GetSourceMoniker( IMoniker * * ) = 0;
	/*0038*/ virtual HRESULT SetSourceDisplayName( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT GetSourceDisplayName( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT BindToSource( ULONG , IBindCtx * ) = 0;
	/*0050*/ virtual HRESULT BindIfRunning() = 0;
	/*0058*/ virtual HRESULT GetBoundSource( IUnknown * * ) = 0;
	/*0060*/ virtual HRESULT UnbindSource() = 0;
	/*0068*/ virtual HRESULT Update( IBindCtx * ) = 0;
	void IOleLink( IOleLink && );
	void IOleLink( IOleLink const & );
	void IOleLink();
	IOleLink & operator=( IOleLink && );
	IOleLink & operator=( IOleLink const & );
	/*0008*/
};

struct IOleObject : IUnknown {
	/*0018*/ virtual HRESULT SetClientSite( IOleClientSite * ) = 0;
	/*0020*/ virtual HRESULT GetClientSite( IOleClientSite * * ) = 0;
	/*0028*/ virtual HRESULT SetHostNames( WCHAR const * , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT Close( ULONG ) = 0;
	/*0038*/ virtual HRESULT SetMoniker( ULONG , IMoniker * ) = 0;
	/*0040*/ virtual HRESULT GetMoniker( ULONG , ULONG , IMoniker * * ) = 0;
	/*0048*/ virtual HRESULT InitFromData( IDataObject * , INT , ULONG ) = 0;
	/*0050*/ virtual HRESULT GetClipboardData( ULONG , IDataObject * * ) = 0;
	/*0058*/ virtual HRESULT DoVerb( LONG , tagMSG * , IOleClientSite * , LONG , HWND__ * , tagRECT const * ) = 0;
	/*0060*/ virtual HRESULT EnumVerbs( IEnumOLEVERB * * ) = 0;
	/*0068*/ virtual HRESULT Update() = 0;
	/*0070*/ virtual HRESULT IsUpToDate() = 0;
	/*0078*/ virtual HRESULT GetUserClassID( _GUID * ) = 0;
	/*0080*/ virtual HRESULT GetUserType( ULONG , WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT SetExtent( ULONG , tagSIZE * ) = 0;
	/*0090*/ virtual HRESULT GetExtent( ULONG , tagSIZE * ) = 0;
	/*0098*/ virtual HRESULT Advise( IAdviseSink * , ULONG * ) = 0;
	/*00a0*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*00a8*/ virtual HRESULT EnumAdvise( IEnumSTATDATA * * ) = 0;
	/*00b0*/ virtual HRESULT GetMiscStatus( ULONG , ULONG * ) = 0;
	/*00b8*/ virtual HRESULT SetColorScheme( tagLOGPALETTE * ) = 0;
	void IOleObject( IOleObject && );
	void IOleObject( IOleObject const & );
	void IOleObject();
	IOleObject & operator=( IOleObject && );
	IOleObject & operator=( IOleObject const & );
	/*0008*/
};

struct IOleParentUndoUnit : IOleUndoUnit {
	/*0038*/ virtual HRESULT Open( IOleParentUndoUnit * ) = 0;
	/*0040*/ virtual HRESULT Close( IOleParentUndoUnit * , INT ) = 0;
	/*0048*/ virtual HRESULT Add( IOleUndoUnit * ) = 0;
	/*0050*/ virtual HRESULT FindUnit( IOleUndoUnit * ) = 0;
	/*0058*/ virtual HRESULT GetParentState( ULONG * ) = 0;
	void IOleParentUndoUnit( IOleParentUndoUnit && );
	void IOleParentUndoUnit( IOleParentUndoUnit const & );
	void IOleParentUndoUnit();
	IOleParentUndoUnit & operator=( IOleParentUndoUnit && );
	IOleParentUndoUnit & operator=( IOleParentUndoUnit const & );
	/*0008*/
};

struct IOleUndoManager : IUnknown {
	/*0018*/ virtual HRESULT Open( IOleParentUndoUnit * ) = 0;
	/*0020*/ virtual HRESULT Close( IOleParentUndoUnit * , INT ) = 0;
	/*0028*/ virtual HRESULT Add( IOleUndoUnit * ) = 0;
	/*0030*/ virtual HRESULT GetOpenParentState( ULONG * ) = 0;
	/*0038*/ virtual HRESULT DiscardFrom( IOleUndoUnit * ) = 0;
	/*0040*/ virtual HRESULT UndoTo( IOleUndoUnit * ) = 0;
	/*0048*/ virtual HRESULT RedoTo( IOleUndoUnit * ) = 0;
	/*0050*/ virtual HRESULT EnumUndoable( IEnumOleUndoUnits * * ) = 0;
	/*0058*/ virtual HRESULT EnumRedoable( IEnumOleUndoUnits * * ) = 0;
	/*0060*/ virtual HRESULT GetLastUndoDescription( WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT GetLastRedoDescription( WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT Enable( INT ) = 0;
	void IOleUndoManager( IOleUndoManager && );
	void IOleUndoManager( IOleUndoManager const & );
	void IOleUndoManager();
	IOleUndoManager & operator=( IOleUndoManager && );
	IOleUndoManager & operator=( IOleUndoManager const & );
	/*0008*/
};

struct IOleUndoUnit : IUnknown {
	/*0018*/ virtual HRESULT Do( IOleUndoManager * ) = 0;
	/*0020*/ virtual HRESULT GetDescription( WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetUnitType( _GUID * , LONG * ) = 0;
	/*0030*/ virtual HRESULT OnNextAdd() = 0;
	void IOleUndoUnit( IOleUndoUnit && );
	void IOleUndoUnit( IOleUndoUnit const & );
	void IOleUndoUnit();
	IOleUndoUnit & operator=( IOleUndoUnit && );
	IOleUndoUnit & operator=( IOleUndoUnit const & );
	/*0008*/
};

struct IOleWindow : IUnknown {
	/*0018*/ virtual HRESULT GetWindow( HWND__ * * ) = 0;
	/*0020*/ virtual HRESULT ContextSensitiveHelp( INT ) = 0;
	void IOleWindow( IOleWindow && );
	void IOleWindow( IOleWindow const & );
	void IOleWindow();
	IOleWindow & operator=( IOleWindow && );
	IOleWindow & operator=( IOleWindow const & );
	/*0008*/
};

struct IOpenControlPanel : IUnknown {
	/*0018*/ virtual HRESULT Open( WCHAR const * , WCHAR const * , IUnknown * ) = 0;
	/*0020*/ virtual HRESULT GetPath( WCHAR const * , WCHAR * , UINT ) = 0;
	/*0028*/ virtual HRESULT GetCurrentView( CPVIEW * ) = 0;
	void IOpenControlPanel( IOpenControlPanel && );
	void IOpenControlPanel( IOpenControlPanel const & );
	void IOpenControlPanel();
	IOpenControlPanel & operator=( IOpenControlPanel && );
	IOpenControlPanel & operator=( IOpenControlPanel const & );
	/*0008*/
};

struct IOpenSearchSource : IUnknown {
	/*0018*/ virtual HRESULT GetResults( HWND__ * , WCHAR const * , ULONG , ULONG , _GUID const & , void * * ) = 0;
	void IOpenSearchSource( IOpenSearchSource && );
	void IOpenSearchSource( IOpenSearchSource const & );
	void IOpenSearchSource();
	IOpenSearchSource & operator=( IOpenSearchSource && );
	IOpenSearchSource & operator=( IOpenSearchSource const & );
	/*0008*/
};

struct IOperationsProgressDialog : IUnknown {
	/*0018*/ virtual HRESULT StartProgressDialog( HWND__ * , ULONG ) = 0;
	/*0020*/ virtual HRESULT StopProgressDialog() = 0;
	/*0028*/ virtual HRESULT SetOperation( _SPACTION ) = 0;
	/*0030*/ virtual HRESULT SetMode( ULONG ) = 0;
	/*0038*/ virtual HRESULT UpdateProgress( ULONGLONG , ULONGLONG , ULONGLONG , ULONGLONG , ULONGLONG , ULONGLONG ) = 0;
	/*0040*/ virtual HRESULT UpdateLocations( IShellItem * , IShellItem * , IShellItem * ) = 0;
	/*0048*/ virtual HRESULT ResetTimer() = 0;
	/*0050*/ virtual HRESULT PauseTimer() = 0;
	/*0058*/ virtual HRESULT ResumeTimer() = 0;
	/*0060*/ virtual HRESULT GetMilliseconds( ULONGLONG * , ULONGLONG * ) = 0;
	/*0068*/ virtual HRESULT GetOperationStatus( PDOPSTATUS * ) = 0;
	void IOperationsProgressDialog( IOperationsProgressDialog && );
	void IOperationsProgressDialog( IOperationsProgressDialog const & );
	void IOperationsProgressDialog();
	IOperationsProgressDialog & operator=( IOperationsProgressDialog && );
	IOperationsProgressDialog & operator=( IOperationsProgressDialog const & );
	/*0008*/
};

struct IOplockStorage : IUnknown {
	/*0018*/ virtual HRESULT CreateStorageEx( WCHAR const * , ULONG , ULONG , ULONG , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT OpenStorageEx( WCHAR const * , ULONG , ULONG , ULONG , _GUID const & , void * * ) = 0;
	void IOplockStorage( IOplockStorage && );
	void IOplockStorage( IOplockStorage const & );
	void IOplockStorage();
	IOplockStorage & operator=( IOplockStorage && );
	IOplockStorage & operator=( IOplockStorage const & );
	/*0008*/
};

union IP6_ADDRESS {
	/*0000*/ ULONGLONG IP6Qword[0x2];
	/*0000*/ ULONG IP6Dword[0x4];
	/*0000*/ USHORT IP6Word[0x8];
	/*0000*/ UCHAR IP6Byte[0x10];
	/*0010*/
};

enum IPPROTO {
	IPPROTO_HOPOPTS = 0x0,
	IPPROTO_ICMP = 0x1,
	IPPROTO_IGMP = 0x2,
	IPPROTO_GGP = 0x3,
	IPPROTO_IPV4 = 0x4,
	IPPROTO_ST = 0x5,
	IPPROTO_TCP = 0x6,
	IPPROTO_CBT = 0x7,
	IPPROTO_EGP = 0x8,
	IPPROTO_IGP = 0x9,
	IPPROTO_PUP = 0xc,
	IPPROTO_UDP = 0x11,
	IPPROTO_IDP = 0x16,
	IPPROTO_RDP = 0x1b,
	IPPROTO_IPV6 = 0x29,
	IPPROTO_ROUTING = 0x2b,
	IPPROTO_FRAGMENT = 0x2c,
	IPPROTO_ESP = 0x32,
	IPPROTO_AH = 0x33,
	IPPROTO_ICMPV6 = 0x3a,
	IPPROTO_NONE = 0x3b,
	IPPROTO_DSTOPTS = 0x3c,
	IPPROTO_ND = 0x4d,
	IPPROTO_ICLFXBM = 0x4e,
	IPPROTO_PIM = 0x67,
	IPPROTO_PGM = 0x71,
	IPPROTO_L2TP = 0x73,
	IPPROTO_SCTP = 0x84,
	IPPROTO_RAW = 0xff,
	IPPROTO_MAX = 0x100,
	IPPROTO_RESERVED_RAW = 0x101,
	IPPROTO_RESERVED_IPSEC = 0x102,
	IPPROTO_RESERVED_IPSECOFFLOAD = 0x103,
	IPPROTO_RESERVED_WNV = 0x104,
	IPPROTO_RESERVED_MAX = 0x105
};

struct IPSFactoryBuffer : IUnknown {
	/*0018*/ virtual HRESULT CreateProxy( IUnknown * , _GUID const & , IRpcProxyBuffer * * , void * * ) = 0;
	/*0020*/ virtual HRESULT CreateStub( _GUID const & , IUnknown * , IRpcStubBuffer * * ) = 0;
	void IPSFactoryBuffer( IPSFactoryBuffer && );
	void IPSFactoryBuffer( IPSFactoryBuffer const & );
	void IPSFactoryBuffer();
	IPSFactoryBuffer & operator=( IPSFactoryBuffer && );
	IPSFactoryBuffer & operator=( IPSFactoryBuffer const & );
	/*0008*/
};

struct IPSFactoryBufferVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IPSFactoryBuffer * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IPSFactoryBuffer * );
	/*0010*/ ULONG (* Release)( IPSFactoryBuffer * );
	/*0018*/ HRESULT (* CreateProxy)( IPSFactoryBuffer * , IUnknown * , _GUID const * , IRpcProxyBuffer * * , void * * );
	/*0020*/ HRESULT (* CreateStub)( IPSFactoryBuffer * , _GUID const * , IUnknown * , IRpcStubBuffer * * );
	/*0028*/
};

struct IP_ADDRESS_STRING {
	/*0000*/ CHAR String[0x10];
	/*0010*/
};

struct IP_DESCRIPTOR {
	/*0000*/ ULONG IPDescriptorMasks;
	/*0004*/ USHORT SinglePort;
	/*0006*/ USHORT PortRangeLow;
	/*0008*/ USHORT PortRangeHigh;
	/*000a*/ USHORT ServiceType;
	/*000c*/ ULONG FlowLabel;
	/*0010*/ ULONG IPSecType;
	/*0014*/ in_addr IPv4Address;
	/*0018*/ in_addr IPv4AddressMaskField;
	/*001c*/ in6_addr IPv6Address;
	/*002c*/ UCHAR IPv6PreFixLength;
	/*002d*/ UCHAR ProtocolId;
	/*0030*/
};

struct IPackageDebugSettings : IUnknown {
	/*0018*/ virtual HRESULT EnableDebugging( WCHAR const * , WCHAR const * , WCHAR * ) = 0;
	/*0020*/ virtual HRESULT DisableDebugging( WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT Suspend( WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT Resume( WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT TerminateAllProcesses( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT SetTargetSessionId( ULONG ) = 0;
	/*0048*/ virtual HRESULT EnumerateBackgroundTasks( WCHAR const * , ULONG * , _GUID const * * , WCHAR const * * * ) = 0;
	/*0050*/ virtual HRESULT ActivateBackgroundTask( _GUID const * ) = 0;
	/*0058*/ virtual HRESULT StartServicing( WCHAR const * ) = 0;
	/*0060*/ virtual HRESULT StopServicing( WCHAR const * ) = 0;
	/*0068*/ virtual HRESULT StartSessionRedirection( WCHAR const * , ULONG ) = 0;
	/*0070*/ virtual HRESULT StopSessionRedirection( WCHAR const * ) = 0;
	/*0078*/ virtual HRESULT GetPackageExecutionState( WCHAR const * , PACKAGE_EXECUTION_STATE * ) = 0;
	/*0080*/ virtual HRESULT RegisterForPackageStateChanges( WCHAR const * , IPackageExecutionStateChangeNotification * , ULONG * ) = 0;
	/*0088*/ virtual HRESULT UnregisterForPackageStateChanges( ULONG ) = 0;
	void IPackageDebugSettings( IPackageDebugSettings && );
	void IPackageDebugSettings( IPackageDebugSettings const & );
	void IPackageDebugSettings();
	IPackageDebugSettings & operator=( IPackageDebugSettings && );
	IPackageDebugSettings & operator=( IPackageDebugSettings const & );
	/*0008*/
};

struct IPackageDebugSettings2 : IPackageDebugSettings {
	/*0090*/ virtual HRESULT EnumerateApps( WCHAR const * , ULONG * , WCHAR * * * , WCHAR * * * ) = 0;
	void IPackageDebugSettings2( IPackageDebugSettings2 && );
	void IPackageDebugSettings2( IPackageDebugSettings2 const & );
	void IPackageDebugSettings2();
	IPackageDebugSettings2 & operator=( IPackageDebugSettings2 && );
	IPackageDebugSettings2 & operator=( IPackageDebugSettings2 const & );
	/*0008*/
};

struct IPackageExecutionStateChangeNotification : IUnknown {
	/*0018*/ virtual HRESULT OnStateChanged( WCHAR const * , PACKAGE_EXECUTION_STATE ) = 0;
	void IPackageExecutionStateChangeNotification( IPackageExecutionStateChangeNotification && );
	void IPackageExecutionStateChangeNotification( IPackageExecutionStateChangeNotification const & );
	void IPackageExecutionStateChangeNotification();
	IPackageExecutionStateChangeNotification & operator=( IPackageExecutionStateChangeNotification && );
	IPackageExecutionStateChangeNotification & operator=( IPackageExecutionStateChangeNotification const & );
	/*0008*/
};

struct IParentAndItem : IUnknown {
	/*0018*/ virtual HRESULT SetParentAndItem( _ITEMIDLIST const __unaligned * , IShellFolder * , _ITEMIDLIST const __unaligned * ) = 0;
	/*0020*/ virtual HRESULT GetParentAndItem( _ITEMIDLIST __unaligned * * , IShellFolder * * , _ITEMIDLIST __unaligned * * ) = 0;
	void IParentAndItem( IParentAndItem && );
	void IParentAndItem( IParentAndItem const & );
	void IParentAndItem();
	IParentAndItem & operator=( IParentAndItem && );
	IParentAndItem & operator=( IParentAndItem const & );
	/*0008*/
};

struct IParseAndCreateItem : IUnknown {
	/*0018*/ virtual HRESULT SetItem( IShellItem * ) = 0;
	/*0020*/ virtual HRESULT GetItem( _GUID const & , void * * ) = 0;
	void IParseAndCreateItem( IParseAndCreateItem && );
	void IParseAndCreateItem( IParseAndCreateItem const & );
	void IParseAndCreateItem();
	IParseAndCreateItem & operator=( IParseAndCreateItem && );
	IParseAndCreateItem & operator=( IParseAndCreateItem const & );
	/*0008*/
};

struct IParseDisplayName : IUnknown {
	/*0018*/ virtual HRESULT ParseDisplayName( IBindCtx * , WCHAR * , ULONG * , IMoniker * * ) = 0;
	void IParseDisplayName( IParseDisplayName && );
	void IParseDisplayName( IParseDisplayName const & );
	void IParseDisplayName();
	IParseDisplayName & operator=( IParseDisplayName && );
	IParseDisplayName & operator=( IParseDisplayName const & );
	/*0008*/
};

struct IPerPropertyBrowsing : IUnknown {
	/*0018*/ virtual HRESULT GetDisplayString( LONG , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT MapPropertyToPage( LONG , _GUID * ) = 0;
	/*0028*/ virtual HRESULT GetPredefinedStrings( LONG , tagCALPOLESTR * , tagCADWORD * ) = 0;
	/*0030*/ virtual HRESULT GetPredefinedValue( LONG , ULONG , tagVARIANT * ) = 0;
	void IPerPropertyBrowsing( IPerPropertyBrowsing && );
	void IPerPropertyBrowsing( IPerPropertyBrowsing const & );
	void IPerPropertyBrowsing();
	IPerPropertyBrowsing & operator=( IPerPropertyBrowsing && );
	IPerPropertyBrowsing & operator=( IPerPropertyBrowsing const & );
	/*0008*/
};

struct IPersist : IUnknown {
	/*0018*/ virtual HRESULT GetClassID( _GUID * ) = 0;
	void IPersist( IPersist && );
	void IPersist( IPersist const & );
	void IPersist();
	IPersist & operator=( IPersist && );
	IPersist & operator=( IPersist const & );
	/*0008*/
};

struct IPersistFile : IPersist {
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT Load( WCHAR const * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Save( WCHAR const * , INT ) = 0;
	/*0038*/ virtual HRESULT SaveCompleted( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT GetCurFile( WCHAR * * ) = 0;
	void IPersistFile( IPersistFile && );
	void IPersistFile( IPersistFile const & );
	void IPersistFile();
	IPersistFile & operator=( IPersistFile && );
	IPersistFile & operator=( IPersistFile const & );
	/*0008*/
};

struct IPersistFolder : IPersist {
	/*0020*/ virtual HRESULT Initialize( _ITEMIDLIST const __unaligned * ) = 0;
	void IPersistFolder( IPersistFolder && );
	void IPersistFolder( IPersistFolder const & );
	void IPersistFolder();
	IPersistFolder & operator=( IPersistFolder && );
	IPersistFolder & operator=( IPersistFolder const & );
	/*0008*/
};

struct IPersistFolder2 : IPersistFolder {
	/*0028*/ virtual HRESULT GetCurFolder( _ITEMIDLIST __unaligned * * ) = 0;
	void IPersistFolder2( IPersistFolder2 && );
	void IPersistFolder2( IPersistFolder2 const & );
	void IPersistFolder2();
	IPersistFolder2 & operator=( IPersistFolder2 && );
	IPersistFolder2 & operator=( IPersistFolder2 const & );
	/*0008*/
};

struct IPersistFolder3 : IPersistFolder2 {
	/*0030*/ virtual HRESULT InitializeEx( IBindCtx * , _ITEMIDLIST const __unaligned * , _PERSIST_FOLDER_TARGET_INFO const * ) = 0;
	/*0038*/ virtual HRESULT GetFolderTargetInfo( _PERSIST_FOLDER_TARGET_INFO * ) = 0;
	void IPersistFolder3( IPersistFolder3 && );
	void IPersistFolder3( IPersistFolder3 const & );
	void IPersistFolder3();
	IPersistFolder3 & operator=( IPersistFolder3 && );
	IPersistFolder3 & operator=( IPersistFolder3 const & );
	/*0008*/
};

struct IPersistIDList : IPersist {
	/*0020*/ virtual HRESULT SetIDList( _ITEMIDLIST const __unaligned * ) = 0;
	/*0028*/ virtual HRESULT GetIDList( _ITEMIDLIST __unaligned * * ) = 0;
	void IPersistIDList( IPersistIDList && );
	void IPersistIDList( IPersistIDList const & );
	void IPersistIDList();
	IPersistIDList & operator=( IPersistIDList && );
	IPersistIDList & operator=( IPersistIDList const & );
	/*0008*/
};

struct IPersistMemory : IPersist {
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT Load( void * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Save( void * , INT , ULONG ) = 0;
	/*0038*/ virtual HRESULT GetSizeMax( ULONG * ) = 0;
	/*0040*/ virtual HRESULT InitNew() = 0;
	void IPersistMemory( IPersistMemory && );
	void IPersistMemory( IPersistMemory const & );
	void IPersistMemory();
	IPersistMemory & operator=( IPersistMemory && );
	IPersistMemory & operator=( IPersistMemory const & );
	/*0008*/
};

struct IPersistMoniker : IUnknown {
	/*0018*/ virtual HRESULT GetClassID( _GUID * ) = 0;
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT Load( INT , IMoniker * , IBindCtx * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Save( IMoniker * , IBindCtx * , INT ) = 0;
	/*0038*/ virtual HRESULT SaveCompleted( IMoniker * , IBindCtx * ) = 0;
	/*0040*/ virtual HRESULT GetCurMoniker( IMoniker * * ) = 0;
	void IPersistMoniker( IPersistMoniker && );
	void IPersistMoniker( IPersistMoniker const & );
	void IPersistMoniker();
	IPersistMoniker & operator=( IPersistMoniker && );
	IPersistMoniker & operator=( IPersistMoniker const & );
	/*0008*/
};

struct IPersistNetConnection : IPersist {
	/*0020*/ virtual HRESULT GetSizeMax( ULONG * ) = 0;
	/*0028*/ virtual HRESULT Load( UCHAR const * , ULONG ) = 0;
	/*0030*/ virtual HRESULT Save( UCHAR * , ULONG ) = 0;
	void IPersistNetConnection( IPersistNetConnection && );
	void IPersistNetConnection( IPersistNetConnection const & );
	void IPersistNetConnection();
	IPersistNetConnection & operator=( IPersistNetConnection && );
	IPersistNetConnection & operator=( IPersistNetConnection const & );
	/*0008*/
};

struct IPersistPropertyBag : IPersist {
	/*0020*/ virtual HRESULT InitNew() = 0;
	/*0028*/ virtual HRESULT Load( IPropertyBag * , IErrorLog * ) = 0;
	/*0030*/ virtual HRESULT Save( IPropertyBag * , INT , INT ) = 0;
	void IPersistPropertyBag( IPersistPropertyBag && );
	void IPersistPropertyBag( IPersistPropertyBag const & );
	void IPersistPropertyBag();
	IPersistPropertyBag & operator=( IPersistPropertyBag && );
	IPersistPropertyBag & operator=( IPersistPropertyBag const & );
	/*0008*/
};

struct IPersistPropertyBag2 : IPersist {
	/*0020*/ virtual HRESULT InitNew() = 0;
	/*0028*/ virtual HRESULT Load( IPropertyBag2 * , IErrorLog * ) = 0;
	/*0030*/ virtual HRESULT Save( IPropertyBag2 * , INT , INT ) = 0;
	/*0038*/ virtual HRESULT IsDirty() = 0;
	void IPersistPropertyBag2( IPersistPropertyBag2 && );
	void IPersistPropertyBag2( IPersistPropertyBag2 const & );
	void IPersistPropertyBag2();
	IPersistPropertyBag2 & operator=( IPersistPropertyBag2 && );
	IPersistPropertyBag2 & operator=( IPersistPropertyBag2 const & );
	/*0008*/
};

struct IPersistSerializedPropStorage : IUnknown {
	/*0018*/ virtual HRESULT SetFlags( INT ) = 0;
	/*0020*/ virtual HRESULT SetPropertyStorage( tagSERIALIZEDPROPSTORAGE const __unaligned * , ULONG ) = 0;
	/*0028*/ virtual HRESULT GetPropertyStorage( tagSERIALIZEDPROPSTORAGE * * , ULONG * ) = 0;
	void IPersistSerializedPropStorage( IPersistSerializedPropStorage && );
	void IPersistSerializedPropStorage( IPersistSerializedPropStorage const & );
	void IPersistSerializedPropStorage();
	IPersistSerializedPropStorage & operator=( IPersistSerializedPropStorage && );
	IPersistSerializedPropStorage & operator=( IPersistSerializedPropStorage const & );
	/*0008*/
};

struct IPersistSerializedPropStorage2 : IPersistSerializedPropStorage {
	/*0030*/ virtual HRESULT GetPropertyStorageSize( ULONG * ) = 0;
	/*0038*/ virtual HRESULT GetPropertyStorageBuffer( tagSERIALIZEDPROPSTORAGE * , ULONG , ULONG * ) = 0;
	void IPersistSerializedPropStorage2( IPersistSerializedPropStorage2 && );
	void IPersistSerializedPropStorage2( IPersistSerializedPropStorage2 const & );
	void IPersistSerializedPropStorage2();
	IPersistSerializedPropStorage2 & operator=( IPersistSerializedPropStorage2 && );
	IPersistSerializedPropStorage2 & operator=( IPersistSerializedPropStorage2 const & );
	/*0008*/
};

struct IPersistStorage : IPersist {
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT InitNew( IStorage * ) = 0;
	/*0030*/ virtual HRESULT Load( IStorage * ) = 0;
	/*0038*/ virtual HRESULT Save( IStorage * , INT ) = 0;
	/*0040*/ virtual HRESULT SaveCompleted( IStorage * ) = 0;
	/*0048*/ virtual HRESULT HandsOffStorage() = 0;
	void IPersistStorage( IPersistStorage && );
	void IPersistStorage( IPersistStorage const & );
	void IPersistStorage();
	IPersistStorage & operator=( IPersistStorage && );
	IPersistStorage & operator=( IPersistStorage const & );
	/*0008*/
};

struct IPersistStream : IPersist {
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT Load( IStream * ) = 0;
	/*0030*/ virtual HRESULT Save( IStream * , INT ) = 0;
	/*0038*/ virtual HRESULT GetSizeMax( _ULARGE_INTEGER * ) = 0;
	void IPersistStream( IPersistStream && );
	void IPersistStream( IPersistStream const & );
	void IPersistStream();
	IPersistStream & operator=( IPersistStream && );
	IPersistStream & operator=( IPersistStream const & );
	/*0008*/
};

struct IPersistStreamInit : IPersist {
	/*0020*/ virtual HRESULT IsDirty() = 0;
	/*0028*/ virtual HRESULT Load( IStream * ) = 0;
	/*0030*/ virtual HRESULT Save( IStream * , INT ) = 0;
	/*0038*/ virtual HRESULT GetSizeMax( _ULARGE_INTEGER * ) = 0;
	/*0040*/ virtual HRESULT InitNew() = 0;
	void IPersistStreamInit( IPersistStreamInit && );
	void IPersistStreamInit( IPersistStreamInit const & );
	void IPersistStreamInit();
	IPersistStreamInit & operator=( IPersistStreamInit && );
	IPersistStreamInit & operator=( IPersistStreamInit const & );
	/*0008*/
};

struct IPicture : IUnknown {
	/*0018*/ virtual HRESULT get_Handle( UINT * ) = 0;
	/*0020*/ virtual HRESULT get_hPal( UINT * ) = 0;
	/*0028*/ virtual HRESULT get_Type( SHORT * ) = 0;
	/*0030*/ virtual HRESULT get_Width( LONG * ) = 0;
	/*0038*/ virtual HRESULT get_Height( LONG * ) = 0;
	/*0040*/ virtual HRESULT Render( HDC__ * , LONG , LONG , LONG , LONG , LONG , LONG , LONG , LONG , tagRECT const * ) = 0;
	/*0048*/ virtual HRESULT set_hPal( UINT ) = 0;
	/*0050*/ virtual HRESULT get_CurDC( HDC__ * * ) = 0;
	/*0058*/ virtual HRESULT SelectPicture( HDC__ * , HDC__ * * , UINT * ) = 0;
	/*0060*/ virtual HRESULT get_KeepOriginalFormat( INT * ) = 0;
	/*0068*/ virtual HRESULT put_KeepOriginalFormat( INT ) = 0;
	/*0070*/ virtual HRESULT PictureChanged() = 0;
	/*0078*/ virtual HRESULT SaveAsFile( IStream * , INT , LONG * ) = 0;
	/*0080*/ virtual HRESULT get_Attributes( ULONG * ) = 0;
	void IPicture( IPicture && );
	void IPicture( IPicture const & );
	void IPicture();
	IPicture & operator=( IPicture && );
	IPicture & operator=( IPicture const & );
	/*0008*/
};

struct IPicture2 : IUnknown {
	/*0018*/ virtual HRESULT get_Handle( ULONGLONG * ) = 0;
	/*0020*/ virtual HRESULT get_hPal( ULONGLONG * ) = 0;
	/*0028*/ virtual HRESULT get_Type( SHORT * ) = 0;
	/*0030*/ virtual HRESULT get_Width( LONG * ) = 0;
	/*0038*/ virtual HRESULT get_Height( LONG * ) = 0;
	/*0040*/ virtual HRESULT Render( HDC__ * , LONG , LONG , LONG , LONG , LONG , LONG , LONG , LONG , tagRECT const * ) = 0;
	/*0048*/ virtual HRESULT set_hPal( ULONGLONG ) = 0;
	/*0050*/ virtual HRESULT get_CurDC( HDC__ * * ) = 0;
	/*0058*/ virtual HRESULT SelectPicture( HDC__ * , HDC__ * * , ULONGLONG * ) = 0;
	/*0060*/ virtual HRESULT get_KeepOriginalFormat( INT * ) = 0;
	/*0068*/ virtual HRESULT put_KeepOriginalFormat( INT ) = 0;
	/*0070*/ virtual HRESULT PictureChanged() = 0;
	/*0078*/ virtual HRESULT SaveAsFile( IStream * , INT , LONG * ) = 0;
	/*0080*/ virtual HRESULT get_Attributes( ULONG * ) = 0;
	void IPicture2( IPicture2 && );
	void IPicture2( IPicture2 const & );
	void IPicture2();
	IPicture2 & operator=( IPicture2 && );
	IPicture2 & operator=( IPicture2 const & );
	/*0008*/
};

struct IPictureDisp : IDispatch {
	void IPictureDisp( IPictureDisp && );
	void IPictureDisp( IPictureDisp const & );
	void IPictureDisp();
	IPictureDisp & operator=( IPictureDisp && );
	IPictureDisp & operator=( IPictureDisp const & );
	/*0008*/
};

struct IPipeByte : IUnknown {
	/*0018*/ virtual HRESULT Pull( UCHAR * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Push( UCHAR * , ULONG ) = 0;
	void IPipeByte( IPipeByte && );
	void IPipeByte( IPipeByte const & );
	void IPipeByte();
	IPipeByte & operator=( IPipeByte && );
	IPipeByte & operator=( IPipeByte const & );
	/*0008*/
};

struct IPipeDouble : IUnknown {
	/*0018*/ virtual HRESULT Pull( double * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Push( double * , ULONG ) = 0;
	void IPipeDouble( IPipeDouble && );
	void IPipeDouble( IPipeDouble const & );
	void IPipeDouble();
	IPipeDouble & operator=( IPipeDouble && );
	IPipeDouble & operator=( IPipeDouble const & );
	/*0008*/
};

struct IPipeLong : IUnknown {
	/*0018*/ virtual HRESULT Pull( LONG * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Push( LONG * , ULONG ) = 0;
	void IPipeLong( IPipeLong && );
	void IPipeLong( IPipeLong const & );
	void IPipeLong();
	IPipeLong & operator=( IPipeLong && );
	IPipeLong & operator=( IPipeLong const & );
	/*0008*/
};

struct IPointerInactive : IUnknown {
	/*0018*/ virtual HRESULT GetActivationPolicy( ULONG * ) = 0;
	/*0020*/ virtual HRESULT OnInactiveMouseMove( tagRECT const * , LONG , LONG , ULONG ) = 0;
	/*0028*/ virtual HRESULT OnInactiveSetCursor( tagRECT const * , LONG , LONG , ULONG , INT ) = 0;
	void IPointerInactive( IPointerInactive && );
	void IPointerInactive( IPointerInactive const & );
	void IPointerInactive();
	IPointerInactive & operator=( IPointerInactive && );
	IPointerInactive & operator=( IPointerInactive const & );
	/*0008*/
};

struct IPreviewHandler : IUnknown {
	/*0018*/ virtual HRESULT SetWindow( HWND__ * , tagRECT const * ) = 0;
	/*0020*/ virtual HRESULT SetRect( tagRECT const * ) = 0;
	/*0028*/ virtual HRESULT DoPreview() = 0;
	/*0030*/ virtual HRESULT Unload() = 0;
	/*0038*/ virtual HRESULT SetFocus() = 0;
	/*0040*/ virtual HRESULT QueryFocus( HWND__ * * ) = 0;
	/*0048*/ virtual HRESULT TranslateAcceleratorW( tagMSG * ) = 0;
	void IPreviewHandler( IPreviewHandler && );
	void IPreviewHandler( IPreviewHandler const & );
	void IPreviewHandler();
	IPreviewHandler & operator=( IPreviewHandler && );
	IPreviewHandler & operator=( IPreviewHandler const & );
	/*0008*/
};

struct IPreviewHandlerFrame : IUnknown {
	/*0018*/ virtual HRESULT GetWindowContext( PREVIEWHANDLERFRAMEINFO * ) = 0;
	/*0020*/ virtual HRESULT TranslateAcceleratorW( tagMSG * ) = 0;
	void IPreviewHandlerFrame( IPreviewHandlerFrame && );
	void IPreviewHandlerFrame( IPreviewHandlerFrame const & );
	void IPreviewHandlerFrame();
	IPreviewHandlerFrame & operator=( IPreviewHandlerFrame && );
	IPreviewHandlerFrame & operator=( IPreviewHandlerFrame const & );
	/*0008*/
};

struct IPreviewHandlerVisuals : IUnknown {
	/*0018*/ virtual HRESULT SetBackgroundColor( ULONG ) = 0;
	/*0020*/ virtual HRESULT SetFont( tagLOGFONTW const * ) = 0;
	/*0028*/ virtual HRESULT SetTextColor( ULONG ) = 0;
	void IPreviewHandlerVisuals( IPreviewHandlerVisuals && );
	void IPreviewHandlerVisuals( IPreviewHandlerVisuals const & );
	void IPreviewHandlerVisuals();
	IPreviewHandlerVisuals & operator=( IPreviewHandlerVisuals && );
	IPreviewHandlerVisuals & operator=( IPreviewHandlerVisuals const & );
	/*0008*/
};

struct IPreviewItem : IRelatedItem {
	void IPreviewItem( IPreviewItem && );
	void IPreviewItem( IPreviewItem const & );
	void IPreviewItem();
	IPreviewItem & operator=( IPreviewItem && );
	IPreviewItem & operator=( IPreviewItem const & );
	/*0008*/
};

struct IProcessInitControl : IUnknown {
	/*0018*/ virtual HRESULT ResetInitializerTimeout( ULONG ) = 0;
	void IProcessInitControl( IProcessInitControl && );
	void IProcessInitControl( IProcessInitControl const & );
	void IProcessInitControl();
	IProcessInitControl & operator=( IProcessInitControl && );
	IProcessInitControl & operator=( IProcessInitControl const & );
	/*0008*/
};

struct IProcessLock : IUnknown {
	/*0018*/ virtual ULONG AddRefOnProcess() = 0;
	/*0020*/ virtual ULONG ReleaseRefOnProcess() = 0;
	void IProcessLock( IProcessLock && );
	void IProcessLock( IProcessLock const & );
	void IProcessLock();
	IProcessLock & operator=( IProcessLock && );
	IProcessLock & operator=( IProcessLock const & );
	/*0008*/
};

struct IProfAdmin : IUnknown {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*0018*/ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*0020*/ virtual HRESULT GetProfileTable( ULONG , IMAPITable * * ) = 0;
	/*0028*/ virtual HRESULT CreateProfile( WCHAR * , WCHAR * , ULONG , ULONG ) = 0;
	/*0030*/ virtual HRESULT DeleteProfile( WCHAR * , ULONG ) = 0;
	/*0038*/ virtual HRESULT ChangeProfilePassword( WCHAR * , WCHAR * , WCHAR * , ULONG ) = 0;
	/*0040*/ virtual HRESULT CopyProfile( WCHAR * , WCHAR * , WCHAR * , ULONG , ULONG ) = 0;
	/*0048*/ virtual HRESULT RenameProfile( WCHAR * , WCHAR * , WCHAR * , ULONG , ULONG ) = 0;
	/*0050*/ virtual HRESULT SetDefaultProfile( WCHAR * , ULONG ) = 0;
	/*0058*/ virtual HRESULT AdminServices( WCHAR * , WCHAR * , ULONG , ULONG , IMsgServiceAdmin * * ) = 0;
	void IProfAdmin( IProfAdmin && );
	void IProfAdmin( IProfAdmin const & );
	void IProfAdmin();
	IProfAdmin & operator=( IProfAdmin && );
	IProfAdmin & operator=( IProfAdmin const & );
	/*0008*/
};

struct IProfSect : IMAPIProp {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*    */ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*    */ virtual HRESULT SaveChanges( ULONG ) = 0;
	/*    */ virtual HRESULT GetProps( _SPropTagArray * , ULONG , ULONG * , _SPropValue * * ) = 0;
	/*    */ virtual HRESULT GetPropList( ULONG , _SPropTagArray * * ) = 0;
	/*    */ virtual HRESULT OpenProperty( ULONG , _GUID const * , ULONG , ULONG , IUnknown * * ) = 0;
	/*    */ virtual HRESULT SetProps( ULONG , _SPropValue * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT DeleteProps( _SPropTagArray * , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyTo( ULONG , _GUID const * , _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT CopyProps( _SPropTagArray * , ULONG , IMAPIProgress * , _GUID const * , void * , ULONG , _SPropProblemArray * * ) = 0;
	/*    */ virtual HRESULT GetNamesFromIDs( _SPropTagArray * * , _GUID * , ULONG , ULONG * , _MAPINAMEID * * * ) = 0;
	/*    */ virtual HRESULT GetIDsFromNames( ULONG , _MAPINAMEID * * , ULONG , _SPropTagArray * * ) = 0;
	void IProfSect( IProfSect && );
	void IProfSect( IProfSect const & );
	void IProfSect();
	IProfSect & operator=( IProfSect && );
	IProfSect & operator=( IProfSect const & );
	/*0008*/
};

struct IProfferService : IUnknown {
	/*0018*/ virtual HRESULT ProfferService( _GUID const & , IServiceProvider * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT RevokeService( ULONG ) = 0;
	void IProfferService( IProfferService && );
	void IProfferService( IProfferService const & );
	void IProfferService();
	IProfferService & operator=( IProfferService && );
	IProfferService & operator=( IProfferService const & );
	/*0008*/
};

struct IProgressNotify : IUnknown {
	/*0018*/ virtual HRESULT OnProgress( ULONG , ULONG , INT , INT ) = 0;
	void IProgressNotify( IProgressNotify && );
	void IProgressNotify( IProgressNotify const & );
	void IProgressNotify();
	IProgressNotify & operator=( IProgressNotify && );
	IProgressNotify & operator=( IProgressNotify const & );
	/*0008*/
};

struct IPropertyBag : IUnknown {
	/*0018*/ virtual HRESULT Read( WCHAR const * , tagVARIANT * , IErrorLog * ) = 0;
	/*0020*/ virtual HRESULT Write( WCHAR const * , tagVARIANT * ) = 0;
	void IPropertyBag( IPropertyBag && );
	void IPropertyBag( IPropertyBag const & );
	void IPropertyBag();
	IPropertyBag & operator=( IPropertyBag && );
	IPropertyBag & operator=( IPropertyBag const & );
	/*0008*/
};

struct IPropertyBag2 : IUnknown {
	/*0018*/ virtual HRESULT Read( ULONG , tagPROPBAG2 * , IErrorLog * , tagVARIANT * , HRESULT * ) = 0;
	/*0020*/ virtual HRESULT Write( ULONG , tagPROPBAG2 * , tagVARIANT * ) = 0;
	/*0028*/ virtual HRESULT CountProperties( ULONG * ) = 0;
	/*0030*/ virtual HRESULT GetPropertyInfo( ULONG , ULONG , tagPROPBAG2 * , ULONG * ) = 0;
	/*0038*/ virtual HRESULT LoadObject( WCHAR const * , ULONG , IUnknown * , IErrorLog * ) = 0;
	void IPropertyBag2( IPropertyBag2 && );
	void IPropertyBag2( IPropertyBag2 const & );
	void IPropertyBag2();
	IPropertyBag2 & operator=( IPropertyBag2 && );
	IPropertyBag2 & operator=( IPropertyBag2 const & );
	/*0008*/
};

struct IPropertyChange : IObjectWithPropertyKey {
	/*0028*/ virtual HRESULT ApplyToPropVariant( tagPROPVARIANT const & , tagPROPVARIANT * ) = 0;
	void IPropertyChange( IPropertyChange && );
	void IPropertyChange( IPropertyChange const & );
	void IPropertyChange();
	IPropertyChange & operator=( IPropertyChange && );
	IPropertyChange & operator=( IPropertyChange const & );
	/*0008*/
};

struct IPropertyChangeArray : IUnknown {
	/*0018*/ virtual HRESULT GetCount( UINT * ) = 0;
	/*0020*/ virtual HRESULT GetAt( UINT , _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT InsertAt( UINT , IPropertyChange * ) = 0;
	/*0030*/ virtual HRESULT Append( IPropertyChange * ) = 0;
	/*0038*/ virtual HRESULT AppendOrReplace( IPropertyChange * ) = 0;
	/*0040*/ virtual HRESULT RemoveAt( UINT ) = 0;
	/*0048*/ virtual HRESULT IsKeyInArray( _tagpropertykey const & ) = 0;
	void IPropertyChangeArray( IPropertyChangeArray && );
	void IPropertyChangeArray( IPropertyChangeArray const & );
	void IPropertyChangeArray();
	IPropertyChangeArray & operator=( IPropertyChangeArray && );
	IPropertyChangeArray & operator=( IPropertyChangeArray const & );
	/*0008*/
};

struct IPropertyDescription : IUnknown {
	/*0018*/ virtual HRESULT GetPropertyKey( _tagpropertykey * ) = 0;
	/*0020*/ virtual HRESULT GetCanonicalName( WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetPropertyType( WCHAR * ) = 0;
	/*0030*/ virtual HRESULT GetDisplayName( WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT GetEditInvitation( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT GetTypeFlags( PROPDESC_TYPE_FLAGS , PROPDESC_TYPE_FLAGS * ) = 0;
	/*0048*/ virtual HRESULT GetViewFlags( PROPDESC_VIEW_FLAGS * ) = 0;
	/*0050*/ virtual HRESULT GetDefaultColumnWidth( UINT * ) = 0;
	/*0058*/ virtual HRESULT GetDisplayType( PROPDESC_DISPLAYTYPE * ) = 0;
	/*0060*/ virtual HRESULT GetColumnState( ULONG * ) = 0;
	/*0068*/ virtual HRESULT GetGroupingRange( PROPDESC_GROUPING_RANGE * ) = 0;
	/*0070*/ virtual HRESULT GetRelativeDescriptionType( PROPDESC_RELATIVEDESCRIPTION_TYPE * ) = 0;
	/*0078*/ virtual HRESULT GetRelativeDescription( tagPROPVARIANT const & , tagPROPVARIANT const & , WCHAR * * , WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT GetSortDescription( PROPDESC_SORTDESCRIPTION * ) = 0;
	/*0088*/ virtual HRESULT GetSortDescriptionLabel( INT , WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT GetAggregationType( PROPDESC_AGGREGATION_TYPE * ) = 0;
	/*0098*/ virtual HRESULT GetConditionType( PROPDESC_CONDITION_TYPE * , tagCONDITION_OPERATION * ) = 0;
	/*00a0*/ virtual HRESULT GetEnumTypeList( _GUID const & , void * * ) = 0;
	/*00a8*/ virtual HRESULT CoerceToCanonicalValue( tagPROPVARIANT * ) = 0;
	/*00b0*/ virtual HRESULT FormatForDisplay( tagPROPVARIANT const & , PROPDESC_FORMAT_FLAGS , WCHAR * * ) = 0;
	/*00b8*/ virtual HRESULT IsValueCanonical( tagPROPVARIANT const & ) = 0;
	void IPropertyDescription( IPropertyDescription && );
	void IPropertyDescription( IPropertyDescription const & );
	void IPropertyDescription();
	IPropertyDescription & operator=( IPropertyDescription && );
	IPropertyDescription & operator=( IPropertyDescription const & );
	/*0008*/
};

struct IPropertyDescription2 : IPropertyDescription {
	/*00c0*/ virtual HRESULT GetImageReferenceForValue( tagPROPVARIANT const & , WCHAR * * ) = 0;
	void IPropertyDescription2( IPropertyDescription2 && );
	void IPropertyDescription2( IPropertyDescription2 const & );
	void IPropertyDescription2();
	IPropertyDescription2 & operator=( IPropertyDescription2 && );
	IPropertyDescription2 & operator=( IPropertyDescription2 const & );
	/*0008*/
};

struct IPropertyDescriptionAliasInfo : IPropertyDescription {
	/*00c0*/ virtual HRESULT GetSortByAlias( _GUID const & , void * * ) = 0;
	/*00c8*/ virtual HRESULT GetAdditionalSortByAliases( _GUID const & , void * * ) = 0;
	void IPropertyDescriptionAliasInfo( IPropertyDescriptionAliasInfo && );
	void IPropertyDescriptionAliasInfo( IPropertyDescriptionAliasInfo const & );
	void IPropertyDescriptionAliasInfo();
	IPropertyDescriptionAliasInfo & operator=( IPropertyDescriptionAliasInfo && );
	IPropertyDescriptionAliasInfo & operator=( IPropertyDescriptionAliasInfo const & );
	/*0008*/
};

struct IPropertyDescriptionList : IUnknown {
	/*0018*/ virtual HRESULT GetCount( UINT * ) = 0;
	/*0020*/ virtual HRESULT GetAt( UINT , _GUID const & , void * * ) = 0;
	void IPropertyDescriptionList( IPropertyDescriptionList && );
	void IPropertyDescriptionList( IPropertyDescriptionList const & );
	void IPropertyDescriptionList();
	IPropertyDescriptionList & operator=( IPropertyDescriptionList && );
	IPropertyDescriptionList & operator=( IPropertyDescriptionList const & );
	/*0008*/
};

struct IPropertyDescriptionRelatedPropertyInfo : IPropertyDescription {
	/*00c0*/ virtual HRESULT GetRelatedProperty( WCHAR const * , _GUID const & , void * * ) = 0;
	void IPropertyDescriptionRelatedPropertyInfo( IPropertyDescriptionRelatedPropertyInfo && );
	void IPropertyDescriptionRelatedPropertyInfo( IPropertyDescriptionRelatedPropertyInfo const & );
	void IPropertyDescriptionRelatedPropertyInfo();
	IPropertyDescriptionRelatedPropertyInfo & operator=( IPropertyDescriptionRelatedPropertyInfo && );
	IPropertyDescriptionRelatedPropertyInfo & operator=( IPropertyDescriptionRelatedPropertyInfo const & );
	/*0008*/
};

struct IPropertyDescriptionSearchInfo : IPropertyDescription {
	/*00c0*/ virtual HRESULT GetSearchInfoFlags( PROPDESC_SEARCHINFO_FLAGS * ) = 0;
	/*00c8*/ virtual HRESULT GetColumnIndexType( PROPDESC_COLUMNINDEX_TYPE * ) = 0;
	/*00d0*/ virtual HRESULT GetProjectionString( WCHAR * * ) = 0;
	/*00d8*/ virtual HRESULT GetMaxSize( UINT * ) = 0;
	void IPropertyDescriptionSearchInfo( IPropertyDescriptionSearchInfo && );
	void IPropertyDescriptionSearchInfo( IPropertyDescriptionSearchInfo const & );
	void IPropertyDescriptionSearchInfo();
	IPropertyDescriptionSearchInfo & operator=( IPropertyDescriptionSearchInfo && );
	IPropertyDescriptionSearchInfo & operator=( IPropertyDescriptionSearchInfo const & );
	/*0008*/
};

struct IPropertyEnumType : IUnknown {
	/*0018*/ virtual HRESULT GetEnumType( PROPENUMTYPE * ) = 0;
	/*0020*/ virtual HRESULT GetValue( tagPROPVARIANT * ) = 0;
	/*0028*/ virtual HRESULT GetRangeMinValue( tagPROPVARIANT * ) = 0;
	/*0030*/ virtual HRESULT GetRangeSetValue( tagPROPVARIANT * ) = 0;
	/*0038*/ virtual HRESULT GetDisplayText( WCHAR * * ) = 0;
	void IPropertyEnumType( IPropertyEnumType && );
	void IPropertyEnumType( IPropertyEnumType const & );
	void IPropertyEnumType();
	IPropertyEnumType & operator=( IPropertyEnumType && );
	IPropertyEnumType & operator=( IPropertyEnumType const & );
	/*0008*/
};

struct IPropertyEnumType2 : IPropertyEnumType {
	/*0040*/ virtual HRESULT GetImageReference( WCHAR * * ) = 0;
	void IPropertyEnumType2( IPropertyEnumType2 && );
	void IPropertyEnumType2( IPropertyEnumType2 const & );
	void IPropertyEnumType2();
	IPropertyEnumType2 & operator=( IPropertyEnumType2 && );
	IPropertyEnumType2 & operator=( IPropertyEnumType2 const & );
	/*0008*/
};

struct IPropertyEnumTypeList : IUnknown {
	/*0018*/ virtual HRESULT GetCount( UINT * ) = 0;
	/*0020*/ virtual HRESULT GetAt( UINT , _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT GetConditionAt( UINT , _GUID const & , void * * ) = 0;
	/*0030*/ virtual HRESULT FindMatchingIndex( tagPROPVARIANT const & , UINT * ) = 0;
	void IPropertyEnumTypeList( IPropertyEnumTypeList && );
	void IPropertyEnumTypeList( IPropertyEnumTypeList const & );
	void IPropertyEnumTypeList();
	IPropertyEnumTypeList & operator=( IPropertyEnumTypeList && );
	IPropertyEnumTypeList & operator=( IPropertyEnumTypeList const & );
	/*0008*/
};

struct IPropertyKeyStore : IUnknown {
	/*0018*/ virtual HRESULT GetKeyCount( INT * ) = 0;
	/*0020*/ virtual HRESULT GetKeyAt( INT , _tagpropertykey * ) = 0;
	/*0028*/ virtual HRESULT AppendKey( _tagpropertykey const & ) = 0;
	/*0030*/ virtual HRESULT DeleteKey( INT ) = 0;
	/*0038*/ virtual HRESULT IsKeyInStore( _tagpropertykey const & ) = 0;
	/*0040*/ virtual HRESULT RemoveKey( _tagpropertykey const & ) = 0;
	void IPropertyKeyStore( IPropertyKeyStore && );
	void IPropertyKeyStore( IPropertyKeyStore const & );
	void IPropertyKeyStore();
	IPropertyKeyStore & operator=( IPropertyKeyStore && );
	IPropertyKeyStore & operator=( IPropertyKeyStore const & );
	/*0008*/
};

struct IPropertyNotifySink : IUnknown {
	/*0018*/ virtual HRESULT OnChanged( LONG ) = 0;
	/*0020*/ virtual HRESULT OnRequestEdit( LONG ) = 0;
	void IPropertyNotifySink( IPropertyNotifySink && );
	void IPropertyNotifySink( IPropertyNotifySink const & );
	void IPropertyNotifySink();
	IPropertyNotifySink & operator=( IPropertyNotifySink && );
	IPropertyNotifySink & operator=( IPropertyNotifySink const & );
	/*0008*/
};

struct IPropertyPage : IUnknown {
	/*0018*/ virtual HRESULT SetPageSite( IPropertyPageSite * ) = 0;
	/*0020*/ virtual HRESULT Activate( HWND__ * , tagRECT const * , INT ) = 0;
	/*0028*/ virtual HRESULT Deactivate() = 0;
	/*0030*/ virtual HRESULT GetPageInfo( tagPROPPAGEINFO * ) = 0;
	/*0038*/ virtual HRESULT SetObjects( ULONG , IUnknown * * ) = 0;
	/*0040*/ virtual HRESULT Show( UINT ) = 0;
	/*0048*/ virtual HRESULT Move( tagRECT const * ) = 0;
	/*0050*/ virtual HRESULT IsPageDirty() = 0;
	/*0058*/ virtual HRESULT Apply() = 0;
	/*0060*/ virtual HRESULT Help( WCHAR const * ) = 0;
	/*0068*/ virtual HRESULT TranslateAcceleratorW( tagMSG * ) = 0;
	void IPropertyPage( IPropertyPage && );
	void IPropertyPage( IPropertyPage const & );
	void IPropertyPage();
	IPropertyPage & operator=( IPropertyPage && );
	IPropertyPage & operator=( IPropertyPage const & );
	/*0008*/
};

struct IPropertyPage2 : IPropertyPage {
	/*0070*/ virtual HRESULT EditProperty( LONG ) = 0;
	void IPropertyPage2( IPropertyPage2 && );
	void IPropertyPage2( IPropertyPage2 const & );
	void IPropertyPage2();
	IPropertyPage2 & operator=( IPropertyPage2 && );
	IPropertyPage2 & operator=( IPropertyPage2 const & );
	/*0008*/
};

struct IPropertyPageSite : IUnknown {
	/*0018*/ virtual HRESULT OnStatusChange( ULONG ) = 0;
	/*0020*/ virtual HRESULT GetLocaleID( ULONG * ) = 0;
	/*0028*/ virtual HRESULT GetPageContainer( IUnknown * * ) = 0;
	/*0030*/ virtual HRESULT TranslateAcceleratorW( tagMSG * ) = 0;
	void IPropertyPageSite( IPropertyPageSite && );
	void IPropertyPageSite( IPropertyPageSite const & );
	void IPropertyPageSite();
	IPropertyPageSite & operator=( IPropertyPageSite && );
	IPropertyPageSite & operator=( IPropertyPageSite const & );
	/*0008*/
};

struct IPropertySetStorage : IUnknown {
	/*0018*/ virtual HRESULT Create( _GUID const & , _GUID const * , ULONG , ULONG , IPropertyStorage * * ) = 0;
	/*0020*/ virtual HRESULT Open( _GUID const & , ULONG , IPropertyStorage * * ) = 0;
	/*0028*/ virtual HRESULT Delete( _GUID const & ) = 0;
	/*0030*/ virtual HRESULT Enum( IEnumSTATPROPSETSTG * * ) = 0;
	void IPropertySetStorage( IPropertySetStorage && );
	void IPropertySetStorage( IPropertySetStorage const & );
	void IPropertySetStorage();
	IPropertySetStorage & operator=( IPropertySetStorage && );
	IPropertySetStorage & operator=( IPropertySetStorage const & );
	/*0008*/
};

struct IPropertyStorage : IUnknown {
	/*0018*/ virtual HRESULT ReadMultiple( ULONG , tagPROPSPEC const * , tagPROPVARIANT * ) = 0;
	/*0020*/ virtual HRESULT WriteMultiple( ULONG , tagPROPSPEC const * , tagPROPVARIANT const * , ULONG ) = 0;
	/*0028*/ virtual HRESULT DeleteMultiple( ULONG , tagPROPSPEC const * ) = 0;
	/*0030*/ virtual HRESULT ReadPropertyNames( ULONG , ULONG const * , WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT WritePropertyNames( ULONG , ULONG const * , WCHAR * const * ) = 0;
	/*0040*/ virtual HRESULT DeletePropertyNames( ULONG , ULONG const * ) = 0;
	/*0048*/ virtual HRESULT Commit( ULONG ) = 0;
	/*0050*/ virtual HRESULT Revert() = 0;
	/*0058*/ virtual HRESULT Enum( IEnumSTATPROPSTG * * ) = 0;
	/*0060*/ virtual HRESULT SetTimes( _FILETIME const * , _FILETIME const * , _FILETIME const * ) = 0;
	/*0068*/ virtual HRESULT SetClass( _GUID const & ) = 0;
	/*0070*/ virtual HRESULT Stat( tagSTATPROPSETSTG * ) = 0;
	void IPropertyStorage( IPropertyStorage && );
	void IPropertyStorage( IPropertyStorage const & );
	void IPropertyStorage();
	IPropertyStorage & operator=( IPropertyStorage && );
	IPropertyStorage & operator=( IPropertyStorage const & );
	/*0008*/
};

struct IPropertyStore : IUnknown {
	/*0018*/ virtual HRESULT GetCount( ULONG * ) = 0;
	/*0020*/ virtual HRESULT GetAt( ULONG , _tagpropertykey * ) = 0;
	/*0028*/ virtual HRESULT GetValue( _tagpropertykey const & , tagPROPVARIANT * ) = 0;
	/*0030*/ virtual HRESULT SetValue( _tagpropertykey const & , tagPROPVARIANT const & ) = 0;
	/*0038*/ virtual HRESULT Commit() = 0;
	void IPropertyStore( IPropertyStore && );
	void IPropertyStore( IPropertyStore const & );
	void IPropertyStore();
	IPropertyStore & operator=( IPropertyStore && );
	IPropertyStore & operator=( IPropertyStore const & );
	/*0008*/
};

struct IPropertyStoreCache : IPropertyStore {
	/*0040*/ virtual HRESULT GetState( _tagpropertykey const & , PSC_STATE * ) = 0;
	/*0048*/ virtual HRESULT GetValueAndState( _tagpropertykey const & , tagPROPVARIANT * , PSC_STATE * ) = 0;
	/*0050*/ virtual HRESULT SetState( _tagpropertykey const & , PSC_STATE ) = 0;
	/*0058*/ virtual HRESULT SetValueAndState( _tagpropertykey const & , tagPROPVARIANT const * , PSC_STATE ) = 0;
	void IPropertyStoreCache( IPropertyStoreCache && );
	void IPropertyStoreCache( IPropertyStoreCache const & );
	void IPropertyStoreCache();
	IPropertyStoreCache & operator=( IPropertyStoreCache && );
	IPropertyStoreCache & operator=( IPropertyStoreCache const & );
	/*0008*/
};

struct IPropertyStoreCapabilities : IUnknown {
	/*0018*/ virtual HRESULT IsPropertyWritable( _tagpropertykey const & ) = 0;
	void IPropertyStoreCapabilities( IPropertyStoreCapabilities && );
	void IPropertyStoreCapabilities( IPropertyStoreCapabilities const & );
	void IPropertyStoreCapabilities();
	IPropertyStoreCapabilities & operator=( IPropertyStoreCapabilities && );
	IPropertyStoreCapabilities & operator=( IPropertyStoreCapabilities const & );
	/*0008*/
};

struct IPropertyStoreFactory : IUnknown {
	/*0018*/ virtual HRESULT GetPropertyStore( GETPROPERTYSTOREFLAGS , IUnknown * , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT GetPropertyStoreForKeys( _tagpropertykey const * , UINT , GETPROPERTYSTOREFLAGS , _GUID const & , void * * ) = 0;
	void IPropertyStoreFactory( IPropertyStoreFactory && );
	void IPropertyStoreFactory( IPropertyStoreFactory const & );
	void IPropertyStoreFactory();
	IPropertyStoreFactory & operator=( IPropertyStoreFactory && );
	IPropertyStoreFactory & operator=( IPropertyStoreFactory const & );
	/*0008*/
};

struct IPropertySystem : IUnknown {
	/*0018*/ virtual HRESULT GetPropertyDescription( _tagpropertykey const & , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT GetPropertyDescriptionByName( WCHAR const * , _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT GetPropertyDescriptionListFromString( WCHAR const * , _GUID const & , void * * ) = 0;
	/*0030*/ virtual HRESULT EnumeratePropertyDescriptions( PROPDESC_ENUMFILTER , _GUID const & , void * * ) = 0;
	/*0038*/ virtual HRESULT FormatForDisplay( _tagpropertykey const & , tagPROPVARIANT const & , PROPDESC_FORMAT_FLAGS , WCHAR * , ULONG ) = 0;
	/*0040*/ virtual HRESULT FormatForDisplayAlloc( _tagpropertykey const & , tagPROPVARIANT const & , PROPDESC_FORMAT_FLAGS , WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT RegisterPropertySchema( WCHAR const * ) = 0;
	/*0050*/ virtual HRESULT UnregisterPropertySchema( WCHAR const * ) = 0;
	/*0058*/ virtual HRESULT RefreshPropertySchema() = 0;
	void IPropertySystem( IPropertySystem && );
	void IPropertySystem( IPropertySystem const & );
	void IPropertySystem();
	IPropertySystem & operator=( IPropertySystem && );
	IPropertySystem & operator=( IPropertySystem const & );
	/*0008*/
};

struct IPropertySystemChangeNotify : IUnknown {
	/*0018*/ virtual HRESULT SchemaRefreshed() = 0;
	void IPropertySystemChangeNotify( IPropertySystemChangeNotify && );
	void IPropertySystemChangeNotify( IPropertySystemChangeNotify const & );
	void IPropertySystemChangeNotify();
	IPropertySystemChangeNotify & operator=( IPropertySystemChangeNotify && );
	IPropertySystemChangeNotify & operator=( IPropertySystemChangeNotify const & );
	/*0008*/
};

struct IPropertyUI : IUnknown {
	/*0018*/ virtual HRESULT ParsePropertyName( WCHAR const * , _GUID * , ULONG * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT GetCannonicalName( _GUID const & , ULONG , WCHAR * , ULONG ) = 0;
	/*0028*/ virtual HRESULT GetDisplayName( _GUID const & , ULONG , ULONG , WCHAR * , ULONG ) = 0;
	/*0030*/ virtual HRESULT GetPropertyDescription( _GUID const & , ULONG , WCHAR * , ULONG ) = 0;
	/*0038*/ virtual HRESULT GetDefaultWidth( _GUID const & , ULONG , ULONG * ) = 0;
	/*0040*/ virtual HRESULT GetFlags( _GUID const & , ULONG , ULONG * ) = 0;
	/*0048*/ virtual HRESULT FormatForDisplay( _GUID const & , ULONG , tagPROPVARIANT const * , ULONG , WCHAR * , ULONG ) = 0;
	/*0050*/ virtual HRESULT GetHelpInfo( _GUID const & , ULONG , WCHAR * , ULONG , UINT * ) = 0;
	void IPropertyUI( IPropertyUI && );
	void IPropertyUI( IPropertyUI const & );
	void IPropertyUI();
	IPropertyUI & operator=( IPropertyUI && );
	IPropertyUI & operator=( IPropertyUI const & );
	/*0008*/
};

struct IProvideClassInfo : IUnknown {
	/*0018*/ virtual HRESULT GetClassInfoW( ITypeInfo * * ) = 0;
	void IProvideClassInfo( IProvideClassInfo && );
	void IProvideClassInfo( IProvideClassInfo const & );
	void IProvideClassInfo();
	IProvideClassInfo & operator=( IProvideClassInfo && );
	IProvideClassInfo & operator=( IProvideClassInfo const & );
	/*0008*/
};

struct IProvideClassInfo2 : IProvideClassInfo {
	/*0020*/ virtual HRESULT GetGUID( ULONG , _GUID * ) = 0;
	void IProvideClassInfo2( IProvideClassInfo2 && );
	void IProvideClassInfo2( IProvideClassInfo2 const & );
	void IProvideClassInfo2();
	IProvideClassInfo2 & operator=( IProvideClassInfo2 && );
	IProvideClassInfo2 & operator=( IProvideClassInfo2 const & );
	/*0008*/
};

struct IProvideMultipleClassInfo : IProvideClassInfo2 {
	/*0028*/ virtual HRESULT GetMultiTypeInfoCount( ULONG * ) = 0;
	/*0030*/ virtual HRESULT GetInfoOfIndex( ULONG , ULONG , ITypeInfo * * , ULONG * , ULONG * , _GUID * , _GUID * ) = 0;
	void IProvideMultipleClassInfo( IProvideMultipleClassInfo && );
	void IProvideMultipleClassInfo( IProvideMultipleClassInfo const & );
	void IProvideMultipleClassInfo();
	IProvideMultipleClassInfo & operator=( IProvideMultipleClassInfo && );
	IProvideMultipleClassInfo & operator=( IProvideMultipleClassInfo const & );
	/*0008*/
};

struct IProviderAdmin : IUnknown {
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*    */ virtual ULONG AddRef() = 0;
	/*    */ virtual ULONG Release() = 0;
	/*0018*/ virtual HRESULT GetLastError( HRESULT , ULONG , _MAPIERROR * * ) = 0;
	/*0020*/ virtual HRESULT GetProviderTable( ULONG , IMAPITable * * ) = 0;
	/*0028*/ virtual HRESULT CreateProvider( WCHAR * , ULONG , _SPropValue * , ULONG , ULONG , _MAPIUID * ) = 0;
	/*0030*/ virtual HRESULT DeleteProvider( _MAPIUID * ) = 0;
	/*0038*/ virtual HRESULT OpenProfileSection( _MAPIUID * , _GUID const * , ULONG , IProfSect * * ) = 0;
	void IProviderAdmin( IProviderAdmin && );
	void IProviderAdmin( IProviderAdmin const & );
	void IProviderAdmin();
	IProviderAdmin & operator=( IProviderAdmin && );
	IProviderAdmin & operator=( IProviderAdmin const & );
	/*0008*/
};

struct IQueryAssociations : IUnknown {
	/*0018*/ virtual HRESULT Init( ULONG , WCHAR const * , HKEY__ * , HWND__ * ) = 0;
	/*0020*/ virtual HRESULT GetString( ULONG , ASSOCSTR , WCHAR const * , WCHAR * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT GetKey( ULONG , ASSOCKEY , WCHAR const * , HKEY__ * * ) = 0;
	/*0030*/ virtual HRESULT GetData( ULONG , ASSOCDATA , WCHAR const * , void * , ULONG * ) = 0;
	/*0038*/ virtual HRESULT GetEnum( ULONG , ASSOCENUM , WCHAR const * , _GUID const & , void * * ) = 0;
	void IQueryAssociations( IQueryAssociations && );
	void IQueryAssociations( IQueryAssociations const & );
	void IQueryAssociations();
	IQueryAssociations & operator=( IQueryAssociations && );
	IQueryAssociations & operator=( IQueryAssociations const & );
	/*0008*/
};

struct IQueryContinue : IUnknown {
	/*0018*/ virtual HRESULT QueryContinue() = 0;
	void IQueryContinue( IQueryContinue && );
	void IQueryContinue( IQueryContinue const & );
	void IQueryContinue();
	IQueryContinue & operator=( IQueryContinue && );
	IQueryContinue & operator=( IQueryContinue const & );
	/*0008*/
};

struct IQueryContinueWithStatus : IQueryContinue {
	/*0020*/ virtual HRESULT SetStatusMessage( WCHAR const * ) = 0;
	void IQueryContinueWithStatus( IQueryContinueWithStatus && );
	void IQueryContinueWithStatus( IQueryContinueWithStatus const & );
	void IQueryContinueWithStatus();
	IQueryContinueWithStatus & operator=( IQueryContinueWithStatus && );
	IQueryContinueWithStatus & operator=( IQueryContinueWithStatus const & );
	/*0008*/
};

struct IQuickActivate : IUnknown {
	/*0018*/ virtual HRESULT QuickActivate( tagQACONTAINER * , tagQACONTROL * ) = 0;
	/*0020*/ virtual HRESULT SetContentExtent( tagSIZE * ) = 0;
	/*0028*/ virtual HRESULT GetContentExtent( tagSIZE * ) = 0;
	void IQuickActivate( IQuickActivate && );
	void IQuickActivate( IQuickActivate const & );
	void IQuickActivate();
	IQuickActivate & operator=( IQuickActivate && );
	IQuickActivate & operator=( IQuickActivate const & );
	/*0008*/
};

struct IROTData : IUnknown {
	/*0018*/ virtual HRESULT GetComparisonData( UCHAR * , ULONG , ULONG * ) = 0;
	void IROTData( IROTData && );
	void IROTData( IROTData const & );
	void IROTData();
	IROTData & operator=( IROTData && );
	IROTData & operator=( IROTData const & );
	/*0008*/
};

struct IRecordInfo : IUnknown {
	/*0018*/ virtual HRESULT RecordInit( void * ) = 0;
	/*0020*/ virtual HRESULT RecordClear( void * ) = 0;
	/*0028*/ virtual HRESULT RecordCopy( void * , void * ) = 0;
	/*0030*/ virtual HRESULT GetGuid( _GUID * ) = 0;
	/*0038*/ virtual HRESULT GetName( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT GetSize( ULONG * ) = 0;
	/*0048*/ virtual HRESULT GetTypeInfo( ITypeInfo * * ) = 0;
	/*0050*/ virtual HRESULT GetField( void * , WCHAR const * , tagVARIANT * ) = 0;
	/*0058*/ virtual HRESULT GetFieldNoCopy( void * , WCHAR const * , tagVARIANT * , void * * ) = 0;
	/*0060*/ virtual HRESULT PutField( ULONG , void * , WCHAR const * , tagVARIANT * ) = 0;
	/*0068*/ virtual HRESULT PutFieldNoCopy( ULONG , void * , WCHAR const * , tagVARIANT * ) = 0;
	/*0070*/ virtual HRESULT GetFieldNames( ULONG * , WCHAR * * ) = 0;
	/*0078*/ virtual INT IsMatchingType( IRecordInfo * ) = 0;
	/*0080*/ virtual void * RecordCreate() = 0;
	/*0088*/ virtual HRESULT RecordCreateCopy( void * , void * * ) = 0;
	/*0090*/ virtual HRESULT RecordDestroy( void * ) = 0;
	void IRecordInfo( IRecordInfo && );
	void IRecordInfo( IRecordInfo const & );
	void IRecordInfo();
	IRecordInfo & operator=( IRecordInfo && );
	IRecordInfo & operator=( IRecordInfo const & );
	/*0008*/
};

struct IRegTreeItem : IUnknown {
	/*0018*/ virtual HRESULT GetCheckState( INT * ) = 0;
	/*0020*/ virtual HRESULT SetCheckState( INT ) = 0;
	void IRegTreeItem( IRegTreeItem && );
	void IRegTreeItem( IRegTreeItem const & );
	void IRegTreeItem();
	IRegTreeItem & operator=( IRegTreeItem && );
	IRegTreeItem & operator=( IRegTreeItem const & );
	/*0008*/
};

struct IRegistrar : IRegistrarBase {
	/*0028*/ virtual HRESULT ResourceRegisterSz( WCHAR const * , WCHAR const * , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT ResourceUnregisterSz( WCHAR const * , WCHAR const * , WCHAR const * ) = 0;
	/*0038*/ virtual HRESULT FileRegister( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT FileUnregister( WCHAR const * ) = 0;
	/*0048*/ virtual HRESULT StringRegister( WCHAR const * ) = 0;
	/*0050*/ virtual HRESULT StringUnregister( WCHAR const * ) = 0;
	/*0058*/ virtual HRESULT ResourceRegister( WCHAR const * , UINT , WCHAR const * ) = 0;
	/*0060*/ virtual HRESULT ResourceUnregister( WCHAR const * , UINT , WCHAR const * ) = 0;
	void IRegistrar( IRegistrar && );
	void IRegistrar( IRegistrar const & );
	void IRegistrar();
	IRegistrar & operator=( IRegistrar && );
	IRegistrar & operator=( IRegistrar const & );
	/*0008*/
};

struct IRegistrarBase : IUnknown {
	/*0018*/ virtual HRESULT AddReplacement( WCHAR const * , WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT ClearReplacements() = 0;
	void IRegistrarBase( IRegistrarBase && );
	void IRegistrarBase( IRegistrarBase const & );
	void IRegistrarBase();
	IRegistrarBase & operator=( IRegistrarBase && );
	IRegistrarBase & operator=( IRegistrarBase const & );
	/*0008*/
};

struct IRelatedItem : IUnknown {
	/*0018*/ virtual HRESULT GetItemIDList( _ITEMIDLIST __unaligned * * ) = 0;
	/*0020*/ virtual HRESULT GetItem( IShellItem * * ) = 0;
	void IRelatedItem( IRelatedItem && );
	void IRelatedItem( IRelatedItem const & );
	void IRelatedItem();
	IRelatedItem & operator=( IRelatedItem && );
	IRelatedItem & operator=( IRelatedItem const & );
	/*0008*/
};

struct IReleaseMarshalBuffers : IUnknown {
	/*0018*/ virtual HRESULT ReleaseMarshalBuffer( tagRPCOLEMESSAGE * , ULONG , IUnknown * ) = 0;
	void IReleaseMarshalBuffers( IReleaseMarshalBuffers && );
	void IReleaseMarshalBuffers( IReleaseMarshalBuffers const & );
	void IReleaseMarshalBuffers();
	IReleaseMarshalBuffers & operator=( IReleaseMarshalBuffers && );
	IReleaseMarshalBuffers & operator=( IReleaseMarshalBuffers const & );
	/*0008*/
};

struct IRemoteComputer : IUnknown {
	/*0018*/ virtual HRESULT Initialize( WCHAR const * , INT ) = 0;
	void IRemoteComputer( IRemoteComputer && );
	void IRemoteComputer( IRemoteComputer const & );
	void IRemoteComputer();
	IRemoteComputer & operator=( IRemoteComputer && );
	IRemoteComputer & operator=( IRemoteComputer const & );
	/*0008*/
};

struct IResolveShellLink : IUnknown {
	/*0018*/ virtual HRESULT ResolveShellLink( IUnknown * , HWND__ * , ULONG ) = 0;
	void IResolveShellLink( IResolveShellLink && );
	void IResolveShellLink( IResolveShellLink const & );
	void IResolveShellLink();
	IResolveShellLink & operator=( IResolveShellLink && );
	IResolveShellLink & operator=( IResolveShellLink const & );
	/*0008*/
};

struct IRestrictedErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT GetErrorDetails( WCHAR * * , HRESULT * , WCHAR * * , WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetReference( WCHAR * * ) = 0;
	void IRestrictedErrorInfo( IRestrictedErrorInfo && );
	void IRestrictedErrorInfo( IRestrictedErrorInfo const & );
	void IRestrictedErrorInfo();
	IRestrictedErrorInfo & operator=( IRestrictedErrorInfo && );
	IRestrictedErrorInfo & operator=( IRestrictedErrorInfo const & );
	/*0008*/
};

struct IRichChunk : IUnknown {
	/*0018*/ virtual HRESULT GetData( ULONG * , ULONG * , WCHAR * * , tagPROPVARIANT * ) = 0;
	void IRichChunk( IRichChunk && );
	void IRichChunk( IRichChunk const & );
	void IRichChunk();
	IRichChunk & operator=( IRichChunk && );
	IRichChunk & operator=( IRichChunk const & );
	/*0008*/
};

struct IRootStorage : IUnknown {
	/*0018*/ virtual HRESULT SwitchToFile( WCHAR * ) = 0;
	void IRootStorage( IRootStorage && );
	void IRootStorage( IRootStorage const & );
	void IRootStorage();
	IRootStorage & operator=( IRootStorage && );
	IRootStorage & operator=( IRootStorage const & );
	/*0008*/
};

struct IRpcChannelBuffer : IUnknown {
	/*0018*/ virtual HRESULT GetBuffer( tagRPCOLEMESSAGE * , _GUID const & ) = 0;
	/*0020*/ virtual HRESULT SendReceive( tagRPCOLEMESSAGE * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT FreeBuffer( tagRPCOLEMESSAGE * ) = 0;
	/*0030*/ virtual HRESULT GetDestCtx( ULONG * , void * * ) = 0;
	/*0038*/ virtual HRESULT IsConnected() = 0;
	void IRpcChannelBuffer( IRpcChannelBuffer && );
	void IRpcChannelBuffer( IRpcChannelBuffer const & );
	void IRpcChannelBuffer();
	IRpcChannelBuffer & operator=( IRpcChannelBuffer && );
	IRpcChannelBuffer & operator=( IRpcChannelBuffer const & );
	/*0008*/
};

struct IRpcChannelBuffer2 : IRpcChannelBuffer {
	/*0040*/ virtual HRESULT GetProtocolVersion( ULONG * ) = 0;
	void IRpcChannelBuffer2( IRpcChannelBuffer2 && );
	void IRpcChannelBuffer2( IRpcChannelBuffer2 const & );
	void IRpcChannelBuffer2();
	IRpcChannelBuffer2 & operator=( IRpcChannelBuffer2 && );
	IRpcChannelBuffer2 & operator=( IRpcChannelBuffer2 const & );
	/*0008*/
};

struct IRpcChannelBuffer3 : IRpcChannelBuffer2 {
	/*0048*/ virtual HRESULT Send( tagRPCOLEMESSAGE * , ULONG * ) = 0;
	/*0050*/ virtual HRESULT Receive( tagRPCOLEMESSAGE * , ULONG , ULONG * ) = 0;
	/*0058*/ virtual HRESULT Cancel( tagRPCOLEMESSAGE * ) = 0;
	/*0060*/ virtual HRESULT GetCallContext( tagRPCOLEMESSAGE * , _GUID const & , void * * ) = 0;
	/*0068*/ virtual HRESULT GetDestCtxEx( tagRPCOLEMESSAGE * , ULONG * , void * * ) = 0;
	/*0070*/ virtual HRESULT GetState( tagRPCOLEMESSAGE * , ULONG * ) = 0;
	/*0078*/ virtual HRESULT RegisterAsync( tagRPCOLEMESSAGE * , IAsyncManager * ) = 0;
	void IRpcChannelBuffer3( IRpcChannelBuffer3 && );
	void IRpcChannelBuffer3( IRpcChannelBuffer3 const & );
	void IRpcChannelBuffer3();
	IRpcChannelBuffer3 & operator=( IRpcChannelBuffer3 && );
	IRpcChannelBuffer3 & operator=( IRpcChannelBuffer3 const & );
	/*0008*/
};

struct IRpcChannelBufferVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IRpcChannelBuffer * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IRpcChannelBuffer * );
	/*0010*/ ULONG (* Release)( IRpcChannelBuffer * );
	/*0018*/ HRESULT (* GetBuffer)( IRpcChannelBuffer * , tagRPCOLEMESSAGE * , _GUID const * );
	/*0020*/ HRESULT (* SendReceive)( IRpcChannelBuffer * , tagRPCOLEMESSAGE * , ULONG * );
	/*0028*/ HRESULT (* FreeBuffer)( IRpcChannelBuffer * , tagRPCOLEMESSAGE * );
	/*0030*/ HRESULT (* GetDestCtx)( IRpcChannelBuffer * , ULONG * , void * * );
	/*0038*/ HRESULT (* IsConnected)( IRpcChannelBuffer * );
	/*0040*/
};

struct IRpcHelper : IUnknown {
	/*0018*/ virtual HRESULT GetDCOMProtocolVersion( ULONG * ) = 0;
	/*0020*/ virtual HRESULT GetIIDFromOBJREF( void * , _GUID * * ) = 0;
	void IRpcHelper( IRpcHelper && );
	void IRpcHelper( IRpcHelper const & );
	void IRpcHelper();
	IRpcHelper & operator=( IRpcHelper && );
	IRpcHelper & operator=( IRpcHelper const & );
	/*0008*/
};

struct IRpcOptions : IUnknown {
	/*0018*/ virtual HRESULT Set( IUnknown * , tagRPCOPT_PROPERTIES , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT Query( IUnknown * , tagRPCOPT_PROPERTIES , ULONGLONG * ) = 0;
	void IRpcOptions( IRpcOptions && );
	void IRpcOptions( IRpcOptions const & );
	void IRpcOptions();
	IRpcOptions & operator=( IRpcOptions && );
	IRpcOptions & operator=( IRpcOptions const & );
	/*0008*/
};

struct IRpcProxyBuffer : IUnknown {
	/*0018*/ virtual HRESULT Connect( IRpcChannelBuffer * ) = 0;
	/*0020*/ virtual void Disconnect() = 0;
	void IRpcProxyBuffer( IRpcProxyBuffer && );
	void IRpcProxyBuffer( IRpcProxyBuffer const & );
	void IRpcProxyBuffer();
	IRpcProxyBuffer & operator=( IRpcProxyBuffer && );
	IRpcProxyBuffer & operator=( IRpcProxyBuffer const & );
	/*0008*/
};

struct IRpcProxyBufferVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IRpcProxyBuffer * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IRpcProxyBuffer * );
	/*0010*/ ULONG (* Release)( IRpcProxyBuffer * );
	/*0018*/ HRESULT (* Connect)( IRpcProxyBuffer * , IRpcChannelBuffer * );
	/*0020*/ void (* Disconnect)( IRpcProxyBuffer * );
	/*0028*/
};

struct IRpcStubBuffer : IUnknown {
	/*0018*/ virtual HRESULT Connect( IUnknown * ) = 0;
	/*0020*/ virtual void Disconnect() = 0;
	/*0028*/ virtual HRESULT Invoke( tagRPCOLEMESSAGE * , IRpcChannelBuffer * ) = 0;
	/*0030*/ virtual IRpcStubBuffer * IsIIDSupported( _GUID const & ) = 0;
	/*0038*/ virtual ULONG CountRefs() = 0;
	/*0040*/ virtual HRESULT DebugServerQueryInterface( void * * ) = 0;
	/*0048*/ virtual void DebugServerRelease( void * ) = 0;
	void IRpcStubBuffer( IRpcStubBuffer && );
	void IRpcStubBuffer( IRpcStubBuffer const & );
	void IRpcStubBuffer();
	IRpcStubBuffer & operator=( IRpcStubBuffer && );
	IRpcStubBuffer & operator=( IRpcStubBuffer const & );
	/*0008*/
};

struct IRpcStubBufferVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IRpcStubBuffer * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IRpcStubBuffer * );
	/*0010*/ ULONG (* Release)( IRpcStubBuffer * );
	/*0018*/ HRESULT (* Connect)( IRpcStubBuffer * , IUnknown * );
	/*0020*/ void (* Disconnect)( IRpcStubBuffer * );
	/*0028*/ HRESULT (* Invoke)( IRpcStubBuffer * , tagRPCOLEMESSAGE * , IRpcChannelBuffer * );
	/*0030*/ IRpcStubBuffer * (* IsIIDSupported)( IRpcStubBuffer * , _GUID const * );
	/*0038*/ ULONG (* CountRefs)( IRpcStubBuffer * );
	/*0040*/ HRESULT (* DebugServerQueryInterface)( IRpcStubBuffer * , void * * );
	/*0048*/ void (* DebugServerRelease)( IRpcStubBuffer * , void * );
	/*0050*/
};

struct IRpcSyntaxNegotiate : IUnknown {
	/*0018*/ virtual HRESULT NegotiateSyntax( tagRPCOLEMESSAGE * ) = 0;
	void IRpcSyntaxNegotiate( IRpcSyntaxNegotiate && );
	void IRpcSyntaxNegotiate( IRpcSyntaxNegotiate const & );
	void IRpcSyntaxNegotiate();
	IRpcSyntaxNegotiate & operator=( IRpcSyntaxNegotiate && );
	IRpcSyntaxNegotiate & operator=( IRpcSyntaxNegotiate const & );
	/*0008*/
};

struct IRunnableObject : IUnknown {
	/*0018*/ virtual HRESULT GetRunningClass( _GUID * ) = 0;
	/*0020*/ virtual HRESULT Run( IBindCtx * ) = 0;
	/*0028*/ virtual INT IsRunning() = 0;
	/*0030*/ virtual HRESULT LockRunning( INT , INT ) = 0;
	/*0038*/ virtual HRESULT SetContainedObject( INT ) = 0;
	void IRunnableObject( IRunnableObject && );
	void IRunnableObject( IRunnableObject const & );
	void IRunnableObject();
	IRunnableObject & operator=( IRunnableObject && );
	IRunnableObject & operator=( IRunnableObject const & );
	/*0008*/
};

struct IRunnableTask : IUnknown {
	/*0018*/ virtual HRESULT Run() = 0;
	/*0020*/ virtual HRESULT Kill( INT ) = 0;
	/*0028*/ virtual HRESULT Suspend() = 0;
	/*0030*/ virtual HRESULT Resume() = 0;
	/*0038*/ virtual ULONG IsRunning() = 0;
	void IRunnableTask( IRunnableTask && );
	void IRunnableTask( IRunnableTask const & );
	void IRunnableTask();
	IRunnableTask & operator=( IRunnableTask && );
	IRunnableTask & operator=( IRunnableTask const & );
	/*0008*/
};

struct IRunningObjectTable : IUnknown {
	/*0018*/ virtual HRESULT Register( ULONG , IUnknown * , IMoniker * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Revoke( ULONG ) = 0;
	/*0028*/ virtual HRESULT IsRunning( IMoniker * ) = 0;
	/*0030*/ virtual HRESULT GetObjectW( IMoniker * , IUnknown * * ) = 0;
	/*0038*/ virtual HRESULT NoteChangeTime( ULONG , _FILETIME * ) = 0;
	/*0040*/ virtual HRESULT GetTimeOfLastChange( IMoniker * , _FILETIME * ) = 0;
	/*0048*/ virtual HRESULT EnumRunning( IEnumMoniker * * ) = 0;
	void IRunningObjectTable( IRunningObjectTable && );
	void IRunningObjectTable( IRunningObjectTable const & );
	void IRunningObjectTable();
	IRunningObjectTable & operator=( IRunningObjectTable && );
	IRunningObjectTable & operator=( IRunningObjectTable const & );
	/*0008*/
};

struct ISAXAttributes : IUnknown {
	/*0018*/ virtual HRESULT getLength( INT * ) = 0;
	/*0020*/ virtual HRESULT getURI( INT , WCHAR const * * , INT * ) = 0;
	/*0028*/ virtual HRESULT getLocalName( INT , WCHAR const * * , INT * ) = 0;
	/*0030*/ virtual HRESULT getQName( INT , WCHAR const * * , INT * ) = 0;
	/*0038*/ virtual HRESULT getName( INT , WCHAR const * * , INT * , WCHAR const * * , INT * , WCHAR const * * , INT * ) = 0;
	/*0040*/ virtual HRESULT getIndexFromName( WCHAR const * , INT , WCHAR const * , INT , INT * ) = 0;
	/*0048*/ virtual HRESULT getIndexFromQName( WCHAR const * , INT , INT * ) = 0;
	/*0050*/ virtual HRESULT getType( INT , WCHAR const * * , INT * ) = 0;
	/*0058*/ virtual HRESULT getTypeFromName( WCHAR const * , INT , WCHAR const * , INT , WCHAR const * * , INT * ) = 0;
	/*0060*/ virtual HRESULT getTypeFromQName( WCHAR const * , INT , WCHAR const * * , INT * ) = 0;
	/*0068*/ virtual HRESULT getValue( INT , WCHAR const * * , INT * ) = 0;
	/*0070*/ virtual HRESULT getValueFromName( WCHAR const * , INT , WCHAR const * , INT , WCHAR const * * , INT * ) = 0;
	/*0078*/ virtual HRESULT getValueFromQName( WCHAR const * , INT , WCHAR const * * , INT * ) = 0;
	void ISAXAttributes( ISAXAttributes && );
	void ISAXAttributes( ISAXAttributes const & );
	void ISAXAttributes();
	ISAXAttributes & operator=( ISAXAttributes && );
	ISAXAttributes & operator=( ISAXAttributes const & );
	/*0008*/
};

struct ISAXContentHandler : IUnknown {
	/*0018*/ virtual HRESULT putDocumentLocator( ISAXLocator * ) = 0;
	/*0020*/ virtual HRESULT startDocument() = 0;
	/*0028*/ virtual HRESULT endDocument() = 0;
	/*0030*/ virtual HRESULT startPrefixMapping( WCHAR const * , INT , WCHAR const * , INT ) = 0;
	/*0038*/ virtual HRESULT endPrefixMapping( WCHAR const * , INT ) = 0;
	/*0040*/ virtual HRESULT startElement( WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT , ISAXAttributes * ) = 0;
	/*0048*/ virtual HRESULT endElement( WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT ) = 0;
	/*0050*/ virtual HRESULT characters( WCHAR const * , INT ) = 0;
	/*0058*/ virtual HRESULT ignorableWhitespace( WCHAR const * , INT ) = 0;
	/*0060*/ virtual HRESULT processingInstruction( WCHAR const * , INT , WCHAR const * , INT ) = 0;
	/*0068*/ virtual HRESULT skippedEntity( WCHAR const * , INT ) = 0;
	void ISAXContentHandler( ISAXContentHandler && );
	void ISAXContentHandler( ISAXContentHandler const & );
	void ISAXContentHandler();
	ISAXContentHandler & operator=( ISAXContentHandler && );
	ISAXContentHandler & operator=( ISAXContentHandler const & );
	/*0008*/
};

struct ISAXDTDHandler : IUnknown {
	/*0018*/ virtual HRESULT notationDecl( WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT ) = 0;
	/*0020*/ virtual HRESULT unparsedEntityDecl( WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT ) = 0;
	void ISAXDTDHandler( ISAXDTDHandler && );
	void ISAXDTDHandler( ISAXDTDHandler const & );
	void ISAXDTDHandler();
	ISAXDTDHandler & operator=( ISAXDTDHandler && );
	ISAXDTDHandler & operator=( ISAXDTDHandler const & );
	/*0008*/
};

struct ISAXDeclHandler : IUnknown {
	/*0018*/ virtual HRESULT elementDecl( WCHAR const * , INT , WCHAR const * , INT ) = 0;
	/*0020*/ virtual HRESULT attributeDecl( WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT ) = 0;
	/*0028*/ virtual HRESULT internalEntityDecl( WCHAR const * , INT , WCHAR const * , INT ) = 0;
	/*0030*/ virtual HRESULT externalEntityDecl( WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT ) = 0;
	void ISAXDeclHandler( ISAXDeclHandler && );
	void ISAXDeclHandler( ISAXDeclHandler const & );
	void ISAXDeclHandler();
	ISAXDeclHandler & operator=( ISAXDeclHandler && );
	ISAXDeclHandler & operator=( ISAXDeclHandler const & );
	/*0008*/
};

struct ISAXEntityResolver : IUnknown {
	/*0018*/ virtual HRESULT resolveEntity( WCHAR const * , WCHAR const * , tagVARIANT * ) = 0;
	void ISAXEntityResolver( ISAXEntityResolver && );
	void ISAXEntityResolver( ISAXEntityResolver const & );
	void ISAXEntityResolver();
	ISAXEntityResolver & operator=( ISAXEntityResolver && );
	ISAXEntityResolver & operator=( ISAXEntityResolver const & );
	/*0008*/
};

struct ISAXErrorHandler : IUnknown {
	/*0018*/ virtual HRESULT error( ISAXLocator * , WCHAR const * , HRESULT ) = 0;
	/*0020*/ virtual HRESULT fatalError( ISAXLocator * , WCHAR const * , HRESULT ) = 0;
	/*0028*/ virtual HRESULT ignorableWarning( ISAXLocator * , WCHAR const * , HRESULT ) = 0;
	void ISAXErrorHandler( ISAXErrorHandler && );
	void ISAXErrorHandler( ISAXErrorHandler const & );
	void ISAXErrorHandler();
	ISAXErrorHandler & operator=( ISAXErrorHandler && );
	ISAXErrorHandler & operator=( ISAXErrorHandler const & );
	/*0008*/
};

struct ISAXLexicalHandler : IUnknown {
	/*0018*/ virtual HRESULT startDTD( WCHAR const * , INT , WCHAR const * , INT , WCHAR const * , INT ) = 0;
	/*0020*/ virtual HRESULT endDTD() = 0;
	/*0028*/ virtual HRESULT startEntity( WCHAR const * , INT ) = 0;
	/*0030*/ virtual HRESULT endEntity( WCHAR const * , INT ) = 0;
	/*0038*/ virtual HRESULT startCDATA() = 0;
	/*0040*/ virtual HRESULT endCDATA() = 0;
	/*0048*/ virtual HRESULT comment( WCHAR const * , INT ) = 0;
	void ISAXLexicalHandler( ISAXLexicalHandler && );
	void ISAXLexicalHandler( ISAXLexicalHandler const & );
	void ISAXLexicalHandler();
	ISAXLexicalHandler & operator=( ISAXLexicalHandler && );
	ISAXLexicalHandler & operator=( ISAXLexicalHandler const & );
	/*0008*/
};

struct ISAXLocator : IUnknown {
	/*0018*/ virtual HRESULT getColumnNumber( INT * ) = 0;
	/*0020*/ virtual HRESULT getLineNumber( INT * ) = 0;
	/*0028*/ virtual HRESULT getPublicId( WCHAR const * * ) = 0;
	/*0030*/ virtual HRESULT getSystemId( WCHAR const * * ) = 0;
	void ISAXLocator( ISAXLocator && );
	void ISAXLocator( ISAXLocator const & );
	void ISAXLocator();
	ISAXLocator & operator=( ISAXLocator && );
	ISAXLocator & operator=( ISAXLocator const & );
	/*0008*/
};

struct ISAXXMLFilter : ISAXXMLReader {
	/*00a8*/ virtual HRESULT getParent( ISAXXMLReader * * ) = 0;
	/*00b0*/ virtual HRESULT putParent( ISAXXMLReader * ) = 0;
	void ISAXXMLFilter( ISAXXMLFilter && );
	void ISAXXMLFilter( ISAXXMLFilter const & );
	void ISAXXMLFilter();
	ISAXXMLFilter & operator=( ISAXXMLFilter && );
	ISAXXMLFilter & operator=( ISAXXMLFilter const & );
	/*0008*/
};

struct ISAXXMLReader : IUnknown {
	/*0018*/ virtual HRESULT getFeature( WCHAR const * , SHORT * ) = 0;
	/*0020*/ virtual HRESULT putFeature( WCHAR const * , SHORT ) = 0;
	/*0028*/ virtual HRESULT getProperty( WCHAR const * , tagVARIANT * ) = 0;
	/*0030*/ virtual HRESULT putProperty( WCHAR const * , tagVARIANT ) = 0;
	/*0038*/ virtual HRESULT getEntityResolver( ISAXEntityResolver * * ) = 0;
	/*0040*/ virtual HRESULT putEntityResolver( ISAXEntityResolver * ) = 0;
	/*0048*/ virtual HRESULT getContentHandler( ISAXContentHandler * * ) = 0;
	/*0050*/ virtual HRESULT putContentHandler( ISAXContentHandler * ) = 0;
	/*0058*/ virtual HRESULT getDTDHandler( ISAXDTDHandler * * ) = 0;
	/*0060*/ virtual HRESULT putDTDHandler( ISAXDTDHandler * ) = 0;
	/*0068*/ virtual HRESULT getErrorHandler( ISAXErrorHandler * * ) = 0;
	/*0070*/ virtual HRESULT putErrorHandler( ISAXErrorHandler * ) = 0;
	/*0078*/ virtual HRESULT getBaseURL( WCHAR const * * ) = 0;
	/*0080*/ virtual HRESULT putBaseURL( WCHAR const * ) = 0;
	/*0088*/ virtual HRESULT getSecureBaseURL( WCHAR const * * ) = 0;
	/*0090*/ virtual HRESULT putSecureBaseURL( WCHAR const * ) = 0;
	/*0098*/ virtual HRESULT parse( tagVARIANT ) = 0;
	/*00a0*/ virtual HRESULT parseURL( WCHAR const * ) = 0;
	void ISAXXMLReader( ISAXXMLReader && );
	void ISAXXMLReader( ISAXXMLReader const & );
	void ISAXXMLReader();
	ISAXXMLReader & operator=( ISAXXMLReader && );
	ISAXXMLReader & operator=( ISAXXMLReader const & );
	/*0008*/
};

enum ISA_AVAILABILITY {
	__ISA_AVAILABLE_X86 = 0x0,
	__ISA_AVAILABLE_SSE2 = 0x1,
	__ISA_AVAILABLE_SSE42 = 0x2,
	__ISA_AVAILABLE_AVX = 0x3,
	__ISA_AVAILABLE_ENFSTRG = 0x4,
	__ISA_AVAILABLE_AVX2 = 0x5,
	__ISA_AVAILABLE_ARMNT = 0x0,
	__ISA_AVAILABLE_NEON = 0x1,
	__ISA_AVAILABLE_NEON_ARM64 = 0x2
};

struct ISchema : ISchemaItem {
	/*0070*/ virtual HRESULT get_targetNamespace( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT get_version( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT get_types( ISchemaItemCollection * * ) = 0;
	/*0088*/ virtual HRESULT get_elements( ISchemaItemCollection * * ) = 0;
	/*0090*/ virtual HRESULT get_attributes( ISchemaItemCollection * * ) = 0;
	/*0098*/ virtual HRESULT get_attributeGroups( ISchemaItemCollection * * ) = 0;
	/*00a0*/ virtual HRESULT get_modelGroups( ISchemaItemCollection * * ) = 0;
	/*00a8*/ virtual HRESULT get_notations( ISchemaItemCollection * * ) = 0;
	/*00b0*/ virtual HRESULT get_schemaLocations( ISchemaStringCollection * * ) = 0;
	void ISchema( ISchema && );
	void ISchema( ISchema const & );
	void ISchema();
	ISchema & operator=( ISchema && );
	ISchema & operator=( ISchema const & );
	/*0008*/
};

struct ISchemaAny : ISchemaParticle {
	/*0080*/ virtual HRESULT get_namespaces( ISchemaStringCollection * * ) = 0;
	/*0088*/ virtual HRESULT get_processContents( _SCHEMAPROCESSCONTENTS * ) = 0;
	void ISchemaAny( ISchemaAny && );
	void ISchemaAny( ISchemaAny const & );
	void ISchemaAny();
	ISchemaAny & operator=( ISchemaAny && );
	ISchemaAny & operator=( ISchemaAny const & );
	/*0008*/
};

struct ISchemaAttribute : ISchemaItem {
	/*0070*/ virtual HRESULT get_type( ISchemaType * * ) = 0;
	/*0078*/ virtual HRESULT get_scope( ISchemaComplexType * * ) = 0;
	/*0080*/ virtual HRESULT get_defaultValue( WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT get_fixedValue( WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT get_use( _SCHEMAUSE * ) = 0;
	/*0098*/ virtual HRESULT get_isReference( SHORT * ) = 0;
	void ISchemaAttribute( ISchemaAttribute && );
	void ISchemaAttribute( ISchemaAttribute const & );
	void ISchemaAttribute();
	ISchemaAttribute & operator=( ISchemaAttribute && );
	ISchemaAttribute & operator=( ISchemaAttribute const & );
	/*0008*/
};

struct ISchemaAttributeGroup : ISchemaItem {
	/*0070*/ virtual HRESULT get_anyAttribute( ISchemaAny * * ) = 0;
	/*0078*/ virtual HRESULT get_attributes( ISchemaItemCollection * * ) = 0;
	void ISchemaAttributeGroup( ISchemaAttributeGroup && );
	void ISchemaAttributeGroup( ISchemaAttributeGroup const & );
	void ISchemaAttributeGroup();
	ISchemaAttributeGroup & operator=( ISchemaAttributeGroup && );
	ISchemaAttributeGroup & operator=( ISchemaAttributeGroup const & );
	/*0008*/
};

struct ISchemaComplexType : ISchemaType {
	/*00f8*/ virtual HRESULT get_isAbstract( SHORT * ) = 0;
	/*0100*/ virtual HRESULT get_anyAttribute( ISchemaAny * * ) = 0;
	/*0108*/ virtual HRESULT get_attributes( ISchemaItemCollection * * ) = 0;
	/*0110*/ virtual HRESULT get_contentType( _SCHEMACONTENTTYPE * ) = 0;
	/*0118*/ virtual HRESULT get_contentModel( ISchemaModelGroup * * ) = 0;
	/*0120*/ virtual HRESULT get_prohibitedSubstitutions( _SCHEMADERIVATIONMETHOD * ) = 0;
	void ISchemaComplexType( ISchemaComplexType && );
	void ISchemaComplexType( ISchemaComplexType const & );
	void ISchemaComplexType();
	ISchemaComplexType & operator=( ISchemaComplexType && );
	ISchemaComplexType & operator=( ISchemaComplexType const & );
	/*0008*/
};

struct ISchemaElement : ISchemaParticle {
	/*0080*/ virtual HRESULT get_type( ISchemaType * * ) = 0;
	/*0088*/ virtual HRESULT get_scope( ISchemaComplexType * * ) = 0;
	/*0090*/ virtual HRESULT get_defaultValue( WCHAR * * ) = 0;
	/*0098*/ virtual HRESULT get_fixedValue( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT get_isNillable( SHORT * ) = 0;
	/*00a8*/ virtual HRESULT get_identityConstraints( ISchemaItemCollection * * ) = 0;
	/*00b0*/ virtual HRESULT get_substitutionGroup( ISchemaElement * * ) = 0;
	/*00b8*/ virtual HRESULT get_substitutionGroupExclusions( _SCHEMADERIVATIONMETHOD * ) = 0;
	/*00c0*/ virtual HRESULT get_disallowedSubstitutions( _SCHEMADERIVATIONMETHOD * ) = 0;
	/*00c8*/ virtual HRESULT get_isAbstract( SHORT * ) = 0;
	/*00d0*/ virtual HRESULT get_isReference( SHORT * ) = 0;
	void ISchemaElement( ISchemaElement && );
	void ISchemaElement( ISchemaElement const & );
	void ISchemaElement();
	ISchemaElement & operator=( ISchemaElement && );
	ISchemaElement & operator=( ISchemaElement const & );
	/*0008*/
};

struct ISchemaIdentityConstraint : ISchemaItem {
	/*0070*/ virtual HRESULT get_selector( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT get_fields( ISchemaStringCollection * * ) = 0;
	/*0080*/ virtual HRESULT get_referencedKey( ISchemaIdentityConstraint * * ) = 0;
	void ISchemaIdentityConstraint( ISchemaIdentityConstraint && );
	void ISchemaIdentityConstraint( ISchemaIdentityConstraint const & );
	void ISchemaIdentityConstraint();
	ISchemaIdentityConstraint & operator=( ISchemaIdentityConstraint && );
	ISchemaIdentityConstraint & operator=( ISchemaIdentityConstraint const & );
	/*0008*/
};

struct ISchemaItem : IDispatch {
	/*0038*/ virtual HRESULT get_name( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT get_namespaceURI( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT get_schema( ISchema * * ) = 0;
	/*0050*/ virtual HRESULT get_id( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT get_itemType( _SOMITEMTYPE * ) = 0;
	/*0060*/ virtual HRESULT get_unhandledAttributes( IVBSAXAttributes * * ) = 0;
	/*0068*/ virtual HRESULT writeAnnotation( IUnknown * , SHORT * ) = 0;
	void ISchemaItem( ISchemaItem && );
	void ISchemaItem( ISchemaItem const & );
	void ISchemaItem();
	ISchemaItem & operator=( ISchemaItem && );
	ISchemaItem & operator=( ISchemaItem const & );
	/*0008*/
};

struct ISchemaItemCollection : IDispatch {
	/*0038*/ virtual HRESULT get_item( LONG , ISchemaItem * * ) = 0;
	/*0040*/ virtual HRESULT itemByName( WCHAR * , ISchemaItem * * ) = 0;
	/*0048*/ virtual HRESULT itemByQName( WCHAR * , WCHAR * , ISchemaItem * * ) = 0;
	/*0050*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0058*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	void ISchemaItemCollection( ISchemaItemCollection && );
	void ISchemaItemCollection( ISchemaItemCollection const & );
	void ISchemaItemCollection();
	ISchemaItemCollection & operator=( ISchemaItemCollection && );
	ISchemaItemCollection & operator=( ISchemaItemCollection const & );
	/*0008*/
};

struct ISchemaModelGroup : ISchemaParticle {
	/*0080*/ virtual HRESULT get_particles( ISchemaItemCollection * * ) = 0;
	void ISchemaModelGroup( ISchemaModelGroup && );
	void ISchemaModelGroup( ISchemaModelGroup const & );
	void ISchemaModelGroup();
	ISchemaModelGroup & operator=( ISchemaModelGroup && );
	ISchemaModelGroup & operator=( ISchemaModelGroup const & );
	/*0008*/
};

struct ISchemaNotation : ISchemaItem {
	/*0070*/ virtual HRESULT get_systemIdentifier( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT get_publicIdentifier( WCHAR * * ) = 0;
	void ISchemaNotation( ISchemaNotation && );
	void ISchemaNotation( ISchemaNotation const & );
	void ISchemaNotation();
	ISchemaNotation & operator=( ISchemaNotation && );
	ISchemaNotation & operator=( ISchemaNotation const & );
	/*0008*/
};

struct ISchemaParticle : ISchemaItem {
	/*0070*/ virtual HRESULT get_minOccurs( tagVARIANT * ) = 0;
	/*0078*/ virtual HRESULT get_maxOccurs( tagVARIANT * ) = 0;
	void ISchemaParticle( ISchemaParticle && );
	void ISchemaParticle( ISchemaParticle const & );
	void ISchemaParticle();
	ISchemaParticle & operator=( ISchemaParticle && );
	ISchemaParticle & operator=( ISchemaParticle const & );
	/*0008*/
};

struct ISchemaStringCollection : IDispatch {
	/*0038*/ virtual HRESULT get_item( LONG , WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0048*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	void ISchemaStringCollection( ISchemaStringCollection && );
	void ISchemaStringCollection( ISchemaStringCollection const & );
	void ISchemaStringCollection();
	ISchemaStringCollection & operator=( ISchemaStringCollection && );
	ISchemaStringCollection & operator=( ISchemaStringCollection const & );
	/*0008*/
};

struct ISchemaType : ISchemaItem {
	/*0070*/ virtual HRESULT get_baseTypes( ISchemaItemCollection * * ) = 0;
	/*0078*/ virtual HRESULT get_final( _SCHEMADERIVATIONMETHOD * ) = 0;
	/*0080*/ virtual HRESULT get_variety( _SCHEMATYPEVARIETY * ) = 0;
	/*0088*/ virtual HRESULT get_derivedBy( _SCHEMADERIVATIONMETHOD * ) = 0;
	/*0090*/ virtual HRESULT isValid( WCHAR * , SHORT * ) = 0;
	/*0098*/ virtual HRESULT get_minExclusive( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT get_minInclusive( WCHAR * * ) = 0;
	/*00a8*/ virtual HRESULT get_maxExclusive( WCHAR * * ) = 0;
	/*00b0*/ virtual HRESULT get_maxInclusive( WCHAR * * ) = 0;
	/*00b8*/ virtual HRESULT get_totalDigits( tagVARIANT * ) = 0;
	/*00c0*/ virtual HRESULT get_fractionDigits( tagVARIANT * ) = 0;
	/*00c8*/ virtual HRESULT get_length( tagVARIANT * ) = 0;
	/*00d0*/ virtual HRESULT get_minLength( tagVARIANT * ) = 0;
	/*00d8*/ virtual HRESULT get_maxLength( tagVARIANT * ) = 0;
	/*00e0*/ virtual HRESULT get_enumeration( ISchemaStringCollection * * ) = 0;
	/*00e8*/ virtual HRESULT get_whitespace( _SCHEMAWHITESPACE * ) = 0;
	/*00f0*/ virtual HRESULT get_patterns( ISchemaStringCollection * * ) = 0;
	void ISchemaType( ISchemaType && );
	void ISchemaType( ISchemaType const & );
	void ISchemaType();
	ISchemaType & operator=( ISchemaType && );
	ISchemaType & operator=( ISchemaType const & );
	/*0008*/
};

struct ISearchFolderItemFactory : IUnknown {
	/*0018*/ virtual HRESULT SetDisplayName( WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT SetFolderTypeID( _GUID ) = 0;
	/*0028*/ virtual HRESULT SetFolderLogicalViewMode( FOLDERLOGICALVIEWMODE ) = 0;
	/*0030*/ virtual HRESULT SetIconSize( INT ) = 0;
	/*0038*/ virtual HRESULT SetVisibleColumns( UINT , _tagpropertykey const * ) = 0;
	/*0040*/ virtual HRESULT SetSortColumns( UINT , SORTCOLUMN * ) = 0;
	/*0048*/ virtual HRESULT SetGroupColumn( _tagpropertykey const & ) = 0;
	/*0050*/ virtual HRESULT SetStacks( UINT , _tagpropertykey * ) = 0;
	/*0058*/ virtual HRESULT SetScope( IShellItemArray * ) = 0;
	/*0060*/ virtual HRESULT SetCondition( ICondition * ) = 0;
	/*0068*/ virtual HRESULT GetShellItem( _GUID const & , void * * ) = 0;
	/*0070*/ virtual HRESULT GetIDList( _ITEMIDLIST __unaligned * * ) = 0;
	void ISearchFolderItemFactory( ISearchFolderItemFactory && );
	void ISearchFolderItemFactory( ISearchFolderItemFactory const & );
	void ISearchFolderItemFactory();
	ISearchFolderItemFactory & operator=( ISearchFolderItemFactory && );
	ISearchFolderItemFactory & operator=( ISearchFolderItemFactory const & );
	/*0008*/
};

struct ISequentialStream : IUnknown {
	/*0018*/ virtual HRESULT Read( void * , ULONG , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Write( void const * , ULONG , ULONG * ) = 0;
	void ISequentialStream( ISequentialStream && );
	void ISequentialStream( ISequentialStream const & );
	void ISequentialStream();
	ISequentialStream & operator=( ISequentialStream && );
	ISequentialStream & operator=( ISequentialStream const & );
	/*0008*/
};

struct IServerSecurity : IUnknown {
	/*0018*/ virtual HRESULT QueryBlanket( ULONG * , ULONG * , WCHAR * * , ULONG * , ULONG * , void * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT ImpersonateClient() = 0;
	/*0028*/ virtual HRESULT RevertToSelf() = 0;
	/*0030*/ virtual INT IsImpersonating() = 0;
	void IServerSecurity( IServerSecurity && );
	void IServerSecurity( IServerSecurity const & );
	void IServerSecurity();
	IServerSecurity & operator=( IServerSecurity && );
	IServerSecurity & operator=( IServerSecurity const & );
	/*0008*/
};

struct IServerXMLHTTPRequest : IXMLHTTPRequest {
	/*00a8*/ virtual HRESULT setTimeouts( LONG , LONG , LONG , LONG ) = 0;
	/*00b0*/ virtual HRESULT waitForResponse( tagVARIANT , SHORT * ) = 0;
	/*00b8*/ virtual HRESULT getOption( _SERVERXMLHTTP_OPTION , tagVARIANT * ) = 0;
	/*00c0*/ virtual HRESULT setOption( _SERVERXMLHTTP_OPTION , tagVARIANT ) = 0;
	void IServerXMLHTTPRequest( IServerXMLHTTPRequest && );
	void IServerXMLHTTPRequest( IServerXMLHTTPRequest const & );
	void IServerXMLHTTPRequest();
	IServerXMLHTTPRequest & operator=( IServerXMLHTTPRequest && );
	IServerXMLHTTPRequest & operator=( IServerXMLHTTPRequest const & );
	/*0008*/
};

struct IServerXMLHTTPRequest2 : IServerXMLHTTPRequest {
	/*00c8*/ virtual HRESULT setProxy( _SXH_PROXY_SETTING , tagVARIANT , tagVARIANT ) = 0;
	/*00d0*/ virtual HRESULT setProxyCredentials( WCHAR * , WCHAR * ) = 0;
	void IServerXMLHTTPRequest2( IServerXMLHTTPRequest2 && );
	void IServerXMLHTTPRequest2( IServerXMLHTTPRequest2 const & );
	void IServerXMLHTTPRequest2();
	IServerXMLHTTPRequest2 & operator=( IServerXMLHTTPRequest2 && );
	IServerXMLHTTPRequest2 & operator=( IServerXMLHTTPRequest2 const & );
	/*0008*/
};

struct IServiceProvider : IUnknown {
	/*0018*/ virtual HRESULT QueryService( _GUID const & , _GUID const & , void * * ) = 0;
	void IServiceProvider( IServiceProvider && );
	void IServiceProvider( IServiceProvider const & );
	void IServiceProvider();
	IServiceProvider & operator=( IServiceProvider && );
	IServiceProvider & operator=( IServiceProvider const & );
	/*0008*/
};

struct ISharedAccessBeacon : IUnknown {
	/*0018*/ virtual HRESULT GetMediaType( tagNETCON_MEDIATYPE * ) = 0;
	/*0020*/ virtual HRESULT GetLocalAdapterGUID( _GUID * ) = 0;
	/*0028*/ virtual HRESULT GetService( tagSAHOST_SERVICES , IUPnPService * * ) = 0;
	/*0030*/ virtual HRESULT GetUniqueDeviceName( WCHAR * * ) = 0;
	void ISharedAccessBeacon( ISharedAccessBeacon && );
	void ISharedAccessBeacon( ISharedAccessBeacon const & );
	void ISharedAccessBeacon();
	ISharedAccessBeacon & operator=( ISharedAccessBeacon && );
	ISharedAccessBeacon & operator=( ISharedAccessBeacon const & );
	/*0008*/
};

struct ISharedAccessBeaconFinder : IUnknown {
	/*0018*/ virtual HRESULT GetSharedAccessBeacon( WCHAR * , ISharedAccessBeacon * * ) = 0;
	void ISharedAccessBeaconFinder( ISharedAccessBeaconFinder && );
	void ISharedAccessBeaconFinder( ISharedAccessBeaconFinder const & );
	void ISharedAccessBeaconFinder();
	ISharedAccessBeaconFinder & operator=( ISharedAccessBeaconFinder && );
	ISharedAccessBeaconFinder & operator=( ISharedAccessBeaconFinder const & );
	/*0008*/
};

struct ISharingConfigurationManager : IUnknown {
	/*0018*/ virtual HRESULT CreateShare( DEF_SHARE_ID , SHARE_ROLE ) = 0;
	/*0020*/ virtual HRESULT DeleteShare( DEF_SHARE_ID ) = 0;
	/*0028*/ virtual HRESULT ShareExists( DEF_SHARE_ID ) = 0;
	/*0030*/ virtual HRESULT GetSharePermissions( DEF_SHARE_ID , SHARE_ROLE * ) = 0;
	/*0038*/ virtual HRESULT SharePrinters() = 0;
	/*0040*/ virtual HRESULT StopSharingPrinters() = 0;
	/*0048*/ virtual HRESULT ArePrintersShared() = 0;
	void ISharingConfigurationManager( ISharingConfigurationManager && );
	void ISharingConfigurationManager( ISharingConfigurationManager const & );
	void ISharingConfigurationManager();
	ISharingConfigurationManager & operator=( ISharingConfigurationManager && );
	ISharingConfigurationManager & operator=( ISharingConfigurationManager const & );
	/*0008*/
};

struct IShellBrowser : IOleWindow {
	/*0028*/ virtual HRESULT InsertMenusSB( HMENU__ * , tagOleMenuGroupWidths * ) = 0;
	/*0030*/ virtual HRESULT SetMenuSB( HMENU__ * , void * , HWND__ * ) = 0;
	/*0038*/ virtual HRESULT RemoveMenusSB( HMENU__ * ) = 0;
	/*0040*/ virtual HRESULT SetStatusTextSB( WCHAR const * ) = 0;
	/*0048*/ virtual HRESULT EnableModelessSB( INT ) = 0;
	/*0050*/ virtual HRESULT TranslateAcceleratorSB( tagMSG * , USHORT ) = 0;
	/*0058*/ virtual HRESULT BrowseObject( _ITEMIDLIST const __unaligned * , UINT ) = 0;
	/*0060*/ virtual HRESULT GetViewStateStream( ULONG , IStream * * ) = 0;
	/*0068*/ virtual HRESULT GetControlWindow( UINT , HWND__ * * ) = 0;
	/*0070*/ virtual HRESULT SendControlMsg( UINT , UINT , ULONGLONG , LONGLONG , LONGLONG * ) = 0;
	/*0078*/ virtual HRESULT QueryActiveShellView( IShellView * * ) = 0;
	/*0080*/ virtual HRESULT OnViewWindowActive( IShellView * ) = 0;
	/*0088*/ virtual HRESULT SetToolbarItems( _TBBUTTON * , UINT , UINT ) = 0;
	void IShellBrowser( IShellBrowser && );
	void IShellBrowser( IShellBrowser const & );
	void IShellBrowser();
	IShellBrowser & operator=( IShellBrowser && );
	IShellBrowser & operator=( IShellBrowser const & );
	/*0008*/
};

struct IShellExtInit : IUnknown {
	/*0018*/ virtual HRESULT Initialize( _ITEMIDLIST const __unaligned * , IDataObject * , HKEY__ * ) = 0;
	void IShellExtInit( IShellExtInit && );
	void IShellExtInit( IShellExtInit const & );
	void IShellExtInit();
	IShellExtInit & operator=( IShellExtInit && );
	IShellExtInit & operator=( IShellExtInit const & );
	/*0008*/
};

struct IShellFolder : IUnknown {
	/*0018*/ virtual HRESULT ParseDisplayName( HWND__ * , IBindCtx * , WCHAR * , ULONG * , _ITEMIDLIST __unaligned * * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT EnumObjects( HWND__ * , ULONG , IEnumIDList * * ) = 0;
	/*0028*/ virtual HRESULT BindToObject( _ITEMIDLIST const __unaligned * , IBindCtx * , _GUID const & , void * * ) = 0;
	/*0030*/ virtual HRESULT BindToStorage( _ITEMIDLIST const __unaligned * , IBindCtx * , _GUID const & , void * * ) = 0;
	/*0038*/ virtual HRESULT CompareIDs( LONGLONG , _ITEMIDLIST const __unaligned * , _ITEMIDLIST const __unaligned * ) = 0;
	/*0040*/ virtual HRESULT CreateViewObject( HWND__ * , _GUID const & , void * * ) = 0;
	/*0048*/ virtual HRESULT GetAttributesOf( UINT , _ITEMIDLIST const __unaligned * * , ULONG * ) = 0;
	/*0050*/ virtual HRESULT GetUIObjectOf( HWND__ * , UINT , _ITEMIDLIST const __unaligned * * , _GUID const & , UINT * , void * * ) = 0;
	/*0058*/ virtual HRESULT GetDisplayNameOf( _ITEMIDLIST const __unaligned * , ULONG , _STRRET * ) = 0;
	/*0060*/ virtual HRESULT SetNameOf( HWND__ * , _ITEMIDLIST const __unaligned * , WCHAR const * , ULONG , _ITEMIDLIST __unaligned * * ) = 0;
	void IShellFolder( IShellFolder && );
	void IShellFolder( IShellFolder const & );
	void IShellFolder();
	IShellFolder & operator=( IShellFolder && );
	IShellFolder & operator=( IShellFolder const & );
	/*0008*/
};

struct IShellFolder2 : IShellFolder {
	/*0068*/ virtual HRESULT GetDefaultSearchGUID( _GUID * ) = 0;
	/*0070*/ virtual HRESULT EnumSearches( IEnumExtraSearch * * ) = 0;
	/*0078*/ virtual HRESULT GetDefaultColumn( ULONG , ULONG * , ULONG * ) = 0;
	/*0080*/ virtual HRESULT GetDefaultColumnState( UINT , ULONG * ) = 0;
	/*0088*/ virtual HRESULT GetDetailsEx( _ITEMIDLIST const __unaligned * , _tagpropertykey const * , tagVARIANT * ) = 0;
	/*0090*/ virtual HRESULT GetDetailsOf( _ITEMIDLIST const __unaligned * , UINT , _SHELLDETAILS * ) = 0;
	/*0098*/ virtual HRESULT MapColumnToSCID( UINT , _tagpropertykey * ) = 0;
	void IShellFolder2( IShellFolder2 && );
	void IShellFolder2( IShellFolder2 const & );
	void IShellFolder2();
	IShellFolder2 & operator=( IShellFolder2 && );
	IShellFolder2 & operator=( IShellFolder2 const & );
	/*0008*/
};

struct IShellIcon : IUnknown {
	/*0018*/ virtual HRESULT GetIconOf( _ITEMIDLIST const __unaligned * , UINT , INT * ) = 0;
	void IShellIcon( IShellIcon && );
	void IShellIcon( IShellIcon const & );
	void IShellIcon();
	IShellIcon & operator=( IShellIcon && );
	IShellIcon & operator=( IShellIcon const & );
	/*0008*/
};

struct IShellIconOverlayIdentifier : IUnknown {
	/*0018*/ virtual HRESULT IsMemberOf( WCHAR const * , ULONG ) = 0;
	/*0020*/ virtual HRESULT GetOverlayInfo( WCHAR * , INT , INT * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT GetPriority( INT * ) = 0;
	void IShellIconOverlayIdentifier( IShellIconOverlayIdentifier && );
	void IShellIconOverlayIdentifier( IShellIconOverlayIdentifier const & );
	void IShellIconOverlayIdentifier();
	IShellIconOverlayIdentifier & operator=( IShellIconOverlayIdentifier && );
	IShellIconOverlayIdentifier & operator=( IShellIconOverlayIdentifier const & );
	/*0008*/
};

struct IShellItem : IUnknown {
	/*0018*/ virtual HRESULT BindToHandler( IBindCtx * , _GUID const & , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT GetParent( IShellItem * * ) = 0;
	/*0028*/ virtual HRESULT GetDisplayName( _SIGDN , WCHAR * * ) = 0;
	/*0030*/ virtual HRESULT GetAttributes( ULONG , ULONG * ) = 0;
	/*0038*/ virtual HRESULT Compare( IShellItem * , ULONG , INT * ) = 0;
	void IShellItem( IShellItem && );
	void IShellItem( IShellItem const & );
	void IShellItem();
	IShellItem & operator=( IShellItem && );
	IShellItem & operator=( IShellItem const & );
	/*0008*/
};

struct IShellItem2 : IShellItem {
	/*0040*/ virtual HRESULT GetPropertyStore( GETPROPERTYSTOREFLAGS , _GUID const & , void * * ) = 0;
	/*0048*/ virtual HRESULT GetPropertyStoreWithCreateObject( GETPROPERTYSTOREFLAGS , IUnknown * , _GUID const & , void * * ) = 0;
	/*0050*/ virtual HRESULT GetPropertyStoreForKeys( _tagpropertykey const * , UINT , GETPROPERTYSTOREFLAGS , _GUID const & , void * * ) = 0;
	/*0058*/ virtual HRESULT GetPropertyDescriptionList( _tagpropertykey const & , _GUID const & , void * * ) = 0;
	/*0060*/ virtual HRESULT Update( IBindCtx * ) = 0;
	/*0068*/ virtual HRESULT GetProperty( _tagpropertykey const & , tagPROPVARIANT * ) = 0;
	/*0070*/ virtual HRESULT GetCLSID( _tagpropertykey const & , _GUID * ) = 0;
	/*0078*/ virtual HRESULT GetFileTime( _tagpropertykey const & , _FILETIME * ) = 0;
	/*0080*/ virtual HRESULT GetInt32( _tagpropertykey const & , INT * ) = 0;
	/*0088*/ virtual HRESULT GetString( _tagpropertykey const & , WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT GetUInt32( _tagpropertykey const & , ULONG * ) = 0;
	/*0098*/ virtual HRESULT GetUInt64( _tagpropertykey const & , ULONGLONG * ) = 0;
	/*00a0*/ virtual HRESULT GetBool( _tagpropertykey const & , INT * ) = 0;
	void IShellItem2( IShellItem2 && );
	void IShellItem2( IShellItem2 const & );
	void IShellItem2();
	IShellItem2 & operator=( IShellItem2 && );
	IShellItem2 & operator=( IShellItem2 const & );
	/*0008*/
};

struct IShellItemArray : IUnknown {
	/*0018*/ virtual HRESULT BindToHandler( IBindCtx * , _GUID const & , _GUID const & , void * * ) = 0;
	/*0020*/ virtual HRESULT GetPropertyStore( GETPROPERTYSTOREFLAGS , _GUID const & , void * * ) = 0;
	/*0028*/ virtual HRESULT GetPropertyDescriptionList( _tagpropertykey const & , _GUID const & , void * * ) = 0;
	/*0030*/ virtual HRESULT GetAttributes( SIATTRIBFLAGS , ULONG , ULONG * ) = 0;
	/*0038*/ virtual HRESULT GetCount( ULONG * ) = 0;
	/*0040*/ virtual HRESULT GetItemAt( ULONG , IShellItem * * ) = 0;
	/*0048*/ virtual HRESULT EnumItems( IEnumShellItems * * ) = 0;
	void IShellItemArray( IShellItemArray && );
	void IShellItemArray( IShellItemArray const & );
	void IShellItemArray();
	IShellItemArray & operator=( IShellItemArray && );
	IShellItemArray & operator=( IShellItemArray const & );
	/*0008*/
};

struct IShellItemFilter : IUnknown {
	/*0018*/ virtual HRESULT IncludeItem( IShellItem * ) = 0;
	/*0020*/ virtual HRESULT GetEnumFlagsForItem( IShellItem * , ULONG * ) = 0;
	void IShellItemFilter( IShellItemFilter && );
	void IShellItemFilter( IShellItemFilter const & );
	void IShellItemFilter();
	IShellItemFilter & operator=( IShellItemFilter && );
	IShellItemFilter & operator=( IShellItemFilter const & );
	/*0008*/
};

struct IShellItemImageFactory : IUnknown {
	/*0018*/ virtual HRESULT GetImage( tagSIZE , INT , HBITMAP__ * * ) = 0;
	void IShellItemImageFactory( IShellItemImageFactory && );
	void IShellItemImageFactory( IShellItemImageFactory const & );
	void IShellItemImageFactory();
	IShellItemImageFactory & operator=( IShellItemImageFactory && );
	IShellItemImageFactory & operator=( IShellItemImageFactory const & );
	/*0008*/
};

struct IShellItemResources : IUnknown {
	/*0018*/ virtual HRESULT GetAttributes( ULONG * ) = 0;
	/*0020*/ virtual HRESULT GetSize( ULONGLONG * ) = 0;
	/*0028*/ virtual HRESULT GetTimes( _FILETIME * , _FILETIME * , _FILETIME * ) = 0;
	/*0030*/ virtual HRESULT SetTimes( _FILETIME const * , _FILETIME const * , _FILETIME const * ) = 0;
	/*0038*/ virtual HRESULT GetResourceDescription( SHELL_ITEM_RESOURCE const * , WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT EnumResources( IEnumResources * * ) = 0;
	/*0048*/ virtual HRESULT SupportsResource( SHELL_ITEM_RESOURCE const * ) = 0;
	/*0050*/ virtual HRESULT OpenResource( SHELL_ITEM_RESOURCE const * , _GUID const & , void * * ) = 0;
	/*0058*/ virtual HRESULT CreateResource( SHELL_ITEM_RESOURCE const * , _GUID const & , void * * ) = 0;
	/*0060*/ virtual HRESULT MarkForDelete() = 0;
	void IShellItemResources( IShellItemResources && );
	void IShellItemResources( IShellItemResources const & );
	void IShellItemResources();
	IShellItemResources & operator=( IShellItemResources && );
	IShellItemResources & operator=( IShellItemResources const & );
	/*0008*/
};

struct IShellLibrary : IUnknown {
	/*0018*/ virtual HRESULT LoadLibraryFromItem( IShellItem * , ULONG ) = 0;
	/*0020*/ virtual HRESULT LoadLibraryFromKnownFolder( _GUID const & , ULONG ) = 0;
	/*0028*/ virtual HRESULT AddFolder( IShellItem * ) = 0;
	/*0030*/ virtual HRESULT RemoveFolder( IShellItem * ) = 0;
	/*0038*/ virtual HRESULT GetFolders( LIBRARYFOLDERFILTER , _GUID const & , void * * ) = 0;
	/*0040*/ virtual HRESULT ResolveFolder( IShellItem * , ULONG , _GUID const & , void * * ) = 0;
	/*0048*/ virtual HRESULT GetDefaultSaveFolder( DEFAULTSAVEFOLDERTYPE , _GUID const & , void * * ) = 0;
	/*0050*/ virtual HRESULT SetDefaultSaveFolder( DEFAULTSAVEFOLDERTYPE , IShellItem * ) = 0;
	/*0058*/ virtual HRESULT GetOptions( LIBRARYOPTIONFLAGS * ) = 0;
	/*0060*/ virtual HRESULT SetOptions( LIBRARYOPTIONFLAGS , LIBRARYOPTIONFLAGS ) = 0;
	/*0068*/ virtual HRESULT GetFolderType( _GUID * ) = 0;
	/*0070*/ virtual HRESULT SetFolderType( _GUID const & ) = 0;
	/*0078*/ virtual HRESULT GetIcon( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT SetIcon( WCHAR const * ) = 0;
	/*0088*/ virtual HRESULT Commit() = 0;
	/*0090*/ virtual HRESULT Save( IShellItem * , WCHAR const * , LIBRARYSAVEFLAGS , IShellItem * * ) = 0;
	/*0098*/ virtual HRESULT SaveInKnownFolder( _GUID const & , WCHAR const * , LIBRARYSAVEFLAGS , IShellItem * * ) = 0;
	void IShellLibrary( IShellLibrary && );
	void IShellLibrary( IShellLibrary const & );
	void IShellLibrary();
	IShellLibrary & operator=( IShellLibrary && );
	IShellLibrary & operator=( IShellLibrary const & );
	/*0008*/
};

struct IShellLinkA : IUnknown {
	/*0018*/ virtual HRESULT GetPath( CHAR * , INT , _WIN32_FIND_DATAA * , ULONG ) = 0;
	/*0020*/ virtual HRESULT GetIDList( _ITEMIDLIST __unaligned * * ) = 0;
	/*0028*/ virtual HRESULT SetIDList( _ITEMIDLIST const __unaligned * ) = 0;
	/*0030*/ virtual HRESULT GetDescription( CHAR * , INT ) = 0;
	/*0038*/ virtual HRESULT SetDescription( CHAR const * ) = 0;
	/*0040*/ virtual HRESULT GetWorkingDirectory( CHAR * , INT ) = 0;
	/*0048*/ virtual HRESULT SetWorkingDirectory( CHAR const * ) = 0;
	/*0050*/ virtual HRESULT GetArguments( CHAR * , INT ) = 0;
	/*0058*/ virtual HRESULT SetArguments( CHAR const * ) = 0;
	/*0060*/ virtual HRESULT GetHotkey( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT SetHotkey( USHORT ) = 0;
	/*0070*/ virtual HRESULT GetShowCmd( INT * ) = 0;
	/*0078*/ virtual HRESULT SetShowCmd( INT ) = 0;
	/*0080*/ virtual HRESULT GetIconLocation( CHAR * , INT , INT * ) = 0;
	/*0088*/ virtual HRESULT SetIconLocation( CHAR const * , INT ) = 0;
	/*0090*/ virtual HRESULT SetRelativePath( CHAR const * , ULONG ) = 0;
	/*0098*/ virtual HRESULT Resolve( HWND__ * , ULONG ) = 0;
	/*00a0*/ virtual HRESULT SetPath( CHAR const * ) = 0;
	void IShellLinkA( IShellLinkA && );
	void IShellLinkA( IShellLinkA const & );
	void IShellLinkA();
	IShellLinkA & operator=( IShellLinkA && );
	IShellLinkA & operator=( IShellLinkA const & );
	/*0008*/
};

struct IShellLinkDataList : IUnknown {
	/*0018*/ virtual HRESULT AddDataBlock( void * ) = 0;
	/*0020*/ virtual HRESULT CopyDataBlock( ULONG , void * * ) = 0;
	/*0028*/ virtual HRESULT RemoveDataBlock( ULONG ) = 0;
	/*0030*/ virtual HRESULT GetFlags( ULONG * ) = 0;
	/*0038*/ virtual HRESULT SetFlags( ULONG ) = 0;
	void IShellLinkDataList( IShellLinkDataList && );
	void IShellLinkDataList( IShellLinkDataList const & );
	void IShellLinkDataList();
	IShellLinkDataList & operator=( IShellLinkDataList && );
	IShellLinkDataList & operator=( IShellLinkDataList const & );
	/*0008*/
};

struct IShellLinkW : IUnknown {
	/*0018*/ virtual HRESULT GetPath( WCHAR * , INT , _WIN32_FIND_DATAW * , ULONG ) = 0;
	/*0020*/ virtual HRESULT GetIDList( _ITEMIDLIST __unaligned * * ) = 0;
	/*0028*/ virtual HRESULT SetIDList( _ITEMIDLIST const __unaligned * ) = 0;
	/*0030*/ virtual HRESULT GetDescription( WCHAR * , INT ) = 0;
	/*0038*/ virtual HRESULT SetDescription( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT GetWorkingDirectory( WCHAR * , INT ) = 0;
	/*0048*/ virtual HRESULT SetWorkingDirectory( WCHAR const * ) = 0;
	/*0050*/ virtual HRESULT GetArguments( WCHAR * , INT ) = 0;
	/*0058*/ virtual HRESULT SetArguments( WCHAR const * ) = 0;
	/*0060*/ virtual HRESULT GetHotkey( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT SetHotkey( USHORT ) = 0;
	/*0070*/ virtual HRESULT GetShowCmd( INT * ) = 0;
	/*0078*/ virtual HRESULT SetShowCmd( INT ) = 0;
	/*0080*/ virtual HRESULT GetIconLocation( WCHAR * , INT , INT * ) = 0;
	/*0088*/ virtual HRESULT SetIconLocation( WCHAR const * , INT ) = 0;
	/*0090*/ virtual HRESULT SetRelativePath( WCHAR const * , ULONG ) = 0;
	/*0098*/ virtual HRESULT Resolve( HWND__ * , ULONG ) = 0;
	/*00a0*/ virtual HRESULT SetPath( WCHAR const * ) = 0;
	void IShellLinkW( IShellLinkW && );
	void IShellLinkW( IShellLinkW const & );
	void IShellLinkW();
	IShellLinkW & operator=( IShellLinkW && );
	IShellLinkW & operator=( IShellLinkW const & );
	/*0008*/
};

struct IShellMenu : IUnknown {
	/*0018*/ virtual HRESULT Initialize( IShellMenuCallback * , UINT , UINT , ULONG ) = 0;
	/*0020*/ virtual HRESULT GetMenuInfo( IShellMenuCallback * * , UINT * , UINT * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT SetShellFolder( IShellFolder * , _ITEMIDLIST const __unaligned * , HKEY__ * , ULONG ) = 0;
	/*0030*/ virtual HRESULT GetShellFolder( ULONG * , _ITEMIDLIST __unaligned * * , _GUID const & , void * * ) = 0;
	/*0038*/ virtual HRESULT SetMenu( HMENU__ * , HWND__ * , ULONG ) = 0;
	/*0040*/ virtual HRESULT GetMenu( HMENU__ * * , HWND__ * * , ULONG * ) = 0;
	/*0048*/ virtual HRESULT InvalidateItem( tagSMDATA * , ULONG ) = 0;
	/*0050*/ virtual HRESULT GetState( tagSMDATA * ) = 0;
	/*0058*/ virtual HRESULT SetMenuToolbar( IUnknown * , ULONG ) = 0;
	void IShellMenu( IShellMenu && );
	void IShellMenu( IShellMenu const & );
	void IShellMenu();
	IShellMenu & operator=( IShellMenu && );
	IShellMenu & operator=( IShellMenu const & );
	/*0008*/
};

struct IShellMenuCallback : IUnknown {
	/*0018*/ virtual HRESULT CallbackSM( tagSMDATA * , UINT , ULONGLONG , LONGLONG ) = 0;
	void IShellMenuCallback( IShellMenuCallback && );
	void IShellMenuCallback( IShellMenuCallback const & );
	void IShellMenuCallback();
	IShellMenuCallback & operator=( IShellMenuCallback && );
	IShellMenuCallback & operator=( IShellMenuCallback const & );
	/*0008*/
};

struct IShellPropSheetExt : IUnknown {
	/*0018*/ virtual HRESULT AddPages( INT (* )( _PSP * , LONGLONG ), LONGLONG ) = 0;
	/*0020*/ virtual HRESULT ReplacePage( UINT , INT (* )( _PSP * , LONGLONG ), LONGLONG ) = 0;
	void IShellPropSheetExt( IShellPropSheetExt && );
	void IShellPropSheetExt( IShellPropSheetExt const & );
	void IShellPropSheetExt();
	IShellPropSheetExt & operator=( IShellPropSheetExt && );
	IShellPropSheetExt & operator=( IShellPropSheetExt const & );
	/*0008*/
};

struct IShellTaskScheduler : IUnknown {
	/*0018*/ virtual HRESULT AddTask( IRunnableTask * , _GUID const & , ULONGLONG , ULONG ) = 0;
	/*0020*/ virtual HRESULT RemoveTasks( _GUID const & , ULONGLONG , INT ) = 0;
	/*0028*/ virtual UINT CountTasks( _GUID const & ) = 0;
	/*0030*/ virtual HRESULT Status( ULONG , ULONG ) = 0;
	void IShellTaskScheduler( IShellTaskScheduler && );
	void IShellTaskScheduler( IShellTaskScheduler const & );
	void IShellTaskScheduler();
	IShellTaskScheduler & operator=( IShellTaskScheduler && );
	IShellTaskScheduler & operator=( IShellTaskScheduler const & );
	/*0008*/
};

struct IShellView : IOleWindow {
	/*0028*/ virtual HRESULT TranslateAcceleratorW( tagMSG * ) = 0;
	/*0030*/ virtual HRESULT EnableModeless( INT ) = 0;
	/*0038*/ virtual HRESULT UIActivate( UINT ) = 0;
	/*0040*/ virtual HRESULT Refresh() = 0;
	/*0048*/ virtual HRESULT CreateViewWindow( IShellView * , FOLDERSETTINGS const * , IShellBrowser * , tagRECT * , HWND__ * * ) = 0;
	/*0050*/ virtual HRESULT DestroyViewWindow() = 0;
	/*0058*/ virtual HRESULT GetCurrentInfo( FOLDERSETTINGS * ) = 0;
	/*0060*/ virtual HRESULT AddPropertySheetPages( ULONG , INT (* )( _PSP * , LONGLONG ), LONGLONG ) = 0;
	/*0068*/ virtual HRESULT SaveViewState() = 0;
	/*0070*/ virtual HRESULT SelectItem( _ITEMIDLIST const __unaligned * , UINT ) = 0;
	/*0078*/ virtual HRESULT GetItemObject( UINT , _GUID const & , void * * ) = 0;
	void IShellView( IShellView && );
	void IShellView( IShellView const & );
	void IShellView();
	IShellView & operator=( IShellView && );
	IShellView & operator=( IShellView const & );
	/*0008*/
};

struct IShellView2 : IShellView {
	/*0080*/ virtual HRESULT GetView( _GUID * , ULONG ) = 0;
	/*0088*/ virtual HRESULT CreateViewWindow2( _SV2CVW2_PARAMS * ) = 0;
	/*0090*/ virtual HRESULT HandleRename( _ITEMIDLIST const __unaligned * ) = 0;
	/*0098*/ virtual HRESULT SelectAndPositionItem( _ITEMIDLIST const __unaligned * , UINT , tagPOINT * ) = 0;
	void IShellView2( IShellView2 && );
	void IShellView2( IShellView2 const & );
	void IShellView2();
	IShellView2 & operator=( IShellView2 && );
	IShellView2 & operator=( IShellView2 const & );
	/*0008*/
};

struct ISimpleFrameSite : IUnknown {
	/*0018*/ virtual HRESULT PreMessageFilter( HWND__ * , UINT , ULONGLONG , LONGLONG , LONGLONG * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT PostMessageFilter( HWND__ * , UINT , ULONGLONG , LONGLONG , LONGLONG * , ULONG ) = 0;
	void ISimpleFrameSite( ISimpleFrameSite && );
	void ISimpleFrameSite( ISimpleFrameSite const & );
	void ISimpleFrameSite();
	ISimpleFrameSite & operator=( ISimpleFrameSite && );
	ISimpleFrameSite & operator=( ISimpleFrameSite const & );
	/*0008*/
};

struct ISoftDistExt : IUnknown {
	/*0018*/ virtual HRESULT ProcessSoftDist( WCHAR const * , IXMLElement * , _tagSOFTDISTINFO * ) = 0;
	/*0020*/ virtual HRESULT GetFirstCodeBase( WCHAR * * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT GetNextCodeBase( WCHAR * * , ULONG * ) = 0;
	/*0030*/ virtual HRESULT AsyncInstallDistributionUnit( IBindCtx * , void * , ULONG , _tagCODEBASEHOLD * ) = 0;
	void ISoftDistExt( ISoftDistExt && );
	void ISoftDistExt( ISoftDistExt const & );
	void ISoftDistExt();
	ISoftDistExt & operator=( ISoftDistExt && );
	ISoftDistExt & operator=( ISoftDistExt const & );
	/*0008*/
};

struct ISortColumnArray : IUnknown {
	/*0018*/ virtual HRESULT GetCount( UINT * ) = 0;
	/*0020*/ virtual HRESULT GetAt( UINT , SORTCOLUMN * ) = 0;
	/*0028*/ virtual HRESULT GetSortType( SORT_ORDER_TYPE * ) = 0;
	void ISortColumnArray( ISortColumnArray && );
	void ISortColumnArray( ISortColumnArray const & );
	void ISortColumnArray();
	ISortColumnArray & operator=( ISortColumnArray && );
	ISortColumnArray & operator=( ISortColumnArray const & );
	/*0008*/
};

struct ISpecifyPropertyPages : IUnknown {
	/*0018*/ virtual HRESULT GetPages( tagCAUUID * ) = 0;
	void ISpecifyPropertyPages( ISpecifyPropertyPages && );
	void ISpecifyPropertyPages( ISpecifyPropertyPages const & );
	void ISpecifyPropertyPages();
	ISpecifyPropertyPages & operator=( ISpecifyPropertyPages && );
	ISpecifyPropertyPages & operator=( ISpecifyPropertyPages const & );
	/*0008*/
};

struct IStdMarshalInfo : IUnknown {
	/*0018*/ virtual HRESULT GetClassForHandler( ULONG , void * , _GUID * ) = 0;
	void IStdMarshalInfo( IStdMarshalInfo && );
	void IStdMarshalInfo( IStdMarshalInfo const & );
	void IStdMarshalInfo();
	IStdMarshalInfo & operator=( IStdMarshalInfo && );
	IStdMarshalInfo & operator=( IStdMarshalInfo const & );
	/*0008*/
};

struct IStorage : IUnknown {
	/*0018*/ virtual HRESULT CreateStream( WCHAR const * , ULONG , ULONG , ULONG , IStream * * ) = 0;
	/*0020*/ virtual HRESULT OpenStream( WCHAR const * , void * , ULONG , ULONG , IStream * * ) = 0;
	/*0028*/ virtual HRESULT CreateStorage( WCHAR const * , ULONG , ULONG , ULONG , IStorage * * ) = 0;
	/*0030*/ virtual HRESULT OpenStorage( WCHAR const * , IStorage * , ULONG , WCHAR * * , ULONG , IStorage * * ) = 0;
	/*0038*/ virtual HRESULT CopyTo( ULONG , _GUID const * , WCHAR * * , IStorage * ) = 0;
	/*0040*/ virtual HRESULT MoveElementTo( WCHAR const * , IStorage * , WCHAR const * , ULONG ) = 0;
	/*0048*/ virtual HRESULT Commit( ULONG ) = 0;
	/*0050*/ virtual HRESULT Revert() = 0;
	/*0058*/ virtual HRESULT EnumElements( ULONG , void * , ULONG , IEnumSTATSTG * * ) = 0;
	/*0060*/ virtual HRESULT DestroyElement( WCHAR const * ) = 0;
	/*0068*/ virtual HRESULT RenameElement( WCHAR const * , WCHAR const * ) = 0;
	/*0070*/ virtual HRESULT SetElementTimes( WCHAR const * , _FILETIME const * , _FILETIME const * , _FILETIME const * ) = 0;
	/*0078*/ virtual HRESULT SetClass( _GUID const & ) = 0;
	/*0080*/ virtual HRESULT SetStateBits( ULONG , ULONG ) = 0;
	/*0088*/ virtual HRESULT Stat( tagSTATSTG * , ULONG ) = 0;
	void IStorage( IStorage && );
	void IStorage( IStorage const & );
	void IStorage();
	IStorage & operator=( IStorage && );
	IStorage & operator=( IStorage const & );
	/*0008*/
};

struct IStream : ISequentialStream {
	/*0028*/ virtual HRESULT Seek( _LARGE_INTEGER , ULONG , _ULARGE_INTEGER * ) = 0;
	/*0030*/ virtual HRESULT SetSize( _ULARGE_INTEGER ) = 0;
	/*0038*/ virtual HRESULT CopyTo( IStream * , _ULARGE_INTEGER , _ULARGE_INTEGER * , _ULARGE_INTEGER * ) = 0;
	/*0040*/ virtual HRESULT Commit( ULONG ) = 0;
	/*0048*/ virtual HRESULT Revert() = 0;
	/*0050*/ virtual HRESULT LockRegion( _ULARGE_INTEGER , _ULARGE_INTEGER , ULONG ) = 0;
	/*0058*/ virtual HRESULT UnlockRegion( _ULARGE_INTEGER , _ULARGE_INTEGER , ULONG ) = 0;
	/*0060*/ virtual HRESULT Stat( tagSTATSTG * , ULONG ) = 0;
	/*0068*/ virtual HRESULT Clone( IStream * * ) = 0;
	void IStream( IStream && );
	void IStream( IStream const & );
	void IStream();
	IStream & operator=( IStream && );
	IStream & operator=( IStream const & );
	/*0008*/
};

struct ISupportErrorInfo : IUnknown {
	/*0018*/ virtual HRESULT InterfaceSupportsErrorInfo( _GUID const & ) = 0;
	void ISupportErrorInfo( ISupportErrorInfo && );
	void ISupportErrorInfo( ISupportErrorInfo const & );
	void ISupportErrorInfo();
	ISupportErrorInfo & operator=( ISupportErrorInfo && );
	ISupportErrorInfo & operator=( ISupportErrorInfo const & );
	/*0008*/
};

struct ISurrogate : IUnknown {
	/*0018*/ virtual HRESULT LoadDllServer( _GUID const & ) = 0;
	/*0020*/ virtual HRESULT FreeSurrogate() = 0;
	void ISurrogate( ISurrogate && );
	void ISurrogate( ISurrogate const & );
	void ISurrogate();
	ISurrogate & operator=( ISurrogate && );
	ISurrogate & operator=( ISurrogate const & );
	/*0008*/
};

struct ISurrogateService : IUnknown {
	/*0018*/ virtual HRESULT Init( _GUID const & , IProcessLock * , INT * ) = 0;
	/*0020*/ virtual HRESULT ApplicationLaunch( _GUID const & , tagApplicationType ) = 0;
	/*0028*/ virtual HRESULT ApplicationFree( _GUID const & ) = 0;
	/*0030*/ virtual HRESULT CatalogRefresh( ULONG ) = 0;
	/*0038*/ virtual HRESULT ProcessShutdown( tagShutdownType ) = 0;
	void ISurrogateService( ISurrogateService && );
	void ISurrogateService( ISurrogateService const & );
	void ISurrogateService();
	ISurrogateService & operator=( ISurrogateService && );
	ISurrogateService & operator=( ISurrogateService const & );
	/*0008*/
};

struct ISuspensionDependencyManager : IUnknown {
	/*0018*/ virtual HRESULT RegisterAsChild( void * ) = 0;
	/*0020*/ virtual HRESULT GroupChildWithParent( void * ) = 0;
	/*0028*/ virtual HRESULT UngroupChildFromParent( void * ) = 0;
	void ISuspensionDependencyManager( ISuspensionDependencyManager && );
	void ISuspensionDependencyManager( ISuspensionDependencyManager const & );
	void ISuspensionDependencyManager();
	ISuspensionDependencyManager & operator=( ISuspensionDependencyManager && );
	ISuspensionDependencyManager & operator=( ISuspensionDependencyManager const & );
	/*0008*/
};

struct ISynchronize : IUnknown {
	/*0018*/ virtual HRESULT Wait( ULONG , ULONG ) = 0;
	/*0020*/ virtual HRESULT Signal() = 0;
	/*0028*/ virtual HRESULT Reset() = 0;
	void ISynchronize( ISynchronize && );
	void ISynchronize( ISynchronize const & );
	void ISynchronize();
	ISynchronize & operator=( ISynchronize && );
	ISynchronize & operator=( ISynchronize const & );
	/*0008*/
};

struct ISynchronizeContainer : IUnknown {
	/*0018*/ virtual HRESULT AddSynchronize( ISynchronize * ) = 0;
	/*0020*/ virtual HRESULT WaitMultiple( ULONG , ULONG , ISynchronize * * ) = 0;
	void ISynchronizeContainer( ISynchronizeContainer && );
	void ISynchronizeContainer( ISynchronizeContainer const & );
	void ISynchronizeContainer();
	ISynchronizeContainer & operator=( ISynchronizeContainer && );
	ISynchronizeContainer & operator=( ISynchronizeContainer const & );
	/*0008*/
};

struct ISynchronizeEvent : ISynchronizeHandle {
	/*0020*/ virtual HRESULT SetEventHandle( void * * ) = 0;
	void ISynchronizeEvent( ISynchronizeEvent && );
	void ISynchronizeEvent( ISynchronizeEvent const & );
	void ISynchronizeEvent();
	ISynchronizeEvent & operator=( ISynchronizeEvent && );
	ISynchronizeEvent & operator=( ISynchronizeEvent const & );
	/*0008*/
};

struct ISynchronizeHandle : IUnknown {
	/*0018*/ virtual HRESULT GetHandle( void * * ) = 0;
	void ISynchronizeHandle( ISynchronizeHandle && );
	void ISynchronizeHandle( ISynchronizeHandle const & );
	void ISynchronizeHandle();
	ISynchronizeHandle & operator=( ISynchronizeHandle && );
	ISynchronizeHandle & operator=( ISynchronizeHandle const & );
	/*0008*/
};

struct ISynchronizeMutex : ISynchronize {
	/*0030*/ virtual HRESULT ReleaseMutex() = 0;
	void ISynchronizeMutex( ISynchronizeMutex && );
	void ISynchronizeMutex( ISynchronizeMutex const & );
	void ISynchronizeMutex();
	ISynchronizeMutex & operator=( ISynchronizeMutex && );
	ISynchronizeMutex & operator=( ISynchronizeMutex const & );
	/*0008*/
};

struct ITaskbarList : IUnknown {
	/*0018*/ virtual HRESULT HrInit() = 0;
	/*0020*/ virtual HRESULT AddTab( HWND__ * ) = 0;
	/*0028*/ virtual HRESULT DeleteTab( HWND__ * ) = 0;
	/*0030*/ virtual HRESULT ActivateTab( HWND__ * ) = 0;
	/*0038*/ virtual HRESULT SetActiveAlt( HWND__ * ) = 0;
	void ITaskbarList( ITaskbarList && );
	void ITaskbarList( ITaskbarList const & );
	void ITaskbarList();
	ITaskbarList & operator=( ITaskbarList && );
	ITaskbarList & operator=( ITaskbarList const & );
	/*0008*/
};

struct ITaskbarList2 : ITaskbarList {
	/*0040*/ virtual HRESULT MarkFullscreenWindow( HWND__ * , INT ) = 0;
	void ITaskbarList2( ITaskbarList2 && );
	void ITaskbarList2( ITaskbarList2 const & );
	void ITaskbarList2();
	ITaskbarList2 & operator=( ITaskbarList2 && );
	ITaskbarList2 & operator=( ITaskbarList2 const & );
	/*0008*/
};

struct ITaskbarList3 : ITaskbarList2 {
	/*0048*/ virtual HRESULT SetProgressValue( HWND__ * , ULONGLONG , ULONGLONG ) = 0;
	/*0050*/ virtual HRESULT SetProgressState( HWND__ * , TBPFLAG ) = 0;
	/*0058*/ virtual HRESULT RegisterTab( HWND__ * , HWND__ * ) = 0;
	/*0060*/ virtual HRESULT UnregisterTab( HWND__ * ) = 0;
	/*0068*/ virtual HRESULT SetTabOrder( HWND__ * , HWND__ * ) = 0;
	/*0070*/ virtual HRESULT SetTabActive( HWND__ * , HWND__ * , ULONG ) = 0;
	/*0078*/ virtual HRESULT ThumbBarAddButtons( HWND__ * , UINT , THUMBBUTTON * ) = 0;
	/*0080*/ virtual HRESULT ThumbBarUpdateButtons( HWND__ * , UINT , THUMBBUTTON * ) = 0;
	/*0088*/ virtual HRESULT ThumbBarSetImageList( HWND__ * , _IMAGELIST * ) = 0;
	/*0090*/ virtual HRESULT SetOverlayIcon( HWND__ * , HICON__ * , WCHAR const * ) = 0;
	/*0098*/ virtual HRESULT SetThumbnailTooltip( HWND__ * , WCHAR const * ) = 0;
	/*00a0*/ virtual HRESULT SetThumbnailClip( HWND__ * , tagRECT * ) = 0;
	void ITaskbarList3( ITaskbarList3 && );
	void ITaskbarList3( ITaskbarList3 const & );
	void ITaskbarList3();
	ITaskbarList3 & operator=( ITaskbarList3 && );
	ITaskbarList3 & operator=( ITaskbarList3 const & );
	/*0008*/
};

struct ITaskbarList4 : ITaskbarList3 {
	/*00a8*/ virtual HRESULT SetTabProperties( HWND__ * , STPFLAG ) = 0;
	void ITaskbarList4( ITaskbarList4 && );
	void ITaskbarList4( ITaskbarList4 const & );
	void ITaskbarList4();
	ITaskbarList4 & operator=( ITaskbarList4 && );
	ITaskbarList4 & operator=( ITaskbarList4 const & );
	/*0008*/
};

struct IThumbnailExtractor : IUnknown {
	/*0018*/ virtual HRESULT ExtractThumbnail( IStorage * , ULONG , ULONG , ULONG * , ULONG * , HBITMAP__ * * ) = 0;
	/*0020*/ virtual HRESULT OnFileUpdated( IStorage * ) = 0;
	void IThumbnailExtractor( IThumbnailExtractor && );
	void IThumbnailExtractor( IThumbnailExtractor const & );
	void IThumbnailExtractor();
	IThumbnailExtractor & operator=( IThumbnailExtractor && );
	IThumbnailExtractor & operator=( IThumbnailExtractor const & );
	/*0008*/
};

struct IThumbnailHandlerFactory : IUnknown {
	/*0018*/ virtual HRESULT GetThumbnailHandler( _ITEMIDLIST const __unaligned * , IBindCtx * , _GUID const & , void * * ) = 0;
	void IThumbnailHandlerFactory( IThumbnailHandlerFactory && );
	void IThumbnailHandlerFactory( IThumbnailHandlerFactory const & );
	void IThumbnailHandlerFactory();
	IThumbnailHandlerFactory & operator=( IThumbnailHandlerFactory && );
	IThumbnailHandlerFactory & operator=( IThumbnailHandlerFactory const & );
	/*0008*/
};

struct ITimeAndNoticeControl : IUnknown {
	/*0018*/ virtual HRESULT SuppressChanges( ULONG , ULONG ) = 0;
	void ITimeAndNoticeControl( ITimeAndNoticeControl && );
	void ITimeAndNoticeControl( ITimeAndNoticeControl const & );
	void ITimeAndNoticeControl();
	ITimeAndNoticeControl & operator=( ITimeAndNoticeControl && );
	ITimeAndNoticeControl & operator=( ITimeAndNoticeControl const & );
	/*0008*/
};

struct ITransferAdviseSink : IUnknown {
	/*0018*/ virtual HRESULT UpdateProgress( ULONGLONG , ULONGLONG , INT , INT , INT , INT ) = 0;
	/*0020*/ virtual HRESULT UpdateTransferState( ULONG ) = 0;
	/*0028*/ virtual HRESULT ConfirmOverwrite( IShellItem * , IShellItem * , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT ConfirmEncryptionLoss( IShellItem * ) = 0;
	/*0038*/ virtual HRESULT FileFailure( IShellItem * , WCHAR const * , HRESULT , WCHAR * , ULONG ) = 0;
	/*0040*/ virtual HRESULT SubStreamFailure( IShellItem * , WCHAR const * , HRESULT ) = 0;
	/*0048*/ virtual HRESULT PropertyFailure( IShellItem * , _tagpropertykey const * , HRESULT ) = 0;
	void ITransferAdviseSink( ITransferAdviseSink && );
	void ITransferAdviseSink( ITransferAdviseSink const & );
	void ITransferAdviseSink();
	ITransferAdviseSink & operator=( ITransferAdviseSink && );
	ITransferAdviseSink & operator=( ITransferAdviseSink const & );
	/*0008*/
};

struct ITransferDestination : IUnknown {
	/*0018*/ virtual HRESULT Advise( ITransferAdviseSink * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0028*/ virtual HRESULT CreateItem( WCHAR const * , ULONG , ULONGLONG , ULONG , _GUID const & , void * * , _GUID const & , void * * ) = 0;
	void ITransferDestination( ITransferDestination && );
	void ITransferDestination( ITransferDestination const & );
	void ITransferDestination();
	ITransferDestination & operator=( ITransferDestination && );
	ITransferDestination & operator=( ITransferDestination const & );
	/*0008*/
};

struct ITransferMediumItem : IRelatedItem {
	void ITransferMediumItem( ITransferMediumItem && );
	void ITransferMediumItem( ITransferMediumItem const & );
	void ITransferMediumItem();
	ITransferMediumItem & operator=( ITransferMediumItem && );
	ITransferMediumItem & operator=( ITransferMediumItem const & );
	/*0008*/
};

struct ITransferSource : IUnknown {
	/*0018*/ virtual HRESULT Advise( ITransferAdviseSink * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Unadvise( ULONG ) = 0;
	/*0028*/ virtual HRESULT SetProperties( IPropertyChangeArray * ) = 0;
	/*0030*/ virtual HRESULT OpenItem( IShellItem * , ULONG , _GUID const & , void * * ) = 0;
	/*0038*/ virtual HRESULT MoveItem( IShellItem * , IShellItem * , WCHAR const * , ULONG , IShellItem * * ) = 0;
	/*0040*/ virtual HRESULT RecycleItem( IShellItem * , IShellItem * , ULONG , IShellItem * * ) = 0;
	/*0048*/ virtual HRESULT RemoveItem( IShellItem * , ULONG ) = 0;
	/*0050*/ virtual HRESULT RenameItem( IShellItem * , WCHAR const * , ULONG , IShellItem * * ) = 0;
	/*0058*/ virtual HRESULT LinkItem( IShellItem * , IShellItem * , WCHAR const * , ULONG , IShellItem * * ) = 0;
	/*0060*/ virtual HRESULT ApplyPropertiesToItem( IShellItem * , IShellItem * * ) = 0;
	/*0068*/ virtual HRESULT GetDefaultDestinationName( IShellItem * , IShellItem * , WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT EnterFolder( IShellItem * ) = 0;
	/*0078*/ virtual HRESULT LeaveFolder( IShellItem * ) = 0;
	void ITransferSource( ITransferSource && );
	void ITransferSource( ITransferSource const & );
	void ITransferSource();
	ITransferSource & operator=( ITransferSource && );
	ITransferSource & operator=( ITransferSource const & );
	/*0008*/
};

struct ITypeChangeEvents : IUnknown {
	/*0018*/ virtual HRESULT RequestTypeChange( tagCHANGEKIND , ITypeInfo * , WCHAR * , INT * ) = 0;
	/*0020*/ virtual HRESULT AfterTypeChange( tagCHANGEKIND , ITypeInfo * , WCHAR * ) = 0;
	void ITypeChangeEvents( ITypeChangeEvents && );
	void ITypeChangeEvents( ITypeChangeEvents const & );
	void ITypeChangeEvents();
	ITypeChangeEvents & operator=( ITypeChangeEvents && );
	ITypeChangeEvents & operator=( ITypeChangeEvents const & );
	/*0008*/
};

struct ITypeComp : IUnknown {
	/*0018*/ virtual HRESULT Bind( WCHAR * , ULONG , USHORT , ITypeInfo * * , tagDESCKIND * , tagBINDPTR * ) = 0;
	/*0020*/ virtual HRESULT BindType( WCHAR * , ULONG , ITypeInfo * * , ITypeComp * * ) = 0;
	void ITypeComp( ITypeComp && );
	void ITypeComp( ITypeComp const & );
	void ITypeComp();
	ITypeComp & operator=( ITypeComp && );
	ITypeComp & operator=( ITypeComp const & );
	/*0008*/
};

struct ITypeFactory : IUnknown {
	/*0018*/ virtual HRESULT CreateFromTypeInfo( ITypeInfo * , _GUID const & , IUnknown * * ) = 0;
	void ITypeFactory( ITypeFactory && );
	void ITypeFactory( ITypeFactory const & );
	void ITypeFactory();
	ITypeFactory & operator=( ITypeFactory && );
	ITypeFactory & operator=( ITypeFactory const & );
	/*0008*/
};

struct ITypeInfo : IUnknown {
	/*0018*/ virtual HRESULT GetTypeAttr( tagTYPEATTR * * ) = 0;
	/*0020*/ virtual HRESULT GetTypeComp( ITypeComp * * ) = 0;
	/*0028*/ virtual HRESULT GetFuncDesc( UINT , tagFUNCDESC * * ) = 0;
	/*0030*/ virtual HRESULT GetVarDesc( UINT , tagVARDESC * * ) = 0;
	/*0038*/ virtual HRESULT GetNames( LONG , WCHAR * * , UINT , UINT * ) = 0;
	/*0040*/ virtual HRESULT GetRefTypeOfImplType( UINT , ULONG * ) = 0;
	/*0048*/ virtual HRESULT GetImplTypeFlags( UINT , INT * ) = 0;
	/*0050*/ virtual HRESULT GetIDsOfNames( WCHAR * * , UINT , LONG * ) = 0;
	/*0058*/ virtual HRESULT Invoke( void * , LONG , USHORT , tagDISPPARAMS * , tagVARIANT * , tagEXCEPINFO * , UINT * ) = 0;
	/*0060*/ virtual HRESULT GetDocumentation( LONG , WCHAR * * , WCHAR * * , ULONG * , WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT GetDllEntry( LONG , tagINVOKEKIND , WCHAR * * , WCHAR * * , WCHAR * ) = 0;
	/*0070*/ virtual HRESULT GetRefTypeInfo( ULONG , ITypeInfo * * ) = 0;
	/*0078*/ virtual HRESULT AddressOfMember( LONG , tagINVOKEKIND , void * * ) = 0;
	/*0080*/ virtual HRESULT CreateInstance( IUnknown * , _GUID const & , void * * ) = 0;
	/*0088*/ virtual HRESULT GetMops( LONG , WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT GetContainingTypeLib( ITypeLib * * , UINT * ) = 0;
	/*0098*/ virtual void ReleaseTypeAttr( tagTYPEATTR * ) = 0;
	/*00a0*/ virtual void ReleaseFuncDesc( tagFUNCDESC * ) = 0;
	/*00a8*/ virtual void ReleaseVarDesc( tagVARDESC * ) = 0;
	void ITypeInfo( ITypeInfo && );
	void ITypeInfo( ITypeInfo const & );
	void ITypeInfo();
	ITypeInfo & operator=( ITypeInfo && );
	ITypeInfo & operator=( ITypeInfo const & );
	/*0008*/
};

struct ITypeInfo2 : ITypeInfo {
	/*00b0*/ virtual HRESULT GetTypeKind( tagTYPEKIND * ) = 0;
	/*00b8*/ virtual HRESULT GetTypeFlags( ULONG * ) = 0;
	/*00c0*/ virtual HRESULT GetFuncIndexOfMemId( LONG , tagINVOKEKIND , UINT * ) = 0;
	/*00c8*/ virtual HRESULT GetVarIndexOfMemId( LONG , UINT * ) = 0;
	/*00d0*/ virtual HRESULT GetCustData( _GUID const & , tagVARIANT * ) = 0;
	/*00d8*/ virtual HRESULT GetFuncCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*00e0*/ virtual HRESULT GetParamCustData( UINT , UINT , _GUID const & , tagVARIANT * ) = 0;
	/*00e8*/ virtual HRESULT GetVarCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*00f0*/ virtual HRESULT GetImplTypeCustData( UINT , _GUID const & , tagVARIANT * ) = 0;
	/*00f8*/ virtual HRESULT GetDocumentation2( LONG , ULONG , WCHAR * * , ULONG * , WCHAR * * ) = 0;
	/*0100*/ virtual HRESULT GetAllCustData( tagCUSTDATA * ) = 0;
	/*0108*/ virtual HRESULT GetAllFuncCustData( UINT , tagCUSTDATA * ) = 0;
	/*0110*/ virtual HRESULT GetAllParamCustData( UINT , UINT , tagCUSTDATA * ) = 0;
	/*0118*/ virtual HRESULT GetAllVarCustData( UINT , tagCUSTDATA * ) = 0;
	/*0120*/ virtual HRESULT GetAllImplTypeCustData( UINT , tagCUSTDATA * ) = 0;
	void ITypeInfo2( ITypeInfo2 && );
	void ITypeInfo2( ITypeInfo2 const & );
	void ITypeInfo2();
	ITypeInfo2 & operator=( ITypeInfo2 && );
	ITypeInfo2 & operator=( ITypeInfo2 const & );
	/*0008*/
};

struct ITypeLib : IUnknown {
	/*0018*/ virtual UINT GetTypeInfoCount() = 0;
	/*0020*/ virtual HRESULT GetTypeInfo( UINT , ITypeInfo * * ) = 0;
	/*0028*/ virtual HRESULT GetTypeInfoType( UINT , tagTYPEKIND * ) = 0;
	/*0030*/ virtual HRESULT GetTypeInfoOfGuid( _GUID const & , ITypeInfo * * ) = 0;
	/*0038*/ virtual HRESULT GetLibAttr( tagTLIBATTR * * ) = 0;
	/*0040*/ virtual HRESULT GetTypeComp( ITypeComp * * ) = 0;
	/*0048*/ virtual HRESULT GetDocumentation( INT , WCHAR * * , WCHAR * * , ULONG * , WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT IsName( WCHAR * , ULONG , INT * ) = 0;
	/*0058*/ virtual HRESULT FindName( WCHAR * , ULONG , ITypeInfo * * , LONG * , WCHAR * ) = 0;
	/*0060*/ virtual void ReleaseTLibAttr( tagTLIBATTR * ) = 0;
	void ITypeLib( ITypeLib && );
	void ITypeLib( ITypeLib const & );
	void ITypeLib();
	ITypeLib & operator=( ITypeLib && );
	ITypeLib & operator=( ITypeLib const & );
	/*0008*/
};

struct ITypeLib2 : ITypeLib {
	/*0068*/ virtual HRESULT GetCustData( _GUID const & , tagVARIANT * ) = 0;
	/*0070*/ virtual HRESULT GetLibStatistics( ULONG * , ULONG * ) = 0;
	/*0078*/ virtual HRESULT GetDocumentation2( INT , ULONG , WCHAR * * , ULONG * , WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT GetAllCustData( tagCUSTDATA * ) = 0;
	void ITypeLib2( ITypeLib2 && );
	void ITypeLib2( ITypeLib2 const & );
	void ITypeLib2();
	ITypeLib2 & operator=( ITypeLib2 && );
	ITypeLib2 & operator=( ITypeLib2 const & );
	/*0008*/
};

struct ITypeLibRegistration : IUnknown {
	/*0018*/ virtual HRESULT GetGuid( _GUID * ) = 0;
	/*0020*/ virtual HRESULT GetVersion( WCHAR * * ) = 0;
	/*0028*/ virtual HRESULT GetLcid( ULONG * ) = 0;
	/*0030*/ virtual HRESULT GetWin32Path( WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT GetWin64Path( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT GetDisplayName( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT GetFlags( ULONG * ) = 0;
	/*0050*/ virtual HRESULT GetHelpDir( WCHAR * * ) = 0;
	void ITypeLibRegistration( ITypeLibRegistration && );
	void ITypeLibRegistration( ITypeLibRegistration const & );
	void ITypeLibRegistration();
	ITypeLibRegistration & operator=( ITypeLibRegistration && );
	ITypeLibRegistration & operator=( ITypeLibRegistration const & );
	/*0008*/
};

struct ITypeLibRegistrationReader : IUnknown {
	/*0018*/ virtual HRESULT EnumTypeLibRegistrations( IEnumUnknown * * ) = 0;
	void ITypeLibRegistrationReader( ITypeLibRegistrationReader && );
	void ITypeLibRegistrationReader( ITypeLibRegistrationReader const & );
	void ITypeLibRegistrationReader();
	ITypeLibRegistrationReader & operator=( ITypeLibRegistrationReader && );
	ITypeLibRegistrationReader & operator=( ITypeLibRegistrationReader const & );
	/*0008*/
};

struct ITypeMarshal : IUnknown {
	/*0018*/ virtual HRESULT Size( void * , ULONG , void * , ULONG * ) = 0;
	/*0020*/ virtual HRESULT Marshal( void * , ULONG , void * , ULONG , UCHAR * , ULONG * ) = 0;
	/*0028*/ virtual HRESULT Unmarshal( void * , ULONG , ULONG , UCHAR * , ULONG * ) = 0;
	/*0030*/ virtual HRESULT Free( void * ) = 0;
	void ITypeMarshal( ITypeMarshal && );
	void ITypeMarshal( ITypeMarshal const & );
	void ITypeMarshal();
	ITypeMarshal & operator=( ITypeMarshal && );
	ITypeMarshal & operator=( ITypeMarshal const & );
	/*0008*/
};

struct IUPnPAddressFamilyControl : IUnknown {
	/*0018*/ virtual HRESULT SetAddressFamily( LONG ) = 0;
	/*0020*/ virtual HRESULT GetAddressFamily( LONG * ) = 0;
	void IUPnPAddressFamilyControl( IUPnPAddressFamilyControl && );
	void IUPnPAddressFamilyControl( IUPnPAddressFamilyControl const & );
	void IUPnPAddressFamilyControl();
	IUPnPAddressFamilyControl & operator=( IUPnPAddressFamilyControl && );
	IUPnPAddressFamilyControl & operator=( IUPnPAddressFamilyControl const & );
	/*0008*/
};

struct IUPnPAsyncResult : IUnknown {
	/*0018*/ virtual HRESULT AsyncOperationComplete( ULONGLONG ) = 0;
	void IUPnPAsyncResult( IUPnPAsyncResult && );
	void IUPnPAsyncResult( IUPnPAsyncResult const & );
	void IUPnPAsyncResult();
	IUPnPAsyncResult & operator=( IUPnPAsyncResult && );
	IUPnPAsyncResult & operator=( IUPnPAsyncResult const & );
	/*0008*/
};

struct IUPnPDescriptionDocument : IDispatch {
	/*0038*/ virtual HRESULT get_ReadyState( LONG * ) = 0;
	/*0040*/ virtual HRESULT Load( WCHAR * ) = 0;
	/*0048*/ virtual HRESULT LoadAsync( WCHAR * , IUnknown * ) = 0;
	/*0050*/ virtual HRESULT get_LoadResult( LONG * ) = 0;
	/*0058*/ virtual HRESULT Abort() = 0;
	/*0060*/ virtual HRESULT RootDevice( IUPnPDevice * * ) = 0;
	/*0068*/ virtual HRESULT DeviceByUDN( WCHAR * , IUPnPDevice * * ) = 0;
	void IUPnPDescriptionDocument( IUPnPDescriptionDocument && );
	void IUPnPDescriptionDocument( IUPnPDescriptionDocument const & );
	void IUPnPDescriptionDocument();
	IUPnPDescriptionDocument & operator=( IUPnPDescriptionDocument && );
	IUPnPDescriptionDocument & operator=( IUPnPDescriptionDocument const & );
	/*0008*/
};

struct IUPnPDescriptionDocumentCallback : IUnknown {
	/*0018*/ virtual HRESULT LoadComplete( HRESULT ) = 0;
	void IUPnPDescriptionDocumentCallback( IUPnPDescriptionDocumentCallback && );
	void IUPnPDescriptionDocumentCallback( IUPnPDescriptionDocumentCallback const & );
	void IUPnPDescriptionDocumentCallback();
	IUPnPDescriptionDocumentCallback & operator=( IUPnPDescriptionDocumentCallback && );
	IUPnPDescriptionDocumentCallback & operator=( IUPnPDescriptionDocumentCallback const & );
	/*0008*/
};

struct IUPnPDevice : IDispatch {
	/*0038*/ virtual HRESULT get_IsRootDevice( SHORT * ) = 0;
	/*0040*/ virtual HRESULT get_RootDevice( IUPnPDevice * * ) = 0;
	/*0048*/ virtual HRESULT get_ParentDevice( IUPnPDevice * * ) = 0;
	/*0050*/ virtual HRESULT get_HasChildren( SHORT * ) = 0;
	/*0058*/ virtual HRESULT get_Children( IUPnPDevices * * ) = 0;
	/*0060*/ virtual HRESULT get_UniqueDeviceName( WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT get_FriendlyName( WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT get_Type( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT get_PresentationURL( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT get_ManufacturerName( WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT get_ManufacturerURL( WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT get_ModelName( WCHAR * * ) = 0;
	/*0098*/ virtual HRESULT get_ModelNumber( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT get_Description( WCHAR * * ) = 0;
	/*00a8*/ virtual HRESULT get_ModelURL( WCHAR * * ) = 0;
	/*00b0*/ virtual HRESULT get_UPC( WCHAR * * ) = 0;
	/*00b8*/ virtual HRESULT get_SerialNumber( WCHAR * * ) = 0;
	/*00c0*/ virtual HRESULT IconURL( WCHAR * , LONG , LONG , LONG , WCHAR * * ) = 0;
	/*00c8*/ virtual HRESULT get_Services( IUPnPServices * * ) = 0;
	void IUPnPDevice( IUPnPDevice && );
	void IUPnPDevice( IUPnPDevice const & );
	void IUPnPDevice();
	IUPnPDevice & operator=( IUPnPDevice && );
	IUPnPDevice & operator=( IUPnPDevice const & );
	/*0008*/
};

struct IUPnPDeviceDocumentAccess : IUnknown {
	/*0018*/ virtual HRESULT GetDocumentURL( WCHAR * * ) = 0;
	void IUPnPDeviceDocumentAccess( IUPnPDeviceDocumentAccess && );
	void IUPnPDeviceDocumentAccess( IUPnPDeviceDocumentAccess const & );
	void IUPnPDeviceDocumentAccess();
	IUPnPDeviceDocumentAccess & operator=( IUPnPDeviceDocumentAccess && );
	IUPnPDeviceDocumentAccess & operator=( IUPnPDeviceDocumentAccess const & );
	/*0008*/
};

struct IUPnPDeviceDocumentAccessEx : IUnknown {
	/*0018*/ virtual HRESULT GetDocument( WCHAR * * ) = 0;
	void IUPnPDeviceDocumentAccessEx( IUPnPDeviceDocumentAccessEx && );
	void IUPnPDeviceDocumentAccessEx( IUPnPDeviceDocumentAccessEx const & );
	void IUPnPDeviceDocumentAccessEx();
	IUPnPDeviceDocumentAccessEx & operator=( IUPnPDeviceDocumentAccessEx && );
	IUPnPDeviceDocumentAccessEx & operator=( IUPnPDeviceDocumentAccessEx const & );
	/*0008*/
};

struct IUPnPDeviceFinder : IDispatch {
	/*0038*/ virtual HRESULT FindByType( WCHAR * , ULONG , IUPnPDevices * * ) = 0;
	/*0040*/ virtual HRESULT CreateAsyncFind( WCHAR * , ULONG , IUnknown * , LONG * ) = 0;
	/*0048*/ virtual HRESULT StartAsyncFind( LONG ) = 0;
	/*0050*/ virtual HRESULT CancelAsyncFind( LONG ) = 0;
	/*0058*/ virtual HRESULT FindByUDN( WCHAR * , IUPnPDevice * * ) = 0;
	void IUPnPDeviceFinder( IUPnPDeviceFinder && );
	void IUPnPDeviceFinder( IUPnPDeviceFinder const & );
	void IUPnPDeviceFinder();
	IUPnPDeviceFinder & operator=( IUPnPDeviceFinder && );
	IUPnPDeviceFinder & operator=( IUPnPDeviceFinder const & );
	/*0008*/
};

struct IUPnPDeviceFinderAddCallbackWithInterface : IUnknown {
	/*0018*/ virtual HRESULT DeviceAddedWithInterface( LONG , IUPnPDevice * , _GUID * ) = 0;
	void IUPnPDeviceFinderAddCallbackWithInterface( IUPnPDeviceFinderAddCallbackWithInterface && );
	void IUPnPDeviceFinderAddCallbackWithInterface( IUPnPDeviceFinderAddCallbackWithInterface const & );
	void IUPnPDeviceFinderAddCallbackWithInterface();
	IUPnPDeviceFinderAddCallbackWithInterface & operator=( IUPnPDeviceFinderAddCallbackWithInterface && );
	IUPnPDeviceFinderAddCallbackWithInterface & operator=( IUPnPDeviceFinderAddCallbackWithInterface const & );
	/*0008*/
};

struct IUPnPDeviceFinderCallback : IUnknown {
	/*0018*/ virtual HRESULT DeviceAdded( LONG , IUPnPDevice * ) = 0;
	/*0020*/ virtual HRESULT DeviceRemoved( LONG , WCHAR * ) = 0;
	/*0028*/ virtual HRESULT SearchComplete( LONG ) = 0;
	void IUPnPDeviceFinderCallback( IUPnPDeviceFinderCallback && );
	void IUPnPDeviceFinderCallback( IUPnPDeviceFinderCallback const & );
	void IUPnPDeviceFinderCallback();
	IUPnPDeviceFinderCallback & operator=( IUPnPDeviceFinderCallback && );
	IUPnPDeviceFinderCallback & operator=( IUPnPDeviceFinderCallback const & );
	/*0008*/
};

struct IUPnPDevices : IDispatch {
	/*0038*/ virtual HRESULT get_Count( LONG * ) = 0;
	/*0040*/ virtual HRESULT get__NewEnum( IUnknown * * ) = 0;
	/*0048*/ virtual HRESULT get_Item( WCHAR * , IUPnPDevice * * ) = 0;
	void IUPnPDevices( IUPnPDevices && );
	void IUPnPDevices( IUPnPDevices const & );
	void IUPnPDevices();
	IUPnPDevices & operator=( IUPnPDevices && );
	IUPnPDevices & operator=( IUPnPDevices const & );
	/*0008*/
};

struct IUPnPHttpHeaderControl : IUnknown {
	/*0018*/ virtual HRESULT AddRequestHeaders( WCHAR * ) = 0;
	void IUPnPHttpHeaderControl( IUPnPHttpHeaderControl && );
	void IUPnPHttpHeaderControl( IUPnPHttpHeaderControl const & );
	void IUPnPHttpHeaderControl();
	IUPnPHttpHeaderControl & operator=( IUPnPHttpHeaderControl && );
	IUPnPHttpHeaderControl & operator=( IUPnPHttpHeaderControl const & );
	/*0008*/
};

struct IUPnPService : IDispatch {
	/*0038*/ virtual HRESULT QueryStateVariable( WCHAR * , tagVARIANT * ) = 0;
	/*0040*/ virtual HRESULT InvokeAction( WCHAR * , tagVARIANT , tagVARIANT * , tagVARIANT * ) = 0;
	/*0048*/ virtual HRESULT get_ServiceTypeIdentifier( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT AddCallback( IUnknown * ) = 0;
	/*0058*/ virtual HRESULT get_Id( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT get_LastTransportStatus( LONG * ) = 0;
	void IUPnPService( IUPnPService && );
	void IUPnPService( IUPnPService const & );
	void IUPnPService();
	IUPnPService & operator=( IUPnPService && );
	IUPnPService & operator=( IUPnPService const & );
	/*0008*/
};

struct IUPnPServiceAsync : IUnknown {
	/*0018*/ virtual HRESULT BeginInvokeAction( WCHAR * , tagVARIANT , IUPnPAsyncResult * , ULONGLONG * ) = 0;
	/*0020*/ virtual HRESULT EndInvokeAction( ULONGLONG , tagVARIANT * , tagVARIANT * ) = 0;
	/*0028*/ virtual HRESULT BeginQueryStateVariable( WCHAR * , IUPnPAsyncResult * , ULONGLONG * ) = 0;
	/*0030*/ virtual HRESULT EndQueryStateVariable( ULONGLONG , tagVARIANT * ) = 0;
	/*0038*/ virtual HRESULT BeginSubscribeToEvents( IUnknown * , IUPnPAsyncResult * , ULONGLONG * ) = 0;
	/*0040*/ virtual HRESULT EndSubscribeToEvents( ULONGLONG ) = 0;
	/*0048*/ virtual HRESULT BeginSCPDDownload( IUPnPAsyncResult * , ULONGLONG * ) = 0;
	/*0050*/ virtual HRESULT EndSCPDDownload( ULONGLONG , WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT CancelAsyncOperation( ULONGLONG ) = 0;
	void IUPnPServiceAsync( IUPnPServiceAsync && );
	void IUPnPServiceAsync( IUPnPServiceAsync const & );
	void IUPnPServiceAsync();
	IUPnPServiceAsync & operator=( IUPnPServiceAsync && );
	IUPnPServiceAsync & operator=( IUPnPServiceAsync const & );
	/*0008*/
};

struct IUPnPServiceCallback : IUnknown {
	/*0018*/ virtual HRESULT StateVariableChanged( IUPnPService * , WCHAR const * , tagVARIANT ) = 0;
	/*0020*/ virtual HRESULT ServiceInstanceDied( IUPnPService * ) = 0;
	void IUPnPServiceCallback( IUPnPServiceCallback && );
	void IUPnPServiceCallback( IUPnPServiceCallback const & );
	void IUPnPServiceCallback();
	IUPnPServiceCallback & operator=( IUPnPServiceCallback && );
	IUPnPServiceCallback & operator=( IUPnPServiceCallback const & );
	/*0008*/
};

struct IUPnPServiceDocumentAccess : IUnknown {
	/*0018*/ virtual HRESULT GetDocumentURL( WCHAR * * ) = 0;
	/*0020*/ virtual HRESULT GetDocument( WCHAR * * ) = 0;
	void IUPnPServiceDocumentAccess( IUPnPServiceDocumentAccess && );
	void IUPnPServiceDocumentAccess( IUPnPServiceDocumentAccess const & );
	void IUPnPServiceDocumentAccess();
	IUPnPServiceDocumentAccess & operator=( IUPnPServiceDocumentAccess && );
	IUPnPServiceDocumentAccess & operator=( IUPnPServiceDocumentAccess const & );
	/*0008*/
};

struct IUPnPServiceEnumProperty : IUnknown {
	/*0018*/ virtual HRESULT SetServiceEnumProperty( ULONG ) = 0;
	void IUPnPServiceEnumProperty( IUPnPServiceEnumProperty && );
	void IUPnPServiceEnumProperty( IUPnPServiceEnumProperty const & );
	void IUPnPServiceEnumProperty();
	IUPnPServiceEnumProperty & operator=( IUPnPServiceEnumProperty && );
	IUPnPServiceEnumProperty & operator=( IUPnPServiceEnumProperty const & );
	/*0008*/
};

struct IUPnPServices : IDispatch {
	/*0038*/ virtual HRESULT get_Count( LONG * ) = 0;
	/*0040*/ virtual HRESULT get__NewEnum( IUnknown * * ) = 0;
	/*0048*/ virtual HRESULT get_Item( WCHAR * , IUPnPService * * ) = 0;
	void IUPnPServices( IUPnPServices && );
	void IUPnPServices( IUPnPServices const & );
	void IUPnPServices();
	IUPnPServices & operator=( IUPnPServices && );
	IUPnPServices & operator=( IUPnPServices const & );
	/*0008*/
};

struct IUnknown {
	/*0000*/ virtual HRESULT QueryInterface( _GUID const & , void * * ) = 0;
	/*0008*/ virtual ULONG AddRef() = 0;
	/*0010*/ virtual ULONG Release() = 0;
	void IUnknown( IUnknown && );
	void IUnknown( IUnknown const & );
	void IUnknown();
	IUnknown & operator=( IUnknown && );
	IUnknown & operator=( IUnknown const & );
	/*0008*/
};

struct IUnknownVtbl {
	/*0000*/ HRESULT (* QueryInterface)( IUnknown * , _GUID const * , void * * );
	/*0008*/ ULONG (* AddRef)( IUnknown * );
	/*0010*/ ULONG (* Release)( IUnknown * );
	/*0018*/
};

struct IUpdateIDList : IUnknown {
	/*0018*/ virtual HRESULT Update( IBindCtx * , _ITEMIDLIST const __unaligned * , _ITEMIDLIST __unaligned * * ) = 0;
	void IUpdateIDList( IUpdateIDList && );
	void IUpdateIDList( IUpdateIDList const & );
	void IUpdateIDList();
	IUpdateIDList & operator=( IUpdateIDList && );
	IUpdateIDList & operator=( IUpdateIDList const & );
	/*0008*/
};

struct IUri : IUnknown {
	/*0018*/ virtual HRESULT GetPropertyBSTR( __MIDL_IUri_0001 , WCHAR * * , ULONG ) = 0;
	/*0020*/ virtual HRESULT GetPropertyLength( __MIDL_IUri_0001 , ULONG * , ULONG ) = 0;
	/*0028*/ virtual HRESULT GetPropertyDWORD( __MIDL_IUri_0001 , ULONG * , ULONG ) = 0;
	/*0030*/ virtual HRESULT HasProperty( __MIDL_IUri_0001 , INT * ) = 0;
	/*0038*/ virtual HRESULT GetAbsoluteUri( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT GetAuthority( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT GetDisplayUri( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT GetDomain( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT GetExtension( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT GetFragment( WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT GetHost( WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT GetPassword( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT GetPath( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT GetPathAndQuery( WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT GetQuery( WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT GetRawUri( WCHAR * * ) = 0;
	/*0098*/ virtual HRESULT GetSchemeName( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT GetUserInfo( WCHAR * * ) = 0;
	/*00a8*/ virtual HRESULT GetUserNameW( WCHAR * * ) = 0;
	/*00b0*/ virtual HRESULT GetHostType( ULONG * ) = 0;
	/*00b8*/ virtual HRESULT GetPort( ULONG * ) = 0;
	/*00c0*/ virtual HRESULT GetScheme( ULONG * ) = 0;
	/*00c8*/ virtual HRESULT GetZone( ULONG * ) = 0;
	/*00d0*/ virtual HRESULT GetProperties( ULONG * ) = 0;
	/*00d8*/ virtual HRESULT IsEqual( IUri * , INT * ) = 0;
	void IUri( IUri && );
	void IUri( IUri const & );
	void IUri();
	IUri & operator=( IUri && );
	IUri & operator=( IUri const & );
	/*0008*/
};

struct IUriBuilder : IUnknown {
	/*0018*/ virtual HRESULT CreateUriSimple( ULONG , ULONGLONG , IUri * * ) = 0;
	/*0020*/ virtual HRESULT CreateUri( ULONG , ULONG , ULONGLONG , IUri * * ) = 0;
	/*0028*/ virtual HRESULT CreateUriWithFlags( ULONG , ULONG , ULONG , ULONGLONG , IUri * * ) = 0;
	/*0030*/ virtual HRESULT GetIUri( IUri * * ) = 0;
	/*0038*/ virtual HRESULT SetIUri( IUri * ) = 0;
	/*0040*/ virtual HRESULT GetFragment( ULONG * , WCHAR const * * ) = 0;
	/*0048*/ virtual HRESULT GetHost( ULONG * , WCHAR const * * ) = 0;
	/*0050*/ virtual HRESULT GetPassword( ULONG * , WCHAR const * * ) = 0;
	/*0058*/ virtual HRESULT GetPath( ULONG * , WCHAR const * * ) = 0;
	/*0060*/ virtual HRESULT GetPort( INT * , ULONG * ) = 0;
	/*0068*/ virtual HRESULT GetQuery( ULONG * , WCHAR const * * ) = 0;
	/*0070*/ virtual HRESULT GetSchemeName( ULONG * , WCHAR const * * ) = 0;
	/*0078*/ virtual HRESULT GetUserNameW( ULONG * , WCHAR const * * ) = 0;
	/*0080*/ virtual HRESULT SetFragment( WCHAR const * ) = 0;
	/*0088*/ virtual HRESULT SetHost( WCHAR const * ) = 0;
	/*0090*/ virtual HRESULT SetPassword( WCHAR const * ) = 0;
	/*0098*/ virtual HRESULT SetPath( WCHAR const * ) = 0;
	/*00a0*/ virtual HRESULT SetPort( INT , ULONG ) = 0;
	/*00a8*/ virtual HRESULT SetQuery( WCHAR const * ) = 0;
	/*00b0*/ virtual HRESULT SetSchemeName( WCHAR const * ) = 0;
	/*00b8*/ virtual HRESULT SetUserName( WCHAR const * ) = 0;
	/*00c0*/ virtual HRESULT RemoveProperties( ULONG ) = 0;
	/*00c8*/ virtual HRESULT HasBeenModified( INT * ) = 0;
	void IUriBuilder( IUriBuilder && );
	void IUriBuilder( IUriBuilder const & );
	void IUriBuilder();
	IUriBuilder & operator=( IUriBuilder && );
	IUriBuilder & operator=( IUriBuilder const & );
	/*0008*/
};

struct IUriBuilderFactory : IUnknown {
	/*0018*/ virtual HRESULT CreateIUriBuilder( ULONG , ULONGLONG , IUriBuilder * * ) = 0;
	/*0020*/ virtual HRESULT CreateInitializedIUriBuilder( ULONG , ULONGLONG , IUriBuilder * * ) = 0;
	void IUriBuilderFactory( IUriBuilderFactory && );
	void IUriBuilderFactory( IUriBuilderFactory const & );
	void IUriBuilderFactory();
	IUriBuilderFactory & operator=( IUriBuilderFactory && );
	IUriBuilderFactory & operator=( IUriBuilderFactory const & );
	/*0008*/
};

struct IUriContainer : IUnknown {
	/*0018*/ virtual HRESULT GetIUri( IUri * * ) = 0;
	void IUriContainer( IUriContainer && );
	void IUriContainer( IUriContainer const & );
	void IUriContainer();
	IUriContainer & operator=( IUriContainer && );
	IUriContainer & operator=( IUriContainer const & );
	/*0008*/
};

struct IUrlMon : IUnknown {
	/*0018*/ virtual HRESULT AsyncGetClassBits( _GUID const & , WCHAR const * , WCHAR const * , ULONG , ULONG , WCHAR const * , IBindCtx * , ULONG , _GUID const & , ULONG ) = 0;
	void IUrlMon( IUrlMon && );
	void IUrlMon( IUrlMon const & );
	void IUrlMon();
	IUrlMon & operator=( IUrlMon && );
	IUrlMon & operator=( IUrlMon const & );
	/*0008*/
};

struct IUserNotification : IUnknown {
	/*0018*/ virtual HRESULT SetBalloonInfo( WCHAR const * , WCHAR const * , ULONG ) = 0;
	/*0020*/ virtual HRESULT SetBalloonRetry( ULONG , ULONG , UINT ) = 0;
	/*0028*/ virtual HRESULT SetIconInfo( HICON__ * , WCHAR const * ) = 0;
	/*0030*/ virtual HRESULT Show( IQueryContinue * , ULONG ) = 0;
	/*0038*/ virtual HRESULT PlaySound( WCHAR const * ) = 0;
	void IUserNotification( IUserNotification && );
	void IUserNotification( IUserNotification const & );
	void IUserNotification();
	IUserNotification & operator=( IUserNotification && );
	IUserNotification & operator=( IUserNotification const & );
	/*0008*/
};

struct IVBMXNamespaceManager : IDispatch {
	/*0038*/ virtual HRESULT put_allowOverride( SHORT ) = 0;
	/*0040*/ virtual HRESULT get_allowOverride( SHORT * ) = 0;
	/*0048*/ virtual HRESULT reset() = 0;
	/*0050*/ virtual HRESULT pushContext() = 0;
	/*0058*/ virtual HRESULT pushNodeContext( IXMLDOMNode * , SHORT ) = 0;
	/*0060*/ virtual HRESULT popContext() = 0;
	/*0068*/ virtual HRESULT declarePrefix( WCHAR * , WCHAR * ) = 0;
	/*0070*/ virtual HRESULT getDeclaredPrefixes( IMXNamespacePrefixes * * ) = 0;
	/*0078*/ virtual HRESULT getPrefixes( WCHAR * , IMXNamespacePrefixes * * ) = 0;
	/*0080*/ virtual HRESULT getURI( WCHAR * , tagVARIANT * ) = 0;
	/*0088*/ virtual HRESULT getURIFromNode( WCHAR * , IXMLDOMNode * , tagVARIANT * ) = 0;
	void IVBMXNamespaceManager( IVBMXNamespaceManager && );
	void IVBMXNamespaceManager( IVBMXNamespaceManager const & );
	void IVBMXNamespaceManager();
	IVBMXNamespaceManager & operator=( IVBMXNamespaceManager && );
	IVBMXNamespaceManager & operator=( IVBMXNamespaceManager const & );
	/*0008*/
};

struct IVBSAXAttributes : IDispatch {
	/*0038*/ virtual HRESULT get_length( INT * ) = 0;
	/*0040*/ virtual HRESULT getURI( INT , WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT getLocalName( INT , WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT getQName( INT , WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT getIndexFromName( WCHAR * , WCHAR * , INT * ) = 0;
	/*0060*/ virtual HRESULT getIndexFromQName( WCHAR * , INT * ) = 0;
	/*0068*/ virtual HRESULT getType( INT , WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT getTypeFromName( WCHAR * , WCHAR * , WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT getTypeFromQName( WCHAR * , WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT getValue( INT , WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT getValueFromName( WCHAR * , WCHAR * , WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT getValueFromQName( WCHAR * , WCHAR * * ) = 0;
	void IVBSAXAttributes( IVBSAXAttributes && );
	void IVBSAXAttributes( IVBSAXAttributes const & );
	void IVBSAXAttributes();
	IVBSAXAttributes & operator=( IVBSAXAttributes && );
	IVBSAXAttributes & operator=( IVBSAXAttributes const & );
	/*0008*/
};

struct IVBSAXContentHandler : IDispatch {
	/*0038*/ virtual HRESULT putref_documentLocator( IVBSAXLocator * ) = 0;
	/*0040*/ virtual HRESULT startDocument() = 0;
	/*0048*/ virtual HRESULT endDocument() = 0;
	/*0050*/ virtual HRESULT startPrefixMapping( WCHAR * * , WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT endPrefixMapping( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT startElement( WCHAR * * , WCHAR * * , WCHAR * * , IVBSAXAttributes * ) = 0;
	/*0068*/ virtual HRESULT endElement( WCHAR * * , WCHAR * * , WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT characters( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT ignorableWhitespace( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT processingInstruction( WCHAR * * , WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT skippedEntity( WCHAR * * ) = 0;
	void IVBSAXContentHandler( IVBSAXContentHandler && );
	void IVBSAXContentHandler( IVBSAXContentHandler const & );
	void IVBSAXContentHandler();
	IVBSAXContentHandler & operator=( IVBSAXContentHandler && );
	IVBSAXContentHandler & operator=( IVBSAXContentHandler const & );
	/*0008*/
};

struct IVBSAXDTDHandler : IDispatch {
	/*0038*/ virtual HRESULT notationDecl( WCHAR * * , WCHAR * * , WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT unparsedEntityDecl( WCHAR * * , WCHAR * * , WCHAR * * , WCHAR * * ) = 0;
	void IVBSAXDTDHandler( IVBSAXDTDHandler && );
	void IVBSAXDTDHandler( IVBSAXDTDHandler const & );
	void IVBSAXDTDHandler();
	IVBSAXDTDHandler & operator=( IVBSAXDTDHandler && );
	IVBSAXDTDHandler & operator=( IVBSAXDTDHandler const & );
	/*0008*/
};

struct IVBSAXDeclHandler : IDispatch {
	/*0038*/ virtual HRESULT elementDecl( WCHAR * * , WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT attributeDecl( WCHAR * * , WCHAR * * , WCHAR * * , WCHAR * * , WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT internalEntityDecl( WCHAR * * , WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT externalEntityDecl( WCHAR * * , WCHAR * * , WCHAR * * ) = 0;
	void IVBSAXDeclHandler( IVBSAXDeclHandler && );
	void IVBSAXDeclHandler( IVBSAXDeclHandler const & );
	void IVBSAXDeclHandler();
	IVBSAXDeclHandler & operator=( IVBSAXDeclHandler && );
	IVBSAXDeclHandler & operator=( IVBSAXDeclHandler const & );
	/*0008*/
};

struct IVBSAXEntityResolver : IDispatch {
	/*0038*/ virtual HRESULT resolveEntity( WCHAR * * , WCHAR * * , tagVARIANT * ) = 0;
	void IVBSAXEntityResolver( IVBSAXEntityResolver && );
	void IVBSAXEntityResolver( IVBSAXEntityResolver const & );
	void IVBSAXEntityResolver();
	IVBSAXEntityResolver & operator=( IVBSAXEntityResolver && );
	IVBSAXEntityResolver & operator=( IVBSAXEntityResolver const & );
	/*0008*/
};

struct IVBSAXErrorHandler : IDispatch {
	/*0038*/ virtual HRESULT error( IVBSAXLocator * , WCHAR * * , LONG ) = 0;
	/*0040*/ virtual HRESULT fatalError( IVBSAXLocator * , WCHAR * * , LONG ) = 0;
	/*0048*/ virtual HRESULT ignorableWarning( IVBSAXLocator * , WCHAR * * , LONG ) = 0;
	void IVBSAXErrorHandler( IVBSAXErrorHandler && );
	void IVBSAXErrorHandler( IVBSAXErrorHandler const & );
	void IVBSAXErrorHandler();
	IVBSAXErrorHandler & operator=( IVBSAXErrorHandler && );
	IVBSAXErrorHandler & operator=( IVBSAXErrorHandler const & );
	/*0008*/
};

struct IVBSAXLexicalHandler : IDispatch {
	/*0038*/ virtual HRESULT startDTD( WCHAR * * , WCHAR * * , WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT endDTD() = 0;
	/*0048*/ virtual HRESULT startEntity( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT endEntity( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT startCDATA() = 0;
	/*0060*/ virtual HRESULT endCDATA() = 0;
	/*0068*/ virtual HRESULT comment( WCHAR * * ) = 0;
	void IVBSAXLexicalHandler( IVBSAXLexicalHandler && );
	void IVBSAXLexicalHandler( IVBSAXLexicalHandler const & );
	void IVBSAXLexicalHandler();
	IVBSAXLexicalHandler & operator=( IVBSAXLexicalHandler && );
	IVBSAXLexicalHandler & operator=( IVBSAXLexicalHandler const & );
	/*0008*/
};

struct IVBSAXLocator : IDispatch {
	/*0038*/ virtual HRESULT get_columnNumber( INT * ) = 0;
	/*0040*/ virtual HRESULT get_lineNumber( INT * ) = 0;
	/*0048*/ virtual HRESULT get_publicId( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT get_systemId( WCHAR * * ) = 0;
	void IVBSAXLocator( IVBSAXLocator && );
	void IVBSAXLocator( IVBSAXLocator const & );
	void IVBSAXLocator();
	IVBSAXLocator & operator=( IVBSAXLocator && );
	IVBSAXLocator & operator=( IVBSAXLocator const & );
	/*0008*/
};

struct IVBSAXXMLFilter : IDispatch {
	/*0038*/ virtual HRESULT get_parent( IVBSAXXMLReader * * ) = 0;
	/*0040*/ virtual HRESULT putref_parent( IVBSAXXMLReader * ) = 0;
	void IVBSAXXMLFilter( IVBSAXXMLFilter && );
	void IVBSAXXMLFilter( IVBSAXXMLFilter const & );
	void IVBSAXXMLFilter();
	IVBSAXXMLFilter & operator=( IVBSAXXMLFilter && );
	IVBSAXXMLFilter & operator=( IVBSAXXMLFilter const & );
	/*0008*/
};

struct IVBSAXXMLReader : IDispatch {
	/*0038*/ virtual HRESULT getFeature( WCHAR * , SHORT * ) = 0;
	/*0040*/ virtual HRESULT putFeature( WCHAR * , SHORT ) = 0;
	/*0048*/ virtual HRESULT getProperty( WCHAR * , tagVARIANT * ) = 0;
	/*0050*/ virtual HRESULT putProperty( WCHAR * , tagVARIANT ) = 0;
	/*0058*/ virtual HRESULT get_entityResolver( IVBSAXEntityResolver * * ) = 0;
	/*0060*/ virtual HRESULT putref_entityResolver( IVBSAXEntityResolver * ) = 0;
	/*0068*/ virtual HRESULT get_contentHandler( IVBSAXContentHandler * * ) = 0;
	/*0070*/ virtual HRESULT putref_contentHandler( IVBSAXContentHandler * ) = 0;
	/*0078*/ virtual HRESULT get_dtdHandler( IVBSAXDTDHandler * * ) = 0;
	/*0080*/ virtual HRESULT putref_dtdHandler( IVBSAXDTDHandler * ) = 0;
	/*0088*/ virtual HRESULT get_errorHandler( IVBSAXErrorHandler * * ) = 0;
	/*0090*/ virtual HRESULT putref_errorHandler( IVBSAXErrorHandler * ) = 0;
	/*0098*/ virtual HRESULT get_baseURL( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT put_baseURL( WCHAR * ) = 0;
	/*00a8*/ virtual HRESULT get_secureBaseURL( WCHAR * * ) = 0;
	/*00b0*/ virtual HRESULT put_secureBaseURL( WCHAR * ) = 0;
	/*00b8*/ virtual HRESULT parse( tagVARIANT ) = 0;
	/*00c0*/ virtual HRESULT parseURL( WCHAR * ) = 0;
	void IVBSAXXMLReader( IVBSAXXMLReader && );
	void IVBSAXXMLReader( IVBSAXXMLReader const & );
	void IVBSAXXMLReader();
	IVBSAXXMLReader & operator=( IVBSAXXMLReader && );
	IVBSAXXMLReader & operator=( IVBSAXXMLReader const & );
	/*0008*/
};

struct IViewObject : IUnknown {
	/*0018*/ virtual HRESULT Draw( ULONG , LONG , void * , tagDVTARGETDEVICE * , HDC__ * , HDC__ * , _RECTL const * , _RECTL const * , INT (* )( ULONGLONG ), ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT GetColorSet( ULONG , LONG , void * , tagDVTARGETDEVICE * , HDC__ * , tagLOGPALETTE * * ) = 0;
	/*0028*/ virtual HRESULT Freeze( ULONG , LONG , void * , ULONG * ) = 0;
	/*0030*/ virtual HRESULT Unfreeze( ULONG ) = 0;
	/*0038*/ virtual HRESULT SetAdvise( ULONG , ULONG , IAdviseSink * ) = 0;
	/*0040*/ virtual HRESULT GetAdvise( ULONG * , ULONG * , IAdviseSink * * ) = 0;
	void IViewObject( IViewObject && );
	void IViewObject( IViewObject const & );
	void IViewObject();
	IViewObject & operator=( IViewObject && );
	IViewObject & operator=( IViewObject const & );
	/*0008*/
};

struct IViewObject2 : IViewObject {
	/*0048*/ virtual HRESULT GetExtent( ULONG , LONG , tagDVTARGETDEVICE * , tagSIZE * ) = 0;
	void IViewObject2( IViewObject2 && );
	void IViewObject2( IViewObject2 const & );
	void IViewObject2();
	IViewObject2 & operator=( IViewObject2 && );
	IViewObject2 & operator=( IViewObject2 const & );
	/*0008*/
};

struct IViewObjectEx : IViewObject2 {
	/*0050*/ virtual HRESULT GetRect( ULONG , _RECTL * ) = 0;
	/*0058*/ virtual HRESULT GetViewStatus( ULONG * ) = 0;
	/*0060*/ virtual HRESULT QueryHitPoint( ULONG , tagRECT const * , tagPOINT , LONG , ULONG * ) = 0;
	/*0068*/ virtual HRESULT QueryHitRect( ULONG , tagRECT const * , tagRECT const * , LONG , ULONG * ) = 0;
	/*0070*/ virtual HRESULT GetNaturalExtent( ULONG , LONG , tagDVTARGETDEVICE * , HDC__ * , tagExtentInfo * , tagSIZE * ) = 0;
	void IViewObjectEx( IViewObjectEx && );
	void IViewObjectEx( IViewObjectEx const & );
	void IViewObjectEx();
	IViewObjectEx & operator=( IViewObjectEx && );
	IViewObjectEx & operator=( IViewObjectEx const & );
	/*0008*/
};

struct IViewStateIdentityItem : IRelatedItem {
	void IViewStateIdentityItem( IViewStateIdentityItem && );
	void IViewStateIdentityItem( IViewStateIdentityItem const & );
	void IViewStateIdentityItem();
	IViewStateIdentityItem & operator=( IViewStateIdentityItem && );
	IViewStateIdentityItem & operator=( IViewStateIdentityItem const & );
	/*0008*/
};

struct IVirtualDesktopManager : IUnknown {
	/*0018*/ virtual HRESULT IsWindowOnCurrentVirtualDesktop( HWND__ * , INT * ) = 0;
	/*0020*/ virtual HRESULT GetWindowDesktopId( HWND__ * , _GUID * ) = 0;
	/*0028*/ virtual HRESULT MoveWindowToDesktop( HWND__ * , _GUID const & ) = 0;
	void IVirtualDesktopManager( IVirtualDesktopManager && );
	void IVirtualDesktopManager( IVirtualDesktopManager const & );
	void IVirtualDesktopManager();
	IVirtualDesktopManager & operator=( IVirtualDesktopManager && );
	IVirtualDesktopManager & operator=( IVirtualDesktopManager const & );
	/*0008*/
};

struct IWaitMultiple : IUnknown {
	/*0018*/ virtual HRESULT WaitMultiple( ULONG , ISynchronize * * ) = 0;
	/*0020*/ virtual HRESULT AddSynchronize( ISynchronize * ) = 0;
	void IWaitMultiple( IWaitMultiple && );
	void IWaitMultiple( IWaitMultiple const & );
	void IWaitMultiple();
	IWaitMultiple & operator=( IWaitMultiple && );
	IWaitMultiple & operator=( IWaitMultiple const & );
	/*0008*/
};

struct IWeakReference : IUnknown {
	/*0018*/ virtual HRESULT Resolve( _GUID const & , IInspectable * * ) = 0;
	void IWeakReference( IWeakReference && );
	void IWeakReference( IWeakReference const & );
	void IWeakReference();
	IWeakReference & operator=( IWeakReference && );
	IWeakReference & operator=( IWeakReference const & );
	/*0008*/
};

struct IWeakReferenceSource : IUnknown {
	/*0018*/ virtual HRESULT GetWeakReference( IWeakReference * * ) = 0;
	void IWeakReferenceSource( IWeakReferenceSource && );
	void IWeakReferenceSource( IWeakReferenceSource const & );
	void IWeakReferenceSource();
	IWeakReferenceSource & operator=( IWeakReferenceSource && );
	IWeakReferenceSource & operator=( IWeakReferenceSource const & );
	/*0008*/
};

struct IWinInetCacheHints : IUnknown {
	/*0018*/ virtual HRESULT SetCacheExtension( WCHAR const * , void * , ULONG * , ULONG * , ULONG * ) = 0;
	void IWinInetCacheHints( IWinInetCacheHints && );
	void IWinInetCacheHints( IWinInetCacheHints const & );
	void IWinInetCacheHints();
	IWinInetCacheHints & operator=( IWinInetCacheHints && );
	IWinInetCacheHints & operator=( IWinInetCacheHints const & );
	/*0008*/
};

struct IWinInetCacheHints2 : IWinInetCacheHints {
	/*0020*/ virtual HRESULT SetCacheExtension2( WCHAR const * , WCHAR * , ULONG * , ULONG * , ULONG * ) = 0;
	void IWinInetCacheHints2( IWinInetCacheHints2 && );
	void IWinInetCacheHints2( IWinInetCacheHints2 const & );
	void IWinInetCacheHints2();
	IWinInetCacheHints2 & operator=( IWinInetCacheHints2 && );
	IWinInetCacheHints2 & operator=( IWinInetCacheHints2 const & );
	/*0008*/
};

struct IWinInetFileStream : IUnknown {
	/*0018*/ virtual HRESULT SetHandleForUnlock( ULONGLONG , ULONGLONG ) = 0;
	/*0020*/ virtual HRESULT SetDeleteFile( ULONGLONG ) = 0;
	void IWinInetFileStream( IWinInetFileStream && );
	void IWinInetFileStream( IWinInetFileStream const & );
	void IWinInetFileStream();
	IWinInetFileStream & operator=( IWinInetFileStream && );
	IWinInetFileStream & operator=( IWinInetFileStream const & );
	/*0008*/
};

struct IWinInetHttpInfo : IWinInetInfo {
	/*0020*/ virtual HRESULT QueryInfo( ULONG , void * , ULONG * , ULONG * , ULONG * ) = 0;
	void IWinInetHttpInfo( IWinInetHttpInfo && );
	void IWinInetHttpInfo( IWinInetHttpInfo const & );
	void IWinInetHttpInfo();
	IWinInetHttpInfo & operator=( IWinInetHttpInfo && );
	IWinInetHttpInfo & operator=( IWinInetHttpInfo const & );
	/*0008*/
};

struct IWinInetHttpTimeouts : IUnknown {
	/*0018*/ virtual HRESULT GetRequestTimeouts( ULONG * , ULONG * , ULONG * ) = 0;
	void IWinInetHttpTimeouts( IWinInetHttpTimeouts && );
	void IWinInetHttpTimeouts( IWinInetHttpTimeouts const & );
	void IWinInetHttpTimeouts();
	IWinInetHttpTimeouts & operator=( IWinInetHttpTimeouts && );
	IWinInetHttpTimeouts & operator=( IWinInetHttpTimeouts const & );
	/*0008*/
};

struct IWinInetInfo : IUnknown {
	/*0018*/ virtual HRESULT QueryOption( ULONG , void * , ULONG * ) = 0;
	void IWinInetInfo( IWinInetInfo && );
	void IWinInetInfo( IWinInetInfo const & );
	void IWinInetInfo();
	IWinInetInfo & operator=( IWinInetInfo && );
	IWinInetInfo & operator=( IWinInetInfo const & );
	/*0008*/
};

struct IWindowForBindingUI : IUnknown {
	/*0018*/ virtual HRESULT GetWindow( _GUID const & , HWND__ * * ) = 0;
	void IWindowForBindingUI( IWindowForBindingUI && );
	void IWindowForBindingUI( IWindowForBindingUI const & );
	void IWindowForBindingUI();
	IWindowForBindingUI & operator=( IWindowForBindingUI && );
	IWindowForBindingUI & operator=( IWindowForBindingUI const & );
	/*0008*/
};

struct IWrappedProtocol : IUnknown {
	/*0018*/ virtual HRESULT GetWrapperCode( LONG * , ULONGLONG ) = 0;
	void IWrappedProtocol( IWrappedProtocol && );
	void IWrappedProtocol( IWrappedProtocol const & );
	void IWrappedProtocol();
	IWrappedProtocol & operator=( IWrappedProtocol && );
	IWrappedProtocol & operator=( IWrappedProtocol const & );
	/*0008*/
};

struct IXMLAttribute : IDispatch {
	/*0038*/ virtual HRESULT get_name( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT get_value( WCHAR * * ) = 0;
	void IXMLAttribute( IXMLAttribute && );
	void IXMLAttribute( IXMLAttribute const & );
	void IXMLAttribute();
	IXMLAttribute & operator=( IXMLAttribute && );
	IXMLAttribute & operator=( IXMLAttribute const & );
	/*0008*/
};

struct IXMLDOMAttribute : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_name( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT get_value( tagVARIANT * ) = 0;
	/*0168*/ virtual HRESULT put_value( tagVARIANT ) = 0;
	void IXMLDOMAttribute( IXMLDOMAttribute && );
	void IXMLDOMAttribute( IXMLDOMAttribute const & );
	void IXMLDOMAttribute();
	IXMLDOMAttribute & operator=( IXMLDOMAttribute && );
	IXMLDOMAttribute & operator=( IXMLDOMAttribute const & );
	/*0008*/
};

struct IXMLDOMCDATASection : IXMLDOMText {
	void IXMLDOMCDATASection( IXMLDOMCDATASection && );
	void IXMLDOMCDATASection( IXMLDOMCDATASection const & );
	void IXMLDOMCDATASection();
	IXMLDOMCDATASection & operator=( IXMLDOMCDATASection && );
	IXMLDOMCDATASection & operator=( IXMLDOMCDATASection const & );
	/*0008*/
};

struct IXMLDOMCharacterData : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_data( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT put_data( WCHAR * ) = 0;
	/*0168*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0170*/ virtual HRESULT substringData( LONG , LONG , WCHAR * * ) = 0;
	/*0178*/ virtual HRESULT appendData( WCHAR * ) = 0;
	/*0180*/ virtual HRESULT insertData( LONG , WCHAR * ) = 0;
	/*0188*/ virtual HRESULT deleteData( LONG , LONG ) = 0;
	/*0190*/ virtual HRESULT replaceData( LONG , LONG , WCHAR * ) = 0;
	void IXMLDOMCharacterData( IXMLDOMCharacterData && );
	void IXMLDOMCharacterData( IXMLDOMCharacterData const & );
	void IXMLDOMCharacterData();
	IXMLDOMCharacterData & operator=( IXMLDOMCharacterData && );
	IXMLDOMCharacterData & operator=( IXMLDOMCharacterData const & );
	/*0008*/
};

struct IXMLDOMComment : IXMLDOMCharacterData {
	void IXMLDOMComment( IXMLDOMComment && );
	void IXMLDOMComment( IXMLDOMComment const & );
	void IXMLDOMComment();
	IXMLDOMComment & operator=( IXMLDOMComment && );
	IXMLDOMComment & operator=( IXMLDOMComment const & );
	/*0008*/
};

struct IXMLDOMDocument : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_doctype( IXMLDOMDocumentType * * ) = 0;
	/*0160*/ virtual HRESULT get_implementation( IXMLDOMImplementation * * ) = 0;
	/*0168*/ virtual HRESULT get_documentElement( IXMLDOMElement * * ) = 0;
	/*0170*/ virtual HRESULT putref_documentElement( IXMLDOMElement * ) = 0;
	/*0178*/ virtual HRESULT createElement( WCHAR * , IXMLDOMElement * * ) = 0;
	/*0180*/ virtual HRESULT createDocumentFragment( IXMLDOMDocumentFragment * * ) = 0;
	/*0188*/ virtual HRESULT createTextNode( WCHAR * , IXMLDOMText * * ) = 0;
	/*0190*/ virtual HRESULT createComment( WCHAR * , IXMLDOMComment * * ) = 0;
	/*0198*/ virtual HRESULT createCDATASection( WCHAR * , IXMLDOMCDATASection * * ) = 0;
	/*01a0*/ virtual HRESULT createProcessingInstruction( WCHAR * , WCHAR * , IXMLDOMProcessingInstruction * * ) = 0;
	/*01a8*/ virtual HRESULT createAttribute( WCHAR * , IXMLDOMAttribute * * ) = 0;
	/*01b0*/ virtual HRESULT createEntityReference( WCHAR * , IXMLDOMEntityReference * * ) = 0;
	/*01b8*/ virtual HRESULT getElementsByTagName( WCHAR * , IXMLDOMNodeList * * ) = 0;
	/*01c0*/ virtual HRESULT createNode( tagVARIANT , WCHAR * , WCHAR * , IXMLDOMNode * * ) = 0;
	/*01c8*/ virtual HRESULT nodeFromID( WCHAR * , IXMLDOMNode * * ) = 0;
	/*01d0*/ virtual HRESULT load( tagVARIANT , SHORT * ) = 0;
	/*01d8*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*01e0*/ virtual HRESULT get_parseError( IXMLDOMParseError * * ) = 0;
	/*01e8*/ virtual HRESULT get_url( WCHAR * * ) = 0;
	/*01f0*/ virtual HRESULT get_async( SHORT * ) = 0;
	/*01f8*/ virtual HRESULT put_async( SHORT ) = 0;
	/*0200*/ virtual HRESULT abort() = 0;
	/*0208*/ virtual HRESULT loadXML( WCHAR * , SHORT * ) = 0;
	/*0210*/ virtual HRESULT save( tagVARIANT ) = 0;
	/*0218*/ virtual HRESULT get_validateOnParse( SHORT * ) = 0;
	/*0220*/ virtual HRESULT put_validateOnParse( SHORT ) = 0;
	/*0228*/ virtual HRESULT get_resolveExternals( SHORT * ) = 0;
	/*0230*/ virtual HRESULT put_resolveExternals( SHORT ) = 0;
	/*0238*/ virtual HRESULT get_preserveWhiteSpace( SHORT * ) = 0;
	/*0240*/ virtual HRESULT put_preserveWhiteSpace( SHORT ) = 0;
	/*0248*/ virtual HRESULT put_onreadystatechange( tagVARIANT ) = 0;
	/*0250*/ virtual HRESULT put_ondataavailable( tagVARIANT ) = 0;
	/*0258*/ virtual HRESULT put_ontransformnode( tagVARIANT ) = 0;
	void IXMLDOMDocument( IXMLDOMDocument && );
	void IXMLDOMDocument( IXMLDOMDocument const & );
	void IXMLDOMDocument();
	IXMLDOMDocument & operator=( IXMLDOMDocument && );
	IXMLDOMDocument & operator=( IXMLDOMDocument const & );
	/*0008*/
};

struct IXMLDOMDocument2 : IXMLDOMDocument {
	/*0260*/ virtual HRESULT get_namespaces( IXMLDOMSchemaCollection * * ) = 0;
	/*0268*/ virtual HRESULT get_schemas( tagVARIANT * ) = 0;
	/*0270*/ virtual HRESULT putref_schemas( tagVARIANT ) = 0;
	/*0278*/ virtual HRESULT validate( IXMLDOMParseError * * ) = 0;
	/*0280*/ virtual HRESULT setProperty( WCHAR * , tagVARIANT ) = 0;
	/*0288*/ virtual HRESULT getProperty( WCHAR * , tagVARIANT * ) = 0;
	void IXMLDOMDocument2( IXMLDOMDocument2 && );
	void IXMLDOMDocument2( IXMLDOMDocument2 const & );
	void IXMLDOMDocument2();
	IXMLDOMDocument2 & operator=( IXMLDOMDocument2 && );
	IXMLDOMDocument2 & operator=( IXMLDOMDocument2 const & );
	/*0008*/
};

struct IXMLDOMDocument3 : IXMLDOMDocument2 {
	/*0290*/ virtual HRESULT validateNode( IXMLDOMNode * , IXMLDOMParseError * * ) = 0;
	/*0298*/ virtual HRESULT importNode( IXMLDOMNode * , SHORT , IXMLDOMNode * * ) = 0;
	void IXMLDOMDocument3( IXMLDOMDocument3 && );
	void IXMLDOMDocument3( IXMLDOMDocument3 const & );
	void IXMLDOMDocument3();
	IXMLDOMDocument3 & operator=( IXMLDOMDocument3 && );
	IXMLDOMDocument3 & operator=( IXMLDOMDocument3 const & );
	/*0008*/
};

struct IXMLDOMDocumentFragment : IXMLDOMNode {
	void IXMLDOMDocumentFragment( IXMLDOMDocumentFragment && );
	void IXMLDOMDocumentFragment( IXMLDOMDocumentFragment const & );
	void IXMLDOMDocumentFragment();
	IXMLDOMDocumentFragment & operator=( IXMLDOMDocumentFragment && );
	IXMLDOMDocumentFragment & operator=( IXMLDOMDocumentFragment const & );
	/*0008*/
};

struct IXMLDOMDocumentType : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_name( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT get_entities( IXMLDOMNamedNodeMap * * ) = 0;
	/*0168*/ virtual HRESULT get_notations( IXMLDOMNamedNodeMap * * ) = 0;
	void IXMLDOMDocumentType( IXMLDOMDocumentType && );
	void IXMLDOMDocumentType( IXMLDOMDocumentType const & );
	void IXMLDOMDocumentType();
	IXMLDOMDocumentType & operator=( IXMLDOMDocumentType && );
	IXMLDOMDocumentType & operator=( IXMLDOMDocumentType const & );
	/*0008*/
};

struct IXMLDOMElement : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_tagName( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT getAttribute( WCHAR * , tagVARIANT * ) = 0;
	/*0168*/ virtual HRESULT setAttribute( WCHAR * , tagVARIANT ) = 0;
	/*0170*/ virtual HRESULT removeAttribute( WCHAR * ) = 0;
	/*0178*/ virtual HRESULT getAttributeNode( WCHAR * , IXMLDOMAttribute * * ) = 0;
	/*0180*/ virtual HRESULT setAttributeNode( IXMLDOMAttribute * , IXMLDOMAttribute * * ) = 0;
	/*0188*/ virtual HRESULT removeAttributeNode( IXMLDOMAttribute * , IXMLDOMAttribute * * ) = 0;
	/*0190*/ virtual HRESULT getElementsByTagName( WCHAR * , IXMLDOMNodeList * * ) = 0;
	/*0198*/ virtual HRESULT normalize() = 0;
	void IXMLDOMElement( IXMLDOMElement && );
	void IXMLDOMElement( IXMLDOMElement const & );
	void IXMLDOMElement();
	IXMLDOMElement & operator=( IXMLDOMElement && );
	IXMLDOMElement & operator=( IXMLDOMElement const & );
	/*0008*/
};

struct IXMLDOMEntity : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_publicId( tagVARIANT * ) = 0;
	/*0160*/ virtual HRESULT get_systemId( tagVARIANT * ) = 0;
	/*0168*/ virtual HRESULT get_notationName( WCHAR * * ) = 0;
	void IXMLDOMEntity( IXMLDOMEntity && );
	void IXMLDOMEntity( IXMLDOMEntity const & );
	void IXMLDOMEntity();
	IXMLDOMEntity & operator=( IXMLDOMEntity && );
	IXMLDOMEntity & operator=( IXMLDOMEntity const & );
	/*0008*/
};

struct IXMLDOMEntityReference : IXMLDOMNode {
	void IXMLDOMEntityReference( IXMLDOMEntityReference && );
	void IXMLDOMEntityReference( IXMLDOMEntityReference const & );
	void IXMLDOMEntityReference();
	IXMLDOMEntityReference & operator=( IXMLDOMEntityReference && );
	IXMLDOMEntityReference & operator=( IXMLDOMEntityReference const & );
	/*0008*/
};

struct IXMLDOMImplementation : IDispatch {
	/*0038*/ virtual HRESULT hasFeature( WCHAR * , WCHAR * , SHORT * ) = 0;
	void IXMLDOMImplementation( IXMLDOMImplementation && );
	void IXMLDOMImplementation( IXMLDOMImplementation const & );
	void IXMLDOMImplementation();
	IXMLDOMImplementation & operator=( IXMLDOMImplementation && );
	IXMLDOMImplementation & operator=( IXMLDOMImplementation const & );
	/*0008*/
};

struct IXMLDOMNamedNodeMap : IDispatch {
	/*0038*/ virtual HRESULT getNamedItem( WCHAR * , IXMLDOMNode * * ) = 0;
	/*0040*/ virtual HRESULT setNamedItem( IXMLDOMNode * , IXMLDOMNode * * ) = 0;
	/*0048*/ virtual HRESULT removeNamedItem( WCHAR * , IXMLDOMNode * * ) = 0;
	/*0050*/ virtual HRESULT get_item( LONG , IXMLDOMNode * * ) = 0;
	/*0058*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0060*/ virtual HRESULT getQualifiedItem( WCHAR * , WCHAR * , IXMLDOMNode * * ) = 0;
	/*0068*/ virtual HRESULT removeQualifiedItem( WCHAR * , WCHAR * , IXMLDOMNode * * ) = 0;
	/*0070*/ virtual HRESULT nextNode( IXMLDOMNode * * ) = 0;
	/*0078*/ virtual HRESULT reset() = 0;
	/*0080*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	void IXMLDOMNamedNodeMap( IXMLDOMNamedNodeMap && );
	void IXMLDOMNamedNodeMap( IXMLDOMNamedNodeMap const & );
	void IXMLDOMNamedNodeMap();
	IXMLDOMNamedNodeMap & operator=( IXMLDOMNamedNodeMap && );
	IXMLDOMNamedNodeMap & operator=( IXMLDOMNamedNodeMap const & );
	/*0008*/
};

struct IXMLDOMNode : IDispatch {
	/*0038*/ virtual HRESULT get_nodeName( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT get_nodeValue( tagVARIANT * ) = 0;
	/*0048*/ virtual HRESULT put_nodeValue( tagVARIANT ) = 0;
	/*0050*/ virtual HRESULT get_nodeType( tagDOMNodeType * ) = 0;
	/*0058*/ virtual HRESULT get_parentNode( IXMLDOMNode * * ) = 0;
	/*0060*/ virtual HRESULT get_childNodes( IXMLDOMNodeList * * ) = 0;
	/*0068*/ virtual HRESULT get_firstChild( IXMLDOMNode * * ) = 0;
	/*0070*/ virtual HRESULT get_lastChild( IXMLDOMNode * * ) = 0;
	/*0078*/ virtual HRESULT get_previousSibling( IXMLDOMNode * * ) = 0;
	/*0080*/ virtual HRESULT get_nextSibling( IXMLDOMNode * * ) = 0;
	/*0088*/ virtual HRESULT get_attributes( IXMLDOMNamedNodeMap * * ) = 0;
	/*0090*/ virtual HRESULT insertBefore( IXMLDOMNode * , tagVARIANT , IXMLDOMNode * * ) = 0;
	/*0098*/ virtual HRESULT replaceChild( IXMLDOMNode * , IXMLDOMNode * , IXMLDOMNode * * ) = 0;
	/*00a0*/ virtual HRESULT removeChild( IXMLDOMNode * , IXMLDOMNode * * ) = 0;
	/*00a8*/ virtual HRESULT appendChild( IXMLDOMNode * , IXMLDOMNode * * ) = 0;
	/*00b0*/ virtual HRESULT hasChildNodes( SHORT * ) = 0;
	/*00b8*/ virtual HRESULT get_ownerDocument( IXMLDOMDocument * * ) = 0;
	/*00c0*/ virtual HRESULT cloneNode( SHORT , IXMLDOMNode * * ) = 0;
	/*00c8*/ virtual HRESULT get_nodeTypeString( WCHAR * * ) = 0;
	/*00d0*/ virtual HRESULT get_text( WCHAR * * ) = 0;
	/*00d8*/ virtual HRESULT put_text( WCHAR * ) = 0;
	/*00e0*/ virtual HRESULT get_specified( SHORT * ) = 0;
	/*00e8*/ virtual HRESULT get_definition( IXMLDOMNode * * ) = 0;
	/*00f0*/ virtual HRESULT get_nodeTypedValue( tagVARIANT * ) = 0;
	/*00f8*/ virtual HRESULT put_nodeTypedValue( tagVARIANT ) = 0;
	/*0100*/ virtual HRESULT get_dataType( tagVARIANT * ) = 0;
	/*0108*/ virtual HRESULT put_dataType( WCHAR * ) = 0;
	/*0110*/ virtual HRESULT get_xml( WCHAR * * ) = 0;
	/*0118*/ virtual HRESULT transformNode( IXMLDOMNode * , WCHAR * * ) = 0;
	/*0120*/ virtual HRESULT selectNodes( WCHAR * , IXMLDOMNodeList * * ) = 0;
	/*0128*/ virtual HRESULT selectSingleNode( WCHAR * , IXMLDOMNode * * ) = 0;
	/*0130*/ virtual HRESULT get_parsed( SHORT * ) = 0;
	/*0138*/ virtual HRESULT get_namespaceURI( WCHAR * * ) = 0;
	/*0140*/ virtual HRESULT get_prefix( WCHAR * * ) = 0;
	/*0148*/ virtual HRESULT get_baseName( WCHAR * * ) = 0;
	/*0150*/ virtual HRESULT transformNodeToObject( IXMLDOMNode * , tagVARIANT ) = 0;
	void IXMLDOMNode( IXMLDOMNode && );
	void IXMLDOMNode( IXMLDOMNode const & );
	void IXMLDOMNode();
	IXMLDOMNode & operator=( IXMLDOMNode && );
	IXMLDOMNode & operator=( IXMLDOMNode const & );
	/*0008*/
};

struct IXMLDOMNodeList : IDispatch {
	/*0038*/ virtual HRESULT get_item( LONG , IXMLDOMNode * * ) = 0;
	/*0040*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0048*/ virtual HRESULT nextNode( IXMLDOMNode * * ) = 0;
	/*0050*/ virtual HRESULT reset() = 0;
	/*0058*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	void IXMLDOMNodeList( IXMLDOMNodeList && );
	void IXMLDOMNodeList( IXMLDOMNodeList const & );
	void IXMLDOMNodeList();
	IXMLDOMNodeList & operator=( IXMLDOMNodeList && );
	IXMLDOMNodeList & operator=( IXMLDOMNodeList const & );
	/*0008*/
};

struct IXMLDOMNotation : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_publicId( tagVARIANT * ) = 0;
	/*0160*/ virtual HRESULT get_systemId( tagVARIANT * ) = 0;
	void IXMLDOMNotation( IXMLDOMNotation && );
	void IXMLDOMNotation( IXMLDOMNotation const & );
	void IXMLDOMNotation();
	IXMLDOMNotation & operator=( IXMLDOMNotation && );
	IXMLDOMNotation & operator=( IXMLDOMNotation const & );
	/*0008*/
};

struct IXMLDOMParseError : IDispatch {
	/*0038*/ virtual HRESULT get_errorCode( LONG * ) = 0;
	/*0040*/ virtual HRESULT get_url( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT get_reason( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT get_srcText( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT get_line( LONG * ) = 0;
	/*0060*/ virtual HRESULT get_linepos( LONG * ) = 0;
	/*0068*/ virtual HRESULT get_filepos( LONG * ) = 0;
	void IXMLDOMParseError( IXMLDOMParseError && );
	void IXMLDOMParseError( IXMLDOMParseError const & );
	void IXMLDOMParseError();
	IXMLDOMParseError & operator=( IXMLDOMParseError && );
	IXMLDOMParseError & operator=( IXMLDOMParseError const & );
	/*0008*/
};

struct IXMLDOMParseError2 : IXMLDOMParseError {
	/*0070*/ virtual HRESULT get_errorXPath( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT get_allErrors( IXMLDOMParseErrorCollection * * ) = 0;
	/*0080*/ virtual HRESULT errorParameters( LONG , WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT get_errorParametersCount( LONG * ) = 0;
	void IXMLDOMParseError2( IXMLDOMParseError2 && );
	void IXMLDOMParseError2( IXMLDOMParseError2 const & );
	void IXMLDOMParseError2();
	IXMLDOMParseError2 & operator=( IXMLDOMParseError2 && );
	IXMLDOMParseError2 & operator=( IXMLDOMParseError2 const & );
	/*0008*/
};

struct IXMLDOMParseErrorCollection : IDispatch {
	/*0038*/ virtual HRESULT get_item( LONG , IXMLDOMParseError2 * * ) = 0;
	/*0040*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0048*/ virtual HRESULT get_next( IXMLDOMParseError2 * * ) = 0;
	/*0050*/ virtual HRESULT reset() = 0;
	/*0058*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	void IXMLDOMParseErrorCollection( IXMLDOMParseErrorCollection && );
	void IXMLDOMParseErrorCollection( IXMLDOMParseErrorCollection const & );
	void IXMLDOMParseErrorCollection();
	IXMLDOMParseErrorCollection & operator=( IXMLDOMParseErrorCollection && );
	IXMLDOMParseErrorCollection & operator=( IXMLDOMParseErrorCollection const & );
	/*0008*/
};

struct IXMLDOMProcessingInstruction : IXMLDOMNode {
	/*0158*/ virtual HRESULT get_target( WCHAR * * ) = 0;
	/*0160*/ virtual HRESULT get_data( WCHAR * * ) = 0;
	/*0168*/ virtual HRESULT put_data( WCHAR * ) = 0;
	void IXMLDOMProcessingInstruction( IXMLDOMProcessingInstruction && );
	void IXMLDOMProcessingInstruction( IXMLDOMProcessingInstruction const & );
	void IXMLDOMProcessingInstruction();
	IXMLDOMProcessingInstruction & operator=( IXMLDOMProcessingInstruction && );
	IXMLDOMProcessingInstruction & operator=( IXMLDOMProcessingInstruction const & );
	/*0008*/
};

struct IXMLDOMSchemaCollection : IDispatch {
	/*0038*/ virtual HRESULT add( WCHAR * , tagVARIANT ) = 0;
	/*0040*/ virtual HRESULT get( WCHAR * , IXMLDOMNode * * ) = 0;
	/*0048*/ virtual HRESULT remove( WCHAR * ) = 0;
	/*0050*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0058*/ virtual HRESULT get_namespaceURI( LONG , WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT addCollection( IXMLDOMSchemaCollection * ) = 0;
	/*0068*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	void IXMLDOMSchemaCollection( IXMLDOMSchemaCollection && );
	void IXMLDOMSchemaCollection( IXMLDOMSchemaCollection const & );
	void IXMLDOMSchemaCollection();
	IXMLDOMSchemaCollection & operator=( IXMLDOMSchemaCollection && );
	IXMLDOMSchemaCollection & operator=( IXMLDOMSchemaCollection const & );
	/*0008*/
};

struct IXMLDOMSchemaCollection2 : IXMLDOMSchemaCollection {
	/*0070*/ virtual HRESULT validate() = 0;
	/*0078*/ virtual HRESULT put_validateOnLoad( SHORT ) = 0;
	/*0080*/ virtual HRESULT get_validateOnLoad( SHORT * ) = 0;
	/*0088*/ virtual HRESULT getSchema( WCHAR * , ISchema * * ) = 0;
	/*0090*/ virtual HRESULT getDeclaration( IXMLDOMNode * , ISchemaItem * * ) = 0;
	void IXMLDOMSchemaCollection2( IXMLDOMSchemaCollection2 && );
	void IXMLDOMSchemaCollection2( IXMLDOMSchemaCollection2 const & );
	void IXMLDOMSchemaCollection2();
	IXMLDOMSchemaCollection2 & operator=( IXMLDOMSchemaCollection2 && );
	IXMLDOMSchemaCollection2 & operator=( IXMLDOMSchemaCollection2 const & );
	/*0008*/
};

struct IXMLDOMSelection : IXMLDOMNodeList {
	/*0060*/ virtual HRESULT get_expr( WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT put_expr( WCHAR * ) = 0;
	/*0070*/ virtual HRESULT get_context( IXMLDOMNode * * ) = 0;
	/*0078*/ virtual HRESULT putref_context( IXMLDOMNode * ) = 0;
	/*0080*/ virtual HRESULT peekNode( IXMLDOMNode * * ) = 0;
	/*0088*/ virtual HRESULT matches( IXMLDOMNode * , IXMLDOMNode * * ) = 0;
	/*0090*/ virtual HRESULT removeNext( IXMLDOMNode * * ) = 0;
	/*0098*/ virtual HRESULT removeAll() = 0;
	/*00a0*/ virtual HRESULT clone( IXMLDOMSelection * * ) = 0;
	/*00a8*/ virtual HRESULT getProperty( WCHAR * , tagVARIANT * ) = 0;
	/*00b0*/ virtual HRESULT setProperty( WCHAR * , tagVARIANT ) = 0;
	void IXMLDOMSelection( IXMLDOMSelection && );
	void IXMLDOMSelection( IXMLDOMSelection const & );
	void IXMLDOMSelection();
	IXMLDOMSelection & operator=( IXMLDOMSelection && );
	IXMLDOMSelection & operator=( IXMLDOMSelection const & );
	/*0008*/
};

struct IXMLDOMText : IXMLDOMCharacterData {
	/*0198*/ virtual HRESULT splitText( LONG , IXMLDOMText * * ) = 0;
	void IXMLDOMText( IXMLDOMText && );
	void IXMLDOMText( IXMLDOMText const & );
	void IXMLDOMText();
	IXMLDOMText & operator=( IXMLDOMText && );
	IXMLDOMText & operator=( IXMLDOMText const & );
	/*0008*/
};

struct IXMLDSOControl : IDispatch {
	/*0038*/ virtual HRESULT get_XMLDocument( IXMLDOMDocument * * ) = 0;
	/*0040*/ virtual HRESULT put_XMLDocument( IXMLDOMDocument * ) = 0;
	/*0048*/ virtual HRESULT get_JavaDSOCompatible( INT * ) = 0;
	/*0050*/ virtual HRESULT put_JavaDSOCompatible( INT ) = 0;
	/*0058*/ virtual HRESULT get_readyState( LONG * ) = 0;
	void IXMLDSOControl( IXMLDSOControl && );
	void IXMLDSOControl( IXMLDSOControl const & );
	void IXMLDSOControl();
	IXMLDSOControl & operator=( IXMLDSOControl && );
	IXMLDSOControl & operator=( IXMLDSOControl const & );
	/*0008*/
};

struct IXMLDocument : IDispatch {
	/*0038*/ virtual HRESULT get_root( IXMLElement * * ) = 0;
	/*0040*/ virtual HRESULT get_fileSize( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT get_fileModifiedDate( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT get_fileUpdatedDate( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT get_URL( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT put_URL( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT get_mimeType( WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*0078*/ virtual HRESULT get_charset( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT put_charset( WCHAR * ) = 0;
	/*0088*/ virtual HRESULT get_version( WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT get_doctype( WCHAR * * ) = 0;
	/*0098*/ virtual HRESULT get_dtdURL( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT createElement( tagVARIANT , tagVARIANT , IXMLElement * * ) = 0;
	void IXMLDocument( IXMLDocument && );
	void IXMLDocument( IXMLDocument const & );
	void IXMLDocument();
	IXMLDocument & operator=( IXMLDocument && );
	IXMLDocument & operator=( IXMLDocument const & );
	/*0008*/
};

struct IXMLDocument2 : IDispatch {
	/*0038*/ virtual HRESULT get_root( IXMLElement2 * * ) = 0;
	/*0040*/ virtual HRESULT get_fileSize( WCHAR * * ) = 0;
	/*0048*/ virtual HRESULT get_fileModifiedDate( WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT get_fileUpdatedDate( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT get_URL( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT put_URL( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT get_mimeType( WCHAR * * ) = 0;
	/*0070*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*0078*/ virtual HRESULT get_charset( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT put_charset( WCHAR * ) = 0;
	/*0088*/ virtual HRESULT get_version( WCHAR * * ) = 0;
	/*0090*/ virtual HRESULT get_doctype( WCHAR * * ) = 0;
	/*0098*/ virtual HRESULT get_dtdURL( WCHAR * * ) = 0;
	/*00a0*/ virtual HRESULT createElement( tagVARIANT , tagVARIANT , IXMLElement2 * * ) = 0;
	/*00a8*/ virtual HRESULT get_async( SHORT * ) = 0;
	/*00b0*/ virtual HRESULT put_async( SHORT ) = 0;
	void IXMLDocument2( IXMLDocument2 && );
	void IXMLDocument2( IXMLDocument2 const & );
	void IXMLDocument2();
	IXMLDocument2 & operator=( IXMLDocument2 && );
	IXMLDocument2 & operator=( IXMLDocument2 const & );
	/*0008*/
};

struct IXMLElement : IDispatch {
	/*0038*/ virtual HRESULT get_tagName( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT put_tagName( WCHAR * ) = 0;
	/*0048*/ virtual HRESULT get_parent( IXMLElement * * ) = 0;
	/*0050*/ virtual HRESULT setAttribute( WCHAR * , tagVARIANT ) = 0;
	/*0058*/ virtual HRESULT getAttribute( WCHAR * , tagVARIANT * ) = 0;
	/*0060*/ virtual HRESULT removeAttribute( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT get_children( IXMLElementCollection * * ) = 0;
	/*0070*/ virtual HRESULT get_type( LONG * ) = 0;
	/*0078*/ virtual HRESULT get_text( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT put_text( WCHAR * ) = 0;
	/*0088*/ virtual HRESULT addChild( IXMLElement * , LONG , LONG ) = 0;
	/*0090*/ virtual HRESULT removeChild( IXMLElement * ) = 0;
	void IXMLElement( IXMLElement && );
	void IXMLElement( IXMLElement const & );
	void IXMLElement();
	IXMLElement & operator=( IXMLElement && );
	IXMLElement & operator=( IXMLElement const & );
	/*0008*/
};

struct IXMLElement2 : IDispatch {
	/*0038*/ virtual HRESULT get_tagName( WCHAR * * ) = 0;
	/*0040*/ virtual HRESULT put_tagName( WCHAR * ) = 0;
	/*0048*/ virtual HRESULT get_parent( IXMLElement2 * * ) = 0;
	/*0050*/ virtual HRESULT setAttribute( WCHAR * , tagVARIANT ) = 0;
	/*0058*/ virtual HRESULT getAttribute( WCHAR * , tagVARIANT * ) = 0;
	/*0060*/ virtual HRESULT removeAttribute( WCHAR * ) = 0;
	/*0068*/ virtual HRESULT get_children( IXMLElementCollection * * ) = 0;
	/*0070*/ virtual HRESULT get_type( LONG * ) = 0;
	/*0078*/ virtual HRESULT get_text( WCHAR * * ) = 0;
	/*0080*/ virtual HRESULT put_text( WCHAR * ) = 0;
	/*0088*/ virtual HRESULT addChild( IXMLElement2 * , LONG , LONG ) = 0;
	/*0090*/ virtual HRESULT removeChild( IXMLElement2 * ) = 0;
	/*0098*/ virtual HRESULT get_attributes( IXMLElementCollection * * ) = 0;
	void IXMLElement2( IXMLElement2 && );
	void IXMLElement2( IXMLElement2 const & );
	void IXMLElement2();
	IXMLElement2 & operator=( IXMLElement2 && );
	IXMLElement2 & operator=( IXMLElement2 const & );
	/*0008*/
};

struct IXMLElementCollection : IDispatch {
	/*0038*/ virtual HRESULT put_length( LONG ) = 0;
	/*0040*/ virtual HRESULT get_length( LONG * ) = 0;
	/*0048*/ virtual HRESULT get__newEnum( IUnknown * * ) = 0;
	/*0050*/ virtual HRESULT item( tagVARIANT , tagVARIANT , IDispatch * * ) = 0;
	void IXMLElementCollection( IXMLElementCollection && );
	void IXMLElementCollection( IXMLElementCollection const & );
	void IXMLElementCollection();
	IXMLElementCollection & operator=( IXMLElementCollection && );
	IXMLElementCollection & operator=( IXMLElementCollection const & );
	/*0008*/
};

struct IXMLError : IUnknown {
	/*0018*/ virtual HRESULT GetErrorInfo( _xml_error * ) = 0;
	void IXMLError( IXMLError && );
	void IXMLError( IXMLError const & );
	void IXMLError();
	IXMLError & operator=( IXMLError && );
	IXMLError & operator=( IXMLError const & );
	/*0008*/
};

struct IXMLHTTPRequest : IDispatch {
	/*0038*/ virtual HRESULT open( WCHAR * , WCHAR * , tagVARIANT , tagVARIANT , tagVARIANT ) = 0;
	/*0040*/ virtual HRESULT setRequestHeader( WCHAR * , WCHAR * ) = 0;
	/*0048*/ virtual HRESULT getResponseHeader( WCHAR * , WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT getAllResponseHeaders( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT send( tagVARIANT ) = 0;
	/*0060*/ virtual HRESULT abort() = 0;
	/*0068*/ virtual HRESULT get_status( LONG * ) = 0;
	/*0070*/ virtual HRESULT get_statusText( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT get_responseXML( IDispatch * * ) = 0;
	/*0080*/ virtual HRESULT get_responseText( WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT get_responseBody( tagVARIANT * ) = 0;
	/*0090*/ virtual HRESULT get_responseStream( tagVARIANT * ) = 0;
	/*0098*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*00a0*/ virtual HRESULT put_onreadystatechange( IDispatch * ) = 0;
	void IXMLHTTPRequest( IXMLHTTPRequest && );
	void IXMLHTTPRequest( IXMLHTTPRequest const & );
	void IXMLHTTPRequest();
	IXMLHTTPRequest & operator=( IXMLHTTPRequest && );
	IXMLHTTPRequest & operator=( IXMLHTTPRequest const & );
	/*0008*/
};

struct IXMLHTTPRequest2 : IUnknown {
	/*0018*/ virtual HRESULT Open( WCHAR const * , WCHAR const * , IXMLHTTPRequest2Callback * , WCHAR const * , WCHAR const * , WCHAR const * , WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT Send( ISequentialStream * , ULONGLONG ) = 0;
	/*0028*/ virtual HRESULT Abort() = 0;
	/*0030*/ virtual HRESULT SetCookie( tagXHR_COOKIE const * , ULONG * ) = 0;
	/*0038*/ virtual HRESULT SetCustomResponseStream( ISequentialStream * ) = 0;
	/*0040*/ virtual HRESULT SetProperty( _XHR_PROPERTY , ULONGLONG ) = 0;
	/*0048*/ virtual HRESULT SetRequestHeader( WCHAR const * , WCHAR const * ) = 0;
	/*0050*/ virtual HRESULT GetAllResponseHeaders( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT GetCookie( WCHAR const * , WCHAR const * , ULONG , ULONG * , tagXHR_COOKIE * * ) = 0;
	/*0060*/ virtual HRESULT GetResponseHeader( WCHAR const * , WCHAR * * ) = 0;
	void IXMLHTTPRequest2( IXMLHTTPRequest2 && );
	void IXMLHTTPRequest2( IXMLHTTPRequest2 const & );
	void IXMLHTTPRequest2();
	IXMLHTTPRequest2 & operator=( IXMLHTTPRequest2 && );
	IXMLHTTPRequest2 & operator=( IXMLHTTPRequest2 const & );
	/*0008*/
};

struct IXMLHTTPRequest2Callback : IUnknown {
	/*0018*/ virtual HRESULT OnRedirect( IXMLHTTPRequest2 * , WCHAR const * ) = 0;
	/*0020*/ virtual HRESULT OnHeadersAvailable( IXMLHTTPRequest2 * , ULONG , WCHAR const * ) = 0;
	/*0028*/ virtual HRESULT OnDataAvailable( IXMLHTTPRequest2 * , ISequentialStream * ) = 0;
	/*0030*/ virtual HRESULT OnResponseReceived( IXMLHTTPRequest2 * , ISequentialStream * ) = 0;
	/*0038*/ virtual HRESULT OnError( IXMLHTTPRequest2 * , HRESULT ) = 0;
	void IXMLHTTPRequest2Callback( IXMLHTTPRequest2Callback && );
	void IXMLHTTPRequest2Callback( IXMLHTTPRequest2Callback const & );
	void IXMLHTTPRequest2Callback();
	IXMLHTTPRequest2Callback & operator=( IXMLHTTPRequest2Callback && );
	IXMLHTTPRequest2Callback & operator=( IXMLHTTPRequest2Callback const & );
	/*0008*/
};

struct IXMLHTTPRequest3 : IXMLHTTPRequest2 {
	/*0068*/ virtual HRESULT SetClientCertificate( ULONG , UCHAR const * , WCHAR const * ) = 0;
	void IXMLHTTPRequest3( IXMLHTTPRequest3 && );
	void IXMLHTTPRequest3( IXMLHTTPRequest3 const & );
	void IXMLHTTPRequest3();
	IXMLHTTPRequest3 & operator=( IXMLHTTPRequest3 && );
	IXMLHTTPRequest3 & operator=( IXMLHTTPRequest3 const & );
	/*0008*/
};

struct IXMLHTTPRequest3Callback : IXMLHTTPRequest2Callback {
	/*0040*/ virtual HRESULT OnServerCertificateReceived( IXMLHTTPRequest3 * , ULONG , ULONG , tagXHR_CERT const * ) = 0;
	/*0048*/ virtual HRESULT OnClientCertificateRequested( IXMLHTTPRequest3 * , ULONG , WCHAR const * * ) = 0;
	void IXMLHTTPRequest3Callback( IXMLHTTPRequest3Callback && );
	void IXMLHTTPRequest3Callback( IXMLHTTPRequest3Callback const & );
	void IXMLHTTPRequest3Callback();
	IXMLHTTPRequest3Callback & operator=( IXMLHTTPRequest3Callback && );
	IXMLHTTPRequest3Callback & operator=( IXMLHTTPRequest3Callback const & );
	/*0008*/
};

struct IXMLHttpRequest : IDispatch {
	/*0038*/ virtual HRESULT open( WCHAR * , WCHAR * , tagVARIANT , tagVARIANT , tagVARIANT ) = 0;
	/*0040*/ virtual HRESULT setRequestHeader( WCHAR * , WCHAR * ) = 0;
	/*0048*/ virtual HRESULT getResponseHeader( WCHAR * , WCHAR * * ) = 0;
	/*0050*/ virtual HRESULT getAllResponseHeaders( WCHAR * * ) = 0;
	/*0058*/ virtual HRESULT send( tagVARIANT ) = 0;
	/*0060*/ virtual HRESULT abort() = 0;
	/*0068*/ virtual HRESULT get_status( LONG * ) = 0;
	/*0070*/ virtual HRESULT get_statusText( WCHAR * * ) = 0;
	/*0078*/ virtual HRESULT get_responseXML( IDispatch * * ) = 0;
	/*0080*/ virtual HRESULT get_responseText( WCHAR * * ) = 0;
	/*0088*/ virtual HRESULT get_responseBody( tagVARIANT * ) = 0;
	/*0090*/ virtual HRESULT get_responseStream( tagVARIANT * ) = 0;
	/*0098*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*00a0*/ virtual HRESULT put_onreadystatechange( IDispatch * ) = 0;
	void IXMLHttpRequest( IXMLHttpRequest && );
	void IXMLHttpRequest( IXMLHttpRequest const & );
	void IXMLHttpRequest();
	IXMLHttpRequest & operator=( IXMLHttpRequest && );
	IXMLHttpRequest & operator=( IXMLHttpRequest const & );
	/*0008*/
};

struct IXSLProcessor : IDispatch {
	/*0038*/ virtual HRESULT put_input( tagVARIANT ) = 0;
	/*0040*/ virtual HRESULT get_input( tagVARIANT * ) = 0;
	/*0048*/ virtual HRESULT get_ownerTemplate( IXSLTemplate * * ) = 0;
	/*0050*/ virtual HRESULT setStartMode( WCHAR * , WCHAR * ) = 0;
	/*0058*/ virtual HRESULT get_startMode( WCHAR * * ) = 0;
	/*0060*/ virtual HRESULT get_startModeURI( WCHAR * * ) = 0;
	/*0068*/ virtual HRESULT put_output( tagVARIANT ) = 0;
	/*0070*/ virtual HRESULT get_output( tagVARIANT * ) = 0;
	/*0078*/ virtual HRESULT transform( SHORT * ) = 0;
	/*0080*/ virtual HRESULT reset() = 0;
	/*0088*/ virtual HRESULT get_readyState( LONG * ) = 0;
	/*0090*/ virtual HRESULT addParameter( WCHAR * , tagVARIANT , WCHAR * ) = 0;
	/*0098*/ virtual HRESULT addObject( IDispatch * , WCHAR * ) = 0;
	/*00a0*/ virtual HRESULT get_stylesheet( IXMLDOMNode * * ) = 0;
	void IXSLProcessor( IXSLProcessor && );
	void IXSLProcessor( IXSLProcessor const & );
	void IXSLProcessor();
	IXSLProcessor & operator=( IXSLProcessor && );
	IXSLProcessor & operator=( IXSLProcessor const & );
	/*0008*/
};

struct IXSLTemplate : IDispatch {
	/*0038*/ virtual HRESULT putref_stylesheet( IXMLDOMNode * ) = 0;
	/*0040*/ virtual HRESULT get_stylesheet( IXMLDOMNode * * ) = 0;
	/*0048*/ virtual HRESULT createProcessor( IXSLProcessor * * ) = 0;
	void IXSLTemplate( IXSLTemplate && );
	void IXSLTemplate( IXSLTemplate const & );
	void IXSLTemplate();
	IXSLTemplate & operator=( IXSLTemplate && );
	IXSLTemplate & operator=( IXSLTemplate const & );
	/*0008*/
};

struct IXTLRuntime : IXMLDOMNode {
	/*0158*/ virtual HRESULT uniqueID( IXMLDOMNode * , LONG * ) = 0;
	/*0160*/ virtual HRESULT depth( IXMLDOMNode * , LONG * ) = 0;
	/*0168*/ virtual HRESULT childNumber( IXMLDOMNode * , LONG * ) = 0;
	/*0170*/ virtual HRESULT ancestorChildNumber( WCHAR * , IXMLDOMNode * , LONG * ) = 0;
	/*0178*/ virtual HRESULT absoluteChildNumber( IXMLDOMNode * , LONG * ) = 0;
	/*0180*/ virtual HRESULT formatIndex( LONG , WCHAR * , WCHAR * * ) = 0;
	/*0188*/ virtual HRESULT formatNumber( double , WCHAR * , WCHAR * * ) = 0;
	/*0190*/ virtual HRESULT formatDate( tagVARIANT , WCHAR * , tagVARIANT , WCHAR * * ) = 0;
	/*0198*/ virtual HRESULT formatTime( tagVARIANT , WCHAR * , tagVARIANT , WCHAR * * ) = 0;
	void IXTLRuntime( IXTLRuntime && );
	void IXTLRuntime( IXTLRuntime const & );
	void IXTLRuntime();
	IXTLRuntime & operator=( IXTLRuntime && );
	IXTLRuntime & operator=( IXTLRuntime const & );
	/*0008*/
};

struct IZoneIdentifier : IUnknown {
	/*0018*/ virtual HRESULT GetId( ULONG * ) = 0;
	/*0020*/ virtual HRESULT SetId( ULONG ) = 0;
	/*0028*/ virtual HRESULT Remove() = 0;
	void IZoneIdentifier( IZoneIdentifier && );
	void IZoneIdentifier( IZoneIdentifier const & );
	void IZoneIdentifier();
	IZoneIdentifier & operator=( IZoneIdentifier && );
	IZoneIdentifier & operator=( IZoneIdentifier const & );
	/*0008*/
};

struct IZoneIdentifier2 : IZoneIdentifier {
	/*0030*/ virtual HRESULT GetLastWriterPackageFamilyName( WCHAR * * ) = 0;
	/*0038*/ virtual HRESULT SetLastWriterPackageFamilyName( WCHAR const * ) = 0;
	/*0040*/ virtual HRESULT RemoveLastWriterPackageFamilyName() = 0;
	/*0048*/ virtual HRESULT GetAppZoneId( ULONG * ) = 0;
	/*0050*/ virtual HRESULT SetAppZoneId( ULONG ) = 0;
	/*0058*/ virtual HRESULT RemoveAppZoneId() = 0;
	void IZoneIdentifier2( IZoneIdentifier2 && );
	void IZoneIdentifier2( IZoneIdentifier2 const & );
	void IZoneIdentifier2();
	IZoneIdentifier2 & operator=( IZoneIdentifier2 && );
	IZoneIdentifier2 & operator=( IZoneIdentifier2 const & );
	/*0008*/
};

class InterfaceProperties {
public:
	void InterfaceProperties( _GUID const & );
	BOOLEAN IsPhysical() const;
	BOOLEAN IsHardwareInterface() const;
	BOOLEAN IsFilterInterface() const;
	BOOLEAN IsConnected() const;
	ULONG GetType() const;
	WCHAR const * GetAlias() const;
	TUNNEL_TYPE GetTunnelType() const;
private:
	/*0000*/ _MIB_IF_ROW2 m_entry;
	/*0548*/
};

enum InternetCookieState {
	COOKIE_STATE_UNKNOWN = 0x0,
	COOKIE_STATE_ACCEPT = 0x1,
	COOKIE_STATE_PROMPT = 0x2,
	COOKIE_STATE_LEASH = 0x3,
	COOKIE_STATE_DOWNGRADE = 0x4,
	COOKIE_STATE_REJECT = 0x5,
	COOKIE_STATE_MAX = 0x5
};

struct JET_BKINFO {
	/*0000*/ JET_LGPOS lgposMark;
	/*0008*/ JET_LOGTIME logtimeMark;
	/*0008*/ JET_BKLOGTIME bklogtimeMark;
	/*0010*/ ULONG genLow;
	/*0014*/ ULONG genHigh;
	/*0018*/
};

struct JET_BKLOGTIME {
	/*0000*/ CHAR bSeconds;
	/*0001*/ CHAR bMinutes;
	/*0002*/ CHAR bHours;
	/*0003*/ CHAR bDay;
	/*0004*/ CHAR bMonth;
	/*0005*/ CHAR bYear;
	/*0006*/ CHAR bFiller1;
	/*0006*/ UCHAR fTimeIsUTC : 01; // 0x01;
	/*0006*/ UCHAR bMillisecondsLow : 07; // 0xfe;
	/*0007*/ CHAR bFiller2;
	/*0007*/ UCHAR fOSSnapshot : 01; // 0x01;
	/*0007*/ UCHAR bMillisecondsHigh : 03; // 0x0e;
	/*0007*/ UCHAR fReserved : 04; // 0xf0;
	/*0008*/
};

struct JET_COLUMNBASE_A {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG columnid;
	/*0008*/ ULONG coltyp;
	/*000c*/ USHORT wCountry;
	/*000e*/ USHORT langid;
	/*0010*/ USHORT cp;
	/*0012*/ USHORT wFiller;
	/*0014*/ ULONG cbMax;
	/*0018*/ ULONG grbit;
	/*001c*/ CHAR szBaseTableName[0x100];
	/*011c*/ CHAR szBaseColumnName[0x100];
	/*021c*/
};

struct JET_COLUMNBASE_W {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG columnid;
	/*0008*/ ULONG coltyp;
	/*000c*/ USHORT wCountry;
	/*000e*/ USHORT langid;
	/*0010*/ USHORT cp;
	/*0012*/ USHORT wFiller;
	/*0014*/ ULONG cbMax;
	/*0018*/ ULONG grbit;
	/*001c*/ WCHAR szBaseTableName[0x100];
	/*021c*/ WCHAR szBaseColumnName[0x100];
	/*041c*/
};

struct JET_COLUMNDEF {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG columnid;
	/*0008*/ ULONG coltyp;
	/*000c*/ USHORT wCountry;
	/*000e*/ USHORT langid;
	/*0010*/ USHORT cp;
	/*0012*/ USHORT wCollate;
	/*0014*/ ULONG cbMax;
	/*0018*/ ULONG grbit;
	/*001c*/
};

struct JET_COLUMNLIST {
	/*0000*/ ULONG cbStruct;
	/*0008*/ ULONGLONG tableid;
	/*0010*/ ULONG cRecord;
	/*0014*/ ULONG columnidPresentationOrder;
	/*0018*/ ULONG columnidcolumnname;
	/*001c*/ ULONG columnidcolumnid;
	/*0020*/ ULONG columnidcoltyp;
	/*0024*/ ULONG columnidCountry;
	/*0028*/ ULONG columnidLangid;
	/*002c*/ ULONG columnidCp;
	/*0030*/ ULONG columnidCollate;
	/*0034*/ ULONG columnidcbMax;
	/*0038*/ ULONG columnidgrbit;
	/*003c*/ ULONG columnidDefault;
	/*0040*/ ULONG columnidBaseTableName;
	/*0044*/ ULONG columnidBaseColumnName;
	/*0048*/ ULONG columnidDefinitionName;
	/*0050*/
};

struct JET_COMMIT_ID {
	/*0000*/ JET_SIGNATURE signLog;
	/*001c*/ INT reserved;
	/*0020*/ LONGLONG commitId;
	/*0028*/
};

struct JET_DBINFOMISC {
	/*0000*/ ULONG ulVersion;
	/*0004*/ ULONG ulUpdate;
	/*0008*/ JET_SIGNATURE signDb;
	/*0024*/ ULONG dbstate;
	/*0028*/ JET_LGPOS lgposConsistent;
	/*0030*/ JET_LOGTIME logtimeConsistent;
	/*0038*/ JET_LOGTIME logtimeAttach;
	/*0040*/ JET_LGPOS lgposAttach;
	/*0048*/ JET_LOGTIME logtimeDetach;
	/*0050*/ JET_LGPOS lgposDetach;
	/*0058*/ JET_SIGNATURE signLog;
	/*0074*/ JET_BKINFO bkinfoFullPrev;
	/*008c*/ JET_BKINFO bkinfoIncPrev;
	/*00a4*/ JET_BKINFO bkinfoFullCur;
	/*00bc*/ ULONG fShadowingDisabled;
	/*00c0*/ ULONG fUpgradeDb;
	/*00c4*/ ULONG dwMajorVersion;
	/*00c8*/ ULONG dwMinorVersion;
	/*00cc*/ ULONG dwBuildNumber;
	/*00d0*/ LONG lSPNumber;
	/*00d4*/ ULONG cbPageSize;
	/*00d8*/
};

struct JET_DBINFOMISC2 {
	/*0000*/ ULONG ulVersion;
	/*0004*/ ULONG ulUpdate;
	/*0008*/ JET_SIGNATURE signDb;
	/*0024*/ ULONG dbstate;
	/*0028*/ JET_LGPOS lgposConsistent;
	/*0030*/ JET_LOGTIME logtimeConsistent;
	/*0038*/ JET_LOGTIME logtimeAttach;
	/*0040*/ JET_LGPOS lgposAttach;
	/*0048*/ JET_LOGTIME logtimeDetach;
	/*0050*/ JET_LGPOS lgposDetach;
	/*0058*/ JET_SIGNATURE signLog;
	/*0074*/ JET_BKINFO bkinfoFullPrev;
	/*008c*/ JET_BKINFO bkinfoIncPrev;
	/*00a4*/ JET_BKINFO bkinfoFullCur;
	/*00bc*/ ULONG fShadowingDisabled;
	/*00c0*/ ULONG fUpgradeDb;
	/*00c4*/ ULONG dwMajorVersion;
	/*00c8*/ ULONG dwMinorVersion;
	/*00cc*/ ULONG dwBuildNumber;
	/*00d0*/ LONG lSPNumber;
	/*00d4*/ ULONG cbPageSize;
	/*00d8*/ ULONG genMinRequired;
	/*00dc*/ ULONG genMaxRequired;
	/*00e0*/ JET_LOGTIME logtimeGenMaxCreate;
	/*00e8*/ ULONG ulRepairCount;
	/*00ec*/ JET_LOGTIME logtimeRepair;
	/*00f4*/ ULONG ulRepairCountOld;
	/*00f8*/ ULONG ulECCFixSuccess;
	/*00fc*/ JET_LOGTIME logtimeECCFixSuccess;
	/*0104*/ ULONG ulECCFixSuccessOld;
	/*0108*/ ULONG ulECCFixFail;
	/*010c*/ JET_LOGTIME logtimeECCFixFail;
	/*0114*/ ULONG ulECCFixFailOld;
	/*0118*/ ULONG ulBadChecksum;
	/*011c*/ JET_LOGTIME logtimeBadChecksum;
	/*0124*/ ULONG ulBadChecksumOld;
	/*0128*/
};

struct JET_DBINFOMISC3 {
	/*0000*/ ULONG ulVersion;
	/*0004*/ ULONG ulUpdate;
	/*0008*/ JET_SIGNATURE signDb;
	/*0024*/ ULONG dbstate;
	/*0028*/ JET_LGPOS lgposConsistent;
	/*0030*/ JET_LOGTIME logtimeConsistent;
	/*0038*/ JET_LOGTIME logtimeAttach;
	/*0040*/ JET_LGPOS lgposAttach;
	/*0048*/ JET_LOGTIME logtimeDetach;
	/*0050*/ JET_LGPOS lgposDetach;
	/*0058*/ JET_SIGNATURE signLog;
	/*0074*/ JET_BKINFO bkinfoFullPrev;
	/*008c*/ JET_BKINFO bkinfoIncPrev;
	/*00a4*/ JET_BKINFO bkinfoFullCur;
	/*00bc*/ ULONG fShadowingDisabled;
	/*00c0*/ ULONG fUpgradeDb;
	/*00c4*/ ULONG dwMajorVersion;
	/*00c8*/ ULONG dwMinorVersion;
	/*00cc*/ ULONG dwBuildNumber;
	/*00d0*/ LONG lSPNumber;
	/*00d4*/ ULONG cbPageSize;
	/*00d8*/ ULONG genMinRequired;
	/*00dc*/ ULONG genMaxRequired;
	/*00e0*/ JET_LOGTIME logtimeGenMaxCreate;
	/*00e8*/ ULONG ulRepairCount;
	/*00ec*/ JET_LOGTIME logtimeRepair;
	/*00f4*/ ULONG ulRepairCountOld;
	/*00f8*/ ULONG ulECCFixSuccess;
	/*00fc*/ JET_LOGTIME logtimeECCFixSuccess;
	/*0104*/ ULONG ulECCFixSuccessOld;
	/*0108*/ ULONG ulECCFixFail;
	/*010c*/ JET_LOGTIME logtimeECCFixFail;
	/*0114*/ ULONG ulECCFixFailOld;
	/*0118*/ ULONG ulBadChecksum;
	/*011c*/ JET_LOGTIME logtimeBadChecksum;
	/*0124*/ ULONG ulBadChecksumOld;
	/*0128*/ ULONG genCommitted;
	/*012c*/
};

struct JET_DBINFOMISC4 {
	/*0000*/ ULONG ulVersion;
	/*0004*/ ULONG ulUpdate;
	/*0008*/ JET_SIGNATURE signDb;
	/*0024*/ ULONG dbstate;
	/*0028*/ JET_LGPOS lgposConsistent;
	/*0030*/ JET_LOGTIME logtimeConsistent;
	/*0038*/ JET_LOGTIME logtimeAttach;
	/*0040*/ JET_LGPOS lgposAttach;
	/*0048*/ JET_LOGTIME logtimeDetach;
	/*0050*/ JET_LGPOS lgposDetach;
	/*0058*/ JET_SIGNATURE signLog;
	/*0074*/ JET_BKINFO bkinfoFullPrev;
	/*008c*/ JET_BKINFO bkinfoIncPrev;
	/*00a4*/ JET_BKINFO bkinfoFullCur;
	/*00bc*/ ULONG fShadowingDisabled;
	/*00c0*/ ULONG fUpgradeDb;
	/*00c4*/ ULONG dwMajorVersion;
	/*00c8*/ ULONG dwMinorVersion;
	/*00cc*/ ULONG dwBuildNumber;
	/*00d0*/ LONG lSPNumber;
	/*00d4*/ ULONG cbPageSize;
	/*00d8*/ ULONG genMinRequired;
	/*00dc*/ ULONG genMaxRequired;
	/*00e0*/ JET_LOGTIME logtimeGenMaxCreate;
	/*00e8*/ ULONG ulRepairCount;
	/*00ec*/ JET_LOGTIME logtimeRepair;
	/*00f4*/ ULONG ulRepairCountOld;
	/*00f8*/ ULONG ulECCFixSuccess;
	/*00fc*/ JET_LOGTIME logtimeECCFixSuccess;
	/*0104*/ ULONG ulECCFixSuccessOld;
	/*0108*/ ULONG ulECCFixFail;
	/*010c*/ JET_LOGTIME logtimeECCFixFail;
	/*0114*/ ULONG ulECCFixFailOld;
	/*0118*/ ULONG ulBadChecksum;
	/*011c*/ JET_LOGTIME logtimeBadChecksum;
	/*0124*/ ULONG ulBadChecksumOld;
	/*0128*/ ULONG genCommitted;
	/*012c*/ JET_BKINFO bkinfoCopyPrev;
	/*0144*/ JET_BKINFO bkinfoDiffPrev;
	/*015c*/
};

struct JET_DBINFOUPGRADE {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG cbFilesizeLow;
	/*0008*/ ULONG cbFilesizeHigh;
	/*000c*/ ULONG cbFreeSpaceRequiredLow;
	/*0010*/ ULONG cbFreeSpaceRequiredHigh;
	/*0014*/ ULONG csecToUpgrade;
	/*0018*/ ULONG ulFlags;
	/*0018*/ ULONG fUpgradable : 01; // 0x00000001;
	/*0018*/ ULONG fAlreadyUpgraded : 01; // 0x00000002;
	/*001c*/
};

struct JET_ENUMCOLUMN {
	/*0000*/ ULONG columnid;
	/*0004*/ LONG err;
	/*0008*/ ULONG cEnumColumnValue;
	/*0010*/ JET_ENUMCOLUMNVALUE * rgEnumColumnValue;
	/*0008*/ ULONG cbData;
	/*0010*/ void * pvData;
	/*0018*/
};

struct JET_ENUMCOLUMNID {
	/*0000*/ ULONG columnid;
	/*0004*/ ULONG ctagSequence;
	/*0008*/ ULONG * rgtagSequence;
	/*0010*/
};

struct JET_ENUMCOLUMNVALUE {
	/*0000*/ ULONG itagSequence;
	/*0004*/ LONG err;
	/*0008*/ ULONG cbData;
	/*0010*/ void * pvData;
	/*0018*/
};

enum JET_ERRCAT {
	JET_errcatUnknown = 0x0,
	JET_errcatError = 0x1,
	JET_errcatOperation = 0x2,
	JET_errcatFatal = 0x3,
	JET_errcatIO = 0x4,
	JET_errcatResource = 0x5,
	JET_errcatMemory = 0x6,
	JET_errcatQuota = 0x7,
	JET_errcatDisk = 0x8,
	JET_errcatData = 0x9,
	JET_errcatCorruption = 0xa,
	JET_errcatInconsistent = 0xb,
	JET_errcatFragmentation = 0xc,
	JET_errcatApi = 0xd,
	JET_errcatUsage = 0xe,
	JET_errcatState = 0xf,
	JET_errcatObsolete = 0x10,
	JET_errcatMax = 0x11
};

struct JET_ERRINFOBASIC_W {
	/*0000*/ ULONG cbStruct;
	/*0004*/ LONG errValue;
	/*0008*/ JET_ERRCAT errcatMostSpecific;
	/*000c*/ UCHAR rgCategoricalHierarchy[0x8];
	/*0014*/ ULONG lSourceLine;
	/*0018*/ WCHAR rgszSourceFile[0x40];
	/*0098*/
};

enum JET_INDEXCHECKING {
	JET_IndexCheckingOff = 0x0,
	JET_IndexCheckingOn = 0x1,
	JET_IndexCheckingDeferToOpenTable = 0x2,
	JET_IndexCheckingMax = 0x3
};

struct JET_INDEXLIST {
	/*0000*/ ULONG cbStruct;
	/*0008*/ ULONGLONG tableid;
	/*0010*/ ULONG cRecord;
	/*0014*/ ULONG columnidindexname;
	/*0018*/ ULONG columnidgrbitIndex;
	/*001c*/ ULONG columnidcKey;
	/*0020*/ ULONG columnidcEntry;
	/*0024*/ ULONG columnidcPage;
	/*0028*/ ULONG columnidcColumn;
	/*002c*/ ULONG columnidiColumn;
	/*0030*/ ULONG columnidcolumnid;
	/*0034*/ ULONG columnidcoltyp;
	/*0038*/ ULONG columnidCountry;
	/*003c*/ ULONG columnidLangid;
	/*0040*/ ULONG columnidCp;
	/*0044*/ ULONG columnidCollate;
	/*0048*/ ULONG columnidgrbitColumn;
	/*004c*/ ULONG columnidcolumnname;
	/*0050*/ ULONG columnidLCMapFlags;
	/*0058*/
};

struct JET_INDEXRANGE {
	/*0000*/ ULONG cbStruct;
	/*0008*/ ULONGLONG tableid;
	/*0010*/ ULONG grbit;
	/*0018*/
};

struct JET_INDEX_COLUMN {
	/*0000*/ ULONG columnid;
	/*0004*/ JET_RELOP relop;
	/*0008*/ void * pv;
	/*0010*/ ULONG cb;
	/*0014*/ ULONG grbit;
	/*0018*/
};

struct JET_INDEX_RANGE {
	/*0000*/ JET_INDEX_COLUMN * rgStartColumns;
	/*0008*/ ULONG cStartColumns;
	/*0010*/ JET_INDEX_COLUMN * rgEndColumns;
	/*0018*/ ULONG cEndColumns;
	/*0020*/
};

struct JET_LGPOS {
	/*0000*/ USHORT ib;
	/*0002*/ USHORT isec;
	/*0004*/ LONG lGeneration;
	/*0008*/
};

struct JET_LOGINFO_A {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG ulGenLow;
	/*0008*/ ULONG ulGenHigh;
	/*000c*/ CHAR szBaseName[0x4];
	/*0010*/
};

struct JET_LOGINFO_W {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG ulGenLow;
	/*0008*/ ULONG ulGenHigh;
	/*000c*/ WCHAR szBaseName[0x4];
	/*0014*/
};

struct JET_LOGTIME {
	/*0000*/ CHAR bSeconds;
	/*0001*/ CHAR bMinutes;
	/*0002*/ CHAR bHours;
	/*0003*/ CHAR bDay;
	/*0004*/ CHAR bMonth;
	/*0005*/ CHAR bYear;
	/*0006*/ CHAR bFiller1;
	/*0006*/ UCHAR fTimeIsUTC : 01; // 0x01;
	/*0006*/ UCHAR bMillisecondsLow : 07; // 0xfe;
	/*0007*/ CHAR bFiller2;
	/*0007*/ UCHAR fReserved : 01; // 0x01;
	/*0007*/ UCHAR bMillisecondsHigh : 03; // 0x0e;
	/*0007*/ UCHAR fUnused : 04; // 0xf0;
	/*0008*/
};

struct JET_OBJECTINFO {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG objtyp;
	/*0008*/ double dtCreate;
	/*0010*/ double dtUpdate;
	/*0018*/ ULONG grbit;
	/*001c*/ ULONG flags;
	/*0020*/ ULONG cRecord;
	/*0024*/ ULONG cPage;
	/*0028*/
};

struct JET_OBJECTLIST {
	/*0000*/ ULONG cbStruct;
	/*0008*/ ULONGLONG tableid;
	/*0010*/ ULONG cRecord;
	/*0014*/ ULONG columnidcontainername;
	/*0018*/ ULONG columnidobjectname;
	/*001c*/ ULONG columnidobjtyp;
	/*0020*/ ULONG columniddtCreate;
	/*0024*/ ULONG columniddtUpdate;
	/*0028*/ ULONG columnidgrbit;
	/*002c*/ ULONG columnidflags;
	/*0030*/ ULONG columnidcRecord;
	/*0034*/ ULONG columnidcPage;
	/*0038*/
};

struct JET_OPERATIONCONTEXT {
	/*0000*/ ULONG ulUserID;
	/*0004*/ UCHAR nOperationID;
	/*0005*/ UCHAR nOperationType;
	/*0006*/ UCHAR nClientType;
	/*0007*/ UCHAR fFlags;
	/*0008*/
};

struct JET_RECORDLIST {
	/*0000*/ ULONG cbStruct;
	/*0008*/ ULONGLONG tableid;
	/*0010*/ ULONG cRecord;
	/*0014*/ ULONG columnidBookmark;
	/*0018*/
};

struct JET_RECPOS {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG centriesLT;
	/*0008*/ ULONG centriesInRange;
	/*000c*/ ULONG centriesTotal;
	/*0010*/
};

struct JET_RECSIZE {
	/*0000*/ ULONGLONG cbData;
	/*0008*/ ULONGLONG cbLongValueData;
	/*0010*/ ULONGLONG cbOverhead;
	/*0018*/ ULONGLONG cbLongValueOverhead;
	/*0020*/ ULONGLONG cNonTaggedColumns;
	/*0028*/ ULONGLONG cTaggedColumns;
	/*0030*/ ULONGLONG cLongValues;
	/*0038*/ ULONGLONG cMultiValues;
	/*0040*/
};

struct JET_RECSIZE2 {
	/*0000*/ ULONGLONG cbData;
	/*0008*/ ULONGLONG cbLongValueData;
	/*0010*/ ULONGLONG cbOverhead;
	/*0018*/ ULONGLONG cbLongValueOverhead;
	/*0020*/ ULONGLONG cNonTaggedColumns;
	/*0028*/ ULONGLONG cTaggedColumns;
	/*0030*/ ULONGLONG cLongValues;
	/*0038*/ ULONGLONG cMultiValues;
	/*0040*/ ULONGLONG cCompressedColumns;
	/*0048*/ ULONGLONG cbDataCompressed;
	/*0050*/ ULONGLONG cbLongValueDataCompressed;
	/*0058*/
};

enum JET_RELOP {
	JET_relopEquals = 0x0,
	JET_relopPrefixEquals = 0x1,
	JET_relopNotEquals = 0x2,
	JET_relopLessThanOrEqual = 0x3,
	JET_relopLessThan = 0x4,
	JET_relopGreaterThanOrEqual = 0x5,
	JET_relopGreaterThan = 0x6,
	JET_relopBitmaskEqualsZero = 0x7,
	JET_relopBitmaskNotEqualsZero = 0x8
};

struct JET_RETINFO {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG ibLongValue;
	/*0008*/ ULONG itagSequence;
	/*000c*/ ULONG columnidNextTagged;
	/*0010*/
};

struct JET_RETRIEVECOLUMN {
	/*0000*/ ULONG columnid;
	/*0008*/ void * pvData;
	/*0010*/ ULONG cbData;
	/*0014*/ ULONG cbActual;
	/*0018*/ ULONG grbit;
	/*001c*/ ULONG ibLongValue;
	/*0020*/ ULONG itagSequence;
	/*0024*/ ULONG columnidNextTagged;
	/*0028*/ LONG err;
	/*0030*/
};

struct JET_RSTINFO_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ JET_RSTMAP_A * rgrstmap;
	/*0010*/ LONG crstmap;
	/*0014*/ JET_LGPOS lgposStop;
	/*001c*/ JET_LOGTIME logtimeStop;
	/*0028*/ LONG (* pfnStatus)( ULONGLONG , ULONG , ULONG , void * );
	/*0030*/
};

struct JET_RSTINFO_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ JET_RSTMAP_W * rgrstmap;
	/*0010*/ LONG crstmap;
	/*0014*/ JET_LGPOS lgposStop;
	/*001c*/ JET_LOGTIME logtimeStop;
	/*0028*/ LONG (* pfnStatus)( ULONGLONG , ULONG , ULONG , void * );
	/*0030*/
};

struct JET_RSTMAP_A {
	/*0000*/ CHAR * szDatabaseName;
	/*0008*/ CHAR * szNewDatabaseName;
	/*0010*/
};

struct JET_RSTMAP_W {
	/*0000*/ WCHAR * szDatabaseName;
	/*0008*/ WCHAR * szNewDatabaseName;
	/*0010*/
};

struct JET_SETCOLUMN {
	/*0000*/ ULONG columnid;
	/*0008*/ void const * pvData;
	/*0010*/ ULONG cbData;
	/*0014*/ ULONG grbit;
	/*0018*/ ULONG ibLongValue;
	/*001c*/ ULONG itagSequence;
	/*0020*/ LONG err;
	/*0028*/
};

struct JET_SETINFO {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG ibLongValue;
	/*0008*/ ULONG itagSequence;
	/*000c*/
};

struct JET_SETSYSPARAM_A {
	/*0000*/ ULONG paramid;
	/*0008*/ ULONGLONG lParam;
	/*0010*/ CHAR const * sz;
	/*0018*/ LONG err;
	/*0020*/
};

struct JET_SETSYSPARAM_W {
	/*0000*/ ULONG paramid;
	/*0008*/ ULONGLONG lParam;
	/*0010*/ WCHAR const * sz;
	/*0018*/ LONG err;
	/*0020*/
};

struct JET_SIGNATURE {
	/*0000*/ ULONG ulRandom;
	/*0004*/ JET_LOGTIME logtimeCreate;
	/*000c*/ CHAR szComputerName[0x10];
	/*001c*/
};

struct JET_SNPROG {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG cunitDone;
	/*0008*/ ULONG cunitTotal;
	/*000c*/
};

struct JET_THREADSTATS {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG cPageReferenced;
	/*0008*/ ULONG cPageRead;
	/*000c*/ ULONG cPagePreread;
	/*0010*/ ULONG cPageDirtied;
	/*0014*/ ULONG cPageRedirtied;
	/*0018*/ ULONG cLogRecord;
	/*001c*/ ULONG cbLogRecord;
	/*0020*/
};

struct JET_THREADSTATS2 {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG cPageReferenced;
	/*0008*/ ULONG cPageRead;
	/*000c*/ ULONG cPagePreread;
	/*0010*/ ULONG cPageDirtied;
	/*0014*/ ULONG cPageRedirtied;
	/*0018*/ ULONG cLogRecord;
	/*001c*/ ULONG cbLogRecord;
	/*0020*/ ULONGLONG cusecPageCacheMiss;
	/*0028*/ ULONG cPageCacheMiss;
	/*0030*/
};

enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS {
	JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 0x1,
	JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 0x2,
	JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 0x3
};

struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION {
	/*0000*/ LONGLONG MaxIops;
	/*0008*/ LONGLONG MaxBandwidth;
	/*0010*/ LONGLONG ReservationIops;
	/*0018*/ WCHAR const * VolumeName;
	/*0020*/ ULONG BaseIoSize;
	/*0024*/ ULONG ControlFlags;
	/*0028*/
};

struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
	/*0000*/ LONGLONG MaxIops;
	/*0008*/ LONGLONG MaxBandwidth;
	/*0010*/ LONGLONG ReservationIops;
	/*0018*/ WCHAR * VolumeName;
	/*0020*/ ULONG BaseIoSize;
	/*0024*/ JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
	/*0028*/ USHORT VolumeNameLength;
	/*0030*/
};

struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
	/*0000*/ LONGLONG MaxIops;
	/*0008*/ LONGLONG MaxBandwidth;
	/*0010*/ LONGLONG ReservationIops;
	/*0018*/ WCHAR * VolumeName;
	/*0020*/ ULONG BaseIoSize;
	/*0024*/ JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
	/*0028*/ USHORT VolumeNameLength;
	/*0030*/ LONGLONG CriticalReservationIops;
	/*0038*/ LONGLONG ReservationBandwidth;
	/*0040*/ LONGLONG CriticalReservationBandwidth;
	/*0048*/ LONGLONG MaxTimePercent;
	/*0050*/ LONGLONG ReservationTimePercent;
	/*0058*/ LONGLONG CriticalReservationTimePercent;
	/*0060*/
};

struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
	/*0000*/ LONGLONG MaxIops;
	/*0008*/ LONGLONG MaxBandwidth;
	/*0010*/ LONGLONG ReservationIops;
	/*0018*/ WCHAR * VolumeName;
	/*0020*/ ULONG BaseIoSize;
	/*0024*/ JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
	/*0028*/ USHORT VolumeNameLength;
	/*0030*/ LONGLONG CriticalReservationIops;
	/*0038*/ LONGLONG ReservationBandwidth;
	/*0040*/ LONGLONG CriticalReservationBandwidth;
	/*0048*/ LONGLONG MaxTimePercent;
	/*0050*/ LONGLONG ReservationTimePercent;
	/*0058*/ LONGLONG CriticalReservationTimePercent;
	/*0060*/ LONGLONG SoftMaxIops;
	/*0068*/ LONGLONG SoftMaxBandwidth;
	/*0070*/ LONGLONG SoftMaxTimePercent;
	/*0078*/ LONGLONG LimitExcessNotifyIops;
	/*0080*/ LONGLONG LimitExcessNotifyBandwidth;
	/*0088*/ LONGLONG LimitExcessNotifyTimePercent;
	/*0090*/
};

struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
	/*0000*/ ULONG LimitFlags;
	/*0004*/ ULONG ViolationLimitFlags;
	/*0008*/ ULONGLONG IoReadBytes;
	/*0010*/ ULONGLONG IoReadBytesLimit;
	/*0018*/ ULONGLONG IoWriteBytes;
	/*0020*/ ULONGLONG IoWriteBytesLimit;
	/*0028*/ _LARGE_INTEGER PerJobUserTime;
	/*0030*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0038*/ ULONGLONG JobMemory;
	/*0040*/ ULONGLONG JobHighMemoryLimit;
	/*0040*/ ULONGLONG JobMemoryLimit;
	/*0048*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*0048*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
	/*004c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
	/*004c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
	/*0050*/ ULONGLONG JobLowMemoryLimit;
	/*0058*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
	/*005c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
	/*0060*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
	/*0064*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
	/*0068*/
};

struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
	/*0000*/ ULONGLONG MaxBandwidth;
	/*0008*/ JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
	/*000c*/ UCHAR DscpTag;
	/*0010*/
};

struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
	/*0000*/ ULONGLONG IoReadBytesLimit;
	/*0008*/ ULONGLONG IoWriteBytesLimit;
	/*0010*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0018*/ ULONGLONG JobHighMemoryLimit;
	/*0018*/ ULONGLONG JobMemoryLimit;
	/*0020*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*0020*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
	/*0024*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
	/*0024*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL CpuRateControlToleranceInterval;
	/*0028*/ ULONG LimitFlags;
	/*002c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
	/*0030*/ ULONGLONG JobLowMemoryLimit;
	/*0038*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
	/*003c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
	/*0040*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
	/*0048*/
};

enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
	JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 0x1,
	JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 0x2,
	JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 0x4,
	JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 0x8,
	JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 0xf
};

enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
	JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 0x1,
	JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 0x2,
	JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 0x4,
	JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 0x7
};

struct KEY_PID_ARRAY {
	/*0000*/ void * PID;
	/*0008*/ _UNICODE_STRING KeyName;
	/*0018*/
};

enum KF_CATEGORY {
	KF_CATEGORY_VIRTUAL = 0x1,
	KF_CATEGORY_FIXED = 0x2,
	KF_CATEGORY_COMMON = 0x3,
	KF_CATEGORY_PERUSER = 0x4
};

enum KNOWNDESTCATEGORY {
	KDC_FREQUENT = 0x1,
	KDC_RECENT = 0x2
};

struct KNOWNFOLDER_DEFINITION {
	/*0000*/ KF_CATEGORY category;
	/*0008*/ WCHAR * pszName;
	/*0010*/ WCHAR * pszDescription;
	/*0018*/ _GUID fidParent;
	/*0028*/ WCHAR * pszRelativePath;
	/*0030*/ WCHAR * pszParsingName;
	/*0038*/ WCHAR * pszTooltip;
	/*0040*/ WCHAR * pszLocalizedName;
	/*0048*/ WCHAR * pszIcon;
	/*0050*/ WCHAR * pszSecurity;
	/*0058*/ ULONG dwAttributes;
	/*005c*/ ULONG kfdFlags;
	/*0060*/ _GUID ftidType;
	/*0070*/
};

enum LAST_COPYITEM_ERROR_TYPE {
	LAST_COPYITEM_ERROR_SRC = 0x0,
	LAST_COPYITEM_ERROR_DST = 0x1,
	LAST_COPYITEM_ERROR_NOINFO = 0x2
};

enum LATENCY_TIME {
	LT_DONT_CARE = 0x0,
	LT_LOWEST_LATENCY = 0x1
};

enum LIBRARYFOLDERFILTER {
	LFF_FORCEFILESYSTEM = 0x1,
	LFF_STORAGEITEMS = 0x2,
	LFF_ALLITEMS = 0x3
};

enum LIBRARYMANAGEDIALOGOPTIONS {
	LMD_DEFAULT = 0x0,
	LMD_ALLOWUNINDEXABLENETWORKLOCATIONS = 0x1
};

enum LIBRARYOPTIONFLAGS {
	LOF_DEFAULT = 0x0,
	LOF_PINNEDTONAVPANE = 0x1,
	LOF_MASK_ALL = 0x1
};

enum LIBRARYSAVEFLAGS {
	LSF_FAILIFTHERE = 0x0,
	LSF_OVERRIDEEXISTING = 0x1,
	LSF_MAKEUNIQUENAME = 0x2
};

struct LIST_ENTRY32 {
	/*0000*/ ULONG Flink;
	/*0004*/ ULONG Blink;
	/*0008*/
};

struct LIST_ENTRY64 {
	/*0000*/ ULONGLONG Flink;
	/*0008*/ ULONGLONG Blink;
	/*0010*/
};

struct LVINSERTMARK {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ INT iItem;
	/*000c*/ ULONG dwReserved;
	/*0010*/
};

class Lock {
	void Lock( Lock const & );
public:
	void Lock();
	void ~Lock();
protected:
	_RTL_CRITICAL_SECTION * GetCriticalSection();
	void OnEnter();
	void OnLeave();
private:
	Lock & operator=( Lock const & );
	void Enter();
	void Leave();
	static ULONG const InvalidThreadId;
	/*0000*/ _RTL_CRITICAL_SECTION criticalSection;
public:
	void * __vecDelDtor( UINT );
	/*0028*/
};

struct MAPIINIT_0 {
	/*0000*/ ULONG ulVersion;
	/*0004*/ ULONG ulFlags;
	/*0008*/
};

struct MARK_HANDLE_INFO {
	/*0000*/ ULONG UsnSourceInfo;
	/*0000*/ ULONG CopyNumber;
	/*0008*/ void * VolumeHandle;
	/*0010*/ ULONG HandleInfo;
	/*0018*/
};

struct MARK_HANDLE_INFO32 {
	/*0000*/ ULONG UsnSourceInfo;
	/*0000*/ ULONG CopyNumber;
	/*0004*/ UINT VolumeHandle;
	/*0008*/ ULONG HandleInfo;
	/*000c*/
};

enum MARSHAL_KIND {
	MK_WEAK = 0x1,
	MK_STRONG = 0x2
};

enum MCA_EXCEPTION_TYPE {
	HAL_MCE_RECORD = 0x0,
	HAL_MCA_RECORD = 0x1
};

enum MCFFLAGS {
	MCF_OPLOCK_NONE = 0x0,
	MCF_OPLOCK_REQUIRED_WHEN_AVAILABLE = 0x1,
	MCF_OPLOCK_BACKOFF = 0x10,
	MCF_READONLY_OVERRIDE = 0x20,
	MCF_FREEZE_MODIFIED_DATE = 0x40,
	MCF_OMIT_FILE_SHARE_DELETE = 0x80,
	MCF_STREAM_ALLOW_FILE_DELETES = 0x100
};

struct MCHITTESTINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ tagPOINT pt;
	/*000c*/ UINT uHit;
	/*0010*/ _SYSTEMTIME st;
	/*0020*/ tagRECT rc;
	/*0030*/ INT iOffset;
	/*0034*/ INT iRow;
	/*0038*/ INT iCol;
	/*003c*/
};

struct MEM_EXTENDED_PARAMETER {
	/*0000*/ ULONGLONG Type : 08; // 0x00000000000000ff;
	/*0000*/ ULONGLONG Reserved : 56; // 0xffffffffffffff00;
	/*0008*/ ULONGLONG ULong64;
	/*0008*/ void * Pointer;
	/*0008*/ ULONGLONG Size;
	/*0008*/ void * Handle;
	/*0008*/ ULONG ULong;
	/*0010*/
};

enum MEM_EXTENDED_PARAMETER_TYPE {
	MemExtendedParameterInvalidType = 0x0,
	MemExtendedParameterAddressRequirements = 0x1,
	MemExtendedParameterNumaNode = 0x2,
	MemExtendedParameterPartitionHandle = 0x3,
	MemExtendedParameterUserPhysicalHandle = 0x4,
	MemExtendedParameterAttributeFlags = 0x5,
	MemExtendedParameterMax = 0x6
};

enum MEM_SECTION_EXTENDED_PARAMETER_TYPE {
	MemSectionExtendedParameterInvalidType = 0x0,
	MemSectionExtendedParameterUserPhysicalFlags = 0x1,
	MemSectionExtendedParameterNumaNode = 0x2,
	MemSectionExtendedParameterMax = 0x3
};

struct MENUITEMTEMPLATE {
	/*0000*/ USHORT mtOption;
	/*0002*/ USHORT mtID;
	/*0004*/ WCHAR mtString[0x1];
	/*0006*/
};

struct MENUITEMTEMPLATEHEADER {
	/*0000*/ USHORT versionNumber;
	/*0002*/ USHORT offset;
	/*0004*/
};

enum MERGE_UPDATE_STATUS {
	MUS_COMPLETE = 0x0,
	MUS_USERINPUTNEEDED = 0x1,
	MUS_FAILED = 0x2
};

struct MFT_ENUM_DATA_V0 {
	/*0000*/ ULONGLONG StartFileReferenceNumber;
	/*0008*/ LONGLONG LowUsn;
	/*0010*/ LONGLONG HighUsn;
	/*0018*/
};

struct MFT_ENUM_DATA_V1 {
	/*0000*/ ULONGLONG StartFileReferenceNumber;
	/*0008*/ LONGLONG LowUsn;
	/*0010*/ LONGLONG HighUsn;
	/*0018*/ USHORT MinMajorVersion;
	/*001a*/ USHORT MaxMajorVersion;
	/*0020*/
};

enum MFU_FOLDER_ACTION {
	UNSPECIFIED = 0x0,
	OPEN_FILE_IN = 0x1,
	SAVE_FILE_IN = 0x2,
	COPY_FROM = 0x3,
	PASTE_TO = 0x4,
	MOVE_TO = 0x5,
	COPY_PASTE = 0x6,
	SHARE = 0x7,
	MOVE = 0x8,
	CREATE = 0x9,
	OPEN_FOLDER = 0xa,
	OPEN_FOLDER_IN = 0xb,
	CREATE_IN = 0xc,
	ENUM_COUNT = 0xd
};

enum MGOTFLAGS {
	MGOTFLAGS_DEFAULT = 0x0,
	MGOTFLAGS_ALLOWANYCLIENT = 0x1
};

struct MIB_BOUNDARYROW {
	/*0000*/ ULONG dwGroupAddress;
	/*0004*/ ULONG dwGroupMask;
	/*0008*/
};

enum MIB_IPFORWARD_TYPE {
	MIB_IPROUTE_TYPE_OTHER = 0x1,
	MIB_IPROUTE_TYPE_INVALID = 0x2,
	MIB_IPROUTE_TYPE_DIRECT = 0x3,
	MIB_IPROUTE_TYPE_INDIRECT = 0x4
};

enum MIB_IPNET_TYPE {
	MIB_IPNET_TYPE_OTHER = 0x1,
	MIB_IPNET_TYPE_INVALID = 0x2,
	MIB_IPNET_TYPE_DYNAMIC = 0x3,
	MIB_IPNET_TYPE_STATIC = 0x4
};

enum MIB_IPSTATS_FORWARDING {
	MIB_IP_FORWARDING = 0x1,
	MIB_IP_NOT_FORWARDING = 0x2
};

struct MIB_MCAST_LIMIT_ROW {
	/*0000*/ ULONG dwTtl;
	/*0004*/ ULONG dwRateLimit;
	/*0008*/
};

enum MIB_TCP_STATE {
	MIB_TCP_STATE_CLOSED = 0x1,
	MIB_TCP_STATE_LISTEN = 0x2,
	MIB_TCP_STATE_SYN_SENT = 0x3,
	MIB_TCP_STATE_SYN_RCVD = 0x4,
	MIB_TCP_STATE_ESTAB = 0x5,
	MIB_TCP_STATE_FIN_WAIT1 = 0x6,
	MIB_TCP_STATE_FIN_WAIT2 = 0x7,
	MIB_TCP_STATE_CLOSE_WAIT = 0x8,
	MIB_TCP_STATE_CLOSING = 0x9,
	MIB_TCP_STATE_LAST_ACK = 0xa,
	MIB_TCP_STATE_TIME_WAIT = 0xb,
	MIB_TCP_STATE_DELETE_TCB = 0xc,
	MIB_TCP_STATE_RESERVED = 0x64
};

enum MODE_CHANGE_REASON {
	MCR_NONE = 0x0,
	MCR_ACTIVATION = 0x1,
	MCR_MONITORCHANGE = 0x2,
	MCR_OWNEDWINDOWCREATED = 0x3,
	MCR_SHOWDESKTOP = 0x4,
	MCR_ZBIDCHANGE = 0x5,
	MCR_PRESENTEDWINDOWCHANGED = 0x6,
	MCR_SIMULATED_ACTIVATION = 0x7,
	MCR_CROSS_MONITOR_ACTIVATION = 0x8
};

enum MONITOR_APP_VISIBILITY {
	MAV_UNKNOWN = 0x0,
	MAV_NO_APP_VISIBLE = 0x1,
	MAV_APP_VISIBLE = 0x2
};

enum MONITOR_DPI_TYPE {
	MDT_EFFECTIVE_DPI = 0x0,
	MDT_ANGULAR_DPI = 0x1,
	MDT_RAW_DPI = 0x2,
	MDT_DEFAULT = 0x0
};

struct MOVE_FILE_DATA {
	/*0000*/ void * FileHandle;
	/*0008*/ _LARGE_INTEGER StartingVcn;
	/*0010*/ _LARGE_INTEGER StartingLcn;
	/*0018*/ ULONG ClusterCount;
	/*0020*/
};

struct MOVE_FILE_RECORD_DATA {
	/*0000*/ void * FileHandle;
	/*0008*/ _LARGE_INTEGER SourceFileRecord;
	/*0010*/ _LARGE_INTEGER TargetFileRecord;
	/*0018*/
};

class MTARefHelper {
public:
	void MTARefHelper();
	void ~MTARefHelper();
	HRESULT Reference();
	void Dereference( _TP_CALLBACK_INSTANCE * );
	void Dereference();
private:
	HRESULT AddRefMTA();
	HRESULT ReleaseMTA();
	HRESULT AddRefDll();
	HRESULT ReleaseDll( _TP_CALLBACK_INSTANCE * );
	static void NoOpMethod();
	/*0000*/ CO_MTA_USAGE_COOKIE__ * cookieMtaUsage;
	/*0008*/ HINSTANCE__ * hModule;
	/*0010*/ LONG refCount;
public:
	void * __vecDelDtor( UINT );
	/*0018*/
};

struct MTSID {
	/*0000*/ ULONG cb;
	/*0004*/ UCHAR ab[0x1];
	/*0008*/
};

enum MULTICAST_MODE_TYPE {
	MCAST_INCLUDE = 0x0,
	MCAST_EXCLUDE = 0x1
};

class MethodAggregator {
public:
	void MethodAggregator( MethodAggregator && );
	void MethodAggregator( MethodAggregator const & );
	void MethodAggregator( CHAR const * , HRESULT const & );
	void ~MethodAggregator();
	MethodAggregator & operator=( MethodAggregator && );
	MethodAggregator & operator=( MethodAggregator const & );
private:
	static _RTL_RUN_ONCE s_initOnce;
	static _LARGE_INTEGER s_frequency;
	static INT InitOnceCallback( _RTL_RUN_ONCE * , void * , void * * );
	static ULONGLONG s_lastManualFlushPerfCounter;
	/*0000*/ CHAR const * m_methodName;
	/*0008*/ HRESULT const & m_result;
	/*0010*/ _LARGE_INTEGER m_startCounter;
public:
	void * __vecDelDtor( UINT );
	/*0018*/
};

struct MicrosoftTelemetryAssertTriggeredNode {
	/*0000*/ ULONGLONG Hash;
	/*0008*/ ULONG LastUpload;
	/*000c*/ ULONG Count;
	/*0010*/ ULONG TotalHits;
	/*0018*/ MicrosoftTelemetryAssertTriggeredNode * Next;
	/*0020*/
};

enum NAMESPACEWALKFLAG {
	NSWF_DEFAULT = 0x0,
	NSWF_NONE_IMPLIES_ALL = 0x1,
	NSWF_ONE_IMPLIES_ALL = 0x2,
	NSWF_DONT_TRAVERSE_LINKS = 0x4,
	NSWF_DONT_ACCUMULATE_RESULT = 0x8,
	NSWF_TRAVERSE_STREAM_JUNCTIONS = 0x10,
	NSWF_FILESYSTEM_ONLY = 0x20,
	NSWF_SHOW_PROGRESS = 0x40,
	NSWF_FLAG_VIEWORDER = 0x80,
	NSWF_IGNORE_AUTOPLAY_HIDA = 0x100,
	NSWF_ASYNC = 0x200,
	NSWF_DONT_RESOLVE_LINKS = 0x400,
	NSWF_ACCUMULATE_FOLDERS = 0x800,
	NSWF_DONT_SORT = 0x1000,
	NSWF_USE_TRANSFER_MEDIUM = 0x2000,
	NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = 0x4000,
	NSWF_ANY_IMPLIES_ALL = 0x8000
};

enum NAMESPACE_FOLDER_PREFERENCES_FLAGS {
	FVPF_DEFAULT = 0x0,
	FVPF_ALLOWITEMSVIEW = 0x1
};

enum NATIVE_DISPLAY_ORIENTATION {
	NDO_LANDSCAPE = 0x0,
	NDO_PORTRAIT = 0x1
};

struct NDIS_CO_DEVICE_PROFILE {
	/*0000*/ _NDIS_VAR_DATA_DESC DeviceDescription;
	/*0010*/ _NDIS_VAR_DATA_DESC DevSpecificInfo;
	/*0020*/ ULONG ulTAPISupplementaryPassThru;
	/*0024*/ ULONG ulAddressModes;
	/*0028*/ ULONG ulNumAddresses;
	/*002c*/ ULONG ulBearerModes;
	/*0030*/ ULONG ulMaxTxRate;
	/*0034*/ ULONG ulMinTxRate;
	/*0038*/ ULONG ulMaxRxRate;
	/*003c*/ ULONG ulMinRxRate;
	/*0040*/ ULONG ulMediaModes;
	/*0044*/ ULONG ulGenerateToneModes;
	/*0048*/ ULONG ulGenerateToneMaxNumFreq;
	/*004c*/ ULONG ulGenerateDigitModes;
	/*0050*/ ULONG ulMonitorToneMaxNumFreq;
	/*0054*/ ULONG ulMonitorToneMaxNumEntries;
	/*0058*/ ULONG ulMonitorDigitModes;
	/*005c*/ ULONG ulGatherDigitsMinTimeout;
	/*0060*/ ULONG ulGatherDigitsMaxTimeout;
	/*0064*/ ULONG ulDevCapFlags;
	/*0068*/ ULONG ulMaxNumActiveCalls;
	/*006c*/ ULONG ulAnswerMode;
	/*0070*/ ULONG ulUUIAcceptSize;
	/*0074*/ ULONG ulUUIAnswerSize;
	/*0078*/ ULONG ulUUIMakeCallSize;
	/*007c*/ ULONG ulUUIDropSize;
	/*0080*/ ULONG ulUUISendUserUserInfoSize;
	/*0084*/ ULONG ulUUICallInfoSize;
	/*0088*/
};

struct NDIS_WMI_OUTPUT_INFO {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG Flags;
	/*0008*/ UCHAR SupportedRevision;
	/*000c*/ ULONG DataOffset;
	/*0010*/
};

struct NDR_ALLOC_ALL_NODES_CONTEXT;

struct NDR_POINTER_QUEUE_STATE;

struct NETWORK_NAME_LIST_DATA {
	/*0000*/ _LIST_ENTRY Link;
	/*0010*/ WCHAR NetworkName[0x101];
	/*0218*/
};

enum NET_ADDRESS_FORMAT_ {
	NET_ADDRESS_FORMAT_UNSPECIFIED = 0x0,
	NET_ADDRESS_DNS_NAME = 0x1,
	NET_ADDRESS_IPV4 = 0x2,
	NET_ADDRESS_IPV6 = 0x3
};

struct NET_ADDRESS_INFO_ {
	
	/*0000*/ NET_ADDRESS_FORMAT_ Format;
	/*0004*/ <unnamed-type-NamedAddress> NamedAddress;
	/*0004*/ sockaddr_in Ipv4Address;
	/*0004*/ sockaddr_in6 Ipv6Address;
	/*0004*/ sockaddr IpAddress;
	/*0210*/
};

enum NLM_CONNECTION_COST {
	NLM_CONNECTION_COST_UNKNOWN = 0x0,
	NLM_CONNECTION_COST_UNRESTRICTED = 0x1,
	NLM_CONNECTION_COST_FIXED = 0x2,
	NLM_CONNECTION_COST_VARIABLE = 0x4,
	NLM_CONNECTION_COST_OVERDATALIMIT = 0x10000,
	NLM_CONNECTION_COST_CONGESTED = 0x20000,
	NLM_CONNECTION_COST_ROAMING = 0x40000,
	NLM_CONNECTION_COST_APPROACHINGDATALIMIT = 0x80000
};

enum NLM_CONNECTION_PROPERTY_CHANGE {
	NLM_CONNECTION_PROPERTY_CHANGE_AUTHENTICATION = 0x1
};

enum NLM_CONNECTIVITY {
	NLM_CONNECTIVITY_DISCONNECTED = 0x0,
	NLM_CONNECTIVITY_IPV4_NOTRAFFIC = 0x1,
	NLM_CONNECTIVITY_IPV6_NOTRAFFIC = 0x2,
	NLM_CONNECTIVITY_IPV4_SUBNET = 0x10,
	NLM_CONNECTIVITY_IPV4_LOCALNETWORK = 0x20,
	NLM_CONNECTIVITY_IPV4_INTERNET = 0x40,
	NLM_CONNECTIVITY_IPV6_SUBNET = 0x100,
	NLM_CONNECTIVITY_IPV6_LOCALNETWORK = 0x200,
	NLM_CONNECTIVITY_IPV6_INTERNET = 0x400
};

struct NLM_DATAPLAN_STATUS {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ NLM_USAGE_DATA UsageData;
	/*001c*/ ULONG DataLimitInMegabytes;
	/*0020*/ ULONG InboundBandwidthInKbps;
	/*0024*/ ULONG OutboundBandwidthInKbps;
	/*0028*/ _FILETIME NextBillingCycle;
	/*0030*/ ULONG MaxTransferSizeInMegabytes;
	/*0034*/ ULONG Reserved;
	/*0038*/
};

enum NLM_DOMAIN_TYPE {
	NLM_DOMAIN_TYPE_NON_DOMAIN_NETWORK = 0x0,
	NLM_DOMAIN_TYPE_DOMAIN_NETWORK = 0x1,
	NLM_DOMAIN_TYPE_DOMAIN_AUTHENTICATED = 0x2
};

enum NLM_ENUM_NETWORK {
	NLM_ENUM_NETWORK_CONNECTED = 0x1,
	NLM_ENUM_NETWORK_DISCONNECTED = 0x2,
	NLM_ENUM_NETWORK_ALL = 0x3
};

enum NLM_INTERNET_CONNECTIVITY {
	NLM_INTERNET_CONNECTIVITY_WEBHIJACK = 0x1,
	NLM_INTERNET_CONNECTIVITY_PROXIED = 0x2,
	NLM_INTERNET_CONNECTIVITY_CORPORATE = 0x4
};

enum NLM_NETWORK_CATEGORY {
	NLM_NETWORK_CATEGORY_PUBLIC = 0x0,
	NLM_NETWORK_CATEGORY_PRIVATE = 0x1,
	NLM_NETWORK_CATEGORY_DOMAIN_AUTHENTICATED = 0x2
};

enum NLM_NETWORK_CLASS {
	NLM_NETWORK_IDENTIFYING = 0x1,
	NLM_NETWORK_IDENTIFIED = 0x2,
	NLM_NETWORK_UNIDENTIFIED = 0x3
};

enum NLM_NETWORK_PROPERTY_CHANGE {
	NLM_NETWORK_PROPERTY_CHANGE_CONNECTION = 0x1,
	NLM_NETWORK_PROPERTY_CHANGE_DESCRIPTION = 0x2,
	NLM_NETWORK_PROPERTY_CHANGE_NAME = 0x4,
	NLM_NETWORK_PROPERTY_CHANGE_ICON = 0x8,
	NLM_NETWORK_PROPERTY_CHANGE_CATEGORY_VALUE = 0x10
};

struct NLM_SIMULATED_PROFILE_INFO {
	/*0000*/ WCHAR ProfileName[0x100];
	/*0200*/ NLM_CONNECTION_COST cost;
	/*0204*/ ULONG UsageInMegabytes;
	/*0208*/ ULONG DataLimitInMegabytes;
	/*020c*/
};

struct NLM_SOCKADDR {
	/*0000*/ UCHAR data[0x80];
	/*0080*/
};

struct NLM_USAGE_DATA {
	/*0000*/ ULONG UsageInMegabytes;
	/*0004*/ _FILETIME LastSyncTime;
	/*000c*/
};

enum NL_ADDRESS_TYPE {
	NlatUnspecified = 0x0,
	NlatUnicast = 0x1,
	NlatAnycast = 0x2,
	NlatMulticast = 0x3,
	NlatBroadcast = 0x4,
	NlatInvalid = 0x5
};

enum NL_COMPARTMENT_FORWARDING {
	ForwardingEnabled = 0x0,
	ForwardingDisabled = 0x1,
	ForwardingPartiallyEnabled = 0x2,
	ForwardingUnchanged = 0xffffffff
};

enum NL_DAD_STATE {
	NldsInvalid = 0x0,
	NldsTentative = 0x1,
	NldsDuplicate = 0x2,
	NldsDeprecated = 0x3,
	NldsPreferred = 0x4,
	IpDadStateInvalid = 0x0,
	IpDadStateTentative = 0x1,
	IpDadStateDuplicate = 0x2,
	IpDadStateDeprecated = 0x3,
	IpDadStatePreferred = 0x4
};

enum NL_LOOPBACK_EXECUTION_MODE {
	NlLoopbackModeInline = 0x0,
	NlLoopbackModeWorker = 0x1,
	NlLoopbackModeAdaptive = 0x2,
	NlLoopbackModeUnchanged = 0xffffffff
};

enum NL_MLD_LEVEL {
	MldLevelNone = 0x0,
	MldLevelSendOnly = 0x1,
	MldLevelAll = 0x2,
	MldLevelUnchanged = 0xffffffff
};

enum NL_MLD_VERSION {
	MldVersion1 = 0x2,
	MldVersion2 = 0x3,
	MldVersion3 = 0x4,
	MldVersionUnchanged = 0xffffffff
};

enum NL_OBJECT_TYPE {
	NlBestRouteObject = 0x0,
	NlCompartmentForwardingObject = 0x1,
	NlCompartmentObject = 0x2,
	NlControlProtocolObject = 0x3,
	NlEchoRequestObject = 0x4,
	NlEchoSequenceRequestObject = 0x5,
	NlGlobalObject = 0x6,
	NlInterfaceObject = 0x7,
	NlLocalAnycastAddressObject = 0x8,
	NlLocalMulticastAddressObject = 0x9,
	NlLocalUnicastAddressObject = 0xa,
	NlNeighborObject = 0xb,
	NlPathObject = 0xc,
	NlPotentialRouterObject = 0xd,
	NlPrefixPolicyObject = 0xe,
	NlProxyNeighborObject = 0xf,
	NlRouteObject = 0x10,
	NlSitePrefixObject = 0x11,
	NlSubInterfaceObject = 0x12,
	NlWakeUpPatternObject = 0x13,
	NlResolveNeighborObject = 0x14,
	NlSortAddressesObject = 0x15,
	NlMfeObject = 0x16,
	NlMfeNotifyObject = 0x17,
	NlInterfaceHopObject = 0x18,
	NlInterfaceUnprivilegedObject = 0x19,
	NlTunnelPhysicalInterfaceObject = 0x1a,
	NlFeatureFallbackObject = 0x1b,
	NlLocalityDataObject = 0x1c,
	NlLocalityPrivateObject = 0x1d,
	NlLocalBottleneckObject = 0x1e,
	NlTimerObject = 0x1f,
	NlDisconnectInterface = 0x20,
	NlRouterInformationObject = 0x21,
	NlMaximumObject = 0x22
};

enum NL_PREFIX_ORIGIN {
	IpPrefixOriginOther = 0x0,
	IpPrefixOriginManual = 0x1,
	IpPrefixOriginWellKnown = 0x2,
	IpPrefixOriginDhcp = 0x3,
	IpPrefixOriginRouterAdvertisement = 0x4,
	IpPrefixOriginUnchanged = 0x10
};

enum NL_ROUTE_PROTOCOL {
	RouteProtocolOther = 0x1,
	RouteProtocolLocal = 0x2,
	RouteProtocolNetMgmt = 0x3,
	RouteProtocolIcmp = 0x4,
	RouteProtocolEgp = 0x5,
	RouteProtocolGgp = 0x6,
	RouteProtocolHello = 0x7,
	RouteProtocolRip = 0x8,
	RouteProtocolIsIs = 0x9,
	RouteProtocolEsIs = 0xa,
	RouteProtocolCisco = 0xb,
	RouteProtocolBbn = 0xc,
	RouteProtocolOspf = 0xd,
	RouteProtocolBgp = 0xe,
	RouteProtocolIdpr = 0xf,
	RouteProtocolEigrp = 0x10,
	RouteProtocolDvmrp = 0x11,
	RouteProtocolRpl = 0x12,
	RouteProtocolDhcp = 0x13,
	MIB_IPPROTO_OTHER = 0x1,
	PROTO_IP_OTHER = 0x1,
	MIB_IPPROTO_LOCAL = 0x2,
	PROTO_IP_LOCAL = 0x2,
	MIB_IPPROTO_NETMGMT = 0x3,
	PROTO_IP_NETMGMT = 0x3,
	MIB_IPPROTO_ICMP = 0x4,
	PROTO_IP_ICMP = 0x4,
	MIB_IPPROTO_EGP = 0x5,
	PROTO_IP_EGP = 0x5,
	MIB_IPPROTO_GGP = 0x6,
	PROTO_IP_GGP = 0x6,
	MIB_IPPROTO_HELLO = 0x7,
	PROTO_IP_HELLO = 0x7,
	MIB_IPPROTO_RIP = 0x8,
	PROTO_IP_RIP = 0x8,
	MIB_IPPROTO_IS_IS = 0x9,
	PROTO_IP_IS_IS = 0x9,
	MIB_IPPROTO_ES_IS = 0xa,
	PROTO_IP_ES_IS = 0xa,
	MIB_IPPROTO_CISCO = 0xb,
	PROTO_IP_CISCO = 0xb,
	MIB_IPPROTO_BBN = 0xc,
	PROTO_IP_BBN = 0xc,
	MIB_IPPROTO_OSPF = 0xd,
	PROTO_IP_OSPF = 0xd,
	MIB_IPPROTO_BGP = 0xe,
	PROTO_IP_BGP = 0xe,
	MIB_IPPROTO_IDPR = 0xf,
	PROTO_IP_IDPR = 0xf,
	MIB_IPPROTO_EIGRP = 0x10,
	PROTO_IP_EIGRP = 0x10,
	MIB_IPPROTO_DVMRP = 0x11,
	PROTO_IP_DVMRP = 0x11,
	MIB_IPPROTO_RPL = 0x12,
	PROTO_IP_RPL = 0x12,
	MIB_IPPROTO_DHCP = 0x13,
	PROTO_IP_DHCP = 0x13,
	MIB_IPPROTO_NT_AUTOSTATIC = 0x2712,
	PROTO_IP_NT_AUTOSTATIC = 0x2712,
	MIB_IPPROTO_NT_STATIC = 0x2716,
	PROTO_IP_NT_STATIC = 0x2716,
	MIB_IPPROTO_NT_STATIC_NON_DOD = 0x2717,
	PROTO_IP_NT_STATIC_NON_DOD = 0x2717
};

enum NL_SOURCE_ROUTING_BEHAVIOR {
	SourceRoutingForward = 0x0,
	SourceRoutingDontForward = 0x1,
	SourceRoutingDrop = 0x2,
	SourceRoutingUnchanged = 0xffffffff
};

enum NL_SUFFIX_ORIGIN {
	NlsoOther = 0x0,
	NlsoManual = 0x1,
	NlsoWellKnown = 0x2,
	NlsoDhcp = 0x3,
	NlsoLinkLayerAddress = 0x4,
	NlsoRandom = 0x5,
	IpSuffixOriginOther = 0x0,
	IpSuffixOriginManual = 0x1,
	IpSuffixOriginWellKnown = 0x2,
	IpSuffixOriginDhcp = 0x3,
	IpSuffixOriginLinkLayerAddress = 0x4,
	IpSuffixOriginRandom = 0x5,
	IpSuffixOriginUnchanged = 0x10
};

enum NL_TEMPORARY_ADDRESS_MODE {
	UseTemporaryNo = 0x0,
	UseTemporaryYes = 0x1,
	UseTemporaryAlways = 0x2,
	UseTemporaryCounter = 0x3
};

struct NMCBEDRAGBEGINA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItemid;
	/*001c*/ CHAR szText[0x104];
	/*0120*/
};

struct NMCBEDRAGBEGINW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItemid;
	/*001c*/ WCHAR szText[0x104];
	/*0228*/
};

struct NMCBEENDEDITA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT fChanged;
	/*001c*/ INT iNewSelection;
	/*0020*/ CHAR szText[0x104];
	/*0124*/ INT iWhy;
	/*0128*/
};

struct NMCBEENDEDITW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT fChanged;
	/*001c*/ INT iNewSelection;
	/*0020*/ WCHAR szText[0x104];
	/*0228*/ INT iWhy;
	/*0230*/
};

struct NMCOMBOBOXEXA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagCOMBOBOXEXITEMA ceItem;
	/*0050*/
};

struct NMCOMBOBOXEXW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagCOMBOBOXEXITEMW ceItem;
	/*0050*/
};

struct NMPGCALCSIZE {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwFlag;
	/*001c*/ INT iWidth;
	/*0020*/ INT iHeight;
	/*0028*/
};

struct NMPGSCROLL {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ USHORT fwKeys;
	/*001a*/ tagRECT rcParent;
	/*002a*/ INT iDir;
	/*002e*/ INT iXpos;
	/*0032*/ INT iYpos;
	/*0036*/ INT iScroll;
	/*003a*/
};

struct NMSEARCHWEB {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ EC_SEARCHWEB_ENTRYPOINT entrypoint;
	/*001c*/ INT hasQueryText;
	/*0020*/ INT invokeSucceeded;
	/*0028*/
};

struct NMTBDISPINFOA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwMask;
	/*001c*/ INT idCommand;
	/*0020*/ ULONGLONG lParam;
	/*0028*/ INT iImage;
	/*0030*/ CHAR * pszText;
	/*0038*/ INT cchText;
	/*0040*/
};

struct NMTBDISPINFOW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwMask;
	/*001c*/ INT idCommand;
	/*0020*/ ULONGLONG lParam;
	/*0028*/ INT iImage;
	/*0030*/ WCHAR * pszText;
	/*0038*/ INT cchText;
	/*0040*/
};

enum NOTIFY_IMMERSIVE_APPLICATION_WINDOWS_DELIVERY_TYPE {
	NIAWDT_POST = 0x0,
	NIAWDT_SENDNOTIFY = 0x1
};

enum NOTIFY_IMMERSIVE_APPLICATION_WINDOWS_OPTION {
	NIAWO_ALL = 0x0,
	NIAWO_SKIP_SYSTEM_WINDOWS = 0x1,
	NIAWO_CURRENT_WINDOW_ONLY = 0x2,
	NIAWO_CURRENT_WINDOW_ONLY_IFF_APP = 0x3
};

struct NOTIFY_USER_POWER_SETTING {
	/*0000*/ _GUID Guid;
	/*0010*/
};

enum NP_CONNECTION_COST {
	NP_CONNECTION_COST_UNKNOWN = 0x0,
	NP_CONNECTION_COST_UNRESTRICTED = 0x1,
	NP_CONNECTION_COST_FIXED = 0x2,
	NP_CONNECTION_COST_VARIABLE = 0x4,
	NP_CONNECTION_COST_OVERDATALIMIT = 0x10000,
	NP_CONNECTION_COST_CONGESTED = 0x20000,
	NP_CONNECTION_COST_ROAMING = 0x40000,
	NP_CONNECTION_COST_APPROACHINGDATALIMIT = 0x80000
};

struct NP_DATAPLAN_STATUS {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ NP_USAGE_DATA UsageData;
	/*001c*/ ULONG DataLimitInMegabytes;
	/*0020*/ ULONG InboundBandwidthInKbps;
	/*0024*/ ULONG OutboundBandwidthInKbps;
	/*0028*/ _FILETIME NextBillingCycle;
	/*0030*/ ULONG MaxTransferSizeInMegabytes;
	/*0034*/ ULONG Reserved;
	/*0038*/
};

struct NP_SIMULATED_PROFILE_INFO {
	/*0000*/ WCHAR ProfileName[0x100];
	/*0200*/ NP_CONNECTION_COST cost;
	/*0204*/ ULONG UsageInMegabytes;
	/*0208*/ ULONG DataLimitInMegabytes;
	/*020c*/
};

struct NP_USAGE_DATA {
	/*0000*/ ULONG UsageInMegabytes;
	/*0004*/ _FILETIME LastSyncTime;
	/*000c*/
};

enum NSTCFOLDERCAPABILITIES {
	NSTCFC_NONE = 0x0,
	NSTCFC_PINNEDITEMFILTERING = 0x1,
	NSTCFC_DELAY_REGISTER_NOTIFY = 0x2
};

enum NSTCGNI {
	NSTCGNI_NEXT = 0x0,
	NSTCGNI_NEXTVISIBLE = 0x1,
	NSTCGNI_PREV = 0x2,
	NSTCGNI_PREVVISIBLE = 0x3,
	NSTCGNI_PARENT = 0x4,
	NSTCGNI_CHILD = 0x5,
	NSTCGNI_FIRSTVISIBLE = 0x6,
	NSTCGNI_LASTVISIBLE = 0x7
};

struct NTFS_EXTENDED_VOLUME_DATA {
	/*0000*/ ULONG ByteCount;
	/*0004*/ USHORT MajorVersion;
	/*0006*/ USHORT MinorVersion;
	/*0008*/ ULONG BytesPerPhysicalSector;
	/*000c*/ USHORT LfsMajorVersion;
	/*000e*/ USHORT LfsMinorVersion;
	/*0010*/ ULONG MaxDeviceTrimExtentCount;
	/*0014*/ ULONG MaxDeviceTrimByteCount;
	/*0018*/ ULONG MaxVolumeTrimExtentCount;
	/*001c*/ ULONG MaxVolumeTrimByteCount;
	/*0020*/
};

struct NTFS_FILE_RECORD_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER FileReferenceNumber;
	/*0008*/
};

struct NTFS_FILE_RECORD_OUTPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER FileReferenceNumber;
	/*0008*/ ULONG FileRecordLength;
	/*000c*/ UCHAR FileRecordBuffer[0x1];
	/*0010*/
};

struct NTFS_VOLUME_DATA_BUFFER {
	/*0000*/ _LARGE_INTEGER VolumeSerialNumber;
	/*0008*/ _LARGE_INTEGER NumberSectors;
	/*0010*/ _LARGE_INTEGER TotalClusters;
	/*0018*/ _LARGE_INTEGER FreeClusters;
	/*0020*/ _LARGE_INTEGER TotalReserved;
	/*0028*/ ULONG BytesPerSector;
	/*002c*/ ULONG BytesPerCluster;
	/*0030*/ ULONG BytesPerFileRecordSegment;
	/*0034*/ ULONG ClustersPerFileRecordSegment;
	/*0038*/ _LARGE_INTEGER MftValidDataLength;
	/*0040*/ _LARGE_INTEGER MftStartLcn;
	/*0048*/ _LARGE_INTEGER Mft2StartLcn;
	/*0050*/ _LARGE_INTEGER MftZoneStart;
	/*0058*/ _LARGE_INTEGER MftZoneEnd;
	/*0060*/
};

struct NUMPARSE {
	/*0000*/ INT cDig;
	/*0004*/ ULONG dwInFlags;
	/*0008*/ ULONG dwOutFlags;
	/*000c*/ INT cchUsed;
	/*0010*/ INT nBaseShift;
	/*0014*/ INT nPwr10;
	/*0018*/
};

enum NWMF {
	NWMF_UNLOADING = 0x1,
	NWMF_USERINITED = 0x2,
	NWMF_FIRST = 0x4,
	NWMF_OVERRIDEKEY = 0x8,
	NWMF_SHOWHELP = 0x10,
	NWMF_HTMLDIALOG = 0x20,
	NWMF_FROMDIALOGCHILD = 0x40,
	NWMF_USERREQUESTED = 0x80,
	NWMF_USERALLOWED = 0x100,
	NWMF_FORCEWINDOW = 0x10000,
	NWMF_FORCETAB = 0x20000,
	NWMF_SUGGESTWINDOW = 0x40000,
	NWMF_SUGGESTTAB = 0x80000,
	NWMF_INACTIVETAB = 0x100000
};

class NetworkItemImpl : public RuntimeClass<Windows::Networking::Connectivity::INetworkItem,FtmBase> {
public:
	static WCHAR const * InternalGetRuntimeClassName();
	static TrustLevel InternalGetTrustLevel();
	/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
	/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
	/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
	/*    */ virtual ULONG Release();
	/*    */ virtual ULONG AddRef();
	/*    */ virtual HRESULT get_NetworkId( _GUID * );
	/*    */ virtual HRESULT GetNetworkTypes( NetworkTypes * );
	HRESULT RuntimeClassInitialize( _MIB_IF_ROW2 * );
	HRESULT RuntimeClassInitialize( INetwork * );
	static HRESULT CreateNetworkItem( UINT , INetworkItem * * );
private:
	HRESULT GetNetworkTypesForIPVersion( _NPI_MODULEID const * , NetworkTypes * );
	/*0040*/ _GUID id;
	/*0050*/ GitPtrSupportsAgile<INetwork> network;
	/*0058*/ _MIB_IF_ROW2 ifRow;
public:
	void NetworkItemImpl();
	/*    */ virtual void ~NetworkItemImpl();
	void __local_vftable_ctor_closure();
	/*0040*/ virtual void * __vecDelDtor( UINT );
	/*05a0*/
};

enum OCT_BANNED_API {
	OCT_BANNED_FIRST = 0x0,
	OCT_BANNED_GetWindowRect = 0x0,
	OCT_BANNED_ClientToScreen = 0x1,
	OCT_BANNED_ScreenToClient = 0x2,
	OCT_BANNED_MapWindowPoints = 0x3,
	OCT_BANNED_GetDC = 0x4,
	OCT_BANNED_GetDCEx = 0x5,
	OCT_BANNED_EnumDisplayMonitors = 0x6,
	OCT_BANNED_GetSystemMetrics = 0x7,
	OCT_BANNED_MonitorFromWindow = 0x8,
	OCT_BANNED_MonitorFromPoint = 0x9,
	OCT_BANNED_MonitorFromRect = 0xa,
	OCT_BANNED_GetMonitorInfoW = 0xb,
	OCT_BANNED_GetDpiForMonitorInternal = 0xc,
	OCT_BANNED_PhysicalToLogicalPoint = 0xd,
	OCT_BANNED_LogicalToPhysicalPoint = 0xe,
	OCT_BANNED_GetCurrentDpiInfo = 0xf,
	OCT_BANNED_ShellScaling_Window = 0x10,
	OCT_BANNED_ShellScaling_Monitor = 0x11,
	OCT_BANNED_ShellScaling_Device = 0x12,
	OCT_BANNED_LAST = 0x13
};

enum OFFER_PRIORITY {
	VmOfferPriorityVeryLow = 0x1,
	VmOfferPriorityLow = 0x2,
	VmOfferPriorityBelowNormal = 0x3,
	VmOfferPriorityNormal = 0x4
};

struct OFFSETINSTANCEDATAANDLENGTH {
	/*0000*/ ULONG OffsetInstanceData;
	/*0004*/ ULONG LengthInstanceData;
	/*0008*/
};

enum OLE_TRISTATE {
	triUnchecked = 0x0,
	triChecked = 0x1,
	triGray = 0x2
};

enum OPERATION_INTERRUPT_RESPONSE_SINGLE {
	OIRS_ELEVATE = 0x1,
	OIRS_DELETE = 0x2,
	OIRS_SKIP = 0x3,
	OIRS_CANCEL = 0x4,
	OIRS_RETRY = 0x5,
	OIRS_YES = 0x6,
	OIRS_OK = 0x7,
	OIRS_NO = 0x8,
	OIRS_KEEPSOURCE = 0x9,
	OIRS_KEEPDEST = 0xa,
	OIRS_KEEPBOTH = 0xb,
	OIRS_KEEPASWORK = 0xc,
	OIRS_KEEPASPERSONAL = 0xd
};

enum OPERATION_MODE {
	OM_PREPARING = 0x1,
	OM_RUNNING = 0x2,
	OM_INDETERMINATE = 0x3,
	OM_INTERRUPTED = 0x4
};

enum OPERATION_TYPE {
	OT_NONE = 0x0,
	OT_COPY = 0x1,
	OT_MOVE = 0x2,
	OT_RECYCLE = 0x3,
	OT_DELETE = 0x4,
	OT_RENAME = 0x5,
	OT_APPLYPROPS = 0x6,
	OT_DOWNLOAD = 0x7,
	OT_MOVE_AS_COPY_DELETE = 0x8
};

enum ORIENTATION_PREFERENCE {
	ORIENTATION_PREFERENCE_NONE = 0x0,
	ORIENTATION_PREFERENCE_LANDSCAPE = 0x1,
	ORIENTATION_PREFERENCE_PORTRAIT = 0x2,
	ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
	ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 0x8
};

enum PACKAGE_EXECUTION_STATE {
	PES_UNKNOWN = 0x0,
	PES_RUNNING = 0x1,
	PES_SUSPENDING = 0x2,
	PES_SUSPENDED = 0x3,
	PES_TERMINATED = 0x4
};

struct PACKAGE_ID {
	/*0000*/ UINT reserved;
	/*0004*/ UINT processorArchitecture;
	/*0008*/ PACKAGE_VERSION version;
	/*0010*/ WCHAR * name;
	/*0018*/ WCHAR * publisher;
	/*0020*/ WCHAR * resourceId;
	/*0028*/ WCHAR * publisherId;
	/*0030*/
};

struct PACKAGE_IDA {
	/*0000*/ UINT reserved;
	/*0004*/ UINT processorArchitecture;
	/*0008*/ PACKAGE_VERSION version;
	/*0010*/ CHAR * name;
	/*0018*/ CHAR * publisher;
	/*0020*/ CHAR * resourceId;
	/*0028*/ CHAR * publisherId;
	/*0030*/
};

struct PACKAGE_INFO {
	/*0000*/ UINT reserved;
	/*0004*/ UINT flags;
	/*0008*/ WCHAR * path;
	/*0010*/ WCHAR * packageFullName;
	/*0018*/ WCHAR * packageFamilyName;
	/*0020*/ PACKAGE_ID packageId;
	/*0050*/
};

struct PACKAGE_INFO_ALIAS {
	/*0000*/ WCHAR * packageFullName;
	/*0008*/ WCHAR * packageNameAlias;
	/*0010*/
};

struct PACKAGE_VERSION {
	/*0000*/ ULONGLONG Version;
	/*0000*/ USHORT Revision;
	/*0002*/ USHORT Build;
	/*0004*/ USHORT Minor;
	/*0006*/ USHORT Major;
	/*0008*/
};

enum PATHCCH_OPTIONS {
	PATHCCH_NONE = 0x0,
	PATHCCH_ALLOW_LONG_PATHS = 0x1,
	PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS = 0x2,
	PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS = 0x4,
	PATHCCH_DO_NOT_NORMALIZE_SEGMENTS = 0x8,
	PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH = 0x10,
	PATHCCH_ENSURE_TRAILING_SLASH = 0x20
};

struct PBRANGE {
	/*0000*/ INT iLow;
	/*0004*/ INT iHigh;
	/*0008*/
};

enum PDOPSTATUS {
	PDOPS_RUNNING = 0x1,
	PDOPS_PAUSED = 0x2,
	PDOPS_CANCELLED = 0x3,
	PDOPS_STOPPED = 0x4,
	PDOPS_ERRORS = 0x5
};

enum PDU_SESSION_TYPE {
	PDU_SESSION_TYPE_UNSPECIFIED = 0x0,
	PDU_SESSION_TYPE_IPV4 = 0x1,
	PDU_SESSION_TYPE_IPV6 = 0x2,
	PDU_SESSION_TYPE_IPV4V6 = 0x3,
	PDU_SESSION_TYPE_UNSTRUCTURED = 0x4,
	PDU_SESSION_TYPE_ETHERNET = 0x5,
	PDU_SESSION_TYPE_IPXLAT = 0x6
};

enum PICKER_TYPE {
	PICKER_TYPE_OPEN = 0x0,
	PICKER_TYPE_SAVE = 0x1,
	PICKER_TYPE_CONTACTS = 0x2,
	PICKER_TYPE_FILE_UPDATE = 0x3
};

enum PIDMSI_STATUS_VALUE {
	PIDMSI_STATUS_NORMAL = 0x0,
	PIDMSI_STATUS_NEW = 0x1,
	PIDMSI_STATUS_PRELIM = 0x2,
	PIDMSI_STATUS_DRAFT = 0x3,
	PIDMSI_STATUS_INPROGRESS = 0x4,
	PIDMSI_STATUS_EDIT = 0x5,
	PIDMSI_STATUS_REVIEW = 0x6,
	PIDMSI_STATUS_PROOF = 0x7,
	PIDMSI_STATUS_FINAL = 0x8,
	PIDMSI_STATUS_OTHER = 0x7fff
};

enum PKA_FLAGS {
	PKA_SET = 0x0,
	PKA_APPEND = 0x1,
	PKA_DELETE = 0x2
};

enum PLACEHOLDER_STATES {
	PS_NONE = 0x0,
	PS_MARKED_FOR_OFFLINE_AVAILABILITY = 0x1,
	PS_FULL_PRIMARY_STREAM_AVAILABLE = 0x2,
	PS_CREATE_FILE_ACCESSIBLE = 0x4,
	PS_CLOUDFILE_PLACEHOLDER = 0x8,
	PS_DEFAULT = 0x7,
	PS_ALL = 0xf
};

enum POINTER_FEEDBACK_MODE {
	POINTER_FEEDBACK_DEFAULT = 0x1,
	POINTER_FEEDBACK_INDIRECT = 0x2,
	POINTER_FEEDBACK_NONE = 0x3
};

struct POWERBROADCAST_SETTING {
	/*0000*/ _GUID PowerSetting;
	/*0010*/ ULONG DataLength;
	/*0014*/ UCHAR Data[0x1];
	/*0018*/
};

enum POWER_ACTION {
	PowerActionNone = 0x0,
	PowerActionReserved = 0x1,
	PowerActionSleep = 0x2,
	PowerActionHibernate = 0x3,
	PowerActionShutdown = 0x4,
	PowerActionShutdownReset = 0x5,
	PowerActionShutdownOff = 0x6,
	PowerActionWarmEject = 0x7,
	PowerActionDisplayOff = 0x8
};

struct POWER_ACTION_POLICY {
	/*0000*/ POWER_ACTION Action;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG EventCode;
	/*000c*/
};

enum POWER_INFORMATION_LEVEL {
	SystemPowerPolicyAc = 0x0,
	SystemPowerPolicyDc = 0x1,
	VerifySystemPolicyAc = 0x2,
	VerifySystemPolicyDc = 0x3,
	SystemPowerCapabilities = 0x4,
	SystemBatteryState = 0x5,
	SystemPowerStateHandler = 0x6,
	ProcessorStateHandler = 0x7,
	SystemPowerPolicyCurrent = 0x8,
	AdministratorPowerPolicy = 0x9,
	SystemReserveHiberFile = 0xa,
	ProcessorInformation = 0xb,
	SystemPowerInformation = 0xc,
	ProcessorStateHandler2 = 0xd,
	LastWakeTime = 0xe,
	LastSleepTime = 0xf,
	SystemExecutionState = 0x10,
	SystemPowerStateNotifyHandler = 0x11,
	ProcessorPowerPolicyAc = 0x12,
	ProcessorPowerPolicyDc = 0x13,
	VerifyProcessorPowerPolicyAc = 0x14,
	VerifyProcessorPowerPolicyDc = 0x15,
	ProcessorPowerPolicyCurrent = 0x16,
	SystemPowerStateLogging = 0x17,
	SystemPowerLoggingEntry = 0x18,
	SetPowerSettingValue = 0x19,
	NotifyUserPowerSetting = 0x1a,
	PowerInformationLevelUnused0 = 0x1b,
	SystemMonitorHiberBootPowerOff = 0x1c,
	SystemVideoState = 0x1d,
	TraceApplicationPowerMessage = 0x1e,
	TraceApplicationPowerMessageEnd = 0x1f,
	ProcessorPerfStates = 0x20,
	ProcessorIdleStates = 0x21,
	ProcessorCap = 0x22,
	SystemWakeSource = 0x23,
	SystemHiberFileInformation = 0x24,
	TraceServicePowerMessage = 0x25,
	ProcessorLoad = 0x26,
	PowerShutdownNotification = 0x27,
	MonitorCapabilities = 0x28,
	SessionPowerInit = 0x29,
	SessionDisplayState = 0x2a,
	PowerRequestCreate = 0x2b,
	PowerRequestAction = 0x2c,
	GetPowerRequestList = 0x2d,
	ProcessorInformationEx = 0x2e,
	NotifyUserModeLegacyPowerEvent = 0x2f,
	GroupPark = 0x30,
	ProcessorIdleDomains = 0x31,
	WakeTimerList = 0x32,
	SystemHiberFileSize = 0x33,
	ProcessorIdleStatesHv = 0x34,
	ProcessorPerfStatesHv = 0x35,
	ProcessorPerfCapHv = 0x36,
	ProcessorSetIdle = 0x37,
	LogicalProcessorIdling = 0x38,
	UserPresence = 0x39,
	PowerSettingNotificationName = 0x3a,
	GetPowerSettingValue = 0x3b,
	IdleResiliency = 0x3c,
	SessionRITState = 0x3d,
	SessionConnectNotification = 0x3e,
	SessionPowerCleanup = 0x3f,
	SessionLockState = 0x40,
	SystemHiberbootState = 0x41,
	PlatformInformation = 0x42,
	PdcInvocation = 0x43,
	MonitorInvocation = 0x44,
	FirmwareTableInformationRegistered = 0x45,
	SetShutdownSelectedTime = 0x46,
	SuspendResumeInvocation = 0x47,
	PlmPowerRequestCreate = 0x48,
	ScreenOff = 0x49,
	CsDeviceNotification = 0x4a,
	PlatformRole = 0x4b,
	LastResumePerformance = 0x4c,
	DisplayBurst = 0x4d,
	ExitLatencySamplingPercentage = 0x4e,
	RegisterSpmPowerSettings = 0x4f,
	PlatformIdleStates = 0x50,
	ProcessorIdleVeto = 0x51,
	PlatformIdleVeto = 0x52,
	SystemBatteryStatePrecise = 0x53,
	ThermalEvent = 0x54,
	PowerRequestActionInternal = 0x55,
	BatteryDeviceState = 0x56,
	PowerInformationInternal = 0x57,
	ThermalStandby = 0x58,
	SystemHiberFileType = 0x59,
	PhysicalPowerButtonPress = 0x5a,
	QueryPotentialDripsConstraint = 0x5b,
	EnergyTrackerCreate = 0x5c,
	EnergyTrackerQuery = 0x5d,
	UpdateBlackBoxRecorder = 0x5e,
	SessionAllowExternalDmaDevices = 0x5f,
	PowerInformationLevelMaximum = 0x60
};

enum POWER_MONITOR_REQUEST_REASON {
	MonitorRequestReasonUnknown = 0x0,
	MonitorRequestReasonPowerButton = 0x1,
	MonitorRequestReasonRemoteConnection = 0x2,
	MonitorRequestReasonScMonitorpower = 0x3,
	MonitorRequestReasonUserInput = 0x4,
	MonitorRequestReasonAcDcDisplayBurst = 0x5,
	MonitorRequestReasonUserDisplayBurst = 0x6,
	MonitorRequestReasonPoSetSystemState = 0x7,
	MonitorRequestReasonSetThreadExecutionState = 0x8,
	MonitorRequestReasonFullWake = 0x9,
	MonitorRequestReasonSessionUnlock = 0xa,
	MonitorRequestReasonScreenOffRequest = 0xb,
	MonitorRequestReasonIdleTimeout = 0xc,
	MonitorRequestReasonPolicyChange = 0xd,
	MonitorRequestReasonSleepButton = 0xe,
	MonitorRequestReasonLid = 0xf,
	MonitorRequestReasonBatteryCountChange = 0x10,
	MonitorRequestReasonGracePeriod = 0x11,
	MonitorRequestReasonPnP = 0x12,
	MonitorRequestReasonDP = 0x13,
	MonitorRequestReasonSxTransition = 0x14,
	MonitorRequestReasonSystemIdle = 0x15,
	MonitorRequestReasonNearProximity = 0x16,
	MonitorRequestReasonThermalStandby = 0x17,
	MonitorRequestReasonResumePdc = 0x18,
	MonitorRequestReasonResumeS4 = 0x19,
	MonitorRequestReasonTerminal = 0x1a,
	MonitorRequestReasonPdcSignal = 0x1b,
	MonitorRequestReasonAcDcDisplayBurstSuppressed = 0x1c,
	MonitorRequestReasonSystemStateEntered = 0x1d,
	MonitorRequestReasonWinrt = 0x1e,
	MonitorRequestReasonUserInputKeyboard = 0x1f,
	MonitorRequestReasonUserInputMouse = 0x20,
	MonitorRequestReasonUserInputTouch = 0x21,
	MonitorRequestReasonUserInputPen = 0x22,
	MonitorRequestReasonUserInputAccelerometer = 0x23,
	MonitorRequestReasonUserInputHid = 0x24,
	MonitorRequestReasonUserInputPoUserPresent = 0x25,
	MonitorRequestReasonUserInputSessionSwitch = 0x26,
	MonitorRequestReasonUserInputInitialization = 0x27,
	MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 0x28,
	MonitorRequestReasonPdcSignalWindowsMobileShell = 0x29,
	MonitorRequestReasonPdcSignalHeyCortana = 0x2a,
	MonitorRequestReasonPdcSignalHolographicShell = 0x2b,
	MonitorRequestReasonPdcSignalFingerprint = 0x2c,
	MonitorRequestReasonDirectedDrips = 0x2d,
	MonitorRequestReasonDim = 0x2e,
	MonitorRequestReasonBuiltinPanel = 0x2f,
	MonitorRequestReasonDisplayRequiredUnDim = 0x30,
	MonitorRequestReasonBatteryCountChangeSuppressed = 0x31,
	MonitorRequestReasonResumeModernStandby = 0x32,
	MonitorRequestReasonMax = 0x33
};

enum POWER_STATE_DISABLED_TYPE {
	PoDisabledStateSleeping1 = 0x0,
	PoDisabledStateSleeping2 = 0x1,
	PoDisabledStateSleeping3 = 0x2,
	PoDisabledStateSleeping4 = 0x3,
	PoDisabledStateSleeping0Idle = 0x4,
	PoDisabledStateReserved5 = 0x5,
	PoDisabledStateSleeping4Firmware = 0x6,
	PoDisabledStateMaximum = 0x7
};

struct POWER_STATE_HANDLER {
	/*0000*/ POWER_STATE_HANDLER_TYPE Type;
	/*0004*/ UCHAR RtcWake;
	/*0005*/ UCHAR Spare[0x3];
	/*0008*/ LONG (* Handler)( void * , LONG (* )( void * ), void * , LONG , LONG volatile * );
	/*0010*/ void * Context;
	/*0018*/
};

enum POWER_STATE_HANDLER_TYPE {
	PowerStateSleeping1 = 0x0,
	PowerStateSleeping2 = 0x1,
	PowerStateSleeping3 = 0x2,
	PowerStateSleeping4 = 0x3,
	PowerStateShutdownOff = 0x4,
	PowerStateShutdownReset = 0x5,
	PowerStateSleeping4Firmware = 0x6,
	PowerStateMaximum = 0x7
};

struct POWER_STATE_NOTIFY_HANDLER {
	/*0000*/ LONG (* Handler)( POWER_STATE_HANDLER_TYPE , void * , UCHAR );
	/*0008*/ void * Context;
	/*0010*/
};

enum POWER_USER_PRESENCE_TYPE {
	UserNotPresent = 0x0,
	UserPresent = 0x1,
	UserUnknown = 0xff
};

enum PO_FIXED_WAKE_SOURCE_TYPE {
	FixedWakeSourcePowerButton = 0x0,
	FixedWakeSourceSleepButton = 0x1,
	FixedWakeSourceRtc = 0x2,
	FixedWakeSourceDozeToHibernate = 0x3
};

enum PO_INTERNAL_WAKE_SOURCE_TYPE {
	InternalWakeSourceDozeToHibernate = 0x0,
	InternalWakeSourcePredictedUserPresence = 0x1,
	InternalWakeSourceTimerOverride = 0x2
};

enum PO_WAKE_SOURCE_TYPE {
	DeviceWakeSourceType = 0x0,
	FixedWakeSourceType = 0x1,
	TimerWakeSourceType = 0x2,
	TimerPresumedWakeSourceType = 0x3,
	InternalWakeSourceType = 0x4
};

struct PPM_IDLESTATE_EVENT {
	/*0000*/ ULONG NewState;
	/*0004*/ ULONG OldState;
	/*0008*/ ULONGLONG Processors;
	/*0010*/
};

struct PPM_IDLE_ACCOUNTING {
	/*0000*/ ULONG StateCount;
	/*0004*/ ULONG TotalTransitions;
	/*0008*/ ULONG ResetCount;
	/*0010*/ ULONGLONG StartTime;
	/*0018*/ PPM_IDLE_STATE_ACCOUNTING State[0x1];
	/*0048*/
};

struct PPM_IDLE_ACCOUNTING_EX {
	/*0000*/ ULONG StateCount;
	/*0004*/ ULONG TotalTransitions;
	/*0008*/ ULONG ResetCount;
	/*000c*/ ULONG AbortCount;
	/*0010*/ ULONGLONG StartTime;
	/*0018*/ PPM_IDLE_STATE_ACCOUNTING_EX State[0x1];
	/*01b8*/
};

struct PPM_IDLE_STATE_ACCOUNTING {
	/*0000*/ ULONG IdleTransitions;
	/*0004*/ ULONG FailedTransitions;
	/*0008*/ ULONG InvalidBucketIndex;
	/*0010*/ ULONGLONG TotalTime;
	/*0018*/ ULONG IdleTimeBuckets[0x6];
	/*0030*/
};

struct PPM_IDLE_STATE_ACCOUNTING_EX {
	/*0000*/ ULONGLONG TotalTime;
	/*0008*/ ULONG IdleTransitions;
	/*000c*/ ULONG FailedTransitions;
	/*0010*/ ULONG InvalidBucketIndex;
	/*0014*/ ULONG MinTimeUs;
	/*0018*/ ULONG MaxTimeUs;
	/*001c*/ ULONG CancelledTransitions;
	/*0020*/ PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[0x10];
	/*01a0*/
};

struct PPM_IDLE_STATE_BUCKET_EX {
	/*0000*/ ULONGLONG TotalTimeUs;
	/*0008*/ ULONG MinTimeUs;
	/*000c*/ ULONG MaxTimeUs;
	/*0010*/ ULONG Count;
	/*0018*/
};

struct PPM_PERFSTATE_DOMAIN_EVENT {
	/*0000*/ ULONG State;
	/*0004*/ ULONG Latency;
	/*0008*/ ULONG Speed;
	/*0010*/ ULONGLONG Processors;
	/*0018*/
};

struct PPM_PERFSTATE_EVENT {
	/*0000*/ ULONG State;
	/*0004*/ ULONG Status;
	/*0008*/ ULONG Latency;
	/*000c*/ ULONG Speed;
	/*0010*/ ULONG Processor;
	/*0014*/
};

struct PPM_THERMALCHANGE_EVENT {
	/*0000*/ ULONG ThermalConstraint;
	/*0008*/ ULONGLONG Processors;
	/*0010*/
};

struct PPM_THERMAL_POLICY_EVENT {
	/*0000*/ UCHAR Mode;
	/*0008*/ ULONGLONG Processors;
	/*0010*/
};

struct PPM_WMI_IDLE_STATE {
	/*0000*/ ULONG Latency;
	/*0004*/ ULONG Power;
	/*0008*/ ULONG TimeCheck;
	/*000c*/ UCHAR PromotePercent;
	/*000d*/ UCHAR DemotePercent;
	/*000e*/ UCHAR StateType;
	/*000f*/ UCHAR Reserved;
	/*0010*/ ULONG StateFlags;
	/*0014*/ ULONG Context;
	/*0018*/ ULONG IdleHandler;
	/*001c*/ ULONG Reserved1;
	/*0020*/
};

struct PPM_WMI_IDLE_STATES {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Count;
	/*0008*/ ULONG TargetState;
	/*000c*/ ULONG OldState;
	/*0010*/ ULONGLONG TargetProcessors;
	/*0018*/ PPM_WMI_IDLE_STATE State[0x1];
	/*0038*/
};

struct PPM_WMI_IDLE_STATES_EX {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Count;
	/*0008*/ ULONG TargetState;
	/*000c*/ ULONG OldState;
	/*0010*/ void * TargetProcessors;
	/*0018*/ PPM_WMI_IDLE_STATE State[0x1];
	/*0038*/
};

struct PPM_WMI_LEGACY_PERFSTATE {
	/*0000*/ ULONG Frequency;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG PercentFrequency;
	/*000c*/
};

struct PPM_WMI_PERF_STATE {
	/*0000*/ ULONG Frequency;
	/*0004*/ ULONG Power;
	/*0008*/ UCHAR PercentFrequency;
	/*0009*/ UCHAR IncreaseLevel;
	/*000a*/ UCHAR DecreaseLevel;
	/*000b*/ UCHAR Type;
	/*000c*/ ULONG IncreaseTime;
	/*0010*/ ULONG DecreaseTime;
	/*0018*/ ULONGLONG Control;
	/*0020*/ ULONGLONG Status;
	/*0028*/ ULONG HitCount;
	/*002c*/ ULONG Reserved1;
	/*0030*/ ULONGLONG Reserved2;
	/*0038*/ ULONGLONG Reserved3;
	/*0040*/
};

struct PPM_WMI_PERF_STATES {
	/*0000*/ ULONG Count;
	/*0004*/ ULONG MaxFrequency;
	/*0008*/ ULONG CurrentState;
	/*000c*/ ULONG MaxPerfState;
	/*0010*/ ULONG MinPerfState;
	/*0014*/ ULONG LowestPerfState;
	/*0018*/ ULONG ThermalConstraint;
	/*001c*/ UCHAR BusyAdjThreshold;
	/*001d*/ UCHAR PolicyType;
	/*001e*/ UCHAR Type;
	/*001f*/ UCHAR Reserved;
	/*0020*/ ULONG TimerInterval;
	/*0028*/ ULONGLONG TargetProcessors;
	/*0030*/ ULONG PStateHandler;
	/*0034*/ ULONG PStateContext;
	/*0038*/ ULONG TStateHandler;
	/*003c*/ ULONG TStateContext;
	/*0040*/ ULONG FeedbackHandler;
	/*0044*/ ULONG Reserved1;
	/*0048*/ ULONGLONG Reserved2;
	/*0050*/ PPM_WMI_PERF_STATE State[0x1];
	/*0090*/
};

struct PPM_WMI_PERF_STATES_EX {
	/*0000*/ ULONG Count;
	/*0004*/ ULONG MaxFrequency;
	/*0008*/ ULONG CurrentState;
	/*000c*/ ULONG MaxPerfState;
	/*0010*/ ULONG MinPerfState;
	/*0014*/ ULONG LowestPerfState;
	/*0018*/ ULONG ThermalConstraint;
	/*001c*/ UCHAR BusyAdjThreshold;
	/*001d*/ UCHAR PolicyType;
	/*001e*/ UCHAR Type;
	/*001f*/ UCHAR Reserved;
	/*0020*/ ULONG TimerInterval;
	/*0028*/ void * TargetProcessors;
	/*0030*/ ULONG PStateHandler;
	/*0034*/ ULONG PStateContext;
	/*0038*/ ULONG TStateHandler;
	/*003c*/ ULONG TStateContext;
	/*0040*/ ULONG FeedbackHandler;
	/*0044*/ ULONG Reserved1;
	/*0048*/ ULONGLONG Reserved2;
	/*0050*/ PPM_WMI_PERF_STATE State[0x1];
	/*0090*/
};

struct PREVIEWHANDLERFRAMEINFO {
	/*0000*/ HACCEL__ * haccel;
	/*0008*/ UINT cAccelEntries;
	/*0010*/
};

struct PROCESSOR_IDLESTATE_INFO {
	/*0000*/ ULONG TimeCheck;
	/*0004*/ UCHAR DemotePercent;
	/*0005*/ UCHAR PromotePercent;
	/*0006*/ UCHAR Spare[0x2];
	/*0008*/
};

struct PROCESSOR_IDLESTATE_POLICY {
	
	/*0000*/ USHORT Revision;
	/*0002*/ <unnamed-type-Flags> Flags;
	/*0004*/ ULONG PolicyCount;
	/*0008*/ PROCESSOR_IDLESTATE_INFO Policy[0x3];
	/*0020*/
};

struct PROCESSOR_IDLE_TIMES {
	/*0000*/ ULONGLONG StartTime;
	/*0008*/ ULONGLONG EndTime;
	/*0010*/ ULONG Reserved[0x4];
	/*0020*/
};

struct PROCESSOR_PERFSTATE_POLICY {
	
	/*0000*/ ULONG Revision;
	/*0004*/ UCHAR MaxThrottle;
	/*0005*/ UCHAR MinThrottle;
	/*0006*/ UCHAR BusyAdjThreshold;
	/*0007*/ UCHAR Spare;
	/*0007*/ <unnamed-type-Flags> Flags;
	/*0008*/ ULONG TimeCheck;
	/*000c*/ ULONG IncreaseTime;
	/*0010*/ ULONG DecreaseTime;
	/*0014*/ ULONG IncreasePercent;
	/*0018*/ ULONG DecreasePercent;
	/*001c*/
};

struct PROCESS_PROTECTION_LEVEL_INFORMATION {
	/*0000*/ ULONG ProtectionLevel;
	/*0004*/
};

enum PROPCTL_RECT_TYPE {
	PCRT_MINIMUM = 0x0,
	PCRT_IDEAL = 0x1
};

enum PROPDESC_AGGREGATION_TYPE {
	PDAT_DEFAULT = 0x0,
	PDAT_FIRST = 0x1,
	PDAT_SUM = 0x2,
	PDAT_AVERAGE = 0x3,
	PDAT_DATERANGE = 0x4,
	PDAT_UNION = 0x5,
	PDAT_MAX = 0x6,
	PDAT_MIN = 0x7
};

enum PROPDESC_COLUMNINDEX_TYPE {
	PDCIT_NONE = 0x0,
	PDCIT_ONDISK = 0x1,
	PDCIT_INMEMORY = 0x2,
	PDCIT_ONDEMAND = 0x3,
	PDCIT_ONDISKALL = 0x4,
	PDCIT_ONDISKVECTOR = 0x5
};

enum PROPDESC_CONDITION_TYPE {
	PDCOT_NONE = 0x0,
	PDCOT_STRING = 0x1,
	PDCOT_SIZE = 0x2,
	PDCOT_DATETIME = 0x3,
	PDCOT_BOOLEAN = 0x4,
	PDCOT_NUMBER = 0x5
};

enum PROPDESC_DISPLAYTYPE {
	PDDT_STRING = 0x0,
	PDDT_NUMBER = 0x1,
	PDDT_BOOLEAN = 0x2,
	PDDT_DATETIME = 0x3,
	PDDT_ENUMERATED = 0x4
};

enum PROPDESC_ENUMFILTER {
	PDEF_ALL = 0x0,
	PDEF_SYSTEM = 0x1,
	PDEF_NONSYSTEM = 0x2,
	PDEF_VIEWABLE = 0x3,
	PDEF_QUERYABLE = 0x4,
	PDEF_INFULLTEXTQUERY = 0x5,
	PDEF_COLUMN = 0x6
};

enum PROPDESC_FORMAT_FLAGS {
	PDFF_DEFAULT = 0x0,
	PDFF_PREFIXNAME = 0x1,
	PDFF_FILENAME = 0x2,
	PDFF_ALWAYSKB = 0x4,
	PDFF_RESERVED_RIGHTTOLEFT = 0x8,
	PDFF_SHORTTIME = 0x10,
	PDFF_LONGTIME = 0x20,
	PDFF_HIDETIME = 0x40,
	PDFF_SHORTDATE = 0x80,
	PDFF_LONGDATE = 0x100,
	PDFF_HIDEDATE = 0x200,
	PDFF_RELATIVEDATE = 0x400,
	PDFF_USEEDITINVITATION = 0x800,
	PDFF_READONLY = 0x1000,
	PDFF_NOAUTOREADINGORDER = 0x2000
};

enum PROPDESC_GROUPING_RANGE {
	PDGR_DISCRETE = 0x0,
	PDGR_ALPHANUMERIC = 0x1,
	PDGR_SIZE = 0x2,
	PDGR_DYNAMIC = 0x3,
	PDGR_DATE = 0x4,
	PDGR_PERCENT = 0x5,
	PDGR_ENUMERATED = 0x6
};

enum PROPDESC_RELATIVEDESCRIPTION_TYPE {
	PDRDT_GENERAL = 0x0,
	PDRDT_DATE = 0x1,
	PDRDT_SIZE = 0x2,
	PDRDT_COUNT = 0x3,
	PDRDT_REVISION = 0x4,
	PDRDT_LENGTH = 0x5,
	PDRDT_DURATION = 0x6,
	PDRDT_SPEED = 0x7,
	PDRDT_RATE = 0x8,
	PDRDT_RATING = 0x9,
	PDRDT_PRIORITY = 0xa
};

enum PROPDESC_SEARCHINFO_FLAGS {
	PDSIF_DEFAULT = 0x0,
	PDSIF_ININVERTEDINDEX = 0x1,
	PDSIF_ISCOLUMN = 0x2,
	PDSIF_ISCOLUMNSPARSE = 0x4,
	PDSIF_ALWAYSINCLUDE = 0x8,
	PDSIF_USEFORTYPEAHEAD = 0x10
};

enum PROPDESC_SORTDESCRIPTION {
	PDSD_GENERAL = 0x0,
	PDSD_A_Z = 0x1,
	PDSD_LOWEST_HIGHEST = 0x2,
	PDSD_SMALLEST_BIGGEST = 0x3,
	PDSD_OLDEST_NEWEST = 0x4
};

enum PROPDESC_TYPE_FLAGS {
	PDTF_DEFAULT = 0x0,
	PDTF_MULTIPLEVALUES = 0x1,
	PDTF_ISINNATE = 0x2,
	PDTF_ISGROUP = 0x4,
	PDTF_CANGROUPBY = 0x8,
	PDTF_CANSTACKBY = 0x10,
	PDTF_ISTREEPROPERTY = 0x20,
	PDTF_INCLUDEINFULLTEXTQUERY = 0x40,
	PDTF_ISVIEWABLE = 0x80,
	PDTF_ISQUERYABLE = 0x100,
	PDTF_CANBEPURGED = 0x200,
	PDTF_SEARCHRAWVALUE = 0x400,
	PDTF_DONTCOERCEEMPTYSTRINGS = 0x800,
	PDTF_ALWAYSINSUPPLEMENTALSTORE = 0x1000,
	PDTF_ISSYSTEMPROPERTY = 0x80000000,
	PDTF_MASK_ALL = 0x80001fff
};

enum PROPDESC_VIEW_FLAGS {
	PDVF_DEFAULT = 0x0,
	PDVF_CENTERALIGN = 0x1,
	PDVF_RIGHTALIGN = 0x2,
	PDVF_BEGINNEWGROUP = 0x4,
	PDVF_FILLAREA = 0x8,
	PDVF_SORTDESCENDING = 0x10,
	PDVF_SHOWONLYIFPRESENT = 0x20,
	PDVF_SHOWBYDEFAULT = 0x40,
	PDVF_SHOWINPRIMARYLIST = 0x80,
	PDVF_SHOWINSECONDARYLIST = 0x100,
	PDVF_HIDELABEL = 0x200,
	PDVF_HIDDEN = 0x800,
	PDVF_CANWRAP = 0x1000,
	PDVF_MASK_ALL = 0x1bff
};

enum PROPENUMTYPE {
	PET_DISCRETEVALUE = 0x0,
	PET_RANGEDVALUE = 0x1,
	PET_DEFAULTVALUE = 0x2,
	PET_ENDRANGE = 0x3
};

struct PROPERTY_MAP {
	/*0000*/ WCHAR const * pszPropName;
	/*0008*/ _GUID fmtid;
	/*0018*/ ULONG pid;
	/*0020*/
};

enum PROXY_PHASE {
	PROXY_CALCSIZE = 0x0,
	PROXY_GETBUFFER = 0x1,
	PROXY_MARSHAL = 0x2,
	PROXY_SENDRECEIVE = 0x3,
	PROXY_UNMARSHAL = 0x4
};

enum PSC_STATE {
	PSC_NORMAL = 0x0,
	PSC_NOTINSOURCE = 0x1,
	PSC_DIRTY = 0x2,
	PSC_READONLY = 0x3
};

enum PS_CREATE_STATE {
	PsCreateInitialState = 0x0,
	PsCreateFailOnFileOpen = 0x1,
	PsCreateFailOnSectionCreate = 0x2,
	PsCreateFailExeFormat = 0x3,
	PsCreateFailMachineMismatch = 0x4,
	PsCreateFailExeName = 0x5,
	PsCreateSuccess = 0x6,
	PsCreateMaximumStates = 0x7
};

enum PackageApplicationProperty {
	PackageApplicationProperty_Aumid = 0x1,
	PackageApplicationProperty_Praid = 0x2,
	PackageApplicationProperty_DisplayName = 0x3,
	PackageApplicationProperty_Description = 0x4,
	PackageApplicationProperty_Logo = 0x5,
	PackageApplicationProperty_SmallLogo = 0x6,
	PackageApplicationProperty_ForegroundText = 0x7,
	PackageApplicationProperty_ForegroundTextString = 0x8,
	PackageApplicationProperty_BackgroundColor = 0x9,
	PackageApplicationProperty_StartPage = 0xa,
	PackageApplicationProperty_ContentURIRulesCount = 0xb,
	PackageApplicationProperty_ContentURIRules = 0xc,
	PackageApplicationProperty_StaticContentURIRulesCount = 0xd,
	PackageApplicationProperty_StaticContentURIRules = 0xe,
	PackageApplicationProperty_DynamicContentURIRulesCount = 0xf,
	PackageApplicationProperty_DynamicContentURIRules = 0x10,
	PackageApplicationProperty_StartOfReserved = 0x11
};

enum PackageGlobalizationProperty {
	PackageGlobalizationProperty_ForceUtf8 = 0x1,
	PackageGlobalizationProperty_UseWindowsDisplayLanguage = 0x2,
	PackageGlobalizationProperty_StartOfReserved = 0x3
};

enum PackageInfoType {
	PackageInfoType_PackageInfoInstallPath = 0x0,
	PackageInfoType_PackageInfoMutablePath = 0x1,
	PackageInfoType_PackageInfoEffectivePath = 0x2,
	PackageInfoType_PackageInfoMachineExternalPath = 0x3,
	PackageInfoType_PackageInfoUserExternalPath = 0x4,
	PackageInfoType_PackageInfoEffectiveExternalPath = 0x5,
	PackageInfoType_PackageInfoGeneration = 0x10,
	PackageInfoType_PackageInfoAliases = 0x11
};

enum PackageOrigin {
	PackageOrigin_Unknown = 0x0,
	PackageOrigin_Unsigned = 0x1,
	PackageOrigin_Inbox = 0x2,
	PackageOrigin_Store = 0x3,
	PackageOrigin_DeveloperUnsigned = 0x4,
	PackageOrigin_DeveloperSigned = 0x5,
	PackageOrigin_LineOfBusiness = 0x6
};

enum PackagePathType {
	PackagePathType_Install = 0x0,
	PackagePathType_Mutable = 0x1,
	PackagePathType_Effective = 0x2,
	PackagePathType_MachineExternal = 0x3,
	PackagePathType_UserExternal = 0x4,
	PackagePathType_EffectiveExternal = 0x5
};

enum PackageProperty {
	PackageProperty_Name = 0x1,
	PackageProperty_Version = 0x2,
	PackageProperty_Architecture = 0x3,
	PackageProperty_ResourceId = 0x4,
	PackageProperty_Publisher = 0x5,
	PackageProperty_PublisherId = 0x6,
	PackageProperty_FamilyName = 0x7,
	PackageProperty_FullName = 0x8,
	PackageProperty_Flags = 0x9,
	PackageProperty_InstalledLocation = 0xa,
	PackageProperty_DisplayName = 0xb,
	PackageProperty_PublisherDisplayName = 0xc,
	PackageProperty_Description = 0xd,
	PackageProperty_Logo = 0xe,
	PackageProperty_PackageOrigin = 0xf,
	PackageProperty_StartOfReserved = 0x10
};

enum PackagePublisherNamespace {
	PackagePublisherNamespace_Unknown = 0x0,
	PackagePublisherNamespace_Signed = 0x1,
	PackagePublisherNamespace_Unsigned = 0x2
};

enum PackageResourcesProperty {
	PackageResourcesProperty_DisplayName = 0x1,
	PackageResourcesProperty_PublisherDisplayName = 0x2,
	PackageResourcesProperty_Description = 0x3,
	PackageResourcesProperty_Logo = 0x4,
	PackageResourcesProperty_SmallLogo = 0x5,
	PackageResourcesProperty_StartPage = 0x6,
	PackageResourcesProperty_StartOfReserved = 0x7
};

enum PackageSecurityProperty {
	PackageSecurityProperty_SecurityFlags = 0x1,
	PackageSecurityProperty_AppContainerSID = 0x2,
	PackageSecurityProperty_CapabilitiesCount = 0x3,
	PackageSecurityProperty_Capabilities = 0x4,
	PackageSecurityProperty_StartOfReserved = 0x5
};

enum ProcessPackageGraphFlags : UINT {
	Append = 0x0,
	OnlyUseFirstPackageFamily = 0x1,
	Prepend = 0x2
};

class ProcessStatus {
	static BOOLEAN isExiting;
public:
	static BOOLEAN IsExiting();
	static void SetIsExiting();
	/*0001*/
};

class ProxyConfigurationServer : public RuntimeClass<Windows::Networking::Connectivity::IProxyConfiguration,FtmBase> {
public:
	static WCHAR const * InternalGetRuntimeClassName();
	static TrustLevel InternalGetTrustLevel();
	/*    */ virtual HRESULT GetRuntimeClassName( HSTRING__ * * );
	/*    */ virtual HRESULT GetTrustLevel( TrustLevel * );
	/*    */ virtual HRESULT GetIids( ULONG * , _GUID * * );
	/*    */ virtual HRESULT QueryInterface( _GUID const & , void * * );
	/*    */ virtual ULONG Release();
	/*    */ virtual ULONG AddRef();
	void ProxyConfigurationServer();
	/*    */ virtual void ~ProxyConfigurationServer();
	/*    */ virtual HRESULT get_ProxyUris( IVectorView<Uri *> * * );
	/*    */ virtual HRESULT get_CanConnectDirectly( UCHAR * );
	static HRESULT CreateProxyConfiguration( _WININET_PROXY_INFO_LIST * , IProxyConfiguration * * );
	HRESULT RuntimeClassInitialize();
private:
	/*0040*/ ComPtr<Windows::Foundation::Collections::Internal::AgileVector<Windows::Foundation::Uri *,Windows::Foundation::Collections::Internal::DefaultEqualityPredicate<Windows::Foundation::Uri *>,Windows::Foundation::Collections::Internal::DefaultLifetimeTraits<Windows::Foundation::Uri *>,0> > spUris;
	/*0048*/ UCHAR canConnectDirectly;
	/*0050*/ CO_MTA_USAGE_COOKIE__ * cookieMtaUsage;
public:
	void __local_vftable_ctor_closure();
	/*0040*/ virtual void * __vecDelDtor( UINT );
	/*0058*/
};

struct QITAB {
	/*0000*/ _GUID const * piid;
	/*0008*/ ULONG dwOffset;
	/*0010*/
};

struct QOS_OBJECT_HDR {
	/*0000*/ ULONG ObjectType;
	/*0004*/ ULONG ObjectLength;
	/*0008*/
};

struct READ_FILE_USN_DATA {
	/*0000*/ USHORT MinMajorVersion;
	/*0002*/ USHORT MaxMajorVersion;
	/*0004*/
};

struct READ_USN_JOURNAL_DATA_V0 {
	/*0000*/ LONGLONG StartUsn;
	/*0008*/ ULONG ReasonMask;
	/*000c*/ ULONG ReturnOnlyOnClose;
	/*0010*/ ULONGLONG Timeout;
	/*0018*/ ULONGLONG BytesToWaitFor;
	/*0020*/ ULONGLONG UsnJournalID;
	/*0028*/
};

struct READ_USN_JOURNAL_DATA_V1 {
	/*0000*/ LONGLONG StartUsn;
	/*0008*/ ULONG ReasonMask;
	/*000c*/ ULONG ReturnOnlyOnClose;
	/*0010*/ ULONGLONG Timeout;
	/*0018*/ ULONGLONG BytesToWaitFor;
	/*0020*/ ULONGLONG UsnJournalID;
	/*0028*/ USHORT MinMajorVersion;
	/*002a*/ USHORT MaxMajorVersion;
	/*0030*/
};

struct REFS_VOLUME_DATA_BUFFER {
	/*0000*/ ULONG ByteCount;
	/*0004*/ ULONG MajorVersion;
	/*0008*/ ULONG MinorVersion;
	/*000c*/ ULONG BytesPerPhysicalSector;
	/*0010*/ _LARGE_INTEGER VolumeSerialNumber;
	/*0018*/ _LARGE_INTEGER NumberSectors;
	/*0020*/ _LARGE_INTEGER TotalClusters;
	/*0028*/ _LARGE_INTEGER FreeClusters;
	/*0030*/ _LARGE_INTEGER TotalReserved;
	/*0038*/ ULONG BytesPerSector;
	/*003c*/ ULONG BytesPerCluster;
	/*0040*/ _LARGE_INTEGER MaximumSizeOfResidentFile;
	/*0048*/ USHORT FastTierDataFillRatio;
	/*004a*/ USHORT SlowTierDataFillRatio;
	/*004c*/ ULONG DestagesFastTierToSlowTierRate;
	/*0050*/ _LARGE_INTEGER Reserved[0x9];
	/*0098*/
};

struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {
	
	/*0000*/ ULONG ExtentCount;
	/*0008*/ _LARGE_INTEGER StartingVcn;
	/*0010*/ <unnamed-type-Extents> Extents[0x1];
	/*0028*/
};

struct RETRIEVAL_POINTERS_BUFFER {
	
	/*0000*/ ULONG ExtentCount;
	/*0008*/ _LARGE_INTEGER StartingVcn;
	/*0010*/ <unnamed-type-Extents> Extents[0x1];
	/*0020*/
};

struct RETRIEVAL_POINTER_COUNT {
	/*0000*/ ULONG ExtentCount;
	/*0004*/
};

struct ROUTE_SELECTION_DESCRIPTOR {
	/*0000*/ UCHAR RouteSelectionDescriptorPrecedence;
	/*0001*/ UCHAR SSCMode;
	/*0004*/ INT fIsSSCModeSpecified;
	/*0008*/ PDU_SESSION_TYPE PDUSession;
	/*000c*/ INT fNonSeamlessSOffloadIndication;
	/*0010*/ ACCESS_TYPE_PREFERENCE AccessPreference;
	/*0018*/ SNSSAI_LIST * pSNSSAIList;
	/*0018*/ ULONGLONG SNSSAIdummy;
	/*0020*/ DNN_LIST * pDNNList;
	/*0020*/ ULONGLONG DNNListdummy;
	/*0028*/
};

struct ROUTE_SELECTION_DESCRIPTOR_LIST {
	/*0000*/ ULONG count;
	/*0008*/ ROUTE_SELECTION_DESCRIPTOR RSDValues[0x1];
	/*0030*/
};

enum RO_ERROR_REPORTING_FLAGS {
	RO_ERROR_REPORTING_NONE = 0x0,
	RO_ERROR_REPORTING_SUPPRESSEXCEPTIONS = 0x1,
	RO_ERROR_REPORTING_FORCEEXCEPTIONS = 0x2,
	RO_ERROR_REPORTING_USESETERRORINFO = 0x4,
	RO_ERROR_REPORTING_SUPPRESSSETERRORINFO = 0x8
};

enum RO_INIT_TYPE {
	RO_INIT_SINGLETHREADED = 0x0,
	RO_INIT_MULTITHREADED = 0x1
};

enum RPC_ADDRESS_CHANGE_TYPE {
	PROTOCOL_NOT_LOADED = 0x1,
	PROTOCOL_LOADED = 0x2,
	PROTOCOL_ADDRESS_CHANGE = 0x3
};

struct RPC_CLIENT_INFORMATION1 {
	/*0000*/ UCHAR * UserName;
	/*0008*/ UCHAR * ComputerName;
	/*0010*/ USHORT Privilege;
	/*0014*/ ULONG AuthFlags;
	/*0018*/
};

struct RPC_DISPATCH_TABLE {
	/*0000*/ UINT DispatchTableCount;
	/*0008*/ void (* * DispatchTable)( _RPC_MESSAGE * );
	/*0010*/ LONGLONG Reserved;
	/*0018*/
};

struct RPC_ENDPOINT_TEMPLATEA {
	/*0000*/ ULONG Version;
	/*0008*/ UCHAR * ProtSeq;
	/*0010*/ UCHAR * Endpoint;
	/*0018*/ void * SecurityDescriptor;
	/*0020*/ ULONG Backlog;
	/*0028*/
};

struct RPC_ENDPOINT_TEMPLATEW {
	/*0000*/ ULONG Version;
	/*0008*/ WCHAR * ProtSeq;
	/*0010*/ WCHAR * Endpoint;
	/*0018*/ void * SecurityDescriptor;
	/*0020*/ ULONG Backlog;
	/*0028*/
};

struct RPC_IF_ID_VECTOR {
	/*0000*/ ULONG Count;
	/*0008*/ _RPC_IF_ID * IfId[0x1];
	/*0010*/
};

struct RPC_IMPORT_CONTEXT_P {
	/*0000*/ void * LookupContext;
	/*0008*/ void * ProposedHandle;
	/*0010*/ _RPC_BINDING_VECTOR * Bindings;
	/*0018*/
};

struct RPC_INTERFACE_TEMPLATEA {
	/*0000*/ ULONG Version;
	/*0008*/ void * IfSpec;
	/*0010*/ _GUID * MgrTypeUuid;
	/*0018*/ void * MgrEpv;
	/*0020*/ UINT Flags;
	/*0024*/ UINT MaxCalls;
	/*0028*/ UINT MaxRpcSize;
	/*0030*/ LONG (* IfCallback)( void * , void * );
	/*0038*/ _UUID_VECTOR * UuidVector;
	/*0040*/ UCHAR * Annotation;
	/*0048*/ void * SecurityDescriptor;
	/*0050*/
};

struct RPC_INTERFACE_TEMPLATEW {
	/*0000*/ ULONG Version;
	/*0008*/ void * IfSpec;
	/*0010*/ _GUID * MgrTypeUuid;
	/*0018*/ void * MgrEpv;
	/*0020*/ UINT Flags;
	/*0024*/ UINT MaxCalls;
	/*0028*/ UINT MaxRpcSize;
	/*0030*/ LONG (* IfCallback)( void * , void * );
	/*0038*/ _UUID_VECTOR * UuidVector;
	/*0040*/ WCHAR * Annotation;
	/*0048*/ void * SecurityDescriptor;
	/*0050*/
};

struct RPC_STATS_VECTOR {
	/*0000*/ UINT Count;
	/*0004*/ ULONG Stats[0x1];
	/*0008*/
};

struct RTLWOW64_CROSSPROCESS_WORK_HEAD {
	/*0000*/ ULONG First : 31; // 0x7fffffff;
	/*0000*/ ULONG HeavyFlush : 01; // 0x80000000;
	/*0004*/ ULONG Sequence;
	/*0000*/ LONGLONG volatile Value;
	void RTLWOW64_CROSSPROCESS_WORK_HEAD( RTLWOW64_CROSSPROCESS_WORK_HEAD && );
	void RTLWOW64_CROSSPROCESS_WORK_HEAD( RTLWOW64_CROSSPROCESS_WORK_HEAD const & );
	RTLWOW64_CROSSPROCESS_WORK_HEAD & operator=( RTLWOW64_CROSSPROCESS_WORK_HEAD && );
	RTLWOW64_CROSSPROCESS_WORK_HEAD & operator=( RTLWOW64_CROSSPROCESS_WORK_HEAD const & );
	/*0008*/
};

struct RTLWOW64_CROSSPROCESS_WORK_ITEM {
	
	/*0000*/ ULONG Next;
	/*0004*/ RTLWOW64_CROSSPROCESS_WORK_OPERATION Operation;
	/*0008*/ <unnamed-type-MemoryAllocData> MemoryAllocData;
	/*0008*/ <unnamed-type-MemoryFreeData> MemoryFreeData;
	/*0008*/ <unnamed-type-MemoryProtectData> MemoryProtectData;
	/*0008*/ <unnamed-type-InstructionCacheFlushData> InstructionCacheFlushData;
	/*0008*/ <unnamed-type-MemoryDirtyData> MemoryDirtyData;
	/*0028*/
};

enum RTLWOW64_CROSSPROCESS_WORK_OPERATION {
	CrossProcOperationMemoryAllocPreNotify = 0x0,
	CrossProcOperationMemoryAllocPostNotify = 0x1,
	CrossProcOperationMemoryFreePreNotify = 0x2,
	CrossProcOperationMemoryFreePostNotify = 0x3,
	CrossProcOperationMemoryProtectPreNotify = 0x4,
	CrossProcOperationMemoryProtectPostNotify = 0x5,
	CrossProcOperationInstructionCacheFlush = 0x6,
	CrossProcOperationInstructionCacheFlushHeavy = 0x7,
	CrossProcOperationMemoryDirtyNotify = 0x8
};

struct RTL_ACE_DATA {
	/*0000*/ UCHAR AceType;
	/*0001*/ UCHAR InheritFlags;
	/*0002*/ UCHAR AceFlags;
	/*0004*/ ULONG Mask;
	/*0008*/ void * * Sid;
	/*0010*/
};

enum RTL_BSD_ITEM_TYPE {
	RtlBsdItemVersionNumber = 0x0,
	RtlBsdItemProductType = 0x1,
	RtlBsdItemAabEnabled = 0x2,
	RtlBsdItemAabTimeout = 0x3,
	RtlBsdItemBootGood = 0x4,
	RtlBsdItemBootShutdown = 0x5,
	RtlBsdSleepInProgress = 0x6,
	RtlBsdPowerTransition = 0x7,
	RtlBsdItemBootAttemptCount = 0x8,
	RtlBsdItemBootCheckpoint = 0x9,
	RtlBsdItemBootId = 0xa,
	RtlBsdItemShutdownBootId = 0xb,
	RtlBsdItemReportedAbnormalShutdownBootId = 0xc,
	RtlBsdItemErrorInfo = 0xd,
	RtlBsdItemPowerButtonPressInfo = 0xe,
	RtlBsdItemChecksum = 0xf,
	RtlBsdPowerTransitionExtension = 0x10,
	RtlBsdItemFeatureConfigurationState = 0x11,
	RtlBsdItemMax = 0x12
};

enum RTL_DISK_SPACE_POLICY {
	RtlDiskSpacePolicyVeryLow = 0x5,
	RtlDiskSpacePolicyLow = 0xa,
	RtlDiskSpacePolicyBelowNormal = 0xf,
	RtlDiskSpacePolicyNormal = 0x14
};

enum RTL_DISK_SPEED_POLICY {
	RtlDiskSpeedPolicyNormal = 0xa,
	RtlDiskSpeedPolicyFast = 0x14
};

enum RTL_DISK_WRITE_CONSTRAINT_POLICY {
	RtlDiskWriteConstraintPolicyLimited = 0x32,
	RtlDiskWriteConstraintPolicyNormal = 0x64
};

enum RTL_PHYSICAL_MEMORY_POLICY {
	RtlPhysicalMemoryPolicyLow = 0xa,
	RtlPhysicalMemoryPolicyNormal = 0x14
};

enum RUNTIMEBROKER_CALLERIDENTITY_CHECK {
	RCC_ASSERT_IF_RUNTIMEBROKER = 0x0,
	RCC_FAIL_IF_RUNTIMEBROKER = 0x1,
	RCC_ALLOW_IF_RUNTIMEBROKER = 0x2
};

enum ReplacesCorHdrNumericDefines {
	COMIMAGE_FLAGS_ILONLY = 0x1,
	COMIMAGE_FLAGS_32BITREQUIRED = 0x2,
	COMIMAGE_FLAGS_IL_LIBRARY = 0x4,
	COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x8,
	COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 0x10,
	COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
	COMIMAGE_FLAGS_32BITPREFERRED = 0x20000,
	COR_VERSION_MAJOR_V2 = 0x2,
	COR_VERSION_MAJOR = 0x2,
	COR_VERSION_MINOR = 0x5,
	COR_DELETED_NAME_LENGTH = 0x8,
	COR_VTABLEGAP_NAME_LENGTH = 0x8,
	NATIVE_TYPE_MAX_CB = 0x1,
	COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xff,
	IMAGE_COR_MIH_METHODRVA = 0x1,
	IMAGE_COR_MIH_EHRVA = 0x2,
	IMAGE_COR_MIH_BASICBLOCK = 0x8,
	COR_VTABLE_32BIT = 0x1,
	COR_VTABLE_64BIT = 0x2,
	COR_VTABLE_FROM_UNMANAGED = 0x4,
	COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 0x8,
	COR_VTABLE_CALL_MOST_DERIVED = 0x10,
	IMAGE_COR_EATJ_THUNK_SIZE = 0x20,
	MAX_CLASS_NAME = 0x400,
	MAX_PACKAGE_NAME = 0x400
};

class RpcOptionsHelper {
public:
	static HRESULT GetRpcOptions( IUnknown * , BOOLEAN , IRpcOptions * * );
	static HRESULT GetRpcOptions( IUnknown * , IRpcOptions * * );
	static HRESULT GetRpcOptionsAndSetDoNotDisturb( IUnknown * , IRpcOptions * * );
	static HRESULT SetDoNotDisturb( IUnknown * );
private:
	static void SetDoNotDisturbInternal( IRpcOptions * , IUnknown * );
	/*0001*/
};

enum RpcProxyPerfCounters {
	RpcCurrentUniqueUser = 0x1,
	RpcBackEndConnectionAttempts = 0x2,
	RpcBackEndConnectionFailed = 0x3,
	RpcRequestsPerSecond = 0x4,
	RpcIncomingConnections = 0x5,
	RpcIncomingBandwidth = 0x6,
	RpcOutgoingBandwidth = 0x7,
	RpcAttemptedLbsDecisions = 0x8,
	RpcFailedLbsDecisions = 0x9,
	RpcAttemptedLbsMessages = 0xa,
	RpcFailedLbsMessages = 0xb,
	RpcLastCounter = 0xc
};

enum SAFE_SAVE_OPTIONS {
	SSO_DEFAULT = 0x0,
	SSO_NO_READER_OPLOCK = 0x1,
	SSO_OPEN_REPARSE_POINT = 0x2,
	SSO_WRITE_SHARING_ON_READ_WRITE_ACCESS_MODE = 0x4,
	SSO_READONLY_OVERRIDE = 0x8,
	SSO_FREEZE_MODIFIED_DATE = 0x10,
	SSO_IMPERSONATE_CREATING_THREAD = 0x20,
	SSO_DISPOSITION_MASK = 0xff00
};

struct SCOPE_ID {
	/*0000*/ ULONG Zone : 28; // 0x0fffffff;
	/*0000*/ ULONG Level : 04; // 0xf0000000;
	/*0000*/ ULONG Value;
	/*0004*/
};

enum SCOPE_LEVEL {
	ScopeLevelInterface = 0x1,
	ScopeLevelLink = 0x2,
	ScopeLevelSubnet = 0x3,
	ScopeLevelAdmin = 0x4,
	ScopeLevelSite = 0x5,
	ScopeLevelOrganization = 0x8,
	ScopeLevelGlobal = 0xe,
	ScopeLevelCount = 0x10
};

struct SC_HANDLE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct SChannelHookCallInfo {
	/*0000*/ _GUID iid;
	/*0010*/ ULONG cbSize;
	/*0014*/ _GUID uCausality;
	/*0024*/ ULONG dwServerPid;
	/*0028*/ ULONG iMethod;
	/*0030*/ void * pObject;
	/*0038*/
};

enum SEARCHPANE_HOTKEY {
	SPHK_SHOWSEARCHPANE = 0x0,
	SPHK_SEARCHSETTINGS = 0x1,
	SPHK_SEARCHFILES = 0x2,
	SPHK_APPS = 0x3
};

enum SEARCH_SUBMIT_TYPE {
	SST_SEARCH_BUTTON = 0x0,
	SST_ENTER_KEY = 0x1,
	SST_TYPEAHEAD = 0x2
};

enum SEARCH_TYPEAHEAD_ITEM_TYPE {
	STA_TYPE_SEARCHSUGGESTION = 0x0,
	STA_TYPE_SEPARATOR = 0x1,
	STA_TYPE_RESULTSUGGESTION = 0x2
};

enum SECURELOCKCODE {
	SECURELOCK_NOCHANGE = 0xffffffff,
	SECURELOCK_SET_UNSECURE = 0x0,
	SECURELOCK_SET_MIXED = 0x1,
	SECURELOCK_SET_SECUREUNKNOWNBIT = 0x2,
	SECURELOCK_SET_SECURE40BIT = 0x3,
	SECURELOCK_SET_SECURE56BIT = 0x4,
	SECURELOCK_SET_FORTEZZA = 0x5,
	SECURELOCK_SET_SECURE128BIT = 0x6,
	SECURELOCK_FIRSTSUGGEST = 0x7,
	SECURELOCK_SUGGEST_UNSECURE = 0x7,
	SECURELOCK_SUGGEST_MIXED = 0x8,
	SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = 0x9,
	SECURELOCK_SUGGEST_SECURE40BIT = 0xa,
	SECURELOCK_SUGGEST_SECURE56BIT = 0xb,
	SECURELOCK_SUGGEST_FORTEZZA = 0xc,
	SECURELOCK_SUGGEST_SECURE128BIT = 0xd
};

enum SERVICE_DIRECTORY_TYPE {
	ServiceDirectoryPersistentState = 0x0,
	ServiceDirectoryTypeMax = 0x1
};

enum SERVICE_REGISTRY_STATE_TYPE {
	ServiceRegistryStateParameters = 0x0,
	ServiceRegistryStatePersistent = 0x1,
	MaxServiceRegistryStateType = 0x2
};

struct SERVICE_STATUS_HANDLE__ {
	/*0000*/ INT unused;
	/*0004*/
};

struct SERVICE_TRIGGER_CUSTOM_STATE_ID {
	/*0000*/ ULONG Data[0x2];
	/*0008*/
};

struct SET_POWER_SETTING_VALUE {
	/*0000*/ ULONG Version;
	/*0004*/ _GUID Guid;
	/*0014*/ SYSTEM_POWER_CONDITION PowerCondition;
	/*0018*/ ULONG DataLength;
	/*001c*/ UCHAR Data[0x1];
	/*0020*/
};

enum SET_WINDOW_GROUP_OPTIONS {
	SWGO_NONE = 0x0,
	SWGO_TEMPLATE = 0x1,
	SWGO_NOZORDER = 0x2,
	SWGO_RESPECT_MINIMIZE = 0x4,
	SWGO_ALL = 0x3
};

enum SE_WS_APPX_SIGNATURE_ORIGIN {
	SE_WS_APPX_SIGNATURE_ORIGIN_NOT_VALIDATED = 0x0,
	SE_WS_APPX_SIGNATURE_ORIGIN_UNKNOWN = 0x1,
	SE_WS_APPX_SIGNATURE_ORIGIN_APPSTORE = 0x2,
	SE_WS_APPX_SIGNATURE_ORIGIN_WINDOWS = 0x3,
	SE_WS_APPX_SIGNATURE_ORIGIN_ENTERPRISE = 0x4
};

struct SErrorConverterT<CEmptyType> {
	static HRESULT C_LR2HR( ULONG );
	static INT C_Win32Error2HR( ULONG , HRESULT * );
	static INT C_LDAPError2HR( ULONG , HRESULT * );
	static INT C_LDAPGetLastError2HR( HRESULT * );
	static INT C_NtStatus2HR( LONG , HRESULT * );
	/*0001*/
};

class SH<HICON__ *,SH_HCURSOR> {
public:
	void SH<HICON__ *,SH_HCURSOR>( HICON__ * );
	void SH<HICON__ *,SH_HCURSOR>();
	void ~SH<HICON__ *,SH_HCURSOR>();
	void Reset();
	HICON__ * Detach();
	void Attach( HICON__ * );
	void TransferTo( HICON__ * * );
	HICON__ * GetPtr() const;
	HICON__ * const * GetAddrIN() const;
	HICON__ * * GetAddrINOUT();
	HICON__ * * operator&();
	HICON__ * operator struct HICON__ *() const;
	void Swap( SH<HICON__ *,SH_HCURSOR> & );
	static BOOLEAN IsNull( HICON__ * );
	static HICON__ * GetNull();
	static void Destroy( HICON__ * );
private:
	/*0000*/ HICON__ * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<HICON__ *,SH_HICON> {
public:
	void SH<HICON__ *,SH_HICON>( HICON__ * );
	void SH<HICON__ *,SH_HICON>();
	void ~SH<HICON__ *,SH_HICON>();
	void Reset();
	HICON__ * Detach();
	void Attach( HICON__ * );
	void TransferTo( HICON__ * * );
	HICON__ * GetPtr() const;
	HICON__ * const * GetAddrIN() const;
	HICON__ * * GetAddrINOUT();
	HICON__ * * operator&();
	HICON__ * operator struct HICON__ *() const;
	void Swap( SH<HICON__ *,SH_HICON> & );
	static BOOLEAN IsNull( HICON__ * );
	static HICON__ * GetNull();
	static void Destroy( HICON__ * );
private:
	/*0000*/ HICON__ * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<HINSTANCE__ *,DH_HMODULE> {
public:
	void SH<HINSTANCE__ *,DH_HMODULE>( HINSTANCE__ * );
	void SH<HINSTANCE__ *,DH_HMODULE>();
	void ~SH<HINSTANCE__ *,DH_HMODULE>();
	void Reset();
	HINSTANCE__ * Detach();
	void Attach( HINSTANCE__ * );
	void TransferTo( HINSTANCE__ * * );
	HINSTANCE__ * GetPtr() const;
	HINSTANCE__ * const * GetAddrIN() const;
	HINSTANCE__ * * GetAddrINOUT();
	HINSTANCE__ * * operator&();
	HINSTANCE__ * operator struct HINSTANCE__ *() const;
	void Swap( SH<HINSTANCE__ *,DH_HMODULE> & );
	static BOOLEAN IsNull( HINSTANCE__ * );
	static HINSTANCE__ * GetNull();
	static void Destroy( HINSTANCE__ * );
private:
	/*0000*/ HINSTANCE__ * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<HINSTANCE__ *,SH_HMODULE> {
public:
	void SH<HINSTANCE__ *,SH_HMODULE>( HINSTANCE__ * );
	void SH<HINSTANCE__ *,SH_HMODULE>();
	void ~SH<HINSTANCE__ *,SH_HMODULE>();
	void Reset();
	HINSTANCE__ * Detach();
	void Attach( HINSTANCE__ * );
	void TransferTo( HINSTANCE__ * * );
	HINSTANCE__ * GetPtr() const;
	HINSTANCE__ * const * GetAddrIN() const;
	HINSTANCE__ * * GetAddrINOUT();
	HINSTANCE__ * * operator&();
	HINSTANCE__ * operator struct HINSTANCE__ *() const;
	void Swap( SH<HINSTANCE__ *,SH_HMODULE> & );
	static BOOLEAN IsNull( HINSTANCE__ * );
	static HINSTANCE__ * GetNull();
	static void Destroy( HINSTANCE__ * );
private:
	/*0000*/ HINSTANCE__ * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<HKEY__ *,SH_HKEY> {
public:
	void SH<HKEY__ *,SH_HKEY>( HKEY__ * );
	void SH<HKEY__ *,SH_HKEY>();
	void ~SH<HKEY__ *,SH_HKEY>();
	void Reset();
	HKEY__ * Detach();
	void Attach( HKEY__ * );
	void TransferTo( HKEY__ * * );
	HKEY__ * GetPtr() const;
	HKEY__ * const * GetAddrIN() const;
	HKEY__ * * GetAddrINOUT();
	HKEY__ * * operator&();
	HKEY__ * operator struct HKEY__ *() const;
	void Swap( SH<HKEY__ *,SH_HKEY> & );
	static BOOLEAN IsNull( HKEY__ * );
	static HKEY__ * GetNull();
	static void Destroy( HKEY__ * );
private:
	/*0000*/ HKEY__ * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<SC_HANDLE__ *,SH_SCM> {
public:
	void SH<SC_HANDLE__ *,SH_SCM>( SC_HANDLE__ * );
	void SH<SC_HANDLE__ *,SH_SCM>();
	void ~SH<SC_HANDLE__ *,SH_SCM>();
	void Reset();
	SC_HANDLE__ * Detach();
	void Attach( SC_HANDLE__ * );
	void TransferTo( SC_HANDLE__ * * );
	SC_HANDLE__ * GetPtr() const;
	SC_HANDLE__ * const * GetAddrIN() const;
	SC_HANDLE__ * * GetAddrINOUT();
	SC_HANDLE__ * * operator&();
	SC_HANDLE__ * operator struct SC_HANDLE__ *() const;
	void Swap( SH<SC_HANDLE__ *,SH_SCM> & );
	static BOOLEAN IsNull( SC_HANDLE__ * );
	static SC_HANDLE__ * GetNull();
	static void Destroy( SC_HANDLE__ * );
private:
	/*0000*/ SC_HANDLE__ * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<void *,DH_FILENT> {
public:
	void SH<void *,DH_FILENT>( void * );
	void SH<void *,DH_FILENT>();
	void ~SH<void *,DH_FILENT>();
	void Reset();
	void * Detach();
	void Attach( void * );
	void TransferTo( void * * );
	void * GetPtr() const;
	void * const * GetAddrIN() const;
	void * * GetAddrINOUT();
	void * * operator&();
	void * operator void *() const;
	void Swap( SH<void *,DH_FILENT> & );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
private:
	/*0000*/ void * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<void *,DH_HANDLE> {
public:
	void SH<void *,DH_HANDLE>( void * );
	void SH<void *,DH_HANDLE>();
	void ~SH<void *,DH_HANDLE>();
	void Reset();
	void * Detach();
	void Attach( void * );
	void TransferTo( void * * );
	void * GetPtr() const;
	void * const * GetAddrIN() const;
	void * * GetAddrINOUT();
	void * * operator&();
	void * operator void *() const;
	void Swap( SH<void *,DH_HANDLE> & );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
private:
	/*0000*/ void * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<void *,DH_WAITHANDLE> {
public:
	void SH<void *,DH_WAITHANDLE>( void * );
	void SH<void *,DH_WAITHANDLE>();
	void ~SH<void *,DH_WAITHANDLE>();
	void Reset();
	void * Detach();
	void Attach( void * );
	void TransferTo( void * * );
	void * GetPtr() const;
	void * const * GetAddrIN() const;
	void * * GetAddrINOUT();
	void * * operator&();
	void * operator void *() const;
	void Swap( SH<void *,DH_WAITHANDLE> & );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
private:
	/*0000*/ void * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<void *,SH_FILENT> {
public:
	void SH<void *,SH_FILENT>( void * );
	void SH<void *,SH_FILENT>();
	void ~SH<void *,SH_FILENT>();
	void Reset();
	void * Detach();
	void Attach( void * );
	void TransferTo( void * * );
	void * GetPtr() const;
	void * const * GetAddrIN() const;
	void * * GetAddrINOUT();
	void * * operator&();
	void * operator void *() const;
	void Swap( SH<void *,SH_FILENT> & );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
private:
	/*0000*/ void * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<void *,SH_FINDFILEW32> {
public:
	void SH<void *,SH_FINDFILEW32>( void * );
	void SH<void *,SH_FINDFILEW32>();
	void ~SH<void *,SH_FINDFILEW32>();
	void Reset();
	void * Detach();
	void Attach( void * );
	void TransferTo( void * * );
	void * GetPtr() const;
	void * const * GetAddrIN() const;
	void * * GetAddrINOUT();
	void * * operator&();
	void * operator void *() const;
	void Swap( SH<void *,SH_FINDFILEW32> & );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
private:
	/*0000*/ void * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<void *,SH_HANDLE> {
public:
	void SH<void *,SH_HANDLE>( void * );
	void SH<void *,SH_HANDLE>();
	void ~SH<void *,SH_HANDLE>();
	void Reset();
	void * Detach();
	void Attach( void * );
	void TransferTo( void * * );
	void * GetPtr() const;
	void * const * GetAddrIN() const;
	void * * GetAddrINOUT();
	void * * operator&();
	void * operator void *() const;
	void Swap( SH<void *,SH_HANDLE> & );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
private:
	/*0000*/ void * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<void *,SH_HGLOBAL> {
public:
	void SH<void *,SH_HGLOBAL>( void * );
	void SH<void *,SH_HGLOBAL>();
	void ~SH<void *,SH_HGLOBAL>();
	void Reset();
	void * Detach();
	void Attach( void * );
	void TransferTo( void * * );
	void * GetPtr() const;
	void * const * GetAddrIN() const;
	void * * GetAddrINOUT();
	void * * operator&();
	void * operator void *() const;
	void Swap( SH<void *,SH_HGLOBAL> & );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
private:
	/*0000*/ void * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<void *,SH_PSID> {
public:
	void SH<void *,SH_PSID>( void * );
	void SH<void *,SH_PSID>();
	void ~SH<void *,SH_PSID>();
	void Reset();
	void * Detach();
	void Attach( void * );
	void TransferTo( void * * );
	void * GetPtr() const;
	void * const * GetAddrIN() const;
	void * * GetAddrINOUT();
	void * * operator&();
	void * operator void *() const;
	void Swap( SH<void *,SH_PSID> & );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
private:
	/*0000*/ void * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH<void *,SH_WAITHANDLE> {
public:
	void SH<void *,SH_WAITHANDLE>( void * );
	void SH<void *,SH_WAITHANDLE>();
	void ~SH<void *,SH_WAITHANDLE>();
	void Reset();
	void * Detach();
	void Attach( void * );
	void TransferTo( void * * );
	void * GetPtr() const;
	void * const * GetAddrIN() const;
	void * * GetAddrINOUT();
	void * * operator&();
	void * operator void *() const;
	void Swap( SH<void *,SH_WAITHANDLE> & );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
private:
	/*0000*/ void * m_h;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

enum SHARE_MODE {
	MODE_SMB = 0x0,
	MODE_INPLACE = 0x1,
	MODE_LIBRARY = 0x2,
	MODE_CLASSIC = 0x3
};

enum SHARE_ROLE {
	SHARE_ROLE_INVALID = 0xffffffff,
	SHARE_ROLE_READER = 0x0,
	SHARE_ROLE_CONTRIBUTOR = 0x1,
	SHARE_ROLE_CO_OWNER = 0x2,
	SHARE_ROLE_OWNER = 0x3,
	SHARE_ROLE_CUSTOM = 0x4,
	SHARE_ROLE_MIXED = 0x5
};

struct SHCSCHANGENOTIFYSTRUCT {
	/*0000*/ LONG lEvent;
	/*0008*/ _ITEMIDLIST const __unaligned * pidl1;
	/*0010*/ _ITEMIDLIST const __unaligned * pidl2;
	/*0018*/
};

struct SHDRAGIMAGE {
	/*0000*/ tagSIZE sizeDragImage;
	/*0008*/ tagPOINT ptOffset;
	/*0010*/ HBITMAP__ * hbmpDragImage;
	/*0018*/ ULONG crColorKey;
	/*0020*/
};

struct SHELLHOOKINFO {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ tagRECT rc;
	/*0018*/
};

enum SHELLSEARCHCOMMAND {
	SSC_SEARCH_EXEC = 0x0,
	SSC_SEARCH_RETURNKEY = 0x1,
	SSC_AUTOCOMPLETE_DELETE = 0x2
};

enum SHELL_BROWSER_FRAME_SIZE_POSITION {
	SBFSP_XPOS = 0x1,
	SBFSP_XOFF = 0x2,
	SBFSP_YPOS = 0x4,
	SBFSP_YOFF = 0x8,
	SBFSP_WIDTHSET = 0x10,
	SBFSP_WIDTHINCR = 0x20,
	SBFSP_HEIGHTSET = 0x40,
	SBFSP_HEIGHTINCR = 0x80,
	SBFSP_RESTRICT = 0x80000000,
	SBFSP_XMASK = 0x3,
	SBFSP_YMASK = 0xc,
	SBFSP_MOVEMASK = 0xf,
	SBFSP_MOVERELMASK = 0xa,
	SBFSP_WIDTHMASK = 0x30,
	SBFSP_HEIGHTMASK = 0xc0,
	SBFSP_SIZEMASK = 0xf0,
	SBFSP_SIZERELMASK = 0xa0,
	SBFSP_RELOPMASK = 0xaa
};

struct SHELL_ITEM_RESOURCE {
	/*0000*/ _GUID guidType;
	/*0010*/ WCHAR szName[0x104];
	/*0218*/
};

enum SHELL_SEARCH_BAND_SEARCH_STATE {
	SSBSS_DEFAULT = 0x0,
	SSBSS_NEW_PROVIDERS = 0x1,
	SSBSS_WEB = 0x2,
	SSBSS_FOLDER = 0x3
};

enum SHGLOBALCOUNTER {
	GLOBALCOUNTER_SEARCHMANAGER = 0x0,
	GLOBALCOUNTER_SEARCHOPTIONS = 0x1,
	GLOBALCOUNTER_FOLDERSETTINGSCHANGE = 0x2,
	GLOBALCOUNTER_RATINGS = 0x3,
	GLOBALCOUNTER_APPROVEDSITES = 0x4,
	GLOBALCOUNTER_RESTRICTIONS = 0x5,
	GLOBALCOUNTER_SHELLSETTINGSCHANGED = 0x6,
	GLOBALCOUNTER_SYSTEMPIDLCHANGE = 0x7,
	GLOBALCOUNTER_OVERLAYMANAGER = 0x8,
	GLOBALCOUNTER_QUERYASSOCIATIONS = 0x9,
	GLOBALCOUNTER_IESESSIONS = 0xa,
	GLOBALCOUNTER_IEONLY_SESSIONS = 0xb,
	GLOBALCOUNTER_APPLICATION_DESTINATIONS = 0xc,
	__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = 0xd,
	GLOBALCOUNTER_BITBUCKETNUMDELETERS = 0xe,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = 0xf,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = 0x10,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = 0x11,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = 0x12,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = 0x13,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = 0x14,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = 0x15,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = 0x16,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = 0x17,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = 0x18,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = 0x19,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = 0x1a,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = 0x1b,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = 0x1c,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = 0x1d,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = 0x1e,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = 0x1f,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = 0x20,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = 0x21,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = 0x22,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = 0x23,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = 0x24,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = 0x25,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = 0x26,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = 0x27,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = 0x28,
	GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = 0x29,
	__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = 0x2a,
	__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = 0x2b,
	GLOBALCOUNTER_RECYCLEBINENUM = 0x2c,
	GLOBALCOUNTER_RECYCLEBINCORRUPTED = 0x2d,
	GLOBALCOUNTER_RATINGS_STATECOUNTER = 0x2e,
	GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = 0x2f,
	GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = 0x30,
	GLOBALCOUNTER_FOLDERDEFINITION_CACHE = 0x31,
	GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = 0x32,
	GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = 0x33,
	GLOBALCOUNTER_ASSOCCHANGED = 0x34,
	GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = 0x35,
	GLOBALCOUNTER_SETTINGSYNC_ENABLED = 0x36,
	GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER = 0x37,
	GLOBALCOUNTER_USERINFOCHANGED = 0x38,
	GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE = 0x39,
	GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE = 0x3a,
	GLOBALCOUNTER_MAXIMUMVALUE = 0x3b
};

enum SHREGDEL_FLAGS {
	SHREGDEL_DEFAULT = 0x0,
	SHREGDEL_HKCU = 0x1,
	SHREGDEL_HKLM = 0x10,
	SHREGDEL_BOTH = 0x11
};

enum SHREGENUM_FLAGS {
	SHREGENUM_DEFAULT = 0x0,
	SHREGENUM_HKCU = 0x1,
	SHREGENUM_HKLM = 0x10,
	SHREGENUM_BOTH = 0x11
};

struct SHRESTRICTIONITEMS {
	/*0000*/ INT iFlag;
	/*0008*/ WCHAR const * pszKey;
	/*0010*/ WCHAR const * pszValue;
	/*0018*/
};

class SH_FILENT : public SH<void *,SH_FILENT> {
public:
	void SH_FILENT( void * );
private:
	void SH_FILENT( SH_FILENT const & );
public:
	void SH_FILENT();
	SH_FILENT & operator=( void * );
private:
	SH_FILENT & operator=( SH_FILENT const & );
public:
	SH_FILENT & operator=( INT const );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
	void ~SH_FILENT();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_FINDFILEW32 : public SH<void *,SH_FINDFILEW32> {
public:
	void SH_FINDFILEW32( void * );
private:
	void SH_FINDFILEW32( SH_FINDFILEW32 const & );
public:
	void SH_FINDFILEW32();
	SH_FINDFILEW32 & operator=( void * );
private:
	SH_FINDFILEW32 & operator=( SH_FINDFILEW32 const & );
public:
	SH_FINDFILEW32 & operator=( INT const );
	static BOOLEAN IsNull( void * );
	static void * GetNull();
	static void Destroy( void * );
	void ~SH_FINDFILEW32();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_HANDLE : public SH<void *,SH_HANDLE> {
public:
	void SH_HANDLE( void * );
private:
	void SH_HANDLE( SH_HANDLE const & );
public:
	void SH_HANDLE();
	SH_HANDLE & operator=( void * );
private:
	SH_HANDLE & operator=( SH_HANDLE const & );
public:
	SH_HANDLE & operator=( INT const );
	static void Destroy( void * );
	void ~SH_HANDLE();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_HCURSOR : public SH<HICON__ *,SH_HCURSOR> {
public:
	void SH_HCURSOR( HICON__ * );
private:
	void SH_HCURSOR( SH_HCURSOR const & );
public:
	void SH_HCURSOR();
	SH_HCURSOR & operator=( HICON__ * );
private:
	SH_HCURSOR & operator=( SH_HCURSOR const & );
public:
	SH_HCURSOR & operator=( INT const );
	static void Destroy( HICON__ * );
	void ~SH_HCURSOR();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_HGLOBAL : public SH<void *,SH_HGLOBAL> {
public:
	void SH_HGLOBAL( void * );
private:
	void SH_HGLOBAL( SH_HGLOBAL const & );
public:
	void SH_HGLOBAL();
	SH_HGLOBAL & operator=( void * );
private:
	SH_HGLOBAL & operator=( SH_HGLOBAL const & );
public:
	SH_HGLOBAL & operator=( INT const );
	static void Destroy( void * );
	void ~SH_HGLOBAL();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_HICON : public SH<HICON__ *,SH_HICON> {
public:
	void SH_HICON( HICON__ * );
private:
	void SH_HICON( SH_HICON const & );
public:
	void SH_HICON();
	SH_HICON & operator=( HICON__ * );
private:
	SH_HICON & operator=( SH_HICON const & );
public:
	SH_HICON & operator=( INT const );
	static void Destroy( HICON__ * );
	void ~SH_HICON();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_HKEY : public SH<HKEY__ *,SH_HKEY> {
public:
	void SH_HKEY( HKEY__ * );
private:
	void SH_HKEY( SH_HKEY const & );
public:
	void SH_HKEY();
	SH_HKEY & operator=( HKEY__ * );
private:
	SH_HKEY & operator=( SH_HKEY const & );
public:
	SH_HKEY & operator=( INT const );
	static void Destroy( HKEY__ * );
	void ~SH_HKEY();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_HMODULE : public SH<HINSTANCE__ *,SH_HMODULE> {
public:
	void SH_HMODULE( HINSTANCE__ * );
private:
	void SH_HMODULE( SH_HMODULE const & );
public:
	void SH_HMODULE();
	SH_HMODULE & operator=( HINSTANCE__ * );
private:
	SH_HMODULE & operator=( SH_HMODULE const & );
public:
	SH_HMODULE & operator=( INT const );
	static void Destroy( HINSTANCE__ * );
	void ~SH_HMODULE();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_PSID : public SH<void *,SH_PSID> {
public:
	void SH_PSID( void * );
private:
	void SH_PSID( SH_PSID const & );
public:
	void SH_PSID();
	SH_PSID & operator=( void * );
private:
	SH_PSID & operator=( SH_PSID const & );
public:
	SH_PSID & operator=( INT const );
	static void Destroy( void * );
	void ~SH_PSID();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_SCM : public SH<SC_HANDLE__ *,SH_SCM> {
public:
	void SH_SCM( SC_HANDLE__ * );
private:
	void SH_SCM( SH_SCM const & );
public:
	void SH_SCM();
	SH_SCM & operator=( SC_HANDLE__ * );
private:
	SH_SCM & operator=( SH_SCM const & );
public:
	SH_SCM & operator=( INT const );
	static void Destroy( SC_HANDLE__ * );
	void ~SH_SCM();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SH_WAITHANDLE : public SH<void *,SH_WAITHANDLE> {
public:
	void SH_WAITHANDLE( void * );
private:
	void SH_WAITHANDLE( SH_WAITHANDLE const & );
public:
	void SH_WAITHANDLE();
	SH_WAITHANDLE & operator=( void * );
private:
	SH_WAITHANDLE & operator=( SH_WAITHANDLE const & );
public:
	SH_WAITHANDLE & operator=( INT const );
	static void Destroy( void * );
	void ~SH_WAITHANDLE();
	void * __vecDelDtor( UINT );
	/*0008*/
};

enum SIATTRIBFLAGS {
	SIATTRIBFLAGS_AND = 0x1,
	SIATTRIBFLAGS_OR = 0x2,
	SIATTRIBFLAGS_APPCOMPAT = 0x3,
	SIATTRIBFLAGS_MASK = 0x3,
	SIATTRIBFLAGS_ALLITEMS = 0x4000
};

enum SLGP_FLAGS {
	SLGP_SHORTPATH = 0x1,
	SLGP_UNCPRIORITY = 0x2,
	SLGP_RAWPATH = 0x4,
	SLGP_RELATIVEPRIORITY = 0x8
};

enum SLR_FLAGS {
	SLR_NONE = 0x0,
	SLR_NO_UI = 0x1,
	SLR_ANY_MATCH = 0x2,
	SLR_UPDATE = 0x4,
	SLR_NOUPDATE = 0x8,
	SLR_NOSEARCH = 0x10,
	SLR_NOTRACK = 0x20,
	SLR_NOLINKINFO = 0x40,
	SLR_INVOKE_MSI = 0x80,
	SLR_NO_UI_WITH_MSG_PUMP = 0x101,
	SLR_OFFER_DELETE_WITHOUT_FILE = 0x200,
	SLR_KNOWNFOLDER = 0x400,
	SLR_MACHINE_IN_LOCAL_TARGET = 0x800,
	SLR_UPDATE_MACHINE_AND_SID = 0x1000,
	SLR_NO_OBJECT_ID = 0x2000
};

struct SNSSAI_LIST {
	/*0000*/ ULONG count;
	/*0004*/ SNSSAI_TYPE SNSSAIValues[0x1];
	/*0018*/
};

struct SNSSAI_TYPE {
	/*0000*/ ULONG SNSSAIMasks;
	/*0004*/ UCHAR SST;
	/*0008*/ ULONG SD;
	/*000c*/ UCHAR MappedSST;
	/*0010*/ ULONG MappedSD;
	/*0014*/
};

struct SORTCOLUMN {
	/*0000*/ _tagpropertykey propkey;
	/*0014*/ INT direction;
	/*0018*/
};

enum SORT_ORDER_TYPE {
	SOT_DEFAULT = 0x0,
	SOT_IGNORE_FOLDERNESS = 0x1
};

class SP<long volatile ,SP_DECREF> {
public:
	void SP<long volatile ,SP_DECREF>( LONG volatile * );
	void SP<long volatile ,SP_DECREF>();
	void ~SP<long volatile ,SP_DECREF>();
	void Reset();
	LONG volatile * Detach();
	void Attach( LONG volatile * );
	void TransferTo( LONG volatile * * );
	LONG volatile * GetPtr() const;
	LONG volatile * const * GetAddrIN() const;
	LONG volatile * * GetAddrINOUT();
	LONG volatile * * operator&();
	LONG volatile * operator volatile long *() const;
	LONG volatile * operator->() const;
	LONG volatile & operator*() const;
	void Swap( SP<long volatile ,SP_DECREF> & );
	static BOOLEAN IsNull( LONG volatile * );
	static LONG volatile * GetNull();
	static void Destroy( LONG volatile * );
private:
	/*0000*/ LONG volatile * m_p;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP<long volatile ,SP_INCREF> {
public:
	void SP<long volatile ,SP_INCREF>( LONG volatile * );
	void SP<long volatile ,SP_INCREF>();
	void ~SP<long volatile ,SP_INCREF>();
	void Reset();
	LONG volatile * Detach();
	void Attach( LONG volatile * );
	void TransferTo( LONG volatile * * );
	LONG volatile * GetPtr() const;
	LONG volatile * const * GetAddrIN() const;
	LONG volatile * * GetAddrINOUT();
	LONG volatile * * operator&();
	LONG volatile * operator volatile long *() const;
	LONG volatile * operator->() const;
	LONG volatile & operator*() const;
	void Swap( SP<long volatile ,SP_INCREF> & );
	static BOOLEAN IsNull( LONG volatile * );
	static LONG volatile * GetNull();
	static void Destroy( LONG volatile * );
private:
	/*0000*/ LONG volatile * m_p;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP<unsigned char,SP_HLOCAL<unsigned char> > {
public:
	void SP<unsigned char,SP_HLOCAL<unsigned char> >( UCHAR * );
	void SP<unsigned char,SP_HLOCAL<unsigned char> >();
	void ~SP<unsigned char,SP_HLOCAL<unsigned char> >();
	void Reset();
	UCHAR * Detach();
	void Attach( UCHAR * );
	void TransferTo( UCHAR * * );
	UCHAR * GetPtr() const;
	UCHAR * const * GetAddrIN() const;
	UCHAR * * GetAddrINOUT();
	UCHAR * * operator&();
	UCHAR * operator unsigned char *() const;
	UCHAR * operator->() const;
	UCHAR & operator*() const;
	void Swap( SP<unsigned char,SP_HLOCAL<unsigned char> > & );
	static BOOLEAN IsNull( UCHAR * );
	static UCHAR * GetNull();
	static void Destroy( UCHAR * );
private:
	/*0000*/ UCHAR * m_p;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP<unsigned char,SP_MEM<unsigned char> > {
public:
	void SP<unsigned char,SP_MEM<unsigned char> >( UCHAR * );
	void SP<unsigned char,SP_MEM<unsigned char> >();
	void ~SP<unsigned char,SP_MEM<unsigned char> >();
	void Reset();
	UCHAR * Detach();
	void Attach( UCHAR * );
	void TransferTo( UCHAR * * );
	UCHAR * GetPtr() const;
	UCHAR * const * GetAddrIN() const;
	UCHAR * * GetAddrINOUT();
	UCHAR * * operator&();
	UCHAR * operator unsigned char *() const;
	UCHAR * operator->() const;
	UCHAR & operator*() const;
	void Swap( SP<unsigned char,SP_MEM<unsigned char> > & );
	static BOOLEAN IsNull( UCHAR * );
	static UCHAR * GetNull();
	static void Destroy( UCHAR * );
private:
	/*0000*/ UCHAR * m_p;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP<unsigned long,SP_MEM<unsigned long> > {
public:
	void SP<unsigned long,SP_MEM<unsigned long> >( ULONG * );
	void SP<unsigned long,SP_MEM<unsigned long> >();
	void ~SP<unsigned long,SP_MEM<unsigned long> >();
	void Reset();
	ULONG * Detach();
	void Attach( ULONG * );
	void TransferTo( ULONG * * );
	ULONG * GetPtr() const;
	ULONG * const * GetAddrIN() const;
	ULONG * * GetAddrINOUT();
	ULONG * * operator&();
	ULONG * operator unsigned long *() const;
	ULONG * operator->() const;
	ULONG & operator*() const;
	void Swap( SP<unsigned long,SP_MEM<unsigned long> > & );
	static BOOLEAN IsNull( ULONG * );
	static ULONG * GetNull();
	static void Destroy( ULONG * );
private:
	/*0000*/ ULONG * m_p;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP<unsigned short *,SP_MEM<unsigned short *> > {
public:
	void SP<unsigned short *,SP_MEM<unsigned short *> >( WCHAR * * );
	void SP<unsigned short *,SP_MEM<unsigned short *> >();
	void ~SP<unsigned short *,SP_MEM<unsigned short *> >();
	void Reset();
	WCHAR * * Detach();
	void Attach( WCHAR * * );
	void TransferTo( WCHAR * * * );
	WCHAR * * GetPtr() const;
	WCHAR * * const * GetAddrIN() const;
	WCHAR * * * GetAddrINOUT();
	WCHAR * * * operator&();
	WCHAR * * operator unsigned short **() const;
	WCHAR * * operator->() const;
	WCHAR * & operator*() const;
	void Swap( SP<unsigned short *,SP_MEM<unsigned short *> > & );
	static BOOLEAN IsNull( WCHAR * * );
	static WCHAR * * GetNull();
	static void Destroy( WCHAR * * );
private:
	/*0000*/ WCHAR * * m_p;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP<unsigned short,SP_MEM<unsigned short> > {
public:
	void SP<unsigned short,SP_MEM<unsigned short> >( WCHAR * );
	void SP<unsigned short,SP_MEM<unsigned short> >();
	void ~SP<unsigned short,SP_MEM<unsigned short> >();
	void Reset();
	WCHAR * Detach();
	void Attach( WCHAR * );
	void TransferTo( WCHAR * * );
	WCHAR * GetPtr() const;
	WCHAR * const * GetAddrIN() const;
	WCHAR * * GetAddrINOUT();
	WCHAR * * operator&();
	WCHAR * operator unsigned short *() const;
	WCHAR * operator->() const;
	WCHAR & operator*() const;
	void Swap( SP<unsigned short,SP_MEM<unsigned short> > & );
	static BOOLEAN IsNull( WCHAR * );
	static WCHAR * GetNull();
	static void Destroy( WCHAR * );
private:
	/*0000*/ WCHAR * m_p;
public:
	void * __vecDelDtor( UINT );
	/*0008*/
};

enum SPATIAL_INPUT_ACTIVATION_POLICY {
	SIAP_ACTIVATE = 0x0,
	SIAP_NOACTIVATE = 0x1,
	SIAP_ACTIVATEIFAPPNOTINFOREGROUND = 0x2,
	SIAP_EAT = 0x4
};

enum SPLASHSCREEN_IMAGE_TYPE {
	SSIT_SMALL = 0x0,
	SSIT_MEDIUM = 0x1,
	SSIT_LARGE = 0x2,
	SSIT_AUTO = 0x3,
	SSIT_COUNT = 0x4,
	SSIT_INVALID = 0x5
};

class SP_DECREF : public SP<long volatile ,SP_DECREF> {
public:
	void SP_DECREF( LONG volatile * );
private:
	void SP_DECREF( SP_DECREF const & );
public:
	void SP_DECREF();
	SP_DECREF & operator=( LONG volatile * );
private:
	SP_DECREF & operator=( SP_DECREF const & );
public:
	SP_DECREF & operator=( INT const );
	static void Destroy( LONG volatile * );
	void ~SP_DECREF();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP_HLOCAL<unsigned char> : public SP<unsigned char,SP_HLOCAL<unsigned char> > {
public:
	void SP_HLOCAL<unsigned char>( UCHAR * );
private:
	void SP_HLOCAL<unsigned char>( SP_HLOCAL<unsigned char> const & );
public:
	void SP_HLOCAL<unsigned char>();
	SP_HLOCAL<unsigned char> & operator=( UCHAR * );
private:
	SP_HLOCAL<unsigned char> & operator=( SP_HLOCAL<unsigned char> const & );
public:
	SP_HLOCAL<unsigned char> & operator=( INT const );
	static void Destroy( UCHAR * );
	void ~SP_HLOCAL<unsigned char>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP_INCREF : public SP<long volatile ,SP_INCREF> {
public:
	void SP_INCREF( LONG volatile * );
private:
	void SP_INCREF( SP_INCREF const & );
public:
	void SP_INCREF();
	SP_INCREF & operator=( LONG volatile * );
private:
	SP_INCREF & operator=( SP_INCREF const & );
public:
	SP_INCREF & operator=( INT const );
	static void Destroy( LONG volatile * );
	void ~SP_INCREF();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP_MEM<unsigned char> : public SP<unsigned char,SP_MEM<unsigned char> > {
public:
	void SP_MEM<unsigned char>( UCHAR * );
private:
	void SP_MEM<unsigned char>( SP_MEM<unsigned char> const & );
public:
	void SP_MEM<unsigned char>();
	SP_MEM<unsigned char> & operator=( UCHAR * );
private:
	SP_MEM<unsigned char> & operator=( SP_MEM<unsigned char> const & );
public:
	SP_MEM<unsigned char> & operator=( INT const );
	static void Destroy( UCHAR * );
	void ~SP_MEM<unsigned char>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP_MEM<unsigned long> : public SP<unsigned long,SP_MEM<unsigned long> > {
public:
	void SP_MEM<unsigned long>( ULONG * );
private:
	void SP_MEM<unsigned long>( SP_MEM<unsigned long> const & );
public:
	void SP_MEM<unsigned long>();
	SP_MEM<unsigned long> & operator=( ULONG * );
private:
	SP_MEM<unsigned long> & operator=( SP_MEM<unsigned long> const & );
public:
	SP_MEM<unsigned long> & operator=( INT const );
	static void Destroy( ULONG * );
	void ~SP_MEM<unsigned long>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP_MEM<unsigned short *> : public SP<unsigned short *,SP_MEM<unsigned short *> > {
public:
	void SP_MEM<unsigned short *>( WCHAR * * );
private:
	void SP_MEM<unsigned short *>( SP_MEM<unsigned short *> const & );
public:
	void SP_MEM<unsigned short *>();
	SP_MEM<unsigned short *> & operator=( WCHAR * * );
private:
	SP_MEM<unsigned short *> & operator=( SP_MEM<unsigned short *> const & );
public:
	SP_MEM<unsigned short *> & operator=( INT const );
	static void Destroy( WCHAR * * );
	void ~SP_MEM<unsigned short *>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

class SP_MEM<unsigned short> : public SP<unsigned short,SP_MEM<unsigned short> > {
public:
	void SP_MEM<unsigned short>( WCHAR * );
private:
	void SP_MEM<unsigned short>( SP_MEM<unsigned short> const & );
public:
	void SP_MEM<unsigned short>();
	SP_MEM<unsigned short> & operator=( WCHAR * );
private:
	SP_MEM<unsigned short> & operator=( SP_MEM<unsigned short> const & );
public:
	SP_MEM<unsigned short> & operator=( INT const );
	static void Destroy( WCHAR * );
	void ~SP_MEM<unsigned short>();
	void * __vecDelDtor( UINT );
	/*0008*/
};

struct SSPCallCipherTextData {
	/*0000*/ UINT cbCipherText;
	/*0008*/ UCHAR * pbCipherText;
	/*0010*/ UINT cbCiphersUsed;
	/*0018*/ UCHAR * pbCiphersUsed;
	/*0020*/ UINT cbCipherKey;
	/*0028*/ UCHAR * pbCipherKey;
	/*0030*/
};

struct SSPCallParameter {
	/*0000*/ UINT cbData;
	/*0008*/ UCHAR * pbData;
	/*0010*/
};

struct SSPCallParameters {
	/*0000*/ UINT cParams;
	/*0004*/ UINT cbData;
	/*0008*/ UCHAR * pbData;
	/*0010*/
};

struct STARTING_LCN_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER StartingLcn;
	/*0008*/
};

struct STARTING_LCN_INPUT_BUFFER_EX {
	/*0000*/ _LARGE_INTEGER StartingLcn;
	/*0008*/ ULONG Flags;
	/*0010*/
};

struct STARTING_VCN_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER StartingVcn;
	/*0008*/
};

struct STATUS_OBJECT_NOTIFICATION {
	/*0000*/ ULONG cbEntryID;
	/*0008*/ ENTRYID * lpEntryID;
	/*0010*/ ULONG cValues;
	/*0018*/ _SPropValue * lpPropVals;
	/*0020*/
};

enum STGOP {
	STGOP_MOVE = 0x1,
	STGOP_COPY = 0x2,
	STGOP_SYNC = 0x3,
	STGOP_REMOVE = 0x5,
	STGOP_RENAME = 0x6,
	STGOP_APPLYPROPERTIES = 0x8,
	STGOP_NEW = 0xa
};

enum STORAGEITEM_CREATION_TYPE {
	SICT_ITEM = 0x0,
	SICT_INFORMATION = 0x1
};

enum STORAGE_PROVIDER_FILE_FLAGS {
	SPFF_NONE = 0x0,
	SPFF_DOWNLOAD_BY_DEFAULT = 0x1,
	SPFF_CREATED_ON_THIS_DEVICE = 0x2
};

enum STPFLAG {
	STPF_NONE = 0x0,
	STPF_USEAPPTHUMBNAILALWAYS = 0x1,
	STPF_USEAPPTHUMBNAILWHENACTIVE = 0x2,
	STPF_USEAPPPEEKALWAYS = 0x4,
	STPF_USEAPPPEEKWHENACTIVE = 0x8
};

enum STREAM_REFERENCE_TYPE {
	STREAMREFERENCE_NONE = 0x0,
	STREAMREFERENCE_FILE = 0x1,
	STREAMREFERENCE_URI = 0x2,
	STREAMREFERENCE_STREAM = 0x3,
	STREAMREFERENCE_DLLRESOURCE = 0x4
};

enum STUB_PHASE {
	STUB_UNMARSHAL = 0x0,
	STUB_CALL_SERVER = 0x1,
	STUB_MARSHAL = 0x2,
	STUB_CALL_SERVER_NO_HRESULT = 0x3
};

enum SVUIA_STATUS {
	SVUIA_DEACTIVATE = 0x0,
	SVUIA_ACTIVATE_NOFOCUS = 0x1,
	SVUIA_ACTIVATE_FOCUS = 0x2,
	SVUIA_INPLACEACTIVATE = 0x3
};

enum SYNCMGR_CANCEL_REQUEST {
	SYNCMGR_CR_NONE = 0x0,
	SYNCMGR_CR_CANCEL_ITEM = 0x1,
	SYNCMGR_CR_CANCEL_ALL = 0x2,
	SYNCMGR_CR_MAX = 0x2
};

enum SYNCMGR_CONFLICT_ITEM_TYPE {
	SYNCMGR_CIT_UPDATED = 0x1,
	SYNCMGR_CIT_DELETED = 0x2
};

enum SYNCMGR_EVENT_LEVEL {
	SYNCMGR_EL_INFORMATION = 0x1,
	SYNCMGR_EL_WARNING = 0x2,
	SYNCMGR_EL_ERROR = 0x3,
	SYNCMGR_EL_MAX = 0x3
};

enum SYNCMGR_HANDLER_POLICIES {
	SYNCMGR_HPM_NONE = 0x0,
	SYNCMGR_HPM_PREVENT_ACTIVATE = 0x1,
	SYNCMGR_HPM_PREVENT_DEACTIVATE = 0x2,
	SYNCMGR_HPM_PREVENT_ENABLE = 0x4,
	SYNCMGR_HPM_PREVENT_DISABLE = 0x8,
	SYNCMGR_HPM_PREVENT_START_SYNC = 0x10,
	SYNCMGR_HPM_PREVENT_STOP_SYNC = 0x20,
	SYNCMGR_HPM_DISABLE_ENABLE = 0x100,
	SYNCMGR_HPM_DISABLE_DISABLE = 0x200,
	SYNCMGR_HPM_DISABLE_START_SYNC = 0x400,
	SYNCMGR_HPM_DISABLE_STOP_SYNC = 0x800,
	SYNCMGR_HPM_DISABLE_BROWSE = 0x1000,
	SYNCMGR_HPM_DISABLE_SCHEDULE = 0x2000,
	SYNCMGR_HPM_HIDDEN_BY_DEFAULT = 0x10000,
	SYNCMGR_HPM_BACKGROUND_SYNC_ONLY = 0x30,
	SYNCMGR_HPM_VALID_MASK = 0x12f3f
};

enum SYNCMGR_HANDLER_TYPE {
	SYNCMGR_HT_UNSPECIFIED = 0x0,
	SYNCMGR_HT_APPLICATION = 0x1,
	SYNCMGR_HT_DEVICE = 0x2,
	SYNCMGR_HT_FOLDER = 0x3,
	SYNCMGR_HT_SERVICE = 0x4,
	SYNCMGR_HT_COMPUTER = 0x5,
	SYNCMGR_HT_MIN = 0x0,
	SYNCMGR_HT_MAX = 0x5
};

enum SYNCMGR_PRESENTER_CHOICE {
	SYNCMGR_PC_NO_CHOICE = 0x0,
	SYNCMGR_PC_KEEP_ONE = 0x1,
	SYNCMGR_PC_KEEP_MULTIPLE = 0x2,
	SYNCMGR_PC_KEEP_RECENT = 0x3,
	SYNCMGR_PC_REMOVE_FROM_SYNC_SET = 0x4,
	SYNCMGR_PC_SKIP = 0x5
};

enum SYNCMGR_PRESENTER_NEXT_STEP {
	SYNCMGR_PNS_CONTINUE = 0x0,
	SYNCMGR_PNS_DEFAULT = 0x1,
	SYNCMGR_PNS_CANCEL = 0x2
};

enum SYNCMGR_PROGRESS_STATUS {
	SYNCMGR_PS_UPDATING = 0x1,
	SYNCMGR_PS_UPDATING_INDETERMINATE = 0x2,
	SYNCMGR_PS_SUCCEEDED = 0x3,
	SYNCMGR_PS_FAILED = 0x4,
	SYNCMGR_PS_CANCELED = 0x5,
	SYNCMGR_PS_DISCONNECTED = 0x6,
	SYNCMGR_PS_MAX = 0x6
};

enum SYNCMGR_RESOLUTION_FEEDBACK {
	SYNCMGR_RF_CONTINUE = 0x0,
	SYNCMGR_RF_REFRESH = 0x1,
	SYNCMGR_RF_CANCEL = 0x2
};

enum SYNCMGR_UPDATE_REASON {
	SYNCMGR_UR_ADDED = 0x0,
	SYNCMGR_UR_CHANGED = 0x1,
	SYNCMGR_UR_REMOVED = 0x2,
	SYNCMGR_UR_MAX = 0x2
};

enum SYNC_STREAM_COMPLETION_MODE {
	SSCM_DEFAULT = 0x0,
	SSCM_TRUNCATE = 0x1
};

enum SYNC_TRANSFER_STATUS {
	STS_NONE = 0x0,
	STS_NEEDSUPLOAD = 0x1,
	STS_NEEDSDOWNLOAD = 0x2,
	STS_TRANSFERRING = 0x4,
	STS_PAUSED = 0x8,
	STS_HASERROR = 0x10,
	STS_FETCHING_METADATA = 0x20,
	STS_USER_REQUESTED_REFRESH = 0x40,
	STS_HASWARNING = 0x80,
	STS_EXCLUDED = 0x100,
	STS_INCOMPLETE = 0x200,
	STS_PLACEHOLDER_IFEMPTY = 0x400
};

enum SYSGEOCLASS {
	GEOCLASS_NATION = 0x10,
	GEOCLASS_REGION = 0xe,
	GEOCLASS_ALL = 0x0
};

enum SYSGEOTYPE {
	GEO_NATION = 0x1,
	GEO_LATITUDE = 0x2,
	GEO_LONGITUDE = 0x3,
	GEO_ISO2 = 0x4,
	GEO_ISO3 = 0x5,
	GEO_RFC1766 = 0x6,
	GEO_LCID = 0x7,
	GEO_FRIENDLYNAME = 0x8,
	GEO_OFFICIALNAME = 0x9,
	GEO_TIMEZONES = 0xa,
	GEO_OFFICIALLANGUAGES = 0xb,
	GEO_ISO_UN_NUMBER = 0xc,
	GEO_PARENT = 0xd,
	GEO_DIALINGCODE = 0xe,
	GEO_CURRENCYCODE = 0xf,
	GEO_CURRENCYSYMBOL = 0x10,
	GEO_NAME = 0x11,
	GEO_ID = 0x12
};

enum SYSNLS_FUNCTION {
	COMPARE_STRING = 0x1
};

struct SYSTEM_BATTERY_STATE {
	/*0000*/ UCHAR AcOnLine;
	/*0001*/ UCHAR BatteryPresent;
	/*0002*/ UCHAR Charging;
	/*0003*/ UCHAR Discharging;
	/*0004*/ UCHAR Spare1[0x3];
	/*0007*/ UCHAR Tag;
	/*0008*/ ULONG MaxCapacity;
	/*000c*/ ULONG RemainingCapacity;
	/*0010*/ ULONG Rate;
	/*0014*/ ULONG EstimatedTime;
	/*0018*/ ULONG DefaultAlert1;
	/*001c*/ ULONG DefaultAlert2;
	/*0020*/
};

struct SYSTEM_POWER_CAPABILITIES {
	/*0000*/ UCHAR PowerButtonPresent;
	/*0001*/ UCHAR SleepButtonPresent;
	/*0002*/ UCHAR LidPresent;
	/*0003*/ UCHAR SystemS1;
	/*0004*/ UCHAR SystemS2;
	/*0005*/ UCHAR SystemS3;
	/*0006*/ UCHAR SystemS4;
	/*0007*/ UCHAR SystemS5;
	/*0008*/ UCHAR HiberFilePresent;
	/*0009*/ UCHAR FullWake;
	/*000a*/ UCHAR VideoDimPresent;
	/*000b*/ UCHAR ApmPresent;
	/*000c*/ UCHAR UpsPresent;
	/*000d*/ UCHAR ThermalControl;
	/*000e*/ UCHAR ProcessorThrottle;
	/*000f*/ UCHAR ProcessorMinThrottle;
	/*0010*/ UCHAR ProcessorMaxThrottle;
	/*0011*/ UCHAR FastSystemS4;
	/*0012*/ UCHAR Hiberboot;
	/*0013*/ UCHAR WakeAlarmPresent;
	/*0014*/ UCHAR AoAc;
	/*0015*/ UCHAR DiskSpinDown;
	/*0016*/ UCHAR HiberFileType;
	/*0017*/ UCHAR AoAcConnectivitySupported;
	/*0018*/ UCHAR spare3[0x6];
	/*001e*/ UCHAR SystemBatteriesPresent;
	/*001f*/ UCHAR BatteriesAreShortTerm;
	/*0020*/ BATTERY_REPORTING_SCALE BatteryScale[0x3];
	/*0038*/ _SYSTEM_POWER_STATE AcOnLineWake;
	/*003c*/ _SYSTEM_POWER_STATE SoftLidWake;
	/*0040*/ _SYSTEM_POWER_STATE RtcWake;
	/*0044*/ _SYSTEM_POWER_STATE MinDeviceWakeState;
	/*0048*/ _SYSTEM_POWER_STATE DefaultLowLatencyWake;
	/*004c*/
};

enum SYSTEM_POWER_CONDITION {
	PoAc = 0x0,
	PoDc = 0x1,
	PoHot = 0x2,
	PoConditionMaximum = 0x3
};

struct SYSTEM_POWER_LEVEL {
	/*0000*/ UCHAR Enable;
	/*0001*/ UCHAR Spare[0x3];
	/*0004*/ ULONG BatteryLevel;
	/*0008*/ POWER_ACTION_POLICY PowerPolicy;
	/*0014*/ _SYSTEM_POWER_STATE MinSystemState;
	/*0018*/
};

class ScopeGuardImpl1<void (__cdecl*)(void *),WWAN_INTERFACE_OBJECT *> : public ScopeGuardImplBase {
public:
	static ScopeGuardImpl1<void (__cdecl*)(void *),WWAN_INTERFACE_OBJECT *> MakeGuard( BOOLEAN , void (* )( void * ), WWAN_INTERFACE_OBJECT * );
	void ~ScopeGuardImpl1<void (__cdecl*)(void *),WWAN_INTERFACE_OBJECT *>();
	void Execute();
	void ScopeGuardImpl1<void (__cdecl*)(void *),WWAN_INTERFACE_OBJECT *>( ScopeGuardImpl1<void (__cdecl*)(void *),WWAN_INTERFACE_OBJECT *> const & );
protected:
	void ScopeGuardImpl1<void (__cdecl*)(void *),WWAN_INTERFACE_OBJECT *>( BOOLEAN , void (* )( void * ), WWAN_INTERFACE_OBJECT * );
	/*0008*/ void (* fun_)( void * );
	/*0010*/ WWAN_INTERFACE_OBJECT * const p1_;
public:
	void * __vecDelDtor( UINT );
	/*0018*/
};

class ScopeGuardImpl1<void (__cdecl*)(void *),_WCM_PROFILE_INFO_LIST *> : public ScopeGuardImplBase {
public:
	static ScopeGuardImpl1<void (__cdecl*)(void *),_WCM_PROFILE_INFO_LIST *> MakeGuard( BOOLEAN , void (* )( void * ), _WCM_PROFILE_INFO_LIST * );
	void ~ScopeGuardImpl1<void (__cdecl*)(void *),_WCM_PROFILE_INFO_LIST *>();
	void Execute();
	void ScopeGuardImpl1<void (__cdecl*)(void *),_WCM_PROFILE_INFO_LIST *>( ScopeGuardImpl1<void (__cdecl*)(void *),_WCM_PROFILE_INFO_LIST *> const & );
protected:
	void ScopeGuardImpl1<void (__cdecl*)(void *),_WCM_PROFILE_INFO_LIST *>( BOOLEAN , void (* )( void * ), _WCM_PROFILE_INFO_LIST * );
	/*0008*/ void (* fun_)( void * );
	/*0010*/ _WCM_PROFILE_INFO_LIST * const p1_;
public:
	void * __vecDelDtor( UINT );
	/*0018*/
};

class ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_AVAILABLE_NETWORK_LIST *> : public ScopeGuardImplBase {
public:
	static ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_AVAILABLE_NETWORK_LIST *> MakeGuard( BOOLEAN , void (* )( void * ), _WLAN_AVAILABLE_NETWORK_LIST * );
	void ~ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_AVAILABLE_NETWORK_LIST *>();
	void Execute();
	void ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_AVAILABLE_NETWORK_LIST *>( ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_AVAILABLE_NETWORK_LIST *> const & );
protected:
	void ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_AVAILABLE_NETWORK_LIST *>( BOOLEAN , void (* )( void * ), _WLAN_AVAILABLE_NETWORK_LIST * );
	/*0008*/ void (* fun_)( void * );
	/*0010*/ _WLAN_AVAILABLE_NETWORK_LIST * const p1_;
public:
	void * __vecDelDtor( UINT );
	/*0018*/
};

class ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_CONNECTION_ATTRIBUTES *> : public ScopeGuardImplBase {
public:
	static ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_CONNECTION_ATTRIBUTES *> MakeGuard( BOOLEAN , void (* )( void * ), _WLAN_CONNECTION_ATTRIBUTES * );
	void ~ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_CONNECTION_ATTRIBUTES *>();
	void Execute();
	void ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_CONNECTION_ATTRIBUTES *>( ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_CONNECTION_ATTRIBUTES *> const & );
protected:
	void ScopeGuardImpl1<void (__cdecl*)(void *),_WLAN_CONNECTION_ATTRIBUTES *>( BOOLEAN , void (* )( void * ), _WLAN_CONNECTION_ATTRIBUTES * );
	/*0008*/ void (* fun_)( void * );
	/*0010*/ _WLAN_CONNECTION_ATTRIBUTES * const p1_;
public:
	void * __vecDelDtor( UINT );
	/*0018*/
};

class ScopeGuardImpl1<void (__cdecl*)(void *),_WWAN_PROFILE_DATA *> : public ScopeGuardImplBase {
public:
	static ScopeGuardImpl1<void (__cdecl*)(void *),_WWAN_PROFILE_DATA *> MakeGuard( BOOLEAN , void (* )( void * ), _WWAN_PROFILE_DATA * );
	void ~ScopeGuardImpl1<void (__cdecl*)(void *),_WWAN_PROFILE_DATA *>();
	void Execute();
	void ScopeGuardImpl1<void (__cdecl*)(void *),_WWAN_PROFILE_DATA *>( ScopeGuardImpl1<void (__cdecl*)(void *),_WWAN_PROFILE_DATA *> const & );
protected:
	void ScopeGuardImpl1<void (__cdecl*)(void *),_WWAN_PROFILE_DATA *>( BOOLEAN , void (* )( void * ), _WWAN_PROFILE_DATA * );
	/*0008*/ void (* fun_)( void * );
	/*0010*/ _WWAN_PROFILE_DATA * const p1_;
public:
	void * __vecDelDtor( UINT );
	/*0018*/
};

class ScopeGuardImpl1<void (__cdecl*)(void *),unsigned char *> : public ScopeGuardImplBase {
public:
	static ScopeGuardImpl1<void (__cdecl*)(void *),unsigned char *> MakeGuard( BOOLEAN , void (* )( void * ), UCHAR * );
	void ~ScopeGuardImpl1<void (__cdecl*)(void *),unsigned char *>();
	void Execute();
	void ScopeGuardImpl1<void (__cdecl*)(void *),unsigned char *>( ScopeGuardImpl1<void (__cdecl*)(void *),unsigned char *> const & );
protected:
	void ScopeGuardImpl1<void (__cdecl*)(void *),unsigned char *>( BOOLEAN , void (* )( void * ), UCHAR * );
	/*0008*/ void (* fun_)( void * );
	/*0010*/ UCHAR * const p1_;
public:
	void * __vecDelDtor( UINT );
	/*0018*/
};

class ScopeGuardImplBase {
	ScopeGuardImplBase & operator=( ScopeGuardImplBase const & );
protected:
	void ~ScopeGuardImplBase();
public:
	void ScopeGuardImplBase( BOOLEAN );
protected:
	void ScopeGuardImplBase( ScopeGuardImplBase const & );
	/*0000*/ BOOLEAN dismissed_;
public:
	void Dismiss() const;
protected:
	void * __vecDelDtor( UINT );
	/*0001*/
};

enum TASK_FLOW_ID {
	TFID_ADD_USER = 0x0,
	TFID_CONNECT_LOCAL_USER = 0x1,
	TFID_CONNECT_DOMAIN_USER = 0x2,
	TFID_DISCONNECT_USER = 0x3,
	TFID_DISCONNECT_DOMAIN_USER = 0x4,
	TFID_CHANGE_LOCAL_PASSWORD = 0x5,
	TFID_CHANGE_ONLINE_PASSWORD = 0x6,
	TFID_COMPLETEACCOUNT = 0x7,
	TFID_TASKFLOW_MAX = 0x8
};

struct TBBUTTONINFOA {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwMask;
	/*0008*/ INT idCommand;
	/*000c*/ INT iImage;
	/*0010*/ UCHAR fsState;
	/*0011*/ UCHAR fsStyle;
	/*0012*/ USHORT cx;
	/*0018*/ ULONGLONG lParam;
	/*0020*/ CHAR * pszText;
	/*0028*/ INT cchText;
	/*0030*/
};

struct TBBUTTONINFOW {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwMask;
	/*0008*/ INT idCommand;
	/*000c*/ INT iImage;
	/*0010*/ UCHAR fsState;
	/*0011*/ UCHAR fsStyle;
	/*0012*/ USHORT cx;
	/*0018*/ ULONGLONG lParam;
	/*0020*/ WCHAR * pszText;
	/*0028*/ INT cchText;
	/*0030*/
};

struct TBINSERTMARK {
	/*0000*/ INT iButton;
	/*0004*/ ULONG dwFlags;
	/*0008*/
};

struct TBMETRICS {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwMask;
	/*0008*/ INT cxPad;
	/*000c*/ INT cyPad;
	/*0010*/ INT cxBarPad;
	/*0014*/ INT cyBarPad;
	/*0018*/ INT cxButtonSpacing;
	/*001c*/ INT cyButtonSpacing;
	/*0020*/
};

enum TBPFLAG {
	TBPF_NOPROGRESS = 0x0,
	TBPF_INDETERMINATE = 0x1,
	TBPF_NORMAL = 0x2,
	TBPF_ERROR = 0x4,
	TBPF_PAUSED = 0x8
};

struct TBREPLACEBITMAP {
	/*0000*/ HINSTANCE__ * hInstOld;
	/*0008*/ ULONGLONG nIDOld;
	/*0010*/ HINSTANCE__ * hInstNew;
	/*0018*/ ULONGLONG nIDNew;
	/*0020*/ INT nButtons;
	/*0028*/
};

enum TCP_CONNECTION_OFFLOAD_STATE {
	TcpConnectionOffloadStateInHost = 0x0,
	TcpConnectionOffloadStateOffloading = 0x1,
	TcpConnectionOffloadStateOffloaded = 0x2,
	TcpConnectionOffloadStateUploading = 0x3,
	TcpConnectionOffloadStateMax = 0x4
};

enum TCP_ESTATS_TYPE {
	TcpConnectionEstatsSynOpts = 0x0,
	TcpConnectionEstatsData = 0x1,
	TcpConnectionEstatsSndCong = 0x2,
	TcpConnectionEstatsPath = 0x3,
	TcpConnectionEstatsSendBuff = 0x4,
	TcpConnectionEstatsRec = 0x5,
	TcpConnectionEstatsObsRec = 0x6,
	TcpConnectionEstatsBandwidth = 0x7,
	TcpConnectionEstatsFineRtt = 0x8,
	TcpConnectionEstatsMaximum = 0x9
};

enum TCP_RTO_ALGORITHM {
	TcpRtoAlgorithmOther = 0x1,
	TcpRtoAlgorithmConstant = 0x2,
	TcpRtoAlgorithmRsre = 0x3,
	TcpRtoAlgorithmVanj = 0x4,
	MIB_TCP_RTO_OTHER = 0x1,
	MIB_TCP_RTO_CONSTANT = 0x2,
	MIB_TCP_RTO_RSRE = 0x3,
	MIB_TCP_RTO_VANJ = 0x4
};

enum TCP_SOFT_ERROR {
	TcpErrorNone = 0x0,
	TcpErrorBelowDataWindow = 0x1,
	TcpErrorAboveDataWindow = 0x2,
	TcpErrorBelowAckWindow = 0x3,
	TcpErrorAboveAckWindow = 0x4,
	TcpErrorBelowTsWindow = 0x5,
	TcpErrorAboveTsWindow = 0x6,
	TcpErrorDataChecksumError = 0x7,
	TcpErrorDataLengthError = 0x8,
	TcpErrorMaxSoftError = 0x9
};

struct THUMBBUTTON {
	/*0000*/ THUMBBUTTONMASK dwMask;
	/*0004*/ UINT iId;
	/*0008*/ UINT iBitmap;
	/*0010*/ HICON__ * hIcon;
	/*0018*/ WCHAR szTip[0x104];
	/*0220*/ THUMBBUTTONFLAGS dwFlags;
	/*0228*/
};

enum THUMBBUTTONFLAGS {
	THBF_ENABLED = 0x0,
	THBF_DISABLED = 0x1,
	THBF_DISMISSONCLICK = 0x2,
	THBF_NOBACKGROUND = 0x4,
	THBF_HIDDEN = 0x8,
	THBF_NONINTERACTIVE = 0x10
};

enum THUMBBUTTONMASK {
	THB_BITMAP = 0x1,
	THB_ICON = 0x2,
	THB_TOOLTIP = 0x4,
	THB_FLAGS = 0x8
};

struct TLG_AGGR_SESSION {
	/*0000*/ EVENT_ENTRY_LOOKUP_TABLE TlgHashTable;
	/*0108*/ _RTL_SRWLOCK SharedLock;
	/*0110*/ TLG_AGG_INTERNAL_STATS InternalStats;
	/*0138*/ void (* pEnableCallback)( _GUID const * , ULONG , UCHAR , ULONGLONG , ULONGLONG , _EVENT_FILTER_DESCRIPTOR * , void * );
	/*0140*/ void * pCallbackContext;
	/*0148*/ _tlgProvider_t const * hProvider;
	/*0150*/ TLG_AGGR_SESSION * NextSession;
	/*0158*/ _TP_TIMER * Timer;
	/*0160*/ UINT FlushPeriod_ms;
	/*0164*/ UCHAR CompleteFlushPending;
	/*0168*/
};

struct TLG_AGG_INTERNAL_STATS {
	/*0000*/ ULONGLONG TotalEntriesFlushed;
	/*0008*/ ULONGLONG NumFlushes;
	/*0010*/ ULONG MaxEntriesStored;
	/*0014*/ ULONG MaxEntriesFlushed;
	/*0018*/ ULONG MinEntriesFlushed;
	/*001c*/ ULONG NumBucketLimitReached;
	/*0020*/ ULONG NumAllocationFailures;
	/*0024*/ ULONG NumLargeEventFailures;
	/*0028*/
};

struct TRAFFIC_DESCRIPTOR {
	/*0000*/ ULONG TrafficDescriptorMasks;
	/*0004*/ INT fMatchAllRule;
	/*0008*/ ULONG AppId;
	/*000c*/ ULONG ConnectionCapabilities;
	/*0010*/ WCHAR TrafficDescriptorDNN[0x65];
	/*00da*/ WCHAR DestinationFQDN[0x104];
	/*02e4*/ IP_DESCRIPTOR IPDescriptor;
	/*0314*/
};

enum TRYHARDERSCOPES {
	THS_SPECIFIC_LIBRARY = 0x0,
	THS_ALL_LIBRARIES = 0x1,
	THS_ALL_USER_LIBRARIES = 0x2,
	THS_COMPUTER = 0x3,
	THS_CUSTOM_CANCEL = 0x4,
	THS_CUSTOM_NAVIGATE = 0x5,
	THS_INTERNET = 0x6,
	THS_GP_LIBRARY = 0x7,
	THS_GP_URL = 0x8,
	THS_SUBFOLDER = 0x9,
	THS_FILE_CONTENTS = 0xa,
	THS_UNUSED = 0xb,
	THS_OTHER = 0xc,
	THS_HISTORYVAULT = 0xd
};

enum TUNNEL_TYPE {
	TUNNEL_TYPE_NONE = 0x0,
	TUNNEL_TYPE_OTHER = 0x1,
	TUNNEL_TYPE_DIRECT = 0x2,
	TUNNEL_TYPE_6TO4 = 0xb,
	TUNNEL_TYPE_ISATAP = 0xd,
	TUNNEL_TYPE_TEREDO = 0xe,
	TUNNEL_TYPE_IPHTTPS = 0xf
};

enum TargetPlatformProperty {
	TargetPlatformProperty_Platform = 0x1,
	TargetPlatformProperty_MinVersion = 0x2,
	TargetPlatformProperty_MaxVersion = 0x3,
	TargetPlatformProperty_StartOfReserved = 0x4
};

enum TlgIn_t {
	TlgInNULL = 0x0,
	TlgInUNICODESTRING = 0x1,
	TlgInANSISTRING = 0x2,
	TlgInINT8 = 0x3,
	TlgInUINT8 = 0x4,
	TlgInINT16 = 0x5,
	TlgInUINT16 = 0x6,
	TlgInINT32 = 0x7,
	TlgInUINT32 = 0x8,
	TlgInINT64 = 0x9,
	TlgInUINT64 = 0xa,
	TlgInFLOAT = 0xb,
	TlgInDOUBLE = 0xc,
	TlgInBOOL32 = 0xd,
	TlgInBINARY = 0xe,
	TlgInGUID = 0xf,
	_TlgInPOINTER_unsupported = 0x10,
	TlgInFILETIME = 0x11,
	TlgInSYSTEMTIME = 0x12,
	TlgInSID = 0x13,
	TlgInHEXINT32 = 0x14,
	TlgInHEXINT64 = 0x15,
	TlgInCOUNTEDSTRING = 0x16,
	TlgInCOUNTEDANSISTRING = 0x17,
	_TlgInSTRUCT = 0x18,
	TlgInCOUNTEDBINARY = 0x19,
	_TlgInMax = 0x1a,
	TlgInINTPTR = 0x9,
	TlgInUINTPTR = 0xa,
	TlgInPOINTER = 0x15,
	TlgInLONG = 0x7,
	TlgInULONG = 0x8,
	TlgInHEXLONG = 0x14,
	_TlgInCcount = 0x20,
	TlgInVcount = 0x40,
	_TlgInChain = 0x80,
	_TlgInCustom = 0x60,
	_TlgInTypeMask = 0x1f,
	_TlgInCountMask = 0x60,
	_TlgInFlagMask = 0xe0
};

enum TlgOut_t {
	TlgOutNULL = 0x0,
	TlgOutNOPRINT = 0x1,
	TlgOutSTRING = 0x2,
	TlgOutBOOLEAN = 0x3,
	TlgOutHEX = 0x4,
	TlgOutPID = 0x5,
	TlgOutTID = 0x6,
	TlgOutPORT = 0x7,
	TlgOutIPV4 = 0x8,
	TlgOutIPV6 = 0x9,
	TlgOutSOCKETADDRESS = 0xa,
	TlgOutXML = 0xb,
	TlgOutJSON = 0xc,
	TlgOutWIN32ERROR = 0xd,
	TlgOutNTSTATUS = 0xe,
	TlgOutHRESULT = 0xf,
	TlgOutFILETIME = 0x10,
	TlgOutSIGNED = 0x11,
	TlgOutUNSIGNED = 0x12,
	TlgOutUTF8 = 0x23,
	TlgOutPKCS7_WITH_TYPE_INFO = 0x24,
	TlgOutCODE_POINTER = 0x25,
	TlgOutDATETIME_UTC = 0x26,
	_TlgOutMax = 0x27,
	_TlgOutChain = 0x80,
	_TlgOutTypeMask = 0x7f
};

class TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider> : public _TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5> {
	void OnStarted();
	void OnStopped();
public:
	void TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>( TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider> && );
	void TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>();
	TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider> & operator=( TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider> && );
	_tlgProvider_t const * Provider() const;
	void SetRelatedActivityId( _GUID const * );
	void SetRelatedActivityId( _GUID const & );
	void ~TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>();
	void * __vecDelDtor( UINT );
	/*0028*/
};

class TraceLoggingThreadActivityIdSetter {
	/*0000*/ _GUID m_ActivityId;
	/*0010*/ _GUID m_SavedActivityId;
public:
	void TraceLoggingThreadActivityIdSetter( _GUID const * );
	void TraceLoggingThreadActivityIdSetter( _GUID const & );
private:
	void TraceLoggingThreadActivityIdSetter( TraceLoggingThreadActivityIdSetter const & );
	TraceLoggingThreadActivityIdSetter const & operator=( TraceLoggingThreadActivityIdSetter const & );
public:
	void ~TraceLoggingThreadActivityIdSetter();
	void * __vecDelDtor( UINT );
	/*0020*/
};

enum TrustLevel {
	BaseTrust = 0x0,
	PartialTrust = 0x1,
	FullTrust = 0x2
};

struct UDATE {
	/*0000*/ _SYSTEMTIME st;
	/*0010*/ USHORT wDayOfYear;
	/*0012*/
};

enum URLIS {
	URLIS_URL = 0x0,
	URLIS_OPAQUE = 0x1,
	URLIS_NOHISTORY = 0x2,
	URLIS_FILEURL = 0x3,
	URLIS_APPLIABLE = 0x4,
	URLIS_DIRECTORY = 0x5,
	URLIS_HASQUERY = 0x6
};

struct URL_COMPONENTSW {
	/*0000*/ ULONG dwStructSize;
	/*0008*/ WCHAR * lpszScheme;
	/*0010*/ ULONG dwSchemeLength;
	/*0014*/ INTERNET_SCHEME nScheme;
	/*0018*/ WCHAR * lpszHostName;
	/*0020*/ ULONG dwHostNameLength;
	/*0024*/ USHORT nPort;
	/*0028*/ WCHAR * lpszUserName;
	/*0030*/ ULONG dwUserNameLength;
	/*0038*/ WCHAR * lpszPassword;
	/*0040*/ ULONG dwPasswordLength;
	/*0048*/ WCHAR * lpszUrlPath;
	/*0050*/ ULONG dwUrlPathLength;
	/*0058*/ WCHAR * lpszExtraInfo;
	/*0060*/ ULONG dwExtraInfoLength;
	/*0068*/
};

enum URL_PART {
	URL_PART_NONE = 0x0,
	URL_PART_SCHEME = 0x1,
	URL_PART_HOSTNAME = 0x2,
	URL_PART_USERNAME = 0x3,
	URL_PART_PASSWORD = 0x4,
	URL_PART_PORT = 0x5,
	URL_PART_QUERY = 0x6
};

enum URL_SCHEME {
	URL_SCHEME_INVALID = 0xffffffff,
	URL_SCHEME_UNKNOWN = 0x0,
	URL_SCHEME_FTP = 0x1,
	URL_SCHEME_HTTP = 0x2,
	URL_SCHEME_GOPHER = 0x3,
	URL_SCHEME_MAILTO = 0x4,
	URL_SCHEME_NEWS = 0x5,
	URL_SCHEME_NNTP = 0x6,
	URL_SCHEME_TELNET = 0x7,
	URL_SCHEME_WAIS = 0x8,
	URL_SCHEME_FILE = 0x9,
	URL_SCHEME_MK = 0xa,
	URL_SCHEME_HTTPS = 0xb,
	URL_SCHEME_SHELL = 0xc,
	URL_SCHEME_SNEWS = 0xd,
	URL_SCHEME_LOCAL = 0xe,
	URL_SCHEME_JAVASCRIPT = 0xf,
	URL_SCHEME_VBSCRIPT = 0x10,
	URL_SCHEME_ABOUT = 0x11,
	URL_SCHEME_RES = 0x12,
	URL_SCHEME_MSSHELLROOTED = 0x13,
	URL_SCHEME_MSSHELLIDLIST = 0x14,
	URL_SCHEME_MSHELP = 0x15,
	URL_SCHEME_MSSHELLDEVICE = 0x16,
	URL_SCHEME_WILDCARD = 0x17,
	URL_SCHEME_SEARCH_MS = 0x18,
	URL_SCHEME_SEARCH = 0x19,
	URL_SCHEME_KNOWNFOLDER = 0x1a,
	URL_SCHEME_MAXVALUE = 0x1b
};

enum USER_INTERACTION_MODE {
	UIM_MOUSE = 0x0,
	UIM_TOUCH = 0x1
};

struct USN_JOURNAL_DATA_V0 {
	/*0000*/ ULONGLONG UsnJournalID;
	/*0008*/ LONGLONG FirstUsn;
	/*0010*/ LONGLONG NextUsn;
	/*0018*/ LONGLONG LowestValidUsn;
	/*0020*/ LONGLONG MaxUsn;
	/*0028*/ ULONGLONG MaximumSize;
	/*0030*/ ULONGLONG AllocationDelta;
	/*0038*/
};

struct USN_JOURNAL_DATA_V1 {
	/*0000*/ ULONGLONG UsnJournalID;
	/*0008*/ LONGLONG FirstUsn;
	/*0010*/ LONGLONG NextUsn;
	/*0018*/ LONGLONG LowestValidUsn;
	/*0020*/ LONGLONG MaxUsn;
	/*0028*/ ULONGLONG MaximumSize;
	/*0030*/ ULONGLONG AllocationDelta;
	/*0038*/ USHORT MinSupportedMajorVersion;
	/*003a*/ USHORT MaxSupportedMajorVersion;
	/*0040*/
};

struct USN_JOURNAL_DATA_V2 {
	/*0000*/ ULONGLONG UsnJournalID;
	/*0008*/ LONGLONG FirstUsn;
	/*0010*/ LONGLONG NextUsn;
	/*0018*/ LONGLONG LowestValidUsn;
	/*0020*/ LONGLONG MaxUsn;
	/*0028*/ ULONGLONG MaximumSize;
	/*0030*/ ULONGLONG AllocationDelta;
	/*0038*/ USHORT MinSupportedMajorVersion;
	/*003a*/ USHORT MaxSupportedMajorVersion;
	/*003c*/ ULONG Flags;
	/*0040*/ ULONGLONG RangeTrackChunkSize;
	/*0048*/ LONGLONG RangeTrackFileSizeThreshold;
	/*0050*/
};

struct USN_RANGE_TRACK_OUTPUT {
	/*0000*/ LONGLONG Usn;
	/*0008*/
};

struct USN_RECORD_COMMON_HEADER {
	/*0000*/ ULONG RecordLength;
	/*0004*/ USHORT MajorVersion;
	/*0006*/ USHORT MinorVersion;
	/*0008*/
};

struct USN_RECORD_EXTENT {
	/*0000*/ LONGLONG Offset;
	/*0008*/ LONGLONG Length;
	/*0010*/
};

union USN_RECORD_UNION {
	/*0000*/ USN_RECORD_COMMON_HEADER Header;
	/*0000*/ USN_RECORD_V2 V2;
	/*0000*/ USN_RECORD_V3 V3;
	/*0000*/ USN_RECORD_V4 V4;
	/*0050*/
};

struct USN_RECORD_V2 {
	/*0000*/ ULONG RecordLength;
	/*0004*/ USHORT MajorVersion;
	/*0006*/ USHORT MinorVersion;
	/*0008*/ ULONGLONG FileReferenceNumber;
	/*0010*/ ULONGLONG ParentFileReferenceNumber;
	/*0018*/ LONGLONG Usn;
	/*0020*/ _LARGE_INTEGER TimeStamp;
	/*0028*/ ULONG Reason;
	/*002c*/ ULONG SourceInfo;
	/*0030*/ ULONG SecurityId;
	/*0034*/ ULONG FileAttributes;
	/*0038*/ USHORT FileNameLength;
	/*003a*/ USHORT FileNameOffset;
	/*003c*/ WCHAR FileName[0x1];
	/*0040*/
};

struct USN_RECORD_V3 {
	/*0000*/ ULONG RecordLength;
	/*0004*/ USHORT MajorVersion;
	/*0006*/ USHORT MinorVersion;
	/*0008*/ _FILE_ID_128 FileReferenceNumber;
	/*0018*/ _FILE_ID_128 ParentFileReferenceNumber;
	/*0028*/ LONGLONG Usn;
	/*0030*/ _LARGE_INTEGER TimeStamp;
	/*0038*/ ULONG Reason;
	/*003c*/ ULONG SourceInfo;
	/*0040*/ ULONG SecurityId;
	/*0044*/ ULONG FileAttributes;
	/*0048*/ USHORT FileNameLength;
	/*004a*/ USHORT FileNameOffset;
	/*004c*/ WCHAR FileName[0x1];
	/*0050*/
};

struct USN_RECORD_V4 {
	/*0000*/ USN_RECORD_COMMON_HEADER Header;
	/*0008*/ _FILE_ID_128 FileReferenceNumber;
	/*0018*/ _FILE_ID_128 ParentFileReferenceNumber;
	/*0028*/ LONGLONG Usn;
	/*0030*/ ULONG Reason;
	/*0034*/ ULONG SourceInfo;
	/*0038*/ ULONG RemainingExtents;
	/*003c*/ USHORT NumberOfExtents;
	/*003e*/ USHORT ExtentSize;
	/*0040*/ USN_RECORD_EXTENT Extents[0x1];
	/*0050*/
};

struct USN_TRACK_MODIFIED_RANGES {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Unused;
	/*0008*/ ULONGLONG ChunkSize;
	/*0010*/ LONGLONG FileSizeThreshold;
	/*0018*/
};

enum VARENUM {
	VT_EMPTY = 0x0,
	VT_NULL = 0x1,
	VT_I2 = 0x2,
	VT_I4 = 0x3,
	VT_R4 = 0x4,
	VT_R8 = 0x5,
	VT_CY = 0x6,
	VT_DATE = 0x7,
	VT_BSTR = 0x8,
	VT_DISPATCH = 0x9,
	VT_ERROR = 0xa,
	VT_BOOL = 0xb,
	VT_VARIANT = 0xc,
	VT_UNKNOWN = 0xd,
	VT_DECIMAL = 0xe,
	VT_I1 = 0x10,
	VT_UI1 = 0x11,
	VT_UI2 = 0x12,
	VT_UI4 = 0x13,
	VT_I8 = 0x14,
	VT_UI8 = 0x15,
	VT_INT = 0x16,
	VT_UINT = 0x17,
	VT_VOID = 0x18,
	VT_HRESULT = 0x19,
	VT_PTR = 0x1a,
	VT_SAFEARRAY = 0x1b,
	VT_CARRAY = 0x1c,
	VT_USERDEFINED = 0x1d,
	VT_LPSTR = 0x1e,
	VT_LPWSTR = 0x1f,
	VT_RECORD = 0x24,
	VT_INT_PTR = 0x25,
	VT_UINT_PTR = 0x26,
	VT_FILETIME = 0x40,
	VT_BLOB = 0x41,
	VT_STREAM = 0x42,
	VT_STORAGE = 0x43,
	VT_STREAMED_OBJECT = 0x44,
	VT_STORED_OBJECT = 0x45,
	VT_BLOB_OBJECT = 0x46,
	VT_CF = 0x47,
	VT_CLSID = 0x48,
	VT_VERSIONED_STREAM = 0x49,
	VT_BSTR_BLOB = 0xfff,
	VT_VECTOR = 0x1000,
	VT_ARRAY = 0x2000,
	VT_BYREF = 0x4000,
	VT_RESERVED = 0x8000,
	VT_ILLEGAL = 0xffff,
	VT_ILLEGALMASKED = 0xfff,
	VT_TYPEMASK = 0xfff
};

enum VERIFIER_MODE {
	VERIFIER_MODE_UNUSED = 0x0,
	VERIFIER_MODE_TRIAGE = 0x1,
	VERIFIER_MODE_FIELD = 0x2,
	VERIFIER_MODE_LOGO = 0x3,
	VERIFIER_MODE_TEST = 0x4
};

enum VIEW_PRESENTATION_MODE {
	VPM_DESKTOP = 0x0,
	VPM_HOLOGRAPHIC = 0x1
};

enum VIEW_SETTING_ID {
	VSIDF_VIEWMODE = 0x1,
	VSIDF_IMAGESIZE = 0x2,
	VSIDF_SORTCOLUMNS = 0x4,
	VSIDF_GROUPBY = 0x8,
	VSIDF_FOLDERFLAGS = 0x10,
	VSIDF_SUBSETCOUNT = 0x20,
	VSIDF_FOLDERTYPE = 0x40,
	VSIDF_VISIBLECOLUMNSWIDTH = 0x80,
	VSIDF_VISIBLECOLUMNSSET = 0x100,
	VSIDF_VISIBLECOLUMNSORDER = 0x200,
	VSIDF_VISIBLECOLUMNSALL = 0x380
};

struct VOLUME_BITMAP_BUFFER {
	/*0000*/ _LARGE_INTEGER StartingLcn;
	/*0008*/ _LARGE_INTEGER BitmapSize;
	/*0010*/ UCHAR Buffer[0x1];
	/*0018*/
};

struct WCM_BILLING_CYCLE_INFO {
	/*0000*/ _FILETIME StartDate;
	/*0008*/ _WCM_TIME_INTERVAL Duration;
	/*0018*/ INT Reset;
	/*001c*/
};

enum WCM_CONNECTION_ORDER_OPTION {
	WCM_ORDER_ABOVE_VISIBLE = 0x0,
	WCM_ORDER_LOWEST = 0x1
};

enum WCM_INTF_PROFILELIST_TRI_STATE {
	WcmIntfIgnoreProfileList = 0x0,
	WcmIntfAllowProfileList = 0x1,
	WcmIntfDenyProfileList = 0x2
};

struct WCM_WNF_INTERFACE_CONNECTION_STATE_INFO {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ _WCM_MEDIA_TYPE MediaType;
	/*0014*/ ULONG ConnectionState;
	/*0018*/ ULONG TimeInBadStateMs;
	/*001c*/ ULONG ConnectivityTriggers;
	/*0020*/ UCHAR fWasConnectedGood;
	/*0021*/ UCHAR fLastArrayValue;
	void WCM_WNF_INTERFACE_CONNECTION_STATE_INFO();
	/*0024*/
};

enum WELL_KNOWN_SID_TYPE {
	WinNullSid = 0x0,
	WinWorldSid = 0x1,
	WinLocalSid = 0x2,
	WinCreatorOwnerSid = 0x3,
	WinCreatorGroupSid = 0x4,
	WinCreatorOwnerServerSid = 0x5,
	WinCreatorGroupServerSid = 0x6,
	WinNtAuthoritySid = 0x7,
	WinDialupSid = 0x8,
	WinNetworkSid = 0x9,
	WinBatchSid = 0xa,
	WinInteractiveSid = 0xb,
	WinServiceSid = 0xc,
	WinAnonymousSid = 0xd,
	WinProxySid = 0xe,
	WinEnterpriseControllersSid = 0xf,
	WinSelfSid = 0x10,
	WinAuthenticatedUserSid = 0x11,
	WinRestrictedCodeSid = 0x12,
	WinTerminalServerSid = 0x13,
	WinRemoteLogonIdSid = 0x14,
	WinLogonIdsSid = 0x15,
	WinLocalSystemSid = 0x16,
	WinLocalServiceSid = 0x17,
	WinNetworkServiceSid = 0x18,
	WinBuiltinDomainSid = 0x19,
	WinBuiltinAdministratorsSid = 0x1a,
	WinBuiltinUsersSid = 0x1b,
	WinBuiltinGuestsSid = 0x1c,
	WinBuiltinPowerUsersSid = 0x1d,
	WinBuiltinAccountOperatorsSid = 0x1e,
	WinBuiltinSystemOperatorsSid = 0x1f,
	WinBuiltinPrintOperatorsSid = 0x20,
	WinBuiltinBackupOperatorsSid = 0x21,
	WinBuiltinReplicatorSid = 0x22,
	WinBuiltinPreWindows2000CompatibleAccessSid = 0x23,
	WinBuiltinRemoteDesktopUsersSid = 0x24,
	WinBuiltinNetworkConfigurationOperatorsSid = 0x25,
	WinAccountAdministratorSid = 0x26,
	WinAccountGuestSid = 0x27,
	WinAccountKrbtgtSid = 0x28,
	WinAccountDomainAdminsSid = 0x29,
	WinAccountDomainUsersSid = 0x2a,
	WinAccountDomainGuestsSid = 0x2b,
	WinAccountComputersSid = 0x2c,
	WinAccountControllersSid = 0x2d,
	WinAccountCertAdminsSid = 0x2e,
	WinAccountSchemaAdminsSid = 0x2f,
	WinAccountEnterpriseAdminsSid = 0x30,
	WinAccountPolicyAdminsSid = 0x31,
	WinAccountRasAndIasServersSid = 0x32,
	WinNTLMAuthenticationSid = 0x33,
	WinDigestAuthenticationSid = 0x34,
	WinSChannelAuthenticationSid = 0x35,
	WinThisOrganizationSid = 0x36,
	WinOtherOrganizationSid = 0x37,
	WinBuiltinIncomingForestTrustBuildersSid = 0x38,
	WinBuiltinPerfMonitoringUsersSid = 0x39,
	WinBuiltinPerfLoggingUsersSid = 0x3a,
	WinBuiltinAuthorizationAccessSid = 0x3b,
	WinBuiltinTerminalServerLicenseServersSid = 0x3c,
	WinBuiltinDCOMUsersSid = 0x3d,
	WinBuiltinIUsersSid = 0x3e,
	WinIUserSid = 0x3f,
	WinBuiltinCryptoOperatorsSid = 0x40,
	WinUntrustedLabelSid = 0x41,
	WinLowLabelSid = 0x42,
	WinMediumLabelSid = 0x43,
	WinHighLabelSid = 0x44,
	WinSystemLabelSid = 0x45,
	WinWriteRestrictedCodeSid = 0x46,
	WinCreatorOwnerRightsSid = 0x47,
	WinCacheablePrincipalsGroupSid = 0x48,
	WinNonCacheablePrincipalsGroupSid = 0x49,
	WinEnterpriseReadonlyControllersSid = 0x4a,
	WinAccountReadonlyControllersSid = 0x4b,
	WinBuiltinEventLogReadersGroup = 0x4c,
	WinNewEnterpriseReadonlyControllersSid = 0x4d,
	WinBuiltinCertSvcDComAccessGroup = 0x4e,
	WinMediumPlusLabelSid = 0x4f,
	WinLocalLogonSid = 0x50,
	WinConsoleLogonSid = 0x51,
	WinThisOrganizationCertificateSid = 0x52,
	WinApplicationPackageAuthoritySid = 0x53,
	WinBuiltinAnyPackageSid = 0x54,
	WinCapabilityInternetClientSid = 0x55,
	WinCapabilityInternetClientServerSid = 0x56,
	WinCapabilityPrivateNetworkClientServerSid = 0x57,
	WinCapabilityPicturesLibrarySid = 0x58,
	WinCapabilityVideosLibrarySid = 0x59,
	WinCapabilityMusicLibrarySid = 0x5a,
	WinCapabilityDocumentsLibrarySid = 0x5b,
	WinCapabilitySharedUserCertificatesSid = 0x5c,
	WinCapabilityEnterpriseAuthenticationSid = 0x5d,
	WinCapabilityRemovableStorageSid = 0x5e,
	WinBuiltinRDSRemoteAccessServersSid = 0x5f,
	WinBuiltinRDSEndpointServersSid = 0x60,
	WinBuiltinRDSManagementServersSid = 0x61,
	WinUserModeDriversSid = 0x62,
	WinBuiltinHyperVAdminsSid = 0x63,
	WinAccountCloneableControllersSid = 0x64,
	WinBuiltinAccessControlAssistanceOperatorsSid = 0x65,
	WinBuiltinRemoteManagementUsersSid = 0x66,
	WinAuthenticationAuthorityAssertedSid = 0x67,
	WinAuthenticationServiceAssertedSid = 0x68,
	WinLocalAccountSid = 0x69,
	WinLocalAccountAndAdministratorSid = 0x6a,
	WinAccountProtectedUsersSid = 0x6b,
	WinCapabilityAppointmentsSid = 0x6c,
	WinCapabilityContactsSid = 0x6d,
	WinAccountDefaultSystemManagedSid = 0x6e,
	WinBuiltinDefaultSystemManagedGroupSid = 0x6f,
	WinBuiltinStorageReplicaAdminsSid = 0x70,
	WinAccountKeyAdminsSid = 0x71,
	WinAccountEnterpriseKeyAdminsSid = 0x72,
	WinAuthenticationKeyTrustSid = 0x73,
	WinAuthenticationKeyPropertyMFASid = 0x74,
	WinAuthenticationKeyPropertyAttestationSid = 0x75,
	WinAuthenticationFreshKeyAuthSid = 0x76,
	WinBuiltinDeviceOwnersSid = 0x77
};

enum WIN32_MEMORY_INFORMATION_CLASS {
	MemoryRegionInfo = 0x0
};

struct WIN32_MEMORY_REGION_INFORMATION {
	/*0000*/ void * AllocationBase;
	/*0008*/ ULONG AllocationProtect;
	/*000c*/ ULONG Flags;
	/*000c*/ ULONG Private : 01; // 0x00000001;
	/*000c*/ ULONG MappedDataFile : 01; // 0x00000002;
	/*000c*/ ULONG MappedImage : 01; // 0x00000004;
	/*000c*/ ULONG MappedPageFile : 01; // 0x00000008;
	/*000c*/ ULONG MappedPhysical : 01; // 0x00000010;
	/*000c*/ ULONG DirectMapped : 01; // 0x00000020;
	/*000c*/ ULONG Reserved : 26; // 0xffffffc0;
	/*0010*/ ULONGLONG RegionSize;
	/*0018*/ ULONGLONG CommitSize;
	/*0020*/
};

enum WINDOWCOMPOSITIONATTRIB {
	WCA_UNDEFINED = 0x0,
	WCA_NCRENDERING_ENABLED = 0x1,
	WCA_NCRENDERING_POLICY = 0x2,
	WCA_TRANSITIONS_FORCEDISABLED = 0x3,
	WCA_ALLOW_NCPAINT = 0x4,
	WCA_CAPTION_BUTTON_BOUNDS = 0x5,
	WCA_NONCLIENT_RTL_LAYOUT = 0x6,
	WCA_FORCE_ICONIC_REPRESENTATION = 0x7,
	WCA_EXTENDED_FRAME_BOUNDS = 0x8,
	WCA_HAS_ICONIC_BITMAP = 0x9,
	WCA_THEME_ATTRIBUTES = 0xa,
	WCA_NCRENDERING_EXILED = 0xb,
	WCA_NCADORNMENTINFO = 0xc,
	WCA_EXCLUDED_FROM_LIVEPREVIEW = 0xd,
	WCA_VIDEO_OVERLAY_ACTIVE = 0xe,
	WCA_FORCE_ACTIVEWINDOW_APPEARANCE = 0xf,
	WCA_DISALLOW_PEEK = 0x10,
	WCA_CLOAK = 0x11,
	WCA_CLOAKED = 0x12,
	WCA_ACCENT_POLICY = 0x13,
	WCA_FREEZE_REPRESENTATION = 0x14,
	WCA_EVER_UNCLOAKED = 0x15,
	WCA_VISUAL_OWNER = 0x16,
	WCA_HOLOGRAPHIC = 0x17,
	WCA_EXCLUDED_FROM_DDA = 0x18,
	WCA_PASSIVEUPDATEMODE = 0x19,
	WCA_USEDARKMODECOLORS = 0x1a,
	WCA_LAST = 0x1b
};

enum WININET_SYNC_MODE {
	WININET_SYNC_MODE_NEVER = 0x0,
	WININET_SYNC_MODE_ON_EXPIRY = 0x1,
	WININET_SYNC_MODE_ONCE_PER_SESSION = 0x2,
	WININET_SYNC_MODE_ALWAYS = 0x3,
	WININET_SYNC_MODE_AUTOMATIC = 0x4,
	WININET_SYNC_MODE_DEFAULT = 0x4
};

struct WLAN_ENTRY {
	/*0000*/ _LIST_ENTRY ListEntry;
	/*0010*/ _GUID wlanIntfGuid;
	/*0020*/ void * wlanHandle;
	/*0028*/ INT msmMode;
	/*002c*/ ULONG handleCount;
	/*0030*/
};

struct WLAN_MAC_FRAME_STATISTICS {
	/*0000*/ ULONGLONG ullTransmittedFrameCount;
	/*0008*/ ULONGLONG ullReceivedFrameCount;
	/*0010*/ ULONGLONG ullWEPExcludedCount;
	/*0018*/ ULONGLONG ullTKIPLocalMICFailures;
	/*0020*/ ULONGLONG ullTKIPReplays;
	/*0028*/ ULONGLONG ullTKIPICVErrorCount;
	/*0030*/ ULONGLONG ullCCMPReplays;
	/*0038*/ ULONGLONG ullCCMPDecryptErrors;
	/*0040*/ ULONGLONG ullWEPUndecryptableCount;
	/*0048*/ ULONGLONG ullWEPICVErrorCount;
	/*0050*/ ULONGLONG ullDecryptSuccessCount;
	/*0058*/ ULONGLONG ullDecryptFailureCount;
	/*0060*/
};

struct WLAN_PHY_FRAME_STATISTICS {
	/*0000*/ ULONGLONG ullTransmittedFrameCount;
	/*0008*/ ULONGLONG ullMulticastTransmittedFrameCount;
	/*0010*/ ULONGLONG ullFailedCount;
	/*0018*/ ULONGLONG ullRetryCount;
	/*0020*/ ULONGLONG ullMultipleRetryCount;
	/*0028*/ ULONGLONG ullMaxTXLifetimeExceededCount;
	/*0030*/ ULONGLONG ullTransmittedFragmentCount;
	/*0038*/ ULONGLONG ullRTSSuccessCount;
	/*0040*/ ULONGLONG ullRTSFailureCount;
	/*0048*/ ULONGLONG ullACKFailureCount;
	/*0050*/ ULONGLONG ullReceivedFrameCount;
	/*0058*/ ULONGLONG ullMulticastReceivedFrameCount;
	/*0060*/ ULONGLONG ullPromiscuousReceivedFrameCount;
	/*0068*/ ULONGLONG ullMaxRXLifetimeExceededCount;
	/*0070*/ ULONGLONG ullFrameDuplicateCount;
	/*0078*/ ULONGLONG ullReceivedFragmentCount;
	/*0080*/ ULONGLONG ullPromiscuousReceivedFragmentCount;
	/*0088*/ ULONGLONG ullFCSErrorCount;
	/*0090*/
};

struct WLAN_STATISTICS {
	/*0000*/ ULONGLONG ullFourWayHandshakeFailures;
	/*0008*/ ULONGLONG ullTKIPCounterMeasuresInvoked;
	/*0010*/ ULONGLONG ullReserved;
	/*0018*/ WLAN_MAC_FRAME_STATISTICS MacUcastCounters;
	/*0078*/ WLAN_MAC_FRAME_STATISTICS MacMcastCounters;
	/*00d8*/ ULONG dwNumberOfPhys;
	/*00e0*/ WLAN_PHY_FRAME_STATISTICS PhyCounters[0x1];
	/*0170*/
};

enum WMIDPREQUESTCODE {
	WMI_GET_ALL_DATA = 0x0,
	WMI_GET_SINGLE_INSTANCE = 0x1,
	WMI_SET_SINGLE_INSTANCE = 0x2,
	WMI_SET_SINGLE_ITEM = 0x3,
	WMI_ENABLE_EVENTS = 0x4,
	WMI_DISABLE_EVENTS = 0x5,
	WMI_ENABLE_COLLECTION = 0x6,
	WMI_DISABLE_COLLECTION = 0x7,
	WMI_REGINFO = 0x8,
	WMI_EXECUTE_METHOD = 0x9,
	WMI_CAPTURE_STATE = 0xa
};

struct WMIREGGUIDW {
	/*0000*/ _GUID Guid;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG InstanceCount;
	/*0018*/ ULONG InstanceNameList;
	/*0018*/ ULONG BaseNameOffset;
	/*0018*/ ULONGLONG Pdo;
	/*0018*/ ULONGLONG InstanceInfo;
	/*0020*/
};

struct WMIREGINFOW {
	/*0000*/ ULONG BufferSize;
	/*0004*/ ULONG NextWmiRegInfo;
	/*0008*/ ULONG RegistryPath;
	/*000c*/ ULONG MofResourceName;
	/*0010*/ ULONG GuidCount;
	/*0018*/ WMIREGGUIDW WmiRegGuid[];
	/*0018*/
};

enum WPP_CTL_NAMES {
	WPP_CTL_CtlGuid = 0x0,
	WPP_LAST_CTL = 0x1
};

enum WPP_DEFINE_BIT_NAMES {
	WPP_BLOCK_START_CtlGuid = 0x0,
	WPP_BIT_TRACE_LEVEL_FATAL = 0x1,
	WPP_BIT_TRACE_LEVEL_ERROR = 0x2,
	WPP_BIT_TRACE_LEVEL_WARNING = 0x3,
	WPP_BIT_TRACE_LEVEL_INFORMATION = 0x4,
	WPP_BIT_TRACE_LEVEL_VERBOSE = 0x5,
	WPP_BLOCK_END_CtlGuid = 0x6
};

union WPP_PROJECT_CONTROL_BLOCK {
	/*0000*/ _WPP_TRACE_CONTROL_BLOCK Control;
	/*0000*/ UCHAR ReserveSpace[0x28];
	/*0028*/
};

struct WSAData {
	/*0000*/ USHORT wVersion;
	/*0002*/ USHORT wHighVersion;
	/*0004*/ USHORT iMaxSockets;
	/*0006*/ USHORT iMaxUdpDg;
	/*0008*/ CHAR * lpVendorInfo;
	/*0010*/ CHAR szDescription[0x101];
	/*0111*/ CHAR szSystemStatus[0x81];
	/*0198*/
};

enum WWAN_ACM_EVENT_TYPE {
	WwanAcmEventTypeAceStart = 0x0,
	WwanAcmEventTypeAceStop = 0x1,
	WwanAcmEventTypeCostMetadataChange = 0x2,
	WwanAcmEventTypeMax = 0x3
};

struct WWAN_ADDITIONAL_CONTEXT_INFO {
	/*0000*/ _GUID childInterfaceGuid;
	/*0010*/ ULONG connectionID;
	/*0014*/
};

struct WWAN_API_INFO {
	/*0000*/ WWAN_API_TYPE apiType;
	/*0004*/ ULONG apiId;
	/*0008*/ INT fIsUserRequest;
	/*000c*/ INT fIsLowBoxMBAERequest;
	/*0010*/ INT fIsLast;
	/*0014*/ ULONG apiResult;
	/*0018*/ void * sourceHandle;
	/*0018*/ ULONGLONG dummy;
	/*0020*/ ULONG flags;
	/*0028*/
};

struct WWAN_API_OBJECT {
	/*0000*/ WWAN_API_INFO apiInfo;
	/*0028*/ _WWAN_PIN_TYPE pinType;
	/*0030*/
};

enum WWAN_API_TYPE {
	WwanApiNone = 0x0,
	WwanApiGetPinState = 0x1,
	WwanApiSetPreferredProviders = 0x2,
	WwanApiScan = 0x3,
	WwanApiPinEnable = 0x4,
	WwanApiPinDisable = 0x5,
	WwanApiPinEnter = 0x6,
	WwanApiPinChange = 0x7,
	WwanApiPinUnblock = 0x8,
	WwanApiSetRegisterMode = 0x9,
	WwanApiSetProvisionedContext = 0xa,
	WwanApiConnect = 0xb,
	WwanApiDisconnect = 0xc,
	WwanApiSmsSetConfiguration = 0xd,
	WwanApiSmsSend = 0xe,
	WwanApiSmsRead = 0xf,
	WwanApiSmsDelete = 0x10,
	WwanApiServiceActivate = 0x11,
	WwanApiSetHomeProvider = 0x12,
	WwanApiQueryVendorSpecific = 0x13,
	WwanApiSetVendorSpecific = 0x14,
	WwanApiOpenHandle = 0x15,
	WwanApiCloseHandle = 0x16,
	WwanApiRegisterNotification = 0x17,
	WwanApiEnumerateInterfaces = 0x18,
	WwanApiGetInterfaceCapability = 0x19,
	WwanApiSetInterface = 0x1a,
	WwanApiSetIntfOpcodePin = 0x1b,
	WwanApiSetIntfOpcodeRadioState = 0x1c,
	WwanApiSetIntfOpcodeAce = 0x1d,
	WwanApiSetIntfOpcodePreferredProviders = 0x1e,
	WwanApiSetIntfOpcodeProvisionedContexts = 0x1f,
	WwanApiSetIntfOpcodeActivateUserAccount = 0x20,
	WwanApiSetIntfOpcodeHomeProvider = 0x21,
	WwanApiQueryInterface = 0x22,
	WwanApiGetVisibleNetworkList = 0x23,
	WwanApiRegister = 0x24,
	WwanApiAttach = 0x25,
	WwanApiDetach = 0x26,
	WwanApiActivate = 0x27,
	WwanApiDeactivate = 0x28,
	WwanApiGetSmsConfiguration = 0x29,
	WwanApiSmsQueryStatus = 0x2a,
	WwanApiSetProfile = 0x2b,
	WwanApiDeleteProfile = 0x2c,
	WwanApiGetProfile = 0x2d,
	WwanApiGetProfileList = 0x2e,
	WwanApiRenameProfile = 0x2f,
	WwanApiGetProfileIstream = 0x30,
	WwanApiAuthChallenge = 0x31,
	WwanApiGetProfileMetaData = 0x32,
	WwanApiSetProfileMetaData = 0x33,
	WwanApiUssdRequest = 0x34,
	WwanApiScanMultiCarrier = 0x35,
	Wwan2ApiOpenHandle = 0x36,
	Wwan2ApiCloseHandle = 0x37,
	Wwan2ApiEnumerateDeviceServices = 0x38,
	Wwan2ApiRegisterNotification = 0x39,
	Wwan2ApiCloseAllDeviceServiceCommandSessions = 0x3a,
	Wwan2ApiSendDeviceServiceCommand = 0x3b,
	WwanApiGetSecurity = 0x3c,
	WwanApiSetSecurity = 0x3d,
	Wwan2ApiQueryInterfaces = 0x3e,
	Wwan2ApiQueryDeviceServiceSupportedCommands = 0x3f,
	Wwan2ApiOpenDeviceServiceDataSession = 0x40,
	Wwan2ApiCloseDeviceServiceDataSession = 0x41,
	Wwan2ApiWriteDeviceServiceData = 0x42,
	Wwan2ApiOpenDeviceServiceCommandSession = 0x43,
	Wwan2ApiCloseDeviceServiceCommandSession = 0x44,
	Wwan2ApiAddDeviceServiceSubscription = 0x45,
	Wwan2ApiDeleteDeviceServiceSubscription = 0x46,
	Wwan2ApiSubscribePowerStateEvents = 0x47,
	WwanApiConnectAdditionalPdpContext = 0x48,
	WwanApiSearchProfile = 0x49,
	WwanApiGetProfileState = 0x4a,
	WwanApiGetDMConfigProfileList = 0x4b,
	WwanApiSetDMConfigProfile = 0x4c,
	WwanApiGetDMConfigProfile = 0x4d,
	WwanApiDeleteDMConfigProfile = 0x4e,
	WwanApiSetNetworkQuietMode = 0x4f,
	WwanApiSetDMConfigBinary = 0x50,
	WwanApiGetDMConfigBinary = 0x51,
	WwanApiQueryInterfaceEx = 0x52,
	WwanApiIPv6eHRPDControlSet = 0x53,
	WwanApiIPv6eHRPDControlQuery = 0x54,
	WwanApiGetProfileListByPurpose = 0x55,
	WwanApiGetAtr = 0x56,
	WwanApiUiccOpenChannel = 0x57,
	WwanApiUiccCloseChannel = 0x58,
	WwanApiUiccSendApdu = 0x59,
	WwanApiUiccGetTerminalCapability = 0x5a,
	WwanApiUiccSetTerminalCapability = 0x5b,
	WwanApiActivateNotification = 0x5c,
	WwanApiSetLteAttach = 0x5d,
	WwanApiSlotStatus = 0x5e,
	WwanApiModemLogging = 0x5f,
	WwanApiMax = 0x60
};

struct WWAN_ATTACH_COMPLETE_INFO {
	/*0000*/ ULONG WwanDataClass;
	/*0004*/
};

struct WWAN_AUTH_RESPONSE_OBJECT {
	/*0000*/ _WWAN_AUTH_RESPONSE authResponse;
	/*0048*/ ULONG uStatus;
	/*004c*/
};

enum WWAN_CELL_INFO_PARAM {
	WwanCellInfoSystemType = 0x1,
	WwanCellInfoServing = 0x2,
	WwanCellInfoSystemId = 0x4,
	WwanCellInfoNetworkId = 0x8,
	WwanCellInfoAreaCode = 0x10,
	WwanCellInfoCellId = 0x20,
	WwanCellInfoTimingAdvance = 0x40,
	WwanCellInfoChannelNumber = 0x80,
	WwanCellInfoBaseStationId = 0x100,
	WwanCellInfoRxSignalStrength = 0x200,
	WwanCellInfoFreqUL = 0x400,
	WwanCellInfoFreqDL = 0x800,
	WwanCellInfoFreqNT = 0x1000,
	WwanCellInfoPSC = 0x2000,
	WwanCellInfoRSRQ = 0x4000,
	WwanCellInfoSNR = 0x8000,
	WwanCellInfoPathLoss = 0x10000,
	WwanCellInfoPhysicalCellId = 0x20000,
	WwanCellInfoCellParameterId = 0x40000,
	WwanCellInfoBaseLatitude = 0x80000,
	WwanCellInfoBaseLongitude = 0x100000,
	WwanCellInfoGPSSeconds = 0x200000,
	WwanCellInfoProviderId = 0x400000
};

struct WWAN_CONNECTION_ATTRIBUTES {
	/*0000*/ ULONG ConnectionId;
	/*0004*/ WCHAR AccessString[0x65];
	/*00d0*/
};

enum WWAN_CONNECTION_FLAG {
	WwanConnectionFlagDefault = 0x0,
	WwanConnectionFlagNoAggregation = 0x1
};

struct WWAN_CONNECTION_INFO {
	/*0000*/ WWAN_INTERFACE_STATUS InterfaceStatus;
	/*0008*/ _WWAN_REGISTRATION_STATE RegistrationState;
	/*00d8*/ ULONG wwanDataClass;
	/*00dc*/ ULONG dwNumberOfItems;
	/*00e0*/ _WWAN_VOICE_CALL_STATE voiceCallState;
	/*00e4*/ WWAN_CONNECTION_ATTRIBUTES pConnectionAttributes[0x1];
	/*01b4*/
};

enum WWAN_CONNECTION_MODE {
	WwanConnectionModeProfile = 0x0,
	WwanConnectionModeTmpProfile = 0x1,
	WwanConnectionModeNoProfile = 0x2
};

struct WWAN_CONNECTION_OBJECT {
	/*0000*/ _WWAN_ACTIVATION_STATE activationState;
	/*0004*/ ULONG connectionId;
	/*0008*/ WCHAR profileName[0x100];
	/*0208*/
};

struct WWAN_CONNECT_FAILED_INFO {
	/*0000*/ WWAN_ERROR_CODE ErrorCode;
	/*0008*/ WWAN_CONNECTION_MODE connMode;
	/*000c*/ WCHAR strProfileName[0x100];
	/*0210*/ WWAN_API_INFO apiInfo;
	/*0238*/ ULONG ConnectionId;
	/*023c*/ _GUID ConflictingInterfaceGuid;
	/*024c*/ INT fIsThereConflictingVoiceCall;
	/*0250*/ ULONG nConflictingChildInterfaces;
	/*0254*/ _GUID ConflictingChildInterfaceGuids[0x1];
	/*0268*/
};

struct WWAN_CONNECT_RESERVED {
	
	/*0000*/ WWAN_CONNECT_RESERVED_TYPE Type;
	/*0004*/ <unnamed-type-Value> Value;
	/*0008*/
};

enum WWAN_CONNECT_RESERVED_TYPE {
	WwanConnectReservedTypeConnectionFlags = 0x0
};

struct WWAN_CONSECUTIVE_OID_TIMEOUT_INFO {
	/*0000*/ INT isConsecutiveOIDTimedOutCountReset;
	/*0004*/ ULONG currentConsecutiveOIDTimedOutCount;
	/*0008*/
};

struct WWAN_CONTEXT_INFO {
	/*0000*/ ULONG presenceFlag;
	/*0004*/ INT ignorePassword;
	/*0008*/ WCHAR apn[0x65];
	/*00d2*/ WCHAR username[0x100];
	/*02d4*/ WWAN_PROTECTION_MODE protectionMode;
	/*02d8*/ WCHAR password[0x100];
	/*04d8*/ _WWAN_COMPRESSION compression;
	/*04dc*/ _WWAN_AUTH_PROTOCOL authProtocol;
	/*04e0*/ ULONG encPwdLen;
	/*04e8*/ WCHAR * pEncPasswd;
	/*04e8*/ ULONGLONG dummy;
	/*04f0*/ _WWAN_IP_TYPE ipType;
	/*04f8*/
};

struct WWAN_CONTEXT_OBJECT {
	/*0000*/ _WWAN_CONTEXT_STATE contextState;
	/*0100*/ ULONG uStatus;
	/*0104*/
};

struct WWAN_DATA_ENABLEMENT_OBJECT_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _WWAN_DATA_ENABLEMENT_OBJECT pEnablementObj[0x1];
	/*0018*/
};

struct WWAN_DATA_ROAM_CONTROL_OBJECT_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _WWAN_DATA_ROAM_CONTROL_OBJECT pRoamControlObj[0x1];
	/*0018*/
};

enum WWAN_DATA_ROAM_CONTROL_TYPE {
	WwanRoamControlNoRoamAllowed = 0x0,
	WwanRoamControlPartnerRoamAllowed = 0x1,
	WwanRoamControlAllRoamAllowed = 0x2,
	WwanRoamControlMax = 0x3
};

struct WWAN_DEACTIVATE_COMPLETE_INFO {
	/*0000*/ ULONG ConnectionId;
	/*0004*/
};

struct WWAN_DEVICE_OBJECT {
	/*0000*/ _WWAN_DEVICE_CAPS deviceCaps;
	/*0158*/ _WWAN_CELLULAR_CLASS * pCCs;
	/*0158*/ ULONGLONG dummy;
	/*0160*/ ULONG uStatus;
	/*0168*/
};

enum WWAN_DEVICE_SERVICE_EVENT_TYPE {
	WwanDSEventTypeMin = 0x0,
	WwanDSEventTypeEventNotificationReceived = 0x1,
	WwanDSEventTypeSetCommandComplete = 0x2,
	WwanDSEventTypeQueryCommandComplete = 0x3,
	WwanDSEventTypeCapableInterfaceArrival = 0x4,
	WwanDSEventTypeCapableInterfaceRemoval = 0x5,
	WwanDSEventTypeQueryInterfacesResponse = 0x6,
	WwanDSEventTypeSupportedCommands = 0x7,
	WwanDSEventTypeOpenDataSessionComplete = 0x8,
	WwanDSEventTypeCloseDataSessionComplete = 0x9,
	WwanDSEventTypeWriteDataComplete = 0xa,
	WwanDSEventTypeReadDataReceived = 0xb,
	WwanDSEventTypeOpenCommandSessionComplete = 0xc,
	WwanDSEventTypeCloseCommandSessionComplete = 0xd,
	WwanDSEventTypeInterfacePowerStateChange = 0xe,
	WwanDSEventTypeMax = 0xf
};

struct WWAN_DISCONNECT_COMPLETE_INFO {
	/*0000*/ ULONG ConnectionId;
	/*0004*/
};

struct WWAN_DISCONNECT_FAILED_INFO {
	/*0000*/ WWAN_ERROR_CODE ErrorCode;
	/*0008*/ ULONG ConnectionId;
	/*0010*/ WWAN_API_INFO apiInfo;
	/*0038*/
};

struct WWAN_DMPROFILE_UPDATE_INFO {
	/*0000*/ WWAN_PROFILE_UPDATE_TYPE profileUpdateType;
	/*0004*/ WCHAR wProfileName[0x100];
	/*0204*/ _GUID guidOEMConnID;
	/*0214*/ INT fNeedNotifyModem;
	/*0218*/
};

struct WWAN_DM_CONFIG_BINARY_RESPONSE {
	/*0000*/ ULONG version;
	/*0004*/ ULONG cbSize;
	/*0008*/ ULONG reqId;
	/*000c*/ ULONG ndisAsyncResultCode;
	/*0010*/ ULONG cbBufferSize;
	/*0014*/ UCHAR buffer[0x1];
	/*0018*/
};

enum WWAN_ENTERPRISEAPN_PARAMS_PROFILE_ACTION {
	WwanEnterpriseApnProfileAdded = 0x0,
	WwanEnterpriseApnProfileDeleted = 0x1,
	WwanEnterpriseApnProfileUpdated = 0x2,
	WwanEnterpriseApnProfileNoAction = 0x3
};

enum WWAN_ENTERPRISEAPN_PARAMS_SETTING_CHOICE {
	WwanEnterpriseApnParamsSettingDisable = 0x0,
	WwanEnterpriseApnParamsSettingEnable = 0x1,
	WwanEnterpriseApnParamsSettingNoChange = 0x2
};

struct WWAN_ERROR_CODE {
	/*0000*/ ULONG dwErrCode;
	/*0004*/ ULONG ulNwError;
	/*0008*/
};

enum WWAN_EVENT_CODE {
	WwanEventCodeDeviceCaps = 0x0,
	WwanEventCodeRadioState = 0x1,
	WwanEventCodeReadyInfo = 0x2,
	WwanEventCodePinInfo = 0x3,
	WwanEventCodePinAction = 0x4,
	WwanEventCodePinList = 0x5,
	WwanEventCodeHomeProvider = 0x6,
	WwanEventCodePreferredProviders = 0x7,
	WwanEventCodeVisibleProviders = 0x8,
	WwanEventCodeRegisterState = 0x9,
	WwanEventCodePacketService = 0xa,
	WwanEventCodeSignalState = 0xb,
	WwanEventCodeContextState = 0xc,
	WwanEventCodeProvisionedContexts = 0xd,
	WwanEventCodeServiceActivation = 0xe,
	WwanEventCodeSmsConfiguration = 0xf,
	WwanEventCodeSmsRead = 0x10,
	WwanEventCodeSmsSend = 0x11,
	WwanEventCodeSmsDelete = 0x12,
	WwanEventCodeSmsStatus = 0x13,
	WwanEventCodeVendorSpecific = 0x14,
	WwanEventCodeSetHomeProviderComplete = 0x15,
	WwanEventCodeAuthResponse = 0x16,
	WwanEventCodeProfileIndex = 0x17,
	WwanEventCodeAutocfgStart = 0x18,
	WwanEventCodeAutocfgStop = 0x19,
	WwanEventCodeAutocfgRequest = 0x1a,
	WwanEventCodeDeviceServices = 0x1b,
	WwanEventCodeSubscribeDeviceServiceEvents = 0x1c,
	WwanEventCodeDeviceServiceCommand = 0x1d,
	WwanEventCodeDeviceServiceResponse = 0x1e,
	WwanEventCodeDeviceServiceEvent = 0x1f,
	WwanEventCodeUssd = 0x20,
	WwanEventCodePinActionEx = 0x21,
	WwanEventCodePinInfoEx = 0x22,
	WwanEventCodeDeviceServiceSupportedCommands = 0x23,
	WwanEventCodePreferredMultiCarrierProviders = 0x24,
	WwanEventCodeDeviceServiceSessionInfo = 0x25,
	WwanEventCodeDeviceServiceSessionWriteComplete = 0x26,
	WwanEventCodeDeviceServiceSessionRead = 0x27,
	WwanEventCodeDevicePowerState = 0x28,
	WwanEventCodeReadyInfoFlags = 0x29,
	WwanEventCodeDevicePowerStateD3Exit = 0x2a,
	WwanEventCodeNetworkIdleHint = 0x2b,
	WwanEventCodePreshutdown = 0x2c,
	WwanEventCodeAtr = 0x2d,
	WwanEventCodeUiccOpenChannel = 0x2e,
	WwanEventCodeUiccCloseChannel = 0x2f,
	WwanEventCodeUiccSendApdu = 0x30,
	WwanEventCodeUiccTerminalCapability = 0x31,
	WwanEventCodePsMediaConfig = 0x32,
	WwanEventCodeSarConfig = 0x33,
	WwanEventCodeSarTransmissionStatus = 0x34,
	WwanEventCodeNetworkBlockList = 0x35,
	WwanEventCodeLteAttachConfig = 0x36,
	WwanEventCodeLteAttachStatus = 0x37,
	WwanEventCodeProvisionedContextsV2 = 0x38,
	WwanEventCodeSysCap = 0x39,
	WwanEventCodeDeviceCapsEx = 0x3a,
	WwanEventCodeUiccSlotMapping = 0x3b,
	WwanEventCodeUiccSlotInfo = 0x3c,
	WwanEventCodeModemConfigInfo = 0x3d,
	WwanEventCodePcoStatus = 0x3e,
	WwanEventCodeUiccReset = 0x3f,
	WwanEventCodeDeviceReset = 0x40,
	WwanEventCodeBaseStationsInfo = 0x41,
	WwanEventCodeMPDPState = 0x42,
	WwanEventCodeMPDPList = 0x43,
	WwanEventCodeNitzInfo = 0x44,
	WwanEventCodeModemLoggingConfig = 0x45,
	WwanEventCodeUiccAppList = 0x46,
	WwanEventCodeUiccFileStatus = 0x47,
	WwanEventCodeUiccAccessBinary = 0x48,
	WwanEventCodeUiccAccessRecord = 0x49,
	WwanEventCodePinInfoEx2 = 0x4a,
	WwanEventCodeRegisterParamsState = 0x4b,
	WwanEventCodeNetworkParamsState = 0x4c,
	WwanEventCodeMax = 0x4d
};

enum WWAN_EVENT_TYPE {
	WwanEventTypeRequest = 0x0,
	WwanEventTypeAsyncRsp = 0x1,
	WwanEventTypeIndication = 0x2
};

struct WWAN_GET_DM_CONFIG_BINARY_INFO {
	/*0000*/ ULONG version;
	/*0004*/ ULONG cbSize;
	/*0008*/ UCHAR rgbIccid[0xa];
	/*0012*/ WCHAR wszPropertyGroup[0x80];
	/*0114*/ _GUID guidPropertyGroupInstance;
	/*0124*/
};

struct WWAN_IMS_CAPABILITIES_INFO {
	/*0000*/ ULONG ulRequestId;
	/*0004*/ ULONG status;
	/*0008*/ ULONG dwIMSCapabilitiesMask;
	/*000c*/
};

struct WWAN_INTERFACE_INFO {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ WCHAR strInterfaceDescription[0x100];
	/*0210*/ WWAN_INTERFACE_STATUS InterfaceStatus;
	/*0218*/ _GUID ParentInterfaceGuid;
	/*0228*/ INT fIsAdditionalPdpContextInterface;
	/*022c*/ _GUID ModemId;
	/*023c*/ ULONG ModemExecutorCount;
	/*0240*/ ULONG ExecutorIdx;
	/*0244*/ ULONG StatusBitMap;
	/*0248*/ ULONG reserved3;
	/*024c*/
};

struct WWAN_INTERFACE_INFO_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ WWAN_INTERFACE_INFO pInterfaceInfo[0x1];
	/*0250*/
};

struct WWAN_INTERFACE_OBJECT {
	/*0000*/ ULONG size;
	/*0004*/ ULONG dwTotalSize;
	/*0008*/ _GUID InterfaceGuid;
	/*0018*/ WCHAR strInterfaceDescription[0x100];
	/*0218*/ _WWAN_DRIVER_CAPS driverCaps;
	/*0228*/ WWAN_DEVICE_OBJECT deviceObject;
	/*0390*/ WWAN_READY_OBJECT readyObject;
	/*0400*/ INT fPin1Blocked;
	/*0404*/ WWAN_RADIO_OBJECT radioObject;
	/*0410*/ ULONG interfaceState;
	/*0414*/ WWAN_PIN_LIST_RESULT pinListObject;
	/*04bc*/ WWAN_SIGNAL_OBJECT signalObject;
	/*0500*/ WWAN_PROVIDER_OBJECT homeProvider;
	/*0548*/ WWAN_LIST_OBJECT preferredProviders;
	/*0560*/ WWAN_LIST_OBJECT preferredMCProviders;
	/*0578*/ WWAN_LIST_OBJECT visibleProviders;
	/*0590*/ ULONG scanListUpdatedTime;
	/*0594*/ WWAN_SCAN_RESULT scanResultType;
	/*0598*/ WWAN_REGISTER_OBJECT registerObject;
	/*066c*/ WWAN_PACKET_OBJECT packetObject;
	/*0690*/ WWAN_CONTEXT_OBJECT contextObject;
	/*0798*/ WWAN_LIST_OBJECT provisionedContexts;
	/*07b0*/ WWAN_SMS_CONFIG_OBJECT smsConfigObject;
	/*07cc*/ WWAN_SMS_STATUS_OBJECT smsStatusObject;
	/*07d8*/ _WWAN_PIN_INFO pinInfo;
	/*07e8*/ WWAN_LIST_OBJECT smsMessageList;
	/*0800*/ WWAN_SERVICE_ACTIVATION_OBJECT serviceActivationObject;
	/*0810*/ WWAN_VENDOR_SPECIFIC_OBJECT vendorSpecificObject;
	/*0820*/ WWAN_API_OBJECT apiObject;
	/*0850*/ ULONG notificationCounter;
	/*0854*/ WWAN_EVENT_CODE evtCode;
	/*0858*/ _WWAN_ACE_STATE aceState;
	/*085c*/ _WWAN_ACE_STATE manualAceState;
	/*0860*/ WWAN_AUTH_RESPONSE_OBJECT authResponseObject;
	/*08ac*/ _GUID ParentInterfaceGuid;
	/*08bc*/ _GUID CellularVoiceGuid;
	/*08cc*/ INT fIsAdditionalPdpContextInterface;
	/*08d0*/ INT fIsD3ColdSupported;
	/*08d4*/ INT fIsEmdeddedDevice;
	/*08d8*/
};

enum WWAN_INTERFACE_STATE {
	WwanInterfaceStateNotReady = 0x0,
	WwanInterfaceStateDeviceLocked = 0x1,
	WwanInterfaceStateUserAccountNotActivated = 0x2,
	WwanInterfaceStateRegistered = 0x3,
	WwanInterfaceStateRegistering = 0x4,
	WwanInterfaceStateDeregistered = 0x5,
	WwanInterfaceStateAttached = 0x6,
	WwanInterfaceStateAttaching = 0x7,
	WwanInterfaceStateDetaching = 0x8,
	WwanInterfaceStateActivated = 0x9,
	WwanInterfaceStateActivating = 0xa,
	WwanInterfaceStateDeactivating = 0xb
};

struct WWAN_INTERFACE_STATUS {
	/*0000*/ INT fInitialized;
	/*0004*/ WWAN_INTERFACE_STATE InterfaceState;
	/*0008*/
};

enum WWAN_INTF_OPCODE {
	WwanIntfOpcodePin = 0x0,
	WwanIntfOpcodeRadioState = 0x1,
	WwanIntfOpcodePreferredProviders = 0x2,
	WwanIntfOpcodeCurrentConnection = 0x3,
	WwanIntfOpcodeProvisionedContexts = 0x4,
	WwanIntfOpcodeActivateUserAccount = 0x5,
	WwanIntfOpcodeVendorSpecific = 0x6,
	WwanIntfOpcodeInterfaceObject = 0x7,
	WwanIntfOpcodeConnectionObject = 0x8,
	WwanIntfOpcodeAcState = 0x9,
	WwanIntfOpcodeClearConnectionStates = 0xa,
	WwanIntfOpcodeStoredRadioState = 0xb,
	WwanIntfOpcodeGetRadioInfo = 0xc,
	WwanIntfOpcodeHomeProvider = 0xd,
	WwanIntfOpcodePreferredMultiCarrierProviders = 0xe,
	WwanIntfOpcodeDataEnablement = 0xf,
	WwanIntfOpcodeDataRoamControl = 0x10,
	WWanIntfOpcodeGetProfileExists = 0x11,
	WWanIntfOpcodeGetProfileConnectMode = 0x12,
	WWanIntfOpcodeVoiceDomain = 0x13,
	WwanIntfOpcodeImsCapabilities = 0x14,
	WWanIntfOpcodeModemDataAffinity = 0x15,
	WWanIntfOpcodeModemReset = 0x16,
	WWanIntfOpcodeUiccBindings = 0x17,
	WWanIntfOpcodeUiccCardInfo = 0x18,
	WWanIntfOpcodeUiccRead = 0x19,
	WWanIntfOpcodeUiccRecordStatus = 0x1a,
	WWanIntfOpcodeSupportedOpcodes = 0x1b,
	WwanIntfOpCodeMultiSimInternetDataUsage = 0x1c,
	WwanIntfOpcodeUpdateIWlanPreference = 0x1d,
	WwanIntfOpcodeTransientDataEnablement = 0x1e,
	WwanIntfOpcodeNetworkLTEAttachAPNInfo = 0x1f,
	WWanIntfOpcodePsMediaPref = 0x20,
	WwanIntfOpcodeHighestConnCategory = 0x21,
	WwanIntfOpcodeEnterpriseAPNParams = 0x22,
	WWanIntfOpcodeAtrInfo = 0x23,
	WWanIntfOpcodeSubscriberInfo = 0x24,
	WWanIntfOpcodeUiccCardAdditionalInfo = 0x25,
	WWanIntfOpcodeOperatorProfileSelection = 0x26,
	WWanIntfOpcodeDisallowAutoConnect = 0x27,
	WWanIntfOpcodeManualConnectSessionState = 0x28,
	WWanIntfOpcodeProvisioningState = 0x29,
	WwanIntfOpcodeSarConfig = 0x2a,
	WwanIntfOpcodeSarTransmissionStatus = 0x2b,
	WwanIntfOpcodeOperatorServiceEnablement = 0x2c,
	WwanIntfOpcodeReconnectHint = 0x2d,
	WwanIntfOpcodeMultiSIMInfo = 0x2e,
	WwanIntfOpcodeMultiSIMSlotMaping = 0x2f,
	WwanIntfOpcodeModemConfigMode = 0x30,
	WWanIntfOpcodeSeqNumLastCellStateChgWnf = 0x31,
	WwanIntfOpcodeCellInfo = 0x32,
	WwanIntfOpcodePcoStatus = 0x33,
	WWanIntfOpcodeUiccReset = 0x34,
	WwanIntfOpcodeServiceOptionalCapabilities = 0x35,
	WwanIntOpcodeNetworkIsolation = 0x36,
	WwanIntfOpcodeProvisionedContextsV2 = 0x37,
	WwanIntfOpcodeCOSAAppConfigured = 0x38,
	WwanIntfOpcodeRegisterPSRegStatus = 0x39,
	WwanIntfOpcodeTestMode = 0x3a,
	WwanIntfOpcodeDSS = 0x3b,
	WwanIntfOpcodeDataServiceState = 0x3c,
	WWanIntfOpcodeMax = 0x3d
};

struct WWAN_INTF_OP_INFO {
	/*0000*/ ULONG ulRequestId;
	/*0004*/ ULONG status;
	/*0008*/ ULONG ulDataOffset;
	/*0010*/ ULONGLONG szDataSize;
	/*0018*/
};

struct WWAN_INTF_OP_SUPPORTED_INFO {
	/*0000*/ ULONG dwQueryMask1;
	/*0004*/ ULONG dwQueryMask2;
	/*0008*/ ULONG dwSetMask1;
	/*000c*/ ULONG dwSetMask2;
	/*0010*/
};

union WWAN_IP_CONFIGURATION_FLAGS {
	/*0000*/ ULONG Value;
	/*0000*/ ULONG AddressAvailable : 01; // 0x00000001;
	/*0000*/ ULONG GatewayAvailable : 01; // 0x00000002;
	/*0000*/ ULONG DnsServerAvailable : 01; // 0x00000004;
	/*0000*/ ULONG MTUAvailable : 01; // 0x00000008;
	/*0004*/
};

struct WWAN_LAYER3_CONNECTION_SETTINGS {
	/*0000*/ UINT IPv4LinkMTU;
	/*0004*/ UINT IPv6LinkMTU;
	/*0008*/ UINT DNSRetryIntervalInSeconds;
	/*000c*/ UINT DNSRetryCount;
	/*0010*/
};

struct WWAN_LIST_OBJECT {
	/*0000*/ _WWAN_LIST_HEADER listHeader;
	/*0008*/ void * pData;
	/*0008*/ ULONGLONG dummy;
	/*0010*/ ULONG uStatus;
	/*0018*/
};

struct WWAN_MMS_CONFIGURATION {
	/*0000*/ WCHAR mmscUrl[0x100];
	/*0200*/ ULONG mmscPort;
	/*0204*/ INT mmsMaxiumumMessageSize;
	/*0208*/
};

struct WWAN_MODEM_DATA_AFFINITY_INFO {
	/*0000*/ ULONG ulRequestId;
	/*0004*/ ULONG status;
	/*0008*/ ULONG dwDataAffinitySlotIndex;
	/*000c*/
};

enum WWAN_MODEM_OPCODE {
	WwanModemOpcodeConfigure = 0x0,
	WwanModemOpcodeEnableFilter = 0x1,
	WwanModemOpcodeDisableFilter = 0x2,
	WwanModemOpcodeStartLog = 0x3,
	WwanModemOpcodeStopLog = 0x4,
	WwanModemOpcodeDrainLog = 0x5,
	WwanModemOpcodeMax = 0x6
};

struct WWAN_MODEM_PROV_CONFIG_INFO {
	/*0000*/ WWAN_MODEM_PROV_STATUS ModemStatus;
	/*0004*/
};

enum WWAN_MODEM_PROV_STATUS {
	WwanModemProvDone = 0x0,
	WwanModemProvFileTransferCompleted = 0x1
};

enum WWAN_MSM_EVENT_TYPE {
	WwanMsmEventTypeServiceActivationComplete = 0x0,
	WwanMsmEventTypeServiceActivationFailed = 0x1,
	WwanMsmEventTypeScanCompleted = 0x2,
	WwanMsmEventTypeScanFailed = 0x3,
	WwanMsmEventTypeVisibleProvidersCacheInvalidated = 0x4,
	WwanMsmEventTypeVisibleProvidersCacheUpdated = 0x5,
	WwanMsmEventTypeRegistered = 0x6,
	WwanMsmEventTypeDeregistered = 0x7,
	WwanMsmEventTypeAttached = 0x8,
	WwanMsmEventTypeDetached = 0x9,
	WwanMsmEventTypeActivated = 0xa,
	WwanMsmEventTypeDeactivated = 0xb,
	WwanMsmEventTypeRegisterComplete = 0xc,
	WwanMsmEventTypeRegisterFailed = 0xd,
	WwanMsmEventTypeConnectComplete = 0xe,
	WwanMsmEventTypeConnectFailed = 0xf,
	WwanMsmEventTypeDisconnectComplete = 0x10,
	WwanMsmEventTypeDisconnectFailed = 0x11,
	WwanMsmEventTypeSubscriberInfo = 0x12,
	WwanMsmEventTypeGetPinInfoComplete = 0x13,
	WwanMsmEventTypeGetPinInfoFailed = 0x14,
	WwanMsmEventTypeGetPinListComplete = 0x15,
	WwanMsmEventTypeGetPinListFailed = 0x16,
	WwanMsmEventTypePinActionComplete = 0x17,
	WwanMsmEventTypePinActionFailed = 0x18,
	WwanMsmEventTypeSignalState = 0x19,
	WwanMsmEventTypeSetSignalStateComplete = 0x1a,
	WwanMsmEventTypeSetSignalStateFailed = 0x1b,
	WwanMsmEventTypeRadioState = 0x1c,
	WwanMsmEventTypeSetRadioStateComplete = 0x1d,
	WwanMsmEventTypeSetRadioStateFailed = 0x1e,
	WwanMsmEventTypeSetProvisionedContextComplete = 0x1f,
	WwanMsmEventTypeSetProvisionedContextFailed = 0x20,
	WwanMsmEventTypeGetHomeProviderComplete = 0x21,
	WwanMsmEventTypeSetSmsConfigurationComplete = 0x22,
	WwanMsmEventTypeSmsConfigurationChanged = 0x23,
	WwanMsmEventTypeSmsReadComplete = 0x24,
	WwanMsmEventTypeSmsNewClass0Message = 0x25,
	WwanMsmEventTypeSmsSendComplete = 0x26,
	WwanMsmEventTypeSmsDeleteComplete = 0x27,
	WwanMsmEventTypeSmsStatus = 0x28,
	WwanMsmEventTypeProfileUpdate = 0x29,
	WwanMsmEventTypeSetPreferredProvidersComplete = 0x2a,
	WwanMsmEventTypeSetPreferredProvidersFailed = 0x2b,
	WwanMsmEventTypeIStreamChanged = 0x2c,
	WwanMsmEventTypeProfileIStreamCreated = 0x2d,
	WwanMsmEventTypeProfileIStreamUpdated = 0x2e,
	WwanMsmEventTypeProfileIStreamDeleted = 0x2f,
	WwanMsmEventTypeConnectionIStreamCreated = 0x30,
	WwanMsmEventTypeConnectionIStreamUpdated = 0x31,
	WwanMsmEventTypeConnectionIStreamDeleted = 0x32,
	WwanMsmEventTypeUssd = 0x33,
	WwanMsmEventTypeInterfaceStateChangeTrigger = 0x34,
	WwanMsmEventTypeInterfaceAcState = 0x35,
	WwanMsmEventTypeInternalAdditionalContextCeased = 0x36,
	WwanMsmEventTypeNLAPluginNotification = 0x37,
	WwanMsmEventTypeVoiceCallState = 0x38,
	WwanMsmEventTypeDataSuspensionState = 0x39,
	WwanMsmEventTypeProfileMetadataChanged = 0x3a,
	WwanMsmEventTypeDMConfigProfileUpdate = 0x3b,
	WwanMsmEventTypeDMConfigBinaryGetComplete = 0x3c,
	WwanMsmEventTypeDMConfigBinarySetComplete = 0x3d,
	WwanMsmEventTypeVoiceDomain = 0x3e,
	WwanMsmEventTypeImsCapabilities = 0x3f,
	WwanMsmEventTypeModemDataAffinityRequest = 0x40,
	WwanMsmEventTypeModemResetRequest = 0x41,
	WwanMsmEventTypeVendorSpecific = 0x42,
	WwanMsmEventTypeUiccBindingsChanged = 0x43,
	WwanMsmEventTypeUiccCardInfo = 0x44,
	WwanMsmEventTypeUiccRead = 0x45,
	WwanMsmEventTypeModemReset = 0x46,
	WwanMsmEventTypeUiccRecordStatus = 0x47,
	WwanMsmEventTypeDataEnablementChange = 0x48,
	WwanMsmEventTypeRoamingPolicyChange = 0x49,
	WwanMsmEventTypeUsedForInternetDataChange = 0x4a,
	WwanMsmEventTypeIPV6EhrpdControlSetComplete = 0x4b,
	WwanMsmEventTypeIPV6EhrpdControlGetComplete = 0x4c,
	WwanMsmEventTypeShellStartReady = 0x4d,
	WwanMsmEventTypeNetworkLTEAttachInfo = 0x4e,
	WwanMsmEventTypeUiccOpenChannelComplete = 0x4f,
	WwanMsmEventTypeUiccCloseChannelComplete = 0x50,
	WwanMsmEventTypeUiccSendApduComplete = 0x51,
	WwanMsmEventTypeUiccGetTerminalCapabilityComplete = 0x52,
	WwanMsmEventTypePsMediaPref = 0x53,
	WwanMsmEventTypePsMediaPrefSetResponse = 0x54,
	WwanMsmEventTypeHighestConnCategory = 0x55,
	WwanMsmEventTypeEnterpriseAPNParams = 0x56,
	WwanMsmEventTypeAtrInfo = 0x57,
	WwanMsmEventTypeUiccCardAdditionalInfo = 0x58,
	WwanMsmEventTypeDisallowAutoConnectChanged = 0x59,
	WwanMsmEventTypeManualConnectSessionStateChanged = 0x5a,
	WwanMsmEventTypeProvisioningStateChanged = 0x5b,
	WwanMsmEventTypeSarConfig = 0x5c,
	WwanMsmEventTypeSarTransmissionStatus = 0x5d,
	WwanMsmEventTypeLteAttachProfileUpdate = 0x5e,
	WwanMsmEventTypeMultiSIMInfo = 0x5f,
	WwanMsmEventTypeMultiSIMSlotMapping = 0x60,
	WwanMsmEventTypeModemProvisioningInfo = 0x61,
	WwanMsmEventTypeCellInfo = 0x62,
	WwanMsmEventTypePcoStatus = 0x63,
	WwanMsmEventTypeUiccResetComplete = 0x64,
	WwanMsmEventTypeDeviceResetStatus = 0x65,
	WwanMsmEventTypeVerifyUiccPin = 0x66,
	WwanMsmEventTypeToggleUiccPin = 0x67,
	WwanMsmEventTypeChangeUiccPin = 0x68,
	WwanMsmEventTypeGetLockStatePin = 0x69,
	WwanMsmEventTypeVerifyPerso = 0x6a,
	WwanMsmEventTypeUserPinInput = 0x6b,
	WwanMsmEventTypeSimPinAppExecution = 0x6c,
	WwanMsmEventTypeModemLogging = 0x6d,
	WwanMsmEventTypeResetExecutorConfig = 0x6e,
	WwanMsmEventTypeRegistrationStatus = 0x6f,
	WwanMsmEventTypeConsecutiveOIDTimedOutInfo = 0x70,
	WwanMsmEventTypeRnROccurrence = 0x71,
	WwanMsmEventTypeDataServiceState = 0x72,
	WwanMsmEventTypeMax = 0x73
};

struct WWAN_PACKET_OBJECT {
	/*0000*/ _WWAN_PACKET_SERVICE packetState;
	/*0020*/ ULONG uStatus;
	/*0024*/
};

struct WWAN_PIN_ACTION_COMPLETE_INFO {
	/*0000*/ _WWAN_PIN_ACTION pinAction;
	/*0050*/ _WWAN_PIN_INFO pinInfo;
	/*005c*/
};

struct WWAN_PIN_ACTION_FAILED_INFO {
	/*0000*/ WWAN_ERROR_CODE ErrorCode;
	/*0008*/ _WWAN_PIN_ACTION pinAction;
	/*0058*/ _WWAN_PIN_INFO pinInfo;
	/*0064*/
};

struct WWAN_PIN_LIST_RESULT {
	/*0000*/ ULONG executorId;
	/*0004*/ _WWAN_PIN_LIST pinList;
	/*00a4*/ ULONG uStatus;
	/*00a8*/
};

enum WWAN_PNP_EVENT_TYPE {
	WwanPnpEventTypeInterfaceArrival = 0x0,
	WwanPnpEventTypeInterfaceRemoval = 0x1,
	WwanPnpEventTypeChildInterfaceArrival = 0x2,
	WwanPnpEventTypeChildInterfaceRemoval = 0x3
};

union WWAN_POINTER_64 {
	/*0000*/ void * pValue;
	/*0000*/ ULONGLONG dummy;
	/*0008*/
};

struct WWAN_PREFERRED_PROVIDER_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _WWAN_PROVIDER pProvider[0x1];
	/*0048*/
};

struct WWAN_PROFILE {
	/*0000*/ WCHAR name[0x100];
	/*0200*/ WCHAR desc[0x100];
	/*0400*/ WCHAR iconFile[0x400];
	/*0c00*/ INT isDefault;
	/*0c04*/ WWAN_PROFILE_CREATION_TYPE creationType;
	/*0c08*/ WCHAR subId[0x10];
	/*0c28*/ WCHAR simIccID[0x15];
	/*0c52*/ WCHAR homeProviderName[0x15];
	/*0c7c*/ INT autoConnectOnInternet;
	/*0c80*/ WWAN_PROFILE_CONN_MODE connMode;
	/*0c88*/ WWAN_CONTEXT_INFO ctxt;
	/*1180*/ INT fIsWwanContextInfoValid;
	/*1188*/ WWAN_PROVIDER_INFO_LIST * pDataRoamingProviderList;
	/*1188*/ ULONGLONG dummy;
	/*1190*/ INT isPurchaseProfile;
	/*1194*/ INT isDisplayProviderNameLongUsed;
	/*1198*/ WCHAR displayProviderName[0x41];
	/*121c*/ INT isAdditionalPdpContextProfile;
	/*1220*/ INT isTetheringProfile;
	/*1224*/ ULONG MBNProfileVersion;
	/*1228*/ WWAN_PROFILE_PURPOSE_GROUPS purposeGroups;
	/*12cc*/ ULONG ConnectionCapabilities;
	/*12d0*/ WWAN_PROFILE_CONDITIONS conditionedOn;
	/*1300*/ ULONG apnID;
	/*1304*/ WWAN_PROFILE_ROAM_CONTROL adminRoamControl;
	/*1308*/ INT isProvisioningProfile;
	/*130c*/ INT isAdminEnabled;
	/*1310*/ WWAN_PROFILE_ROAM_APPLICABILITY dMConfigRoamApplicable;
	/*1314*/ _GUID guidOEMConnId;
	/*1324*/ WWAN_MMS_CONFIGURATION mmsConfiguration;
	/*152c*/ INT bFollowInternetConnectionEnablementPolicy;
	/*1530*/ INT bFollowInternetConnectionRoamingPolicy;
	/*1534*/ ULONG TrafficRulePrecedence;
	/*1538*/ TRAFFIC_DESCRIPTOR TrafficDescriptor;
	/*1850*/ ROUTE_SELECTION_DESCRIPTOR_LIST * pRSDList;
	/*1850*/ ULONGLONG RSDdummy;
	/*1858*/
};

enum WWAN_PROFILE_ACCESS_MASK {
	WwanProfileReadAccess = 0x0,
	WwanProfileExecuteAccess = 0x1,
	WwanProfileWriteAccess = 0x2
};

struct WWAN_PROFILE_CONDITIONS {
	/*0000*/ _WWAN_CELLULAR_CLASS cellClass;
	/*0004*/ WWAN_PROFILE_RAT_APPLICABILITY ratApplicable;
	/*0008*/ WWAN_PROFILE_ROAM_APPLICABILITY roamApplicable;
	/*000c*/ WCHAR imsi[0x10];
	/*002c*/ WWAN_PROFILE_IWLAN_APPLICABILITY iwlanApplicable;
	/*0030*/
};

enum WWAN_PROFILE_CONN_MODE {
	WWAN_PROFILE_CONN_MODE_MANUAL = 0x0,
	WWAN_PROFILE_CONN_MODE_AUTO = 0x1,
	WWAN_PROFILE_CONN_MODE_AUTO_HOME = 0x2
};

enum WWAN_PROFILE_CREATION_TYPE {
	WwanProfileUserProvisioned = 0x0,
	WwanProfileAdminProvisioned = 0x1,
	WwanProfileOperatorProvisioned = 0x2,
	WwanProfileDeviceProvisioned = 0x3,
	WwanProfileModemProvisioned = 0x4,
	WwanProfileModemOPeratorProvisioned = 0x5
};

struct WWAN_PROFILE_INFO {
	/*0000*/ WCHAR strProfileName[0x100];
	/*0200*/ ULONG dwFlags;
	/*0204*/
};

struct WWAN_PROFILE_INFO_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ WWAN_PROFILE_INFO pProfileInfo[0x1];
	/*0208*/
};

enum WWAN_PROFILE_INVALID_REASON {
	WwanProfileErrNone = 0x0,
	WwanProfileErrDuplicateName = 0x1,
	WwanProfileErrInvalidKey = 0x2,
	WwanProfileXmlErrInvalidXml = 0x3,
	WwanProfileErrDefaultExists = 0x4,
	WwanProfileErrInvalidIconFile = 0x5,
	WwanProfileErrMax = 0x6
};

enum WWAN_PROFILE_IWLAN_APPLICABILITY {
	WWAN_PROFILE_IWLAN_APPLICABILITY_ABSENT = 0x0,
	WWAN_PROFILE_IWLAN_APPLICABLE_CELLULARONLY = 0x1,
	WWAN_PROFILE_IWLAN_APPLICABLE_CELLULARANDIWLAN = 0x2,
	WWAN_PROFILE_IWLAN_APPLICABLE_IWLANONLY = 0x3
};

struct WWAN_PROFILE_METADATA_CHANGED_INFO {
	/*0000*/ WCHAR wszProfileName[0x100];
	/*0200*/ WCHAR wszProfileMetadataName[0x100];
	/*0400*/
};

enum WWAN_PROFILE_PASSWORD_PROTECTION {
	WwanProfilePasswordExcluded = 0x0,
	WwanProfilePasswordEncrypted = 0x1,
	WwanProfilePasswordCleartext = 0x2
};

struct WWAN_PROFILE_PURPOSE_GROUPS {
	/*0000*/ ULONG numBelongingPurposes;
	/*0004*/ _GUID purposeGroupGuids[0xa];
	/*00a4*/
};

enum WWAN_PROFILE_RAT_APPLICABILITY {
	WWAN_PROFILE_RAT_APPLICABILITY_ABSENT = 0x0,
	WWAN_PROFILE_RAT_APPLICABLE_LTE_EHRPD = 0x1,
	WWAN_PROFILE_RAT_APPLICABLE_3GPP_LEGACY = 0x2
};

enum WWAN_PROFILE_ROAM_APPLICABILITY {
	WWAN_PROFILE_ROAM_APPLICABILITY_ABSENT = 0x0,
	WWAN_PROFILE_ROAM_APPLICABLE_NONPARTNERONLY = 0x1,
	WWAN_PROFILE_ROAM_APPLICABLE_PARTNERONLY = 0x2,
	WWAN_PROFILE_ROAM_APPLICABLE_HOMERONLY = 0x3,
	WWAN_PROFILE_ROAM_APPLICABLE_HOMEANDPARTNER = 0x4,
	WWAN_PROFILE_ROAM_APPLICABLE_PARTNERANDNONPARTNER = 0x5,
	WWAN_PROFILE_ROAM_APPLICABLE_ALLROAMINGTYPES = 0x6
};

enum WWAN_PROFILE_ROAM_CONTROL {
	WWAN_ROAM_CONTROL_ALL_ROAM_ALLOWED = 0x0,
	WWAN_ROAM_CONTROL_PARTNER_ROAM_ALLOWED = 0x1,
	WWAN_ROAM_CONTROL_NO_ROAM_ALLOWED = 0x2
};

enum WWAN_PROFILE_STATE_TYPE {
	WwanProfileStateUnavailable = 0x0,
	WwanProfileStateDisconnectedAvailable = 0x1,
	WwanProfileStateConnected = 0x2,
	WwanProfileStateMax = 0x3
};

struct WWAN_PROFILE_UPDATE_INFO {
	/*0000*/ WWAN_PROFILE_UPDATE_TYPE profileUpdateType;
	/*0004*/ WCHAR wProfileName[0x100];
	/*0204*/ WCHAR wOldProfileName[0x100];
	/*0408*/ WWAN_API_INFO apiInfo;
	/*0430*/ ULONG OEMConnIdListid;
	/*0438*/
};

enum WWAN_PROFILE_UPDATE_TYPE {
	WwanProfileUpdateCreated = 0x0,
	WwanProfileUpdateUpdated = 0x1,
	WwanProfileUpdateRenamed = 0x2,
	WwanProfileUpdateDeleted = 0x3,
	WwanProfileUpdateMax = 0x4
};

enum WWAN_PROTECTION_MODE {
	WwanProtectionModeNone = 0x0,
	WwanProtectionModeProtected = 0x1,
	WwanProtectionModeNotProtected = 0x2
};

struct WWAN_PROVIDER_INFO {
	/*0000*/ WCHAR id[0x7];
	/*000e*/ WCHAR name[0x15];
	/*0038*/
};

struct WWAN_PROVIDER_INFO_LIST {
	/*0000*/ ULONG num;
	/*0004*/ WWAN_PROVIDER_INFO info[0x1];
	/*003c*/
};

struct WWAN_PROVIDER_OBJECT {
	/*0000*/ _WWAN_PROVIDER provider;
	/*0044*/ ULONG uStatus;
	/*0048*/
};

struct WWAN_RADIO_COMPLETE_INFO_EXT {
	/*0000*/ _WWAN_RADIO_STATE clientRequestedRadioState;
	/*0008*/ ULONG requestId;
	/*000c*/ _WWAN_RADIO_STATE currentRadioPowerState;
	/*0014*/
};

struct WWAN_RADIO_FAILED_INFO {
	/*0000*/ WWAN_ERROR_CODE ErrorCode;
	/*0008*/ _WWAN_RADIO swRadioAction;
	/*000c*/
};

struct WWAN_RADIO_FAILED_INFO_EXT {
	/*0000*/ WWAN_RADIO_FAILED_INFO radioFailedInfo;
	/*000c*/ ULONG requestId;
	/*0010*/ _WWAN_RADIO_STATE currentRadioPowerState;
	/*0018*/
};

struct WWAN_RADIO_INFO_EXT {
	/*0000*/ _WWAN_RADIO_STATE clientRequestedRadioState;
	/*0008*/ _WWAN_RADIO_STATE currentRadioPowerState;
	/*0010*/
};

struct WWAN_RADIO_OBJECT {
	/*0000*/ _WWAN_RADIO_STATE radioState;
	/*0008*/ ULONG uStatus;
	/*000c*/
};

struct WWAN_READY_OBJECT {
	/*0000*/ _WWAN_READY_INFO readyInfo;
	/*0060*/ WCHAR * pTNs;
	/*0060*/ ULONGLONG dummy;
	/*0068*/ ULONG uStatus;
	/*0070*/
};

enum WWAN_REASON_CODE {
	dummy = 0x0
};

struct WWAN_REGISTER_FAILED_INFO {
	/*0000*/ WWAN_ERROR_CODE ErrCode;
	/*0008*/ _WWAN_REGISTER_MODE RegisterMode;
	/*000c*/ WCHAR strProviderId[0x7];
	/*001c*/ ULONG WwanDataClass;
	/*0020*/
};

struct WWAN_REGISTER_OBJECT {
	/*0000*/ _WWAN_REGISTRATION_STATE registrationState;
	/*00d0*/ ULONG uStatus;
	/*00d4*/
};

struct WWAN_RNR_OCCURRENCE_INFO {
	/*0000*/ INT fStartOrFinish;
	/*0004*/ WwanRnRTrigger trigger;
	/*0008*/ WwanTelemetryRnRResult result;
	/*000c*/ ULONG stage;
	/*0010*/ ULONGLONG tick;
	/*0018*/
};

enum WWAN_SCAN_RESULT {
	WwanScanNone = 0x0,
	WwanScanRoam = 0x1,
	WwanScanMultiCarrier = 0x2
};

struct WWAN_SERVICE_ACTIVATION_OBJECT {
	/*0000*/ _WWAN_SERVICE_ACTIVATION_STATUS status;
	/*0008*/ void * pData;
	/*0008*/ ULONGLONG dummy;
	/*0010*/
};

enum WWAN_SETQUERY_TYPE {
	WwanSetQueryTypeSet = 0x0,
	WwanSetQueryTypeQuery = 0x1
};

struct WWAN_SET_DM_CONFIG_BINARY_INFO {
	/*0000*/ ULONG version;
	/*0004*/ ULONG cbSize;
	/*0008*/ UCHAR rgbIccid[0xa];
	/*0014*/ ULONG dwPriority;
	/*0018*/
};

struct WWAN_SET_PROVISIONED_CONTEXT_FAILED_INFO {
	/*0000*/ ULONG dwErrCode;
	/*0004*/ ULONG ContextId;
	/*0008*/
};

struct WWAN_SET_SMS_CONFIGURATION_COMPLETE_INFO {
	/*0000*/ ULONG uStatus;
	/*0004*/
};

struct WWAN_SIGNAL_INDICATION {
	/*0000*/ ULONG RssiInterval;
	/*0004*/ ULONG RssiThreshold;
	/*0008*/
};

struct WWAN_SIGNAL_INFO {
	/*0000*/ ULONG Rssi;
	/*0004*/ ULONG ErrorRate;
	/*0008*/ WWAN_SIGNAL_INDICATION SignalIndication;
	/*0010*/ ULONG NumberOfBars;
	/*0014*/ ULONG ElementCount;
	/*0018*/ _WWAN_SIGNAL_STATE_EXT SignalExtension[0x2];
	/*0040*/
};

struct WWAN_SIGNAL_OBJECT {
	/*0000*/ WWAN_SIGNAL_INFO signalInfo;
	/*0040*/ ULONG uStatus;
	/*0044*/
};

struct WWAN_SMS_CONFIG_OBJECT {
	/*0000*/ _WWAN_SMS_CONFIGURATION smsConfiguration;
	/*0018*/ ULONG uStatus;
	/*001c*/
};

struct WWAN_SMS_DELETE_COMPLETE_INFO {
	/*0000*/ ULONG uStatus;
	/*0004*/
};

struct WWAN_SMS_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _WWAN_SMS_FORMAT SmsFormat;
	/*0008*/ WWAN_SMS_RECORD pSmsRecord[0x1];
	/*0180*/
};

struct WWAN_SMS_READ_COMPLETE_INFO {
	/*0000*/ ULONG uStatus;
	/*0004*/ WWAN_SMS_LIST SmsList;
	/*0184*/
};

union WWAN_SMS_RECORD {
	/*0000*/ _WWAN_SMS_PDU_RECORD Pdu;
	/*0000*/ _WWAN_SMS_CDMA_RECORD Cdma;
	/*0178*/
};

struct WWAN_SMS_SEND_COMPLETE_INFO {
	/*0000*/ ULONG uStatus;
	/*0004*/ ULONG MessageReference;
	/*0008*/
};

struct WWAN_SMS_STATUS_INFO {
	/*0000*/ ULONG uStatus;
	/*0004*/ _WWAN_SMS_STATUS SmsStatus;
	/*000c*/
};

struct WWAN_SMS_STATUS_OBJECT {
	/*0000*/ _WWAN_SMS_STATUS smsStatus;
	/*0008*/ ULONG uStatus;
	/*000c*/
};

enum WWAN_SSC_MODE {
	WwanSSCModeNone = 0x0,
	WwanSSCMode1 = 0x1,
	WwanSSCMode2 = 0x2,
	WwanSSCMode3 = 0x3,
	WwanSSCModeMax = 0x4
};

struct WWAN_SUBSCRIBER_INFORMATION {
	/*0000*/ _WWAN_READY_STATE ReadyState;
	/*0004*/ _WWAN_EMERGENCY_MODE EmergencyMode;
	/*0008*/ WCHAR SubscriberId[0x10];
	/*0028*/ WCHAR SimIccId[0x15];
	/*0052*/ UCHAR CdmaShortMsgSize;
	/*0054*/ ULONG NumTN;
	/*0058*/ WCHAR TN[0x1][0x17];
	/*0088*/
};

enum WWAN_SYSTEM_TYPE {
	WwanSystemTypeCdma1xRtt = 0x1,
	WwanSystemTypeEvdo = 0x2,
	WwanSystemTypeGsm = 0x4,
	WwanSystemTypeUmts = 0x8,
	WwanSystemTypeLte = 0x10,
	WwanSystemTypeTdscdma = 0x20
};

enum WWAN_TEST_MODE_AREA {
	WwanTestModeAreaRoamingFilter = 0x0,
	WwanTestModeAreaRnR = 0x1,
	WwanTestModeAreaRnRForcedRegStateQuery = 0x2,
	WwanTestModeAreaRnRForcedRadioStateQuery = 0x3,
	WwanTestModeAreaMax = 0x4
};

struct WWAN_TEST_MODE_DATA {
	/*0000*/ WWAN_TEST_MODE_AREA areaCode;
	/*0004*/ ULONG areaSpecificTestModeDataArray[0x1];
	/*0008*/
};

struct WWAN_UICCFILE_DESCRIPTION {
	/*0000*/ ULONG hUiccApp;
	/*0004*/ ULONG dwFilePathLen;
	/*0008*/ USHORT rgwFilePath[0x8];
	/*0018*/ ULONG dwRecordIndex;
	/*001c*/ ULONG cbUiccId;
	/*0020*/ UCHAR rgbiccId[0xa];
	/*002c*/
};

struct WWAN_UICC_APDU_COMPLETE_INFO {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG WwanStatus;
	/*0008*/ _WWAN_UICC_APDU_INFO ApduInfo;
	/*0014*/
};

struct WWAN_UICC_BINDINGS {
	/*0000*/ ULONG dwSlotIndex;
	/*0004*/ UCHAR rgbIccid[0xa];
	/*0010*/
};

enum WWAN_UICC_CARD_LINE_INFO_PARAM_MASK {
	WWAN_PARAM_CARDLINEINFO_LANG = 0x1,
	WWAN_PARAM_CARDLINEINFO_IMSI = 0x2,
	WWAN_PARAM_CARDLINEINFO_SPN = 0x4,
	WWAN_PARAM_CARDLINEINFO_GID1 = 0x8,
	WWAN_PARAM_CARDLINEINFO_PNN = 0x10,
	WWAN_PARAM_CARDLINEINFO_GID2 = 0x20,
	WWAN_PARAM_CARDLINEINFO_ALL = 0x3f
};

struct WWAN_UICC_CLOSE_CHANNEL_COMPLETE_INFO {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG WwanStatus;
	/*0008*/ _WWAN_UICC_CLOSE_CHANNEL_INFO CloseChannelInfo;
	/*000c*/
};

struct WWAN_UICC_OPEN_CHANNEL_COMPLETE_INFO {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG WwanStatus;
	/*0008*/ _WWAN_UICC_OPEN_CHANNEL_INFO OpenChannelInfo;
	/*0018*/
};

struct WWAN_UICC_TERMINAL_CAPABILITY_COMPLETE_INFO {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG WwanStatus;
	/*0008*/ ULONG NumberOfItems;
	/*000c*/ _WWAN_UICC_TERMINAL_CAPABILITY_TLV CapabilityList[0x1];
	/*0010*/
};

struct WWAN_USSD_EVENT_INFO {
	/*0000*/ ULONG uStatus;
	/*0004*/ _WWAN_USSD_EVENT UssdEvent;
	/*00b0*/
};

struct WWAN_VENDOR_SPECIFIC_OBJECT {
	/*0000*/ _WWAN_VENDOR_SPECIFIC status;
	/*0008*/ void * pData;
	/*0008*/ ULONGLONG dummy;
	/*0010*/
};

struct WWAN_VISIBLE_NETWORK {
	/*0000*/ _WWAN_PROVIDER provider;
	/*0044*/ INT bNetworkConnectable;
	/*0048*/ WWAN_REASON_CODE wwanNotConnectableReason;
	/*004c*/ ULONG wwanSignalQuality;
	/*0050*/ ULONG dwReserved;
	/*0054*/
};

struct WWAN_VISIBLE_NETWORK_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ WWAN_VISIBLE_NETWORK pVisibleNetwork[0x1];
	/*0058*/
};

struct WWAN_VOICE_DOMAIN_INFO {
	/*0000*/ ULONG ulRequestId;
	/*0004*/ ULONG status;
	/*0008*/ _WWAN_VOICE_DOMAIN voiceDomain;
	/*000c*/
};

struct WWAN_WCM_CONNECTION_STATES {
	/*0000*/ INT fClearManualConnectFlag;
	/*0004*/
};

enum WindowTransparencyMode {
	WTM_TransparentWhenActive = 0x0,
	WTM_AlwaysOpaque = 0x1,
	WTM_AlwaysTransparent = 0x2
};

struct WinrtRtti {
	/*0000*/ WinrtRttiKind Kind;
	/*0004*/ ULONG Version;
	/*0008*/ WinrtRtti const * Namespace;
	/*0010*/ WCHAR const * Name;
	/*0018*/ _MIDL_METHOD_PROPERTY_MAP PropertyMap;
	/*0028*/
};

struct WinrtRttiDelegate_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/ _GUID const * Iid;
	/*0030*/
};

struct WinrtRttiInterface_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/ _GUID const * Iid;
	/*0030*/
};

enum WinrtRttiKind {
	WinrtRttiKind_Namespace = 0x0,
	WinrtRttiKind_RuntimeClass = 0x1,
	WinrtRttiKind_Interface = 0x2,
	WinrtRttiKind_Delegate = 0x3,
	WinrtRttiKind_ParameterizedInterface = 0x4,
	WinrtRttiKind_ParameterizedInterfaceInstance = 0x5,
	WinrtRttiKind_ParameterizedDelegate = 0x6,
	WinrtRttiKind_ParameterizedDelegateInstance = 0x7
};

struct WinrtRttiNamespace_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/
};

struct WinrtRttiParameterizedDelegateInstance_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/ _GUID const * Iid;
	/*0030*/ WinrtRtti const * ParameterizedDelegate;
	/*0038*/
};

struct WinrtRttiParameterizedDelegate_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/
};

struct WinrtRttiParameterizedInterfaceInstance_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/ _GUID const * Iid;
	/*0030*/ WinrtRtti const * ParameterizedInterface;
	/*0038*/
};

struct WinrtRttiParameterizedInterface_V1 {
	/*0000*/ WinrtRtti _Base;
	/*0028*/
};

class WlanHelper {
public:
	HRESULT SetInterfaceMediaStreamingMode( _GUID * );
	HRESULT ResetInterfaceMediaStreamingMode( _GUID * );
	WLAN_ENTRY * FindInterface( _GUID * );
	HRESULT GetWlanHandleWithMediaStreamingMode( _GUID * , void * * );
	static WlanHelper Instance;
	HRESULT RegisterSuspendResumeHandler();
	void UnRegisterSuspendResumeHandler();
	static void SuspendResumeHandler( UCHAR , void * , void * );
	void OnSuspendResume( UCHAR );
private:
	void WlanHelper();
	/*0000*/ Lock m_Lock;
	/*0028*/ _PSM_APPSTATE_REGISTRATION * m_PSMRegistration;
	/*0030*/ _LIST_ENTRY m_wlanInterfaceList;
public:
	void ~WlanHelper();
	void * __vecDelDtor( UINT );
	/*0040*/
};

struct WppPointerToUshort {
	/*0000*/ USHORT m_val;
	void WppPointerToUshort( USHORT );
	USHORT const * get() const;
	/*0002*/
};

enum WwanRnRTrigger {
	WwanRnRTrigger_Unknown = 0x0,
	WwanRnRTrigger_WCMIndicatingBadL3Connectivity = 0x1,
	WwanRnRTrigger_ConsecutiveOIDsTimedOut = 0x2,
	WwanRnRTrigger_CriticalOIDTimeout = 0x3,
	WwanRnRTrigger_FailureForRadioStateSetQuery = 0x4,
	WwanRnRTrigger_NoWCML3ConnectivityInfo = 0x5,
	WwanRnRTrigger_InitializationFailure = 0x6
};

enum WwanTelemetryRnRResult {
	WwanTelemetryRnRResult_Unknown = 0x0,
	WwanTelemetryRnRResult_Succeeded = 0x1,
	WwanTelemetryRnRResult_Failed = 0x2,
	WwanTelemetryRnRResult_Duplicate = 0x3,
	WwanTelemetryRnRResult_Ignored = 0x4,
	WwanTelemetryRnRResult_Abandoned = 0x5,
	WwanTelemetryRnRResult_Throttled = 0x6,
	WwanTelemetryRnRResult_IgnoredL3NeverGood = 0x7,
	WwanTelemetryRnRResult_IgnoredSignalLow = 0x8,
	WwanTelemetryRnRResult_BestEffortAttempt = 0x9,
	WwanTelemetryRnRResult_IgnoredNoPotentMethodStarted = 0xa
};

enum XLAT_SIDE {
	XLAT_SERVER = 0x1,
	XLAT_CLIENT = 0x2
};

struct XMLDOMDocumentEvents : IDispatch {
	void XMLDOMDocumentEvents( XMLDOMDocumentEvents && );
	void XMLDOMDocumentEvents( XMLDOMDocumentEvents const & );
	void XMLDOMDocumentEvents();
	XMLDOMDocumentEvents & operator=( XMLDOMDocumentEvents && );
	XMLDOMDocumentEvents & operator=( XMLDOMDocumentEvents const & );
	/*0008*/
};

struct XSAVE_CPU_ERRATA {
	/*0000*/ ULONG NumberOfErrata;
	/*0008*/ XSAVE_CPU_INFO Errata[0x1];
	/*0028*/
};

struct XSAVE_CPU_INFO {
	/*0000*/ UCHAR Processor;
	/*0002*/ USHORT Family;
	/*0004*/ USHORT Model;
	/*0006*/ USHORT Stepping;
	/*0008*/ USHORT ExtendedModel;
	/*000c*/ ULONG ExtendedFamily;
	/*0010*/ ULONGLONG MicrocodeVersion;
	/*0018*/ ULONG Reserved;
	/*0020*/
};

struct _ABC {
	/*0000*/ INT abcA;
	/*0004*/ UINT abcB;
	/*0008*/ INT abcC;
	/*000c*/
};

struct _ABCFLOAT {
	/*0000*/ float abcfA;
	/*0004*/ float abcfB;
	/*0008*/ float abcfC;
	/*000c*/
};

struct _ACCESS_ALLOWED_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _ACCESS_ALLOWED_CALLBACK_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _ACCESS_ALLOWED_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _ACCESS_DENIED_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _ACCESS_DENIED_CALLBACK_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _ACCESS_DENIED_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _ACCESS_REASONS {
	/*0000*/ ULONG Data[0x20];
	/*0080*/
};

enum _ACCESS_REASON_TYPE {
	AccessReasonNone = 0x0,
	AccessReasonAllowedAce = 0x10000,
	AccessReasonDeniedAce = 0x20000,
	AccessReasonAllowedParentAce = 0x30000,
	AccessReasonDeniedParentAce = 0x40000,
	AccessReasonNotGrantedByCape = 0x50000,
	AccessReasonNotGrantedByParentCape = 0x60000,
	AccessReasonNotGrantedToAppContainer = 0x70000,
	AccessReasonMissingPrivilege = 0x100000,
	AccessReasonFromPrivilege = 0x200000,
	AccessReasonIntegrityLevel = 0x300000,
	AccessReasonOwnership = 0x400000,
	AccessReasonNullDacl = 0x500000,
	AccessReasonEmptyDacl = 0x600000,
	AccessReasonNoSD = 0x700000,
	AccessReasonNoGrant = 0x800000,
	AccessReasonTrustLabel = 0x900000,
	AccessReasonFilterAce = 0xa00000
};

struct _ACE_HEADER {
	/*0000*/ UCHAR AceType;
	/*0001*/ UCHAR AceFlags;
	/*0002*/ USHORT AceSize;
	/*0004*/
};

struct _ACL {
	/*0000*/ UCHAR AclRevision;
	/*0001*/ UCHAR Sbz1;
	/*0002*/ USHORT AclSize;
	/*0004*/ USHORT AceCount;
	/*0006*/ USHORT Sbz2;
	/*0008*/
};

enum _ACL_INFORMATION_CLASS {
	AclRevisionInformation = 0x1,
	AclSizeInformation = 0x2
};

struct _ACL_REVISION_INFORMATION {
	/*0000*/ ULONG AclRevision;
	/*0004*/
};

struct _ACL_SIZE_INFORMATION {
	/*0000*/ ULONG AceCount;
	/*0004*/ ULONG AclBytesInUse;
	/*0008*/ ULONG AclBytesFree;
	/*000c*/
};

struct _ACTIVATION_CONTEXT;

struct _ACTIVATION_CONTEXT_ASSEMBLY_DATA {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ WCHAR const * AssemblyName;
	/*0010*/ ULONG AssemblyNameLength;
	/*0014*/ ULONG HashAlgorithm;
	/*0018*/ ULONG PseudoKey;
	/*0020*/
};

struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ULONG ulEncodedAssemblyIdentityLength;
	/*0008*/ ULONG ulManifestPathType;
	/*000c*/ ULONG ulManifestPathLength;
	/*0010*/ _LARGE_INTEGER liManifestLastWriteTime;
	/*0018*/ ULONG ulPolicyPathType;
	/*001c*/ ULONG ulPolicyPathLength;
	/*0020*/ _LARGE_INTEGER liPolicyLastWriteTime;
	/*0028*/ ULONG ulMetadataSatelliteRosterIndex;
	/*002c*/ ULONG ulManifestVersionMajor;
	/*0030*/ ULONG ulManifestVersionMinor;
	/*0034*/ ULONG ulPolicyVersionMajor;
	/*0038*/ ULONG ulPolicyVersionMinor;
	/*003c*/ ULONG ulAssemblyDirectoryNameLength;
	/*0040*/ WCHAR const * lpAssemblyEncodedAssemblyIdentity;
	/*0048*/ WCHAR const * lpAssemblyManifestPath;
	/*0050*/ WCHAR const * lpAssemblyPolicyPath;
	/*0058*/ WCHAR const * lpAssemblyDirectoryName;
	/*0060*/ ULONG ulFileCount;
	/*0068*/
};

struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
	/*0000*/ void * hActCtx;
	/*0008*/ ULONG dwFlags;
	/*0010*/
};

struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
	/*0000*/ ULONG ElementCount;
	/*0008*/ _COMPATIBILITY_CONTEXT_ELEMENT Elements[];
	/*0008*/
};

struct _ACTIVATION_CONTEXT_DATA;

struct _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION;

struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
	/*0000*/ ULONG dwFlags;
	/*0004*/ ULONG ulFormatVersion;
	/*0008*/ ULONG ulAssemblyCount;
	/*000c*/ ULONG ulRootManifestPathType;
	/*0010*/ ULONG ulRootManifestPathChars;
	/*0014*/ ULONG ulRootConfigurationPathType;
	/*0018*/ ULONG ulRootConfigurationPathChars;
	/*001c*/ ULONG ulAppDirPathType;
	/*0020*/ ULONG ulAppDirPathChars;
	/*0028*/ WCHAR const * lpRootManifestPath;
	/*0030*/ WCHAR const * lpRootConfigurationPath;
	/*0038*/ WCHAR const * lpAppDirPath;
	/*0040*/
};

enum _ACTIVATION_CONTEXT_INFO_CLASS {
	ActivationContextBasicInformation = 0x1,
	ActivationContextDetailedInformation = 0x2,
	AssemblyDetailedInformationInActivationContext = 0x3,
	FileInformationInAssemblyOfAssemblyInActivationContext = 0x4,
	RunlevelInformationInActivationContext = 0x5,
	CompatibilityInformationInActivationContext = 0x6,
	ActivationContextManifestResourceName = 0x7,
	MaxActivationContextInfoClass = 0x8,
	AssemblyDetailedInformationInActivationContxt = 0x3,
	FileInformationInAssemblyOfAssemblyInActivationContxt = 0x4
};

struct _ACTIVATION_CONTEXT_MSIX_INFO {
	/*0000*/ WCHAR ApplicationUserModelId[0x82];
	/*0104*/
};

struct _ACTIVATION_CONTEXT_QUERY_INDEX {
	/*0000*/ ULONG ulAssemblyIndex;
	/*0004*/ ULONG ulFileIndexInAssembly;
	/*0008*/
};

struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
	/*0008*/ ULONG UiAccess;
	/*000c*/
};

struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG DataFormatVersion;
	/*0008*/ void * Data;
	/*0010*/ ULONG Length;
	/*0018*/ void * SectionGlobalData;
	/*0020*/ ULONG SectionGlobalDataLength;
	/*0028*/ void * SectionBase;
	/*0030*/ ULONG SectionTotalLength;
	/*0038*/ _ACTIVATION_CONTEXT * ActivationContext;
	/*0040*/ ULONG AssemblyRosterIndex;
	/*0044*/ ULONG Flags;
	/*0048*/ _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
	/*0070*/
};

struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_2600 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG DataFormatVersion;
	/*0008*/ void * Data;
	/*0010*/ ULONG Length;
	/*0018*/ void * SectionGlobalData;
	/*0020*/ ULONG SectionGlobalDataLength;
	/*0028*/ void * SectionBase;
	/*0030*/ ULONG SectionTotalLength;
	/*0038*/ _ACTIVATION_CONTEXT * ActivationContext;
	/*0040*/ ULONG AssemblyRosterIndex;
	/*0044*/ ULONG Flags;
	/*0048*/
};

struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
	/*0000*/ _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION * Information;
	/*0008*/ void * SectionBase;
	/*0010*/ ULONG SectionLength;
	/*0018*/ void * SectionGlobalDataBase;
	/*0020*/ ULONG SectionGlobalDataLength;
	/*0028*/
};

struct _ACTIVATION_CONTEXT_STACK {
	/*0000*/ _RTL_ACTIVATION_CONTEXT_STACK_FRAME * ActiveFrame;
	/*0008*/ _LIST_ENTRY FrameListCache;
	/*0018*/ ULONG Flags;
	/*001c*/ ULONG NextCookieSequenceNumber;
	/*0020*/ ULONG StackId;
	/*0028*/
};

struct _ADMINISTRATOR_POWER_POLICY {
	/*0000*/ _SYSTEM_POWER_STATE MinSleep;
	/*0004*/ _SYSTEM_POWER_STATE MaxSleep;
	/*0008*/ ULONG MinVideoTimeout;
	/*000c*/ ULONG MaxVideoTimeout;
	/*0010*/ ULONG MinSpindownTimeout;
	/*0014*/ ULONG MaxSpindownTimeout;
	/*0018*/
};

struct _ADRENTRY {
	/*0000*/ ULONG ulReserved1;
	/*0004*/ ULONG cValues;
	/*0008*/ _SPropValue * rgPropVals;
	/*0010*/
};

struct _ADRLIST {
	/*0000*/ ULONG cEntries;
	/*0008*/ _ADRENTRY aEntries[0x1];
	/*0018*/
};

struct _ADRPARM {
	/*0000*/ ULONG cbABContEntryID;
	/*0008*/ ENTRYID * lpABContEntryID;
	/*0010*/ ULONG ulFlags;
	/*0018*/ void * lpReserved;
	/*0020*/ ULONG ulHelpContext;
	/*0028*/ WCHAR * lpszHelpFileName;
	/*0030*/ INT (* lpfnABSDI)( ULONG , void * );
	/*0038*/ void (* lpfnDismiss)( ULONG , void * );
	/*0040*/ void * lpvDismissContext;
	/*0048*/ WCHAR * lpszCaption;
	/*0050*/ WCHAR * lpszNewEntryTitle;
	/*0058*/ WCHAR * lpszDestWellsTitle;
	/*0060*/ ULONG cDestFields;
	/*0064*/ ULONG nDestFieldFocus;
	/*0068*/ WCHAR * * lppszDestTitles;
	/*0070*/ ULONG * lpulDestComps;
	/*0078*/ _SRestriction * lpContRestriction;
	/*0080*/ _SRestriction * lpHierRestriction;
	/*0088*/
};

struct _AFPROTOCOLS {
	/*0000*/ INT iAddressFamily;
	/*0004*/ INT iProtocol;
	/*0008*/
};

enum _AGGREGATION_MODE {
	AGGREGATION_MODE_NONE = 0x70,
	AGGREGATION_MODE_SUM = 0x71,
	AGGREGATION_MODE_MIN = 0x72,
	AGGREGATION_MODE_MAX = 0x73,
	AGGREGATION_MODE_INVALID = 0x74
};

struct _ALPC_BASIC_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG SequenceNo;
	/*0008*/ void * PortContext;
	/*0010*/
};

struct _ALPC_CONTEXT_ATTR {
	/*0000*/ void * PortContext;
	/*0008*/ void * MessageContext;
	/*0010*/ ULONG Sequence;
	/*0014*/ ULONG MessageId;
	/*0018*/ ULONG CallbackId;
	/*0020*/
};

struct _ALPC_DATA_VIEW_ATTR {
	/*0000*/ ULONG Flags;
	/*0008*/ void * SectionHandle;
	/*0010*/ void * ViewBase;
	/*0018*/ ULONGLONG ViewSize;
	/*0020*/
};

struct _ALPC_DIRECT_ATTR {
	/*0000*/ void * Event;
	/*0008*/
};

struct _ALPC_HANDLE_ATTR {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Reserved0 : 16; // 0x0000ffff;
	/*0000*/ ULONG SameAccess : 01; // 0x00010000;
	/*0000*/ ULONG SameAttributes : 01; // 0x00020000;
	/*0000*/ ULONG Indirect : 01; // 0x00040000;
	/*0000*/ ULONG Inherit : 01; // 0x00080000;
	/*0000*/ ULONG Reserved1 : 12; // 0xfff00000;
	/*0008*/ void * Handle;
	/*0008*/ _ALPC_HANDLE_ATTR32 * HandleAttrArray;
	/*0010*/ ULONG ObjectType;
	/*0010*/ ULONG HandleCount;
	/*0014*/ ULONG DesiredAccess;
	/*0014*/ ULONG GrantedAccess;
	/*0018*/
};

struct _ALPC_HANDLE_ATTR32 {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Reserved0 : 16; // 0x0000ffff;
	/*0000*/ ULONG SameAccess : 01; // 0x00010000;
	/*0000*/ ULONG SameAttributes : 01; // 0x00020000;
	/*0000*/ ULONG Indirect : 01; // 0x00040000;
	/*0000*/ ULONG Inherit : 01; // 0x00080000;
	/*0000*/ ULONG Reserved1 : 12; // 0xfff00000;
	/*0004*/ ULONG Handle;
	/*0008*/ ULONG ObjectType;
	/*000c*/ ULONG DesiredAccess;
	/*000c*/ ULONG GrantedAccess;
	/*0010*/
};

struct _ALPC_MESSAGE_ATTRIBUTES {
	/*0000*/ ULONG AllocatedAttributes;
	/*0004*/ ULONG ValidAttributes;
	/*0008*/
};

struct _ALPC_MESSAGE_HANDLE_INFORMATION {
	/*0000*/ ULONG Index;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG Handle;
	/*000c*/ ULONG ObjectType;
	/*0010*/ ULONG GrantedAccess;
	/*0014*/
};

enum _ALPC_MESSAGE_INFORMATION_CLASS {
	AlpcMessageSidInformation = 0x0,
	AlpcMessageTokenModifiedIdInformation = 0x1,
	AlpcMessageDirectStatusInformation = 0x2,
	AlpcMessageHandleInformation = 0x3
};

struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT {
	/*0000*/ void * CompletionKey;
	/*0008*/ void * CompletionPort;
	/*0010*/
};

struct _ALPC_PORT_ATTRIBUTES {
	/*0000*/ ULONG Flags;
	/*0004*/ _SECURITY_QUALITY_OF_SERVICE SecurityQos;
	/*0010*/ ULONGLONG MaxMessageLength;
	/*0018*/ ULONGLONG MemoryBandwidth;
	/*0020*/ ULONGLONG MaxPoolUsage;
	/*0028*/ ULONGLONG MaxSectionSize;
	/*0030*/ ULONGLONG MaxViewSize;
	/*0038*/ ULONGLONG MaxTotalSectionSize;
	/*0040*/ ULONG DupObjectTypes;
	/*0044*/ ULONG Reserved;
	/*0048*/
};

struct _ALPC_PORT_CALLBACK_INFORMATION {
	/*0000*/ void * CallbackObject;
	/*0008*/ void * Context;
	/*0010*/
};

struct _ALPC_PORT_COMPLETION_LIST_INFORMATION {
	/*0000*/ void * Buffer;
	/*0008*/ ULONG Size;
	/*000c*/ ULONG ConcurrencyCount;
	/*0010*/ ULONG AttributeFlags;
	/*0018*/
};

enum _ALPC_PORT_INFORMATION_CLASS {
	AlpcBasicInformation = 0x0,
	AlpcPortInformation = 0x1,
	AlpcAssociateCompletionPortInformation = 0x2,
	AlpcConnectedSIDInformation = 0x3,
	AlpcServerInformation = 0x4,
	AlpcMessageZoneInformation = 0x5,
	AlpcRegisterCompletionListInformation = 0x6,
	AlpcUnregisterCompletionListInformation = 0x7,
	AlpcAdjustCompletionListConcurrencyCountInformation = 0x8,
	AlpcRegisterCallbackInformation = 0x9,
	AlpcCompletionListRundownInformation = 0xa,
	AlpcWaitForPortReferences = 0xb,
	AlpcServerSessionInformation = 0xc
};

struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION {
	/*0000*/ void * Buffer;
	/*0008*/ ULONG Size;
	/*0010*/
};

struct _ALPC_SECURITY_ATTR {
	/*0000*/ ULONG Flags;
	/*0008*/ _SECURITY_QUALITY_OF_SERVICE * QoS;
	/*0010*/ void * ContextHandle;
	/*0018*/
};

struct _ALPC_SERVER_INFORMATION {
	
	/*0000*/ <unnamed-type-In> In;
	/*0000*/ <unnamed-type-Out> Out;
	/*0020*/
};

struct _ALPC_SERVER_SESSION_INFORMATION {
	/*0000*/ ULONG SessionId;
	/*0004*/ ULONG ProcessId;
	/*0008*/
};

struct _ALPC_TOKEN_ATTR {
	/*0000*/ _LUID TokenId;
	/*0008*/ _LUID AuthenticationId;
	/*0010*/ _LUID ModifiedId;
	/*0018*/
};

struct _ALPC_WORK_ON_BEHALF_ATTR {
	/*0000*/ _ALPC_WORK_ON_BEHALF_TICKET Ticket;
	/*0008*/
};

struct _ALPC_WORK_ON_BEHALF_TICKET {
	/*0000*/ ULONG ThreadId;
	/*0004*/ ULONG ThreadCreationTimeLow;
	/*0008*/
};

enum _ALTERNATIVE_ARCHITECTURE_TYPE {
	StandardDesign = 0x0,
	NEC98x86 = 0x1,
	EndAlternatives = 0x2
};

struct _AMD64_CONTEXT;

enum _APPCONTAINER_SID_TYPE {
	NotAppContainerSidType = 0x0,
	ChildAppContainerSidType = 0x1,
	ParentAppContainerSidType = 0x2,
	InvalidAppContainerSidType = 0x3,
	MaxAppContainerSidType = 0x4
};

struct _APPLICATIONLAUNCH_SETTING_VALUE {
	/*0000*/ _LARGE_INTEGER ActivationTime;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG ButtonInstanceID;
	/*0010*/
};

struct _APP_MEMORY_INFORMATION {
	/*0000*/ ULONGLONG AvailableCommit;
	/*0008*/ ULONGLONG PrivateCommitUsage;
	/*0010*/ ULONGLONG PeakPrivateCommitUsage;
	/*0018*/ ULONGLONG TotalCommitUsage;
	/*0020*/
};

enum _APTTYPE {
	APTTYPE_CURRENT = 0xffffffff,
	APTTYPE_STA = 0x0,
	APTTYPE_MTA = 0x1,
	APTTYPE_NA = 0x2,
	APTTYPE_MAINSTA = 0x3
};

enum _APTTYPEQUALIFIER {
	APTTYPEQUALIFIER_NONE = 0x0,
	APTTYPEQUALIFIER_IMPLICIT_MTA = 0x1,
	APTTYPEQUALIFIER_NA_ON_MTA = 0x2,
	APTTYPEQUALIFIER_NA_ON_STA = 0x3,
	APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 0x4,
	APTTYPEQUALIFIER_NA_ON_MAINSTA = 0x5,
	APTTYPEQUALIFIER_APPLICATION_STA = 0x6,
	APTTYPEQUALIFIER_RESERVED_1 = 0x7
};

struct _ARM64_CONTEXT;

struct _ARM_CONTEXT;

struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ULONG ulFilenameLength;
	/*0008*/ ULONG ulPathLength;
	/*0010*/ WCHAR const * lpFileName;
	/*0018*/ WCHAR const * lpFilePath;
	/*0020*/
};

struct _ASSEMBLY_STORAGE_MAP;

union _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA {
	/*0000*/ _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_BEGINNING ResolutionBeginning;
	/*0000*/ _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_GET_ROOT GetRoot;
	/*0000*/ _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_SUCCESSFUL ResolutionSuccessful;
	/*0000*/ _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_ENDING ResolutionEnding;
	/*0040*/
};

struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_GET_ROOT {
	/*0000*/ void * ResolutionContext;
	/*0008*/ ULONGLONG RootIndex;
	/*0010*/ UCHAR CancelResolution;
	/*0011*/ UCHAR NoMoreEntries;
	/*0018*/ _UNICODE_STRING Root;
	/*0028*/
};

struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_BEGINNING {
	/*0000*/ void const * Data;
	/*0008*/ ULONG AssemblyRosterIndex;
	/*0010*/ void * ResolutionContext;
	/*0018*/ _UNICODE_STRING Root;
	/*0028*/ UCHAR KnownRoot;
	/*0030*/ ULONGLONG RootCount;
	/*0038*/ UCHAR CancelResolution;
	/*0040*/
};

struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_ENDING {
	/*0000*/ void * ResolutionContext;
	/*0008*/
};

struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_SUCCESSFUL {
	/*0000*/ void * ResolutionContext;
	/*0008*/ ULONG RootIndexUsed;
	/*0010*/
};

struct _ATOM_BASIC_INFORMATION {
	/*0000*/ USHORT UsageCount;
	/*0002*/ USHORT Flags;
	/*0004*/ USHORT NameLength;
	/*0006*/ WCHAR Name[0x1];
	/*0008*/
};

enum _ATOM_INFORMATION_CLASS {
	AtomBasicInformation = 0x0,
	AtomTableInformation = 0x1
};

struct _ATOM_TABLE_INFORMATION {
	/*0000*/ ULONG NumberOfAtoms;
	/*0004*/ USHORT Atoms[0x1];
	/*0008*/
};

enum _AUDIT_EVENT_TYPE {
	AuditEventObjectAccess = 0x0,
	AuditEventDirectoryServiceAccess = 0x1
};

enum _BACKGROUND_TASK_CAPABILITY {
	BTC_AUDIO = 0x1,
	BTC_REALTIME_COMMUNICATION = 0x2,
	BTC_SYSTEM_EVENT = 0x4,
	BTC_TIMER = 0x8,
	BTC_PUSH_NOTIFICATION = 0x10,
	BTC_VPN_CLIENT = 0x20,
	BTC_DEVICE_SERVICING = 0x40,
	BTC_DEVICE_USE = 0x80,
	BTC_LOCATION = 0x100,
	BTC_CHAT_NOTIFICATION = 0x200,
	BTC_IOT = 0x400,
	BTC_IMPLICIT = 0x1000,
	BTC_BLUETOOTH = 0x2000,
	BTC_DEVICE_CONNECTION_CHANGE = 0x4000,
	BTC_MEDIA_PROCESSING = 0x10000,
	BTC_PHONE_CALL = 0x20000,
	BTC_GENERAL = 0x40000,
	BTC_STARTUP = 0x80000,
	BTC_ANY_CAPABILITY = 0xffffffff
};

enum _BACKGROUND_TRAFFIC_RESTRICTION {
	BACKGROUND_TRAFFIC_RESTRICTION_NEVER = 0x0,
	BACKGROUND_TRAFFIC_RESTRICTION_LIMIT = 0x1,
	BACKGROUND_TRAFFIC_RESTRICTION_ROAMING = 0x2,
	BACKGROUND_TRAFFIC_RESTRICTION_ALWAYS = 0x4
};

struct _BITMAP_DATA {
	/*0000*/ INT bIsBidi;
	/*0004*/ INT bIsHighContrast;
	/*0008*/ WCHAR * pwszTitle;
	/*0010*/ WCHAR * pwszDescription;
	/*0018*/ WCHAR * pwszButton;
	/*0020*/ HFONT__ * hTitleFont;
	/*0028*/ HFONT__ * hDescriptionFont;
	/*0030*/ HFONT__ * hButtonFont;
	/*0038*/ ULONG clrText;
	/*003c*/ tagRECT rectTitle;
	/*004c*/ tagRECT rectDescription;
	/*005c*/ tagRECT rectButton;
	/*0070*/
};

struct _BITMAP_DIMENSIONS {
	/*0000*/ tagPOINT ptBitMapScreenPosition;
	/*0008*/ INT nWindowWidth;
	/*000c*/ INT nWindowHeight;
	/*0010*/
};

enum _BITMAP_TYPE {
	UnknownUI = 0x0,
	Interstitial = 0x1,
	Watermark = 0x2,
	Watermark_FullScreen = 0x3
};

struct _BLENDFUNCTION {
	/*0000*/ UCHAR BlendOp;
	/*0001*/ UCHAR BlendFlags;
	/*0002*/ UCHAR SourceConstantAlpha;
	/*0003*/ UCHAR AlphaFormat;
	/*0004*/
};

struct _BOOT_AREA_INFO {
	
	/*0000*/ ULONG BootSectorCount;
	/*0008*/ <unnamed-type-BootSectors> BootSectors[0x2];
	/*0018*/
};

struct _BOOT_ENTROPY_NT_RESULT {
	/*0000*/ ULONG maxEntropySources;
	/*0008*/ _BOOT_ENTROPY_SOURCE_NT_RESULT EntropySourceResult[0xa];
	/*0418*/ UCHAR SeedBytesForCng[0x30];
	/*0448*/
};

enum _BOOT_ENTROPY_SOURCE_ID {
	BootEntropySourceNone = 0x0,
	BootEntropySourceSeedfile = 0x1,
	BootEntropySourceExternal = 0x2,
	BootEntropySourceTpm = 0x3,
	BootEntropySourceRdrand = 0x4,
	BootEntropySourceTime = 0x5,
	BootEntropySourceAcpiOem0 = 0x6,
	BootEntropySourceUefi = 0x7,
	BootEntropySourceCng = 0x8,
	BootEntropySourceTcbTpm = 0x9,
	BootEntropySourceTcbRdrand = 0xa,
	BootMaxEntropySources = 0xa
};

struct _BOOT_ENTROPY_SOURCE_NT_RESULT {
	/*0000*/ _BOOT_ENTROPY_SOURCE_ID SourceId;
	/*0008*/ ULONGLONG Policy;
	/*0010*/ _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
	/*0014*/ LONG ResultStatus;
	/*0018*/ ULONGLONG Time;
	/*0020*/ ULONG EntropyLength;
	/*0024*/ UCHAR EntropyData[0x40];
	/*0068*/
};

enum _BOOT_ENTROPY_SOURCE_RESULT_CODE {
	BootEntropySourceStructureUninitialized = 0x0,
	BootEntropySourceDisabledByPolicy = 0x1,
	BootEntropySourceNotPresent = 0x2,
	BootEntropySourceError = 0x3,
	BootEntropySourceSuccess = 0x4
};

struct _BOOT_ENTRY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Id;
	/*000c*/ ULONG Attributes;
	/*0010*/ ULONG FriendlyNameOffset;
	/*0014*/ ULONG BootFilePathOffset;
	/*0018*/ ULONG OsOptionsLength;
	/*001c*/ UCHAR OsOptions[0x1];
	/*0020*/
};

struct _BOOT_ENTRY_LIST {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _BOOT_ENTRY BootEntry;
	/*0024*/
};

struct _BOOT_OPTIONS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Timeout;
	/*000c*/ ULONG CurrentBootEntryId;
	/*0010*/ ULONG NextBootEntryId;
	/*0014*/ WCHAR HeadlessRedirection[0x1];
	/*0018*/
};

enum _BROWSERFRAMEOPTIONS {
	BFO_NONE = 0x0,
	BFO_BROWSER_PERSIST_SETTINGS = 0x1,
	BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = 0x2,
	BFO_BOTH_OPTIONS = 0x4,
	BIF_PREFER_INTERNET_SHORTCUT = 0x8,
	BFO_BROWSE_NO_IN_NEW_PROCESS = 0x10,
	BFO_ENABLE_HYPERLINK_TRACKING = 0x20,
	BFO_USE_IE_OFFLINE_SUPPORT = 0x40,
	BFO_SUBSTITUE_INTERNET_START_PAGE = 0x80,
	BFO_USE_IE_LOGOBANDING = 0x100,
	BFO_ADD_IE_TOCAPTIONBAR = 0x200,
	BFO_USE_DIALUP_REF = 0x400,
	BFO_USE_IE_TOOLBAR = 0x800,
	BFO_NO_PARENT_FOLDER_SUPPORT = 0x1000,
	BFO_NO_REOPEN_NEXT_RESTART = 0x2000,
	BFO_GO_HOME_PAGE = 0x4000,
	BFO_PREFER_IEPROCESS = 0x8000,
	BFO_SHOW_NAVIGATION_CANCELLED = 0x10000,
	BFO_USE_IE_STATUSBAR = 0x20000,
	BFO_QUERY_ALL = 0xffffffff
};

struct _BSSID_INFO {
	/*0000*/ UCHAR BSSID[0x6];
	/*0006*/ UCHAR PMKID[0x10];
	/*0016*/
};

enum _BUS_DATA_TYPE {
	ConfigurationSpaceUndefined = 0xffffffff,
	Cmos = 0x0,
	EisaConfiguration = 0x1,
	Pos = 0x2,
	CbusConfiguration = 0x3,
	PCIConfiguration = 0x4,
	VMEConfiguration = 0x5,
	NuBusConfiguration = 0x6,
	PCMCIAConfiguration = 0x7,
	MPIConfiguration = 0x8,
	MPSAConfiguration = 0x9,
	PNPISAConfiguration = 0xa,
	SgiInternalConfiguration = 0xb,
	MaximumBusDataType = 0xc
};

struct _BYTE_BLOB {
	/*0000*/ ULONG clSize;
	/*0004*/ UCHAR abData[0x1];
	/*0008*/
};

struct _BYTE_SIZEDARR {
	/*0000*/ ULONG clSize;
	/*0008*/ UCHAR * pData;
	/*0010*/
};

struct _BY_HANDLE_FILE_INFORMATION {
	/*0000*/ ULONG dwFileAttributes;
	/*0004*/ _FILETIME ftCreationTime;
	/*000c*/ _FILETIME ftLastAccessTime;
	/*0014*/ _FILETIME ftLastWriteTime;
	/*001c*/ ULONG dwVolumeSerialNumber;
	/*0020*/ ULONG nFileSizeHigh;
	/*0024*/ ULONG nFileSizeLow;
	/*0028*/ ULONG nNumberOfLinks;
	/*002c*/ ULONG nFileIndexHigh;
	/*0030*/ ULONG nFileIndexLow;
	/*0034*/
};

struct _CACHE_DESCRIPTOR {
	/*0000*/ UCHAR Level;
	/*0001*/ UCHAR Associativity;
	/*0002*/ USHORT LineSize;
	/*0004*/ ULONG Size;
	/*0008*/ _PROCESSOR_CACHE_TYPE Type;
	/*000c*/
};

struct _CACHE_RELATIONSHIP {
	/*0000*/ UCHAR Level;
	/*0001*/ UCHAR Associativity;
	/*0002*/ USHORT LineSize;
	/*0004*/ ULONG CacheSize;
	/*0008*/ _PROCESSOR_CACHE_TYPE Type;
	/*000c*/ UCHAR Reserved[0x14];
	/*0020*/ _GROUP_AFFINITY GroupMask;
	/*0030*/
};

struct _CALL_FRAME {
	/*0000*/ void * ReturnAddress;
	/*0008*/ void * Param1Home;
	/*0010*/ void * Param2Home;
	/*0018*/ void * Param3Home;
	/*0020*/ void * Param4Home;
	/*0028*/
};

struct _CFG_CALL_TARGET_INFO {
	/*0000*/ ULONGLONG Offset;
	/*0008*/ ULONGLONG Flags;
	/*0010*/
};

struct _CFG_CALL_TARGET_LIST_INFORMATION {
	/*0000*/ ULONG NumberOfEntries;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONG * NumberOfEntriesProcessed;
	/*0010*/ _CFG_CALL_TARGET_INFO * CallTargetInfo;
	/*0018*/ void * Section;
	/*0020*/ ULONGLONG FileOffset;
	/*0028*/
};

struct _CHAR_INFO {
	
	/*0000*/ <unnamed-type-Char> Char;
	/*0002*/ USHORT Attributes;
	/*0004*/
};

enum _CH_DESCRIPTION_TYPE {
	ch_description_type_logical = 0x1,
	ch_description_type_center_frequency = 0x2,
	ch_description_type_phy_specific = 0x3
};

enum _CI_WINDOWS_LOCKDOWN_MODE {
	CI_WINDOWS_LOCKDOWN_MODE_UNLOCKED = 0x0,
	CI_WINDOWS_LOCKDOWN_MODE_TRIAL = 0x1,
	CI_WINDOWS_LOCKDOWN_MODE_LOCKED = 0x2,
	CI_WINDOWS_LOCKDOWN_MODE_MAX = 0x3
};

struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
	
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG AttributeCount;
	/*0008*/ <unnamed-type-Attribute> Attribute;
	/*0010*/
};

struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
	/*0000*/ ULONGLONG Version;
	/*0008*/ WCHAR * Name;
	/*0010*/
};

struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
	/*0000*/ void * pValue;
	/*0008*/ ULONG ValueLength;
	/*0010*/
};

struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
	
	/*0000*/ ULONG Name;
	/*0004*/ USHORT ValueType;
	/*0006*/ USHORT Reserved;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG ValueCount;
	/*0010*/ <unnamed-type-Values> Values;
	/*0014*/
};

struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
	
	/*0000*/ WCHAR * Name;
	/*0008*/ USHORT ValueType;
	/*000a*/ USHORT Reserved;
	/*000c*/ ULONG Flags;
	/*0010*/ ULONG ValueCount;
	/*0018*/ <unnamed-type-Values> Values;
	/*0020*/
};

struct _CLASSIC_EVENT_ID {
	/*0000*/ _GUID EventGuid;
	/*0010*/ UCHAR Type;
	/*0011*/ UCHAR Reserved[0x7];
	/*0018*/
};

union _CLIENT_CALL_RETURN {
	/*0000*/ void * Pointer;
	/*0000*/ LONGLONG Simple;
	/*0008*/
};

struct _CLIENT_ID {
	/*0000*/ void * UniqueProcess;
	/*0008*/ void * UniqueThread;
	/*0010*/
};

struct _CLIENT_ID64 {
	/*0000*/ ULONGLONG UniqueProcess;
	/*0008*/ ULONGLONG UniqueThread;
	/*0010*/
};

struct _CLIP_OPTIONAL_INFO {
	/*0000*/ ULONG dwEvaluationFlags;
	/*0004*/ ULONG dwBasicPolicyFlags;
	/*0008*/ ULONG dwMinExpirationTime;
	/*000c*/ ULONG dwMinPollingTime;
	/*0010*/
};

struct _CLUSTER_RANGE {
	/*0000*/ _LARGE_INTEGER StartingCluster;
	/*0008*/ _LARGE_INTEGER ClusterCount;
	/*0010*/
};

struct _CMINVOKECOMMANDINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG fMask;
	/*0008*/ HWND__ * hwnd;
	/*0010*/ CHAR const * lpVerb;
	/*0018*/ CHAR const * lpParameters;
	/*0020*/ CHAR const * lpDirectory;
	/*0028*/ INT nShow;
	/*002c*/ ULONG dwHotKey;
	/*0030*/ void * hIcon;
	/*0038*/
};

struct _CMINVOKECOMMANDINFOEX {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG fMask;
	/*0008*/ HWND__ * hwnd;
	/*0010*/ CHAR const * lpVerb;
	/*0018*/ CHAR const * lpParameters;
	/*0020*/ CHAR const * lpDirectory;
	/*0028*/ INT nShow;
	/*002c*/ ULONG dwHotKey;
	/*0030*/ void * hIcon;
	/*0038*/ CHAR const * lpTitle;
	/*0040*/ WCHAR const * lpVerbW;
	/*0048*/ WCHAR const * lpParametersW;
	/*0050*/ WCHAR const * lpDirectoryW;
	/*0058*/ WCHAR const * lpTitleW;
	/*0060*/ tagPOINT ptInvoke;
	/*0068*/
};

struct _CM_COMPONENT_INFORMATION {
	/*0000*/ _DEVICE_FLAGS Flags;
	/*0004*/ ULONG Version;
	/*0008*/ ULONG Key;
	/*0010*/ ULONGLONG AffinityMask;
	/*0018*/
};

struct _CM_DISK_GEOMETRY_DEVICE_DATA {
	/*0000*/ ULONG BytesPerSector;
	/*0004*/ ULONG NumberOfCylinders;
	/*0008*/ ULONG SectorsPerTrack;
	/*000c*/ ULONG NumberOfHeads;
	/*0010*/
};

struct _CM_EISA_FUNCTION_INFORMATION {
	/*0000*/ ULONG CompressedId;
	/*0004*/ UCHAR IdSlotFlags1;
	/*0005*/ UCHAR IdSlotFlags2;
	/*0006*/ UCHAR MinorRevision;
	/*0007*/ UCHAR MajorRevision;
	/*0008*/ UCHAR Selections[0x1a];
	/*0022*/ UCHAR FunctionFlags;
	/*0023*/ UCHAR TypeString[0x50];
	/*0073*/ _EISA_MEMORY_CONFIGURATION EisaMemory[0x9];
	/*00b2*/ _EISA_IRQ_CONFIGURATION EisaIrq[0x7];
	/*00c0*/ _EISA_DMA_CONFIGURATION EisaDma[0x4];
	/*00c8*/ _EISA_PORT_CONFIGURATION EisaPort[0x14];
	/*0104*/ UCHAR InitializationData[0x3c];
	/*0140*/
};

struct _CM_EISA_SLOT_INFORMATION {
	/*0000*/ UCHAR ReturnCode;
	/*0001*/ UCHAR ReturnFlags;
	/*0002*/ UCHAR MajorRevision;
	/*0003*/ UCHAR MinorRevision;
	/*0004*/ USHORT Checksum;
	/*0006*/ UCHAR NumberFunctions;
	/*0007*/ UCHAR FunctionInformation;
	/*0008*/ ULONG CompressedId;
	/*000c*/
};

enum _CM_ERROR_CONTROL_TYPE {
	IgnoreError = 0x0,
	NormalError = 0x1,
	SevereError = 0x2,
	CriticalError = 0x3
};

struct _CM_FLOPPY_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ CHAR Size[0x8];
	/*000c*/ ULONG MaxDensity;
	/*0010*/ ULONG MountDensity;
	/*0014*/ UCHAR StepRateHeadUnloadTime;
	/*0015*/ UCHAR HeadLoadTime;
	/*0016*/ UCHAR MotorOffTime;
	/*0017*/ UCHAR SectorLengthCode;
	/*0018*/ UCHAR SectorPerTrack;
	/*0019*/ UCHAR ReadWriteGapLength;
	/*001a*/ UCHAR DataTransferLength;
	/*001b*/ UCHAR FormatGapLength;
	/*001c*/ UCHAR FormatFillCharacter;
	/*001d*/ UCHAR HeadSettleTime;
	/*001e*/ UCHAR MotorSettleTime;
	/*001f*/ UCHAR MaximumTrackValue;
	/*0020*/ UCHAR DataTransferRate;
	/*0024*/
};

struct _CM_FULL_RESOURCE_DESCRIPTOR {
	/*0000*/ _INTERFACE_TYPE InterfaceType;
	/*0004*/ ULONG BusNumber;
	/*0008*/ _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
	/*0024*/
};

struct _CM_INT13_DRIVE_PARAMETER {
	/*0000*/ USHORT DriveSelect;
	/*0002*/ ULONG MaxCylinders;
	/*0006*/ USHORT SectorsPerTrack;
	/*0008*/ USHORT MaxHeads;
	/*000a*/ USHORT NumberDrives;
	/*000c*/
};

struct _CM_KEYBOARD_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ UCHAR Type;
	/*0005*/ UCHAR Subtype;
	/*0006*/ USHORT KeyboardFlags;
	/*0008*/
};

struct _CM_MCA_POS_DATA {
	/*0000*/ USHORT AdapterId;
	/*0002*/ UCHAR PosData1;
	/*0003*/ UCHAR PosData2;
	/*0004*/ UCHAR PosData3;
	/*0005*/ UCHAR PosData4;
	/*0006*/
};

struct _CM_MONITOR_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ USHORT HorizontalScreenSize;
	/*0006*/ USHORT VerticalScreenSize;
	/*0008*/ USHORT HorizontalResolution;
	/*000a*/ USHORT VerticalResolution;
	/*000c*/ USHORT HorizontalDisplayTimeLow;
	/*000e*/ USHORT HorizontalDisplayTime;
	/*0010*/ USHORT HorizontalDisplayTimeHigh;
	/*0012*/ USHORT HorizontalBackPorchLow;
	/*0014*/ USHORT HorizontalBackPorch;
	/*0016*/ USHORT HorizontalBackPorchHigh;
	/*0018*/ USHORT HorizontalFrontPorchLow;
	/*001a*/ USHORT HorizontalFrontPorch;
	/*001c*/ USHORT HorizontalFrontPorchHigh;
	/*001e*/ USHORT HorizontalSyncLow;
	/*0020*/ USHORT HorizontalSync;
	/*0022*/ USHORT HorizontalSyncHigh;
	/*0024*/ USHORT VerticalBackPorchLow;
	/*0026*/ USHORT VerticalBackPorch;
	/*0028*/ USHORT VerticalBackPorchHigh;
	/*002a*/ USHORT VerticalFrontPorchLow;
	/*002c*/ USHORT VerticalFrontPorch;
	/*002e*/ USHORT VerticalFrontPorchHigh;
	/*0030*/ USHORT VerticalSyncLow;
	/*0032*/ USHORT VerticalSync;
	/*0034*/ USHORT VerticalSyncHigh;
	/*0036*/
};

struct _CM_PARTIAL_RESOURCE_DESCRIPTOR {
	
	/*0000*/ UCHAR Type;
	/*0001*/ UCHAR ShareDisposition;
	/*0002*/ USHORT Flags;
	/*0004*/ <unnamed-type-u> u;
	/*0014*/
};

struct _CM_PARTIAL_RESOURCE_LIST {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ ULONG Count;
	/*0008*/ _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[0x1];
	/*001c*/
};

struct _CM_PCCARD_DEVICE_DATA {
	/*0000*/ UCHAR Flags;
	/*0001*/ UCHAR ErrorCode;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG BusData;
	/*0008*/ ULONG DeviceId;
	/*000c*/ ULONG LegacyBaseAddress;
	/*0010*/ UCHAR IRQMap[0x10];
	/*0020*/
};

struct _CM_PNP_BIOS_DEVICE_NODE {
	/*0000*/ USHORT Size;
	/*0002*/ UCHAR Node;
	/*0003*/ ULONG ProductId;
	/*0007*/ UCHAR DeviceType[0x3];
	/*000a*/ USHORT DeviceAttributes;
	/*000c*/
};

struct _CM_PNP_BIOS_INSTALLATION_CHECK {
	/*0000*/ UCHAR Signature[0x4];
	/*0004*/ UCHAR Revision;
	/*0005*/ UCHAR Length;
	/*0006*/ USHORT ControlField;
	/*0008*/ UCHAR Checksum;
	/*0009*/ ULONG EventFlagAddress;
	/*000d*/ USHORT RealModeEntryOffset;
	/*000f*/ USHORT RealModeEntrySegment;
	/*0011*/ USHORT ProtectedModeEntryOffset;
	/*0013*/ ULONG ProtectedModeCodeBaseAddress;
	/*0017*/ ULONG OemDeviceId;
	/*001b*/ USHORT RealModeDataBaseAddress;
	/*001d*/ ULONG ProtectedModeDataBaseAddress;
	/*0021*/
};

struct _CM_RESOURCE_LIST {
	/*0000*/ ULONG Count;
	/*0004*/ _CM_FULL_RESOURCE_DESCRIPTOR List[0x1];
	/*0028*/
};

struct _CM_ROM_BLOCK {
	/*0000*/ ULONG Address;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _CM_SCSI_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ UCHAR HostIdentifier;
	/*0006*/
};

struct _CM_SERIAL_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ ULONG BaudClock;
	/*0008*/
};

enum _CM_SERVICE_LOAD_TYPE {
	BootLoad = 0x0,
	SystemLoad = 0x1,
	AutoLoad = 0x2,
	DemandLoad = 0x3,
	DisableLoad = 0x4
};

enum _CM_SERVICE_NODE_TYPE {
	DriverType = 0x1,
	FileSystemType = 0x2,
	Win32ServiceOwnProcess = 0x10,
	Win32ServiceShareProcess = 0x20,
	AdapterType = 0x4,
	RecognizerType = 0x8
};

enum _CM_SHARE_DISPOSITION {
	CmResourceShareUndetermined = 0x0,
	CmResourceShareDeviceExclusive = 0x1,
	CmResourceShareDriverExclusive = 0x2,
	CmResourceShareShared = 0x3
};

struct _CM_SONIC_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ USHORT DataConfigurationRegister;
	/*0006*/ UCHAR EthernetAddress[0x8];
	/*000e*/
};

struct _CM_VIDEO_DEVICE_DATA {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ ULONG VideoClock;
	/*0008*/
};

struct _COAUTHIDENTITY {
	/*0000*/ WCHAR * User;
	/*0008*/ ULONG UserLength;
	/*0010*/ WCHAR * Domain;
	/*0018*/ ULONG DomainLength;
	/*0020*/ WCHAR * Password;
	/*0028*/ ULONG PasswordLength;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _COAUTHINFO {
	/*0000*/ ULONG dwAuthnSvc;
	/*0004*/ ULONG dwAuthzSvc;
	/*0008*/ WCHAR * pwszServerPrincName;
	/*0010*/ ULONG dwAuthnLevel;
	/*0014*/ ULONG dwImpersonationLevel;
	/*0018*/ _COAUTHIDENTITY * pAuthIdentityData;
	/*0020*/ ULONG dwCapabilities;
	/*0028*/
};

struct _COLORMAP {
	/*0000*/ ULONG from;
	/*0004*/ ULONG to;
	/*0008*/
};

struct _COMDLG_FILTERSPEC {
	/*0000*/ WCHAR const * pszName;
	/*0008*/ WCHAR const * pszSpec;
	/*0010*/
};

struct _COMMCONFIG {
	/*0000*/ ULONG dwSize;
	/*0004*/ USHORT wVersion;
	/*0006*/ USHORT wReserved;
	/*0008*/ _DCB dcb;
	/*0024*/ ULONG dwProviderSubType;
	/*0028*/ ULONG dwProviderOffset;
	/*002c*/ ULONG dwProviderSize;
	/*0030*/ WCHAR wcProviderData[0x1];
	/*0034*/
};

struct _COMMPROP {
	/*0000*/ USHORT wPacketLength;
	/*0002*/ USHORT wPacketVersion;
	/*0004*/ ULONG dwServiceMask;
	/*0008*/ ULONG dwReserved1;
	/*000c*/ ULONG dwMaxTxQueue;
	/*0010*/ ULONG dwMaxRxQueue;
	/*0014*/ ULONG dwMaxBaud;
	/*0018*/ ULONG dwProvSubType;
	/*001c*/ ULONG dwProvCapabilities;
	/*0020*/ ULONG dwSettableParams;
	/*0024*/ ULONG dwSettableBaud;
	/*0028*/ USHORT wSettableData;
	/*002a*/ USHORT wSettableStopParity;
	/*002c*/ ULONG dwCurrentTxQueue;
	/*0030*/ ULONG dwCurrentRxQueue;
	/*0034*/ ULONG dwProvSpec1;
	/*0038*/ ULONG dwProvSpec2;
	/*003c*/ WCHAR wcProvChar[0x1];
	/*0040*/
};

struct _COMMTIMEOUTS {
	/*0000*/ ULONG ReadIntervalTimeout;
	/*0004*/ ULONG ReadTotalTimeoutMultiplier;
	/*0008*/ ULONG ReadTotalTimeoutConstant;
	/*000c*/ ULONG WriteTotalTimeoutMultiplier;
	/*0010*/ ULONG WriteTotalTimeoutConstant;
	/*0014*/
};

struct _COMM_FAULT_OFFSETS {
	/*0000*/ SHORT CommOffset;
	/*0002*/ SHORT FaultOffset;
	/*0004*/
};

struct _COMPATIBILITY_CONTEXT_ELEMENT {
	/*0000*/ _GUID Id;
	/*0010*/ ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
	/*0018*/ ULONGLONG MaxVersionTested;
	/*0020*/
};

struct _COMPOUND_ACCESS_ALLOWED_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ USHORT CompoundAceType;
	/*000a*/ USHORT Reserved;
	/*000c*/ ULONG SidStart;
	/*0010*/
};

struct _COMPRESSED_DATA_INFO {
	/*0000*/ USHORT CompressionFormatAndEngine;
	/*0002*/ UCHAR CompressionUnitShift;
	/*0003*/ UCHAR ChunkShift;
	/*0004*/ UCHAR ClusterShift;
	/*0005*/ UCHAR Reserved;
	/*0006*/ USHORT NumberOfChunks;
	/*0008*/ ULONG CompressedChunkSizes[0x1];
	/*000c*/
};

enum _COMPUTER_NAME_FORMAT {
	ComputerNameNetBIOS = 0x0,
	ComputerNameDnsHostname = 0x1,
	ComputerNameDnsDomain = 0x2,
	ComputerNameDnsFullyQualified = 0x3,
	ComputerNamePhysicalNetBIOS = 0x4,
	ComputerNamePhysicalDnsHostname = 0x5,
	ComputerNamePhysicalDnsDomain = 0x6,
	ComputerNamePhysicalDnsFullyQualified = 0x7,
	ComputerNameMax = 0x8
};

struct _COMSTAT {
	/*0000*/ ULONG fCtsHold : 01; // 0x00000001;
	/*0000*/ ULONG fDsrHold : 01; // 0x00000002;
	/*0000*/ ULONG fRlsdHold : 01; // 0x00000004;
	/*0000*/ ULONG fXoffHold : 01; // 0x00000008;
	/*0000*/ ULONG fXoffSent : 01; // 0x00000010;
	/*0000*/ ULONG fEof : 01; // 0x00000020;
	/*0000*/ ULONG fTxim : 01; // 0x00000040;
	/*0000*/ ULONG fReserved : 25; // 0xffffff80;
	/*0004*/ ULONG cbInQue;
	/*0008*/ ULONG cbOutQue;
	/*000c*/
};

struct _CONNECTDLGSTRUCTA {
	/*0000*/ ULONG cbStructure;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ _NETRESOURCEA * lpConnRes;
	/*0018*/ ULONG dwFlags;
	/*001c*/ ULONG dwDevNum;
	/*0020*/
};

struct _CONNECTDLGSTRUCTW {
	/*0000*/ ULONG cbStructure;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ _NETRESOURCEW * lpConnRes;
	/*0018*/ ULONG dwFlags;
	/*001c*/ ULONG dwDevNum;
	/*0020*/
};

enum _CONNECTIVITY_CAPABILITY {
	CONNECTIVITY_CAPABILITY_NONE = 0x0,
	CONNECTIVITY_CAPABILITY_LOCAL = 0x1,
	CONNECTIVITY_CAPABILITY_INTERNET = 0x2,
	CONNECTIVITY_CAPABILITY_MAX = 0x3
};

struct _CONSOLE_CURSOR_INFO {
	/*0000*/ ULONG dwSize;
	/*0004*/ INT bVisible;
	/*0008*/
};

struct _CONSOLE_FONT_INFO {
	/*0000*/ ULONG nFont;
	/*0004*/ _COORD dwFontSize;
	/*0008*/
};

struct _CONSOLE_FONT_INFOEX {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG nFont;
	/*0008*/ _COORD dwFontSize;
	/*000c*/ UINT FontFamily;
	/*0010*/ UINT FontWeight;
	/*0014*/ WCHAR FaceName[0x20];
	/*0054*/
};

struct _CONSOLE_HISTORY_INFO {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT HistoryBufferSize;
	/*0008*/ UINT NumberOfHistoryBuffers;
	/*000c*/ ULONG dwFlags;
	/*0010*/
};

struct _CONSOLE_READCONSOLE_CONTROL {
	/*0000*/ ULONG nLength;
	/*0004*/ ULONG nInitialChars;
	/*0008*/ ULONG dwCtrlWakeupMask;
	/*000c*/ ULONG dwControlKeyState;
	/*0010*/
};

struct _CONSOLE_SCREEN_BUFFER_INFO {
	/*0000*/ _COORD dwSize;
	/*0004*/ _COORD dwCursorPosition;
	/*0008*/ USHORT wAttributes;
	/*000a*/ _SMALL_RECT srWindow;
	/*0012*/ _COORD dwMaximumWindowSize;
	/*0016*/
};

struct _CONSOLE_SCREEN_BUFFER_INFOEX {
	/*0000*/ ULONG cbSize;
	/*0004*/ _COORD dwSize;
	/*0008*/ _COORD dwCursorPosition;
	/*000c*/ USHORT wAttributes;
	/*000e*/ _SMALL_RECT srWindow;
	/*0016*/ _COORD dwMaximumWindowSize;
	/*001a*/ USHORT wPopupAttributes;
	/*001c*/ INT bFullscreenSupported;
	/*0020*/ ULONG ColorTable[0x10];
	/*0060*/
};

struct _CONSOLE_SELECTION_INFO {
	/*0000*/ ULONG dwFlags;
	/*0004*/ _COORD dwSelectionAnchor;
	/*0008*/ _SMALL_RECT srSelection;
	/*0010*/
};

struct _CONTAINER_ROOT_INFO_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _CONTAINER_ROOT_INFO_OUTPUT {
	/*0000*/ USHORT ContainerRootIdLength;
	/*0002*/ UCHAR ContainerRootId[0x1];
	/*0004*/
};

struct _CONTAINER_VOLUME_STATE {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _CONTEXT {
	/*0000*/ ULONGLONG P1Home;
	/*0008*/ ULONGLONG P2Home;
	/*0010*/ ULONGLONG P3Home;
	/*0018*/ ULONGLONG P4Home;
	/*0020*/ ULONGLONG P5Home;
	/*0028*/ ULONGLONG P6Home;
	/*0030*/ ULONG ContextFlags;
	/*0034*/ ULONG MxCsr;
	/*0038*/ USHORT SegCs;
	/*003a*/ USHORT SegDs;
	/*003c*/ USHORT SegEs;
	/*003e*/ USHORT SegFs;
	/*0040*/ USHORT SegGs;
	/*0042*/ USHORT SegSs;
	/*0044*/ ULONG EFlags;
	/*0048*/ ULONGLONG Dr0;
	/*0050*/ ULONGLONG Dr1;
	/*0058*/ ULONGLONG Dr2;
	/*0060*/ ULONGLONG Dr3;
	/*0068*/ ULONGLONG Dr6;
	/*0070*/ ULONGLONG Dr7;
	/*0078*/ ULONGLONG Rax;
	/*0080*/ ULONGLONG Rcx;
	/*0088*/ ULONGLONG Rdx;
	/*0090*/ ULONGLONG Rbx;
	/*0098*/ ULONGLONG Rsp;
	/*00a0*/ ULONGLONG Rbp;
	/*00a8*/ ULONGLONG Rsi;
	/*00b0*/ ULONGLONG Rdi;
	/*00b8*/ ULONGLONG R8;
	/*00c0*/ ULONGLONG R9;
	/*00c8*/ ULONGLONG R10;
	/*00d0*/ ULONGLONG R11;
	/*00d8*/ ULONGLONG R12;
	/*00e0*/ ULONGLONG R13;
	/*00e8*/ ULONGLONG R14;
	/*00f0*/ ULONGLONG R15;
	/*00f8*/ ULONGLONG Rip;
	/*0100*/ _XSAVE_FORMAT FltSave;
	/*0100*/ _M128A Header[0x2];
	/*0120*/ _M128A Legacy[0x8];
	/*01a0*/ _M128A Xmm0;
	/*01b0*/ _M128A Xmm1;
	/*01c0*/ _M128A Xmm2;
	/*01d0*/ _M128A Xmm3;
	/*01e0*/ _M128A Xmm4;
	/*01f0*/ _M128A Xmm5;
	/*0200*/ _M128A Xmm6;
	/*0210*/ _M128A Xmm7;
	/*0220*/ _M128A Xmm8;
	/*0230*/ _M128A Xmm9;
	/*0240*/ _M128A Xmm10;
	/*0250*/ _M128A Xmm11;
	/*0260*/ _M128A Xmm12;
	/*0270*/ _M128A Xmm13;
	/*0280*/ _M128A Xmm14;
	/*0290*/ _M128A Xmm15;
	/*0300*/ _M128A VectorRegister[0x1a];
	/*04a0*/ ULONGLONG VectorControl;
	/*04a8*/ ULONGLONG DebugControl;
	/*04b0*/ ULONGLONG LastBranchToRip;
	/*04b8*/ ULONGLONG LastBranchFromRip;
	/*04c0*/ ULONGLONG LastExceptionToRip;
	/*04c8*/ ULONGLONG LastExceptionFromRip;
	/*04d0*/
};

struct _CONTEXT_CHUNK {
	/*0000*/ LONG Offset;
	/*0004*/ ULONG Length;
	/*0008*/
};

struct _CONTEXT_EX {
	/*0000*/ _CONTEXT_CHUNK All;
	/*0008*/ _CONTEXT_CHUNK Legacy;
	/*0010*/ _CONTEXT_CHUNK XState;
	/*0018*/
};

struct _COORD {
	/*0000*/ SHORT X;
	/*0002*/ SHORT Y;
	/*0004*/
};

enum _COPYFILE2_COPY_PHASE {
	COPYFILE2_PHASE_NONE = 0x0,
	COPYFILE2_PHASE_PREPARE_SOURCE = 0x1,
	COPYFILE2_PHASE_PREPARE_DEST = 0x2,
	COPYFILE2_PHASE_READ_SOURCE = 0x3,
	COPYFILE2_PHASE_WRITE_DESTINATION = 0x4,
	COPYFILE2_PHASE_SERVER_COPY = 0x5,
	COPYFILE2_PHASE_NAMEGRAFT_COPY = 0x6,
	COPYFILE2_PHASE_MAX = 0x7
};

enum _COPYFILE2_MESSAGE_ACTION {
	COPYFILE2_PROGRESS_CONTINUE = 0x0,
	COPYFILE2_PROGRESS_CANCEL = 0x1,
	COPYFILE2_PROGRESS_STOP = 0x2,
	COPYFILE2_PROGRESS_QUIET = 0x3,
	COPYFILE2_PROGRESS_PAUSE = 0x4
};

enum _COPYFILE2_MESSAGE_TYPE {
	COPYFILE2_CALLBACK_NONE = 0x0,
	COPYFILE2_CALLBACK_CHUNK_STARTED = 0x1,
	COPYFILE2_CALLBACK_CHUNK_FINISHED = 0x2,
	COPYFILE2_CALLBACK_STREAM_STARTED = 0x3,
	COPYFILE2_CALLBACK_STREAM_FINISHED = 0x4,
	COPYFILE2_CALLBACK_POLL_CONTINUE = 0x5,
	COPYFILE2_CALLBACK_ERROR = 0x6,
	COPYFILE2_CALLBACK_MAX = 0x7
};

struct _COSERVERINFO {
	/*0000*/ ULONG dwReserved1;
	/*0008*/ WCHAR * pwszName;
	/*0010*/ _COAUTHINFO * pAuthInfo;
	/*0018*/ ULONG dwReserved2;
	/*0020*/
};

struct _COUNTED_REASON_CONTEXT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _UNICODE_STRING ResourceFileName;
	/*0018*/ USHORT ResourceReasonId;
	/*001c*/ ULONG StringCount;
	/*0020*/ _UNICODE_STRING * ReasonStrings;
	/*0008*/ _UNICODE_STRING SimpleString;
	/*0028*/
};

struct _COUNTER_READING {
	/*0000*/ _HARDWARE_COUNTER_TYPE Type;
	/*0004*/ ULONG Index;
	/*0008*/ ULONGLONG Start;
	/*0010*/ ULONGLONG Total;
	/*0018*/
};

struct _COVERAGE_MODULES {
	/*0000*/ ULONG ListAndReset;
	/*0004*/ ULONG NumberOfModules;
	/*0008*/ _COVERAGE_MODULE_REQUEST ModuleRequestInfo;
	/*0020*/ _COVERAGE_MODULE_INFO Modules[0x1];
	/*0040*/
};

struct _COVERAGE_MODULE_INFO {
	/*0000*/ ULONG ModuleInfoSize;
	/*0004*/ ULONG IsBinaryLoaded;
	/*0008*/ _UNICODE_STRING ModulePathName;
	/*0018*/ ULONG CoverageSectionSize;
	/*001c*/ UCHAR CoverageSection[0x1];
	/*0020*/
};

struct _COVERAGE_MODULE_REQUEST {
	
	/*0000*/ _COVERAGE_REQUEST_CODES RequestType;
	/*0008*/ <unnamed-type-SearchInfo> SearchInfo;
	/*0018*/
};

enum _COVERAGE_REQUEST_CODES {
	CoverageAllModules = 0x0,
	CoverageSearchByHash = 0x1,
	CoverageSearchByName = 0x2
};

struct _COVERAGE_SECTION_HEADER {
	/*0000*/ ULONG Signature;
	/*0004*/ ULONG CoverageType;
	/*0008*/ UCHAR MD5Hash[0x10];
	/*0018*/ ULONG CoverageSectionSize;
	/*001c*/ ULONG CoverageVectorSize;
	/*0020*/ ULONG CoverageVectorOffset;
	/*0024*/ ULONG ExtraDataOffset;
	/*0028*/
};

struct _COVERAGE_UNLOADED_MODULE_ENTRY {
	/*0000*/ _LIST_ENTRY NextEntry;
	/*0010*/ _UNICODE_STRING BaseDllName;
	/*0020*/ _UNICODE_STRING FullDllName;
	/*0030*/ ULONG CoverageSectionSize;
	/*0038*/ void * CoverageSection;
	/*0040*/
};

struct _CPTABLEINFO {
	/*0000*/ USHORT CodePage;
	/*0002*/ USHORT MaximumCharacterSize;
	/*0004*/ USHORT DefaultChar;
	/*0006*/ USHORT UniDefaultChar;
	/*0008*/ USHORT TransDefaultChar;
	/*000a*/ USHORT TransUniDefaultChar;
	/*000c*/ USHORT DBCSCodePage;
	/*000e*/ UCHAR LeadByte[0xc];
	/*0020*/ WCHAR * MultiByteTable;
	/*0028*/ void * WideCharTable;
	/*0030*/ WCHAR * DBCSRanges;
	/*0038*/ WCHAR * DBCSOffsets;
	/*0040*/
};

enum _CPU_SET_INFORMATION_TYPE {
	CpuSetInformation = 0x0
};

struct _CREATEFILE2_EXTENDED_PARAMETERS {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFileAttributes;
	/*0008*/ ULONG dwFileFlags;
	/*000c*/ ULONG dwSecurityQosFlags;
	/*0010*/ _SECURITY_ATTRIBUTES * lpSecurityAttributes;
	/*0018*/ void * hTemplateFile;
	/*0020*/
};

struct _CREATE_PROCESS_DEBUG_INFO {
	/*0000*/ void * hFile;
	/*0008*/ void * hProcess;
	/*0010*/ void * hThread;
	/*0018*/ void * lpBaseOfImage;
	/*0020*/ ULONG dwDebugInfoFileOffset;
	/*0024*/ ULONG nDebugInfoSize;
	/*0028*/ void * lpThreadLocalBase;
	/*0030*/ ULONG (* lpStartAddress)( void * );
	/*0038*/ void * lpImageName;
	/*0040*/ USHORT fUnicode;
	/*0048*/
};

struct _CREATE_THREAD_DEBUG_INFO {
	/*0000*/ void * hThread;
	/*0008*/ void * lpThreadLocalBase;
	/*0010*/ ULONG (* lpStartAddress)( void * );
	/*0018*/
};

struct _CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION {
	/*0000*/ ULONG ulAuthenticationPackage;
	/*0004*/ _GUID clsidCredentialProvider;
	/*0014*/ ULONG cbSerialization;
	/*0018*/ UCHAR * rgbSerialization;
	/*0020*/
};

struct _CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR {
	/*0000*/ ULONG dwFieldID;
	/*0004*/ _CREDENTIAL_PROVIDER_FIELD_TYPE cpft;
	/*0008*/ WCHAR * pszLabel;
	/*0010*/ _GUID guidFieldType;
	/*0020*/
};

enum _CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE {
	CPFIS_NONE = 0x0,
	CPFIS_READONLY = 0x1,
	CPFIS_DISABLED = 0x2,
	CPFIS_FOCUSED = 0x3
};

enum _CREDENTIAL_PROVIDER_FIELD_STATE {
	CPFS_HIDDEN = 0x0,
	CPFS_DISPLAY_IN_SELECTED_TILE = 0x1,
	CPFS_DISPLAY_IN_DESELECTED_TILE = 0x2,
	CPFS_DISPLAY_IN_BOTH = 0x3
};

enum _CREDENTIAL_PROVIDER_FIELD_TYPE {
	CPFT_INVALID = 0x0,
	CPFT_LARGE_TEXT = 0x1,
	CPFT_SMALL_TEXT = 0x2,
	CPFT_COMMAND_LINK = 0x3,
	CPFT_EDIT_TEXT = 0x4,
	CPFT_PASSWORD_TEXT = 0x5,
	CPFT_TILE_IMAGE = 0x6,
	CPFT_CHECKBOX = 0x7,
	CPFT_COMBOBOX = 0x8,
	CPFT_SUBMIT_BUTTON = 0x9
};

enum _CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE {
	CPGSR_NO_CREDENTIAL_NOT_FINISHED = 0x0,
	CPGSR_NO_CREDENTIAL_FINISHED = 0x1,
	CPGSR_RETURN_CREDENTIAL_FINISHED = 0x2,
	CPGSR_RETURN_NO_CREDENTIAL_FINISHED = 0x3
};

enum _CREDENTIAL_PROVIDER_STATUS_ICON {
	CPSI_NONE = 0x0,
	CPSI_ERROR = 0x1,
	CPSI_WARNING = 0x2,
	CPSI_SUCCESS = 0x3
};

enum _CREDENTIAL_PROVIDER_USAGE_SCENARIO {
	CPUS_INVALID = 0x0,
	CPUS_LOGON = 0x1,
	CPUS_UNLOCK_WORKSTATION = 0x2,
	CPUS_CHANGE_PASSWORD = 0x3,
	CPUS_CREDUI = 0x4,
	CPUS_PLAP = 0x5
};

struct _CRITICAL_PROCESS_EXCEPTION_DATA {
	/*0000*/ _GUID ReportId;
	/*0010*/ _UNICODE_STRING ModuleName;
	/*0020*/ ULONG ModuleTimestamp;
	/*0024*/ ULONG ModuleSize;
	/*0028*/ ULONGLONG Offset;
	/*0030*/
};

struct _CRT_DOUBLE {
	/*0000*/ double x;
	/*0008*/
};

struct _CRT_FLOAT {
	/*0000*/ float f;
	/*0004*/
};

struct _CSADDR_INFO {
	/*0000*/ _SOCKET_ADDRESS LocalAddr;
	/*0010*/ _SOCKET_ADDRESS RemoteAddr;
	/*0020*/ INT iSocketType;
	/*0024*/ INT iProtocol;
	/*0028*/
};

struct _CSP_AVAILABLE_CONNECTION_PROPERTIES {
	/*0000*/ _WCM_AVAILABLE_NETWORK_STATUS NetworkStatus;
	/*0004*/ _GUID NetworkType;
	/*0014*/ _WCM_NETWORK_REGISTER_STATE RegisterState;
	/*0018*/ _DUSM_CONNECTION_COST Cost;
	/*001c*/ _GUID ConnectionType;
	/*002c*/ _DUSM_DATAPLANUSAGE_STATUS DpuState;
	/*0030*/ INT IsBackgroundRestrict;
	/*0034*/
};

enum _CSP_STATE {
	csp_state_unknown = 0x0,
	csp_state_disconnected = 0x1,
	csp_state_connected = 0x2
};

struct _CSTRING {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0008*/ CHAR const * Buffer;
	/*0010*/
};

enum _CSVFS_DISK_CONNECTIVITY {
	CsvFsDiskConnectivityNone = 0x0,
	CsvFsDiskConnectivityMdsNodeOnly = 0x1,
	CsvFsDiskConnectivitySubsetOfNodes = 0x2,
	CsvFsDiskConnectivityAllNodes = 0x3
};

enum _CSV_CONTROL_OP {
	CsvControlStartRedirectFile = 0x2,
	CsvControlStopRedirectFile = 0x3,
	CsvControlQueryRedirectState = 0x4,
	CsvControlQueryFileRevision = 0x6,
	CsvControlQueryMdsPath = 0x8,
	CsvControlQueryFileRevisionFileId128 = 0x9,
	CsvControlQueryVolumeRedirectState = 0xa,
	CsvControlEnableUSNRangeModificationTracking = 0xd,
	CsvControlMarkHandleLocalVolumeMount = 0xe,
	CsvControlUnmarkHandleLocalVolumeMount = 0xf,
	CsvControlGetCsvFsMdsPathV2 = 0x12,
	CsvControlDisableCaching = 0x13,
	CsvControlEnableCaching = 0x14,
	CsvControlStartForceDFO = 0x15,
	CsvControlStopForceDFO = 0x16
};

struct _CSV_CONTROL_PARAM {
	/*0000*/ _CSV_CONTROL_OP Operation;
	/*0008*/ LONGLONG Unused;
	/*0010*/
};

struct _CSV_IS_OWNED_BY_CSVFS {
	/*0000*/ UCHAR OwnedByCSVFS;
	/*0001*/
};

struct _CSV_MGMT_LOCK {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _CSV_NAMESPACE_INFO {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG DeviceNumber;
	/*0008*/ _LARGE_INTEGER StartingOffset;
	/*0010*/ ULONG SectorSize;
	/*0018*/
};

struct _CSV_QUERY_FILE_REVISION {
	/*0000*/ LONGLONG FileId;
	/*0008*/ LONGLONG FileRevision[0x3];
	/*0020*/
};

struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {
	/*0000*/ _FILE_ID_128 FileId;
	/*0010*/ LONGLONG FileRevision[0x3];
	/*0028*/
};

struct _CSV_QUERY_MDS_PATH {
	/*0000*/ ULONG MdsNodeId;
	/*0004*/ ULONG DsNodeId;
	/*0008*/ ULONG PathLength;
	/*000c*/ WCHAR Path[0x1];
	/*0010*/
};

struct _CSV_QUERY_MDS_PATH_V2 {
	/*0000*/ LONGLONG Version;
	/*0008*/ ULONG RequiredSize;
	/*000c*/ ULONG MdsNodeId;
	/*0010*/ ULONG DsNodeId;
	/*0014*/ ULONG Flags;
	/*0018*/ _CSVFS_DISK_CONNECTIVITY DiskConnectivity;
	/*001c*/ _GUID VolumeId;
	/*002c*/ ULONG IpAddressOffset;
	/*0030*/ ULONG IpAddressLength;
	/*0034*/ ULONG PathOffset;
	/*0038*/ ULONG PathLength;
	/*0040*/
};

struct _CSV_QUERY_REDIRECT_STATE {
	/*0000*/ ULONG MdsNodeId;
	/*0004*/ ULONG DsNodeId;
	/*0008*/ UCHAR FileRedirected;
	/*000c*/
};

struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
	/*0000*/ ULONGLONG VetoedFromAltitudeIntegral;
	/*0008*/ ULONGLONG VetoedFromAltitudeDecimal;
	/*0010*/ WCHAR Reason[0x100];
	/*0210*/
};

struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
	/*0000*/ ULONG MdsNodeId;
	/*0004*/ ULONG DsNodeId;
	/*0008*/ UCHAR IsDiskConnected;
	/*0009*/ UCHAR ClusterEnableDirectIo;
	/*000c*/ _CSVFS_DISK_CONNECTIVITY DiskConnectivity;
	/*0010*/
};

struct _CURDIR {
	/*0000*/ _UNICODE_STRING DosPath;
	/*0010*/ void * Handle;
	/*0018*/
};

struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
	/*0000*/ ULONG Size;
	/*0008*/ WCHAR const * TriggerId;
	/*0010*/
};

struct _Collvec {
	/*0000*/ UINT _Page;
	/*0008*/ WCHAR * _LocaleName;
	/*0010*/
};

struct _Combined_type<float,double> {
	/*0001*/
};

struct _Combined_type<float,long double> {
	/*0001*/
};

struct _CrtMemBlockHeader;

struct _CrtMemState {
	/*0000*/ _CrtMemBlockHeader * pBlockHeader;
	/*0008*/ ULONGLONG lCounts[0x5];
	/*0030*/ ULONGLONG lSizes[0x5];
	/*0058*/ ULONGLONG lHighWaterCount;
	/*0060*/ ULONGLONG lTotalCount;
	/*0068*/
};

struct _Ctypevec {
	/*0000*/ UINT _Page;
	/*0008*/ SHORT const * _Table;
	/*0010*/ INT _Delfl;
	/*0018*/ WCHAR * _LocaleName;
	/*0020*/
};

struct _Cvtvec {
	/*0000*/ UINT _Page;
	/*0004*/ UINT _Mbcurmax;
	/*0008*/ INT _Isclocale;
	/*000c*/ UCHAR _Isleadbyte[0x20];
	/*002c*/
};

struct _DCB {
	/*0000*/ ULONG DCBlength;
	/*0004*/ ULONG BaudRate;
	/*0008*/ ULONG fBinary : 01; // 0x00000001;
	/*0008*/ ULONG fParity : 01; // 0x00000002;
	/*0008*/ ULONG fOutxCtsFlow : 01; // 0x00000004;
	/*0008*/ ULONG fOutxDsrFlow : 01; // 0x00000008;
	/*0008*/ ULONG fDtrControl : 02; // 0x00000030;
	/*0008*/ ULONG fDsrSensitivity : 01; // 0x00000040;
	/*0008*/ ULONG fTXContinueOnXoff : 01; // 0x00000080;
	/*0008*/ ULONG fOutX : 01; // 0x00000100;
	/*0008*/ ULONG fInX : 01; // 0x00000200;
	/*0008*/ ULONG fErrorChar : 01; // 0x00000400;
	/*0008*/ ULONG fNull : 01; // 0x00000800;
	/*0008*/ ULONG fRtsControl : 02; // 0x00003000;
	/*0008*/ ULONG fAbortOnError : 01; // 0x00004000;
	/*0008*/ ULONG fDummy2 : 17; // 0xffff8000;
	/*000c*/ USHORT wReserved;
	/*000e*/ USHORT XonLim;
	/*0010*/ USHORT XoffLim;
	/*0012*/ UCHAR ByteSize;
	/*0013*/ UCHAR Parity;
	/*0014*/ UCHAR StopBits;
	/*0015*/ CHAR XonChar;
	/*0016*/ CHAR XoffChar;
	/*0017*/ CHAR ErrorChar;
	/*0018*/ CHAR EofChar;
	/*0019*/ CHAR EvtChar;
	/*001a*/ USHORT wReserved1;
	/*001c*/
};

enum _DEBUG_CONTROL_SPACE_ITEM {
	DEBUG_CONTROL_SPACE_PCR = 0x0,
	DEBUG_CONTROL_SPACE_PRCB = 0x1,
	DEBUG_CONTROL_SPACE_KSPECIAL = 0x2,
	DEBUG_CONTROL_SPACE_THREAD = 0x3,
	DEBUG_CONTROL_SPACE_MAXIMUM = 0x4
};

struct _DEBUG_EVENT {
	
	/*0000*/ ULONG dwDebugEventCode;
	/*0004*/ ULONG dwProcessId;
	/*0008*/ ULONG dwThreadId;
	/*0010*/ <unnamed-type-u> u;
	/*00b0*/
};

struct _DECRYPTION_STATUS_BUFFER {
	/*0000*/ UCHAR NoEncryptedStreams;
	/*0001*/
};

struct _DEDUP_CHUNK_INFORMATION_HASH32 {
	/*0000*/ ULONG ChunkFlags;
	/*0008*/ LONGLONG ChunkOffsetInFile;
	/*0010*/ LONGLONG ChunkSize;
	/*0018*/ UCHAR HashVal[0x20];
	/*0038*/
};

struct _DEDUP_FILE_OPERATION {
	/*0000*/ ULONG Code;
	/*0004*/
};

struct _DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG QueryFlags;
	/*0008*/ ULONG HashAlgorithm;
	/*0010*/ _LARGE_INTEGER RangeOffsetInFile;
	/*0018*/ _LARGE_INTEGER RangeLength;
	/*0020*/
};

struct _DEFINE_STORAGE_RESERVE_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG AreaDefinitionOffset;
	/*000c*/ ULONG AreaDefinitionCount;
	/*0010*/ _STORAGE_RESERVE_AREA_DEFINITION AreaDefinition[0x1];
	/*0020*/
};

struct _DELAYLOAD_INFO {
	/*0000*/ ULONG Size;
	/*0008*/ _IMAGE_DELAYLOAD_DESCRIPTOR const * DelayloadDescriptor;
	/*0010*/ _IMAGE_THUNK_DATA64 * ThunkAddress;
	/*0018*/ CHAR const * TargetDllName;
	/*0020*/ _DELAYLOAD_PROC_DESCRIPTOR TargetApiDescriptor;
	/*0030*/ void * TargetModuleBase;
	/*0038*/ void * Unused;
	/*0040*/ ULONG LastError;
	/*0048*/
};

struct _DELAYLOAD_PROC_DESCRIPTOR {
	/*0000*/ ULONG ImportDescribedByName;
	union {
		/*0008*/ CHAR const * Name;
		/*0008*/ ULONG Ordinal;
		/*0010*/
	} Description;
	/*0010*/
};

struct _DELETE_STORAGE_RESERVE_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG AreaIdOffset;
	/*000c*/ ULONG AreaIdCount;
	/*0010*/ _STORAGE_RESERVE_ID AreaId[0x1];
	/*0014*/
};

enum _DEP_SYSTEM_POLICY_TYPE {
	DEPPolicyAlwaysOff = 0x0,
	DEPPolicyAlwaysOn = 0x1,
	DEPPolicyOptIn = 0x2,
	DEPPolicyOptOut = 0x3,
	DEPTotalPolicyCount = 0x4
};

struct _DEVICE_FLAGS {
	/*0000*/ ULONG Failed : 01; // 0x00000001;
	/*0000*/ ULONG ReadOnly : 01; // 0x00000002;
	/*0000*/ ULONG Removable : 01; // 0x00000004;
	/*0000*/ ULONG ConsoleIn : 01; // 0x00000008;
	/*0000*/ ULONG ConsoleOut : 01; // 0x00000010;
	/*0000*/ ULONG Input : 01; // 0x00000020;
	/*0000*/ ULONG Output : 01; // 0x00000040;
	/*0004*/
};

enum _DEVICE_POWER_STATE {
	PowerDeviceUnspecified = 0x0,
	PowerDeviceD0 = 0x1,
	PowerDeviceD1 = 0x2,
	PowerDeviceD2 = 0x3,
	PowerDeviceD3 = 0x4,
	PowerDeviceMaximum = 0x5
};

struct _DEVPROPCOMPKEY {
	/*0000*/ _DEVPROPKEY Key;
	/*0014*/ _DEVPROPSTORE Store;
	/*0018*/ WCHAR const * LocaleName;
	/*0020*/
};

struct _DEVPROPERTY {
	/*0000*/ _DEVPROPCOMPKEY CompKey;
	/*0020*/ ULONG Type;
	/*0024*/ ULONG BufferSize;
	/*0028*/ void * Buffer;
	/*0030*/
};

struct _DEVPROPKEY {
	/*0000*/ _GUID fmtid;
	/*0010*/ ULONG pid;
	/*0014*/
};

enum _DEVPROPSTORE {
	DEVPROP_STORE_SYSTEM = 0x0,
	DEVPROP_STORE_USER = 0x1
};

struct _DIAGNOSTIC_BUFFER {
	/*0000*/ ULONGLONG Size;
	/*0008*/ _REQUESTER_TYPE CallerType;
	/*0010*/ ULONGLONG ProcessImageNameOffset;
	/*0018*/ ULONG ProcessId;
	/*001c*/ ULONG ServiceTag;
	/*0010*/ ULONGLONG DeviceDescriptionOffset;
	/*0018*/ ULONGLONG DevicePathOffset;
	/*0020*/ ULONGLONG ReasonOffset;
	/*0028*/
};

enum _DIRECTORY_NOTIFY_INFORMATION_CLASS {
	DirectoryNotifyInformation = 0x1,
	DirectoryNotifyExtendedInformation = 0x2
};

struct _DISCDLGSTRUCTA {
	/*0000*/ ULONG cbStructure;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ CHAR * lpLocalName;
	/*0018*/ CHAR * lpRemoteName;
	/*0020*/ ULONG dwFlags;
	/*0028*/
};

struct _DISCDLGSTRUCTW {
	/*0000*/ ULONG cbStructure;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ WCHAR * lpLocalName;
	/*0018*/ WCHAR * lpRemoteName;
	/*0020*/ ULONG dwFlags;
	/*0028*/
};

struct _DISPATCHER_CONTEXT {
	/*0000*/ ULONGLONG ControlPc;
	/*0008*/ ULONGLONG ImageBase;
	/*0010*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionEntry;
	/*0018*/ ULONGLONG EstablisherFrame;
	/*0020*/ ULONGLONG TargetIp;
	/*0028*/ _CONTEXT * ContextRecord;
	/*0030*/ _EXCEPTION_DISPOSITION (* LanguageHandler)( _EXCEPTION_RECORD * , void * , _CONTEXT * , void * );
	/*0038*/ void * HandlerData;
	/*0040*/ _UNWIND_HISTORY_TABLE * HistoryTable;
	/*0048*/ ULONG ScopeIndex;
	/*004c*/ ULONG Fill0;
	/*0050*/
};

enum _DISPLAYCONFIG_COLOR_ENCODING {
	DISPLAYCONFIG_COLOR_ENCODING_RGB = 0x0,
	DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 0x1,
	DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 0x2,
	DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 0x3,
	DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 0x4,
	DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = 0xffffffff
};

struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT advancedColorSupported : 01; // 0x00000001;
	/*0014*/ UINT advancedColorEnabled : 01; // 0x00000002;
	/*0014*/ UINT wideColorEnforced : 01; // 0x00000004;
	/*0014*/ UINT advancedColorForceDisabled : 01; // 0x00000008;
	/*0014*/ UINT reserved : 28; // 0xfffffff0;
	/*0014*/ UINT value;
	/*0018*/ _DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
	/*001c*/ UINT bitsPerColorChannel;
	/*0020*/
};

struct _DISPLAYCONFIG_SDR_WHITE_LEVEL {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ ULONG SDRWhiteLevel;
	/*0018*/
};

struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE {
	/*0000*/ DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	/*0014*/ UINT enableAdvancedColor : 01; // 0x00000001;
	/*0014*/ UINT reserved : 31; // 0xfffffffe;
	/*0014*/ UINT value;
	/*0018*/
};

struct _DISPLAY_DEVICEA {
	/*0000*/ ULONG cb;
	/*0004*/ CHAR DeviceName[0x20];
	/*0024*/ CHAR DeviceString[0x80];
	/*00a4*/ ULONG StateFlags;
	/*00a8*/ CHAR DeviceID[0x80];
	/*0128*/ CHAR DeviceKey[0x80];
	/*01a8*/
};

struct _DISPLAY_DEVICEW {
	/*0000*/ ULONG cb;
	/*0004*/ WCHAR DeviceName[0x20];
	/*0044*/ WCHAR DeviceString[0x80];
	/*0144*/ ULONG StateFlags;
	/*0148*/ WCHAR DeviceID[0x80];
	/*0248*/ WCHAR DeviceKey[0x80];
	/*0348*/
};

struct _DLLVERSIONINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformID;
	/*0014*/
};

struct _DLLVERSIONINFO2 {
	/*0000*/ _DLLVERSIONINFO info1;
	/*0014*/ ULONG dwFlags;
	/*0018*/ ULONGLONG ullVersion;
	/*0020*/
};

union _DL_EI48 {
	/*0000*/ UCHAR Byte[0x3];
	/*0003*/
};

union _DL_EUI48 {
	/*0000*/ UCHAR Byte[0x6];
	/*0000*/ _DL_OUI Oui;
	/*0003*/ _DL_EI48 Ei48;
	/*0006*/
};

union _DL_OUI {
	/*0000*/ UCHAR Byte[0x3];
	/*0000*/ UCHAR Group : 01; // 0x01;
	/*0000*/ UCHAR Local : 01; // 0x02;
	/*0003*/
};

struct _DMA_CONFIGURATION_BYTE0 {
	/*0000*/ UCHAR Channel : 03; // 0x07;
	/*0000*/ UCHAR Reserved : 03; // 0x38;
	/*0000*/ UCHAR Shared : 01; // 0x40;
	/*0000*/ UCHAR MoreEntries : 01; // 0x80;
	/*0001*/
};

struct _DMA_CONFIGURATION_BYTE1 {
	/*0000*/ UCHAR Reserved0 : 02; // 0x03;
	/*0000*/ UCHAR TransferSize : 02; // 0x0c;
	/*0000*/ UCHAR Timing : 02; // 0x30;
	/*0000*/ UCHAR Reserved1 : 02; // 0xc0;
	/*0001*/
};

enum _DMA_SPEED {
	Compatible = 0x0,
	TypeA = 0x1,
	TypeB = 0x2,
	TypeC = 0x3,
	TypeF = 0x4,
	MaximumDmaSpeed = 0x5
};

enum _DMA_WIDTH {
	Width8Bits = 0x0,
	Width16Bits = 0x1,
	Width32Bits = 0x2,
	Width64Bits = 0x3,
	WidthNoWrap = 0x4,
	MaximumDmaWidth = 0x5
};

enum _DNS_CHARSET {
	DnsCharSetUnknown = 0x0,
	DnsCharSetUnicode = 0x1,
	DnsCharSetUtf8 = 0x2,
	DnsCharSetAnsi = 0x3
};

struct _DNS_CONNECTION_IFINDEX_ENTRY {
	/*0000*/ WCHAR const * pwszConnectionName;
	/*0008*/ ULONG dwIfIndex;
	/*0010*/
};

struct _DNS_CONNECTION_IFINDEX_LIST {
	/*0000*/ _DNS_CONNECTION_IFINDEX_ENTRY * pConnectionIfIndexEntries;
	/*0008*/ ULONG nEntries;
	/*0010*/
};

struct _DNS_CONNECTION_NAME {
	/*0000*/ WCHAR wszName[0x41];
	/*0082*/
};

struct _DNS_CONNECTION_NAME_LIST {
	/*0000*/ ULONG cNames;
	/*0008*/ _DNS_CONNECTION_NAME * pNames;
	/*0010*/
};

struct _DNS_CONNECTION_POLICY_ENTRY {
	/*0000*/ WCHAR const * pwszHost;
	/*0008*/ WCHAR const * pwszAppId;
	/*0010*/ ULONG cbAppSid;
	/*0018*/ UCHAR * pbAppSid;
	/*0020*/ ULONG nConnections;
	/*0028*/ WCHAR const * * ppwszConnections;
	/*0030*/ ULONG dwPolicyEntryFlags;
	/*0038*/
};

struct _DNS_CONNECTION_POLICY_ENTRY_LIST {
	/*0000*/ _DNS_CONNECTION_POLICY_ENTRY * pPolicyEntries;
	/*0008*/ ULONG nEntries;
	/*0010*/
};

struct _DNS_CONNECTION_PROXY_ELEMENT {
	/*0000*/ _DNS_CONNECTION_PROXY_TYPE Type;
	/*0008*/ _DNS_CONNECTION_PROXY_INFO Info;
	/*0050*/
};

struct _DNS_CONNECTION_PROXY_INFO {
	
	/*0000*/ ULONG Version;
	/*0008*/ WCHAR * pwszFriendlyName;
	/*0010*/ ULONG Flags;
	/*0014*/ _DNS_CONNECTION_PROXY_INFO_SWITCH Switch;
	/*0018*/ _DNS_CONNECTION_PROXY_INFO_CONFIG Config;
	/*0018*/ _DNS_CONNECTION_PROXY_INFO_SCRIPT Script;
	/*0048*/
};

struct _DNS_CONNECTION_PROXY_INFO_EX {
	/*0000*/ _DNS_CONNECTION_PROXY_INFO ProxyInfo;
	/*0048*/ ULONG dwInterfaceIndex;
	/*0050*/ WCHAR * pwszConnectionName;
	/*0058*/ INT fDirectConfiguration;
	/*0060*/ void * hConnection;
	/*0068*/
};

enum _DNS_CONNECTION_PROXY_INFO_SWITCH {
	DNS_CONNECTION_PROXY_INFO_SWITCH_CONFIG = 0x0,
	DNS_CONNECTION_PROXY_INFO_SWITCH_SCRIPT = 0x1,
	DNS_CONNECTION_PROXY_INFO_SWITCH_WPAD = 0x2
};

struct _DNS_CONNECTION_PROXY_LIST {
	/*0000*/ ULONG cProxies;
	/*0008*/ _DNS_CONNECTION_PROXY_ELEMENT * pProxies;
	/*0010*/
};

enum _DNS_CONNECTION_PROXY_TYPE {
	DNS_CONNECTION_PROXY_TYPE_NULL = 0x0,
	DNS_CONNECTION_PROXY_TYPE_HTTP = 0x1,
	DNS_CONNECTION_PROXY_TYPE_WAP = 0x2,
	DNS_CONNECTION_PROXY_TYPE_SOCKS4 = 0x4,
	DNS_CONNECTION_PROXY_TYPE_SOCKS5 = 0x5
};

struct _DNS_HEADER {
	/*0000*/ USHORT Xid;
	/*0002*/ UCHAR RecursionDesired : 01; // 0x01;
	/*0002*/ UCHAR Truncation : 01; // 0x02;
	/*0002*/ UCHAR Authoritative : 01; // 0x04;
	/*0002*/ UCHAR Opcode : 04; // 0x78;
	/*0002*/ UCHAR IsResponse : 01; // 0x80;
	/*0003*/ UCHAR ResponseCode : 04; // 0x0f;
	/*0003*/ UCHAR CheckingDisabled : 01; // 0x10;
	/*0003*/ UCHAR AuthenticatedData : 01; // 0x20;
	/*0003*/ UCHAR Reserved : 01; // 0x40;
	/*0003*/ UCHAR RecursionAvailable : 01; // 0x80;
	/*0004*/ USHORT QuestionCount;
	/*0006*/ USHORT AnswerCount;
	/*0008*/ USHORT NameServerCount;
	/*000a*/ USHORT AdditionalCount;
	/*000c*/
};

struct _DNS_HEADER_EXT {
	/*0000*/ USHORT Reserved : 15; // 0x7fff;
	/*0000*/ USHORT DnssecOk : 01; // 0x8000;
	/*0002*/ UCHAR chRcode;
	/*0003*/ UCHAR chVersion;
	/*0004*/
};

struct _DNS_INTERFACE_SETTINGS {
	/*0000*/ ULONG Version;
	/*0008*/ ULONGLONG Flags;
	/*0010*/ WCHAR * Domain;
	/*0018*/ WCHAR * NameServer;
	/*0020*/ WCHAR * SearchList;
	/*0028*/ ULONG RegistrationEnabled;
	/*002c*/ ULONG RegisterAdapterName;
	/*0030*/ ULONG EnableLLMNR;
	/*0034*/ ULONG QueryAdapterName;
	/*0038*/ WCHAR * ProfileNameServer;
	/*0040*/
};

struct _DNS_INTERFACE_SETTINGS_EX {
	/*0000*/ _DNS_INTERFACE_SETTINGS SettingsV1;
	/*0040*/ ULONG DisableUnconstrainedQueries;
	/*0048*/ WCHAR * SupplementalSearchList;
	/*0050*/
};

struct _DNS_MESSAGE_BUFFER {
	/*0000*/ _DNS_HEADER MessageHead;
	/*000c*/ CHAR MessageBody[0x1];
	/*000d*/
};

enum _DNS_NAME_FORMAT {
	DnsNameDomain = 0x0,
	DnsNameDomainLabel = 0x1,
	DnsNameHostnameFull = 0x2,
	DnsNameHostnameLabel = 0x3,
	DnsNameWildcard = 0x4,
	DnsNameSrvRecord = 0x5,
	DnsNameValidateTld = 0x6
};

struct _DNS_QUERY_CANCEL {
	/*0000*/ CHAR Reserved[0x20];
	/*0020*/
};

struct _DNS_QUERY_REQUEST {
	/*0000*/ ULONG Version;
	/*0008*/ WCHAR const * QueryName;
	/*0010*/ USHORT QueryType;
	/*0018*/ ULONGLONG QueryOptions;
	/*0020*/ _DnsAddrArray * pDnsServerList;
	/*0028*/ ULONG InterfaceIndex;
	/*0030*/ void (* pQueryCompletionCallback)( void * , _DNS_QUERY_RESULT * );
	/*0038*/ void * pQueryContext;
	/*0040*/
};

struct _DNS_QUERY_RESULT {
	/*0000*/ ULONG Version;
	/*0004*/ LONG QueryStatus;
	/*0008*/ ULONGLONG QueryOptions;
	/*0010*/ _DnsRecordW * pQueryRecords;
	/*0018*/ void * Reserved;
	/*0020*/
};

struct _DNS_SERVICE_BROWSE_REQUEST {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG InterfaceIndex;
	/*0008*/ WCHAR const * QueryName;
	/*0010*/ void (* pBrowseCallback)( ULONG , void * , _DnsRecordW * );
	/*0010*/ void (* pBrowseCallbackV2)( void * , _DNS_QUERY_RESULT * );
	/*0018*/ void * pQueryContext;
	/*0020*/
};

struct _DNS_SERVICE_CANCEL {
	/*0000*/ void * reserved;
	/*0008*/
};

struct _DNS_SERVICE_INSTANCE {
	/*0000*/ WCHAR * pszInstanceName;
	/*0008*/ WCHAR * pszHostName;
	/*0010*/ ULONG * ip4Address;
	/*0018*/ IP6_ADDRESS * ip6Address;
	/*0020*/ USHORT wPort;
	/*0022*/ USHORT wPriority;
	/*0024*/ USHORT wWeight;
	/*0028*/ ULONG dwPropertyCount;
	/*0030*/ WCHAR * * keys;
	/*0038*/ WCHAR * * values;
	/*0040*/ ULONG dwInterfaceIndex;
	/*0048*/
};

struct _DNS_SERVICE_REGISTER_REQUEST {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG InterfaceIndex;
	/*0008*/ _DNS_SERVICE_INSTANCE * pServiceInstance;
	/*0010*/ void (* pRegisterCompletionCallback)( ULONG , void * , _DNS_SERVICE_INSTANCE * );
	/*0018*/ void * pQueryContext;
	/*0020*/ void * hCredentials;
	/*0028*/ INT unicastEnabled;
	/*0030*/
};

struct _DNS_SERVICE_RESOLVE_REQUEST {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG InterfaceIndex;
	/*0008*/ WCHAR * QueryName;
	/*0010*/ void (* pResolveCompletionCallback)( ULONG , void * , _DNS_SERVICE_INSTANCE * );
	/*0018*/ void * pQueryContext;
	/*0020*/
};

struct _DNS_SETTINGS {
	/*0000*/ ULONG Version;
	/*0008*/ ULONGLONG Flags;
	/*0010*/ WCHAR * Hostname;
	/*0018*/ WCHAR * Domain;
	/*0020*/ WCHAR * SearchList;
	/*0028*/
};

struct _DNS_WIRE_QUESTION {
	/*0000*/ USHORT QuestionType;
	/*0002*/ USHORT QuestionClass;
	/*0004*/
};

struct _DNS_WIRE_RECORD {
	/*0000*/ USHORT RecordType;
	/*0002*/ USHORT RecordClass;
	/*0004*/ ULONG TimeToLive;
	/*0008*/ USHORT DataLength;
	/*000a*/
};

struct _DOCINFOA {
	/*0000*/ INT cbSize;
	/*0008*/ CHAR const * lpszDocName;
	/*0010*/ CHAR const * lpszOutput;
	/*0018*/ CHAR const * lpszDatatype;
	/*0020*/ ULONG fwType;
	/*0028*/
};

struct _DOCINFOW {
	/*0000*/ INT cbSize;
	/*0008*/ WCHAR const * lpszDocName;
	/*0010*/ WCHAR const * lpszOutput;
	/*0018*/ WCHAR const * lpszDatatype;
	/*0020*/ ULONG fwType;
	/*0028*/
};

enum _DOT11_AC_PARAM {
	dot11_AC_param_BE = 0x0,
	dot11_AC_param_BK = 0x1,
	dot11_AC_param_VI = 0x2,
	dot11_AC_param_VO = 0x3,
	dot11_AC_param_max = 0x4
};

struct _DOT11_ADAPTER_CAPABILITIES {
	/*0000*/ UCHAR FirmwareVersion[0x100];
	/*0100*/ ULONG uWindowsWdiVersion;
	/*0104*/ ULONG uIhvWdiVersion;
	/*0108*/ ULONG uOpModesSupported;
	/*010c*/ _DOT11_TRI_STATE PromiscuousModeSupported;
	/*0110*/ _DOT11_TRI_STATE IBSSSupported;
	/*0114*/ _DOT11_TRI_STATE DiversityAntennaSupported;
	/*0118*/ ULONG uNumRxSpatialStreams;
	/*011c*/ ULONG uNumTxSpatialStreams;
	/*0120*/ ULONG uNumConcurrentChannelOperations;
	/*0124*/ _DOT11_TRI_STATE Dot11ActionFrameTxRxSupported;
	/*0128*/ _DOT11_TRI_STATE ANQPServiceInformationDiscoverySupported;
	/*012c*/ _DOT11_TRI_STATE Dot11k_NeighborReportSupported;
	/*0130*/ _DOT11_TRI_STATE Dot11k_APChannelReportSupported;
	/*0134*/ _DOT11_TRI_STATE Dot11w_ProtectedMgmtFramesSupported;
	/*0138*/ _DOT11_TRI_STATE HotspotHESSIDConnectionSupported;
	/*013c*/ ULONG uP2PConcurrentGOPortsCount;
	/*0140*/ ULONG uP2PConcurrentClientPortsCount;
	/*0144*/ ULONG uP2PMaxMobileAPClientsAllowed;
	/*0148*/ _DOT11_TRI_STATE P2PPassiveListenAvailabilitySupported;
	/*014c*/ _DOT11_TRI_STATE P2PGOon5GHzBandSupported;
	/*0150*/ ULONG uServiceNameAdvertisementsMaxBytesSupported;
	/*0154*/ ULONG uServiceInformationAdvertisementsMaxBytesSupported;
	/*0158*/ _DOT11_TRI_STATE P2PDeviceDiscoverySupported;
	/*015c*/ _DOT11_TRI_STATE P2PServiceNameDiscoverySupported;
	/*0160*/ _DOT11_TRI_STATE P2PServiceInformationDiscoverySupported;
	/*0164*/ _DOT11_TRI_STATE P2PBackgroundDiscoverySupported;
	/*0168*/ _DOT11_TRI_STATE D0_NLOSupported;
	/*016c*/ _DOT11_TRI_STATE Dx_StandbyNLOSupported;
	/*0170*/ _DOT11_TRI_STATE InstantConnectSupported;
	/*0174*/ _DOT11_TRI_STATE FIPSSupported;
	/*0178*/ _DOT11_TRI_STATE eCSASupported;
	/*017c*/ _DOT11_TRI_STATE FunctionalLevelResetRecoverySupported;
	/*0180*/ _DOT11_TRI_STATE PlatformLevelResetRecoverySupported;
	/*0184*/ _DOT11_TRI_STATE MACAddressRandomizationSupported;
	/*0188*/ UCHAR MACAddressRandomizationMask[0x6];
	/*0190*/ _DOT11_TRI_STATE IHVExtensibilityModuleConfigured;
	/*0194*/ _DOT11_BLUETOOTH_COEXISTENCE_SUPPORT BluetoothCoexistenceSupport;
	/*0198*/ _DOT11_TRI_STATE FastTransitionSupported;
	/*019c*/ _DOT11_TRI_STATE MU_MIMOSupported;
	/*01a0*/ _DOT11_TRI_STATE CannotSupportMiracastSink;
	/*01a4*/ _DOT11_TRI_STATE BSSTransitionSupported;
	/*01a8*/ _DOT11_TRI_STATE WLANBusLevelDeviceResetSupported;
	/*01ac*/ _DOT11_TRI_STATE IPDockingCapable;
	/*01b0*/ _DOT11_TRI_STATE ASP20ServiceNameDiscoverySupported;
	/*01b4*/ _DOT11_TRI_STATE ASP20ServiceInformationDiscoverySupported;
	/*01b8*/ _DOT11_TRI_STATE SAEAuthenticationSupported;
	/*01bc*/ _DOT11_TRI_STATE WPA3SuiteBSha384Supported;
	/*01c0*/ _DOT11_TRI_STATE HostWPA3FIPSModeEnabled;
	/*01c4*/ _DOT11_TRI_STATE FTMInitiatorSupported;
	/*01c8*/ _DOT11_TRI_STATE MBOSupported;
	/*01cc*/ _DOT11_TRI_STATE OWEAuthenticationSupported;
	/*01d0*/
};

struct _DOT11_ADAPTER_RESET_RECOVERY_INFO {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG ulFlags;
	/*0008*/
};

struct _DOT11_ADDITIONAL_IE {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uBeaconIEsOffset;
	/*0008*/ ULONG uBeaconIEsLength;
	/*000c*/ ULONG uResponseIEsOffset;
	/*0010*/ ULONG uResponseIEsLength;
	/*0014*/
};

struct _DOT11_ANQP_QUERY_COMPLETE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_ANQP_QUERY_RESULT Status;
	/*0008*/ void * hContext;
	/*0010*/ ULONG uResponseLength;
	/*0018*/
};

struct _DOT11_ANQP_QUERY_INFO {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0008*/ void * hContext;
	/*0010*/ UCHAR dot11BSSID[0x6];
	/*0018*/ ULONG uQueryFailureTimeoutMs;
	/*001c*/ USHORT uQueryLength;
	/*001e*/ UCHAR ucQueryBuffer[0x1];
	/*0020*/
};

enum _DOT11_ANQP_QUERY_RESULT {
	dot11_ANQP_query_result_success = 0x0,
	dot11_ANQP_query_result_failure = 0x1,
	dot11_ANQP_query_result_timed_out = 0x2,
	dot11_ANQP_query_result_resources = 0x3,
	dot11_ANQP_query_result_advertisement_protocol_not_supported_on_remote = 0x4,
	dot11_ANQP_query_result_gas_protocol_failure = 0x5,
	dot11_ANQP_query_result_advertisement_server_not_responding = 0x6,
	dot11_ANQP_query_result_access_issues = 0x7
};

struct _DOT11_AP_JOIN_REQUEST {
	/*0000*/ ULONG uJoinFailureTimeout;
	/*0004*/ _DOT11_RATE_SET OperationalRateSet;
	/*0088*/ ULONG uChCenterFrequency;
	/*0090*/ _DOT11_BSS_DESCRIPTION dot11BSSDescription;
	/*00c0*/
};

struct _DOT11_ASSOCIATION_INFO_EX {
	/*0000*/ UCHAR PeerMacAddress[0x6];
	/*0006*/ UCHAR BSSID[0x6];
	/*000c*/ USHORT usCapabilityInformation;
	/*000e*/ USHORT usListenInterval;
	/*0010*/ UCHAR ucPeerSupportedRates[0xff];
	/*0110*/ USHORT usAssociationID;
	/*0114*/ _DOT11_ASSOCIATION_STATE dot11AssociationState;
	/*0118*/ _DOT11_POWER_MODE dot11PowerMode;
	/*0120*/ _LARGE_INTEGER liAssociationUpTime;
	/*0128*/ ULONGLONG ullNumOfTxPacketSuccesses;
	/*0130*/ ULONGLONG ullNumOfTxPacketFailures;
	/*0138*/ ULONGLONG ullNumOfRxPacketSuccesses;
	/*0140*/ ULONGLONG ullNumOfRxPacketFailures;
	/*0148*/
};

enum _DOT11_ASSOCIATION_STATE {
	dot11_assoc_state_zero = 0x0,
	dot11_assoc_state_unauth_unassoc = 0x1,
	dot11_assoc_state_auth_unassoc = 0x2,
	dot11_assoc_state_auth_assoc = 0x3
};

enum _DOT11_ASSOCIATION_TYPE {
	DOT11_ASSOCIATION_TYPE_GENERAL = 0x0,
	DOT11_ASSOCIATION_TYPE_FT = 0x1,
	DOT11_ASSOCIATION_TYPE_PBSS_NOT_IN_DS = 0x2
};

enum _DOT11_AUTH_ALGORITHM {
	DOT11_AUTH_ALGO_80211_OPEN = 0x1,
	DOT11_AUTH_ALGO_80211_SHARED_KEY = 0x2,
	DOT11_AUTH_ALGO_WPA = 0x3,
	DOT11_AUTH_ALGO_WPA_PSK = 0x4,
	DOT11_AUTH_ALGO_WPA_NONE = 0x5,
	DOT11_AUTH_ALGO_RSNA = 0x6,
	DOT11_AUTH_ALGO_RSNA_PSK = 0x7,
	DOT11_AUTH_ALGO_WPA3 = 0x8,
	DOT11_AUTH_ALGO_WPA3_SAE = 0x9,
	DOT11_AUTH_ALGO_OWE = 0xa,
	DOT11_AUTH_ALGO_IHV_START = 0x80000000,
	DOT11_AUTH_ALGO_IHV_END = 0xffffffff
};

struct _DOT11_AVAILABLE_CHANNEL_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ ULONG uChannelNumber[0x1];
	/*0010*/
};

struct _DOT11_AVAILABLE_FREQUENCY_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ ULONG uFrequencyValue[0x1];
	/*0010*/
};

struct _DOT11_BAND_CAPABILITIES {
	/*0000*/ ULONG uTotalSize;
	/*0004*/ ULONG uBandCount;
	/*0008*/ _DOT11_BAND_DESCRIPTOR BandDescriptors[0x1];
	/*002c*/
};

struct _DOT11_BAND_DESCRIPTOR {
	/*0000*/ ULONG uBandID;
	/*0004*/ ULONG uBandCommonFrequency;
	/*0008*/ _DOT11_TRI_STATE BandStateActive;
	/*000c*/ ULONG uPhyTypeOffset;
	/*0010*/ ULONG uPhyTypeCount;
	/*0014*/ ULONG uChannelFrequenciesOffset;
	/*0018*/ ULONG uChannelFrequenciesCount;
	/*001c*/ ULONG uChannelWidthOffset;
	/*0020*/ ULONG uChannelWidthCount;
	/*0024*/
};

enum _DOT11_BAND_ID {
	DOT11_BAND_ID_UNKNOWN = 0x0,
	DOT11_BAND_ID_2400 = 0x1,
	DOT11_BAND_ID_5000 = 0x2,
	DOT11_BAND_ID_60000 = 0x3,
	DOT11_BAND_ID_900 = 0x4,
	DOT11_BAND_ID_IHV_CUSTOM_START = 0x80000000,
	DOT11_BAND_ID_IHV_CUSTOM_END = 0x81000000,
	DOT11_BAND_ID_ANY = 0xffffffff
};

enum _DOT11_BLUETOOTH_COEXISTENCE_SUPPORT {
	DOT11_BLUETOOTH_COEXISTENCE_UNKNOWN = 0x0,
	DOT11_BLUETOOTH_COEXISTENCE_PERFORMANCE_MAINTAINED = 0x1,
	DOT11_BLUETOOTH_COEXISTENCE_WIFI_DEGRADED_TO_1x1 = 0x2,
	DOT11_BLUETOOTH_COEXISTENCE_WIFI_THROUGHPUT_DEGRADED = 0x3,
	DOT11_BLUETOOTH_COEXISTENCE_MUTUALLY_EXCLUSIVE = 0x4,
	DOT11_BLUETOOTH_COEXISTENCE_MAX = 0x5
};

struct _DOT11_BSS_DESCRIPTION {
	/*0000*/ ULONG uReserved;
	/*0004*/ UCHAR dot11BSSID[0x6];
	/*000c*/ _DOT11_BSS_TYPE dot11BSSType;
	/*0010*/ USHORT usBeaconPeriod;
	/*0018*/ ULONGLONG ullTimestamp;
	/*0020*/ USHORT usCapabilityInformation;
	/*0024*/ ULONG uBufferLength;
	/*0028*/ UCHAR ucBuffer[0x1];
	/*0030*/
};

enum _DOT11_BSS_TYPE {
	dot11_BSS_type_infrastructure = 0x1,
	dot11_BSS_type_independent = 0x2,
	dot11_BSS_type_any = 0x3
};

struct _DOT11_CAN_SUSTAIN_AP_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG ulReason;
	/*0008*/
};

enum _DOT11_CIPHER_ALGORITHM {
	DOT11_CIPHER_ALGO_NONE = 0x0,
	DOT11_CIPHER_ALGO_WEP40 = 0x1,
	DOT11_CIPHER_ALGO_TKIP = 0x2,
	DOT11_CIPHER_ALGO_CCMP = 0x4,
	DOT11_CIPHER_ALGO_WEP104 = 0x5,
	DOT11_CIPHER_ALGO_BIP = 0x6,
	DOT11_CIPHER_ALGO_GCMP = 0x8,
	DOT11_CIPHER_ALGO_GCMP_256 = 0x9,
	DOT11_CIPHER_ALGO_CCMP_256 = 0xa,
	DOT11_CIPHER_ALGO_BIP_GMAC_128 = 0xb,
	DOT11_CIPHER_ALGO_BIP_GMAC_256 = 0xc,
	DOT11_CIPHER_ALGO_BIP_CMAC_256 = 0xd,
	DOT11_CIPHER_ALGO_WPA_USE_GROUP = 0x100,
	DOT11_CIPHER_ALGO_RSN_USE_GROUP = 0x100,
	DOT11_CIPHER_ALGO_WEP = 0x101,
	DOT11_CIPHER_ALGO_IHV_START = 0x80000000,
	DOT11_CIPHER_ALGO_IHV_END = 0xffffffff
};

struct _DOT11_CIPHER_KEY_INFO {
	/*0000*/ _DOT11_CIPHER_KEY_TYPE CipherKeyType;
	/*0004*/ _DOT11_CIPHER_ALGORITHM AlgorithmId;
	/*0008*/ UCHAR ReceiveSequenceCount[0x6];
	/*000e*/ USHORT usKeyBufferLength;
	/*0010*/ UCHAR ucKeyBuffer[0x20];
	/*0030*/
};

struct _DOT11_CIPHER_KEY_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uRsnReKeyProtocolId;
	/*0008*/ ULONGLONG KeyReplayCounter;
	/*0010*/ _DOT11_AUTH_ALGORITHM AuthAlgo;
	/*0014*/ ULONG KCKLength;
	/*0018*/ ULONG KEKLength;
	/*001c*/ UCHAR KCK[0x20];
	/*003c*/ UCHAR KEK[0x20];
	/*005c*/ ULONG uGTKKeyOffset;
	/*0060*/ ULONG uIGTKKeyOffset;
	/*0068*/
};

enum _DOT11_CIPHER_KEY_TYPE {
	DOT11_CIPHER_KEY_TYPE_PAIRWISE_KEY = 0x1,
	DOT11_CIPHER_KEY_TYPE_GROUP_KEY = 0x2,
	DOT11_CIPHER_KEY_TYPE_IGTK = 0x3
};

struct _DOT11_COUNTERS_ENTRY {
	/*0000*/ ULONG uTransmittedFragmentCount;
	/*0004*/ ULONG uMulticastTransmittedFrameCount;
	/*0008*/ ULONG uFailedCount;
	/*000c*/ ULONG uRetryCount;
	/*0010*/ ULONG uMultipleRetryCount;
	/*0014*/ ULONG uFrameDuplicateCount;
	/*0018*/ ULONG uRTSSuccessCount;
	/*001c*/ ULONG uRTSFailureCount;
	/*0020*/ ULONG uACKFailureCount;
	/*0024*/ ULONG uReceivedFragmentCount;
	/*0028*/ ULONG uMulticastReceivedFrameCount;
	/*002c*/ ULONG uFCSErrorCount;
	/*0030*/ ULONG uTransmittedFrameCount;
	/*0034*/
};

struct _DOT11_CURRENT_OFFLOAD_CAPABILITY {
	/*0000*/ ULONG uReserved;
	/*0004*/ ULONG uFlags;
	/*0008*/
};

struct _DOT11_CURRENT_OPERATION_MODE {
	/*0000*/ ULONG uReserved;
	/*0004*/ ULONG uCurrentOpMode;
	/*0008*/
};

struct _DOT11_CURRENT_OPTIONAL_CAPABILITY {
	/*0000*/ ULONG uReserved;
	/*0004*/ UCHAR bDot11CFPollable;
	/*0005*/ UCHAR bDot11PCF;
	/*0006*/ UCHAR bDot11PCFMPDUTransferToPC;
	/*0007*/ UCHAR bStrictlyOrderedServiceClass;
	/*0008*/
};

struct _DOT11_DATA_RATE_MAPPING_TABLE {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uDataRateMappingLength;
	/*0008*/ DOT11_DATA_RATE_MAPPING_ENTRY DataRateMappingEntries[0x7e];
	/*0200*/
};

struct _DOT11_DEFAULT_WEP_OFFLOAD {
	/*0000*/ ULONG uReserved;
	/*0008*/ void * hOffloadContext;
	/*0010*/ void * hOffload;
	/*0018*/ ULONG dwIndex;
	/*001c*/ _DOT11_OFFLOAD_TYPE dot11OffloadType;
	/*0020*/ ULONG dwAlgorithm;
	/*0024*/ ULONG uFlags;
	/*0028*/ _DOT11_KEY_DIRECTION dot11KeyDirection;
	/*002c*/ UCHAR ucMacAddress[0x6];
	/*0034*/ ULONG uNumOfRWsOnMe;
	/*0038*/ _DOT11_IV48_COUNTER dot11IV48Counters[0x10];
	/*00b8*/ USHORT usDot11RWBitMaps[0x10];
	/*00d8*/ USHORT usKeyLength;
	/*00da*/ UCHAR ucKey[0x1];
	/*00e0*/
};

struct _DOT11_DEFAULT_WEP_UPLOAD {
	/*0000*/ ULONG uReserved;
	/*0004*/ _DOT11_OFFLOAD_TYPE dot11OffloadType;
	/*0008*/ void * hOffload;
	/*0010*/ ULONG uNumOfRWsUsed;
	/*0014*/ _DOT11_IV48_COUNTER dot11IV48Counters[0x10];
	/*0094*/ USHORT usDot11RWBitMaps[0x10];
	/*00b8*/
};

struct _DOT11_DEVICE_SERVICE_INFO {
	/*0000*/ _GUID WlanDeviceService;
	/*0010*/ ULONG Opcode;
	/*0014*/
};

struct _DOT11_DEVICE_SERVICE_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ _GUID WlanDeviceServiceList[0x1];
	/*001c*/
};

struct _DOT11_DEVICE_SERVICE_PARAMS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_DEVICE_SERVICE_INFO DeviceServiceInfo;
	/*0018*/ ULONG uBlobSize;
	/*001c*/ ULONG uBlobOffset;
	/*0020*/
};

struct _DOT11_DISASSOCIATE_PEER_REQUEST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerMacAddr[0x6];
	/*000a*/ USHORT usReason;
	/*000c*/
};

struct _DOT11_DIVERSITY_SELECTION_RX {
	/*0000*/ ULONG uAntennaListIndex;
	/*0004*/ UCHAR bDiversitySelectionRX;
	/*0008*/
};

struct _DOT11_DIVERSITY_SELECTION_RX_LIST {
	/*0000*/ ULONG uNumOfEntries;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_DIVERSITY_SELECTION_RX dot11DiversitySelectionRx[0x1];
	/*0010*/
};

enum _DOT11_DIVERSITY_SUPPORT {
	dot11_diversity_support_unknown = 0x0,
	dot11_diversity_support_fixedlist = 0x1,
	dot11_diversity_support_notsupported = 0x2,
	dot11_diversity_support_dynamic = 0x3
};

struct _DOT11_END_DWELL_ON_CHANNEL {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/
};

struct _DOT11_EXTAP_ATTRIBUTES {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uScanSSIDListSize;
	/*0008*/ ULONG uDesiredSSIDListSize;
	/*000c*/ ULONG uPrivacyExemptionListSize;
	/*0010*/ ULONG uAssociationTableSize;
	/*0014*/ ULONG uDefaultKeyTableSize;
	/*0018*/ ULONG uWEPKeyValueMaxLength;
	/*001c*/ UCHAR bStrictlyOrderedServiceClassImplemented;
	/*0020*/ ULONG uNumSupportedCountryOrRegionStrings;
	/*0028*/ UCHAR (* pSupportedCountryOrRegionStrings)[0x3];
	/*0030*/ ULONG uInfraNumSupportedUcastAlgoPairs;
	/*0038*/ DOT11_AUTH_CIPHER_PAIR * pInfraSupportedUcastAlgoPairs;
	/*0040*/ ULONG uInfraNumSupportedMcastAlgoPairs;
	/*0048*/ DOT11_AUTH_CIPHER_PAIR * pInfraSupportedMcastAlgoPairs;
	/*0050*/
};

struct _DOT11_FRAGMENT_DESCRIPTOR {
	/*0000*/ ULONG uOffset;
	/*0004*/ ULONG uLength;
	/*0008*/
};

enum _DOT11_FTM_BANDWIDTH {
	DOT11_FTM_BANDWIDTH_UNKNOWN = 0x0,
	DOT11_FTM_BANDWIDTH_5 = 0x1,
	DOT11_FTM_BANDWIDTH_10 = 0x2,
	DOT11_FTM_BANDWIDTH_20 = 0x3,
	DOT11_FTM_BANDWIDTH_40 = 0x4,
	DOT11_FTM_BANDWIDTH_80 = 0x5,
	DOT11_FTM_BANDWIDTH_80_80 = 0x6,
	DOT11_FTM_BANDWIDTH_160 = 0x7,
	DOT11_FTM_BANDWIDTH_2160 = 0x8
};

enum _DOT11_FTM_PROPAGATION {
	DOT11_FTM_PROPAGATION_UNKNOWN = 0x0,
	DOT11_FTM_PROPAGATION_INDIRECT_PATH = 0x1,
	DOT11_FTM_PROPAGATION_LINE_OF_SIGHT = 0x2
};

enum _DOT11_FTM_REQUEST_RESULT {
	DOT11_FTM_REQUEST_RESULT_SUCCESS = 0x0,
	DOT11_FTM_REQUEST_RESULT_FAILED_UNREACHABLE = 0x1,
	DOT11_FTM_REQUEST_RESULT_FAILED_REJECTED = 0x2,
	DOT11_FTM_REQUEST_RESULT_FAILED_INCAPABLE = 0x3,
	DOT11_FTM_REQUEST_RESULT_FAILED_TIMEOUT = 0x4,
	DOT11_FTM_REQUEST_RESULT_FAILED_NOT_ATTEMPTED = 0x5,
	DOT11_FTM_REQUEST_RESULT_FAILED_ABORTED = 0x6,
	DOT11_FTM_REQUEST_RESULT_FAILED = 0x7,
	DOT11_FTM_REQUEST_RESULT_FAILED_NOT_IN_CACHE = 0x8,
	DOT11_FTM_REQUEST_RESULT_FAILED_UNHANDLED = 0x9
};

struct _DOT11_FTM_RESPONSE {
	/*0000*/ UCHAR dot11Bssid[0x6];
	/*0008*/ _DOT11_FTM_REQUEST_RESULT dot11FtmRequestResult;
	/*000c*/ USHORT uRetryAfter;
	/*000e*/ USHORT uNumberOfMeasurements;
	/*0010*/ LONG lRssi;
	/*0014*/ ULONG ulLinkQuality;
	/*0018*/ _DOT11_FTM_BANDWIDTH dot11FtmBandwidth;
	/*001c*/ LONG lRtt;
	/*0020*/ ULONGLONG ullRTTVariance;
	/*0028*/ _DOT11_FTM_PROPAGATION dot11FtmPropagation;
	/*002c*/ _DOT11_LCI_REQUEST_STATUS dot11LciRequestStatus;
	/*0030*/ UCHAR lciLatitudeUncertainty;
	/*0038*/ ULONGLONG lciLatitude;
	/*0040*/ UCHAR lciLongitudeUncertainty;
	/*0048*/ ULONGLONG lciLongitude;
	/*0050*/ UCHAR lciAltitudeType;
	/*0051*/ UCHAR lciAltitudeUncertainty;
	/*0054*/ UINT lciAltitude;
	/*0058*/ UCHAR lciDatum;
	/*005a*/ USHORT lciStaFloorInfo;
	/*005c*/ UINT lciStaHeightAboveFloor;
	/*0060*/ UCHAR lciStaHeightAboveFloorUncertainty;
	/*0068*/
};

struct _DOT11_FTM_RESPONSE_PARAMS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ INT Status;
	/*0008*/ ULONG uReference;
	/*000c*/ ULONG uBufferLength;
	/*0010*/ UCHAR ucBuffer[0x1];
	/*0014*/
};

struct _DOT11_FTM_TARGET {
	/*0000*/ UCHAR dot11Bssid[0x6];
	/*0006*/ UCHAR bRequestLCIReport;
	/*0008*/ ULONG ulChCenterFrequency;
	/*000c*/
};

struct _DOT11_FT_AUTHENTICATION_RESPONSE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR MacAddr[0x6];
	/*000a*/ UCHAR SNonce[0x20];
	/*002c*/ ULONG uAuthenticationReqOffset;
	/*0030*/ ULONG uAuthenticationReqSize;
	/*0034*/ ULONG uAuthenticationRespOffset;
	/*0038*/ ULONG uAuthenticationRespSize;
	/*003c*/
};

struct _DOT11_FT_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uStatus;
	/*0008*/ UCHAR pmkr0name[0x10];
	/*0018*/ ULONG uR0KHIDSize;
	/*001c*/ ULONG uR0KHIDOffset;
	/*0020*/
};

struct _DOT11_FT_REASSOCIATION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uStatus;
	/*0008*/ UCHAR pmkr0name[0x10];
	/*0018*/ ULONG uR0KHIDSize;
	/*001c*/ ULONG uR0KHIDOffset;
	/*0020*/ ULONG uRSNIESize;
	/*0024*/ ULONG uRSNIEOffset;
	/*0028*/ ULONG uMDDIESize;
	/*002c*/ ULONG uMDDIEOffset;
	/*0030*/ ULONG uFTEIESize;
	/*0034*/ ULONG uFTEIEOffset;
	/*0038*/
};

struct _DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*000c*/ INT Status;
	/*0010*/ ULONG uIEsOffset;
	/*0014*/ ULONG uIEsLength;
	/*0018*/
};

struct _DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*000c*/ INT Status;
	/*0010*/ ULONG uIEsOffset;
	/*0014*/ ULONG uIEsLength;
	/*0018*/
};

struct _DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*000c*/ INT Status;
	/*0010*/ ULONG uIEsOffset;
	/*0014*/ ULONG uIEsLength;
	/*0018*/
};

struct _DOT11_HESSID_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR AccessNetworkType;
	/*0008*/ ULONG HSIndicationElementLength;
	/*000c*/ ULONG HSIndicationElementOffset;
	/*0010*/ ULONG NumberOfHESSIDs;
	/*0014*/ UCHAR HESSIDs[0x1][0x6];
	/*001c*/
};

struct _DOT11_HOPPING_PATTERN_ENTRY {
	/*0000*/ ULONG uHoppingPatternIndex;
	/*0004*/ ULONG uRandomTableFieldNumber;
	/*0008*/
};

struct _DOT11_HOPPING_PATTERN_ENTRY_LIST {
	/*0000*/ ULONG uNumOfEntries;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_HOPPING_PATTERN_ENTRY dot11HoppingPatternEntry[0x1];
	/*0010*/
};

enum _DOT11_HOP_ALGO_ADOPTED {
	dot11_hop_algo_current = 0x0,
	dot11_hop_algo_hop_index = 0x1,
	dot11_hop_algo_hcc = 0x2
};

struct _DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerMacAddr[0x6];
	/*000c*/ ULONG uStatus;
	/*0010*/ UCHAR ucErrorSource;
	/*0011*/ UCHAR bReAssocReq;
	/*0012*/ UCHAR bReAssocResp;
	/*0014*/ ULONG uAssocReqOffset;
	/*0018*/ ULONG uAssocReqSize;
	/*001c*/ ULONG uAssocRespOffset;
	/*0020*/ ULONG uAssocRespSize;
	/*0024*/ _DOT11_AUTH_ALGORITHM AuthAlgo;
	/*0028*/ _DOT11_CIPHER_ALGORITHM UnicastCipher;
	/*002c*/ _DOT11_CIPHER_ALGORITHM MulticastCipher;
	/*0030*/ ULONG uActivePhyListOffset;
	/*0034*/ ULONG uActivePhyListSize;
	/*0038*/ ULONG uBeaconOffset;
	/*003c*/ ULONG uBeaconSize;
	/*0040*/
};

struct _DOT11_INCOMING_ASSOC_DECISION {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerMacAddr[0x6];
	/*000a*/ UCHAR bAccept;
	/*000c*/ USHORT usReasonCode;
	/*0010*/ ULONG uAssocResponseIEsOffset;
	/*0014*/ ULONG uAssocResponseIEsLength;
	/*0018*/
};

struct _DOT11_INCOMING_ASSOC_DECISION_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerMacAddr[0x6];
	/*000a*/ UCHAR bAccept;
	/*000c*/ USHORT usReasonCode;
	/*0010*/ ULONG uAssocResponseIEsOffset;
	/*0014*/ ULONG uAssocResponseIEsLength;
	/*0018*/ UCHAR WFDStatus;
	/*001c*/
};

struct _DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerMacAddr[0x6];
	/*000a*/ UCHAR bReAssocReq;
	/*000c*/ ULONG uAssocReqOffset;
	/*0010*/ ULONG uAssocReqSize;
	/*0014*/
};

struct _DOT11_INCOMING_ASSOC_STARTED_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerMacAddr[0x6];
	/*000a*/
};

struct _DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR ReceiverAddress[0x6];
	/*0010*/ UCHAR DialogToken;
	/*0014*/ INT Status;
	/*0018*/ ULONG uIEsOffset;
	/*001c*/ ULONG uIEsLength;
	/*0020*/
};

struct _DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR ReceiverDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*000c*/ INT Status;
	/*0010*/ ULONG uIEsOffset;
	/*0014*/ ULONG uIEsLength;
	/*0018*/
};

struct _DOT11_IPv4_ADDRESS {
	
	/*0000*/ <unnamed-type-S_un> S_un;
	/*0004*/
};

struct _DOT11_IPv6_ADDRESS {
	
	/*0000*/ <unnamed-type-u> u;
	/*0010*/
};

struct _DOT11_IV48_COUNTER {
	/*0000*/ ULONG uIV32Counter;
	/*0004*/ USHORT usIV16Counter;
	/*0008*/
};

struct _DOT11_JOIN_REQUEST {
	/*0000*/ ULONG uJoinFailureTimeout;
	/*0004*/ _DOT11_RATE_SET OperationalRateSet;
	/*0088*/ ULONG uChCenterFrequency;
	/*0090*/ _DOT11_BSS_DESCRIPTION dot11BSSDescription;
	/*00c0*/
};

enum _DOT11_KEY_DIRECTION {
	dot11_key_direction_both = 0x1,
	dot11_key_direction_inbound = 0x2,
	dot11_key_direction_outbound = 0x3
};

enum _DOT11_LCI_REQUEST_STATUS {
	DOT11_LCI_REQUEST_STATUS_NOT_AVAILABLE = 0x0,
	DOT11_LCI_REQUEST_STATUS_AVAILABLE = 0x1
};

struct _DOT11_LINK_DEGRADED_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/
};

struct _DOT11_LINK_IMPROVED_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/
};

struct _DOT11_MAC_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uOpmodeMask;
	/*0008*/
};

enum _DOT11_MAC_RANDOMIZATION_STATUS {
	DOT11_MAC_RANDOMIZATION_NOT_AVAILABLE = 0x1,
	DOT11_MAC_RANDOMIZATION_BLOCKED_BY_ADMIN = 0x2,
	DOT11_MAC_RANDOMIZATION_DISABLED = 0x3,
	DOT11_MAC_RANDOMIZATION_ENABLED = 0x4
};

enum _DOT11_MANUFACTURING_CALLBACK_TYPE {
	dot11_manufacturing_callback_unknown = 0x0,
	dot11_manufacturing_callback_self_test_complete = 0x1,
	dot11_manufacturing_callback_sleep_complete = 0x2,
	dot11_manufacturing_callback_IHV_start = 0x80000000,
	dot11_manufacturing_callback_IHV_end = 0xffffffff
};

struct _DOT11_MANUFACTURING_FUNCTIONAL_TEST_QUERY_ADC {
	/*0000*/ DOT11_BAND Dot11Band;
	/*0004*/ ULONG uChannel;
	/*0008*/ LONG ADCPowerLevel;
	/*000c*/
};

struct _DOT11_MANUFACTURING_FUNCTIONAL_TEST_RX {
	/*0000*/ UCHAR bEnabled;
	/*0004*/ DOT11_BAND Dot11Band;
	/*0008*/ ULONG uChannel;
	/*000c*/ LONG PowerLevel;
	/*0010*/
};

struct _DOT11_MANUFACTURING_FUNCTIONAL_TEST_TX {
	/*0000*/ UCHAR bEnable;
	/*0001*/ UCHAR bOpenLoop;
	/*0004*/ DOT11_BAND Dot11Band;
	/*0008*/ ULONG uChannel;
	/*000c*/ ULONG uSetPowerLevel;
	/*0010*/ LONG ADCPowerLevel;
	/*0014*/
};

struct _DOT11_MANUFACTURING_SELF_TEST_QUERY_RESULTS {
	/*0000*/ DOT11_MANUFACTURING_SELF_TEST_TYPE SelfTestType;
	/*0004*/ ULONG uTestID;
	/*0008*/ UCHAR bResult;
	/*000c*/ ULONG uPinFailedBitMask;
	/*0010*/ void * pvContext;
	/*0018*/ ULONG uBytesWrittenOut;
	/*001c*/ UCHAR ucBufferOut[0x1];
	/*0020*/
};

struct _DOT11_MANUFACTURING_SELF_TEST_SET_PARAMS {
	/*0000*/ DOT11_MANUFACTURING_SELF_TEST_TYPE SelfTestType;
	/*0004*/ ULONG uTestID;
	/*0008*/ ULONG uPinBitMask;
	/*0010*/ void * pvContext;
	/*0018*/ ULONG uBufferLength;
	/*001c*/ UCHAR ucBufferIn[0x1];
	/*0020*/
};

struct _DOT11_MANUFACTURING_TEST {
	/*0000*/ _DOT11_MANUFACTURING_TEST_TYPE dot11ManufacturingTestType;
	/*0004*/ ULONG uBufferLength;
	/*0008*/ UCHAR ucBuffer[0x1];
	/*000c*/
};

struct _DOT11_MANUFACTURING_TEST_QUERY_DATA {
	/*0000*/ ULONG uKey;
	/*0004*/ ULONG uOffset;
	/*0008*/ ULONG uBufferLength;
	/*000c*/ ULONG uBytesRead;
	/*0010*/ UCHAR ucBufferOut[0x1];
	/*0014*/
};

struct _DOT11_MANUFACTURING_TEST_SET_DATA {
	/*0000*/ ULONG uKey;
	/*0004*/ ULONG uOffset;
	/*0008*/ ULONG uBufferLength;
	/*000c*/ UCHAR ucBufferIn[0x1];
	/*0010*/
};

struct _DOT11_MANUFACTURING_TEST_SLEEP {
	/*0000*/ ULONG uSleepTime;
	/*0008*/ void * pvContext;
	/*0010*/
};

enum _DOT11_MANUFACTURING_TEST_TYPE {
	dot11_manufacturing_test_unknown = 0x0,
	dot11_manufacturing_test_self_start = 0x1,
	dot11_manufacturing_test_self_query_result = 0x2,
	dot11_manufacturing_test_rx = 0x3,
	dot11_manufacturing_test_tx = 0x4,
	dot11_manufacturing_test_query_adc = 0x5,
	dot11_manufacturing_test_set_data = 0x6,
	dot11_manufacturing_test_query_data = 0x7,
	dot11_manufacturing_test_sleep = 0x8,
	dot11_manufacturing_test_awake = 0x9,
	dot11_manufacturing_test_IHV_start = 0x80000000,
	dot11_manufacturing_test_IHV_end = 0xffffffff
};

struct _DOT11_MD_CAPABILITY_ENTRY_LIST {
	/*0000*/ ULONG uNumOfEntries;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY dot11MDCapabilityEntry[0x1];
	/*0018*/
};

struct _DOT11_MULTI_DOMAIN_CAPABILITY_ENTRY {
	/*0000*/ ULONG uMultiDomainCapabilityIndex;
	/*0004*/ ULONG uFirstChannelNumber;
	/*0008*/ ULONG uNumberOfChannels;
	/*000c*/ LONG lMaximumTransmitPowerLevel;
	/*0010*/
};

struct _DOT11_NETWORK {
	/*0000*/ _DOT11_SSID dot11Ssid;
	/*0024*/ _DOT11_BSS_TYPE dot11BssType;
	/*0028*/
};

struct _DOT11_NETWORK_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ ULONG dwIndex;
	/*0008*/ _DOT11_NETWORK Network[0x1];
	/*0030*/
};

struct _DOT11_NIC_SPECIFIC_EXTENSION {
	/*0000*/ ULONG uBufferLength;
	/*0004*/ ULONG uTotalBufferLength;
	/*0008*/ UCHAR ucBuffer[0x1];
	/*000c*/
};

struct _DOT11_OFFLOAD_CAPABILITY {
	/*0000*/ ULONG uReserved;
	/*0004*/ ULONG uFlags;
	/*0008*/ ULONG uSupportedWEPAlgorithms;
	/*000c*/ ULONG uNumOfReplayWindows;
	/*0010*/ ULONG uMaxWEPKeyMappingLength;
	/*0014*/ ULONG uSupportedAuthAlgorithms;
	/*0018*/ ULONG uMaxAuthKeyMappingLength;
	/*001c*/
};

struct _DOT11_OFFLOAD_NETWORK_LIST_INFO {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG ulFlags;
	/*0008*/ ULONG FastScanPeriod;
	/*000c*/ ULONG FastScanIterations;
	/*0010*/ ULONG SlowScanPeriod;
	/*0014*/ ULONG uNumOfEntries;
	/*0018*/ DOT11_OFFLOAD_NETWORK offloadNetworkList[0x1];
	/*0064*/
};

struct _DOT11_OFFLOAD_NETWORK_LIST_INFO_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG ulFlags;
	/*0008*/ ULONG FastScanPeriod;
	/*000c*/ ULONG FastScanIterations;
	/*0010*/ ULONG SlowScanPeriod;
	/*0014*/ ULONG uNumOfEntries;
	/*0018*/ _DOT11_OFFLOAD_NETWORK_V2 offloadNetworkList[0x1];
	/*0068*/
};

struct _DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ INT Status;
	/*0008*/
};

struct _DOT11_OFFLOAD_NETWORK_V2 {
	/*0000*/ _DOT11_SSID Ssid;
	/*0024*/ _DOT11_CIPHER_ALGORITHM UnicastCipher;
	/*0028*/ _DOT11_AUTH_ALGORITHM AuthAlgo;
	/*002c*/ DOT11_CHANNEL_HINT Dot11ChannelHints[0x4];
	/*004c*/ UCHAR bIsHidden;
	/*0050*/
};

enum _DOT11_OFFLOAD_TYPE {
	dot11_offload_type_wep = 0x1,
	dot11_offload_type_auth = 0x2
};

struct _DOT11_OI {
	/*0000*/ USHORT OILength;
	/*0002*/ UCHAR OI[0x5];
	/*0008*/
};

struct _DOT11_OPERATION_MODE_CAPABILITY {
	/*0000*/ ULONG uReserved;
	/*0004*/ ULONG uMajorVersion;
	/*0008*/ ULONG uMinorVersion;
	/*000c*/ ULONG uNumOfTXBuffers;
	/*0010*/ ULONG uNumOfRXBuffers;
	/*0014*/ ULONG uOpModeCapability;
	/*0018*/
};

struct _DOT11_OPTIONAL_CAPABILITY {
	/*0000*/ ULONG uReserved;
	/*0004*/ UCHAR bDot11PCF;
	/*0005*/ UCHAR bDot11PCFMPDUTransferToPC;
	/*0006*/ UCHAR bStrictlyOrderedServiceClass;
	/*0008*/
};

struct _DOT11_OWE_AUTH_PARAMS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ USHORT uGroupParam;
	/*0008*/ ULONG cbPublicKey;
	/*000c*/ UCHAR ucPublicKey[0x1];
	/*0010*/
};

enum _DOT11_P2P_CHANNEL_INDICATE_REASON {
	DOT11_P2P_CHANNEL_INDICATE_REASON_UNKNOWN = 0x0,
	DOT11_P2P_CHANNEL_INDICATE_REASON_NEW_CONNECTION = 0x1,
	DOT11_P2P_CHANNEL_INDICATE_REASON_ECSA_REQUESTED = 0x2,
	DOT11_P2P_CHANNEL_INDICATE_REASON_ECSA_GO_INITIATED = 0x3,
	DOT11_P2P_CHANNEL_INDICATE_REASON_MAX = 0xffffffff
};

struct _DOT11_PEER_INFO {
	/*0000*/ UCHAR MacAddress[0x6];
	/*0006*/ USHORT usCapabilityInformation;
	/*0008*/ _DOT11_AUTH_ALGORITHM AuthAlgo;
	/*000c*/ _DOT11_CIPHER_ALGORITHM UnicastCipherAlgo;
	/*0010*/ _DOT11_CIPHER_ALGORITHM MulticastCipherAlgo;
	/*0014*/ UCHAR bWpsEnabled;
	/*0016*/ USHORT usListenInterval;
	/*0018*/ UCHAR ucSupportedRates[0xff];
	/*0118*/ USHORT usAssociationID;
	/*011c*/ _DOT11_ASSOCIATION_STATE AssociationState;
	/*0120*/ _DOT11_POWER_MODE PowerMode;
	/*0128*/ _LARGE_INTEGER liAssociationUpTime;
	/*0130*/ _DOT11_PEER_STATISTICS Statistics;
	/*0160*/
};

struct _DOT11_PEER_INFO_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*0010*/ _DOT11_PEER_INFO PeerInfo[0x1];
	/*0170*/
};

struct _DOT11_PEER_STATISTICS {
	/*0000*/ ULONGLONG ullDecryptSuccessCount;
	/*0008*/ ULONGLONG ullDecryptFailureCount;
	/*0010*/ ULONGLONG ullTxPacketSuccessCount;
	/*0018*/ ULONGLONG ullTxPacketFailureCount;
	/*0020*/ ULONGLONG ullRxPacketSuccessCount;
	/*0028*/ ULONGLONG ullRxPacketFailureCount;
	/*0030*/
};

struct _DOT11_PER_MSDU_COUNTERS {
	/*0000*/ ULONG uTransmittedFragmentCount;
	/*0004*/ ULONG uRetryCount;
	/*0008*/ ULONG uRTSSuccessCount;
	/*000c*/ ULONG uRTSFailureCount;
	/*0010*/ ULONG uACKFailureCount;
	/*0014*/
};

struct _DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG ulPhyId;
	/*0008*/ ULONG ulChannel;
	/*0008*/ ULONG ulFrequency;
	/*000c*/
};

enum _DOT11_PHY_TYPE {
	dot11_phy_type_unknown = 0x0,
	dot11_phy_type_any = 0x0,
	dot11_phy_type_fhss = 0x1,
	dot11_phy_type_dsss = 0x2,
	dot11_phy_type_irbaseband = 0x3,
	dot11_phy_type_ofdm = 0x4,
	dot11_phy_type_hrdsss = 0x5,
	dot11_phy_type_erp = 0x6,
	dot11_phy_type_ht = 0x7,
	dot11_phy_type_vht = 0x8,
	dot11_phy_type_dmg = 0x9,
	dot11_phy_type_he = 0xa,
	dot11_phy_type_IHV_start = 0x80000000,
	dot11_phy_type_IHV_end = 0xffffffff
};

struct _DOT11_PHY_TYPE_INFO {
	/*0000*/ _DOT11_PHY_TYPE dot11PhyType;
	/*0004*/ UCHAR bUseParameters;
	/*0008*/ ULONG uProbeDelay;
	/*000c*/ ULONG uMinChannelTime;
	/*0010*/ ULONG uMaxChannelTime;
	/*0014*/ _CH_DESCRIPTION_TYPE ChDescriptionType;
	/*0018*/ ULONG uChannelListSize;
	/*001c*/ UCHAR ucChannelListBuffer[0x1];
	/*0020*/
};

struct _DOT11_POWER_MGMT_AUTO_MODE_ENABLED_INFO {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR bEnabled;
	/*0006*/
};

struct _DOT11_POWER_MGMT_MODE {
	/*0000*/ _DOT11_POWER_MODE dot11PowerMode;
	/*0004*/ ULONG uPowerSaveLevel;
	/*0008*/ USHORT usListenInterval;
	/*000a*/ USHORT usAID;
	/*000c*/ UCHAR bReceiveDTIMs;
	/*0010*/
};

struct _DOT11_POWER_MGMT_MODE_STATUS_INFO {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_POWER_MODE PowerSaveMode;
	/*0008*/ ULONG uPowerSaveLevel;
	/*000c*/ _DOT11_POWER_MODE_REASON Reason;
	/*0010*/
};

enum _DOT11_POWER_MODE {
	dot11_power_mode_unknown = 0x0,
	dot11_power_mode_active = 0x1,
	dot11_power_mode_powersave = 0x2
};

enum _DOT11_POWER_MODE_REASON {
	dot11_power_mode_reason_no_change = 0x0,
	dot11_power_mode_reason_noncompliant_AP = 0x1,
	dot11_power_mode_reason_legacy_WFD_device = 0x2,
	dot11_power_mode_reason_compliant_AP = 0x3,
	dot11_power_mode_reason_compliant_WFD_device = 0x4,
	dot11_power_mode_reason_others = 0x5
};

struct _DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR ReceiverAddress[0x6];
	/*0010*/ UCHAR DialogToken;
	/*0014*/ INT Status;
	/*0018*/ ULONG uIEsOffset;
	/*001c*/ ULONG uIEsLength;
	/*0020*/
};

struct _DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR ReceiverDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*000c*/ INT Status;
	/*0010*/ ULONG uIEsOffset;
	/*0014*/ ULONG uIEsLength;
	/*0018*/
};

struct _DOT11_QOS_TX_DURATION {
	/*0000*/ ULONG uNominalMSDUSize;
	/*0004*/ ULONG uMinPHYRate;
	/*0008*/ ULONG uDuration;
	/*000c*/
};

struct _DOT11_QOS_TX_MEDIUM_TIME {
	/*0000*/ UCHAR dot11PeerAddress[0x6];
	/*0006*/ UCHAR ucQoSPriority;
	/*0008*/ ULONG uMediumTimeAdmited;
	/*000c*/
};

enum _DOT11_RADIO_STATE {
	dot11_radio_state_unknown = 0x0,
	dot11_radio_state_on = 0x1,
	dot11_radio_state_off = 0x2
};

struct _DOT11_RATE_SET {
	/*0000*/ ULONG uRateSetLength;
	/*0004*/ UCHAR ucRateSet[0x7e];
	/*0084*/
};

struct _DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*000c*/ ULONG uIEsOffset;
	/*0010*/ ULONG uIEsLength;
	/*0014*/
};

struct _DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*0010*/ void * RequestContext;
	/*0018*/ ULONG uIEsOffset;
	/*001c*/ ULONG uIEsLength;
	/*0020*/
};

struct _DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*0010*/ void * ResponseContext;
	/*0018*/ ULONG uIEsOffset;
	/*001c*/ ULONG uIEsLength;
	/*0020*/
};

struct _DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR TransmitterDeviceAddress[0x6];
	/*000a*/ UCHAR BSSID[0x6];
	/*0010*/ UCHAR DialogToken;
	/*0018*/ void * RequestContext;
	/*0020*/ ULONG uIEsOffset;
	/*0024*/ ULONG uIEsLength;
	/*0028*/
};

struct _DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR TransmitterDeviceAddress[0x6];
	/*000a*/ UCHAR BSSID[0x6];
	/*0010*/ UCHAR DialogToken;
	/*0014*/ ULONG uIEsOffset;
	/*0018*/ ULONG uIEsLength;
	/*001c*/
};

struct _DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR TransmitterDeviceAddress[0x6];
	/*000a*/ UCHAR BSSID[0x6];
	/*0010*/ UCHAR DialogToken;
	/*0018*/ void * RequestContext;
	/*0020*/ ULONG uIEsOffset;
	/*0024*/ ULONG uIEsLength;
	/*0028*/
};

struct _DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR TransmitterDeviceAddress[0x6];
	/*000a*/ UCHAR BSSID[0x6];
	/*0010*/ UCHAR DialogToken;
	/*0014*/ ULONG uIEsOffset;
	/*0018*/ ULONG uIEsLength;
	/*001c*/
};

struct _DOT11_RECV_EXTENSION_INFO {
	/*0000*/ ULONG uVersion;
	/*0008*/ void * pvReserved;
	/*0010*/ _DOT11_PHY_TYPE dot11PhyType;
	/*0014*/ ULONG uChCenterFrequency;
	/*0018*/ LONG lRSSI;
	/*001c*/ LONG lRSSIMin;
	/*0020*/ LONG lRSSIMax;
	/*0024*/ ULONG uRSSI;
	/*0028*/ UCHAR ucPriority;
	/*0029*/ UCHAR ucDataRate;
	/*002a*/ UCHAR ucPeerMacAddress[0x6];
	/*0030*/ ULONG dwExtendedStatus;
	/*0038*/ void * hWEPOffloadContext;
	/*0040*/ void * hAuthOffloadContext;
	/*0048*/ USHORT usWEPAppliedMask;
	/*004a*/ USHORT usWPAMSDUPriority;
	/*004c*/ _DOT11_IV48_COUNTER dot11LowestIV48Counter;
	/*0054*/ USHORT usDot11LeftRWBitMap;
	/*0058*/ _DOT11_IV48_COUNTER dot11HighestIV48Counter;
	/*0060*/ USHORT usDot11RightRWBitMap;
	/*0062*/ USHORT usNumberOfMPDUsReceived;
	/*0064*/ USHORT usNumberOfFragments;
	/*0068*/ void * pNdisPackets[0x1];
	/*0070*/
};

struct _DOT11_RECV_EXTENSION_INFO_V2 {
	/*0000*/ ULONG uVersion;
	/*0008*/ void * pvReserved;
	/*0010*/ _DOT11_PHY_TYPE dot11PhyType;
	/*0014*/ ULONG uChCenterFrequency;
	/*0018*/ LONG lRSSI;
	/*001c*/ ULONG uRSSI;
	/*0020*/ UCHAR ucPriority;
	/*0021*/ UCHAR ucDataRate;
	/*0022*/ UCHAR ucPeerMacAddress[0x6];
	/*0028*/ ULONG dwExtendedStatus;
	/*0030*/ void * hWEPOffloadContext;
	/*0038*/ void * hAuthOffloadContext;
	/*0040*/ USHORT usWEPAppliedMask;
	/*0042*/ USHORT usWPAMSDUPriority;
	/*0044*/ _DOT11_IV48_COUNTER dot11LowestIV48Counter;
	/*004c*/ USHORT usDot11LeftRWBitMap;
	/*0050*/ _DOT11_IV48_COUNTER dot11HighestIV48Counter;
	/*0058*/ USHORT usDot11RightRWBitMap;
	/*005a*/ USHORT usNumberOfMPDUsReceived;
	/*005c*/ USHORT usNumberOfFragments;
	/*0060*/ void * pNdisPackets[0x1];
	/*0068*/
};

struct _DOT11_RECV_SENSITIVITY {
	/*0000*/ UCHAR ucDataRate;
	/*0004*/ LONG lRSSIMin;
	/*0008*/ LONG lRSSIMax;
	/*000c*/
};

struct _DOT11_RECV_SENSITIVITY_LIST {
	/*0000*/ _DOT11_PHY_TYPE dot11PhyType;
	/*0000*/ ULONG uPhyId;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ _DOT11_RECV_SENSITIVITY dot11RecvSensitivity[0x1];
	/*0018*/
};

struct _DOT11_REG_DOMAINS_SUPPORT_VALUE {
	/*0000*/ ULONG uNumOfEntries;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_REG_DOMAIN_VALUE dot11RegDomainValue[0x1];
	/*0010*/
};

struct _DOT11_REG_DOMAIN_VALUE {
	/*0000*/ ULONG uRegDomainsSupportIndex;
	/*0004*/ ULONG uRegDomainsSupportValue;
	/*0008*/
};

struct _DOT11_REQUEST_FTM_PARAMS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uReference;
	/*0008*/ ULONG uBufferLength;
	/*000c*/ UCHAR ucBuffer[0x1];
	/*0010*/
};

struct _DOT11_RESET_REQUEST {
	/*0000*/ _DOT11_RESET_TYPE dot11ResetType;
	/*0004*/ UCHAR dot11MacAddress[0x6];
	/*000a*/ UCHAR bSetDefaultMIB;
	/*000c*/
};

enum _DOT11_RESET_TYPE {
	dot11_reset_type_phy = 0x1,
	dot11_reset_type_mac = 0x2,
	dot11_reset_type_phy_and_mac = 0x3
};

struct _DOT11_ROAMING_ATTEMPTS_EXHAUSTED_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/
};

struct _DOT11_ROAM_REQUEST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_ROAM_REQUEST_REASON RoamReason;
	/*0008*/
};

enum _DOT11_ROAM_REQUEST_REASON {
	DOT11_ROAM_REQUEST_REASON_LIMITED_CONNECTIVITY = 0x1,
	DOT11_ROAM_REQUEST_REASON_GATEWAY_UNREACHABLE = 0x2
};

struct _DOT11_RSSI_RANGE {
	/*0000*/ _DOT11_PHY_TYPE dot11PhyType;
	/*0004*/ ULONG uRSSIMin;
	/*0008*/ ULONG uRSSIMax;
	/*000c*/
};

struct _DOT11_SAE_AUTH_PARAMS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uSaeConnectionId;
	/*0008*/ UCHAR MacAddr[0x6];
	/*0010*/ _DOT11_SAE_STATUS SAEStatus;
	/*0014*/ ULONG uCommitFrameOffset;
	/*0018*/ ULONG uCommitFrameSize;
	/*001c*/ ULONG uConfirmFrameOffset;
	/*0020*/ ULONG uConfirmFrameSize;
	/*0024*/
};

struct _DOT11_SAE_AUTH_PARAMS_NEEDED {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uSaeConnectionId;
	/*0008*/ UCHAR MacAddr[0x6];
	/*0010*/ _DOT11_SAE_STATUS SAEStatus;
	/*0014*/ ULONG uCommitFrameOffset;
	/*0018*/ ULONG uCommitFrameSize;
	/*001c*/ ULONG uConfirmFrameOffset;
	/*0020*/ ULONG uConfirmFrameSize;
	/*0024*/
};

struct _DOT11_SAE_COMMIT_FRAME_PARAMS {
	/*0000*/ USHORT usFiniteCyclicGroup;
	/*0004*/ ULONG uScalarOffset;
	/*0008*/ ULONG uScalarSize;
	/*000c*/ ULONG uElementOffset;
	/*0010*/ ULONG uElementSize;
	/*0014*/ ULONG uAntiCloggingTokenOffset;
	/*0018*/ ULONG uAntiCloggingTokenSize;
	/*001c*/
};

struct _DOT11_SAE_CONFIRM_FRAME_PARAMS {
	/*0000*/ USHORT usSendConfirm;
	/*0004*/ ULONG uConfirmOffset;
	/*0008*/ ULONG uConfirmSize;
	/*000c*/
};

enum _DOT11_SAE_STATUS {
	DOT11_SAE_STATUS_SUCCESS = 0x0,
	DOT11_SAE_STATUS_FAILURE = 0x1,
	DOT11_SAE_STATUS_RESOURCES = 0x2,
	DOT11_SAE_STATUS_INTERNAL_AUTH_FAILURE = 0x3,
	DOT11_SAE_STATUS_INVALID_PEER = 0x4,
	DOT11_SAE_STATUS_INITIALIZATION_NO_KEY = 0x5,
	DOT11_SAE_STATUS_COMMIT_MESSAGE_RECEIVED_IN_NOTHING_STATE = 0xa,
	DOT11_SAE_STATUS_COMMIT_MESSAGE_MALFORMED_AUTH_FRAME = 0xb,
	DOT11_SAE_STATUS_COMMIT_MESSAGE_FAILURE_FROM_PEER = 0xc,
	DOT11_SAE_STATUS_COMMIT_MESSAGE_FINITE_GROUP_NOT_PRESENT = 0xd,
	DOT11_SAE_STATUS_COMMIT_MESSAGE_UNSUPPORTED_FINITE_GROUP = 0xe,
	DOT11_SAE_STATUS_COMMIT_MESSAGE_ANTICLOGGING_TOKEN_REQUIRED_BUT_NO_TOKEN = 0xf,
	DOT11_SAE_STATUS_COMMIT_MESSAGE_INVALID_SCALAR_ELEMENT_SIZE = 0x10,
	DOT11_SAE_STATUS_COMMIT_MESSAGE_REFLECTION_ATTACK_DETECTED = 0x11,
	DOT11_SAE_STATUS_COMMIT_MESSAGE_INTERNAL_COMPUTATION_ERROR = 0x12,
	DOT11_SAE_STATUS_CONFIRM_MESSAGE_RECEIVED_IN_INVALID_STATE = 0x1e,
	DOT11_SAE_STATUS_CONFIRM_MESSAGE_MALFORMED_AUTH_FRAME = 0x1f,
	DOT11_SAE_STATUS_CONFIRM_MESSAGE_FAILURE_FROM_PEER = 0x20,
	DOT11_SAE_STATUS_CONFIRM_MESSAGE_BSS_TRANSITION_REQUESTED = 0x21,
	DOT11_SAE_STATUS_CONFIRM_MESSAGE_INTERNAL_COMPUTATION_ERROR = 0x22,
	DOT11_SAE_STATUS_CONFIRM_MESSAGE_VERIFICATION_FAILED = 0x23,
	DOT11_SAE_STATUS_CONFIRM_MESSAGE_RESEND_REQUEST = 0x32
};

struct _DOT11_SCAN_REQUEST {
	/*0000*/ _DOT11_BSS_TYPE dot11BSSType;
	/*0004*/ UCHAR dot11BSSID[0x6];
	/*000c*/ _DOT11_SSID dot11SSID;
	/*0030*/ _DOT11_SCAN_TYPE dot11ScanType;
	/*0034*/ UCHAR bRestrictedScan;
	/*0035*/ UCHAR bUseRequestIE;
	/*0038*/ ULONG uRequestIDsOffset;
	/*003c*/ ULONG uNumOfRequestIDs;
	/*0040*/ ULONG uPhyTypesOffset;
	/*0044*/ ULONG uNumOfPhyTypes;
	/*0048*/ ULONG uIEsOffset;
	/*004c*/ ULONG uIEsLength;
	/*0050*/ UCHAR ucBuffer[0x1];
	/*0054*/
};

struct _DOT11_SCAN_REQUEST_V2 {
	/*0000*/ _DOT11_BSS_TYPE dot11BSSType;
	/*0004*/ UCHAR dot11BSSID[0x6];
	/*000c*/ _DOT11_SCAN_TYPE dot11ScanType;
	/*0010*/ UCHAR bRestrictedScan;
	/*0014*/ ULONG udot11SSIDsOffset;
	/*0018*/ ULONG uNumOfdot11SSIDs;
	/*001c*/ UCHAR bUseRequestIE;
	/*0020*/ ULONG uRequestIDsOffset;
	/*0024*/ ULONG uNumOfRequestIDs;
	/*0028*/ ULONG uPhyTypeInfosOffset;
	/*002c*/ ULONG uNumOfPhyTypeInfos;
	/*0030*/ ULONG uIEsOffset;
	/*0034*/ ULONG uIEsLength;
	/*0038*/ UCHAR ucBuffer[0x1];
	/*003c*/
};

enum _DOT11_SCAN_TYPE {
	dot11_scan_type_active = 0x1,
	dot11_scan_type_passive = 0x2,
	dot11_scan_type_auto = 0x3,
	dot11_scan_type_forced = 0x80000000
};

struct _DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*0010*/ void * ResponseContext;
	/*0018*/ ULONG uSendTimeout;
	/*001c*/ UCHAR Status;
	/*001d*/ UCHAR GroupCapability;
	/*0020*/ _DOT11_WFD_GROUP_ID GroupID;
	/*004c*/ UCHAR bUseGroupID;
	/*0050*/ ULONG uIEsOffset;
	/*0054*/ ULONG uIEsLength;
	/*0058*/
};

struct _DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*0010*/ void * ResponseContext;
	/*0018*/ ULONG uSendTimeout;
	/*001c*/ UCHAR Status;
	/*001d*/ UCHAR GroupCapability;
	/*0020*/ _DOT11_WFD_GROUP_ID GroupID;
	/*004c*/ UCHAR bUseGroupID;
	/*0050*/ ULONG uIEsOffset;
	/*0054*/ ULONG uIEsLength;
	/*0058*/ _DOT11_WFD_CHANNEL RemoteListenChannel;
	/*005d*/ UCHAR bUseSpecifiedRemoteListenChannel;
	/*0060*/
};

struct _DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*000c*/ ULONG uSendTimeout;
	/*0010*/ _DOT11_WFD_GO_INTENT GroupOwnerIntent;
	/*0011*/ _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
	/*0013*/ UCHAR IntendedInterfaceAddress[0x6];
	/*0019*/ UCHAR GroupCapability;
	/*001c*/ ULONG uIEsOffset;
	/*0020*/ ULONG uIEsLength;
	/*0024*/
};

struct _DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*000c*/ ULONG uSendTimeout;
	/*0010*/ _DOT11_WFD_GO_INTENT GroupOwnerIntent;
	/*0011*/ _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
	/*0013*/ UCHAR IntendedInterfaceAddress[0x6];
	/*0019*/ UCHAR GroupCapability;
	/*001c*/ ULONG uIEsOffset;
	/*0020*/ ULONG uIEsLength;
	/*0024*/ _DOT11_WFD_CHANNEL RemoteListenChannel;
	/*0029*/ UCHAR bUseSpecifiedRemoteListenChannel;
	/*002c*/
};

struct _DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR PeerDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*0010*/ void * RequestContext;
	/*0018*/ ULONG uSendTimeout;
	/*001c*/ UCHAR Status;
	/*001d*/ _DOT11_WFD_GO_INTENT GroupOwnerIntent;
	/*001e*/ _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
	/*0020*/ UCHAR IntendedInterfaceAddress[0x6];
	/*0026*/ UCHAR GroupCapability;
	/*0028*/ _DOT11_WFD_GROUP_ID GroupID;
	/*0054*/ UCHAR bUseGroupID;
	/*0058*/ ULONG uIEsOffset;
	/*005c*/ ULONG uIEsLength;
	/*0060*/
};

struct _DOT11_SEND_INVITATION_REQUEST_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR DialogToken;
	/*0005*/ UCHAR PeerDeviceAddress[0x6];
	/*000c*/ ULONG uSendTimeout;
	/*0010*/ _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
	/*0012*/ _DOT11_WFD_INVITATION_FLAGS InvitationFlags;
	/*0013*/ UCHAR GroupBSSID[0x6];
	/*0019*/ UCHAR bUseGroupBSSID;
	/*001a*/ _DOT11_WFD_CHANNEL OperatingChannel;
	/*001f*/ UCHAR bUseSpecifiedOperatingChannel;
	/*0020*/ _DOT11_WFD_GROUP_ID GroupID;
	/*004c*/ UCHAR bLocalGO;
	/*0050*/ ULONG uIEsOffset;
	/*0054*/ ULONG uIEsLength;
	/*0058*/
};

struct _DOT11_SEND_INVITATION_RESPONSE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR ReceiverDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*0010*/ void * RequestContext;
	/*0018*/ ULONG uSendTimeout;
	/*001c*/ UCHAR Status;
	/*001d*/ _DOT11_WFD_CONFIGURATION_TIMEOUT MinimumConfigTimeout;
	/*001f*/ UCHAR GroupBSSID[0x6];
	/*0025*/ UCHAR bUseGroupBSSID;
	/*0026*/ _DOT11_WFD_CHANNEL OperatingChannel;
	/*002b*/ UCHAR bUseSpecifiedOperatingChannel;
	/*002c*/ ULONG uIEsOffset;
	/*0030*/ ULONG uIEsLength;
	/*0038*/
};

struct _DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR DialogToken;
	/*0005*/ UCHAR PeerDeviceAddress[0x6];
	/*000c*/ ULONG uSendTimeout;
	/*0010*/ UCHAR GroupCapability;
	/*0014*/ _DOT11_WFD_GROUP_ID GroupID;
	/*0040*/ UCHAR bUseGroupID;
	/*0044*/ ULONG uIEsOffset;
	/*0048*/ ULONG uIEsLength;
	/*004c*/
};

struct _DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR DialogToken;
	/*0005*/ UCHAR PeerDeviceAddress[0x6];
	/*000c*/ ULONG uSendTimeout;
	/*0010*/ UCHAR GroupCapability;
	/*0014*/ _DOT11_WFD_GROUP_ID GroupID;
	/*0040*/ UCHAR bUseGroupID;
	/*0044*/ ULONG uIEsOffset;
	/*0048*/ ULONG uIEsLength;
	/*004c*/ UCHAR bEncodeServiceAttributes;
	/*004d*/ UCHAR Status;
	/*004e*/ UCHAR IntendedInterfaceAddress[0x6];
	/*0054*/ UCHAR bUsePersistentGroup;
	/*0058*/ _DOT11_WFD_GROUP_ID PersistentGroupID;
	/*0084*/ UCHAR ConnectionCapability;
	/*0085*/ UCHAR ResponseConnectionCapability;
	/*0086*/ USHORT FeatureCapability;
	/*0088*/ _DOT11_WFD_ADVERTISEMENT_ID AdvertisementID;
	/*0094*/ _DOT11_WFD_SESSION_ID SessionID;
	/*00a0*/ _DOT11_WFD_CONFIGURATION_TIMEOUT ConfigurationTimeout;
	/*00a2*/ _DOT11_WFD_SESSION_INFO ServiceSessionInfo;
	/*0134*/ UCHAR bFollowOnProvisionDiscovery;
	/*0135*/ _DOT11_WFD_CHANNEL ListenChannel;
	/*013a*/ UCHAR bUseSpecifiedListenChannel;
	/*013c*/
};

struct _DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR ReceiverDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*0010*/ void * RequestContext;
	/*0018*/ ULONG uSendTimeout;
	/*001c*/ ULONG uIEsOffset;
	/*0020*/ ULONG uIEsLength;
	/*0028*/
};

struct _DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR ReceiverDeviceAddress[0x6];
	/*000a*/ UCHAR DialogToken;
	/*0010*/ void * RequestContext;
	/*0018*/ ULONG uSendTimeout;
	/*001c*/ ULONG uIEsOffset;
	/*0020*/ ULONG uIEsLength;
	/*0024*/ UCHAR bEncodeServiceAttributes;
	/*0025*/ UCHAR Status;
	/*0026*/ UCHAR IntendedInterfaceAddress[0x6];
	/*002c*/ UCHAR bUsePersistentGroup;
	/*0030*/ _DOT11_WFD_GROUP_ID PersistentGroupID;
	/*005c*/ UCHAR ConnectionCapability;
	/*005e*/ USHORT FeatureCapability;
	/*0060*/ _DOT11_WFD_ADVERTISEMENT_ID AdvertisementID;
	/*006c*/ _DOT11_WFD_SESSION_ID SessionID;
	/*0078*/ _DOT11_WFD_CONFIGURATION_TIMEOUT ConfigurationTimeout;
	/*007a*/ _DOT11_WFD_SESSION_INFO ServiceSessionInfo;
	/*010c*/ UCHAR bFollowOnProvisionDiscovery;
	/*010d*/ UCHAR bUseGroupID;
	/*0110*/ _DOT11_WFD_GROUP_ID GroupID;
	/*013c*/ UCHAR GroupCapability;
	/*0140*/
};

struct _DOT11_SET_NAPS_DELAY {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG DelayTimeMs;
	/*0008*/
};

struct _DOT11_SSID {
	/*0000*/ ULONG uSSIDLength;
	/*0004*/ UCHAR ucSSID[0x20];
	/*0024*/
};

struct _DOT11_START_REQUEST {
	/*0000*/ ULONG uStartFailureTimeout;
	/*0004*/ _DOT11_RATE_SET OperationalRateSet;
	/*0088*/ ULONG uChCenterFrequency;
	/*0090*/ _DOT11_BSS_DESCRIPTION dot11BSSDescription;
	/*00c0*/
};

struct _DOT11_STATUS_INDICATION {
	/*0000*/ ULONG uStatusType;
	/*0004*/ INT ndisStatus;
	/*0008*/
};

struct _DOT11_STOP_AP_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG ulReason;
	/*0008*/
};

struct _DOT11_SUPPORTED_ANTENNA {
	/*0000*/ ULONG uAntennaListIndex;
	/*0004*/ UCHAR bSupportedAntenna;
	/*0008*/
};

struct _DOT11_SUPPORTED_ANTENNA_LIST {
	/*0000*/ ULONG uNumOfEntries;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_SUPPORTED_ANTENNA dot11SupportedAntenna[0x1];
	/*0010*/
};

struct _DOT11_SUPPORTED_DATA_RATES_VALUE {
	/*0000*/ UCHAR ucSupportedTxDataRatesValue[0x8];
	/*0008*/ UCHAR ucSupportedRxDataRatesValue[0x8];
	/*0010*/
};

struct _DOT11_SUPPORTED_DATA_RATES_VALUE_V2 {
	/*0000*/ UCHAR ucSupportedTxDataRatesValue[0xff];
	/*00ff*/ UCHAR ucSupportedRxDataRatesValue[0xff];
	/*01fe*/
};

struct _DOT11_SUPPORTED_DSSS_CHANNEL {
	/*0000*/ ULONG uChannel;
	/*0004*/
};

struct _DOT11_SUPPORTED_DSSS_CHANNEL_LIST {
	/*0000*/ ULONG uNumOfEntries;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_SUPPORTED_DSSS_CHANNEL dot11SupportedDSSSChannel[0x1];
	/*000c*/
};

struct _DOT11_SUPPORTED_OFDM_FREQUENCY {
	/*0000*/ ULONG uCenterFrequency;
	/*0004*/
};

struct _DOT11_SUPPORTED_OFDM_FREQUENCY_LIST {
	/*0000*/ ULONG uNumOfEntries;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_SUPPORTED_OFDM_FREQUENCY dot11SupportedOFDMFrequency[0x1];
	/*000c*/
};

struct _DOT11_SUPPORTED_PHY_TYPES {
	/*0000*/ ULONG uNumOfEntries;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_PHY_TYPE dot11PHYType[0x1];
	/*000c*/
};

struct _DOT11_SUPPORTED_POWER_LEVELS {
	/*0000*/ ULONG uNumOfSupportedPowerLevels;
	/*0004*/ ULONG uTxPowerLevelValues[0x8];
	/*0024*/
};

struct _DOT11_SYSTEM_CAPABILITIES {
	/*0000*/ ULONG NumAntennaConnected;
	/*0004*/ _DOT11_BLUETOOTH_COEXISTENCE_SUPPORT CoexistenceSupport;
	/*0008*/ ULONG SimultaneousMultiChannelSupported;
	/*000c*/ ULONG WLANFunctionLevelDeviceResetSupported;
	/*0010*/ ULONG WLANPlatformLevelDeviceResetSupported;
	/*0014*/ ULONG WLAN11adPairingMode;
	/*0018*/
};

struct _DOT11_TCP_OFFLOAD_VIRTUAL_PORT_CONFIG {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _NDIS_OFFLOAD PortOffload;
	/*0074*/
};

enum _DOT11_TEMP_TYPE {
	dot11_temp_type_unknown = 0x0,
	dot11_temp_type_1 = 0x1,
	dot11_temp_type_2 = 0x2
};

enum _DOT11_TRI_STATE {
	dot11_tri_state_false = 0x0,
	dot11_tri_state_true = 0x1,
	dot11_tri_state_unknown = 0x2
};

struct _DOT11_UPDATE_IE {
	/*0000*/ _DOT11_UPDATE_IE_OP dot11UpdateIEOp;
	/*0004*/ ULONG uBufferLength;
	/*0008*/ UCHAR ucBuffer[0x1];
	/*000c*/
};

enum _DOT11_UPDATE_IE_OP {
	dot11_update_ie_op_create_replace = 0x1,
	dot11_update_ie_op_delete = 0x2
};

struct _DOT11_VWIFI_COMBINATION {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumInfrastructure;
	/*0008*/ ULONG uNumAdhoc;
	/*000c*/ ULONG uNumSoftAP;
	/*0010*/
};

struct _DOT11_VWIFI_COMBINATION_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumInfrastructure;
	/*0008*/ ULONG uNumAdhoc;
	/*000c*/ ULONG uNumSoftAP;
	/*0010*/ ULONG uNumVirtualStation;
	/*0014*/
};

struct _DOT11_VWIFI_COMBINATION_V3 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumInfrastructure;
	/*0008*/ ULONG uNumAdhoc;
	/*000c*/ ULONG uNumSoftAP;
	/*0010*/ ULONG uNumVirtualStation;
	/*0014*/ ULONG uNumWFDGroup;
	/*0018*/
};

struct _DOT11_WEP_OFFLOAD {
	/*0000*/ ULONG uReserved;
	/*0008*/ void * hOffloadContext;
	/*0010*/ void * hOffload;
	/*0018*/ _DOT11_OFFLOAD_TYPE dot11OffloadType;
	/*001c*/ ULONG dwAlgorithm;
	/*0020*/ UCHAR bRowIsOutbound;
	/*0021*/ UCHAR bUseDefault;
	/*0024*/ ULONG uFlags;
	/*0028*/ UCHAR ucMacAddress[0x6];
	/*0030*/ ULONG uNumOfRWsOnPeer;
	/*0034*/ ULONG uNumOfRWsOnMe;
	/*0038*/ _DOT11_IV48_COUNTER dot11IV48Counters[0x10];
	/*00b8*/ USHORT usDot11RWBitMaps[0x10];
	/*00d8*/ USHORT usKeyLength;
	/*00da*/ UCHAR ucKey[0x1];
	/*00e0*/
};

struct _DOT11_WEP_UPLOAD {
	/*0000*/ ULONG uReserved;
	/*0004*/ _DOT11_OFFLOAD_TYPE dot11OffloadType;
	/*0008*/ void * hOffload;
	/*0010*/ ULONG uNumOfRWsUsed;
	/*0014*/ _DOT11_IV48_COUNTER dot11IV48Counters[0x10];
	/*0094*/ USHORT usDot11RWBitMaps[0x10];
	/*00b8*/
};

struct _DOT11_WFD_ADDITIONAL_IE {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uBeaconIEsOffset;
	/*0008*/ ULONG uBeaconIEsLength;
	/*000c*/ ULONG uProbeResponseIEsOffset;
	/*0010*/ ULONG uProbeResponseIEsLength;
	/*0014*/ ULONG uDefaultRequestIEsOffset;
	/*0018*/ ULONG uDefaultRequestIEsLength;
	/*001c*/
};

struct _DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR {
	/*0000*/ ULONG AdvertisementID;
	/*0004*/ USHORT ConfigMethods;
	/*0006*/ UCHAR ServiceNameLength;
	/*0007*/ UCHAR ServiceName[0xff];
	/*0108*/
};

struct _DOT11_WFD_ADVERTISED_SERVICE_LIST {
	/*0000*/ USHORT ServiceCount;
	/*0004*/ _DOT11_WFD_ADVERTISED_SERVICE_DESCRIPTOR AdvertisedService[0x1];
	/*010c*/
};

struct _DOT11_WFD_ADVERTISEMENT_ID {
	/*0000*/ ULONG AdvertisementID;
	/*0004*/ UCHAR ServiceAddress[0x6];
	/*000c*/
};

struct _DOT11_WFD_ASP2_CCEX_INFO {
	/*0000*/ UCHAR uConnectionTypes;
	/*0001*/ UCHAR bSTABssidPresent;
	/*0002*/ UCHAR bConnectedAPBssidPresent;
	/*0003*/ UCHAR bIPv4AddressPresent;
	/*0004*/ UCHAR bIPv6AddressPresent;
	/*0005*/ UCHAR STABssid[0x6];
	/*000b*/ UCHAR ConnectedAPBssid[0x6];
	/*0014*/ _DOT11_IPv4_ADDRESS IPv4Address;
	/*0018*/ _DOT11_IPv6_ADDRESS IPv6Address;
	/*0028*/
};

struct _DOT11_WFD_ASP2_SERVICE_ADVERTISEMENT_ENTRY {
	/*0000*/ UCHAR ServiceStatus;
	/*0004*/ ULONG AdvertisementID;
	/*0008*/ _DOT11_WPS_CONFIG_METHOD ConfigMethods;
	/*000c*/ UCHAR bAutoAccept;
	/*000e*/ _DOT11_WFD_SESSION_INFO ServiceSessionInfo;
	/*00a0*/ UCHAR ServiceTypeHash[0x6];
	/*00a6*/ UCHAR uServiceTypeLength;
	/*00a8*/ ULONG uServiceTypeOffset;
	/*00ac*/ UCHAR InstanceNameHash[0x6];
	/*00b2*/ UCHAR uInstanceNameLength;
	/*00b4*/ ULONG uInstanceNameOffset;
	/*00b8*/ ULONG uServiceInformationLength;
	/*00bc*/ ULONG uServiceInformationOffset;
	/*00c0*/
};

struct _DOT11_WFD_ASP2_SERVICE_INFO {
	/*0000*/ UCHAR uServiceTypeLength;
	/*0004*/ ULONG uServiceTypeOffset;
	/*0008*/ UCHAR uInstanceNameLength;
	/*000c*/ ULONG uInstanceNameOffset;
	/*0010*/ ULONG uServiceInformationLength;
	/*0014*/ ULONG uServiceInformationOffset;
	/*0018*/ UCHAR uServiceStatus;
	/*001c*/ ULONG uAdvertisementID;
	/*0020*/ USHORT uConfigurationMethods;
	/*0024*/
};

struct _DOT11_WFD_ASP2_SERVICE_INFORMATION_DISCOVERY_ENTRY {
	/*0000*/ UCHAR uServiceTypeLength;
	/*0004*/ ULONG uServiceTypeOffset;
	/*0008*/ UCHAR uInstanceNameLength;
	/*000c*/ ULONG uInstanceNameOffset;
	/*0010*/ ULONG uServiceInformationQueryLength;
	/*0014*/ ULONG uServiceInformationQueryOffset;
	/*0018*/ USHORT uUpdateIndicator;
	/*001a*/ UCHAR ucTransactionId;
	/*001c*/
};

struct _DOT11_WFD_ATTRIBUTES {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumConcurrentGORole;
	/*0008*/ ULONG uNumConcurrentClientRole;
	/*000c*/ ULONG WPSVersionsSupported;
	/*0010*/ UCHAR bServiceDiscoverySupported;
	/*0011*/ UCHAR bClientDiscoverabilitySupported;
	/*0012*/ UCHAR bInfrastructureManagementSupported;
	/*0014*/ ULONG uMaxSecondaryDeviceTypeListSize;
	/*0018*/ UCHAR DeviceAddress[0x6];
	/*0020*/ ULONG uInterfaceAddressListCount;
	/*0028*/ UCHAR (* pInterfaceAddressList)[0x6];
	/*0030*/ ULONG uNumSupportedCountryOrRegionStrings;
	/*0038*/ UCHAR (* pSupportedCountryOrRegionStrings)[0x3];
	/*0040*/ ULONG uDiscoveryFilterListSize;
	/*0044*/ ULONG uGORoleClientTableSize;
	/*0048*/
};

struct _DOT11_WFD_BACKGROUND_DISCOVERY_REQUEST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_WFD_DISCOVER_TYPE DiscoveryType;
	/*0008*/ _DOT11_WFD_SERVICE_DISCOVERY_TYPE ServiceDiscoveryType;
	/*000c*/ ULONG uDeviceEntryTimeout;
	/*0010*/ ULONG uDeviceFilterListOffset;
	/*0014*/ ULONG uNumDeviceFilters;
	/*0018*/ ULONG uIEsOffset;
	/*001c*/ ULONG uIEsLength;
	/*0020*/ ULONG uNumChannelInfoElements;
	/*0024*/ ULONG uChannelInfoListOffset;
	/*0028*/ ULONG uChannelInfoListLength;
	/*002c*/ ULONG uNumServiceHashes;
	/*0030*/ ULONG uServiceHashListOffset;
	/*0034*/ ULONG uServiceHashListLength;
	/*0038*/ ULONG uNumServiceNames;
	/*003c*/ ULONG uServiceNamesListOffset;
	/*0040*/ ULONG uServiceNamesListLength;
	/*0044*/ ULONG uBufferLength;
	/*0048*/ UCHAR ucBuffer[0x1];
	/*004c*/
};

struct _DOT11_WFD_BAND_CHANNELS {
	/*0000*/ ULONG uBandID;
	/*0004*/ ULONG uNumChannels;
	/*0008*/ ULONG Channels[0x1];
	/*000c*/
};

struct _DOT11_WFD_CHANNEL {
	/*0000*/ UCHAR CountryRegionString[0x3];
	/*0003*/ UCHAR OperatingClass;
	/*0004*/ UCHAR ChannelNumber;
	/*0005*/
};

struct _DOT11_WFD_CONFIGURATION_TIMEOUT {
	/*0000*/ UCHAR GOTimeout;
	/*0001*/ UCHAR ClientTimeout;
	/*0002*/
};

struct _DOT11_WFD_CURRENT_ASP2_SESSION_ID_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uSessionID;
	/*0008*/ UCHAR SessionAddress[0x6];
	/*0010*/
};

struct _DOT11_WFD_DEVICE_CAPABILITY_CONFIG {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR bServiceDiscoveryEnabled;
	/*0005*/ UCHAR bClientDiscoverabilityEnabled;
	/*0006*/ UCHAR bConcurrentOperationSupported;
	/*0007*/ UCHAR bInfrastructureManagementEnabled;
	/*0008*/ UCHAR bDeviceLimitReached;
	/*0009*/ UCHAR bInvitationProcedureEnabled;
	/*000c*/ ULONG WPSVersionsEnabled;
	/*0010*/
};

struct _DOT11_WFD_DEVICE_ENTRY {
	/*0000*/ ULONG uPhyId;
	/*0004*/ DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
	/*0010*/ UCHAR dot11BSSID[0x6];
	/*0018*/ _DOT11_BSS_TYPE dot11BSSType;
	/*001c*/ UCHAR TransmitterAddress[0x6];
	/*0024*/ LONG lRSSI;
	/*0028*/ ULONG uLinkQuality;
	/*002c*/ USHORT usBeaconPeriod;
	/*0030*/ ULONGLONG ullTimestamp;
	/*0038*/ ULONGLONG ullBeaconHostTimestamp;
	/*0040*/ ULONGLONG ullProbeResponseHostTimestamp;
	/*0048*/ USHORT usCapabilityInformation;
	/*004c*/ ULONG uBeaconIEsOffset;
	/*0050*/ ULONG uBeaconIEsLength;
	/*0054*/ ULONG uProbeResponseIEsOffset;
	/*0058*/ ULONG uProbeResponseIEsLength;
	/*0060*/
};

struct _DOT11_WFD_DEVICE_ENTRY_V2 {
	/*0000*/ ULONG uPhyId;
	/*0004*/ DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO PhySpecificInfo;
	/*0010*/ UCHAR dot11BSSID[0x6];
	/*0018*/ _DOT11_BSS_TYPE dot11BSSType;
	/*001c*/ UCHAR TransmitterAddress[0x6];
	/*0024*/ LONG lRSSI;
	/*0028*/ ULONG uLinkQuality;
	/*002c*/ USHORT usBeaconPeriod;
	/*0030*/ ULONGLONG ullTimestamp;
	/*0038*/ ULONGLONG ullBeaconHostTimestamp;
	/*0040*/ ULONGLONG ullProbeResponseHostTimestamp;
	/*0048*/ USHORT usCapabilityInformation;
	/*004c*/ ULONG uBeaconIEsOffset;
	/*0050*/ ULONG uBeaconIEsLength;
	/*0054*/ ULONG uProbeResponseIEsOffset;
	/*0058*/ ULONG uProbeResponseIEsLength;
	/*005c*/ ULONG uNumServices;
	/*0060*/ ULONG uServicesInfoListOffset;
	/*0064*/ ULONG uServicesInfoListLength;
	/*0068*/ ULONG uNumASP2Services;
	/*006c*/ ULONG uASP2ServicesInfoListOffset;
	/*0070*/ ULONG uASP2ServicesInfoListLength;
	/*0078*/
};

struct _DOT11_WFD_DEVICE_INFO {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR DeviceAddress[0x6];
	/*000a*/ USHORT ConfigMethods;
	/*000c*/ _DOT11_WFD_DEVICE_TYPE PrimaryDeviceType;
	/*0014*/ _DOT11_WPS_DEVICE_NAME DeviceName;
	/*0038*/
};

struct _DOT11_WFD_DEVICE_LISTEN_CHANNEL {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR ChannelNumber;
	/*0006*/
};

enum _DOT11_WFD_DEVICE_PASSIVE_AVAILABILITY {
	dot11_wfd_device_passive_availability_off = 0x0,
	dot11_wfd_device_passive_availability_on = 0x1
};

struct _DOT11_WFD_DEVICE_TYPE {
	/*0000*/ USHORT CategoryID;
	/*0002*/ USHORT SubCategoryID;
	/*0004*/ UCHAR OUI[0x4];
	/*0008*/
};

struct _DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ INT Status;
	/*0008*/ ULONG uNumOfEntries;
	/*000c*/ ULONG uTotalNumOfEntries;
	/*0010*/ ULONG uListOffset;
	/*0014*/ ULONG uListLength;
	/*0018*/
};

struct _DOT11_WFD_DISCOVER_DEVICE_FILTER {
	/*0000*/ UCHAR DeviceID[0x6];
	/*0006*/ UCHAR ucBitmask;
	/*0008*/ _DOT11_SSID GroupSSID;
	/*002c*/
};

struct _DOT11_WFD_DISCOVER_REQUEST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_WFD_DISCOVER_TYPE DiscoverType;
	/*0008*/ _DOT11_WFD_SCAN_TYPE ScanType;
	/*000c*/ ULONG uDiscoverTimeout;
	/*0010*/ ULONG uDeviceFilterListOffset;
	/*0014*/ ULONG uNumDeviceFilters;
	/*0018*/ ULONG uIEsOffset;
	/*001c*/ ULONG uIEsLength;
	/*0020*/ UCHAR bForceScanLegacyNetworks;
	/*0024*/
};

struct _DOT11_WFD_DISCOVER_REQUEST_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_WFD_DISCOVER_TYPE DiscoverType;
	/*0008*/ _DOT11_WFD_SCAN_TYPE ScanType;
	/*000c*/ ULONG uDiscoverTimeout;
	/*0010*/ ULONG uDeviceFilterListOffset;
	/*0014*/ ULONG uNumDeviceFilters;
	/*0018*/ ULONG uIEsOffset;
	/*001c*/ ULONG uIEsLength;
	/*0020*/ UCHAR bForceScanLegacyNetworks;
	/*0024*/ _DOT11_WFD_SERVICE_DISCOVERY_TYPE ServiceDiscoveryType;
	/*0028*/ ULONG uNumChannelInfoElements;
	/*002c*/ ULONG uChannelInfoListOffset;
	/*0030*/ ULONG uChannelInfoListLength;
	/*0034*/ ULONG uNumServiceHashes;
	/*0038*/ ULONG uServiceHashListOffset;
	/*003c*/ ULONG uServiceHashListLength;
	/*0040*/ ULONG uNumServices;
	/*0044*/ ULONG uServiceInfoListOffset;
	/*0048*/ ULONG uServiceInfoListLength;
	/*004c*/ ULONG uNumASP2Services;
	/*0050*/ ULONG uASP2ServiceInfoListOffset;
	/*0054*/ ULONG uASP2ServiceInfoListLength;
	/*0058*/ ULONG uASP2CCEXInfoOffset;
	/*005c*/ ULONG uASP2CCEXInfoLength;
	/*0060*/ UCHAR bChannelInfoHintFallback;
	/*0064*/
};

enum _DOT11_WFD_DISCOVER_TYPE {
	dot11_wfd_discover_type_scan_only = 0x1,
	dot11_wfd_discover_type_find_only = 0x2,
	dot11_wfd_discover_type_auto = 0x3,
	dot11_wfd_discover_type_scan_social_channels = 0x4,
	dot11_wfd_discover_type_forced = 0x80000000
};

struct _DOT11_WFD_GO_INTENT {
	/*0000*/ UCHAR TieBreaker : 01; // 0x01;
	/*0000*/ UCHAR Intent : 07; // 0xfe;
	/*0001*/
};

struct _DOT11_WFD_GROUP_ID {
	/*0000*/ UCHAR DeviceAddress[0x6];
	/*0008*/ _DOT11_SSID SSID;
	/*002c*/
};

struct _DOT11_WFD_GROUP_JOIN_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_WFD_CHANNEL GOOperatingChannel;
	/*000c*/ ULONG GOConfigTime;
	/*0010*/ UCHAR bInGroupFormation;
	/*0011*/ UCHAR bWaitForWPSReady;
	/*0014*/
};

struct _DOT11_WFD_GROUP_OPERATING_CHANNEL_UPDATE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_WFD_CHANNEL WFDChannel;
	/*000c*/ _DOT11_BAND_ID BandID;
	/*0010*/ _DOT11_P2P_CHANNEL_INDICATE_REASON Reason;
	/*0014*/ UCHAR bIsPBSSNotInDS;
	/*0018*/
};

struct _DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR bPersistentGroupEnabled;
	/*0005*/ UCHAR bIntraBSSDistributionSupported;
	/*0006*/ UCHAR bCrossConnectionSupported;
	/*0007*/ UCHAR bPersistentReconnectSupported;
	/*0008*/ UCHAR bGroupFormationEnabled;
	/*000c*/ ULONG uMaximumGroupLimit;
	/*0010*/
};

struct _DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR bPersistentGroupEnabled;
	/*0005*/ UCHAR bIntraBSSDistributionSupported;
	/*0006*/ UCHAR bCrossConnectionSupported;
	/*0007*/ UCHAR bPersistentReconnectSupported;
	/*0008*/ UCHAR bGroupFormationEnabled;
	/*000c*/ ULONG uMaximumGroupLimit;
	/*0010*/ UCHAR bEapolKeyIpAddressAllocationSupported;
	/*0014*/
};

struct _DOT11_WFD_GROUP_START_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_WFD_CHANNEL AdvertisedOperatingChannel;
	/*000a*/
};

struct _DOT11_WFD_GROUP_START_PARAMETERS_V2 {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_WFD_CHANNEL AdvertisedOperatingChannel;
	/*0009*/ UCHAR bAcceptNonP2PClients;
	/*000a*/ UCHAR bMustUseSpecifiedChannels;
	/*000c*/ ULONG uNumBandChannels;
	/*0010*/ ULONG uBandChannelsOffset;
	/*0014*/ ULONG uBandChannelsLength;
	/*0018*/
};

struct _DOT11_WFD_INVITATION_FLAGS {
	/*0000*/ UCHAR InvitationType : 01; // 0x01;
	/*0000*/ UCHAR Reserved : 07; // 0xfe;
	/*0001*/
};

struct _DOT11_WFD_LISTEN_DURATION {
	/*0000*/ ULONG CycleDuration;
	/*0004*/ ULONG ListenActiveDuration;
	/*0008*/
};

struct _DOT11_WFD_REMOTE_CHANNEL_AVAILABILITY_INFO {
	/*0000*/ _DOT11_WFD_LISTEN_DURATION ListenDuration;
	/*0008*/ ULONG uNumBandChannels;
	/*000c*/ ULONG uBufferLength;
	/*0010*/ UCHAR ucBuffer[0x1];
	/*0014*/
};

enum _DOT11_WFD_SCAN_TYPE {
	dot11_wfd_scan_type_active = 0x1,
	dot11_wfd_scan_type_passive = 0x2,
	dot11_wfd_scan_type_auto = 0x3
};

struct _DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uNumOfEntries;
	/*0008*/ ULONG uTotalNumOfEntries;
	/*000c*/ _DOT11_WFD_DEVICE_TYPE SecondaryDeviceTypes[0x1];
	/*0014*/
};

struct _DOT11_WFD_SERVICE_ASP_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR ConnectionCapability;
	/*0005*/ UCHAR GOInterfaceAddress[0x6];
	/*000b*/ UCHAR UnusedInterfaceAddress[0x6];
	/*0014*/ _DOT11_WFD_GROUP_ID GOGroupID;
	/*0040*/
};

struct _DOT11_WFD_SERVICE_BASIC_ADVERTISEMENT_ENTRY {
	/*0000*/ ULONG AdvertisementID;
	/*0004*/ UCHAR ServiceStatus;
	/*0005*/ UCHAR uServiceNameLength;
	/*0008*/ ULONG uServiceNameOffset;
	/*000c*/
};

struct _DOT11_WFD_SERVICE_BASIC_ADVERTISEMENT_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG uAdvertisedServicesCount;
	/*0008*/ ULONG uAdvertisedServicesLength;
	/*000c*/ _DOT11_WFD_SERVICE_BASIC_ADVERTISEMENT_ENTRY AdvertisedServices[0x1];
	/*0018*/
};

enum _DOT11_WFD_SERVICE_DISCOVERY_TYPE {
	dot11_wfd_service_discovery_type_no_service_discovery = 0x0,
	dot11_wfd_service_discovery_type_service_name_only = 0x1,
	dot11_wfd_service_discovery_type_service_information = 0x3,
	dot11_wfd_service_discovery_type_max_value = 0xffffffff
};

struct _DOT11_WFD_SERVICE_FULL_ADVERTISEMENT_ENTRY {
	/*0000*/ ULONG AdvertisementID;
	/*0004*/ UCHAR ServiceHash[0x6];
	/*000c*/ _DOT11_WPS_CONFIG_METHOD ConfigMethods;
	/*0010*/ UCHAR ServiceStatus;
	/*0011*/ UCHAR bAutoAccept;
	/*0012*/ _DOT11_WFD_SESSION_INFO ServiceSessionInfo;
	/*00a4*/ UCHAR uServiceNameLength;
	/*00a8*/ ULONG uServiceNameOffset;
	/*00ac*/ ULONG uServiceInformationLength;
	/*00b0*/ ULONG uServiceInformationOffset;
	/*00b4*/
};

struct _DOT11_WFD_SERVICE_FULL_ADVERTISEMENT_LIST {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ USHORT uServiceUpdateIndicator;
	/*0008*/ ULONG uAdvertisedServicesCount;
	/*000c*/ ULONG uAdvertisedServicesOffset;
	/*0010*/ ULONG uAdvertisedServicesLength;
	/*0014*/ ULONG uAdvertisedASP2ServicesCount;
	/*0018*/ ULONG uAdvertisedASP2ServicesOffset;
	/*001c*/ ULONG uAdvertisedASP2ServicesLength;
	/*0020*/ ULONG uASP2CCEXInfoOffset;
	/*0024*/ ULONG uASP2CCEXInfoLength;
	/*0028*/
};

struct _DOT11_WFD_SERVICE_HASH_LIST {
	/*0000*/ USHORT ServiceHashCount;
	/*0002*/ UCHAR ServiceHash[0x1][0x6];
	/*0008*/
};

struct _DOT11_WFD_SERVICE_INFO {
	/*0000*/ UCHAR uServiceNameLength;
	/*0004*/ ULONG uServiceNameOffset;
	/*0008*/ ULONG uServiceInformationLength;
	/*000c*/ ULONG uServiceInformationOffset;
	/*0010*/ UCHAR uServiceStatus;
	/*0014*/ ULONG uAdvertisementID;
	/*0018*/ USHORT uConfigurationMethods;
	/*001c*/
};

struct _DOT11_WFD_SERVICE_INFORMATION_DISCOVERY_ENTRY {
	/*0000*/ UCHAR ServiceHash[0x6];
	/*0006*/ USHORT uUpdateIndicator;
	/*0008*/ UCHAR ucTransactionId;
	/*0009*/ UCHAR uServiceNameLength;
	/*000c*/ ULONG uServiceNameOffset;
	/*0010*/ ULONG uServiceInformationQueryLength;
	/*0014*/ ULONG uServiceInformationQueryOffset;
	/*0018*/
};

struct _DOT11_WFD_SERVICE_NAME {
	/*0000*/ UCHAR uUtf8ServiceNameLength;
	/*0001*/ UCHAR strUtf8ServiceName[0x1];
	/*0002*/
};

struct _DOT11_WFD_SERVICE_PREFIX_ENTRY {
	/*0000*/ UCHAR ServicePrefixHash[0x6];
	/*0006*/ UCHAR uServicePrefixLength;
	/*0008*/ ULONG uServicePrefixOffset;
	/*000c*/
};

struct _DOT11_WFD_SESSION_ID {
	/*0000*/ ULONG SessionID;
	/*0004*/ UCHAR SessionAddress[0x6];
	/*000c*/
};

struct _DOT11_WFD_SESSION_INFO {
	/*0000*/ USHORT uSessionInfoLength;
	/*0002*/ UCHAR ucSessionInfo[0x90];
	/*0092*/
};

struct _DOT11_WFD_SET_LISTEN_STATE_PASSIVE_AVAILABILITY {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _DOT11_WFD_DEVICE_PASSIVE_AVAILABILITY Mode;
	/*0008*/ _DOT11_WFD_CHANNEL Channel;
	/*0010*/ _DOT11_WFD_LISTEN_DURATION ListenDuration;
	/*0018*/
};

struct _DOT11_WFD_VISIBLE_ENTRIES {
	/*0000*/ ULONG uNumAllCurrentDevices;
	/*0004*/ ULONG uNumAllNewDevices;
	/*0008*/ ULONG uNumAllExpiredDevices;
	/*000c*/ ULONG uNumAllUpdatedServices;
	/*0010*/ ULONG uNumFilteredVisibleDevices;
	/*0014*/ ULONG uNumFilteredVisibleServices;
	/*0018*/
};

struct _DOT11_WME_AC_PARAMETERS {
	/*0000*/ UCHAR ucAccessCategoryIndex;
	/*0001*/ UCHAR ucAIFSN;
	/*0002*/ UCHAR ucECWmin;
	/*0003*/ UCHAR ucECWmax;
	/*0004*/ USHORT usTXOPLimit;
	/*0006*/
};

struct _DOT11_WME_AC_PARAMTERS_LIST {
	/*0000*/ ULONG uNumOfEntries;
	/*0004*/ ULONG uTotalNumOfEntries;
	/*0008*/ _DOT11_WME_AC_PARAMETERS dot11WMEACParameters[0x1];
	/*0010*/
};

struct _DOT11_WME_UPDATE_IE {
	/*0000*/ ULONG uParamElemMinBeaconIntervals;
	/*0004*/ ULONG uWMEInfoElemOffset;
	/*0008*/ ULONG uWMEInfoElemLength;
	/*000c*/ ULONG uWMEParamElemOffset;
	/*0010*/ ULONG uWMEParamElemLength;
	/*0014*/ UCHAR ucBuffer[0x1];
	/*0018*/
};

struct _DOT11_WPA_TSC {
	/*0000*/ ULONG uReserved;
	/*0004*/ _DOT11_OFFLOAD_TYPE dot11OffloadType;
	/*0008*/ void * hOffload;
	/*0010*/ _DOT11_IV48_COUNTER dot11IV48Counter;
	/*0018*/
};

enum _DOT11_WPS_CONFIG_METHOD {
	DOT11_WPS_CONFIG_METHOD_NULL = 0x0,
	DOT11_WPS_CONFIG_METHOD_DISPLAY = 0x8,
	DOT11_WPS_CONFIG_METHOD_NFC_TAG = 0x20,
	DOT11_WPS_CONFIG_METHOD_NFC_INTERFACE = 0x40,
	DOT11_WPS_CONFIG_METHOD_PUSHBUTTON = 0x80,
	DOT11_WPS_CONFIG_METHOD_KEYPAD = 0x100,
	DOT11_WPS_CONFIG_METHOD_WFDS_DEFAULT = 0x1000
};

struct _DOT11_WPS_DEVICE_NAME {
	/*0000*/ ULONG uDeviceNameLength;
	/*0004*/ UCHAR ucDeviceName[0x20];
	/*0024*/
};

enum _DOT11_WPS_DEVICE_PASSWORD_ID {
	DOT11_WPS_PASSWORD_ID_DEFAULT = 0x0,
	DOT11_WPS_PASSWORD_ID_USER_SPECIFIED = 0x1,
	DOT11_WPS_PASSWORD_ID_MACHINE_SPECIFIED = 0x2,
	DOT11_WPS_PASSWORD_ID_REKEY = 0x3,
	DOT11_WPS_PASSWORD_ID_PUSHBUTTON = 0x4,
	DOT11_WPS_PASSWORD_ID_REGISTRAR_SPECIFIED = 0x5,
	DOT11_WPS_PASSWORD_ID_NFC_CONNECTION_HANDOVER = 0x7,
	DOT11_WPS_PASSWORD_ID_WFD_SERVICES = 0x8,
	DOT11_WPS_PASSWORD_ID_OOB_RANGE_MIN = 0x10,
	DOT11_WPS_PASSWORD_ID_OOB_RANGE_MAX = 0xffff
};

struct _DPA;

struct _DPASTREAMINFO {
	/*0000*/ INT iPos;
	/*0008*/ void * pvItem;
	/*0010*/
};

struct _DPC_WATCHDOG_GLOBAL_TRIAGE_BLOCK {
	/*0000*/ ULONG Signature;
	/*0004*/ USHORT Revision;
	/*0006*/ USHORT Size;
	/*0008*/ USHORT DpcWatchdogProfileOffset;
	/*000c*/ ULONG DpcWatchdogProfileLength;
	/*0010*/
};

enum _DPFLTR_TYPE {
	DPFLTR_SYSTEM_ID = 0x0,
	DPFLTR_SMSS_ID = 0x1,
	DPFLTR_SETUP_ID = 0x2,
	DPFLTR_NTFS_ID = 0x3,
	DPFLTR_FSTUB_ID = 0x4,
	DPFLTR_CRASHDUMP_ID = 0x5,
	DPFLTR_CDAUDIO_ID = 0x6,
	DPFLTR_CDROM_ID = 0x7,
	DPFLTR_CLASSPNP_ID = 0x8,
	DPFLTR_DISK_ID = 0x9,
	DPFLTR_REDBOOK_ID = 0xa,
	DPFLTR_STORPROP_ID = 0xb,
	DPFLTR_SCSIPORT_ID = 0xc,
	DPFLTR_SCSIMINIPORT_ID = 0xd,
	DPFLTR_CONFIG_ID = 0xe,
	DPFLTR_I8042PRT_ID = 0xf,
	DPFLTR_SERMOUSE_ID = 0x10,
	DPFLTR_LSERMOUS_ID = 0x11,
	DPFLTR_KBDHID_ID = 0x12,
	DPFLTR_MOUHID_ID = 0x13,
	DPFLTR_KBDCLASS_ID = 0x14,
	DPFLTR_MOUCLASS_ID = 0x15,
	DPFLTR_TWOTRACK_ID = 0x16,
	DPFLTR_WMILIB_ID = 0x17,
	DPFLTR_ACPI_ID = 0x18,
	DPFLTR_AMLI_ID = 0x19,
	DPFLTR_HALIA64_ID = 0x1a,
	DPFLTR_VIDEO_ID = 0x1b,
	DPFLTR_SVCHOST_ID = 0x1c,
	DPFLTR_VIDEOPRT_ID = 0x1d,
	DPFLTR_TCPIP_ID = 0x1e,
	DPFLTR_DMSYNTH_ID = 0x1f,
	DPFLTR_NTOSPNP_ID = 0x20,
	DPFLTR_FASTFAT_ID = 0x21,
	DPFLTR_SAMSS_ID = 0x22,
	DPFLTR_PNPMGR_ID = 0x23,
	DPFLTR_NETAPI_ID = 0x24,
	DPFLTR_SCSERVER_ID = 0x25,
	DPFLTR_SCCLIENT_ID = 0x26,
	DPFLTR_SERIAL_ID = 0x27,
	DPFLTR_SERENUM_ID = 0x28,
	DPFLTR_UHCD_ID = 0x29,
	DPFLTR_RPCPROXY_ID = 0x2a,
	DPFLTR_AUTOCHK_ID = 0x2b,
	DPFLTR_DCOMSS_ID = 0x2c,
	DPFLTR_UNIMODEM_ID = 0x2d,
	DPFLTR_SIS_ID = 0x2e,
	DPFLTR_FLTMGR_ID = 0x2f,
	DPFLTR_WMICORE_ID = 0x30,
	DPFLTR_BURNENG_ID = 0x31,
	DPFLTR_IMAPI_ID = 0x32,
	DPFLTR_SXS_ID = 0x33,
	DPFLTR_FUSION_ID = 0x34,
	DPFLTR_IDLETASK_ID = 0x35,
	DPFLTR_SOFTPCI_ID = 0x36,
	DPFLTR_TAPE_ID = 0x37,
	DPFLTR_MCHGR_ID = 0x38,
	DPFLTR_IDEP_ID = 0x39,
	DPFLTR_PCIIDE_ID = 0x3a,
	DPFLTR_FLOPPY_ID = 0x3b,
	DPFLTR_FDC_ID = 0x3c,
	DPFLTR_TERMSRV_ID = 0x3d,
	DPFLTR_W32TIME_ID = 0x3e,
	DPFLTR_PREFETCHER_ID = 0x3f,
	DPFLTR_RSFILTER_ID = 0x40,
	DPFLTR_FCPORT_ID = 0x41,
	DPFLTR_PCI_ID = 0x42,
	DPFLTR_DMIO_ID = 0x43,
	DPFLTR_DMCONFIG_ID = 0x44,
	DPFLTR_DMADMIN_ID = 0x45,
	DPFLTR_WSOCKTRANSPORT_ID = 0x46,
	DPFLTR_VSS_ID = 0x47,
	DPFLTR_PNPMEM_ID = 0x48,
	DPFLTR_PROCESSOR_ID = 0x49,
	DPFLTR_DMSERVER_ID = 0x4a,
	DPFLTR_SR_ID = 0x4b,
	DPFLTR_INFINIBAND_ID = 0x4c,
	DPFLTR_IHVDRIVER_ID = 0x4d,
	DPFLTR_IHVVIDEO_ID = 0x4e,
	DPFLTR_IHVAUDIO_ID = 0x4f,
	DPFLTR_IHVNETWORK_ID = 0x50,
	DPFLTR_IHVSTREAMING_ID = 0x51,
	DPFLTR_IHVBUS_ID = 0x52,
	DPFLTR_HPS_ID = 0x53,
	DPFLTR_RTLTHREADPOOL_ID = 0x54,
	DPFLTR_LDR_ID = 0x55,
	DPFLTR_TCPIP6_ID = 0x56,
	DPFLTR_ISAPNP_ID = 0x57,
	DPFLTR_SHPC_ID = 0x58,
	DPFLTR_STORPORT_ID = 0x59,
	DPFLTR_STORMINIPORT_ID = 0x5a,
	DPFLTR_PRINTSPOOLER_ID = 0x5b,
	DPFLTR_VSSDYNDISK_ID = 0x5c,
	DPFLTR_VERIFIER_ID = 0x5d,
	DPFLTR_VDS_ID = 0x5e,
	DPFLTR_VDSBAS_ID = 0x5f,
	DPFLTR_VDSDYN_ID = 0x60,
	DPFLTR_VDSDYNDR_ID = 0x61,
	DPFLTR_VDSLDR_ID = 0x62,
	DPFLTR_VDSUTIL_ID = 0x63,
	DPFLTR_DFRGIFC_ID = 0x64,
	DPFLTR_DEFAULT_ID = 0x65,
	DPFLTR_MM_ID = 0x66,
	DPFLTR_DFSC_ID = 0x67,
	DPFLTR_WOW64_ID = 0x68,
	DPFLTR_ALPC_ID = 0x69,
	DPFLTR_WDI_ID = 0x6a,
	DPFLTR_PERFLIB_ID = 0x6b,
	DPFLTR_KTM_ID = 0x6c,
	DPFLTR_IOSTRESS_ID = 0x6d,
	DPFLTR_HEAP_ID = 0x6e,
	DPFLTR_WHEA_ID = 0x6f,
	DPFLTR_USERGDI_ID = 0x70,
	DPFLTR_MMCSS_ID = 0x71,
	DPFLTR_TPM_ID = 0x72,
	DPFLTR_THREADORDER_ID = 0x73,
	DPFLTR_ENVIRON_ID = 0x74,
	DPFLTR_EMS_ID = 0x75,
	DPFLTR_WDT_ID = 0x76,
	DPFLTR_FVEVOL_ID = 0x77,
	DPFLTR_NDIS_ID = 0x78,
	DPFLTR_NVCTRACE_ID = 0x79,
	DPFLTR_LUAFV_ID = 0x7a,
	DPFLTR_APPCOMPAT_ID = 0x7b,
	DPFLTR_USBSTOR_ID = 0x7c,
	DPFLTR_SBP2PORT_ID = 0x7d,
	DPFLTR_COVERAGE_ID = 0x7e,
	DPFLTR_CACHEMGR_ID = 0x7f,
	DPFLTR_MOUNTMGR_ID = 0x80,
	DPFLTR_CFR_ID = 0x81,
	DPFLTR_TXF_ID = 0x82,
	DPFLTR_KSECDD_ID = 0x83,
	DPFLTR_FLTREGRESS_ID = 0x84,
	DPFLTR_MPIO_ID = 0x85,
	DPFLTR_MSDSM_ID = 0x86,
	DPFLTR_UDFS_ID = 0x87,
	DPFLTR_PSHED_ID = 0x88,
	DPFLTR_STORVSP_ID = 0x89,
	DPFLTR_LSASS_ID = 0x8a,
	DPFLTR_SSPICLI_ID = 0x8b,
	DPFLTR_CNG_ID = 0x8c,
	DPFLTR_EXFAT_ID = 0x8d,
	DPFLTR_FILETRACE_ID = 0x8e,
	DPFLTR_XSAVE_ID = 0x8f,
	DPFLTR_SE_ID = 0x90,
	DPFLTR_DRIVEEXTENDER_ID = 0x91,
	DPFLTR_POWER_ID = 0x92,
	DPFLTR_CRASHDUMPXHCI_ID = 0x93,
	DPFLTR_GPIO_ID = 0x94,
	DPFLTR_REFS_ID = 0x95,
	DPFLTR_WER_ID = 0x96,
	DPFLTR_CAPIMG_ID = 0x97,
	DPFLTR_VPCI_ID = 0x98,
	DPFLTR_STORAGECLASSMEMORY_ID = 0x99,
	DPFLTR_FSLIB_ID = 0x9a,
	DPFLTR_ENDOFTABLE_ID = 0x9b
};

struct _DPU_NETWORK_USAGE {
	/*0000*/ ULONGLONG ByteSent;
	/*0008*/ ULONGLONG ByteReceived;
	/*0010*/
};

struct _DRAWPATRECT {
	/*0000*/ tagPOINT ptPosition;
	/*0008*/ tagPOINT ptSize;
	/*0010*/ USHORT wStyle;
	/*0012*/ USHORT wPattern;
	/*0014*/
};

struct _DRIVER_VERIFIER_THUNK_PAIRS {
	/*0000*/ ULONGLONG (* PristineRoutine)( void * );
	/*0008*/ ULONGLONG (* NewRoutine)( void * );
	/*0010*/
};

struct _DSA;

struct _DTBLBUTTON {
	/*0000*/ ULONG ulbLpszLabel;
	/*0004*/ ULONG ulFlags;
	/*0008*/ ULONG ulPRControl;
	/*000c*/
};

struct _DTBLCHECKBOX {
	/*0000*/ ULONG ulbLpszLabel;
	/*0004*/ ULONG ulFlags;
	/*0008*/ ULONG ulPRPropertyName;
	/*000c*/
};

struct _DTBLCOMBOBOX {
	/*0000*/ ULONG ulbLpszCharsAllowed;
	/*0004*/ ULONG ulFlags;
	/*0008*/ ULONG ulNumCharsAllowed;
	/*000c*/ ULONG ulPRPropertyName;
	/*0010*/ ULONG ulPRTableName;
	/*0014*/
};

struct _DTBLDDLBX {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ULONG ulPRDisplayProperty;
	/*0008*/ ULONG ulPRSetProperty;
	/*000c*/ ULONG ulPRTableName;
	/*0010*/
};

struct _DTBLEDIT {
	/*0000*/ ULONG ulbLpszCharsAllowed;
	/*0004*/ ULONG ulFlags;
	/*0008*/ ULONG ulNumCharsAllowed;
	/*000c*/ ULONG ulPropTag;
	/*0010*/
};

struct _DTBLGROUPBOX {
	/*0000*/ ULONG ulbLpszLabel;
	/*0004*/ ULONG ulFlags;
	/*0008*/
};

struct _DTBLLABEL {
	/*0000*/ ULONG ulbLpszLabelName;
	/*0004*/ ULONG ulFlags;
	/*0008*/
};

struct _DTBLLBX {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ULONG ulPRSetProperty;
	/*0008*/ ULONG ulPRTableName;
	/*000c*/
};

struct _DTBLMVDDLBX {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ULONG ulMVPropTag;
	/*0008*/
};

struct _DTBLMVLISTBOX {
	/*0000*/ ULONG ulFlags;
	/*0004*/ ULONG ulMVPropTag;
	/*0008*/
};

struct _DTBLPAGE {
	/*0000*/ ULONG ulbLpszLabel;
	/*0004*/ ULONG ulFlags;
	/*0008*/ ULONG ulbLpszComponent;
	/*000c*/ ULONG ulContext;
	/*0010*/
};

struct _DTBLRADIOBUTTON {
	/*0000*/ ULONG ulbLpszLabel;
	/*0004*/ ULONG ulFlags;
	/*0008*/ ULONG ulcButtons;
	/*000c*/ ULONG ulPropTag;
	/*0010*/ LONG lReturnValue;
	/*0014*/
};

struct _DUPLICATE_EXTENTS_DATA {
	/*0000*/ void * FileHandle;
	/*0008*/ _LARGE_INTEGER SourceFileOffset;
	/*0010*/ _LARGE_INTEGER TargetFileOffset;
	/*0018*/ _LARGE_INTEGER ByteCount;
	/*0020*/
};

struct _DUPLICATE_EXTENTS_DATA32 {
	/*0000*/ UINT FileHandle;
	/*0008*/ _LARGE_INTEGER SourceFileOffset;
	/*0010*/ _LARGE_INTEGER TargetFileOffset;
	/*0018*/ _LARGE_INTEGER ByteCount;
	/*0020*/
};

struct _DUPLICATE_EXTENTS_DATA_EX {
	/*0000*/ ULONGLONG Size;
	/*0008*/ void * FileHandle;
	/*0010*/ _LARGE_INTEGER SourceFileOffset;
	/*0018*/ _LARGE_INTEGER TargetFileOffset;
	/*0020*/ _LARGE_INTEGER ByteCount;
	/*0028*/ ULONG Flags;
	/*0030*/
};

struct _DUPLICATE_EXTENTS_DATA_EX32 {
	/*0000*/ UINT Size;
	/*0004*/ UINT FileHandle;
	/*0008*/ _LARGE_INTEGER SourceFileOffset;
	/*0010*/ _LARGE_INTEGER TargetFileOffset;
	/*0018*/ _LARGE_INTEGER ByteCount;
	/*0020*/ ULONG Flags;
	/*0028*/
};

enum _DUSM_APP_ID_TYPE {
	DUSM_APP_ID_TYPE_UNKNOWN = 0x0,
	DUSM_APP_ID_TYPE_SVC = 0x1,
	DUSM_APP_ID_TYPE_EXE = 0x2,
	DUSM_APP_ID_TYPE_APP = 0x3
};

struct _DUSM_APP_USAGE {
	/*0000*/ ULONGLONG BytesSent;
	/*0008*/ ULONGLONG BytesReceived;
	/*0010*/ WCHAR szAppId[0x100];
	/*0210*/ _DUSM_APP_ID_TYPE AppIdType;
	/*0218*/
};

struct _DUSM_APP_USAGE_LIST {
	/*0000*/ ULONG NumberOfItems;
	/*0008*/ _DUSM_APP_USAGE AppUsage[0x1];
	/*0220*/
};

struct _DUSM_ATTRIBUTION_MAPPING {
	/*0000*/ WCHAR szIdentifier[0x104];
	/*0208*/ WCHAR szFriendlyName[0x104];
	/*0410*/ INT IsCosted;
	/*0414*/
};

struct _DUSM_ATTRIBUTION_MAPPING_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _DUSM_ATTRIBUTION_MAPPING AttributionMapping[0x1];
	/*0418*/
};

enum _DUSM_BACKGROUND_RESTRICTION {
	DUSM_BACKGROUND_RESTRICTION_NONE = 0x0,
	DUSM_BACKGROUND_RESTRICTION_NEAR_LIMIT = 0x1,
	DUSM_BACKGROUND_RESTRICTION_ROAMING = 0x2,
	DUSM_BACKGROUND_RESTRICTION_ALWAYS = 0x4
};

struct _DUSM_BILLING_CYCLE_INFO {
	/*0000*/ _FILETIME StartDate;
	/*0008*/ _DUSM_TIME_INTERVAL Duration;
	/*0018*/ INT Reset;
	/*001c*/
};

struct _DUSM_CONNECTION {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ WCHAR szProfileName[0x100];
	/*0210*/
};

enum _DUSM_CONNECTION_COST {
	DUSM_CONNECTION_COST_UNKNOWN = 0x0,
	DUSM_CONNECTION_COST_UNRESTRICTED = 0x1,
	DUSM_CONNECTION_COST_FIXED = 0x2,
	DUSM_CONNECTION_COST_VARIABLE = 0x4,
	DUSM_CONNECTION_COST_OVERDATALIMIT = 0x10000,
	DUSM_CONNECTION_COST_CONGESTED = 0x20000,
	DUSM_CONNECTION_COST_ROAMING = 0x40000,
	DUSM_CONNECTION_COST_APPROACHINGDATALIMIT = 0x80000
};

struct _DUSM_CONNECTION_COST_DATA {
	/*0000*/ ULONG ConnectionCost;
	/*0004*/ COST_SET_SOURCE CostSource;
	/*0008*/
};

struct _DUSM_CONNECTION_LIST {
	/*0000*/ ULONG NumberOfItems;
	/*0004*/ _DUSM_CONNECTION ConnectionList[0x1];
	/*0214*/
};

struct _DUSM_CONNECTION_PROPERTIES {
	/*0000*/ _DUSM_MEDIA_TYPE MediaType;
	/*0004*/ _DUSM_DPU_STATE DpuState;
	/*0008*/ INT IsNearLimit;
	/*000c*/ INT IsBackgroundRestricted;
	/*0010*/ INT IsActive;
	/*0014*/
};

struct _DUSM_CONNECTION_USAGE {
	/*0000*/ ULONGLONG BytesSent;
	/*0008*/ ULONGLONG BytesReceived;
	/*0010*/ ULONGLONG RoamingBytesSent;
	/*0018*/ ULONGLONG RoamingBytesReceived;
	/*0020*/ _DUSM_CONNECTION Connection;
	/*0230*/
};

struct _DUSM_CONNECTION_USAGE_LIST {
	/*0000*/ ULONG NumberOfItems;
	/*0008*/ _DUSM_CONNECTION_USAGE ConnectionUsage[0x1];
	/*0238*/
};

enum _DUSM_DATAPLANSTATUS_RESERVED_BIT {
	DUSM_DATAPLANSTATUS_RESERVED_DISALLOW_PUBLIC_OVERWRITE = 0x1,
	DUSM_DATAPLANSTATUS_RESERVED_COST_SET_SOURCE = 0xe,
	DUSM_DATAPLANSTATUS_RESERVED_TIMEZONE_OFFSET_HOUR = 0x1f0,
	DUSM_DATAPLANSTATUS_RESERVED_TIMEZONE_OFFSET_MINUTE = 0x7e00,
	DUSM_DATAPLANSTATUS_RESERVED_TIMEZONE_OFFSET_SIGN = 0x8000,
	DUSM_DATAPLANSTATUS_RESERVED_TIMEZONE_ORIGINAL_RESET_DAY = 0x1f0000
};

enum _DUSM_DATAPLANUSAGE_STATUS {
	DUSM_DATAPLANUSAGE_STATUS_NOT_TRACKED = 0x0,
	DUSM_DATAPLANUSAGE_STATUS_UNDER_TRACK = 0x1,
	DUSM_DATAPLANUSAGE_STATUS_ON_TRACK = 0x2,
	DUSM_DATAPLANUSAGE_STATUS_OFF_TRACK = 0x3,
	DUSM_DATAPLANUSAGE_STATUS_OVER_LIMIT = 0x4,
	DUSM_DATAPLANUSAGE_STATUS_LAST = 0x5
};

struct _DUSM_DATAPLAN_STATUS {
	/*0000*/ _DUSM_USAGE_DATA UsageData;
	/*000c*/ ULONG DataLimitInMegabytes;
	/*0010*/ ULONG InboundBandwidthInKbps;
	/*0014*/ ULONG OutboundBandwidthInKbps;
	/*0018*/ _DUSM_BILLING_CYCLE_INFO BillingCycle;
	/*0034*/ _FILETIME NextBillingCycle;
	/*003c*/ ULONG MaxTransferSizeInMegabytes;
	/*0040*/ ULONG Reserved;
	/*0044*/
};

enum _DUSM_DPU_STATE {
	DUSM_DPU_STATE_UNKNOWN = 0x0,
	DUSM_DPU_STATE_OVER_LIMIT = 0x1,
	DUSM_DPU_STATE_OFF_TRACK = 0x2,
	DUSM_DPU_STATE_ON_TRACK = 0x3,
	DUSM_DPU_STATE_UNDER_TRACK = 0x4,
	DUSM_DPU_STATE_NOT_TRACKED = 0x5
};

enum _DUSM_INTERVAL_GRANULARITY {
	DUSM_INTERVAL_PER_MINUTE = 0x0,
	DUSM_INTERVAL_PER_HOUR = 0x1,
	DUSM_INTERVAL_PER_DAY = 0x2,
	DUSM_INTERVAL_TOTAL = 0x3
};

enum _DUSM_MEDIA_TYPE {
	DUSM_MEDIA_TYPE_UNKNOWN = 0x0,
	DUSM_MEDIA_TYPE_ETHERNET = 0x1,
	DUSM_MEDIA_TYPE_WLAN = 0x2,
	DUSM_MEDIA_TYPE_WWAN = 0x3
};

struct _DUSM_NETWORK_USAGE_INTERVAL {
	/*0000*/ ULONGLONG BytesSent;
	/*0008*/ ULONGLONG BytesReceived;
	/*0010*/ _FILETIME StartTime;
	/*0018*/ _FILETIME EndTime;
	/*0020*/
};

struct _DUSM_NETWORK_USAGE_INTERVAL_LIST {
	/*0000*/ ULONG NumberOfItems;
	/*0008*/ _DUSM_NETWORK_USAGE_INTERVAL UsageInterval[0x1];
	/*0028*/
};

struct _DUSM_OPERATOR_CYCLE_DATA {
	/*0000*/ ULONG dwDaysInCycle;
	/*0004*/ ULONG dwDaysIntoCycle;
	/*0008*/
};

struct _DUSM_PROVIDER_USAGE {
	/*0000*/ ULONGLONG BytesSent;
	/*0008*/ ULONGLONG BytesReceived;
	/*0010*/ WCHAR szProviderId[0x8];
	/*0020*/
};

struct _DUSM_PROVIDER_USAGE_LIST {
	/*0000*/ ULONG NumberOfItems;
	/*0008*/ _DUSM_PROVIDER_USAGE ProviderUsage[0x1];
	/*0028*/
};

enum _DUSM_SOURCE {
	DUSM_SOURCE_UNKNOWN = 0x0,
	DUSM_SOURCE_PUBLIC = 0x1,
	DUSM_SOURCE_USER = 0x2,
	DUSM_SOURCE_OPERATOR = 0x3
};

struct _DUSM_TIME_INTERVAL {
	/*0000*/ USHORT wYear;
	/*0002*/ USHORT wMonth;
	/*0004*/ USHORT wDay;
	/*0006*/ USHORT wHour;
	/*0008*/ USHORT wMinute;
	/*000a*/ USHORT wSecond;
	/*000c*/ USHORT wMilliseconds;
	/*000e*/
};

struct _DUSM_USAGE_DATA {
	/*0000*/ ULONG UsageInMegabytes;
	/*0004*/ _FILETIME LastSyncTime;
	/*000c*/
};

struct _DWORD_BLOB {
	/*0000*/ ULONG clSize;
	/*0004*/ ULONG alData[0x1];
	/*0008*/
};

struct _DYNAMIC_FUNCTION_TABLE {
	/*0000*/ _LIST_ENTRY ListEntry;
	/*0010*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionTable;
	/*0018*/ _LARGE_INTEGER TimeStamp;
	/*0020*/ ULONGLONG MinimumAddress;
	/*0028*/ ULONGLONG MaximumAddress;
	/*0030*/ ULONGLONG BaseAddress;
	/*0038*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * (* Callback)( ULONGLONG , void * );
	/*0040*/ void * Context;
	/*0048*/ WCHAR * OutOfProcessCallbackDll;
	/*0050*/ _FUNCTION_TABLE_TYPE Type;
	/*0054*/ ULONG EntryCount;
	/*0058*/ _RTL_BALANCED_NODE TreeNode;
	/*0070*/
};

struct _DnsAddr {
	
	/*0000*/ CHAR MaxSa[0x20];
	/*0020*/ <unnamed-type-Data> Data;
	/*0040*/
};

struct _DnsAddrArray {
	/*0000*/ ULONG MaxCount;
	/*0004*/ ULONG AddrCount;
	/*0008*/ ULONG Tag;
	/*000c*/ USHORT Family;
	/*000e*/ USHORT WordReserved;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG MatchFlag;
	/*0018*/ ULONG Reserved1;
	/*001c*/ ULONG Reserved2;
	/*0020*/ _DnsAddr AddrArray[0x1];
	/*0060*/
};

struct _DnsRRSet {
	/*0000*/ _DnsRecordW * pFirstRR;
	/*0008*/ _DnsRecordW * pLastRR;
	/*0010*/
};

struct _DnsRecordA {
	
	
	/*0000*/ _DnsRecordA * pNext;
	/*0008*/ CHAR * pName;
	/*0010*/ USHORT wType;
	/*0012*/ USHORT wDataLength;
	/*0014*/ <unnamed-type-Flags> Flags;
	/*0018*/ ULONG dwTtl;
	/*001c*/ ULONG dwReserved;
	/*0020*/ <unnamed-type-Data> Data;
	/*0058*/
};

struct _DnsRecordFlags {
	/*0000*/ ULONG Section : 02; // 0x00000003;
	/*0000*/ ULONG Delete : 01; // 0x00000004;
	/*0000*/ ULONG CharSet : 02; // 0x00000018;
	/*0000*/ ULONG Unused : 03; // 0x000000e0;
	/*0000*/ ULONG Reserved : 24; // 0xffffff00;
	/*0004*/
};

struct _DnsRecordOptA {
	
	
	/*0000*/ _DnsRecordA * pNext;
	/*0008*/ CHAR * pName;
	/*0010*/ USHORT wType;
	/*0012*/ USHORT wDataLength;
	/*0014*/ <unnamed-type-Flags> Flags;
	/*0018*/ _DNS_HEADER_EXT ExtHeader;
	/*001c*/ USHORT wPayloadSize;
	/*001e*/ USHORT wReserved;
	/*0020*/ <unnamed-type-Data> Data;
	/*0028*/
};

struct _DnsRecordOptW {
	
	
	/*0000*/ _DnsRecordW * pNext;
	/*0008*/ WCHAR * pName;
	/*0010*/ USHORT wType;
	/*0012*/ USHORT wDataLength;
	/*0014*/ <unnamed-type-Flags> Flags;
	/*0018*/ _DNS_HEADER_EXT ExtHeader;
	/*001c*/ USHORT wPayloadSize;
	/*001e*/ USHORT wReserved;
	/*0020*/ <unnamed-type-Data> Data;
	/*0028*/
};

struct _DnsRecordW {
	
	
	/*0000*/ _DnsRecordW * pNext;
	/*0008*/ WCHAR * pName;
	/*0010*/ USHORT wType;
	/*0012*/ USHORT wDataLength;
	/*0014*/ <unnamed-type-Flags> Flags;
	/*0018*/ ULONG dwTtl;
	/*001c*/ ULONG dwReserved;
	/*0020*/ <unnamed-type-Data> Data;
	/*0058*/
};

enum _DnsSection {
	DnsSectionQuestion = 0x0,
	DnsSectionAnswer = 0x1,
	DnsSectionAuthority = 0x2,
	DnsSectionAddtional = 0x3
};

struct _EAPHOST_IDENTITY_UI_PARAMS {
	/*0000*/ _EAP_METHOD_TYPE eapMethodType;
	/*0010*/ ULONG dwFlags;
	/*0014*/ ULONG dwSizeofConnectionData;
	/*0018*/ UCHAR * pConnectionData;
	/*0020*/ ULONG dwSizeofUserData;
	/*0028*/ UCHAR * pUserData;
	/*0030*/ ULONG dwSizeofUserDataOut;
	/*0038*/ UCHAR * pUserDataOut;
	/*0040*/ WCHAR * pwszIdentity;
	/*0048*/ ULONG dwError;
	/*0050*/ _EAP_ERROR * pEapError;
	/*0058*/
};

struct _EAPHOST_INTERACTIVE_UI_PARAMS {
	/*0000*/ ULONG dwSizeofContextData;
	/*0008*/ UCHAR * pContextData;
	/*0010*/ ULONG dwSizeofInteractiveUIData;
	/*0018*/ UCHAR * pInteractiveUIData;
	/*0020*/ ULONG dwError;
	/*0028*/ _EAP_ERROR * pEapError;
	/*0030*/
};

struct _EAP_ATTRIBUTE {
	/*0000*/ _EAP_ATTRIBUTE_TYPE eaType;
	/*0004*/ ULONG dwLength;
	/*0008*/ UCHAR * pValue;
	/*0010*/
};

struct _EAP_ATTRIBUTES {
	/*0000*/ ULONG dwNumberOfAttributes;
	/*0008*/ _EAP_ATTRIBUTE * pAttribs;
	/*0010*/
};

enum _EAP_ATTRIBUTE_TYPE {
	eatMinimum = 0x0,
	eatUserName = 0x1,
	eatUserPassword = 0x2,
	eatMD5CHAPPassword = 0x3,
	eatNASIPAddress = 0x4,
	eatNASPort = 0x5,
	eatServiceType = 0x6,
	eatFramedProtocol = 0x7,
	eatFramedIPAddress = 0x8,
	eatFramedIPNetmask = 0x9,
	eatFramedRouting = 0xa,
	eatFilterId = 0xb,
	eatFramedMTU = 0xc,
	eatFramedCompression = 0xd,
	eatLoginIPHost = 0xe,
	eatLoginService = 0xf,
	eatLoginTCPPort = 0x10,
	eatUnassigned17 = 0x11,
	eatReplyMessage = 0x12,
	eatCallbackNumber = 0x13,
	eatCallbackId = 0x14,
	eatUnassigned21 = 0x15,
	eatFramedRoute = 0x16,
	eatFramedIPXNetwork = 0x17,
	eatState = 0x18,
	eatClass = 0x19,
	eatVendorSpecific = 0x1a,
	eatSessionTimeout = 0x1b,
	eatIdleTimeout = 0x1c,
	eatTerminationAction = 0x1d,
	eatCalledStationId = 0x1e,
	eatCallingStationId = 0x1f,
	eatNASIdentifier = 0x20,
	eatProxyState = 0x21,
	eatLoginLATService = 0x22,
	eatLoginLATNode = 0x23,
	eatLoginLATGroup = 0x24,
	eatFramedAppleTalkLink = 0x25,
	eatFramedAppleTalkNetwork = 0x26,
	eatFramedAppleTalkZone = 0x27,
	eatAcctStatusType = 0x28,
	eatAcctDelayTime = 0x29,
	eatAcctInputOctets = 0x2a,
	eatAcctOutputOctets = 0x2b,
	eatAcctSessionId = 0x2c,
	eatAcctAuthentic = 0x2d,
	eatAcctSessionTime = 0x2e,
	eatAcctInputPackets = 0x2f,
	eatAcctOutputPackets = 0x30,
	eatAcctTerminateCause = 0x31,
	eatAcctMultiSessionId = 0x32,
	eatAcctLinkCount = 0x33,
	eatAcctEventTimeStamp = 0x37,
	eatMD5CHAPChallenge = 0x3c,
	eatNASPortType = 0x3d,
	eatPortLimit = 0x3e,
	eatLoginLATPort = 0x3f,
	eatTunnelType = 0x40,
	eatTunnelMediumType = 0x41,
	eatTunnelClientEndpoint = 0x42,
	eatTunnelServerEndpoint = 0x43,
	eatARAPPassword = 0x46,
	eatARAPFeatures = 0x47,
	eatARAPZoneAccess = 0x48,
	eatARAPSecurity = 0x49,
	eatARAPSecurityData = 0x4a,
	eatPasswordRetry = 0x4b,
	eatPrompt = 0x4c,
	eatConnectInfo = 0x4d,
	eatConfigurationToken = 0x4e,
	eatEAPMessage = 0x4f,
	eatSignature = 0x50,
	eatARAPChallengeResponse = 0x54,
	eatAcctInterimInterval = 0x55,
	eatNASIPv6Address = 0x5f,
	eatFramedInterfaceId = 0x60,
	eatFramedIPv6Prefix = 0x61,
	eatLoginIPv6Host = 0x62,
	eatFramedIPv6Route = 0x63,
	eatFramedIPv6Pool = 0x64,
	eatARAPGuestLogon = 0x1fa0,
	eatCertificateOID = 0x1fa1,
	eatEAPConfiguration = 0x1fa2,
	eatPEAPEmbeddedEAPTypeId = 0x1fa3,
	eatPEAPFastRoamedSession = 0x1fa4,
	eatFastRoamedSession = 0x1fa4,
	eatEAPTLV = 0x1fa6,
	eatCredentialsChanged = 0x1fa7,
	eatInnerEapMethodType = 0x1fa8,
	eatClearTextPassword = 0x1fab,
	eatQuarantineSoH = 0x1fd6,
	eatCertificateThumbprint = 0x203a,
	eatPeerId = 0x2328,
	eatServerId = 0x2329,
	eatMethodId = 0x232a,
	eatEMSK = 0x232b,
	eatSessionId = 0x232c,
	eatReserved = 0xffffffff
};

struct _EAP_CONFIG_INPUT_FIELD_ARRAY {
	/*0000*/ ULONG dwVersion;
	/*0004*/ ULONG dwNumberOfFields;
	/*0008*/ _EAP_CONFIG_INPUT_FIELD_DATA * pFields;
	/*0010*/
};

struct _EAP_CONFIG_INPUT_FIELD_DATA {
	/*0000*/ ULONG dwSize;
	/*0004*/ _EAP_CONFIG_INPUT_FIELD_TYPE Type;
	/*0008*/ ULONG dwFlagProps;
	/*0010*/ WCHAR * pwszLabel;
	/*0018*/ WCHAR * pwszData;
	/*0020*/ ULONG dwMinDataLength;
	/*0024*/ ULONG dwMaxDataLength;
	/*0028*/
};

enum _EAP_CONFIG_INPUT_FIELD_TYPE {
	EapConfigInputUsername = 0x0,
	EapConfigInputPassword = 0x1,
	EapConfigInputNetworkUsername = 0x2,
	EapConfigInputNetworkPassword = 0x3,
	EapConfigInputPin = 0x4,
	EapConfigInputPSK = 0x5,
	EapConfigInputEdit = 0x6,
	EapConfigSmartCardUsername = 0x7,
	EapConfigSmartCardError = 0x8
};

struct _EAP_CRED_EXPIRY_REQ {
	/*0000*/ _EAP_CONFIG_INPUT_FIELD_ARRAY curCreds;
	/*0010*/ _EAP_CONFIG_INPUT_FIELD_ARRAY newCreds;
	/*0020*/
};

struct _EAP_ERROR {
	/*0000*/ ULONG dwWinError;
	/*0004*/ _EAP_METHOD_TYPE type;
	/*0014*/ ULONG dwReasonCode;
	/*0018*/ _GUID rootCauseGuid;
	/*0028*/ _GUID repairGuid;
	/*0038*/ _GUID helpLinkGuid;
	/*0048*/ WCHAR * pRootCauseString;
	/*0050*/ WCHAR * pRepairString;
	/*0058*/
};

struct _EAP_INTERACTIVE_UI_DATA {
	/*0000*/ ULONG dwVersion;
	/*0004*/ ULONG dwSize;
	/*0008*/ _EAP_INTERACTIVE_UI_DATA_TYPE dwDataType;
	/*000c*/ ULONG cbUiData;
	/*0010*/ EAP_UI_DATA_FORMAT pbUiData;
	/*0018*/
};

enum _EAP_INTERACTIVE_UI_DATA_TYPE {
	EapCredReq = 0x0,
	EapCredResp = 0x1,
	EapCredExpiryReq = 0x2,
	EapCredExpiryResp = 0x3,
	EapCredLogonReq = 0x4,
	EapCredLogonResp = 0x5
};

struct _EAP_METHOD_INFO {
	/*0000*/ _EAP_METHOD_TYPE eaptype;
	/*0010*/ WCHAR * pwszAuthorName;
	/*0018*/ WCHAR * pwszFriendlyName;
	/*0020*/ ULONG eapProperties;
	/*0028*/ _EAP_METHOD_INFO * pInnerMethodInfo;
	/*0030*/
};

struct _EAP_METHOD_INFO_ARRAY {
	/*0000*/ ULONG dwNumberOfMethods;
	/*0008*/ _EAP_METHOD_INFO * pEapMethods;
	/*0010*/
};

struct _EAP_METHOD_INFO_ARRAY_EX {
	/*0000*/ ULONG dwNumberOfMethods;
	/*0008*/ _EAP_METHOD_INFO_EX * pEapMethods;
	/*0010*/
};

struct _EAP_METHOD_INFO_EX {
	/*0000*/ _EAP_METHOD_TYPE eaptype;
	/*0010*/ WCHAR * pwszAuthorName;
	/*0018*/ WCHAR * pwszFriendlyName;
	/*0020*/ ULONG eapProperties;
	/*0028*/ _EAP_METHOD_INFO_ARRAY_EX * pInnerMethodInfoArray;
	/*0030*/
};

struct _EAP_METHOD_PROPERTY {
	/*0000*/ _EAP_METHOD_PROPERTY_TYPE eapMethodPropertyType;
	/*0004*/ _EAP_METHOD_PROPERTY_VALUE_TYPE eapMethodPropertyValueType;
	/*0008*/ _EAP_METHOD_PROPERTY_VALUE eapMethodPropertyValue;
	/*0018*/
};

struct _EAP_METHOD_PROPERTY_ARRAY {
	/*0000*/ ULONG dwNumberOfProperties;
	/*0008*/ _EAP_METHOD_PROPERTY * pMethodProperty;
	/*0010*/
};

enum _EAP_METHOD_PROPERTY_TYPE {
	emptPropCipherSuiteNegotiation = 0x0,
	emptPropMutualAuth = 0x1,
	emptPropIntegrity = 0x2,
	emptPropReplayProtection = 0x3,
	emptPropConfidentiality = 0x4,
	emptPropKeyDerivation = 0x5,
	emptPropKeyStrength64 = 0x6,
	emptPropKeyStrength128 = 0x7,
	emptPropKeyStrength256 = 0x8,
	emptPropKeyStrength512 = 0x9,
	emptPropKeyStrength1024 = 0xa,
	emptPropDictionaryAttackResistance = 0xb,
	emptPropFastReconnect = 0xc,
	emptPropCryptoBinding = 0xd,
	emptPropSessionIndependence = 0xe,
	emptPropFragmentation = 0xf,
	emptPropChannelBinding = 0x10,
	emptPropNap = 0x11,
	emptPropStandalone = 0x12,
	emptPropMppeEncryption = 0x13,
	emptPropTunnelMethod = 0x14,
	emptPropSupportsConfig = 0x15,
	emptPropCertifiedMethod = 0x16,
	emptPropHiddenMethod = 0x17,
	emptPropMachineAuth = 0x18,
	emptPropUserAuth = 0x19,
	emptPropIdentityPrivacy = 0x1a,
	emptPropMethodChaining = 0x1b,
	emptPropSharedStateEquivalence = 0x1c,
	emptLegacyMethodPropertyFlag = 0x1f,
	emptPropVendorSpecific = 0xff
};

union _EAP_METHOD_PROPERTY_VALUE {
	/*0000*/ _EAP_METHOD_PROPERTY_VALUE_BOOL empvBool;
	/*0000*/ _EAP_METHOD_PROPERTY_VALUE_DWORD empvDword;
	/*0000*/ _EAP_METHOD_PROPERTY_VALUE_STRING empvString;
	/*0010*/
};

struct _EAP_METHOD_PROPERTY_VALUE_BOOL {
	/*0000*/ ULONG length;
	/*0004*/ INT value;
	/*0008*/
};

struct _EAP_METHOD_PROPERTY_VALUE_DWORD {
	/*0000*/ ULONG length;
	/*0004*/ ULONG value;
	/*0008*/
};

struct _EAP_METHOD_PROPERTY_VALUE_STRING {
	/*0000*/ ULONG length;
	/*0008*/ UCHAR * value;
	/*0010*/
};

enum _EAP_METHOD_PROPERTY_VALUE_TYPE {
	empvtBool = 0x0,
	empvtDword = 0x1,
	empvtString = 0x2
};

struct _EAP_METHOD_TYPE {
	/*0000*/ _EAP_TYPE eapType;
	/*000c*/ ULONG dwAuthorId;
	/*0010*/
};

struct _EAP_TYPE {
	/*0000*/ UCHAR type;
	/*0004*/ ULONG dwVendorId;
	/*0008*/ ULONG dwVendorType;
	/*000c*/
};

struct _EFI_DRIVER_ENTRY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Id;
	/*000c*/ ULONG FriendlyNameOffset;
	/*0010*/ ULONG DriverFilePathOffset;
	/*0014*/
};

struct _EFI_DRIVER_ENTRY_LIST {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _EFI_DRIVER_ENTRY DriverEntry;
	/*0018*/
};

struct _EISA_DMA_CONFIGURATION {
	/*0000*/ _DMA_CONFIGURATION_BYTE0 ConfigurationByte0;
	/*0001*/ _DMA_CONFIGURATION_BYTE1 ConfigurationByte1;
	/*0002*/
};

struct _EISA_IRQ_CONFIGURATION {
	/*0000*/ _EISA_IRQ_DESCRIPTOR ConfigurationByte;
	/*0001*/ UCHAR Reserved;
	/*0002*/
};

struct _EISA_IRQ_DESCRIPTOR {
	/*0000*/ UCHAR Interrupt : 04; // 0x0f;
	/*0000*/ UCHAR Reserved : 01; // 0x10;
	/*0000*/ UCHAR LevelTriggered : 01; // 0x20;
	/*0000*/ UCHAR Shared : 01; // 0x40;
	/*0000*/ UCHAR MoreEntries : 01; // 0x80;
	/*0001*/
};

struct _EISA_MEMORY_CONFIGURATION {
	/*0000*/ _EISA_MEMORY_TYPE ConfigurationByte;
	/*0001*/ UCHAR DataSize;
	/*0002*/ USHORT AddressLowWord;
	/*0004*/ UCHAR AddressHighByte;
	/*0005*/ USHORT MemorySize;
	/*0007*/
};

struct _EISA_MEMORY_TYPE {
	/*0000*/ UCHAR ReadWrite : 01; // 0x01;
	/*0000*/ UCHAR Cached : 01; // 0x02;
	/*0000*/ UCHAR Reserved0 : 01; // 0x04;
	/*0000*/ UCHAR Type : 02; // 0x18;
	/*0000*/ UCHAR Shared : 01; // 0x20;
	/*0000*/ UCHAR Reserved1 : 01; // 0x40;
	/*0000*/ UCHAR MoreEntries : 01; // 0x80;
	/*0001*/
};

struct _EISA_PORT_CONFIGURATION {
	/*0000*/ _EISA_PORT_DESCRIPTOR Configuration;
	/*0001*/ USHORT PortAddress;
	/*0003*/
};

struct _EISA_PORT_DESCRIPTOR {
	/*0000*/ UCHAR NumberPorts : 05; // 0x1f;
	/*0000*/ UCHAR Reserved : 01; // 0x20;
	/*0000*/ UCHAR Shared : 01; // 0x40;
	/*0000*/ UCHAR MoreEntries : 01; // 0x80;
	/*0001*/
};

struct _ENABLE_TRACE_PARAMETERS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG EnableProperty;
	/*0008*/ ULONG ControlFlags;
	/*000c*/ _GUID SourceId;
	/*0020*/ _EVENT_FILTER_DESCRIPTOR * EnableFilterDesc;
	/*0028*/ ULONG FilterDescCount;
	/*0030*/
};

struct _ENABLE_TRACE_PARAMETERS_V1 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG EnableProperty;
	/*0008*/ ULONG ControlFlags;
	/*000c*/ _GUID SourceId;
	/*0020*/ _EVENT_FILTER_DESCRIPTOR * EnableFilterDesc;
	/*0028*/
};

struct _ENCLAVE_CREATE_INFO_SGX {
	/*0000*/ UCHAR Secs[0x1000];
	/*1000*/
};

struct _ENCLAVE_CREATE_INFO_VBS {
	/*0000*/ ULONG Flags;
	/*0004*/ UCHAR OwnerID[0x20];
	/*0024*/
};

struct _ENCLAVE_CREATE_INFO_VBS_BASIC {
	/*0000*/ ULONG Flags;
	/*0004*/ UCHAR OwnerID[0x20];
	/*0024*/
};

struct _ENCLAVE_INIT_INFO_SGX {
	/*0000*/ UCHAR SigStruct[0x710];
	/*0710*/ UCHAR Reserved1[0xf0];
	/*0800*/ UCHAR EInitToken[0x130];
	/*0930*/ UCHAR Reserved2[0x6d0];
	/*1000*/
};

struct _ENCLAVE_INIT_INFO_VBS {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG ThreadCount;
	/*0008*/
};

struct _ENCLAVE_INIT_INFO_VBS_BASIC {
	/*0000*/ UCHAR FamilyId[0x10];
	/*0010*/ UCHAR ImageId[0x10];
	/*0020*/ ULONGLONG EnclaveSize;
	/*0028*/ ULONG EnclaveSvn;
	/*002c*/ ULONG Reserved;
	/*0030*/ void * SignatureInfoHandle;
	/*0030*/ ULONGLONG Unused;
	/*0038*/
};

struct _ENCLAVE_LOAD_DATA_VBS_BASIC {
	/*0000*/ ULONG PageType;
	/*0004*/
};

struct _ENCLAVE_LOAD_INFO_VBS {
	/*0000*/ void * ImageHandle;
	/*0000*/ ULONGLONG Unused;
	/*0008*/ USHORT NameLength;
	/*000a*/ WCHAR Name[0x1];
	/*0010*/
};

struct _ENCRYPTED_DATA_INFO {
	/*0000*/ ULONGLONG StartingFileOffset;
	/*0008*/ ULONG OutputBufferOffset;
	/*000c*/ ULONG BytesWithinFileSize;
	/*0010*/ ULONG BytesWithinValidDataLength;
	/*0014*/ USHORT CompressionFormat;
	/*0016*/ UCHAR DataUnitShift;
	/*0017*/ UCHAR ChunkShift;
	/*0018*/ UCHAR ClusterShift;
	/*0019*/ UCHAR EncryptionFormat;
	/*001a*/ USHORT NumberOfDataBlocks;
	/*001c*/ ULONG DataBlockSize[0x1];
	/*0020*/
};

struct _ENCRYPTION_BUFFER {
	/*0000*/ ULONG EncryptionOperation;
	/*0004*/ UCHAR Private[0x1];
	/*0008*/
};

struct _ENCRYPTION_KEY_CTRL_INPUT {
	/*0000*/ ULONG HeaderSize;
	/*0004*/ ULONG StructureSize;
	/*0008*/ USHORT KeyOffset;
	/*000a*/ USHORT KeySize;
	/*000c*/ ULONG DplLock;
	/*0010*/ ULONGLONG DplUserId;
	/*0018*/ ULONGLONG DplCredentialId;
	/*0020*/
};

struct _ENERGY_NOTIFICATION_ROW {
	/*0000*/ _NOTIFICATION_ENERGY ConsumedDelta;
	/*0010*/ ULONG dwCookie;
	/*0014*/
};

union _ENERGY_STATE_DURATION {
	/*0000*/ ULONGLONG Value;
	/*0000*/ ULONG LastChangeTime;
	/*0004*/ ULONG Duration : 31; // 0x7fffffff;
	/*0004*/ ULONG IsInState : 01; // 0x80000000;
	/*0008*/
};

struct _ENLISTMENT_BASIC_INFORMATION {
	/*0000*/ _GUID EnlistmentId;
	/*0010*/ _GUID TransactionId;
	/*0020*/ _GUID ResourceManagerId;
	/*0030*/
};

struct _ENLISTMENT_CRM_INFORMATION {
	/*0000*/ _GUID CrmTransactionManagerId;
	/*0010*/ _GUID CrmResourceManagerId;
	/*0020*/ _GUID CrmEnlistmentId;
	/*0030*/
};

enum _ENLISTMENT_INFORMATION_CLASS {
	EnlistmentBasicInformation = 0x0,
	EnlistmentRecoveryInformation = 0x1,
	EnlistmentCrmInformation = 0x2
};

struct _ENUM_FLAG_INTEGER_FOR_SIZE<1> {
	/*0001*/
};

struct _ENUM_FLAG_INTEGER_FOR_SIZE<2> {
	/*0001*/
};

struct _ENUM_FLAG_INTEGER_FOR_SIZE<4> {
	/*0001*/
};

struct _ENUM_FLAG_INTEGER_FOR_SIZE<8> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ABI::Windows::Foundation::Diagnostics::RoErrorReportingFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ACTIVATEOPTIONS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ADJACENT_DISPLAY_EDGES> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum AHTYPE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ASSOC_FILTER> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ASTA_TEST_MODE_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum CATEGORYINFO_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum CATSORT_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum CDCONTROLSTATEF> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum CM_ENUM_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum CM_MASK> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum CM_STATE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum DATAOBJ_GET_ITEM_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum DEFAULT_FOLDER_MENU_RESTRICTIONS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum DESKTOP_SLIDESHOW_OPTIONS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum DESKTOP_SLIDESHOW_STATE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum DIALOG_DPI_CHANGE_BEHAVIORS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum EXPLORER_BROWSER_FILL_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum EXPLORER_BROWSER_OPTIONS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum FILETYPEATTRIBUTEFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum FILE_OPERATION_FLAGS2> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum FOLDERFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum GETPROPERTYSTOREFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum HOMEGROUPSHARINGCHOICES> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum LIBRARYMANAGEDIALOGOPTIONS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum LIBRARYOPTIONFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum LIBRARYSAVEFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum MCFFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum NAMESPACEWALKFLAG> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum NP_CONNECTION_COST> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum NSTCFOLDERCAPABILITIES> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum NWMF> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ORIENTATION_PREFERENCE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum PLACEHOLDER_STATES> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum PROPDESC_FORMAT_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum PROPDESC_SEARCHINFO_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum PROPDESC_TYPE_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum PROPDESC_VIEW_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum ProcessPackageGraphFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum RO_ERROR_REPORTING_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum SIATTRIBFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum SLGP_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum SLR_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum STORAGE_PROVIDER_FILE_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum STPFLAG> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum SYNC_TRANSFER_STATUS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum TBPFLAG> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum THUMBBUTTONFLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum THUMBBUTTONMASK> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Foundation::Diagnostics::ErrorOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Foundation::Diagnostics::RoErrorReportingFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::ActivationFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::ActivationInfoFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::AppExecutionAliasFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::AppInstallerFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::ApplicationContentUriRuleFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::ApplicationExtensionFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::ApplicationFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::ApplicationType> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::BundlePackageFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::CacheActivationFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::CacheApplicationExtensionFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::CacheApplicationFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::CachePackageExtensionFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::CachePackageFlags2> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::CachePackageFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::ConnectedSetFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::CustomInstallFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::CustomInstallProcessFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::CustomInstallWorkFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::DefaultTileShowNameOnTiles> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::DependencyFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::DependencyType> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::PackageExtensionFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::PackageFlags2> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::PackageFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::PackageStatus> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::PackageType> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::ProvisionedPackageFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::RotationPreference> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::SRJournalFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::TileFlags> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Internal::StateRepository::TileType> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Networking::Connectivity::NetworkTypes> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Networking::Connectivity::RoamingStates> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Networking::Connectivity::WwanDataClass> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Networking::HostNameSortOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Storage::AccessCache::AccessCacheOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Storage::FileAttributes> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Storage::FileProperties::PropertyPrefetchOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Storage::FileProperties::ThumbnailOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Storage::Provider::CachedFileOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Storage::StorageItemTypes> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Storage::StorageOpenOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum Windows::Storage::Streams::InputStreamOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _RTL_FEATURE_CONFIGURATION_OPERATION> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _RTL_FEATURE_ENABLED_STATE_OPTIONS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _RTL_RESOURCE_POLICY_FLAGS> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum _SVGIO> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagAR_STATE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagNP_ENUM_NETWORK> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagNP_ENUM_NETWORK_INTERFACE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagNP_INTERFACE_PROPERTY_CHANGE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagNP_INTERFACE_STATE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagNP_NETWORK_PROPERTY_CHANGE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagNP_NETWORK_SIGNATURE_PROPERTY_CHANGE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagNP_NETWORK_STATE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum tagNP_PROFILE_STATE> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum wil::EventOptions> {
	/*0001*/
};

struct _ENUM_FLAG_SIZED_INTEGER<enum wil::details::ReportFailureOptions> {
	/*0001*/
};

struct _ENUM_SERVICE_STATUSA {
	/*0000*/ CHAR * lpServiceName;
	/*0008*/ CHAR * lpDisplayName;
	/*0010*/ _SERVICE_STATUS ServiceStatus;
	/*0030*/
};

struct _ENUM_SERVICE_STATUSW {
	/*0000*/ WCHAR * lpServiceName;
	/*0008*/ WCHAR * lpDisplayName;
	/*0010*/ _SERVICE_STATUS ServiceStatus;
	/*0030*/
};

struct _ENUM_SERVICE_STATUS_PROCESSA {
	/*0000*/ CHAR * lpServiceName;
	/*0008*/ CHAR * lpDisplayName;
	/*0010*/ _SERVICE_STATUS_PROCESS ServiceStatusProcess;
	/*0038*/
};

struct _ENUM_SERVICE_STATUS_PROCESSW {
	/*0000*/ WCHAR * lpServiceName;
	/*0008*/ WCHAR * lpDisplayName;
	/*0010*/ _SERVICE_STATUS_PROCESS ServiceStatusProcess;
	/*0038*/
};

struct _ERROR_NOTIFICATION {
	/*0000*/ ULONG cbEntryID;
	/*0008*/ ENTRYID * lpEntryID;
	/*0010*/ LONG scode;
	/*0014*/ ULONG ulFlags;
	/*0018*/ _MAPIERROR * lpMAPIError;
	/*0020*/
};

enum _ERROR_SEVERITY_VALUE {
	ErrorRecoverable = 0x0,
	ErrorFatal = 0x1,
	ErrorCorrected = 0x2,
	ErrorOthers = 0x3
};

struct _ETW_BUFFER_CONTEXT {
	/*0000*/ UCHAR ProcessorNumber;
	/*0001*/ UCHAR Alignment;
	/*0000*/ USHORT ProcessorIndex;
	/*0002*/ USHORT LoggerId;
	/*0004*/
};

enum _ETW_PROCESS_HANDLE_INFO_TYPE {
	EtwQueryPartitionInformation = 0x1,
	EtwQueryPartitionInformationV2 = 0x2,
	EtwQueryLastDroppedTimes = 0x3,
	EtwQueryProcessHandleInfoMax = 0x4
};

struct _ETW_TRACE_PARTITION_INFORMATION {
	/*0000*/ _GUID PartitionId;
	/*0010*/ _GUID ParentId;
	/*0020*/ LONGLONG QpcOffsetFromRoot;
	/*0028*/ ULONG PartitionType;
	/*0030*/
};

struct _ETW_TRACE_PARTITION_INFORMATION_V2 {
	/*0000*/ LONGLONG QpcOffsetFromRoot;
	/*0008*/ ULONG PartitionType;
	/*0010*/ WCHAR * PartitionId;
	/*0018*/ WCHAR * ParentId;
	/*0020*/
};

struct _EVENTLOGRECORD {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONG RecordNumber;
	/*000c*/ ULONG TimeGenerated;
	/*0010*/ ULONG TimeWritten;
	/*0014*/ ULONG EventID;
	/*0018*/ USHORT EventType;
	/*001a*/ USHORT NumStrings;
	/*001c*/ USHORT EventCategory;
	/*001e*/ USHORT ReservedFlags;
	/*0020*/ ULONG ClosingRecordNumber;
	/*0024*/ ULONG StringOffset;
	/*0028*/ ULONG UserSidLength;
	/*002c*/ ULONG UserSidOffset;
	/*0030*/ ULONG DataLength;
	/*0034*/ ULONG DataOffset;
	/*0038*/
};

struct _EVENTLOG_FULL_INFORMATION {
	/*0000*/ ULONG dwFull;
	/*0004*/
};

struct _EVENTSFORLOGFILE {
	/*0000*/ ULONG ulSize;
	/*0004*/ WCHAR szLogicalLogFile[0x100];
	/*0204*/ ULONG ulNumRecords;
	/*0208*/ _EVENTLOGRECORD pEventLogRecords[];
	/*0208*/
};

struct _EVENT_BASIC_INFORMATION {
	/*0000*/ _EVENT_TYPE EventType;
	/*0004*/ LONG EventState;
	/*0008*/
};

struct _EVENT_DATA_DESCRIPTOR {
	/*0000*/ ULONGLONG Ptr;
	/*0008*/ ULONG Size;
	/*000c*/ ULONG Reserved;
	/*000c*/ UCHAR Type;
	/*000d*/ UCHAR Reserved1;
	/*000e*/ USHORT Reserved2;
	/*0010*/
};

struct _EVENT_DESCRIPTOR {
	/*0000*/ USHORT Id;
	/*0002*/ UCHAR Version;
	/*0003*/ UCHAR Channel;
	/*0004*/ UCHAR Level;
	/*0005*/ UCHAR Opcode;
	/*0006*/ USHORT Task;
	/*0008*/ ULONGLONG Keyword;
	/*0010*/
};

struct _EVENT_FILTER_DESCRIPTOR {
	/*0000*/ ULONGLONG Ptr;
	/*0008*/ ULONG Size;
	/*000c*/ ULONG Type;
	/*0010*/
};

struct _EVENT_FILTER_EVENT_ID {
	/*0000*/ UCHAR FilterIn;
	/*0001*/ UCHAR Reserved;
	/*0002*/ USHORT Count;
	/*0004*/ USHORT Events[0x1];
	/*0006*/
};

struct _EVENT_FILTER_EVENT_NAME {
	/*0000*/ ULONGLONG MatchAnyKeyword;
	/*0008*/ ULONGLONG MatchAllKeyword;
	/*0010*/ UCHAR Level;
	/*0011*/ UCHAR FilterIn;
	/*0012*/ USHORT NameCount;
	/*0014*/ UCHAR Names[0x1];
	/*0018*/
};

struct _EVENT_FILTER_HEADER {
	/*0000*/ USHORT Id;
	/*0002*/ UCHAR Version;
	/*0003*/ UCHAR Reserved[0x5];
	/*0008*/ ULONGLONG InstanceId;
	/*0010*/ ULONG Size;
	/*0014*/ ULONG NextOffset;
	/*0018*/
};

struct _EVENT_FILTER_LEVEL_KW {
	/*0000*/ ULONGLONG MatchAnyKeyword;
	/*0008*/ ULONGLONG MatchAllKeyword;
	/*0010*/ UCHAR Level;
	/*0011*/ UCHAR FilterIn;
	/*0018*/
};

enum _EVENT_INFORMATION_CLASS {
	EventBasicInformation = 0x0
};

enum _EVENT_INFO_CLASS {
	EventProviderBinaryTrackInfo = 0x0,
	EventProviderSetReserved1 = 0x1,
	EventProviderSetTraits = 0x2,
	EventProviderUseDescriptorType = 0x3,
	MaxEventInfo = 0x4
};

struct _EVENT_INSTANCE_HEADER {
	
	/*0000*/ USHORT Size;
	/*0002*/ USHORT FieldTypeFlags;
	/*0002*/ UCHAR HeaderType;
	/*0003*/ UCHAR MarkerFlags;
	/*0004*/ ULONG Version;
	/*0004*/ <unnamed-type-Class> Class;
	/*0008*/ ULONG ThreadId;
	/*000c*/ ULONG ProcessId;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ ULONGLONG RegHandle;
	/*0020*/ ULONG InstanceId;
	/*0024*/ ULONG ParentInstanceId;
	/*0028*/ ULONG KernelTime;
	/*002c*/ ULONG UserTime;
	/*0028*/ ULONGLONG ProcessorTime;
	/*0028*/ ULONG EventId;
	/*002c*/ ULONG Flags;
	/*0030*/ ULONGLONG ParentRegHandle;
	/*0038*/
};

struct _EVENT_RECORD;

struct _EVENT_TRACE {
	/*0000*/ _EVENT_TRACE_HEADER Header;
	/*0030*/ ULONG InstanceId;
	/*0034*/ ULONG ParentInstanceId;
	/*0038*/ _GUID ParentGuid;
	/*0048*/ void * MofData;
	/*0050*/ ULONG MofLength;
	/*0054*/ ULONG ClientContext;
	/*0054*/ _ETW_BUFFER_CONTEXT BufferContext;
	/*0058*/
};

struct _EVENT_TRACE_HEADER {
	
	/*0000*/ USHORT Size;
	/*0002*/ USHORT FieldTypeFlags;
	/*0002*/ UCHAR HeaderType;
	/*0003*/ UCHAR MarkerFlags;
	/*0004*/ ULONG Version;
	/*0004*/ <unnamed-type-Class> Class;
	/*0008*/ ULONG ThreadId;
	/*000c*/ ULONG ProcessId;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _GUID Guid;
	/*0018*/ ULONGLONG GuidPtr;
	/*0028*/ ULONG KernelTime;
	/*002c*/ ULONG UserTime;
	/*0028*/ ULONGLONG ProcessorTime;
	/*0028*/ ULONG ClientContext;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _EVENT_TRACE_LOGFILEA {
	/*0000*/ CHAR * LogFileName;
	/*0008*/ CHAR * LoggerName;
	/*0010*/ LONGLONG CurrentTime;
	/*0018*/ ULONG BuffersRead;
	/*001c*/ ULONG LogFileMode;
	/*001c*/ ULONG ProcessTraceMode;
	/*0020*/ _EVENT_TRACE CurrentEvent;
	/*0078*/ _TRACE_LOGFILE_HEADER LogfileHeader;
	/*0190*/ ULONG (* BufferCallback)( _EVENT_TRACE_LOGFILEA * );
	/*0198*/ ULONG BufferSize;
	/*019c*/ ULONG Filled;
	/*01a0*/ ULONG EventsLost;
	/*01a8*/ void (* EventCallback)( _EVENT_TRACE * );
	/*01a8*/ void (* EventRecordCallback)( _EVENT_RECORD * );
	/*01b0*/ ULONG IsKernelTrace;
	/*01b8*/ void * Context;
	/*01c0*/
};

struct _EVENT_TRACE_LOGFILEW {
	/*0000*/ WCHAR * LogFileName;
	/*0008*/ WCHAR * LoggerName;
	/*0010*/ LONGLONG CurrentTime;
	/*0018*/ ULONG BuffersRead;
	/*001c*/ ULONG LogFileMode;
	/*001c*/ ULONG ProcessTraceMode;
	/*0020*/ _EVENT_TRACE CurrentEvent;
	/*0078*/ _TRACE_LOGFILE_HEADER LogfileHeader;
	/*0190*/ ULONG (* BufferCallback)( _EVENT_TRACE_LOGFILEW * );
	/*0198*/ ULONG BufferSize;
	/*019c*/ ULONG Filled;
	/*01a0*/ ULONG EventsLost;
	/*01a8*/ void (* EventCallback)( _EVENT_TRACE * );
	/*01a8*/ void (* EventRecordCallback)( _EVENT_RECORD * );
	/*01b0*/ ULONG IsKernelTrace;
	/*01b8*/ void * Context;
	/*01c0*/
};

struct _EVENT_TRACE_PROPERTIES {
	/*0000*/ _WNODE_HEADER Wnode;
	/*0030*/ ULONG BufferSize;
	/*0034*/ ULONG MinimumBuffers;
	/*0038*/ ULONG MaximumBuffers;
	/*003c*/ ULONG MaximumFileSize;
	/*0040*/ ULONG LogFileMode;
	/*0044*/ ULONG FlushTimer;
	/*0048*/ ULONG EnableFlags;
	/*004c*/ LONG AgeLimit;
	/*004c*/ LONG FlushThreshold;
	/*0050*/ ULONG NumberOfBuffers;
	/*0054*/ ULONG FreeBuffers;
	/*0058*/ ULONG EventsLost;
	/*005c*/ ULONG BuffersWritten;
	/*0060*/ ULONG LogBuffersLost;
	/*0064*/ ULONG RealTimeBuffersLost;
	/*0068*/ void * LoggerThreadId;
	/*0070*/ ULONG LogFileNameOffset;
	/*0074*/ ULONG LoggerNameOffset;
	/*0078*/
};

struct _EVENT_TRACE_PROPERTIES_V2 {
	/*0000*/ _WNODE_HEADER Wnode;
	/*0030*/ ULONG BufferSize;
	/*0034*/ ULONG MinimumBuffers;
	/*0038*/ ULONG MaximumBuffers;
	/*003c*/ ULONG MaximumFileSize;
	/*0040*/ ULONG LogFileMode;
	/*0044*/ ULONG FlushTimer;
	/*0048*/ ULONG EnableFlags;
	/*004c*/ LONG AgeLimit;
	/*004c*/ LONG FlushThreshold;
	/*0050*/ ULONG NumberOfBuffers;
	/*0054*/ ULONG FreeBuffers;
	/*0058*/ ULONG EventsLost;
	/*005c*/ ULONG BuffersWritten;
	/*0060*/ ULONG LogBuffersLost;
	/*0064*/ ULONG RealTimeBuffersLost;
	/*0068*/ void * LoggerThreadId;
	/*0070*/ ULONG LogFileNameOffset;
	/*0074*/ ULONG LoggerNameOffset;
	/*0078*/ ULONG VersionNumber : 08; // 0x000000ff;
	/*0078*/ ULONG V2Control;
	/*007c*/ ULONG FilterDescCount;
	/*0080*/ _EVENT_FILTER_DESCRIPTOR * FilterDesc;
	/*0088*/ ULONG Wow : 01; // 0x00000001;
	/*0088*/ ULONG QpcDeltaTracking : 01; // 0x00000002;
	/*0088*/ ULONG LargeMdlPages : 01; // 0x00000004;
	/*0088*/ ULONG ExcludeKernelStack : 01; // 0x00000008;
	/*0088*/ ULONGLONG V2Options;
	/*0090*/
};

enum _EVENT_TYPE {
	NotificationEvent = 0x0,
	SynchronizationEvent = 0x1
};

struct _EXCEPTION_DEBUG_INFO {
	/*0000*/ _EXCEPTION_RECORD ExceptionRecord;
	/*0098*/ ULONG dwFirstChance;
	/*00a0*/
};

enum _EXCEPTION_DISPOSITION {
	ExceptionContinueExecution = 0x0,
	ExceptionContinueSearch = 0x1,
	ExceptionNestedException = 0x2,
	ExceptionCollidedUnwind = 0x3
};

struct _EXCEPTION_LOG {
	/*0000*/ _EXCEPTION_RECORD ExceptionRecord;
	/*00a0*/ _CONTEXT ContextRecord;
	/*0570*/ _EXCEPTION_LOG_TYPE Type;
	/*0574*/ LONG Disposition;
	/*0578*/ ULONGLONG Thread;
	/*0580*/ ULONGLONG ControlPc;
	/*0588*/ void * Handler;
	/*0590*/
};

enum _EXCEPTION_LOG_TYPE {
	LogExceptionEmpty = 0x0,
	LogExceptionDispatch = 0x1,
	LogExceptionHandler = 0x2
};

struct _EXCEPTION_POINTERS {
	/*0000*/ _EXCEPTION_RECORD * ExceptionRecord;
	/*0008*/ _CONTEXT * ContextRecord;
	/*0010*/
};

struct _EXCEPTION_RECORD {
	/*0000*/ ULONG ExceptionCode;
	/*0004*/ ULONG ExceptionFlags;
	/*0008*/ _EXCEPTION_RECORD * ExceptionRecord;
	/*0010*/ void * ExceptionAddress;
	/*0018*/ ULONG NumberParameters;
	/*0020*/ ULONGLONG ExceptionInformation[0xf];
	/*0098*/
};

struct _EXCEPTION_RECORD32 {
	/*0000*/ ULONG ExceptionCode;
	/*0004*/ ULONG ExceptionFlags;
	/*0008*/ ULONG ExceptionRecord;
	/*000c*/ ULONG ExceptionAddress;
	/*0010*/ ULONG NumberParameters;
	/*0014*/ ULONG ExceptionInformation[0xf];
	/*0050*/
};

struct _EXCEPTION_RECORD64 {
	/*0000*/ ULONG ExceptionCode;
	/*0004*/ ULONG ExceptionFlags;
	/*0008*/ ULONGLONG ExceptionRecord;
	/*0010*/ ULONGLONG ExceptionAddress;
	/*0018*/ ULONG NumberParameters;
	/*001c*/ ULONG __unusedAlignment;
	/*0020*/ ULONGLONG ExceptionInformation[0xf];
	/*0098*/
};

struct _EXCEPTION_REGISTRATION_RECORD {
	/*0000*/ _EXCEPTION_REGISTRATION_RECORD * Next;
	/*0008*/ _EXCEPTION_DISPOSITION (* Handler)( _EXCEPTION_RECORD * , void * , _CONTEXT * , void * );
	/*0010*/
};

struct _EXFAT_STATISTICS {
	/*0000*/ ULONG CreateHits;
	/*0004*/ ULONG SuccessfulCreates;
	/*0008*/ ULONG FailedCreates;
	/*000c*/ ULONG NonCachedReads;
	/*0010*/ ULONG NonCachedReadBytes;
	/*0014*/ ULONG NonCachedWrites;
	/*0018*/ ULONG NonCachedWriteBytes;
	/*001c*/ ULONG NonCachedDiskReads;
	/*0020*/ ULONG NonCachedDiskWrites;
	/*0024*/
};

struct _EXIT_PROCESS_DEBUG_INFO {
	/*0000*/ ULONG dwExitCode;
	/*0004*/
};

struct _EXIT_THREAD_DEBUG_INFO {
	/*0000*/ ULONG dwExitCode;
	/*0004*/
};

enum _EXPCMDFLAGS {
	ECF_DEFAULT = 0x0,
	ECF_HASSUBCOMMANDS = 0x1,
	ECF_HASSPLITBUTTON = 0x2,
	ECF_HIDELABEL = 0x4,
	ECF_ISSEPARATOR = 0x8,
	ECF_HASLUASHIELD = 0x10,
	ECF_SEPARATORBEFORE = 0x20,
	ECF_SEPARATORAFTER = 0x40,
	ECF_ISDROPDOWN = 0x80,
	ECF_TOGGLEABLE = 0x100,
	ECF_AUTOMENUICONS = 0x200
};

enum _EXPCMDSTATE {
	ECS_ENABLED = 0x0,
	ECS_DISABLED = 0x1,
	ECS_HIDDEN = 0x2,
	ECS_CHECKBOX = 0x4,
	ECS_CHECKED = 0x8,
	ECS_RADIOCHECK = 0x10
};

enum _EXPLORERPANESTATE {
	EPS_DONTCARE = 0x0,
	EPS_DEFAULT_ON = 0x1,
	EPS_DEFAULT_OFF = 0x2,
	EPS_STATEMASK = 0xffff,
	EPS_INITIALSTATE = 0x10000,
	EPS_FORCE = 0x20000
};

enum _EXPPS {
	EXPPS_FILETYPES = 0x1
};

struct _EXTENDED_ENCRYPTED_DATA_INFO {
	/*0000*/ ULONG ExtendedCode;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Reserved;
	/*0010*/
};

struct _EXTENDED_NOTIFICATION {
	/*0000*/ ULONG ulEvent;
	/*0004*/ ULONG cb;
	/*0008*/ UCHAR * pbEventParameters;
	/*0010*/
};

struct _EXTENT_READ_CACHE_INFO_BUFFER {
	/*0000*/ _LARGE_INTEGER AllocatedCache;
	/*0008*/ _LARGE_INTEGER PopulatedCache;
	/*0010*/ _LARGE_INTEGER InErrorCache;
	/*0018*/
};

struct _EX_WNF_SUBSCRIPTION;

struct _EapCertificateCredential {
	/*0000*/ UCHAR certHash[0x14];
	/*0018*/ WCHAR * password;
	/*0020*/
};

struct _EapCredential {
	/*0000*/ _EapCredentialType credType;
	/*0008*/ EapCredentialTypeData credData;
	/*0028*/
};

enum _EapCredentialType {
	EAP_EMPTY_CREDENTIAL = 0x0,
	EAP_USERNAME_PASSWORD_CREDENTIAL = 0x1,
	EAP_WINLOGON_CREDENTIAL = 0x2,
	EAP_CERTIFICATE_CREDENTIAL = 0x3,
	EAP_SIM_CREDENTIAL = 0x4
};

struct _EapSimCredential {
	/*0000*/ WCHAR * iccID;
	/*0008*/
};

struct _EapUsernamePasswordCredential {
	/*0000*/ WCHAR * username;
	/*0008*/ WCHAR * password;
	/*0010*/
};

struct _FAT_STATISTICS {
	/*0000*/ ULONG CreateHits;
	/*0004*/ ULONG SuccessfulCreates;
	/*0008*/ ULONG FailedCreates;
	/*000c*/ ULONG NonCachedReads;
	/*0010*/ ULONG NonCachedReadBytes;
	/*0014*/ ULONG NonCachedWrites;
	/*0018*/ ULONG NonCachedWriteBytes;
	/*001c*/ ULONG NonCachedDiskReads;
	/*0020*/ ULONG NonCachedDiskWrites;
	/*0024*/
};

struct _FDSA {
	/*0000*/ INT cItem;
	/*0008*/ void * aItem;
	/*0010*/ INT cItemAlloc;
	/*0014*/ INT cItemGrow : 08; // 0x000000ff;
	/*0014*/ INT cbItem : 08; // 0x0000ff00;
	/*0014*/ UINT fAllocated : 01; // 0x00010000;
	/*0014*/ UINT unused : 15; // 0xfffe0000;
	/*0018*/
};

struct _FIBER {
	/*0000*/ void * FiberData;
	/*0008*/ _EXCEPTION_REGISTRATION_RECORD * ExceptionList;
	/*0010*/ void * StackBase;
	/*0018*/ void * StackLimit;
	/*0020*/ void * DeallocationStack;
	/*0030*/ _CONTEXT FiberContext;
	/*0500*/ _Wx86TIB * Wx86Tib;
	/*0508*/ _ACTIVATION_CONTEXT_STACK * ActivationContextStackPointer;
	/*0510*/ void * FlsData;
	/*0518*/ ULONG GuaranteedStackBytes;
	/*051c*/ USHORT TebFlags;
	/*051e*/ USHORT ReservedPad;
	/*0520*/ ULONGLONG FiberCookie;
	/*0530*/
};

struct _FILEMUIINFO {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwVersion;
	/*0008*/ ULONG dwFileType;
	/*000c*/ UCHAR pChecksum[0x10];
	/*001c*/ UCHAR pServiceChecksum[0x10];
	/*002c*/ ULONG dwLanguageNameOffset;
	/*0030*/ ULONG dwTypeIDMainSize;
	/*0034*/ ULONG dwTypeIDMainOffset;
	/*0038*/ ULONG dwTypeNameMainOffset;
	/*003c*/ ULONG dwTypeIDMUISize;
	/*0040*/ ULONG dwTypeIDMUIOffset;
	/*0044*/ ULONG dwTypeNameMUIOffset;
	/*0048*/ UCHAR abBuffer[0x8];
	/*0050*/
};

struct _FILEOFFSET_INFORMATION {
	/*0000*/ ULONGLONG DontUse : 09; // 0x00000000000001ff;
	/*0000*/ ULONGLONG Offset : 48; // 0x01fffffffffffe00;
	/*0000*/ ULONGLONG Reserved : 07; // 0xfe00000000000000;
	/*0008*/
};

enum _FILEOPENDIALOGOPTIONS {
	FOS_OVERWRITEPROMPT = 0x2,
	FOS_STRICTFILETYPES = 0x4,
	FOS_NOCHANGEDIR = 0x8,
	FOS_PICKFOLDERS = 0x20,
	FOS_FORCEFILESYSTEM = 0x40,
	FOS_ALLNONSTORAGEITEMS = 0x80,
	FOS_NOVALIDATE = 0x100,
	FOS_ALLOWMULTISELECT = 0x200,
	FOS_PATHMUSTEXIST = 0x800,
	FOS_FILEMUSTEXIST = 0x1000,
	FOS_CREATEPROMPT = 0x2000,
	FOS_SHAREAWARE = 0x4000,
	FOS_NOREADONLYRETURN = 0x8000,
	FOS_NOTESTFILECREATE = 0x10000,
	FOS_HIDEMRUPLACES = 0x20000,
	FOS_HIDEPINNEDPLACES = 0x40000,
	FOS_NODEREFERENCELINKS = 0x100000,
	FOS_OKBUTTONNEEDSINTERACTION = 0x200000,
	FOS_DONTADDTORECENT = 0x2000000,
	FOS_FORCESHOWHIDDEN = 0x10000000,
	FOS_DEFAULTNOMINIMODE = 0x20000000,
	FOS_FORCEPREVIEWPANEON = 0x40000000,
	FOS_SUPPORTSTREAMABLEITEMS = 0x80000000
};

struct _FILESYSTEM_STATISTICS {
	/*0000*/ USHORT FileSystemType;
	/*0002*/ USHORT Version;
	/*0004*/ ULONG SizeOfCompleteStructure;
	/*0008*/ ULONG UserFileReads;
	/*000c*/ ULONG UserFileReadBytes;
	/*0010*/ ULONG UserDiskReads;
	/*0014*/ ULONG UserFileWrites;
	/*0018*/ ULONG UserFileWriteBytes;
	/*001c*/ ULONG UserDiskWrites;
	/*0020*/ ULONG MetaDataReads;
	/*0024*/ ULONG MetaDataReadBytes;
	/*0028*/ ULONG MetaDataDiskReads;
	/*002c*/ ULONG MetaDataWrites;
	/*0030*/ ULONG MetaDataWriteBytes;
	/*0034*/ ULONG MetaDataDiskWrites;
	/*0038*/
};

struct _FILESYSTEM_STATISTICS_EX {
	/*0000*/ USHORT FileSystemType;
	/*0002*/ USHORT Version;
	/*0004*/ ULONG SizeOfCompleteStructure;
	/*0008*/ ULONGLONG UserFileReads;
	/*0010*/ ULONGLONG UserFileReadBytes;
	/*0018*/ ULONGLONG UserDiskReads;
	/*0020*/ ULONGLONG UserFileWrites;
	/*0028*/ ULONGLONG UserFileWriteBytes;
	/*0030*/ ULONGLONG UserDiskWrites;
	/*0038*/ ULONGLONG MetaDataReads;
	/*0040*/ ULONGLONG MetaDataReadBytes;
	/*0048*/ ULONGLONG MetaDataDiskReads;
	/*0050*/ ULONGLONG MetaDataWrites;
	/*0058*/ ULONGLONG MetaDataWriteBytes;
	/*0060*/ ULONGLONG MetaDataDiskWrites;
	/*0068*/
};

struct _FILETIME {
	/*0000*/ ULONG dwLowDateTime;
	/*0004*/ ULONG dwHighDateTime;
	/*0008*/
};

struct _FILE_ACCESS_INFORMATION {
	/*0000*/ ULONG AccessFlags;
	/*0004*/
};

struct _FILE_ALIGNMENT_INFO {
	/*0000*/ ULONG AlignmentRequirement;
	/*0004*/
};

struct _FILE_ALIGNMENT_INFORMATION {
	/*0000*/ ULONG AlignmentRequirement;
	/*0004*/
};

struct _FILE_ALLOCATED_RANGE_BUFFER {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER Length;
	/*0010*/
};

struct _FILE_ALLOCATION_INFO {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/
};

struct _FILE_ALLOCATION_INFORMATION {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/
};

struct _FILE_ALL_INFORMATION {
	/*0000*/ _FILE_BASIC_INFORMATION BasicInformation;
	/*0028*/ _FILE_STANDARD_INFORMATION StandardInformation;
	/*0040*/ _FILE_INTERNAL_INFORMATION InternalInformation;
	/*0048*/ _FILE_EA_INFORMATION EaInformation;
	/*004c*/ _FILE_ACCESS_INFORMATION AccessInformation;
	/*0050*/ _FILE_POSITION_INFORMATION PositionInformation;
	/*0058*/ _FILE_MODE_INFORMATION ModeInformation;
	/*005c*/ _FILE_ALIGNMENT_INFORMATION AlignmentInformation;
	/*0060*/ _FILE_NAME_INFORMATION NameInformation;
	/*0068*/
};

struct _FILE_ATTRIBUTE_TAG_INFO {
	/*0000*/ ULONG FileAttributes;
	/*0004*/ ULONG ReparseTag;
	/*0008*/
};

struct _FILE_ATTRIBUTE_TAG_INFORMATION {
	/*0000*/ ULONG FileAttributes;
	/*0004*/ ULONG ReparseTag;
	/*0008*/
};

struct _FILE_BASIC_INFO {
	/*0000*/ _LARGE_INTEGER CreationTime;
	/*0008*/ _LARGE_INTEGER LastAccessTime;
	/*0010*/ _LARGE_INTEGER LastWriteTime;
	/*0018*/ _LARGE_INTEGER ChangeTime;
	/*0020*/ ULONG FileAttributes;
	/*0028*/
};

struct _FILE_BASIC_INFORMATION {
	/*0000*/ _LARGE_INTEGER CreationTime;
	/*0008*/ _LARGE_INTEGER LastAccessTime;
	/*0010*/ _LARGE_INTEGER LastWriteTime;
	/*0018*/ _LARGE_INTEGER ChangeTime;
	/*0020*/ ULONG FileAttributes;
	/*0028*/
};

struct _FILE_BOTH_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ CHAR ShortNameLength;
	/*0046*/ WCHAR ShortName[0xc];
	/*005e*/ WCHAR FileName[0x1];
	/*0060*/
};

struct _FILE_CASE_SENSITIVE_INFO {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_CASE_SENSITIVE_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_COMPLETION_INFORMATION {
	/*0000*/ void * Port;
	/*0008*/ void * Key;
	/*0010*/
};

struct _FILE_COMPRESSION_INFO {
	/*0000*/ _LARGE_INTEGER CompressedFileSize;
	/*0008*/ USHORT CompressionFormat;
	/*000a*/ UCHAR CompressionUnitShift;
	/*000b*/ UCHAR ChunkShift;
	/*000c*/ UCHAR ClusterShift;
	/*000d*/ UCHAR Reserved[0x3];
	/*0010*/
};

struct _FILE_COMPRESSION_INFORMATION {
	/*0000*/ _LARGE_INTEGER CompressedFileSize;
	/*0008*/ USHORT CompressionFormat;
	/*000a*/ UCHAR CompressionUnitShift;
	/*000b*/ UCHAR ChunkShift;
	/*000c*/ UCHAR ClusterShift;
	/*000d*/ UCHAR Reserved[0x3];
	/*0010*/
};

struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION {
	/*0000*/ _FILE_STORAGE_TIER_CLASS Class;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _FILE_DIRECTORY_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ WCHAR FileName[0x1];
	/*0048*/
};

struct _FILE_DISPOSITION_INFO {
	/*0000*/ UCHAR DeleteFileW;
	/*0001*/
};

struct _FILE_DISPOSITION_INFORMATION {
	/*0000*/ UCHAR DeleteFile;
	/*0001*/
};

struct _FILE_DISPOSITION_INFORMATION_EX {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_DISPOSITION_INFO_EX {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_EA_INFORMATION {
	/*0000*/ ULONG EaSize;
	/*0004*/
};

struct _FILE_END_OF_FILE_INFO {
	/*0000*/ _LARGE_INTEGER EndOfFile;
	/*0008*/
};

struct _FILE_END_OF_FILE_INFORMATION {
	/*0000*/ _LARGE_INTEGER EndOfFile;
	/*0008*/
};

struct _FILE_END_OF_FILE_INFORMATION_EX {
	/*0000*/ _LARGE_INTEGER EndOfFile;
	/*0008*/ _LARGE_INTEGER PagingFileSizeInMM;
	/*0010*/ _LARGE_INTEGER PagingFileMaxSize;
	/*0018*/ ULONG Flags;
	/*0020*/
};

struct _FILE_FS_ATTRIBUTE_INFORMATION {
	/*0000*/ ULONG FileSystemAttributes;
	/*0004*/ LONG MaximumComponentNameLength;
	/*0008*/ ULONG FileSystemNameLength;
	/*000c*/ WCHAR FileSystemName[0x1];
	/*0010*/
};

struct _FILE_FS_CONTROL_INFORMATION {
	/*0000*/ _LARGE_INTEGER FreeSpaceStartFiltering;
	/*0008*/ _LARGE_INTEGER FreeSpaceThreshold;
	/*0010*/ _LARGE_INTEGER FreeSpaceStopFiltering;
	/*0018*/ _LARGE_INTEGER DefaultQuotaThreshold;
	/*0020*/ _LARGE_INTEGER DefaultQuotaLimit;
	/*0028*/ ULONG FileSystemControlFlags;
	/*0030*/
};

struct _FILE_FS_DATA_COPY_INFORMATION {
	/*0000*/ ULONG NumberOfCopies;
	/*0004*/
};

struct _FILE_FS_DEVICE_INFORMATION {
	/*0000*/ ULONG DeviceType;
	/*0004*/ ULONG Characteristics;
	/*0008*/
};

struct _FILE_FS_DRIVER_PATH_INFORMATION {
	/*0000*/ UCHAR DriverInPath;
	/*0004*/ ULONG DriverNameLength;
	/*0008*/ WCHAR DriverName[0x1];
	/*000c*/
};

struct _FILE_FS_FULL_SIZE_INFORMATION {
	/*0000*/ _LARGE_INTEGER TotalAllocationUnits;
	/*0008*/ _LARGE_INTEGER CallerAvailableAllocationUnits;
	/*0010*/ _LARGE_INTEGER ActualAvailableAllocationUnits;
	/*0018*/ ULONG SectorsPerAllocationUnit;
	/*001c*/ ULONG BytesPerSector;
	/*0020*/
};

struct _FILE_FS_FULL_SIZE_INFORMATION_EX {
	/*0000*/ ULONGLONG ActualTotalAllocationUnits;
	/*0008*/ ULONGLONG ActualAvailableAllocationUnits;
	/*0010*/ ULONGLONG ActualPoolUnavailableAllocationUnits;
	/*0018*/ ULONGLONG CallerTotalAllocationUnits;
	/*0020*/ ULONGLONG CallerAvailableAllocationUnits;
	/*0028*/ ULONGLONG CallerPoolUnavailableAllocationUnits;
	/*0030*/ ULONGLONG UsedAllocationUnits;
	/*0038*/ ULONGLONG TotalReservedAllocationUnits;
	/*0040*/ ULONGLONG VolumeStorageReserveAllocationUnits;
	/*0048*/ ULONGLONG AvailableCommittedAllocationUnits;
	/*0050*/ ULONGLONG PoolAvailableAllocationUnits;
	/*0058*/ ULONG SectorsPerAllocationUnit;
	/*005c*/ ULONG BytesPerSector;
	/*0060*/
};

struct _FILE_FS_LABEL_INFORMATION {
	/*0000*/ ULONG VolumeLabelLength;
	/*0004*/ WCHAR VolumeLabel[0x1];
	/*0008*/
};

struct _FILE_FS_METADATA_SIZE_INFORMATION {
	/*0000*/ _LARGE_INTEGER TotalMetadataAllocationUnits;
	/*0008*/ ULONG SectorsPerAllocationUnit;
	/*000c*/ ULONG BytesPerSector;
	/*0010*/
};

struct _FILE_FS_OBJECTID_INFORMATION {
	/*0000*/ UCHAR ObjectId[0x10];
	/*0010*/ UCHAR ExtendedInfo[0x30];
	/*0040*/
};

struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {
	/*0000*/ ULONG VolumeFlags;
	/*0004*/ ULONG FlagMask;
	/*0008*/ ULONG Version;
	/*000c*/ ULONG Reserved;
	/*0010*/
};

struct _FILE_FS_SECTOR_SIZE_INFORMATION {
	/*0000*/ ULONG LogicalBytesPerSector;
	/*0004*/ ULONG PhysicalBytesPerSectorForAtomicity;
	/*0008*/ ULONG PhysicalBytesPerSectorForPerformance;
	/*000c*/ ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG ByteOffsetForSectorAlignment;
	/*0018*/ ULONG ByteOffsetForPartitionAlignment;
	/*001c*/
};

struct _FILE_FS_SIZE_INFORMATION {
	/*0000*/ _LARGE_INTEGER TotalAllocationUnits;
	/*0008*/ _LARGE_INTEGER AvailableAllocationUnits;
	/*0010*/ ULONG SectorsPerAllocationUnit;
	/*0014*/ ULONG BytesPerSector;
	/*0018*/
};

struct _FILE_FS_VOLUME_FLAGS_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_FS_VOLUME_INFORMATION {
	/*0000*/ _LARGE_INTEGER VolumeCreationTime;
	/*0008*/ ULONG VolumeSerialNumber;
	/*000c*/ ULONG VolumeLabelLength;
	/*0010*/ UCHAR SupportsObjects;
	/*0012*/ WCHAR VolumeLabel[0x1];
	/*0018*/
};

struct _FILE_FULL_DIR_INFO {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ WCHAR FileName[0x1];
	/*0048*/
};

struct _FILE_FULL_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ WCHAR FileName[0x1];
	/*0048*/
};

struct _FILE_FULL_EA_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ UCHAR Flags;
	/*0005*/ UCHAR EaNameLength;
	/*0006*/ USHORT EaValueLength;
	/*0008*/ CHAR EaName[0x1];
	/*000c*/
};

struct _FILE_GET_EA_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ UCHAR EaNameLength;
	/*0005*/ CHAR EaName[0x1];
	/*0008*/
};

struct _FILE_GET_QUOTA_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG SidLength;
	/*0008*/ _SID Sid;
	/*0014*/
};

struct _FILE_ID_128 {
	/*0000*/ UCHAR Identifier[0x10];
	/*0010*/
};

struct _FILE_ID_BOTH_DIR_INFO {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ CHAR ShortNameLength;
	/*0046*/ WCHAR ShortName[0xc];
	/*0060*/ _LARGE_INTEGER FileId;
	/*0068*/ WCHAR FileName[0x1];
	/*0070*/
};

struct _FILE_ID_BOTH_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ CHAR ShortNameLength;
	/*0046*/ WCHAR ShortName[0xc];
	/*0060*/ _LARGE_INTEGER FileId;
	/*0068*/ WCHAR FileName[0x1];
	/*0070*/
};

struct _FILE_ID_EXTD_BOTH_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ ULONG ReparsePointTag;
	/*0048*/ _FILE_ID_128 FileId;
	/*0058*/ CHAR ShortNameLength;
	/*005a*/ WCHAR ShortName[0xc];
	/*0072*/ WCHAR FileName[0x1];
	/*0078*/
};

struct _FILE_ID_EXTD_DIR_INFO {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ ULONG ReparsePointTag;
	/*0048*/ _FILE_ID_128 FileId;
	/*0058*/ WCHAR FileName[0x1];
	/*0060*/
};

struct _FILE_ID_EXTD_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0044*/ ULONG ReparsePointTag;
	/*0048*/ _FILE_ID_128 FileId;
	/*0058*/ WCHAR FileName[0x1];
	/*0060*/
};

struct _FILE_ID_FULL_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ ULONG EaSize;
	/*0048*/ _LARGE_INTEGER FileId;
	/*0050*/ WCHAR FileName[0x1];
	/*0058*/
};

struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ _LARGE_INTEGER AllocationSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG FileNameLength;
	/*0040*/ _LARGE_INTEGER FileId;
	/*0048*/ _GUID LockingTransactionId;
	/*0058*/ ULONG TxInfoFlags;
	/*005c*/ WCHAR FileName[0x1];
	/*0060*/
};

struct _FILE_ID_INFO {
	/*0000*/ ULONGLONG VolumeSerialNumber;
	/*0008*/ _FILE_ID_128 FileId;
	/*0018*/
};

struct _FILE_ID_INFORMATION {
	/*0000*/ ULONGLONG VolumeSerialNumber;
	/*0008*/ _FILE_ID_128 FileId;
	/*0018*/
};

enum _FILE_ID_TYPE {
	FileIdType = 0x0,
	ObjectIdType = 0x1,
	ExtendedFileIdType = 0x2,
	MaximumFileIdType = 0x3
};

enum _FILE_INFORMATION_CLASS {
	FileDirectoryInformation = 0x1,
	FileFullDirectoryInformation = 0x2,
	FileBothDirectoryInformation = 0x3,
	FileBasicInformation = 0x4,
	FileStandardInformation = 0x5,
	FileInternalInformation = 0x6,
	FileEaInformation = 0x7,
	FileAccessInformation = 0x8,
	FileNameInformation = 0x9,
	FileRenameInformation = 0xa,
	FileLinkInformation = 0xb,
	FileNamesInformation = 0xc,
	FileDispositionInformation = 0xd,
	FilePositionInformation = 0xe,
	FileFullEaInformation = 0xf,
	FileModeInformation = 0x10,
	FileAlignmentInformation = 0x11,
	FileAllInformation = 0x12,
	FileAllocationInformation = 0x13,
	FileEndOfFileInformation = 0x14,
	FileAlternateNameInformation = 0x15,
	FileStreamInformation = 0x16,
	FilePipeInformation = 0x17,
	FilePipeLocalInformation = 0x18,
	FilePipeRemoteInformation = 0x19,
	FileMailslotQueryInformation = 0x1a,
	FileMailslotSetInformation = 0x1b,
	FileCompressionInformation = 0x1c,
	FileObjectIdInformation = 0x1d,
	FileCompletionInformation = 0x1e,
	FileMoveClusterInformation = 0x1f,
	FileQuotaInformation = 0x20,
	FileReparsePointInformation = 0x21,
	FileNetworkOpenInformation = 0x22,
	FileAttributeTagInformation = 0x23,
	FileTrackingInformation = 0x24,
	FileIdBothDirectoryInformation = 0x25,
	FileIdFullDirectoryInformation = 0x26,
	FileValidDataLengthInformation = 0x27,
	FileShortNameInformation = 0x28,
	FileIoCompletionNotificationInformation = 0x29,
	FileIoStatusBlockRangeInformation = 0x2a,
	FileIoPriorityHintInformation = 0x2b,
	FileSfioReserveInformation = 0x2c,
	FileSfioVolumeInformation = 0x2d,
	FileHardLinkInformation = 0x2e,
	FileProcessIdsUsingFileInformation = 0x2f,
	FileNormalizedNameInformation = 0x30,
	FileNetworkPhysicalNameInformation = 0x31,
	FileIdGlobalTxDirectoryInformation = 0x32,
	FileIsRemoteDeviceInformation = 0x33,
	FileUnusedInformation = 0x34,
	FileNumaNodeInformation = 0x35,
	FileStandardLinkInformation = 0x36,
	FileRemoteProtocolInformation = 0x37,
	FileRenameInformationBypassAccessCheck = 0x38,
	FileLinkInformationBypassAccessCheck = 0x39,
	FileVolumeNameInformation = 0x3a,
	FileIdInformation = 0x3b,
	FileIdExtdDirectoryInformation = 0x3c,
	FileReplaceCompletionInformation = 0x3d,
	FileHardLinkFullIdInformation = 0x3e,
	FileIdExtdBothDirectoryInformation = 0x3f,
	FileDispositionInformationEx = 0x40,
	FileRenameInformationEx = 0x41,
	FileRenameInformationExBypassAccessCheck = 0x42,
	FileDesiredStorageClassInformation = 0x43,
	FileStatInformation = 0x44,
	FileMemoryPartitionInformation = 0x45,
	FileStatLxInformation = 0x46,
	FileCaseSensitiveInformation = 0x47,
	FileLinkInformationEx = 0x48,
	FileLinkInformationExBypassAccessCheck = 0x49,
	FileStorageReserveIdInformation = 0x4a,
	FileCaseSensitiveInformationForceAccessCheck = 0x4b,
	FileMaximumInformation = 0x4c
};

enum _FILE_INFO_BY_HANDLE_CLASS {
	FileBasicInfo = 0x0,
	FileStandardInfo = 0x1,
	FileNameInfo = 0x2,
	FileRenameInfo = 0x3,
	FileDispositionInfo = 0x4,
	FileAllocationInfo = 0x5,
	FileEndOfFileInfo = 0x6,
	FileStreamInfo = 0x7,
	FileCompressionInfo = 0x8,
	FileAttributeTagInfo = 0x9,
	FileIdBothDirectoryInfo = 0xa,
	FileIdBothDirectoryRestartInfo = 0xb,
	FileIoPriorityHintInfo = 0xc,
	FileRemoteProtocolInfo = 0xd,
	FileFullDirectoryInfo = 0xe,
	FileFullDirectoryRestartInfo = 0xf,
	FileStorageInfo = 0x10,
	FileAlignmentInfo = 0x11,
	FileIdInfo = 0x12,
	FileIdExtdDirectoryInfo = 0x13,
	FileIdExtdDirectoryRestartInfo = 0x14,
	FileDispositionInfoEx = 0x15,
	FileRenameInfoEx = 0x16,
	FileCaseSensitiveInfo = 0x17,
	FileNormalizedNameInfo = 0x18,
	MaximumFileInfoByHandleClass = 0x19
};

struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
	/*0000*/ ULONGLONG Hint1;
	/*0008*/ ULONGLONG Hint2;
	/*0010*/ ULONGLONG Clsn;
	/*0018*/ LONG Status;
	/*0020*/
};

struct _FILE_INTERNAL_INFORMATION {
	/*0000*/ _LARGE_INTEGER IndexNumber;
	/*0008*/
};

struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION {
	/*0000*/ UCHAR * IoStatusBlockRange;
	/*0008*/ ULONG Length;
	/*0010*/
};

struct _FILE_IO_COMPLETION_INFORMATION {
	/*0000*/ void * KeyContext;
	/*0008*/ void * ApcContext;
	/*0010*/ _IO_STATUS_BLOCK IoStatusBlock;
	/*0020*/
};

struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _FILE_IO_PRIORITY_HINT_INFO {
	/*0000*/ _PRIORITY_HINT PriorityHint;
	/*0004*/
};

struct _FILE_IO_PRIORITY_HINT_INFORMATION {
	/*0000*/ _IO_PRIORITY_HINT PriorityHint;
	/*0004*/
};

struct _FILE_IO_PRIORITY_HINT_INFORMATION_EX {
	/*0000*/ _IO_PRIORITY_HINT PriorityHint;
	/*0004*/ UCHAR BoostOutstanding;
	/*0008*/
};

struct _FILE_IS_REMOTE_DEVICE_INFORMATION {
	/*0000*/ UCHAR IsRemote;
	/*0001*/
};

struct _FILE_LAYOUT_ENTRY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG NextFileOffset;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG FileAttributes;
	/*0010*/ ULONGLONG FileReferenceNumber;
	/*0018*/ ULONG FirstNameOffset;
	/*001c*/ ULONG FirstStreamOffset;
	/*0020*/ ULONG ExtraInfoOffset;
	/*0024*/ ULONG ExtraInfoLength;
	/*0028*/
};

struct _FILE_LAYOUT_INFO_ENTRY {
	
	/*0000*/ <unnamed-type-BasicInformation> BasicInformation;
	/*0028*/ ULONG OwnerId;
	/*002c*/ ULONG SecurityId;
	/*0030*/ LONGLONG Usn;
	/*0038*/ _STORAGE_RESERVE_ID StorageReserveId;
	/*0040*/
};

struct _FILE_LAYOUT_NAME_ENTRY {
	/*0000*/ ULONG NextNameOffset;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG ParentFileReferenceNumber;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ ULONG Reserved;
	/*0018*/ WCHAR FileName[0x1];
	/*0020*/
};

struct _FILE_LEVEL_TRIM {
	/*0000*/ ULONG Key;
	/*0004*/ ULONG NumRanges;
	/*0008*/ _FILE_LEVEL_TRIM_RANGE Ranges[0x1];
	/*0018*/
};

struct _FILE_LEVEL_TRIM_OUTPUT {
	/*0000*/ ULONG NumRangesProcessed;
	/*0004*/
};

struct _FILE_LEVEL_TRIM_RANGE {
	/*0000*/ ULONGLONG Offset;
	/*0008*/ ULONGLONG Length;
	/*0010*/
};

struct _FILE_LINKS_FULL_ID_INFORMATION {
	/*0000*/ ULONG BytesNeeded;
	/*0004*/ ULONG EntriesReturned;
	/*0008*/ _FILE_LINK_ENTRY_FULL_ID_INFORMATION Entry;
	/*0024*/
};

struct _FILE_LINKS_INFORMATION {
	/*0000*/ ULONG BytesNeeded;
	/*0004*/ ULONG EntriesReturned;
	/*0008*/ _FILE_LINK_ENTRY_INFORMATION Entry;
	/*0020*/
};

struct _FILE_LINK_ENTRY_FULL_ID_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _FILE_ID_128 ParentFileId;
	/*0014*/ ULONG FileNameLength;
	/*0018*/ WCHAR FileName[0x1];
	/*001c*/
};

struct _FILE_LINK_ENTRY_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0008*/ LONGLONG ParentFileId;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_LINK_INFORMATION {
	/*0000*/ UCHAR ReplaceIfExists;
	/*0000*/ ULONG Flags;
	/*0008*/ void * RootDirectory;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_MAILSLOT_PEEK_BUFFER {
	/*0000*/ ULONG ReadDataAvailable;
	/*0004*/ ULONG NumberOfMessages;
	/*0008*/ ULONG MessageLength;
	/*000c*/
};

struct _FILE_MAILSLOT_QUERY_INFORMATION {
	/*0000*/ ULONG MaximumMessageSize;
	/*0004*/ ULONG MailslotQuota;
	/*0008*/ ULONG NextMessageSize;
	/*000c*/ ULONG MessagesAvailable;
	/*0010*/ _LARGE_INTEGER ReadTimeout;
	/*0018*/
};

struct _FILE_MAILSLOT_SET_INFORMATION {
	/*0000*/ _LARGE_INTEGER * ReadTimeout;
	/*0008*/
};

struct _FILE_MAKE_COMPATIBLE_BUFFER {
	/*0000*/ UCHAR CloseDisc;
	/*0001*/
};

struct _FILE_MEMORY_PARTITION_INFORMATION {
	
	/*0000*/ ULONGLONG OwnerPartitionHandle;
	/*0008*/ <unnamed-type-Flags> Flags;
	/*0010*/
};

enum _FILE_METADATA_OPTIMIZATION_STATE {
	FileMetadataOptimizationNone = 0x0,
	FileMetadataOptimizationInProgress = 0x1,
	FileMetadataOptimizationPending = 0x2
};

struct _FILE_MODE_INFORMATION {
	/*0000*/ ULONG Mode;
	/*0004*/
};

struct _FILE_MOVE_CLUSTER_INFORMATION {
	/*0000*/ ULONG ClusterCount;
	/*0008*/ void * RootDirectory;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_NAMES_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG FileIndex;
	/*0008*/ ULONG FileNameLength;
	/*000c*/ WCHAR FileName[0x1];
	/*0010*/
};

struct _FILE_NAME_INFO {
	/*0000*/ ULONG FileNameLength;
	/*0004*/ WCHAR FileName[0x1];
	/*0008*/
};

struct _FILE_NAME_INFORMATION {
	/*0000*/ ULONG FileNameLength;
	/*0004*/ WCHAR FileName[0x1];
	/*0008*/
};

struct _FILE_NETWORK_OPEN_INFORMATION {
	/*0000*/ _LARGE_INTEGER CreationTime;
	/*0008*/ _LARGE_INTEGER LastAccessTime;
	/*0010*/ _LARGE_INTEGER LastWriteTime;
	/*0018*/ _LARGE_INTEGER ChangeTime;
	/*0020*/ _LARGE_INTEGER AllocationSize;
	/*0028*/ _LARGE_INTEGER EndOfFile;
	/*0030*/ ULONG FileAttributes;
	/*0038*/
};

struct _FILE_NETWORK_PHYSICAL_NAME_INFORMATION {
	/*0000*/ ULONG FileNameLength;
	/*0004*/ WCHAR FileName[0x1];
	/*0008*/
};

struct _FILE_NOTIFY_EXTENDED_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG Action;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastModificationTime;
	/*0018*/ _LARGE_INTEGER LastChangeTime;
	/*0020*/ _LARGE_INTEGER LastAccessTime;
	/*0028*/ _LARGE_INTEGER AllocatedLength;
	/*0030*/ _LARGE_INTEGER FileSize;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG ReparsePointTag;
	/*0040*/ _LARGE_INTEGER FileId;
	/*0048*/ _LARGE_INTEGER ParentFileId;
	/*0050*/ ULONG FileNameLength;
	/*0054*/ WCHAR FileName[0x1];
	/*0058*/
};

struct _FILE_NOTIFY_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG Action;
	/*0008*/ ULONG FileNameLength;
	/*000c*/ WCHAR FileName[0x1];
	/*0010*/
};

struct _FILE_NUMA_NODE_INFORMATION {
	/*0000*/ USHORT NodeNumber;
	/*0002*/
};

struct _FILE_OBJECTID_BUFFER {
	/*0000*/ UCHAR ObjectId[0x10];
	/*0010*/ UCHAR BirthVolumeId[0x10];
	/*0020*/ UCHAR BirthObjectId[0x10];
	/*0030*/ UCHAR DomainId[0x10];
	/*0010*/ UCHAR ExtendedInfo[0x30];
	/*0040*/
};

struct _FILE_OBJECTID_INFORMATION {
	/*0000*/ LONGLONG FileReference;
	/*0008*/ UCHAR ObjectId[0x10];
	/*0018*/ UCHAR BirthVolumeId[0x10];
	/*0028*/ UCHAR BirthObjectId[0x10];
	/*0038*/ UCHAR DomainId[0x10];
	/*0018*/ UCHAR ExtendedInfo[0x30];
	/*0048*/
};

struct _FILE_PATH {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Type;
	/*000c*/ UCHAR FilePath[0x1];
	/*0010*/
};

struct _FILE_PIPE_ASSIGN_EVENT_BUFFER {
	/*0000*/ void * EventHandle;
	/*0008*/ ULONG KeyValue;
	/*0010*/
};

struct _FILE_PIPE_CLIENT_PROCESS_BUFFER {
	/*0000*/ void * ClientSession;
	/*0008*/ void * ClientProcess;
	/*0010*/
};

struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX {
	/*0000*/ void * ClientSession;
	/*0008*/ void * ClientProcess;
	/*0010*/ USHORT ClientComputerNameLength;
	/*0012*/ WCHAR ClientComputerBuffer[0x10];
	/*0038*/
};

struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_V2 {
	/*0000*/ ULONGLONG ClientSession;
	/*0008*/ void * ClientProcess;
	/*0010*/
};

struct _FILE_PIPE_CREATE_SYMLINK_INPUT {
	/*0000*/ USHORT NameOffset;
	/*0002*/ USHORT NameLength;
	/*0004*/ USHORT SubstituteNameOffset;
	/*0006*/ USHORT SubstituteNameLength;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _FILE_PIPE_DELETE_SYMLINK_INPUT {
	/*0000*/ USHORT NameOffset;
	/*0002*/ USHORT NameLength;
	/*0004*/
};

struct _FILE_PIPE_EVENT_BUFFER {
	/*0000*/ ULONG NamedPipeState;
	/*0004*/ ULONG EntryType;
	/*0008*/ ULONG ByteCount;
	/*000c*/ ULONG KeyValue;
	/*0010*/ ULONG NumberRequests;
	/*0014*/
};

struct _FILE_PIPE_EVENT_ENUM_INPUT_BUFFER {
	/*0000*/ ULONGLONG EventHandle;
	/*0008*/
};

struct _FILE_PIPE_EVENT_ENUM_OUTPUT_BUFFER {
	/*0000*/ ULONG EventTypes;
	/*0004*/
};

struct _FILE_PIPE_EVENT_SELECT_BUFFER {
	/*0000*/ ULONG EventTypes;
	/*0008*/ ULONGLONG EventHandle;
	/*0010*/
};

struct _FILE_PIPE_INFORMATION {
	/*0000*/ ULONG ReadMode;
	/*0004*/ ULONG CompletionMode;
	/*0008*/
};

struct _FILE_PIPE_LOCAL_INFORMATION {
	/*0000*/ ULONG NamedPipeType;
	/*0004*/ ULONG NamedPipeConfiguration;
	/*0008*/ ULONG MaximumInstances;
	/*000c*/ ULONG CurrentInstances;
	/*0010*/ ULONG InboundQuota;
	/*0014*/ ULONG ReadDataAvailable;
	/*0018*/ ULONG OutboundQuota;
	/*001c*/ ULONG WriteQuotaAvailable;
	/*0020*/ ULONG NamedPipeState;
	/*0024*/ ULONG NamedPipeEnd;
	/*0028*/
};

struct _FILE_PIPE_PEEK_BUFFER {
	/*0000*/ ULONG NamedPipeState;
	/*0004*/ ULONG ReadDataAvailable;
	/*0008*/ ULONG NumberOfMessages;
	/*000c*/ ULONG MessageLength;
	/*0010*/ CHAR Data[0x1];
	/*0014*/
};

struct _FILE_PIPE_REMOTE_INFORMATION {
	/*0000*/ _LARGE_INTEGER CollectDataTime;
	/*0008*/ ULONG MaximumCollectionCount;
	/*0010*/
};

struct _FILE_PIPE_SILO_ARRIVAL_INPUT {
	/*0000*/ void * JobHandle;
	/*0008*/
};

struct _FILE_PIPE_WAIT_FOR_BUFFER {
	/*0000*/ _LARGE_INTEGER Timeout;
	/*0008*/ ULONG NameLength;
	/*000c*/ UCHAR TimeoutSpecified;
	/*000e*/ WCHAR Name[0x1];
	/*0010*/
};

struct _FILE_POSITION_INFORMATION {
	/*0000*/ _LARGE_INTEGER CurrentByteOffset;
	/*0008*/
};

struct _FILE_PREFETCH {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Count;
	/*0008*/ ULONGLONG Prefetch[0x1];
	/*0010*/
};

struct _FILE_PREFETCH_EX {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Count;
	/*0008*/ void * Context;
	/*0010*/ ULONGLONG Prefetch[0x1];
	/*0018*/
};

struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION {
	/*0000*/ ULONG NumberOfProcessIdsInList;
	/*0008*/ ULONGLONG ProcessIdList[0x1];
	/*0010*/
};

struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Algorithm;
	/*0008*/
};

struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Algorithm;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _FILE_QUERY_METADATA_OPTIMIZATION_OUTPUT {
	/*0000*/ _FILE_METADATA_OPTIMIZATION_STATE State;
	/*0004*/ ULONG AttributeListSize;
	/*0008*/ ULONG MetadataSpaceUsed;
	/*000c*/ ULONG MetadataSpaceAllocated;
	/*0010*/ ULONG NumberOfFileRecords;
	/*0014*/ ULONG NumberOfResidentAttributes;
	/*0018*/ ULONG NumberOfNonresidentAttributes;
	/*001c*/ ULONG TotalInProgress;
	/*0020*/ ULONG TotalPending;
	/*0024*/
};

struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
	/*0000*/ _LARGE_INTEGER DirectoryCount;
	/*0008*/ _LARGE_INTEGER FileCount;
	/*0010*/ USHORT FsFormatMajVersion;
	/*0012*/ USHORT FsFormatMinVersion;
	/*0014*/ WCHAR FsFormatName[0xc];
	/*0030*/ _LARGE_INTEGER FormatTime;
	/*0038*/ _LARGE_INTEGER LastUpdateTime;
	/*0040*/ WCHAR CopyrightInfo[0x22];
	/*0084*/ WCHAR AbstractInfo[0x22];
	/*00c8*/ WCHAR FormattingImplementationInfo[0x22];
	/*010c*/ WCHAR LastModifyingImplementationInfo[0x22];
	/*0150*/
};

struct _FILE_QUERY_SPARING_BUFFER {
	/*0000*/ ULONG SparingUnitBytes;
	/*0004*/ UCHAR SoftwareSparing;
	/*0008*/ ULONG TotalSpareBlocks;
	/*000c*/ ULONG FreeSpareBlocks;
	/*0010*/
};

struct _FILE_QUERY_STORAGE_RESERVE_ID_INFORMATION_EX {
	/*0000*/ _STORAGE_RESERVE_ID StorageReserveId;
	/*0008*/ LONGLONG SpaceUsed;
	/*0010*/
};

struct _FILE_QUOTA_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG SidLength;
	/*0008*/ _LARGE_INTEGER ChangeTime;
	/*0010*/ _LARGE_INTEGER QuotaUsed;
	/*0018*/ _LARGE_INTEGER QuotaThreshold;
	/*0020*/ _LARGE_INTEGER QuotaLimit;
	/*0028*/ _SID Sid;
	/*0038*/
};

struct _FILE_REFERENCE_RANGE {
	/*0000*/ ULONGLONG StartingFileReferenceNumber;
	/*0008*/ ULONGLONG EndingFileReferenceNumber;
	/*0010*/
};

struct _FILE_REGION_INFO {
	/*0000*/ LONGLONG FileOffset;
	/*0008*/ LONGLONG Length;
	/*0010*/ ULONG Usage;
	/*0014*/ ULONG Reserved;
	/*0018*/
};

struct _FILE_REGION_INPUT {
	/*0000*/ LONGLONG FileOffset;
	/*0008*/ LONGLONG Length;
	/*0010*/ ULONG DesiredUsage;
	/*0018*/
};

struct _FILE_REGION_OUTPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG TotalRegionEntryCount;
	/*0008*/ ULONG RegionEntryCount;
	/*000c*/ ULONG Reserved;
	/*0010*/ _FILE_REGION_INFO Region[0x1];
	/*0028*/
};

struct _FILE_REMOTE_PROTOCOL_INFO {
	
	
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureSize;
	/*0004*/ ULONG Protocol;
	/*0008*/ USHORT ProtocolMajorVersion;
	/*000a*/ USHORT ProtocolMinorVersion;
	/*000c*/ USHORT ProtocolRevision;
	/*000e*/ USHORT Reserved;
	/*0010*/ ULONG Flags;
	/*0014*/ <unnamed-type-GenericReserved> GenericReserved;
	/*0034*/ <unnamed-type-ProtocolSpecific> ProtocolSpecific;
	/*0074*/
};

struct _FILE_REMOTE_PROTOCOL_INFORMATION {
	
	
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureSize;
	/*0004*/ ULONG Protocol;
	/*0008*/ USHORT ProtocolMajorVersion;
	/*000a*/ USHORT ProtocolMinorVersion;
	/*000c*/ USHORT ProtocolRevision;
	/*000e*/ USHORT Reserved;
	/*0010*/ ULONG Flags;
	/*0014*/ <unnamed-type-GenericReserved> GenericReserved;
	/*0034*/ <unnamed-type-ProtocolSpecific> ProtocolSpecific;
	/*0074*/
};

struct _FILE_RENAME_INFO {
	/*0000*/ UCHAR ReplaceIfExists;
	/*0000*/ ULONG Flags;
	/*0008*/ void * RootDirectory;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_RENAME_INFORMATION {
	/*0000*/ UCHAR ReplaceIfExists;
	/*0000*/ ULONG Flags;
	/*0008*/ void * RootDirectory;
	/*0010*/ ULONG FileNameLength;
	/*0014*/ WCHAR FileName[0x1];
	/*0018*/
};

struct _FILE_REPARSE_POINT_INFORMATION {
	/*0000*/ LONGLONG FileReference;
	/*0008*/ ULONG Tag;
	/*0010*/
};

union _FILE_SEGMENT_ELEMENT {
	/*0000*/ void * Buffer;
	/*0000*/ ULONGLONG Alignment;
	/*0008*/
};

struct _FILE_SET_DEFECT_MGMT_BUFFER {
	/*0000*/ UCHAR Disable;
	/*0001*/
};

struct _FILE_SET_SPARSE_BUFFER {
	/*0000*/ UCHAR SetSparse;
	/*0001*/
};

struct _FILE_SET_STORAGE_RESERVE_ID_INFORMATION_EX {
	/*0000*/ _STORAGE_RESERVE_ID StorageReserveId;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _FILE_SFIO_RESERVE_INFORMATION {
	/*0000*/ ULONG RequestsPerPeriod;
	/*0004*/ ULONG Period;
	/*0008*/ UCHAR RetryFailures;
	/*0009*/ UCHAR Discardable;
	/*000c*/ ULONG RequestSize;
	/*0010*/ ULONG NumOutstandingRequests;
	/*0014*/
};

struct _FILE_SFIO_VOLUME_INFORMATION {
	/*0000*/ ULONG MaximumRequestsPerPeriod;
	/*0004*/ ULONG MinimumPeriod;
	/*0008*/ ULONG MinimumTransferSize;
	/*000c*/
};

struct _FILE_STANDARD_INFO {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/ _LARGE_INTEGER EndOfFile;
	/*0010*/ ULONG NumberOfLinks;
	/*0014*/ UCHAR DeletePending;
	/*0015*/ UCHAR Directory;
	/*0018*/
};

struct _FILE_STANDARD_INFORMATION {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/ _LARGE_INTEGER EndOfFile;
	/*0010*/ ULONG NumberOfLinks;
	/*0014*/ UCHAR DeletePending;
	/*0015*/ UCHAR Directory;
	/*0018*/
};

struct _FILE_STANDARD_INFORMATION_EX {
	/*0000*/ _LARGE_INTEGER AllocationSize;
	/*0008*/ _LARGE_INTEGER EndOfFile;
	/*0010*/ ULONG NumberOfLinks;
	/*0014*/ UCHAR DeletePending;
	/*0015*/ UCHAR Directory;
	/*0016*/ UCHAR AlternateStream;
	/*0017*/ UCHAR MetadataAttribute;
	/*0018*/
};

struct _FILE_STANDARD_LINK_INFORMATION {
	/*0000*/ ULONG NumberOfAccessibleLinks;
	/*0004*/ ULONG TotalNumberOfLinks;
	/*0008*/ UCHAR DeletePending;
	/*0009*/ UCHAR Directory;
	/*000c*/
};

struct _FILE_STAT_INFORMATION {
	/*0000*/ _LARGE_INTEGER FileId;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER AllocationSize;
	/*0030*/ _LARGE_INTEGER EndOfFile;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG ReparseTag;
	/*0040*/ ULONG NumberOfLinks;
	/*0044*/ ULONG EffectiveAccess;
	/*0048*/
};

struct _FILE_STAT_LX_INFORMATION {
	/*0000*/ _LARGE_INTEGER FileId;
	/*0008*/ _LARGE_INTEGER CreationTime;
	/*0010*/ _LARGE_INTEGER LastAccessTime;
	/*0018*/ _LARGE_INTEGER LastWriteTime;
	/*0020*/ _LARGE_INTEGER ChangeTime;
	/*0028*/ _LARGE_INTEGER AllocationSize;
	/*0030*/ _LARGE_INTEGER EndOfFile;
	/*0038*/ ULONG FileAttributes;
	/*003c*/ ULONG ReparseTag;
	/*0040*/ ULONG NumberOfLinks;
	/*0044*/ ULONG EffectiveAccess;
	/*0048*/ ULONG LxFlags;
	/*004c*/ ULONG LxUid;
	/*0050*/ ULONG LxGid;
	/*0054*/ ULONG LxMode;
	/*0058*/ ULONG LxDeviceIdMajor;
	/*005c*/ ULONG LxDeviceIdMinor;
	/*0060*/
};

struct _FILE_STORAGE_INFO {
	/*0000*/ ULONG LogicalBytesPerSector;
	/*0004*/ ULONG PhysicalBytesPerSectorForAtomicity;
	/*0008*/ ULONG PhysicalBytesPerSectorForPerformance;
	/*000c*/ ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
	/*0010*/ ULONG Flags;
	/*0014*/ ULONG ByteOffsetForSectorAlignment;
	/*0018*/ ULONG ByteOffsetForPartitionAlignment;
	/*001c*/
};

struct _FILE_STORAGE_RESERVE_ID_INFORMATION {
	/*0000*/ _STORAGE_RESERVE_ID StorageReserveId;
	/*0004*/
};

struct _FILE_STORAGE_TIER {
	/*0000*/ _GUID Id;
	/*0010*/ WCHAR Name[0x100];
	/*0210*/ WCHAR Description[0x100];
	/*0410*/ ULONGLONG Flags;
	/*0418*/ ULONGLONG ProvisionedCapacity;
	/*0420*/ _FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
	/*0424*/ _FILE_STORAGE_TIER_CLASS Class;
	/*0428*/
};

enum _FILE_STORAGE_TIER_CLASS {
	FileStorageTierClassUnspecified = 0x0,
	FileStorageTierClassCapacity = 0x1,
	FileStorageTierClassPerformance = 0x2,
	FileStorageTierClassMax = 0x3
};

enum _FILE_STORAGE_TIER_MEDIA_TYPE {
	FileStorageTierMediaTypeUnspecified = 0x0,
	FileStorageTierMediaTypeDisk = 0x1,
	FileStorageTierMediaTypeSsd = 0x2,
	FileStorageTierMediaTypeScm = 0x4,
	FileStorageTierMediaTypeMax = 0x5
};

struct _FILE_STORAGE_TIER_REGION {
	/*0000*/ _GUID TierId;
	/*0010*/ ULONGLONG Offset;
	/*0018*/ ULONGLONG Length;
	/*0020*/
};

struct _FILE_STREAM_INFO {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG StreamNameLength;
	/*0008*/ _LARGE_INTEGER StreamSize;
	/*0010*/ _LARGE_INTEGER StreamAllocationSize;
	/*0018*/ WCHAR StreamName[0x1];
	/*0020*/
};

struct _FILE_STREAM_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG StreamNameLength;
	/*0008*/ _LARGE_INTEGER StreamSize;
	/*0010*/ _LARGE_INTEGER StreamAllocationSize;
	/*0018*/ WCHAR StreamName[0x1];
	/*0020*/
};

struct _FILE_SYSTEM_RECOGNITION_INFORMATION {
	/*0000*/ CHAR FileSystem[0x9];
	/*0009*/
};

struct _FILE_TRACKING_INFORMATION {
	/*0000*/ void * DestinationFile;
	/*0008*/ ULONG ObjectInformationLength;
	/*000c*/ CHAR ObjectInformation[0x1];
	/*0010*/
};

struct _FILE_TYPE_NOTIFICATION_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumFileTypeIDs;
	/*0008*/ _GUID FileTypeID[0x1];
	/*0018*/
};

struct _FILE_VALID_DATA_LENGTH_INFORMATION {
	/*0000*/ _LARGE_INTEGER ValidDataLength;
	/*0008*/
};

struct _FILE_VOLUME_NAME_INFORMATION {
	/*0000*/ ULONG DeviceNameLength;
	/*0004*/ WCHAR DeviceName[0x1];
	/*0008*/
};

struct _FILE_ZERO_DATA_INFORMATION {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER BeyondFinalZero;
	/*0010*/
};

struct _FILE_ZERO_DATA_INFORMATION_EX {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER BeyondFinalZero;
	/*0010*/ ULONG Flags;
	/*0018*/
};

enum _FILTER_BOOT_OPTION_OPERATION {
	FilterBootOptionOperationOpenSystemStore = 0x0,
	FilterBootOptionOperationSetElement = 0x1,
	FilterBootOptionOperationDeleteElement = 0x2,
	FilterBootOptionOperationMax = 0x3
};

enum _FINDEX_INFO_LEVELS {
	FindExInfoStandard = 0x0,
	FindExInfoBasic = 0x1,
	FindExInfoMaxInfoLevel = 0x2
};

enum _FINDEX_SEARCH_OPS {
	FindExSearchNameMatch = 0x0,
	FindExSearchLimitToDirectories = 0x1,
	FindExSearchLimitToDevices = 0x2,
	FindExSearchMaxSearchOp = 0x3
};

struct _FINDFIRSTACTIVATIONCONTEXTSECTION {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ _GUID const * ExtensionGuid;
	/*0010*/ ULONG Id;
	/*0014*/ ULONG Depth;
	/*0018*/ ULONG OutFlags;
	/*0020*/
};

enum _FIRMWARE_TYPE {
	FirmwareTypeUnknown = 0x0,
	FirmwareTypeBios = 0x1,
	FirmwareTypeUefi = 0x2,
	FirmwareTypeMax = 0x3
};

struct _FIXED {
	/*0000*/ USHORT fract;
	/*0002*/ SHORT value;
	/*0004*/
};

struct _FLAGGED_BYTE_BLOB {
	/*0000*/ ULONG fFlags;
	/*0004*/ ULONG clSize;
	/*0008*/ UCHAR abData[0x1];
	/*000c*/
};

struct _FLAGGED_WORD_BLOB {
	/*0000*/ ULONG fFlags;
	/*0004*/ ULONG clSize;
	/*0008*/ USHORT asData[0x1];
	/*000c*/
};

struct _FLAG_STGMEDIUM {
	/*0000*/ LONG ContextFlags;
	/*0004*/ LONG fPassOwnership;
	/*0008*/ tagSTGMEDIUM Stgmed;
	/*0020*/
};

struct _FLOAT128 {
	/*0000*/ LONGLONG LowPart;
	/*0008*/ LONGLONG HighPart;
	/*0010*/
};

struct _FLS_DATA {
	/*0000*/ _LIST_ENTRY Entry;
	/*0010*/ void * Slots[0x80];
	/*0410*/
};

struct _FNSAVE_FORMAT {
	/*0000*/ ULONG ControlWord;
	/*0004*/ ULONG StatusWord;
	/*0008*/ ULONG TagWord;
	/*000c*/ ULONG ErrorOffset;
	/*0010*/ ULONG ErrorSelector;
	/*0014*/ ULONG DataOffset;
	/*0018*/ ULONG DataSelector;
	/*001c*/ UCHAR RegisterArea[0x50];
	/*006c*/
};

struct _FOCUS_EVENT_RECORD {
	/*0000*/ INT bSetFocus;
	/*0004*/
};

union _FOUR_PART_VERSION {
	
	
	/*0000*/ ULONGLONG Version64;
	/*0000*/ <unnamed-type-Version32> Version32;
	/*0000*/ <unnamed-type-Version16> Version16;
	/*0008*/
};

struct _FPO_DATA {
	/*0000*/ ULONG ulOffStart;
	/*0004*/ ULONG cbProcSize;
	/*0008*/ ULONG cdwLocals;
	/*000c*/ USHORT cdwParams;
	/*000e*/ USHORT cbProlog : 08; // 0x00ff;
	/*000e*/ USHORT cbRegs : 03; // 0x0700;
	/*000e*/ USHORT fHasSEH : 01; // 0x0800;
	/*000e*/ USHORT fUseBP : 01; // 0x1000;
	/*000e*/ USHORT reserved : 01; // 0x2000;
	/*000e*/ USHORT cbFrame : 02; // 0xc000;
	/*0010*/
};

struct _FP_128 {
	/*0000*/ ULONG W[0x4];
	/*0010*/
};

struct _FP_32 {
	/*0000*/ ULONG W[0x1];
	/*0004*/
};

struct _FP_64 {
	/*0000*/ ULONG W[0x2];
	/*0008*/
};

struct _FP_80 {
	/*0000*/ ULONG W[0x3];
	/*000c*/
};

enum _FP_IEEE_COMPARE_RESULT {
	FpCompareEqual = 0x0,
	FpCompareGreater = 0x1,
	FpCompareLess = 0x2,
	FpCompareUnordered = 0x3
};

enum _FP_IEEE_OPERATION_CODE {
	FpCodeUnspecified = 0x0,
	FpCodeAdd = 0x1,
	FpCodeSubtract = 0x2,
	FpCodeMultiply = 0x3,
	FpCodeDivide = 0x4,
	FpCodeSquareRoot = 0x5,
	FpCodeRemainder = 0x6,
	FpCodeCompare = 0x7,
	FpCodeConvert = 0x8,
	FpCodeRound = 0x9,
	FpCodeTruncate = 0xa,
	FpCodeFloor = 0xb,
	FpCodeCeil = 0xc,
	FpCodeAcos = 0xd,
	FpCodeAsin = 0xe,
	FpCodeAtan = 0xf,
	FpCodeAtan2 = 0x10,
	FpCodeCabs = 0x11,
	FpCodeCos = 0x12,
	FpCodeCosh = 0x13,
	FpCodeExp = 0x14,
	FpCodeFabs = 0x15,
	FpCodeFmod = 0x16,
	FpCodeFrexp = 0x17,
	FpCodeHypot = 0x18,
	FpCodeLdexp = 0x19,
	FpCodeLog = 0x1a,
	FpCodeLog10 = 0x1b,
	FpCodeModf = 0x1c,
	FpCodePow = 0x1d,
	FpCodeSin = 0x1e,
	FpCodeSinh = 0x1f,
	FpCodeTan = 0x20,
	FpCodeTanh = 0x21,
	FpCodeY0 = 0x22,
	FpCodeY1 = 0x23,
	FpCodeYn = 0x24
};

struct _FP_IEEE_RECORD {
	/*0000*/ _FP_IEEE_VALUE Operand1;
	/*0018*/ _FP_IEEE_VALUE Operand2;
	/*0030*/ _FP_IEEE_VALUE Result;
	/*0048*/
};

struct _FP_IEEE_VALUE {
	
	
	/*0000*/ <unnamed-type-Value> Value;
	/*0010*/ <unnamed-type-Control> Control;
	/*0018*/
};

enum _FP__IEEE_FORMAT {
	FpFormatFp32 = 0x0,
	FpFormatFp64 = 0x1,
	FpFormatFp80 = 0x2,
	FpFormatFp128 = 0x3,
	FpFormatI16 = 0x4,
	FpFormatI32 = 0x5,
	FpFormatI64 = 0x6,
	FpFormatU16 = 0x7,
	FpFormatU32 = 0x8,
	FpFormatU64 = 0x9,
	FpFormatCompare = 0xa,
	FpFormatString = 0xb
};

enum _FP__IEEE_ROUNDING_MODE {
	FpRoundNearest = 0x0,
	FpRoundMinusInfinity = 0x1,
	FpRoundPlusInfinity = 0x2,
	FpRoundChopped = 0x3
};

struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
	/*0000*/ USHORT ChecksumAlgorithm;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ChecksumChunkSizeInBytes;
	/*000c*/ ULONG ClusterSizeInBytes;
	/*0010*/
};

struct _FSCTL_GHOST_FILE_EXTENTS_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER ByteCount;
	/*0010*/ _GUID RecallOwnerGuid;
	/*0020*/ ULONG RecallMetadataBufferSize;
	/*0024*/ UCHAR RecallMetadataBuffer[0x1];
	/*0028*/
};

struct _FSCTL_OFFLOAD_READ_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG TokenTimeToLive;
	/*000c*/ ULONG Reserved;
	/*0010*/ ULONGLONG FileOffset;
	/*0018*/ ULONGLONG CopyLength;
	/*0020*/
};

struct _FSCTL_OFFLOAD_READ_OUTPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG TransferLength;
	/*0010*/ UCHAR Token[0x200];
	/*0210*/
};

struct _FSCTL_OFFLOAD_WRITE_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG FileOffset;
	/*0010*/ ULONGLONG CopyLength;
	/*0018*/ ULONGLONG TransferOffset;
	/*0020*/ UCHAR Token[0x200];
	/*0220*/
};

struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG LengthWritten;
	/*0010*/
};

struct _FSCTL_QUERY_FAT_BPB_BUFFER {
	/*0000*/ UCHAR First0x24BytesOfBootSector[0x24];
	/*0024*/
};

struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_INPUT_RANGE {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER ByteCount;
	/*0010*/
};

struct _FSCTL_QUERY_GHOSTED_FILE_EXTENTS_OUTPUT {
	/*0000*/ ULONG ExtentCount;
	/*0004*/ ULONG TotalExtentCount;
	/*0008*/ UCHAR Extents[0x1];
	/*000c*/
};

struct _FSCTL_QUERY_REGION_INFO_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG NumberOfTierIds;
	/*0010*/ _GUID TierIds[0x1];
	/*0020*/
};

struct _FSCTL_QUERY_REGION_INFO_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Reserved;
	/*0010*/ ULONGLONG Alignment;
	/*0018*/ ULONG TotalNumberOfRegions;
	/*001c*/ ULONG NumberOfRegionsReturned;
	/*0020*/ _FILE_STORAGE_TIER_REGION Regions[0x1];
	/*0040*/
};

struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG TotalNumberOfTiers;
	/*0010*/ ULONG NumberOfTiersReturned;
	/*0018*/ _FILE_STORAGE_TIER Tiers[0x1];
	/*0440*/
};

struct _FSCTL_QUERY_VOLUME_NUMA_INFO_OUTPUT {
	/*0000*/ ULONG NumaNode;
	/*0004*/
};

struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
	/*0000*/ USHORT ChecksumAlgorithm;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
	/*0000*/ UCHAR EnableIntegrity;
	/*0001*/ UCHAR KeepIntegrityStateUnchanged;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Flags;
	/*0008*/ UCHAR Version;
	/*0009*/ UCHAR Reserved2[0x7];
	/*0010*/
};

struct _FSCTL_UNMAP_SPACE_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER BytesToUnmap;
	/*0008*/
};

struct _FSCTL_UNMAP_SPACE_OUTPUT {
	/*0000*/ _LARGE_INTEGER BytesUnmapped;
	/*0008*/
};

enum _FSINFOCLASS {
	FileFsVolumeInformation = 0x1,
	FileFsLabelInformation = 0x2,
	FileFsSizeInformation = 0x3,
	FileFsDeviceInformation = 0x4,
	FileFsAttributeInformation = 0x5,
	FileFsControlInformation = 0x6,
	FileFsFullSizeInformation = 0x7,
	FileFsObjectIdInformation = 0x8,
	FileFsDriverPathInformation = 0x9,
	FileFsVolumeFlagsInformation = 0xa,
	FileFsSectorSizeInformation = 0xb,
	FileFsDataCopyInformation = 0xc,
	FileFsMetadataSizeInformation = 0xd,
	FileFsFullSizeInformationEx = 0xe,
	FileFsMaximumInformation = 0xf
};

struct _FULL_PTR_XLAT_TABLES {
	/*0000*/ void * RefIdToPointer;
	/*0008*/ void * PointerToRefId;
	/*0010*/ ULONG NextRefId;
	/*0014*/ XLAT_SIDE XlatSide;
	/*0018*/
};

enum _FUNCTION_TABLE_TYPE {
	RF_SORTED = 0x0,
	RF_UNSORTED = 0x1,
	RF_CALLBACK = 0x2,
	RF_KERNEL_DYNAMIC = 0x3
};

struct _FXSAVE_FORMAT_WX86 {
	/*0000*/ USHORT ControlWord;
	/*0002*/ USHORT StatusWord;
	/*0004*/ USHORT TagWord;
	/*0006*/ USHORT ErrorOpcode;
	/*0008*/ ULONG ErrorOffset;
	/*000c*/ ULONG ErrorSelector;
	/*0010*/ ULONG DataOffset;
	/*0014*/ ULONG DataSelector;
	/*0018*/ ULONG MXCsr;
	/*001c*/ ULONG MXCsr_Mask;
	/*0020*/ UCHAR RegisterArea[0x80];
	/*00a0*/ UCHAR Reserved3[0x80];
	/*0120*/ UCHAR Reserved4[0xe0];
	/*0200*/
};

struct _GDI_NONREMOTE {

	union __MIDL_IWinTypes_0002 {
		/*0000*/ LONG hInproc;
		/*0000*/ _DWORD_BLOB * hRemote;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0002 u;
	/*0010*/
};

struct _GDI_OBJECT {

	union __MIDL_IAdviseSink_0002 {
		/*0000*/ _userHBITMAP * hBitmap;
		/*0000*/ _userHPALETTE * hPalette;
		/*0000*/ _userHGLOBAL * hGeneric;
		/*0008*/
	};

	/*0000*/ ULONG ObjectType;
	/*0008*/ __MIDL_IAdviseSink_0002 u;
	/*0010*/
};

struct _GDI_TEB_BATCH {
	/*0000*/ ULONG Offset : 31; // 0x7fffffff;
	/*0000*/ ULONG HasRenderingCommand : 01; // 0x80000000;
	/*0008*/ ULONGLONG HDC;
	/*0010*/ ULONG Buffer[0x136];
	/*04e8*/
};

struct _GENERATE_NAME_CONTEXT {
	/*0000*/ USHORT Checksum;
	/*0002*/ UCHAR ChecksumInserted;
	/*0003*/ UCHAR NameLength;
	/*0004*/ WCHAR NameBuffer[0x8];
	/*0014*/ ULONG ExtensionLength;
	/*0018*/ WCHAR ExtensionBuffer[0x4];
	/*0020*/ ULONG LastIndexValue;
	/*0024*/
};

struct _GENERIC_BINDING_ROUTINE_PAIR {
	/*0000*/ void * (* pfnBind)( void * );
	/*0008*/ void (* pfnUnbind)( void * , UCHAR * );
	/*0010*/
};

struct _GENERIC_MAPPING {
	/*0000*/ ULONG GenericRead;
	/*0004*/ ULONG GenericWrite;
	/*0008*/ ULONG GenericExecute;
	/*000c*/ ULONG GenericAll;
	/*0010*/
};

struct _GEN_GET_NETCARD_TIME {
	/*0000*/ ULONGLONG ReadTime;
	/*0008*/
};

struct _GEN_GET_TIME_CAPS {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG ClockPrecision;
	/*0008*/
};

enum _GET_FILEEX_INFO_LEVELS {
	GetFileExInfoStandard = 0x0,
	GetFileExMaxInfoLevel = 0x1
};

struct _GET_FILTER_FILE_IDENTIFIER_INPUT {
	/*0000*/ USHORT AltitudeLength;
	/*0002*/ WCHAR Altitude[0x1];
	/*0004*/
};

struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT {
	/*0000*/ USHORT FilterFileIdentifierLength;
	/*0002*/ UCHAR FilterFileIdentifier[0x1];
	/*0004*/
};

struct _GHOSTED_FILE_EXTENT {
	/*0000*/ _LARGE_INTEGER FileOffset;
	/*0008*/ _LARGE_INTEGER ByteCount;
	/*0010*/ _GUID RecallOwnerGuid;
	/*0020*/ ULONG NextEntryOffset;
	/*0024*/ ULONG RecallMetadataBufferSize;
	/*0028*/ UCHAR RecallMetadataBuffer[0x1];
	/*0030*/
};

struct _GLYPHMETRICS {
	/*0000*/ UINT gmBlackBoxX;
	/*0004*/ UINT gmBlackBoxY;
	/*0008*/ tagPOINT gmptGlyphOrigin;
	/*0010*/ SHORT gmCellIncX;
	/*0012*/ SHORT gmCellIncY;
	/*0014*/
};

struct _GLYPHMETRICSFLOAT {
	/*0000*/ float gmfBlackBoxX;
	/*0004*/ float gmfBlackBoxY;
	/*0008*/ _POINTFLOAT gmfptGlyphOrigin;
	/*0010*/ float gmfCellIncX;
	/*0014*/ float gmfCellIncY;
	/*0018*/
};

struct _GRADIENT_RECT {
	/*0000*/ ULONG UpperLeft;
	/*0004*/ ULONG LowerRight;
	/*0008*/
};

struct _GRADIENT_TRIANGLE {
	/*0000*/ ULONG Vertex1;
	/*0004*/ ULONG Vertex2;
	/*0008*/ ULONG Vertex3;
	/*000c*/
};

struct _GROUP_AFFINITY {
	/*0000*/ ULONGLONG Mask;
	/*0008*/ USHORT Group;
	/*000a*/ USHORT Reserved[0x3];
	/*0010*/
};

struct _GROUP_RELATIONSHIP {
	/*0000*/ USHORT MaximumGroupCount;
	/*0002*/ USHORT ActiveGroupCount;
	/*0004*/ UCHAR Reserved[0x14];
	/*0018*/ _PROCESSOR_GROUP_INFO GroupInfo[0x1];
	/*0048*/
};

struct _GS_HANDLER_DATA {
	
	/*0000*/ <unnamed-type-u> u;
	/*0004*/ LONG AlignedBaseOffset;
	/*0008*/ LONG Alignment;
	/*000c*/
};

struct _GUID {
	/*0000*/ ULONG Data1;
	/*0004*/ USHORT Data2;
	/*0006*/ USHORT Data3;
	/*0008*/ UCHAR Data4[0x8];
	/*0010*/
};

struct _HARDERROR_MSG {
	/*0000*/ _PORT_MESSAGE h;
	/*0028*/ LONG Status;
	/*0030*/ _LARGE_INTEGER ErrorTime;
	/*0038*/ ULONG ValidResponseOptions;
	/*003c*/ ULONG Response;
	/*0040*/ ULONG NumberOfParameters;
	/*0044*/ ULONG UnicodeStringParameterMask;
	/*0048*/ ULONGLONG Parameters[0x5];
	/*0070*/
};

enum _HARDERROR_RESPONSE {
	ResponseReturnToCaller = 0x0,
	ResponseNotHandled = 0x1,
	ResponseAbort = 0x2,
	ResponseCancel = 0x3,
	ResponseIgnore = 0x4,
	ResponseNo = 0x5,
	ResponseOk = 0x6,
	ResponseRetry = 0x7,
	ResponseYes = 0x8,
	ResponseTryAgain = 0x9,
	ResponseContinue = 0xa
};

enum _HARDERROR_RESPONSE_OPTION {
	OptionAbortRetryIgnore = 0x0,
	OptionOk = 0x1,
	OptionOkCancel = 0x2,
	OptionRetryCancel = 0x3,
	OptionYesNo = 0x4,
	OptionYesNoCancel = 0x5,
	OptionShutdownSystem = 0x6,
	OptionOkNoWait = 0x7,
	OptionCancelTryContinue = 0x8
};

struct _HARDWARE_COUNTER {
	/*0000*/ _HARDWARE_COUNTER_TYPE Type;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG Index;
	/*0010*/
};

struct _HARDWARE_COUNTER_DATA {
	/*0000*/ _HARDWARE_COUNTER_TYPE Type;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG Value;
	/*0010*/
};

enum _HARDWARE_COUNTER_TYPE {
	PMCCounter = 0x0,
	MaxHardwareCounterType = 0x1
};

struct _HD_HITTESTINFO {
	/*0000*/ tagPOINT pt;
	/*0008*/ UINT flags;
	/*000c*/ INT iItem;
	/*0010*/
};

struct _HD_ITEMA {
	/*0000*/ UINT mask;
	/*0004*/ INT cxy;
	/*0008*/ CHAR * pszText;
	/*0010*/ HBITMAP__ * hbm;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT fmt;
	/*0020*/ LONGLONG lParam;
	/*0028*/ INT iImage;
	/*002c*/ INT iOrder;
	/*0030*/ UINT type;
	/*0038*/ void * pvFilter;
	/*0040*/ UINT state;
	/*0048*/
};

struct _HD_ITEMW {
	/*0000*/ UINT mask;
	/*0004*/ INT cxy;
	/*0008*/ WCHAR * pszText;
	/*0010*/ HBITMAP__ * hbm;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT fmt;
	/*0020*/ LONGLONG lParam;
	/*0028*/ INT iImage;
	/*002c*/ INT iOrder;
	/*0030*/ UINT type;
	/*0038*/ void * pvFilter;
	/*0040*/ UINT state;
	/*0048*/
};

struct _HD_LAYOUT {
	/*0000*/ tagRECT * prc;
	/*0008*/ tagWINDOWPOS * pwpos;
	/*0010*/
};

struct _HD_TEXTFILTERA {
	/*0000*/ CHAR * pszText;
	/*0008*/ INT cchTextMax;
	/*0010*/
};

struct _HD_TEXTFILTERW {
	/*0000*/ WCHAR * pszText;
	/*0008*/ INT cchTextMax;
	/*0010*/
};

struct _HEAP_BLOCK_EXTRA_INFORMATION {
	/*0000*/ UCHAR Next;
	/*0004*/ ULONG Type;
	/*0008*/ ULONGLONG Size;
	/*0010*/
};

struct _HEAP_BLOCK_INFORMATION {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONG Flags;
	/*0010*/ ULONGLONG DataSize;
	/*0018*/ ULONGLONG OverheadSize;
	/*0020*/ ULONGLONG NextBlockInformationOffset;
	/*0028*/
};

struct _HEAP_BLOCK_SETTABLE_INFORMATION {
	/*0000*/ ULONGLONG Settable;
	/*0008*/ USHORT TagIndex;
	/*000a*/ USHORT AllocatorBackTraceIndex;
	/*0010*/
};

struct _HEAP_EXTENDED_INFORMATION {
	/*0000*/ void * Process;
	/*0008*/ ULONGLONG Heap;
	/*0010*/ ULONG Level;
	/*0018*/ LONG (* CallbackRoutine)( _HEAP_INFORMATION_ITEM * , void * );
	/*0020*/ void * CallbackContext;
	/*0028*/ _PROCESS_HEAP_INFORMATION ProcessHeapInformation;
	/*0028*/ _HEAP_INFORMATION HeapInformation;
	/*0058*/
};

struct _HEAP_INFORMATION {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONG Mode;
	/*0010*/ ULONGLONG ReserveSize;
	/*0018*/ ULONGLONG CommitSize;
	/*0020*/ ULONGLONG FirstRegionInformationOffset;
	/*0028*/ ULONGLONG NextHeapInformationOffset;
	/*0030*/
};

enum _HEAP_INFORMATION_CLASS {
	HeapCompatibilityInformation = 0x0,
	HeapEnableTerminationOnCorruption = 0x1,
	HeapExtendedInformation = 0x2,
	HeapOptimizeResources = 0x3,
	HeapTaggingInformation = 0x4,
	HeapStackDatabase = 0x5,
	HeapMemoryLimit = 0x6,
	HeapDetailedFailureInformation = 0x80000001,
	HeapSetDebuggingInformation = 0x80000002
};

struct _HEAP_INFORMATION_ITEM {
	/*0000*/ ULONG Level;
	/*0008*/ ULONGLONG Size;
	/*0010*/ _PROCESS_HEAP_INFORMATION ProcessHeapInformation;
	/*0010*/ _HEAP_INFORMATION HeapInformation;
	/*0010*/ _HEAP_REGION_INFORMATION HeapRegionInformation;
	/*0010*/ _HEAP_RANGE_INFORMATION HeapRangeInformation;
	/*0010*/ _HEAP_BLOCK_INFORMATION HeapBlockInformation;
	/*0010*/ _HEAP_PERFORMANCE_COUNTERS_INFORMATION HeapPerfInformation;
	/*0010*/ ULONGLONG DynamicStart;
	/*00a8*/
};

struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _HEAP_PERFORMANCE_COUNTERS_INFORMATION {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Version;
	/*0008*/ ULONG HeapIndex;
	/*000c*/ ULONG LastHeapIndex;
	/*0010*/ ULONGLONG BaseAddress;
	/*0018*/ ULONGLONG ReserveSize;
	/*0020*/ ULONGLONG CommitSize;
	/*0028*/ ULONG SegmentCount;
	/*0030*/ ULONGLONG LargeUCRMemory;
	/*0038*/ ULONG UCRLength;
	/*0040*/ ULONGLONG AllocatedSpace;
	/*0048*/ ULONGLONG FreeSpace;
	/*0050*/ ULONG FreeListLength;
	/*0054*/ ULONG Contention;
	/*0058*/ ULONG VirtualBlocks;
	/*005c*/ ULONG CommitRate;
	/*0060*/ ULONG DecommitRate;
	/*0068*/ _SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION SegmentHeapPerfInformation;
	/*0098*/
};

struct _HEAP_RANGE_INFORMATION {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONGLONG Size;
	/*0010*/ ULONG Type;
	/*0014*/ ULONG Protection;
	/*0018*/ ULONGLONG FirstBlockInformationOffset;
	/*0020*/ ULONGLONG NextRangeInformationOffset;
	/*0028*/
};

struct _HEAP_REGION_INFORMATION {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONGLONG ReserveSize;
	/*0010*/ ULONGLONG CommitSize;
	/*0018*/ ULONGLONG FirstRangeInformationOffset;
	/*0020*/ ULONGLONG NextRegionInformationOffset;
	/*0028*/
};

struct _HEAP_SUMMARY {
	/*0000*/ ULONG cb;
	/*0008*/ ULONGLONG cbAllocated;
	/*0010*/ ULONGLONG cbCommitted;
	/*0018*/ ULONGLONG cbReserved;
	/*0020*/ ULONGLONG cbMaxReserve;
	/*0028*/
};

struct _HIBERFILE_BUCKET {
	/*0000*/ ULONGLONG MaxPhysicalMemory;
	/*0008*/ ULONG PhysicalMemoryPercent[0x3];
	/*0018*/
};

enum _HIBERFILE_BUCKET_SIZE {
	HiberFileBucket1GB = 0x0,
	HiberFileBucket2GB = 0x1,
	HiberFileBucket4GB = 0x2,
	HiberFileBucket8GB = 0x3,
	HiberFileBucket16GB = 0x4,
	HiberFileBucket32GB = 0x5,
	HiberFileBucketUnlimited = 0x6,
	HiberFileBucketMax = 0x7
};

struct _HOT_PATCH_IMAGE_INFO {
	/*0000*/ ULONG CheckSum;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/
};

enum _HOT_PATCH_INFORMATION_CLASS {
	ManageHotPatchLoadPatch = 0x0,
	ManageHotPatchUnloadPatch = 0x1,
	ManageHotPatchQueryPatches = 0x2,
	ManageHotPatchLoadPatchForUser = 0x3,
	ManageHotPatchUnloadPatchForUser = 0x4,
	ManageHotPatchQueryPatchesForUser = 0x5,
	ManageHotPatchQueryActivePatches = 0x6,
	ManageHotPatchMax = 0x7
};

struct _HSM_OPCODE {
	/*0000*/ ULONG Tag;
	/*0004*/ ULONG Code;
	/*0008*/
};

struct _HV_DETAILS {
	/*0000*/ ULONG Data[0x4];
	/*0010*/
};

struct _HYPER_SIZEDARR {
	/*0000*/ ULONG clSize;
	/*0008*/ LONGLONG * pData;
	/*0010*/
};

struct _ICONINFO {
	/*0000*/ INT fIcon;
	/*0004*/ ULONG xHotspot;
	/*0008*/ ULONG yHotspot;
	/*0010*/ HBITMAP__ * hbmMask;
	/*0018*/ HBITMAP__ * hbmColor;
	/*0020*/
};

struct _ICONINFOEXA {
	/*0000*/ ULONG cbSize;
	/*0004*/ INT fIcon;
	/*0008*/ ULONG xHotspot;
	/*000c*/ ULONG yHotspot;
	/*0010*/ HBITMAP__ * hbmMask;
	/*0018*/ HBITMAP__ * hbmColor;
	/*0020*/ USHORT wResID;
	/*0022*/ CHAR szModName[0x104];
	/*0126*/ CHAR szResName[0x104];
	/*0230*/
};

struct _ICONINFOEXW {
	/*0000*/ ULONG cbSize;
	/*0004*/ INT fIcon;
	/*0008*/ ULONG xHotspot;
	/*000c*/ ULONG yHotspot;
	/*0010*/ HBITMAP__ * hbmMask;
	/*0018*/ HBITMAP__ * hbmColor;
	/*0020*/ USHORT wResID;
	/*0022*/ WCHAR szModName[0x104];
	/*022a*/ WCHAR szResName[0x104];
	/*0438*/
};

enum _IDL_CS_CONVERT {
	IDL_CS_NO_CONVERT = 0x0,
	IDL_CS_IN_PLACE_CONVERT = 0x1,
	IDL_CS_NEW_BUFFER_CONVERT = 0x2
};

enum _IF_ACCESS_TYPE {
	IF_ACCESS_LOOPBACK = 0x1,
	IF_ACCESS_BROADCAST = 0x2,
	IF_ACCESS_POINT_TO_POINT = 0x3,
	IF_ACCESS_POINTTOPOINT = 0x3,
	IF_ACCESS_POINT_TO_MULTI_POINT = 0x4,
	IF_ACCESS_POINTTOMULTIPOINT = 0x4
};

enum _IF_ADMINISTRATIVE_STATE {
	IF_ADMINISTRATIVE_DISABLED = 0x0,
	IF_ADMINISTRATIVE_ENABLED = 0x1,
	IF_ADMINISTRATIVE_DEMANDDIAL = 0x2
};

struct _IF_COUNTED_STRING_LH {
	/*0000*/ USHORT Length;
	/*0002*/ WCHAR String[0x101];
	/*0204*/
};

struct _IF_PHYSICAL_ADDRESS_LH {
	/*0000*/ USHORT Length;
	/*0002*/ UCHAR Address[0x20];
	/*0022*/
};

struct _IMAGEINFO {
	/*0000*/ HBITMAP__ * hbmImage;
	/*0008*/ HBITMAP__ * hbmMask;
	/*0010*/ INT Unused1;
	/*0014*/ INT Unused2;
	/*0018*/ tagRECT rcImage;
	/*0028*/
};

struct _IMAGELIST;

struct _IMAGELISTDRAWPARAMS {
	/*0000*/ ULONG cbSize;
	/*0008*/ _IMAGELIST * himl;
	/*0010*/ INT i;
	/*0018*/ HDC__ * hdcDst;
	/*0020*/ INT x;
	/*0024*/ INT y;
	/*0028*/ INT cx;
	/*002c*/ INT cy;
	/*0030*/ INT xBitmap;
	/*0034*/ INT yBitmap;
	/*0038*/ ULONG rgbBk;
	/*003c*/ ULONG rgbFg;
	/*0040*/ UINT fStyle;
	/*0044*/ ULONG dwRop;
	/*0048*/ ULONG fState;
	/*004c*/ ULONG Frame;
	/*0050*/ ULONG crEffect;
	/*0058*/
};

struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONGLONG BeginAddress;
	/*0008*/ ULONGLONG EndAddress;
	/*0010*/ ULONGLONG ExceptionHandler;
	/*0018*/ ULONGLONG HandlerData;
	/*0020*/ ULONGLONG PrologEndAddress;
	/*0028*/
};

struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG BeginAddress;
	/*0004*/ ULONG EndAddress;
	/*0008*/ ULONG ExceptionHandler;
	/*000c*/ ULONG HandlerData;
	/*0010*/ ULONG PrologEndAddress;
	/*0014*/
};

struct _IMAGE_ARCHIVE_MEMBER_HEADER {
	/*0000*/ UCHAR Name[0x10];
	/*0010*/ UCHAR Date[0xc];
	/*001c*/ UCHAR UserID[0x6];
	/*0022*/ UCHAR GroupID[0x6];
	/*0028*/ UCHAR Mode[0x8];
	/*0030*/ UCHAR Size[0xa];
	/*003a*/ UCHAR EndHeader[0x2];
	/*003c*/
};

struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG BeginAddress;
	/*0004*/ ULONG UnwindData;
	/*0004*/ ULONG Flag : 02; // 0x00000003;
	/*0004*/ ULONG FunctionLength : 11; // 0x00001ffc;
	/*0004*/ ULONG RegF : 03; // 0x0000e000;
	/*0004*/ ULONG RegI : 04; // 0x000f0000;
	/*0004*/ ULONG H : 01; // 0x00100000;
	/*0004*/ ULONG CR : 02; // 0x00600000;
	/*0004*/ ULONG FrameSize : 09; // 0xff800000;
	/*0008*/
};

struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG BeginAddress;
	/*0004*/ ULONG UnwindData;
	/*0004*/ ULONG Flag : 02; // 0x00000003;
	/*0004*/ ULONG FunctionLength : 11; // 0x00001ffc;
	/*0004*/ ULONG Ret : 02; // 0x00006000;
	/*0004*/ ULONG H : 01; // 0x00008000;
	/*0004*/ ULONG Reg : 03; // 0x00070000;
	/*0004*/ ULONG R : 01; // 0x00080000;
	/*0004*/ ULONG L : 01; // 0x00100000;
	/*0004*/ ULONG C : 01; // 0x00200000;
	/*0004*/ ULONG StackAdjust : 10; // 0xffc00000;
	/*0008*/
};

union _IMAGE_AUX_SYMBOL {
	
	
	
	
	/*0000*/ <unnamed-type-Sym> Sym;
	/*0000*/ <unnamed-type-File> File;
	/*0000*/ <unnamed-type-Section> Section;
	/*0000*/ IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
	/*0000*/ <unnamed-type-CRC> CRC;
	/*0012*/
};

union _IMAGE_AUX_SYMBOL_EX {
	
	
	
	
	/*0000*/ <unnamed-type-Sym> Sym;
	/*0000*/ <unnamed-type-File> File;
	/*0000*/ <unnamed-type-Section> Section;
	/*0000*/ IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
	/*0012*/ UCHAR rgbReserved[0x2];
	/*0000*/ <unnamed-type-CRC> CRC;
	/*0014*/
};

struct _IMAGE_BASE_RELOCATION {
	/*0000*/ ULONG VirtualAddress;
	/*0004*/ ULONG SizeOfBlock;
	/*0008*/
};

struct _IMAGE_BOUND_FORWARDER_REF {
	/*0000*/ ULONG TimeDateStamp;
	/*0004*/ USHORT OffsetModuleName;
	/*0006*/ USHORT Reserved;
	/*0008*/
};

struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
	/*0000*/ ULONG TimeDateStamp;
	/*0004*/ USHORT OffsetModuleName;
	/*0006*/ USHORT NumberOfModuleForwarderRefs;
	/*0008*/
};

struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG FuncStart;
	/*0004*/ ULONG PrologLen : 08; // 0x000000ff;
	/*0004*/ ULONG FuncLen : 22; // 0x3fffff00;
	/*0004*/ ULONG ThirtyTwoBit : 01; // 0x40000000;
	/*0004*/ ULONG ExceptionFlag : 01; // 0x80000000;
	/*0008*/
};

struct _IMAGE_CHPE_METADATA_X86 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG CHPECodeAddressRangeOffset;
	/*0008*/ ULONG CHPECodeAddressRangeCount;
	/*000c*/ ULONG WowA64ExceptionHandlerFunctionPointer;
	/*0010*/ ULONG WowA64DispatchCallFunctionPointer;
	/*0014*/ ULONG WowA64DispatchIndirectCallFunctionPointer;
	/*0018*/ ULONG WowA64DispatchIndirectCallCfgFunctionPointer;
	/*001c*/ ULONG WowA64DispatchRetFunctionPointer;
	/*0020*/ ULONG WowA64DispatchRetLeafFunctionPointer;
	/*0024*/ ULONG WowA64DispatchJumpFunctionPointer;
	/*0028*/ ULONG CompilerIATPointer;
	/*002c*/ ULONG WowA64RdtscFunctionPointer;
	/*0030*/
};

struct _IMAGE_CHPE_RANGE_ENTRY {
	/*0000*/ ULONG StartOffset;
	/*0000*/ ULONG NativeCode : 01; // 0x00000001;
	/*0000*/ ULONG AddressBits : 31; // 0xfffffffe;
	/*0004*/ ULONG Length;
	/*0008*/
};

struct _IMAGE_COFF_SYMBOLS_HEADER {
	/*0000*/ ULONG NumberOfSymbols;
	/*0004*/ ULONG LvaToFirstSymbol;
	/*0008*/ ULONG NumberOfLinenumbers;
	/*000c*/ ULONG LvaToFirstLinenumber;
	/*0010*/ ULONG RvaToFirstByteOfCode;
	/*0014*/ ULONG RvaToLastByteOfCode;
	/*0018*/ ULONG RvaToFirstByteOfData;
	/*001c*/ ULONG RvaToLastByteOfData;
	/*0020*/
};

struct _IMAGE_DATA_DIRECTORY {
	/*0000*/ ULONG VirtualAddress;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _IMAGE_DEBUG_DIRECTORY {
	/*0000*/ ULONG Characteristics;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ ULONG Type;
	/*0010*/ ULONG SizeOfData;
	/*0014*/ ULONG AddressOfRawData;
	/*0018*/ ULONG PointerToRawData;
	/*001c*/
};

struct _IMAGE_DEBUG_MISC {
	/*0000*/ ULONG DataType;
	/*0004*/ ULONG Length;
	/*0008*/ UCHAR Unicode;
	/*0009*/ UCHAR Reserved[0x3];
	/*000c*/ UCHAR Data[0x1];
	/*0010*/
};

struct _IMAGE_DELAYLOAD_DESCRIPTOR {
	
	/*0000*/ <unnamed-type-Attributes> Attributes;
	/*0004*/ ULONG DllNameRVA;
	/*0008*/ ULONG ModuleHandleRVA;
	/*000c*/ ULONG ImportAddressTableRVA;
	/*0010*/ ULONG ImportNameTableRVA;
	/*0014*/ ULONG BoundImportAddressTableRVA;
	/*0018*/ ULONG UnloadInformationTableRVA;
	/*001c*/ ULONG TimeDateStamp;
	/*0020*/
};

struct _IMAGE_DOS_HEADER {
	/*0000*/ USHORT e_magic;
	/*0002*/ USHORT e_cblp;
	/*0004*/ USHORT e_cp;
	/*0006*/ USHORT e_crlc;
	/*0008*/ USHORT e_cparhdr;
	/*000a*/ USHORT e_minalloc;
	/*000c*/ USHORT e_maxalloc;
	/*000e*/ USHORT e_ss;
	/*0010*/ USHORT e_sp;
	/*0012*/ USHORT e_csum;
	/*0014*/ USHORT e_ip;
	/*0016*/ USHORT e_cs;
	/*0018*/ USHORT e_lfarlc;
	/*001a*/ USHORT e_ovno;
	/*001c*/ USHORT e_res[0x4];
	/*0024*/ USHORT e_oemid;
	/*0026*/ USHORT e_oeminfo;
	/*0028*/ USHORT e_res2[0xa];
	/*003c*/ LONG e_lfanew;
	/*0040*/
};

struct _IMAGE_DYNAMIC_RELOCATION32 {
	/*0000*/ ULONG Symbol;
	/*0004*/ ULONG BaseRelocSize;
	/*0008*/
};

struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
	/*0000*/ ULONG HeaderSize;
	/*0004*/ ULONG FixupInfoSize;
	/*0008*/ ULONG Symbol;
	/*000c*/ ULONG SymbolGroup;
	/*0010*/ ULONG Flags;
	/*0014*/
};

struct _IMAGE_DYNAMIC_RELOCATION64 {
	/*0000*/ ULONGLONG Symbol;
	/*0008*/ ULONG BaseRelocSize;
	/*000c*/
};

struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
	/*0000*/ ULONG HeaderSize;
	/*0004*/ ULONG FixupInfoSize;
	/*0008*/ ULONGLONG Symbol;
	/*0010*/ ULONG SymbolGroup;
	/*0014*/ ULONG Flags;
	/*0018*/
};

struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _IMAGE_ENCLAVE_CONFIG32 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG MinimumRequiredConfigSize;
	/*0008*/ ULONG PolicyFlags;
	/*000c*/ ULONG NumberOfImports;
	/*0010*/ ULONG ImportList;
	/*0014*/ ULONG ImportEntrySize;
	/*0018*/ UCHAR FamilyID[0x10];
	/*0028*/ UCHAR ImageID[0x10];
	/*0038*/ ULONG ImageVersion;
	/*003c*/ ULONG SecurityVersion;
	/*0040*/ ULONG EnclaveSize;
	/*0044*/ ULONG NumberOfThreads;
	/*0048*/ ULONG EnclaveFlags;
	/*004c*/
};

struct _IMAGE_ENCLAVE_CONFIG64 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG MinimumRequiredConfigSize;
	/*0008*/ ULONG PolicyFlags;
	/*000c*/ ULONG NumberOfImports;
	/*0010*/ ULONG ImportList;
	/*0014*/ ULONG ImportEntrySize;
	/*0018*/ UCHAR FamilyID[0x10];
	/*0028*/ UCHAR ImageID[0x10];
	/*0038*/ ULONG ImageVersion;
	/*003c*/ ULONG SecurityVersion;
	/*0040*/ ULONGLONG EnclaveSize;
	/*0048*/ ULONG NumberOfThreads;
	/*004c*/ ULONG EnclaveFlags;
	/*0050*/
};

struct _IMAGE_ENCLAVE_IMPORT {
	/*0000*/ ULONG MatchType;
	/*0004*/ ULONG MinimumSecurityVersion;
	/*0008*/ UCHAR UniqueOrAuthorID[0x20];
	/*0028*/ UCHAR FamilyID[0x10];
	/*0038*/ UCHAR ImageID[0x10];
	/*0048*/ ULONG ImportName;
	/*004c*/ ULONG Reserved;
	/*0050*/
};

struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
	/*0000*/ ULONG EpilogueCount;
	/*0004*/ UCHAR EpilogueByteCount;
	/*0005*/ UCHAR BranchDescriptorElementSize;
	/*0006*/ USHORT BranchDescriptorCount;
	/*0008*/
};

struct _IMAGE_EXPORT_DIRECTORY {
	/*0000*/ ULONG Characteristics;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ ULONG Name;
	/*0010*/ ULONG Base;
	/*0014*/ ULONG NumberOfFunctions;
	/*0018*/ ULONG NumberOfNames;
	/*001c*/ ULONG AddressOfFunctions;
	/*0020*/ ULONG AddressOfNames;
	/*0024*/ ULONG AddressOfNameOrdinals;
	/*0028*/
};

struct _IMAGE_FILE_HEADER {
	/*0000*/ USHORT Machine;
	/*0002*/ USHORT NumberOfSections;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ ULONG PointerToSymbolTable;
	/*000c*/ ULONG NumberOfSymbols;
	/*0010*/ USHORT SizeOfOptionalHeader;
	/*0012*/ USHORT Characteristics;
	/*0014*/
};

struct _IMAGE_FUNCTION_ENTRY {
	/*0000*/ ULONG StartingAddress;
	/*0004*/ ULONG EndingAddress;
	/*0008*/ ULONG EndOfPrologue;
	/*000c*/
};

struct _IMAGE_FUNCTION_ENTRY64 {
	/*0000*/ ULONGLONG StartingAddress;
	/*0008*/ ULONGLONG EndingAddress;
	/*0010*/ ULONGLONG EndOfPrologue;
	/*0010*/ ULONGLONG UnwindInfoAddress;
	/*0018*/
};

struct _IMAGE_HOT_PATCH_BASE {
	/*0000*/ ULONG SequenceNumber;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG OriginalTimeDateStamp;
	/*000c*/ ULONG OriginalCheckSum;
	/*0010*/ ULONG CodeIntegrityInfo;
	/*0014*/ ULONG CodeIntegritySize;
	/*0018*/ ULONG PatchTable;
	/*001c*/ ULONG BufferOffset;
	/*0020*/
};

struct _IMAGE_HOT_PATCH_HASHES {
	/*0000*/ UCHAR SHA256[0x20];
	/*0020*/ UCHAR SHA1[0x14];
	/*0034*/
};

struct _IMAGE_HOT_PATCH_INFO {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG SequenceNumber;
	/*000c*/ ULONG BaseImageList;
	/*0010*/ ULONG BaseImageCount;
	/*0014*/ ULONG BufferOffset;
	/*0018*/ ULONG ExtraPatchSize;
	/*001c*/
};

struct _IMAGE_IMPORT_BY_NAME {
	/*0000*/ USHORT Hint;
	/*0002*/ CHAR Name[0x1];
	/*0004*/
};

struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
	/*0000*/ ULONG PageRelativeOffset : 12; // 0x00000fff;
	/*0000*/ ULONG IndirectCall : 01; // 0x00001000;
	/*0000*/ ULONG IATIndex : 19; // 0xffffe000;
	/*0004*/
};

struct _IMAGE_IMPORT_DESCRIPTOR {
	/*0000*/ ULONG Characteristics;
	/*0000*/ ULONG OriginalFirstThunk;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ ULONG ForwarderChain;
	/*000c*/ ULONG Name;
	/*0010*/ ULONG FirstThunk;
	/*0014*/
};

struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
	/*0000*/ USHORT PageRelativeOffset : 12; // 0x0fff;
	/*0000*/ USHORT IndirectCall : 01; // 0x1000;
	/*0000*/ USHORT RexWPrefix : 01; // 0x2000;
	/*0000*/ USHORT CfgCheck : 01; // 0x4000;
	/*0000*/ USHORT Reserved : 01; // 0x8000;
	/*0002*/
};

struct _IMAGE_LINENUMBER {
	
	/*0000*/ <unnamed-type-Type> Type;
	/*0004*/ USHORT Linenumber;
	/*0006*/
};

struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
	/*0000*/ USHORT Flags;
	/*0002*/ USHORT Catalog;
	/*0004*/ ULONG CatalogOffset;
	/*0008*/ ULONG Reserved;
	/*000c*/
};

struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ ULONG GlobalFlagsClear;
	/*0010*/ ULONG GlobalFlagsSet;
	/*0014*/ ULONG CriticalSectionDefaultTimeout;
	/*0018*/ ULONG DeCommitFreeBlockThreshold;
	/*001c*/ ULONG DeCommitTotalFreeThreshold;
	/*0020*/ ULONG LockPrefixTable;
	/*0024*/ ULONG MaximumAllocationSize;
	/*0028*/ ULONG VirtualMemoryThreshold;
	/*002c*/ ULONG ProcessHeapFlags;
	/*0030*/ ULONG ProcessAffinityMask;
	/*0034*/ USHORT CSDVersion;
	/*0036*/ USHORT DependentLoadFlags;
	/*0038*/ ULONG EditList;
	/*003c*/ ULONG SecurityCookie;
	/*0040*/ ULONG SEHandlerTable;
	/*0044*/ ULONG SEHandlerCount;
	/*0048*/ ULONG GuardCFCheckFunctionPointer;
	/*004c*/ ULONG GuardCFDispatchFunctionPointer;
	/*0050*/ ULONG GuardCFFunctionTable;
	/*0054*/ ULONG GuardCFFunctionCount;
	/*0058*/ ULONG GuardFlags;
	/*005c*/ _IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
	/*0068*/ ULONG GuardAddressTakenIatEntryTable;
	/*006c*/ ULONG GuardAddressTakenIatEntryCount;
	/*0070*/ ULONG GuardLongJumpTargetTable;
	/*0074*/ ULONG GuardLongJumpTargetCount;
	/*0078*/ ULONG DynamicValueRelocTable;
	/*007c*/ ULONG CHPEMetadataPointer;
	/*0080*/ ULONG GuardRFFailureRoutine;
	/*0084*/ ULONG GuardRFFailureRoutineFunctionPointer;
	/*0088*/ ULONG DynamicValueRelocTableOffset;
	/*008c*/ USHORT DynamicValueRelocTableSection;
	/*008e*/ USHORT Reserved2;
	/*0090*/ ULONG GuardRFVerifyStackPointerFunctionPointer;
	/*0094*/ ULONG HotPatchTableOffset;
	/*0098*/ ULONG Reserved3;
	/*009c*/ ULONG EnclaveConfigurationPointer;
	/*00a0*/ ULONG VolatileMetadataPointer;
	/*00a4*/ ULONG GuardEHContinuationTable;
	/*00a8*/ ULONG GuardEHContinuationCount;
	/*00ac*/
};

struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ ULONG GlobalFlagsClear;
	/*0010*/ ULONG GlobalFlagsSet;
	/*0014*/ ULONG CriticalSectionDefaultTimeout;
	/*0018*/ ULONGLONG DeCommitFreeBlockThreshold;
	/*0020*/ ULONGLONG DeCommitTotalFreeThreshold;
	/*0028*/ ULONGLONG LockPrefixTable;
	/*0030*/ ULONGLONG MaximumAllocationSize;
	/*0038*/ ULONGLONG VirtualMemoryThreshold;
	/*0040*/ ULONGLONG ProcessAffinityMask;
	/*0048*/ ULONG ProcessHeapFlags;
	/*004c*/ USHORT CSDVersion;
	/*004e*/ USHORT DependentLoadFlags;
	/*0050*/ ULONGLONG EditList;
	/*0058*/ ULONGLONG SecurityCookie;
	/*0060*/ ULONGLONG SEHandlerTable;
	/*0068*/ ULONGLONG SEHandlerCount;
	/*0070*/ ULONGLONG GuardCFCheckFunctionPointer;
	/*0078*/ ULONGLONG GuardCFDispatchFunctionPointer;
	/*0080*/ ULONGLONG GuardCFFunctionTable;
	/*0088*/ ULONGLONG GuardCFFunctionCount;
	/*0090*/ ULONG GuardFlags;
	/*0094*/ _IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
	/*00a0*/ ULONGLONG GuardAddressTakenIatEntryTable;
	/*00a8*/ ULONGLONG GuardAddressTakenIatEntryCount;
	/*00b0*/ ULONGLONG GuardLongJumpTargetTable;
	/*00b8*/ ULONGLONG GuardLongJumpTargetCount;
	/*00c0*/ ULONGLONG DynamicValueRelocTable;
	/*00c8*/ ULONGLONG CHPEMetadataPointer;
	/*00d0*/ ULONGLONG GuardRFFailureRoutine;
	/*00d8*/ ULONGLONG GuardRFFailureRoutineFunctionPointer;
	/*00e0*/ ULONG DynamicValueRelocTableOffset;
	/*00e4*/ USHORT DynamicValueRelocTableSection;
	/*00e6*/ USHORT Reserved2;
	/*00e8*/ ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
	/*00f0*/ ULONG HotPatchTableOffset;
	/*00f4*/ ULONG Reserved3;
	/*00f8*/ ULONGLONG EnclaveConfigurationPointer;
	/*0100*/ ULONGLONG VolatileMetadataPointer;
	/*0108*/ ULONGLONG GuardEHContinuationTable;
	/*0110*/ ULONGLONG GuardEHContinuationCount;
	/*0118*/
};

enum _IMAGE_MITIGATION_POLICY {
	ImageDepPolicy = 0x0,
	ImageAslrPolicy = 0x1,
	ImageDynamicCodePolicy = 0x2,
	ImageStrictHandleCheckPolicy = 0x3,
	ImageSystemCallDisablePolicy = 0x4,
	ImageMitigationOptionsMask = 0x5,
	ImageExtensionPointDisablePolicy = 0x6,
	ImageControlFlowGuardPolicy = 0x7,
	ImageSignaturePolicy = 0x8,
	ImageFontDisablePolicy = 0x9,
	ImageImageLoadPolicy = 0xa,
	ImagePayloadRestrictionPolicy = 0xb,
	ImageChildProcessPolicy = 0xc,
	ImageSehopPolicy = 0xd,
	ImageHeapPolicy = 0xe,
	ImageUserShadowStackPolicy = 0xf,
	MaxImageMitigationPolicy = 0x10
};

struct _IMAGE_NT_HEADERS {
	/*0000*/ ULONG Signature;
	/*0004*/ _IMAGE_FILE_HEADER FileHeader;
	/*0018*/ _IMAGE_OPTIONAL_HEADER OptionalHeader;
	/*00f8*/
};

struct _IMAGE_NT_HEADERS64 {
	/*0000*/ ULONG Signature;
	/*0004*/ _IMAGE_FILE_HEADER FileHeader;
	/*0018*/ _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
	/*0108*/
};

struct _IMAGE_OPTIONAL_HEADER {
	/*0000*/ USHORT Magic;
	/*0002*/ UCHAR MajorLinkerVersion;
	/*0003*/ UCHAR MinorLinkerVersion;
	/*0004*/ ULONG SizeOfCode;
	/*0008*/ ULONG SizeOfInitializedData;
	/*000c*/ ULONG SizeOfUninitializedData;
	/*0010*/ ULONG AddressOfEntryPoint;
	/*0014*/ ULONG BaseOfCode;
	/*0018*/ ULONG BaseOfData;
	/*001c*/ ULONG ImageBase;
	/*0020*/ ULONG SectionAlignment;
	/*0024*/ ULONG FileAlignment;
	/*0028*/ USHORT MajorOperatingSystemVersion;
	/*002a*/ USHORT MinorOperatingSystemVersion;
	/*002c*/ USHORT MajorImageVersion;
	/*002e*/ USHORT MinorImageVersion;
	/*0030*/ USHORT MajorSubsystemVersion;
	/*0032*/ USHORT MinorSubsystemVersion;
	/*0034*/ ULONG Win32VersionValue;
	/*0038*/ ULONG SizeOfImage;
	/*003c*/ ULONG SizeOfHeaders;
	/*0040*/ ULONG CheckSum;
	/*0044*/ USHORT Subsystem;
	/*0046*/ USHORT DllCharacteristics;
	/*0048*/ ULONG SizeOfStackReserve;
	/*004c*/ ULONG SizeOfStackCommit;
	/*0050*/ ULONG SizeOfHeapReserve;
	/*0054*/ ULONG SizeOfHeapCommit;
	/*0058*/ ULONG LoaderFlags;
	/*005c*/ ULONG NumberOfRvaAndSizes;
	/*0060*/ _IMAGE_DATA_DIRECTORY DataDirectory[0x10];
	/*00e0*/
};

struct _IMAGE_OPTIONAL_HEADER64 {
	/*0000*/ USHORT Magic;
	/*0002*/ UCHAR MajorLinkerVersion;
	/*0003*/ UCHAR MinorLinkerVersion;
	/*0004*/ ULONG SizeOfCode;
	/*0008*/ ULONG SizeOfInitializedData;
	/*000c*/ ULONG SizeOfUninitializedData;
	/*0010*/ ULONG AddressOfEntryPoint;
	/*0014*/ ULONG BaseOfCode;
	/*0018*/ ULONGLONG ImageBase;
	/*0020*/ ULONG SectionAlignment;
	/*0024*/ ULONG FileAlignment;
	/*0028*/ USHORT MajorOperatingSystemVersion;
	/*002a*/ USHORT MinorOperatingSystemVersion;
	/*002c*/ USHORT MajorImageVersion;
	/*002e*/ USHORT MinorImageVersion;
	/*0030*/ USHORT MajorSubsystemVersion;
	/*0032*/ USHORT MinorSubsystemVersion;
	/*0034*/ ULONG Win32VersionValue;
	/*0038*/ ULONG SizeOfImage;
	/*003c*/ ULONG SizeOfHeaders;
	/*0040*/ ULONG CheckSum;
	/*0044*/ USHORT Subsystem;
	/*0046*/ USHORT DllCharacteristics;
	/*0048*/ ULONGLONG SizeOfStackReserve;
	/*0050*/ ULONGLONG SizeOfStackCommit;
	/*0058*/ ULONGLONG SizeOfHeapReserve;
	/*0060*/ ULONGLONG SizeOfHeapCommit;
	/*0068*/ ULONG LoaderFlags;
	/*006c*/ ULONG NumberOfRvaAndSizes;
	/*0070*/ _IMAGE_DATA_DIRECTORY DataDirectory[0x10];
	/*00f0*/
};

struct _IMAGE_OS2_HEADER {
	/*0000*/ USHORT ne_magic;
	/*0002*/ CHAR ne_ver;
	/*0003*/ CHAR ne_rev;
	/*0004*/ USHORT ne_enttab;
	/*0006*/ USHORT ne_cbenttab;
	/*0008*/ LONG ne_crc;
	/*000c*/ USHORT ne_flags;
	/*000e*/ USHORT ne_autodata;
	/*0010*/ USHORT ne_heap;
	/*0012*/ USHORT ne_stack;
	/*0014*/ LONG ne_csip;
	/*0018*/ LONG ne_sssp;
	/*001c*/ USHORT ne_cseg;
	/*001e*/ USHORT ne_cmod;
	/*0020*/ USHORT ne_cbnrestab;
	/*0022*/ USHORT ne_segtab;
	/*0024*/ USHORT ne_rsrctab;
	/*0026*/ USHORT ne_restab;
	/*0028*/ USHORT ne_modtab;
	/*002a*/ USHORT ne_imptab;
	/*002c*/ LONG ne_nrestab;
	/*0030*/ USHORT ne_cmovent;
	/*0032*/ USHORT ne_align;
	/*0034*/ USHORT ne_cres;
	/*0036*/ UCHAR ne_exetyp;
	/*0037*/ UCHAR ne_flagsothers;
	/*0038*/ USHORT ne_pretthunks;
	/*003a*/ USHORT ne_psegrefbytes;
	/*003c*/ USHORT ne_swaparea;
	/*003e*/ USHORT ne_expver;
	/*0040*/
};

struct _IMAGE_POLICY_ENTRY {
	
	/*0000*/ _IMAGE_POLICY_ENTRY_TYPE Type;
	/*0004*/ _IMAGE_POLICY_ID PolicyId;
	/*0008*/ <unnamed-type-u> u;
	/*0010*/
};

enum _IMAGE_POLICY_ENTRY_TYPE {
	ImagePolicyEntryTypeNone = 0x0,
	ImagePolicyEntryTypeBool = 0x1,
	ImagePolicyEntryTypeInt8 = 0x2,
	ImagePolicyEntryTypeUInt8 = 0x3,
	ImagePolicyEntryTypeInt16 = 0x4,
	ImagePolicyEntryTypeUInt16 = 0x5,
	ImagePolicyEntryTypeInt32 = 0x6,
	ImagePolicyEntryTypeUInt32 = 0x7,
	ImagePolicyEntryTypeInt64 = 0x8,
	ImagePolicyEntryTypeUInt64 = 0x9,
	ImagePolicyEntryTypeAnsiString = 0xa,
	ImagePolicyEntryTypeUnicodeString = 0xb,
	ImagePolicyEntryTypeOverride = 0xc,
	ImagePolicyEntryTypeMaximum = 0xd
};

enum _IMAGE_POLICY_ID {
	ImagePolicyIdNone = 0x0,
	ImagePolicyIdEtw = 0x1,
	ImagePolicyIdDebug = 0x2,
	ImagePolicyIdCrashDump = 0x3,
	ImagePolicyIdCrashDumpKey = 0x4,
	ImagePolicyIdCrashDumpKeyGuid = 0x5,
	ImagePolicyIdParentSd = 0x6,
	ImagePolicyIdParentSdRev = 0x7,
	ImagePolicyIdSvn = 0x8,
	ImagePolicyIdDeviceId = 0x9,
	ImagePolicyIdCapability = 0xa,
	ImagePolicyIdScenarioId = 0xb,
	ImagePolicyIdMaximum = 0xc
};

struct _IMAGE_POLICY_METADATA {
	/*0000*/ UCHAR Version;
	/*0001*/ UCHAR Reserved0[0x7];
	/*0008*/ ULONGLONG ApplicationId;
	/*0010*/ _IMAGE_POLICY_ENTRY Policies[];
	/*0010*/
};

struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
	/*0000*/ UCHAR PrologueByteCount;
	/*0001*/
};

struct _IMAGE_RELOCATION {
	/*0000*/ ULONG VirtualAddress;
	/*0000*/ ULONG RelocCount;
	/*0004*/ ULONG SymbolTableIndex;
	/*0008*/ USHORT Type;
	/*000a*/
};

struct _IMAGE_RESOURCE_DATA_ENTRY {
	/*0000*/ ULONG OffsetToData;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG CodePage;
	/*000c*/ ULONG Reserved;
	/*0010*/
};

struct _IMAGE_RESOURCE_DIRECTORY {
	/*0000*/ ULONG Characteristics;
	/*0004*/ ULONG TimeDateStamp;
	/*0008*/ USHORT MajorVersion;
	/*000a*/ USHORT MinorVersion;
	/*000c*/ USHORT NumberOfNamedEntries;
	/*000e*/ USHORT NumberOfIdEntries;
	/*0010*/
};

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
	/*0000*/ ULONG NameOffset : 31; // 0x7fffffff;
	/*0000*/ ULONG NameIsString : 01; // 0x80000000;
	/*0000*/ ULONG Name;
	/*0000*/ USHORT Id;
	/*0004*/ ULONG OffsetToData;
	/*0004*/ ULONG OffsetToDirectory : 31; // 0x7fffffff;
	/*0004*/ ULONG DataIsDirectory : 01; // 0x80000000;
	/*0008*/
};

struct _IMAGE_RESOURCE_DIRECTORY_STRING {
	/*0000*/ USHORT Length;
	/*0002*/ CHAR NameString[0x1];
	/*0004*/
};

struct _IMAGE_RESOURCE_DIR_STRING_U {
	/*0000*/ USHORT Length;
	/*0002*/ WCHAR NameString[0x1];
	/*0004*/
};

struct _IMAGE_ROM_HEADERS {
	/*0000*/ _IMAGE_FILE_HEADER FileHeader;
	/*0014*/ _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
	/*004c*/
};

struct _IMAGE_ROM_OPTIONAL_HEADER {
	/*0000*/ USHORT Magic;
	/*0002*/ UCHAR MajorLinkerVersion;
	/*0003*/ UCHAR MinorLinkerVersion;
	/*0004*/ ULONG SizeOfCode;
	/*0008*/ ULONG SizeOfInitializedData;
	/*000c*/ ULONG SizeOfUninitializedData;
	/*0010*/ ULONG AddressOfEntryPoint;
	/*0014*/ ULONG BaseOfCode;
	/*0018*/ ULONG BaseOfData;
	/*001c*/ ULONG BaseOfBss;
	/*0020*/ ULONG GprMask;
	/*0024*/ ULONG CprMask[0x4];
	/*0034*/ ULONG GpValue;
	/*0038*/
};

struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
	/*0000*/ ULONG BeginAddress;
	/*0004*/ ULONG EndAddress;
	/*0008*/ ULONG UnwindInfoAddress;
	/*0008*/ ULONG UnwindData;
	/*000c*/
};

struct _IMAGE_SECTION_HEADER {
	
	/*0000*/ UCHAR Name[0x8];
	/*0008*/ <unnamed-type-Misc> Misc;
	/*000c*/ ULONG VirtualAddress;
	/*0010*/ ULONG SizeOfRawData;
	/*0014*/ ULONG PointerToRawData;
	/*0018*/ ULONG PointerToRelocations;
	/*001c*/ ULONG PointerToLinenumbers;
	/*0020*/ USHORT NumberOfRelocations;
	/*0022*/ USHORT NumberOfLinenumbers;
	/*0024*/ ULONG Characteristics;
	/*0028*/
};

struct _IMAGE_SEPARATE_DEBUG_HEADER {
	/*0000*/ USHORT Signature;
	/*0002*/ USHORT Flags;
	/*0004*/ USHORT Machine;
	/*0006*/ USHORT Characteristics;
	/*0008*/ ULONG TimeDateStamp;
	/*000c*/ ULONG CheckSum;
	/*0010*/ ULONG ImageBase;
	/*0014*/ ULONG SizeOfImage;
	/*0018*/ ULONG NumberOfSections;
	/*001c*/ ULONG ExportedNamesSize;
	/*0020*/ ULONG DebugDirectorySize;
	/*0024*/ ULONG SectionAlignment;
	/*0028*/ ULONG Reserved[0x2];
	/*0030*/
};

struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
	/*0000*/ USHORT PageRelativeOffset : 12; // 0x0fff;
	/*0000*/ USHORT RegisterNumber : 04; // 0xf000;
	/*0002*/
};

struct _IMAGE_SYMBOL {
	
	/*0000*/ <unnamed-type-N> N;
	/*0008*/ ULONG Value;
	/*000c*/ SHORT SectionNumber;
	/*000e*/ USHORT Type;
	/*0010*/ UCHAR StorageClass;
	/*0011*/ UCHAR NumberOfAuxSymbols;
	/*0012*/
};

struct _IMAGE_SYMBOL_EX {
	
	/*0000*/ <unnamed-type-N> N;
	/*0008*/ ULONG Value;
	/*000c*/ LONG SectionNumber;
	/*0010*/ USHORT Type;
	/*0012*/ UCHAR StorageClass;
	/*0013*/ UCHAR NumberOfAuxSymbols;
	/*0014*/
};

struct _IMAGE_THUNK_DATA32 {
	
	/*0000*/ <unnamed-type-u1> u1;
	/*0004*/
};

struct _IMAGE_THUNK_DATA64 {
	
	/*0000*/ <unnamed-type-u1> u1;
	/*0008*/
};

struct _IMAGE_TLS_DIRECTORY32 {
	/*0000*/ ULONG StartAddressOfRawData;
	/*0004*/ ULONG EndAddressOfRawData;
	/*0008*/ ULONG AddressOfIndex;
	/*000c*/ ULONG AddressOfCallBacks;
	/*0010*/ ULONG SizeOfZeroFill;
	/*0014*/ ULONG Characteristics;
	/*0014*/ ULONG Reserved0 : 20; // 0x000fffff;
	/*0014*/ ULONG Alignment : 04; // 0x00f00000;
	/*0014*/ ULONG Reserved1 : 08; // 0xff000000;
	/*0018*/
};

struct _IMAGE_TLS_DIRECTORY64 {
	/*0000*/ ULONGLONG StartAddressOfRawData;
	/*0008*/ ULONGLONG EndAddressOfRawData;
	/*0010*/ ULONGLONG AddressOfIndex;
	/*0018*/ ULONGLONG AddressOfCallBacks;
	/*0020*/ ULONG SizeOfZeroFill;
	/*0024*/ ULONG Characteristics;
	/*0024*/ ULONG Reserved0 : 20; // 0x000fffff;
	/*0024*/ ULONG Alignment : 04; // 0x00f00000;
	/*0024*/ ULONG Reserved1 : 08; // 0xff000000;
	/*0028*/
};

struct _IMAGE_VXD_HEADER {
	/*0000*/ USHORT e32_magic;
	/*0002*/ UCHAR e32_border;
	/*0003*/ UCHAR e32_worder;
	/*0004*/ ULONG e32_level;
	/*0008*/ USHORT e32_cpu;
	/*000a*/ USHORT e32_os;
	/*000c*/ ULONG e32_ver;
	/*0010*/ ULONG e32_mflags;
	/*0014*/ ULONG e32_mpages;
	/*0018*/ ULONG e32_startobj;
	/*001c*/ ULONG e32_eip;
	/*0020*/ ULONG e32_stackobj;
	/*0024*/ ULONG e32_esp;
	/*0028*/ ULONG e32_pagesize;
	/*002c*/ ULONG e32_lastpagesize;
	/*0030*/ ULONG e32_fixupsize;
	/*0034*/ ULONG e32_fixupsum;
	/*0038*/ ULONG e32_ldrsize;
	/*003c*/ ULONG e32_ldrsum;
	/*0040*/ ULONG e32_objtab;
	/*0044*/ ULONG e32_objcnt;
	/*0048*/ ULONG e32_objmap;
	/*004c*/ ULONG e32_itermap;
	/*0050*/ ULONG e32_rsrctab;
	/*0054*/ ULONG e32_rsrccnt;
	/*0058*/ ULONG e32_restab;
	/*005c*/ ULONG e32_enttab;
	/*0060*/ ULONG e32_dirtab;
	/*0064*/ ULONG e32_dircnt;
	/*0068*/ ULONG e32_fpagetab;
	/*006c*/ ULONG e32_frectab;
	/*0070*/ ULONG e32_impmod;
	/*0074*/ ULONG e32_impmodcnt;
	/*0078*/ ULONG e32_impproc;
	/*007c*/ ULONG e32_pagesum;
	/*0080*/ ULONG e32_datapage;
	/*0084*/ ULONG e32_preload;
	/*0088*/ ULONG e32_nrestab;
	/*008c*/ ULONG e32_cbnrestab;
	/*0090*/ ULONG e32_nressum;
	/*0094*/ ULONG e32_autodata;
	/*0098*/ ULONG e32_debuginfo;
	/*009c*/ ULONG e32_debuglen;
	/*00a0*/ ULONG e32_instpreload;
	/*00a4*/ ULONG e32_instdemand;
	/*00a8*/ ULONG e32_heapsize;
	/*00ac*/ UCHAR e32_res3[0xc];
	/*00b8*/ ULONG e32_winresoff;
	/*00bc*/ ULONG e32_winreslen;
	/*00c0*/ USHORT e32_devid;
	/*00c2*/ USHORT e32_ddkver;
	/*00c4*/
};

struct _INITIAL_TEB {
	
	/*0000*/ <unnamed-type-OldInitialTeb> OldInitialTeb;
	/*0010*/ void * StackBase;
	/*0018*/ void * StackLimit;
	/*0020*/ void * StackAllocationBase;
	/*0028*/
};

struct _INPUT_RECORD {
	
	/*0000*/ USHORT EventType;
	/*0004*/ <unnamed-type-Event> Event;
	/*0014*/
};

struct _INTERFACE_HARDWARE_CROSSTIMESTAMP {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG SystemTimestamp1;
	/*0010*/ ULONGLONG HardwareClockTimestamp;
	/*0018*/ ULONGLONG SystemTimestamp2;
	/*0020*/
};

struct _INTERFACE_INFO {
	/*0000*/ ULONG iiFlags;
	/*0004*/ sockaddr_gen iiAddress;
	/*001c*/ sockaddr_gen iiBroadcastAddress;
	/*0034*/ sockaddr_gen iiNetmask;
	/*004c*/
};

struct _INTERFACE_INFO_EX {
	/*0000*/ ULONG iiFlags;
	/*0008*/ _SOCKET_ADDRESS iiAddress;
	/*0018*/ _SOCKET_ADDRESS iiBroadcastAddress;
	/*0028*/ _SOCKET_ADDRESS iiNetmask;
	/*0038*/
};

struct _INTERFACE_TIMESTAMP_CAPABILITIES {
	/*0000*/ ULONG Version;
	/*0008*/ ULONGLONG HardwareClockFrequencyHz;
	/*0010*/ UCHAR CrossTimestamp;
	/*0018*/ ULONGLONG Reserved1;
	/*0020*/ ULONGLONG Reserved2;
	/*0028*/ _INTERFACE_TIMESTAMP_CAPABILITY_FLAGS TimestampFlags;
	/*0038*/
};

struct _INTERFACE_TIMESTAMP_CAPABILITY_FLAGS {
	/*0000*/ UCHAR PtpV2OverUdpIPv4EventMsgReceiveHw;
	/*0001*/ UCHAR PtpV2OverUdpIPv4AllMsgReceiveHw;
	/*0002*/ UCHAR PtpV2OverUdpIPv4EventMsgTransmitHw;
	/*0003*/ UCHAR PtpV2OverUdpIPv4AllMsgTransmitHw;
	/*0004*/ UCHAR PtpV2OverUdpIPv6EventMsgReceiveHw;
	/*0005*/ UCHAR PtpV2OverUdpIPv6AllMsgReceiveHw;
	/*0006*/ UCHAR PtpV2OverUdpIPv6EventMsgTransmitHw;
	/*0007*/ UCHAR PtpV2OverUdpIPv6AllMsgTransmitHw;
	/*0008*/ UCHAR AllReceiveHw;
	/*0009*/ UCHAR AllTransmitHw;
	/*000a*/ UCHAR TaggedTransmitHw;
	/*000b*/ UCHAR AllReceiveSw;
	/*000c*/ UCHAR AllTransmitSw;
	/*000d*/ UCHAR TaggedTransmitSw;
	/*000e*/
};

enum _INTERFACE_TYPE {
	InterfaceTypeUndefined = 0xffffffff,
	Internal = 0x0,
	Isa = 0x1,
	Eisa = 0x2,
	MicroChannel = 0x3,
	TurboChannel = 0x4,
	PCIBus = 0x5,
	VMEBus = 0x6,
	NuBus = 0x7,
	PCMCIABus = 0x8,
	CBus = 0x9,
	MPIBus = 0xa,
	MPSABus = 0xb,
	ProcessorInternal = 0xc,
	InternalPowerBus = 0xd,
	PNPISABus = 0xe,
	PNPBus = 0xf,
	Vmcs = 0x10,
	ACPIBus = 0x11,
	MaximumInterfaceType = 0x12
};

enum _INTERNAL_IF_OPER_STATUS {
	IF_OPER_STATUS_NON_OPERATIONAL = 0x0,
	IF_OPER_STATUS_UNREACHABLE = 0x1,
	IF_OPER_STATUS_DISCONNECTED = 0x2,
	IF_OPER_STATUS_CONNECTING = 0x3,
	IF_OPER_STATUS_CONNECTED = 0x4,
	IF_OPER_STATUS_OPERATIONAL = 0x5
};

enum _INTERNET_CONNECTIVITY_FLAGS {
	INTERNET_CONNECTIVITY_FLAG_WEBHIJACK = 0x1,
	INTERNET_CONNECTIVITY_FLAG_PROXIED = 0x2,
	INTERNET_CONNECTIVITY_FLAG_CORPORATE_ACCESS = 0x4,
	INTERNET_CONNECTIVITY_FLAG_INSIDE_CORPORATE = 0x8,
	INTERNET_CONNECTIVITY_FLAG_CORPORATE_LOCATION_DETECTED = 0x10,
	INTERNET_CONNECTIVITY_FLAG_CORPORATE_LOCATION_DETECTION_ENABLED = 0x20,
	INTERNET_CONNECTIVITY_FLAG_ACTIVE_PROBE_COMPLETED = 0x40,
	INTERNET_CONNECTIVITY_FLAG_AUTH_PROXY_DETECTED = 0x80,
	INTERNET_CONNECTIVITY_FLAG_OPPORTUNISTIC = 0x100,
	INTERNET_CONNECTIVITY_FLAG_NETREADY_REACHED = 0x200,
	INTERNET_CONNECTIVITY_FLAG_INVALID_AUTH_PROXY_CREDENTIALS = 0x400,
	INTERNET_CONNECTIVITY_FLAG_MAX = 0x800
};

struct _INVERTED_FUNCTION_TABLE {
	/*0000*/ ULONG CurrentSize;
	/*0004*/ ULONG MaximumSize;
	/*0008*/ ULONG volatile Epoch;
	/*000c*/ UCHAR Overflow;
	/*0010*/ _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[0x200];
	void _INVERTED_FUNCTION_TABLE( _INVERTED_FUNCTION_TABLE && );
	void _INVERTED_FUNCTION_TABLE( _INVERTED_FUNCTION_TABLE const & );
	_INVERTED_FUNCTION_TABLE & operator=( _INVERTED_FUNCTION_TABLE && );
	_INVERTED_FUNCTION_TABLE & operator=( _INVERTED_FUNCTION_TABLE const & );
	/*3010*/
};

struct _INVERTED_FUNCTION_TABLE_ENTRY {
	/*0000*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionTable;
	/*0000*/ _DYNAMIC_FUNCTION_TABLE * DynamicTable;
	/*0008*/ void * ImageBase;
	/*0010*/ ULONG SizeOfImage;
	/*0014*/ ULONG SizeOfTable;
	/*0018*/
};

struct _IO_COMPLETION_BASIC_INFORMATION {
	/*0000*/ LONG Depth;
	/*0004*/
};

enum _IO_COMPLETION_INFORMATION_CLASS {
	IoCompletionBasicInformation = 0x0
};

struct _IO_COUNTERS {
	/*0000*/ ULONGLONG ReadOperationCount;
	/*0008*/ ULONGLONG WriteOperationCount;
	/*0010*/ ULONGLONG OtherOperationCount;
	/*0018*/ ULONGLONG ReadTransferCount;
	/*0020*/ ULONGLONG WriteTransferCount;
	/*0028*/ ULONGLONG OtherTransferCount;
	/*0030*/
};

struct _IO_ERROR_LOG_MESSAGE {
	/*0000*/ USHORT Type;
	/*0002*/ USHORT Size;
	/*0004*/ USHORT DriverNameLength;
	/*0008*/ _LARGE_INTEGER TimeStamp;
	/*0010*/ ULONG DriverNameOffset;
	/*0018*/ _IO_ERROR_LOG_PACKET EntryData;
	/*0048*/
};

struct _IO_ERROR_LOG_PACKET {
	/*0000*/ UCHAR MajorFunctionCode;
	/*0001*/ UCHAR RetryCount;
	/*0002*/ USHORT DumpDataSize;
	/*0004*/ USHORT NumberOfStrings;
	/*0006*/ USHORT StringOffset;
	/*0008*/ USHORT EventCategory;
	/*000c*/ LONG ErrorCode;
	/*0010*/ ULONG UniqueErrorValue;
	/*0014*/ LONG FinalStatus;
	/*0018*/ ULONG SequenceNumber;
	/*001c*/ ULONG IoControlCode;
	/*0020*/ _LARGE_INTEGER DeviceOffset;
	/*0028*/ ULONG DumpData[0x1];
	/*0030*/
};

enum _IO_PRIORITY_HINT {
	IoPriorityVeryLow = 0x0,
	IoPriorityLow = 0x1,
	IoPriorityNormal = 0x2,
	IoPriorityHigh = 0x3,
	IoPriorityCritical = 0x4,
	MaxIoPriorityTypes = 0x5
};

struct _IO_RESOURCE_DESCRIPTOR {
	
	/*0000*/ UCHAR Option;
	/*0001*/ UCHAR Type;
	/*0002*/ UCHAR ShareDisposition;
	/*0003*/ UCHAR Spare1;
	/*0004*/ USHORT Flags;
	/*0006*/ USHORT Spare2;
	/*0008*/ <unnamed-type-u> u;
	/*0020*/
};

struct _IO_RESOURCE_LIST {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Revision;
	/*0004*/ ULONG Count;
	/*0008*/ _IO_RESOURCE_DESCRIPTOR Descriptors[0x1];
	/*0028*/
};

struct _IO_RESOURCE_REQUIREMENTS_LIST {
	/*0000*/ ULONG ListSize;
	/*0004*/ _INTERFACE_TYPE InterfaceType;
	/*0008*/ ULONG BusNumber;
	/*000c*/ ULONG SlotNumber;
	/*0010*/ ULONG Reserved[0x3];
	/*001c*/ ULONG AlternativeLists;
	/*0020*/ _IO_RESOURCE_LIST List[0x1];
	/*0048*/
};

struct _IO_SESSION_CONNECT_INFO {
	/*0000*/ ULONG SessionId;
	/*0004*/ UCHAR LocalSession;
	/*0008*/
};

enum _IO_SESSION_EVENT {
	IoSessionEventIgnore = 0x0,
	IoSessionEventCreated = 0x1,
	IoSessionEventTerminated = 0x2,
	IoSessionEventConnected = 0x3,
	IoSessionEventDisconnected = 0x4,
	IoSessionEventLogon = 0x5,
	IoSessionEventLogoff = 0x6,
	IoSessionEventMax = 0x7
};

enum _IO_SESSION_STATE {
	IoSessionStateCreated = 0x1,
	IoSessionStateInitialized = 0x2,
	IoSessionStateConnected = 0x3,
	IoSessionStateDisconnected = 0x4,
	IoSessionStateDisconnectedLoggedOn = 0x5,
	IoSessionStateLoggedOn = 0x6,
	IoSessionStateLoggedOff = 0x7,
	IoSessionStateTerminated = 0x8,
	IoSessionStateMax = 0x9
};

struct _IO_STATUS_BLOCK {
	/*0000*/ LONG Status;
	/*0000*/ void * Pointer;
	/*0008*/ ULONGLONG Information;
	/*0010*/
};

struct _IO_STATUS_BLOCK32 {
	/*0000*/ LONG Status;
	/*0004*/ ULONG Information;
	/*0008*/
};

struct _IP4_ARRAY {
	/*0000*/ ULONG AddrCount;
	/*0004*/ ULONG AddrArray[0x1];
	/*0008*/
};

struct _IPV4_HEADER {
	/*0000*/ UCHAR VersionAndHeaderLength;
	/*0000*/ UCHAR HeaderLength : 04; // 0x0f;
	/*0000*/ UCHAR Version : 04; // 0xf0;
	/*0001*/ UCHAR TypeOfServiceAndEcnField;
	/*0001*/ UCHAR EcnField : 02; // 0x03;
	/*0001*/ UCHAR TypeOfService : 06; // 0xfc;
	/*0002*/ USHORT TotalLength;
	/*0004*/ USHORT Identification;
	/*0006*/ USHORT FlagsAndOffset;
	/*0006*/ USHORT DontUse1 : 05; // 0x001f;
	/*0006*/ USHORT MoreFragments : 01; // 0x0020;
	/*0006*/ USHORT DontFragment : 01; // 0x0040;
	/*0006*/ USHORT Reserved : 01; // 0x0080;
	/*0006*/ USHORT DontUse2 : 08; // 0xff00;
	/*0008*/ UCHAR TimeToLive;
	/*0009*/ UCHAR Protocol;
	/*000a*/ USHORT HeaderChecksum;
	/*000c*/ in_addr SourceAddress;
	/*0010*/ in_addr DestinationAddress;
	/*0014*/
};

struct _IPV6_ADDRESS_EX {
	/*0000*/ USHORT sin6_port;
	/*0002*/ ULONG sin6_flowinfo;
	/*0006*/ USHORT sin6_addr[0x8];
	/*0016*/ ULONG sin6_scope_id;
	/*001a*/
};

struct _IPV6_FRAGMENT_HEADER {
	/*0000*/ UCHAR NextHeader;
	/*0001*/ UCHAR Reserved;
	/*0002*/ USHORT DontUse1 : 08; // 0x00ff;
	/*0002*/ USHORT MoreFragments : 01; // 0x0100;
	/*0002*/ USHORT ReservedBits : 02; // 0x0600;
	/*0002*/ USHORT DontUse2 : 05; // 0xf800;
	/*0002*/ USHORT OffsetAndFlags;
	/*0004*/ UINT Id;
	/*0008*/
};

struct _IP_ADAPTER_ADDRESSES_LH {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG IfIndex;
	/*0008*/ _IP_ADAPTER_ADDRESSES_LH * Next;
	/*0010*/ CHAR * AdapterName;
	/*0018*/ _IP_ADAPTER_UNICAST_ADDRESS_LH * FirstUnicastAddress;
	/*0020*/ _IP_ADAPTER_ANYCAST_ADDRESS_XP * FirstAnycastAddress;
	/*0028*/ _IP_ADAPTER_MULTICAST_ADDRESS_XP * FirstMulticastAddress;
	/*0030*/ _IP_ADAPTER_DNS_SERVER_ADDRESS_XP * FirstDnsServerAddress;
	/*0038*/ WCHAR * DnsSuffix;
	/*0040*/ WCHAR * Description;
	/*0048*/ WCHAR * FriendlyName;
	/*0050*/ UCHAR PhysicalAddress[0x8];
	/*0058*/ ULONG PhysicalAddressLength;
	/*005c*/ ULONG Flags;
	/*005c*/ ULONG DdnsEnabled : 01; // 0x00000001;
	/*005c*/ ULONG RegisterAdapterSuffix : 01; // 0x00000002;
	/*005c*/ ULONG Dhcpv4Enabled : 01; // 0x00000004;
	/*005c*/ ULONG ReceiveOnly : 01; // 0x00000008;
	/*005c*/ ULONG NoMulticast : 01; // 0x00000010;
	/*005c*/ ULONG Ipv6OtherStatefulConfig : 01; // 0x00000020;
	/*005c*/ ULONG NetbiosOverTcpipEnabled : 01; // 0x00000040;
	/*005c*/ ULONG Ipv4Enabled : 01; // 0x00000080;
	/*005c*/ ULONG Ipv6Enabled : 01; // 0x00000100;
	/*005c*/ ULONG Ipv6ManagedAddressConfigurationSupported : 01; // 0x00000200;
	/*0060*/ ULONG Mtu;
	/*0064*/ ULONG IfType;
	/*0068*/ IF_OPER_STATUS OperStatus;
	/*006c*/ ULONG Ipv6IfIndex;
	/*0070*/ ULONG ZoneIndices[0x10];
	/*00b0*/ _IP_ADAPTER_PREFIX_XP * FirstPrefix;
	/*00b8*/ ULONGLONG TransmitLinkSpeed;
	/*00c0*/ ULONGLONG ReceiveLinkSpeed;
	/*00c8*/ _IP_ADAPTER_WINS_SERVER_ADDRESS_LH * FirstWinsServerAddress;
	/*00d0*/ _IP_ADAPTER_GATEWAY_ADDRESS_LH * FirstGatewayAddress;
	/*00d8*/ ULONG Ipv4Metric;
	/*00dc*/ ULONG Ipv6Metric;
	/*00e0*/ _NET_LUID_LH Luid;
	/*00e8*/ _SOCKET_ADDRESS Dhcpv4Server;
	/*00f8*/ UINT CompartmentId;
	/*00fc*/ _GUID NetworkGuid;
	/*010c*/ _NET_IF_CONNECTION_TYPE ConnectionType;
	/*0110*/ TUNNEL_TYPE TunnelType;
	/*0118*/ _SOCKET_ADDRESS Dhcpv6Server;
	/*0128*/ UCHAR Dhcpv6ClientDuid[0x82];
	/*01ac*/ ULONG Dhcpv6ClientDuidLength;
	/*01b0*/ ULONG Dhcpv6Iaid;
	/*01b8*/ _IP_ADAPTER_DNS_SUFFIX * FirstDnsSuffix;
	/*01c0*/
};

struct _IP_ADAPTER_ADDRESSES_XP {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG IfIndex;
	/*0008*/ _IP_ADAPTER_ADDRESSES_XP * Next;
	/*0010*/ CHAR * AdapterName;
	/*0018*/ _IP_ADAPTER_UNICAST_ADDRESS_XP * FirstUnicastAddress;
	/*0020*/ _IP_ADAPTER_ANYCAST_ADDRESS_XP * FirstAnycastAddress;
	/*0028*/ _IP_ADAPTER_MULTICAST_ADDRESS_XP * FirstMulticastAddress;
	/*0030*/ _IP_ADAPTER_DNS_SERVER_ADDRESS_XP * FirstDnsServerAddress;
	/*0038*/ WCHAR * DnsSuffix;
	/*0040*/ WCHAR * Description;
	/*0048*/ WCHAR * FriendlyName;
	/*0050*/ UCHAR PhysicalAddress[0x8];
	/*0058*/ ULONG PhysicalAddressLength;
	/*005c*/ ULONG Flags;
	/*0060*/ ULONG Mtu;
	/*0064*/ ULONG IfType;
	/*0068*/ IF_OPER_STATUS OperStatus;
	/*006c*/ ULONG Ipv6IfIndex;
	/*0070*/ ULONG ZoneIndices[0x10];
	/*00b0*/ _IP_ADAPTER_PREFIX_XP * FirstPrefix;
	/*00b8*/
};

struct _IP_ADAPTER_ANYCAST_ADDRESS_XP {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Flags;
	/*0008*/ _IP_ADAPTER_ANYCAST_ADDRESS_XP * Next;
	/*0010*/ _SOCKET_ADDRESS Address;
	/*0020*/
};

struct _IP_ADAPTER_DNS_SERVER_ADDRESS_XP {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Reserved;
	/*0008*/ _IP_ADAPTER_DNS_SERVER_ADDRESS_XP * Next;
	/*0010*/ _SOCKET_ADDRESS Address;
	/*0020*/
};

struct _IP_ADAPTER_DNS_SUFFIX {
	/*0000*/ _IP_ADAPTER_DNS_SUFFIX * Next;
	/*0008*/ WCHAR String[0x100];
	/*0208*/
};

struct _IP_ADAPTER_GATEWAY_ADDRESS_LH {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Reserved;
	/*0008*/ _IP_ADAPTER_GATEWAY_ADDRESS_LH * Next;
	/*0010*/ _SOCKET_ADDRESS Address;
	/*0020*/
};

struct _IP_ADAPTER_INDEX_MAP {
	/*0000*/ ULONG Index;
	/*0004*/ WCHAR Name[0x80];
	/*0104*/
};

struct _IP_ADAPTER_INFO {
	/*0000*/ _IP_ADAPTER_INFO * Next;
	/*0008*/ ULONG ComboIndex;
	/*000c*/ CHAR AdapterName[0x104];
	/*0110*/ CHAR Description[0x84];
	/*0194*/ UINT AddressLength;
	/*0198*/ UCHAR Address[0x8];
	/*01a0*/ ULONG Index;
	/*01a4*/ UINT Type;
	/*01a8*/ UINT DhcpEnabled;
	/*01b0*/ _IP_ADDR_STRING * CurrentIpAddress;
	/*01b8*/ _IP_ADDR_STRING IpAddressList;
	/*01e8*/ _IP_ADDR_STRING GatewayList;
	/*0218*/ _IP_ADDR_STRING DhcpServer;
	/*0248*/ INT HaveWins;
	/*0250*/ _IP_ADDR_STRING PrimaryWinsServer;
	/*0280*/ _IP_ADDR_STRING SecondaryWinsServer;
	/*02b0*/ LONGLONG LeaseObtained;
	/*02b8*/ LONGLONG LeaseExpires;
	/*02c0*/
};

struct _IP_ADAPTER_MULTICAST_ADDRESS_XP {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Flags;
	/*0008*/ _IP_ADAPTER_MULTICAST_ADDRESS_XP * Next;
	/*0010*/ _SOCKET_ADDRESS Address;
	/*0020*/
};

struct _IP_ADAPTER_ORDER_MAP {
	/*0000*/ ULONG NumAdapters;
	/*0004*/ ULONG AdapterOrder[0x1];
	/*0008*/
};

struct _IP_ADAPTER_PREFIX_XP {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Flags;
	/*0008*/ _IP_ADAPTER_PREFIX_XP * Next;
	/*0010*/ _SOCKET_ADDRESS Address;
	/*0020*/ ULONG PrefixLength;
	/*0028*/
};

struct _IP_ADAPTER_UNICAST_ADDRESS_LH {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Flags;
	/*0008*/ _IP_ADAPTER_UNICAST_ADDRESS_LH * Next;
	/*0010*/ _SOCKET_ADDRESS Address;
	/*0020*/ NL_PREFIX_ORIGIN PrefixOrigin;
	/*0024*/ NL_SUFFIX_ORIGIN SuffixOrigin;
	/*0028*/ NL_DAD_STATE DadState;
	/*002c*/ ULONG ValidLifetime;
	/*0030*/ ULONG PreferredLifetime;
	/*0034*/ ULONG LeaseLifetime;
	/*0038*/ UCHAR OnLinkPrefixLength;
	/*0040*/
};

struct _IP_ADAPTER_UNICAST_ADDRESS_XP {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Flags;
	/*0008*/ _IP_ADAPTER_UNICAST_ADDRESS_XP * Next;
	/*0010*/ _SOCKET_ADDRESS Address;
	/*0020*/ NL_PREFIX_ORIGIN PrefixOrigin;
	/*0024*/ NL_SUFFIX_ORIGIN SuffixOrigin;
	/*0028*/ NL_DAD_STATE DadState;
	/*002c*/ ULONG ValidLifetime;
	/*0030*/ ULONG PreferredLifetime;
	/*0034*/ ULONG LeaseLifetime;
	/*0038*/
};

struct _IP_ADAPTER_WINS_SERVER_ADDRESS_LH {
	/*0000*/ ULONGLONG Alignment;
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Reserved;
	/*0008*/ _IP_ADAPTER_WINS_SERVER_ADDRESS_LH * Next;
	/*0010*/ _SOCKET_ADDRESS Address;
	/*0020*/
};

struct _IP_ADDRESS_PREFIX {
	/*0000*/ _SOCKADDR_INET Prefix;
	/*001c*/ UCHAR PrefixLength;
	/*0020*/
};

union _IP_ADDRESS_STORAGE {
	/*0000*/ in_addr Ipv4;
	/*0000*/ in6_addr Ipv6;
	/*0000*/ UCHAR Buffer[0x10];
	/*0010*/
};

struct _IP_ADDR_STRING {
	/*0000*/ _IP_ADDR_STRING * Next;
	/*0008*/ IP_ADDRESS_STRING IpAddress;
	/*0018*/ IP_ADDRESS_STRING IpMask;
	/*0028*/ ULONG Context;
	/*0030*/
};

struct _IP_INTERFACE_INFO {
	/*0000*/ LONG NumAdapters;
	/*0004*/ _IP_ADAPTER_INDEX_MAP Adapter[0x1];
	/*0108*/
};

struct _IP_MCAST_COUNTER_INFO {
	/*0000*/ ULONGLONG InMcastOctets;
	/*0008*/ ULONGLONG OutMcastOctets;
	/*0010*/ ULONGLONG InMcastPkts;
	/*0018*/ ULONGLONG OutMcastPkts;
	/*0020*/
};

struct _IP_PER_ADAPTER_INFO_W2KSP1 {
	/*0000*/ UINT AutoconfigEnabled;
	/*0004*/ UINT AutoconfigActive;
	/*0008*/ _IP_ADDR_STRING * CurrentDnsServer;
	/*0010*/ _IP_ADDR_STRING DnsServerList;
	/*0040*/
};

struct _IP_UNIDIRECTIONAL_ADAPTER_ADDRESS {
	/*0000*/ ULONG NumAdapters;
	/*0004*/ ULONG Address[0x1];
	/*0008*/
};

enum _IRQ_DEVICE_POLICY {
	IrqPolicyMachineDefault = 0x0,
	IrqPolicyAllCloseProcessors = 0x1,
	IrqPolicyOneCloseProcessor = 0x2,
	IrqPolicyAllProcessorsInMachine = 0x3,
	IrqPolicySpecifiedProcessors = 0x4,
	IrqPolicySpreadMessagesAcrossAllProcessors = 0x5,
	IrqPolicyAllProcessorsInMachineWhenSteered = 0x6
};

enum _IRQ_GROUP_POLICY {
	GroupAffinityAllGroupZero = 0x0,
	GroupAffinityDontCare = 0x1
};

enum _IRQ_PRIORITY {
	IrqPriorityUndefined = 0x0,
	IrqPriorityLow = 0x1,
	IrqPriorityNormal = 0x2,
	IrqPriorityHigh = 0x3
};

struct _IR_TIMER_EXTRA_CREATE_PARAMETER {
	/*0000*/ USHORT ComponentId;
	/*0002*/ USHORT RelativeId;
	/*0004*/
};

struct _ITEMIDLIST {
	/*0000*/ _SHITEMID mkid;
	/*0003*/
};

struct _ITEMIDLIST_ABSOLUTE : _ITEMIDLIST_RELATIVE {
	/*0003*/
};

struct _ITEMIDLIST_RELATIVE : _ITEMIDLIST {
	/*0003*/
};

struct _ITEMID_CHILD : _ITEMIDLIST_RELATIVE {
	/*0003*/
};

struct _ImageArchitectureEntry {
	/*0000*/ ULONG FixupInstRVA;
	/*0004*/ ULONG NewInst;
	/*0008*/
};

struct _ImageArchitectureHeader {
	/*0000*/ UINT AmaskValue : 01; // 0x00000001;
	/*0000*/ UINT AmaskShift : 08; // 0x0000ff00;
	/*0004*/ ULONG FirstEntryRVA;
	/*0008*/
};

struct _JET_INSTANCE_INFO_A {
	/*0000*/ ULONGLONG hInstanceId;
	/*0008*/ CHAR * szInstanceName;
	/*0010*/ ULONGLONG cDatabases;
	/*0018*/ CHAR * * szDatabaseFileName;
	/*0020*/ CHAR * * szDatabaseDisplayName;
	/*0028*/ CHAR * * szDatabaseSLVFileName_Obsolete;
	/*0030*/
};

struct _JET_INSTANCE_INFO_W {
	/*0000*/ ULONGLONG hInstanceId;
	/*0008*/ WCHAR * szInstanceName;
	/*0010*/ ULONGLONG cDatabases;
	/*0018*/ WCHAR * * szDatabaseFileName;
	/*0020*/ WCHAR * * szDatabaseDisplayName;
	/*0028*/ WCHAR * * szDatabaseSLVFileName_Obsolete;
	/*0030*/
};

struct _JIT_DEBUG_INFO {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwProcessorArchitecture;
	/*0008*/ ULONG dwThreadID;
	/*000c*/ ULONG dwReserved0;
	/*0010*/ ULONGLONG lpExceptionAddress;
	/*0018*/ ULONGLONG lpExceptionRecord;
	/*0020*/ ULONGLONG lpContextRecord;
	/*0028*/
};

enum _JOBOBJECTINFOCLASS {
	JobObjectBasicAccountingInformation = 0x1,
	JobObjectBasicLimitInformation = 0x2,
	JobObjectBasicProcessIdList = 0x3,
	JobObjectBasicUIRestrictions = 0x4,
	JobObjectSecurityLimitInformation = 0x5,
	JobObjectEndOfJobTimeInformation = 0x6,
	JobObjectAssociateCompletionPortInformation = 0x7,
	JobObjectBasicAndIoAccountingInformation = 0x8,
	JobObjectExtendedLimitInformation = 0x9,
	JobObjectJobSetInformation = 0xa,
	JobObjectGroupInformation = 0xb,
	JobObjectNotificationLimitInformation = 0xc,
	JobObjectLimitViolationInformation = 0xd,
	JobObjectGroupInformationEx = 0xe,
	JobObjectCpuRateControlInformation = 0xf,
	JobObjectCompletionFilter = 0x10,
	JobObjectCompletionCounter = 0x11,
	JobObjectReserved1Information = 0x12,
	JobObjectReserved2Information = 0x13,
	JobObjectReserved3Information = 0x14,
	JobObjectReserved4Information = 0x15,
	JobObjectReserved5Information = 0x16,
	JobObjectReserved6Information = 0x17,
	JobObjectReserved7Information = 0x18,
	JobObjectReserved8Information = 0x19,
	JobObjectReserved9Information = 0x1a,
	JobObjectReserved10Information = 0x1b,
	JobObjectReserved11Information = 0x1c,
	JobObjectReserved12Information = 0x1d,
	JobObjectReserved13Information = 0x1e,
	JobObjectReserved14Information = 0x1f,
	JobObjectNetRateControlInformation = 0x20,
	JobObjectNotificationLimitInformation2 = 0x21,
	JobObjectLimitViolationInformation2 = 0x22,
	JobObjectCreateSilo = 0x23,
	JobObjectSiloBasicInformation = 0x24,
	JobObjectReserved15Information = 0x25,
	JobObjectReserved16Information = 0x26,
	JobObjectReserved17Information = 0x27,
	JobObjectReserved18Information = 0x28,
	JobObjectReserved19Information = 0x29,
	JobObjectReserved20Information = 0x2a,
	JobObjectReserved21Information = 0x2b,
	JobObjectReserved22Information = 0x2c,
	JobObjectReserved23Information = 0x2d,
	JobObjectReserved24Information = 0x2e,
	JobObjectReserved25Information = 0x2f,
	MaxJobObjectInfoClass = 0x30
};

struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
	/*0000*/ void * CompletionKey;
	/*0008*/ void * CompletionPort;
	/*0010*/
};

struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
	/*0000*/ _LARGE_INTEGER TotalUserTime;
	/*0008*/ _LARGE_INTEGER TotalKernelTime;
	/*0010*/ _LARGE_INTEGER ThisPeriodTotalUserTime;
	/*0018*/ _LARGE_INTEGER ThisPeriodTotalKernelTime;
	/*0020*/ ULONG TotalPageFaultCount;
	/*0024*/ ULONG TotalProcesses;
	/*0028*/ ULONG ActiveProcesses;
	/*002c*/ ULONG TotalTerminatedProcesses;
	/*0030*/
};

struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
	/*0000*/ _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
	/*0030*/ _IO_COUNTERS IoInfo;
	/*0060*/
};

struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
	/*0000*/ _LARGE_INTEGER PerProcessUserTimeLimit;
	/*0008*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0010*/ ULONG LimitFlags;
	/*0018*/ ULONGLONG MinimumWorkingSetSize;
	/*0020*/ ULONGLONG MaximumWorkingSetSize;
	/*0028*/ ULONG ActiveProcessLimit;
	/*0030*/ ULONGLONG Affinity;
	/*0038*/ ULONG PriorityClass;
	/*003c*/ ULONG SchedulingClass;
	/*0040*/
};

struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
	/*0000*/ ULONG NumberOfAssignedProcesses;
	/*0004*/ ULONG NumberOfProcessIdsInList;
	/*0008*/ ULONGLONG ProcessIdList[0x1];
	/*0010*/
};

struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
	/*0000*/ ULONG UIRestrictionsClass;
	/*0004*/
};

struct _JOBOBJECT_CONTAINER_IDENTIFIER_V2 {
	/*0000*/ _GUID ContainerId;
	/*0010*/ _GUID ContainerTelemetryId;
	/*0020*/ ULONG JobId;
	/*0024*/
};

struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
	/*0000*/ ULONG ControlFlags;
	/*0004*/ ULONG CpuRate;
	/*0004*/ ULONG Weight;
	/*0004*/ USHORT MinRate;
	/*0006*/ USHORT MaxRate;
	/*0008*/
};

struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
	/*0000*/ ULONG EndOfJobTimeAction;
	/*0004*/
};

union _JOBOBJECT_ENERGY_TRACKING_STATE {
	/*0000*/ ULONGLONG Value;
	/*0000*/ ULONG UpdateMask;
	/*0004*/ ULONG DesiredState;
	/*0008*/
};

struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION {
	/*0000*/ _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
	/*0030*/ _IO_COUNTERS IoInfo;
	/*0060*/ _PROCESS_DISK_COUNTERS DiskIoInfo;
	/*0088*/ ULONGLONG ContextSwitches;
	/*0090*/ _LARGE_INTEGER TotalCycleTime;
	/*0098*/ ULONGLONG ReadyTime;
	/*00a0*/ _PROCESS_ENERGY_VALUES EnergyValues;
	/*01b0*/
};

struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION_V2 {
	/*0000*/ _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
	/*0030*/ _IO_COUNTERS IoInfo;
	/*0060*/ _PROCESS_DISK_COUNTERS DiskIoInfo;
	/*0088*/ ULONGLONG ContextSwitches;
	/*0090*/ _LARGE_INTEGER TotalCycleTime;
	/*0098*/ ULONGLONG ReadyTime;
	/*00a0*/ _PROCESS_ENERGY_VALUES EnergyValues;
	/*01b0*/ ULONGLONG KernelWaitTime;
	/*01b8*/ ULONGLONG UserWaitTime;
	/*01c0*/
};

struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
	/*0000*/ _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
	/*0040*/ _IO_COUNTERS IoInfo;
	/*0070*/ ULONGLONG ProcessMemoryLimit;
	/*0078*/ ULONGLONG JobMemoryLimit;
	/*0080*/ ULONGLONG PeakProcessMemoryUsed;
	/*0088*/ ULONGLONG PeakJobMemoryUsed;
	/*0090*/
};

struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2 {
	/*0000*/ _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
	/*0040*/ _IO_COUNTERS IoInfo;
	/*0070*/ ULONGLONG ProcessMemoryLimit;
	/*0078*/ ULONGLONG JobMemoryLimit;
	/*0080*/ ULONGLONG PeakProcessMemoryUsed;
	/*0088*/ ULONGLONG PeakJobMemoryUsed;
	/*0090*/ ULONGLONG JobTotalMemoryLimit;
	/*0098*/
};

struct _JOBOBJECT_FREEZE_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG FreezeOperation : 01; // 0x00000001;
	/*0000*/ ULONG FilterOperation : 01; // 0x00000002;
	/*0000*/ ULONG SwapOperation : 01; // 0x00000004;
	/*0000*/ ULONG Reserved : 29; // 0xfffffff8;
	/*0004*/ UCHAR Freeze;
	/*0005*/ UCHAR Swap;
	/*0006*/ UCHAR Reserved0[0x2];
	/*0008*/ _JOBOBJECT_WAKE_FILTER WakeFilter;
	/*0010*/
};

struct _JOBOBJECT_INTERFERENCE_INFORMATION {
	/*0000*/ ULONGLONG Count;
	/*0008*/
};

struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
	/*0000*/ ULONG ControlFlags;
	/*0008*/ _JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
	/*0028*/ _JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;
	/*0048*/
};

struct _JOBOBJECT_IO_ATTRIBUTION_STATS {
	/*0000*/ ULONGLONG IoCount;
	/*0008*/ ULONGLONG TotalNonOverlappedQueueTime;
	/*0010*/ ULONGLONG TotalNonOverlappedServiceTime;
	/*0018*/ ULONGLONG TotalSize;
	/*0020*/
};

struct _JOBOBJECT_JOBSET_INFORMATION {
	/*0000*/ ULONG MemberLevel;
	/*0004*/
};

struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
	/*0000*/ ULONG LimitFlags;
	/*0004*/ ULONG ViolationLimitFlags;
	/*0008*/ ULONGLONG IoReadBytes;
	/*0010*/ ULONGLONG IoReadBytesLimit;
	/*0018*/ ULONGLONG IoWriteBytes;
	/*0020*/ ULONGLONG IoWriteBytesLimit;
	/*0028*/ _LARGE_INTEGER PerJobUserTime;
	/*0030*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0038*/ ULONGLONG JobMemory;
	/*0040*/ ULONGLONG JobMemoryLimit;
	/*0048*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*004c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
	/*0050*/
};

struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION_V2 {
	/*0000*/ ULONG LimitFlags;
	/*0004*/ ULONG ViolationLimitFlags;
	/*0008*/ ULONGLONG IoReadBytes;
	/*0010*/ ULONGLONG IoReadBytesLimit;
	/*0018*/ ULONGLONG IoWriteBytes;
	/*0020*/ ULONGLONG IoWriteBytesLimit;
	/*0028*/ _LARGE_INTEGER PerJobUserTime;
	/*0030*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0038*/ ULONGLONG JobMemory;
	/*0040*/ ULONGLONG JobLowMemoryLimit;
	/*0048*/ ULONGLONG JobHighMemoryLimit;
	/*0050*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*0054*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
	/*0058*/
};

struct _JOBOBJECT_MEMORY_USAGE_INFORMATION {
	/*0000*/ ULONGLONG JobMemory;
	/*0008*/ ULONGLONG PeakJobMemoryUsed;
	/*0010*/
};

struct _JOBOBJECT_MEMORY_USAGE_INFORMATION_V2 {
	/*0000*/ _JOBOBJECT_MEMORY_USAGE_INFORMATION BasicInfo;
	/*0010*/ ULONGLONG JobSharedMemory;
	/*0018*/ ULONGLONG Reserved[0x2];
	/*0028*/
};

struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
	/*0000*/ ULONGLONG IoReadBytesLimit;
	/*0008*/ ULONGLONG IoWriteBytesLimit;
	/*0010*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0018*/ ULONGLONG JobMemoryLimit;
	/*0020*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*0024*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
	/*0028*/ ULONG LimitFlags;
	/*0030*/
};

struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_V2 {
	/*0000*/ ULONGLONG IoReadBytesLimit;
	/*0008*/ ULONGLONG IoWriteBytesLimit;
	/*0010*/ _LARGE_INTEGER PerJobUserTimeLimit;
	/*0018*/ ULONGLONG JobLowMemoryLimit;
	/*0020*/ ULONGLONG JobHighMemoryLimit;
	/*0028*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	/*002c*/ _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
	/*0030*/ ULONG LimitFlags;
	/*0038*/
};

enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
	ToleranceLow = 0x1,
	ToleranceMedium = 0x2,
	ToleranceHigh = 0x3
};

enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
	ToleranceIntervalShort = 0x1,
	ToleranceIntervalMedium = 0x2,
	ToleranceIntervalLong = 0x3
};

struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
	/*0000*/ ULONG SecurityLimitFlags;
	/*0008*/ void * JobToken;
	/*0010*/ _TOKEN_GROUPS * SidsToDisable;
	/*0018*/ _TOKEN_PRIVILEGES * PrivilegesToDelete;
	/*0020*/ _TOKEN_GROUPS * RestrictedSids;
	/*0028*/
};

struct _JOBOBJECT_WAKE_FILTER {
	/*0000*/ ULONG HighEdgeFilter;
	/*0004*/ ULONG LowEdgeFilter;
	/*0008*/
};

struct _JOBOBJECT_WAKE_INFORMATION {
	/*0000*/ ULONGLONG NotificationChannel;
	/*0008*/ ULONGLONG WakeCounters[0x7];
	/*0040*/
};

struct _JOBOBJECT_WAKE_INFORMATION_V1 {
	/*0000*/ ULONGLONG NotificationChannel;
	/*0008*/ ULONGLONG WakeCounters[0x4];
	/*0028*/
};

struct _JOB_SET_ARRAY {
	/*0000*/ void * JobHandle;
	/*0008*/ ULONG MemberLevel;
	/*000c*/ ULONG Flags;
	/*0010*/
};

struct _JOURNAL_ABSOLUTE_INFORMATION {
	/*0000*/ _LARGE_INTEGER StartTimeStamp;
	/*0008*/ _LARGE_INTEGER EndTimeStamp;
	/*0010*/ ULONGLONG NumberOfRecords;
	/*0018*/ ULONG FillLevel;
	/*0020*/
};

enum _JOURNAL_CHANGE_INFORMATION_CLASS {
	JournalCreateKey = 0x0,
	JournalDeleteKey = 0x1,
	JournalRenameKey = 0x2,
	JournalSetValue = 0x3,
	JournalDeleteValue = 0x4,
	JournalSetKeySecurity = 0x5,
	JournalSetKeyUserFlags = 0x6,
	JournalSetLastWriteTime = 0x7,
	JournalBeginTransaction = 0x8,
	JournalCommitTransaction = 0x9,
	JournalAbortTransaction = 0xa,
	MaxJournalChangeAction = 0xb
};

struct _JOURNAL_CLIENT_INFORMATION {
	/*0000*/ _LARGE_INTEGER StartTimeStamp;
	/*0008*/ _LARGE_INTEGER CurrentTimeStamp;
	/*0010*/ ULONGLONG RecordsToProcess;
	/*0018*/ ULONG RelativeFillLevel;
	/*0020*/
};

struct _JOURNAL_CREATE_DELETE_KEY_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ ULONG SecurityDescriptorLength;
	/*0030*/ void * SecurityDescriptor;
	/*0038*/ USHORT ClassLength;
	/*0040*/ void * ClassData;
	/*0048*/ UCHAR SymbolicLink;
	/*0050*/
};

enum _JOURNAL_INFORMATION_CLASS {
	JournalAbsoluteInformation = 0x0,
	JournalClientInformation = 0x1,
	MaxJournalInformation = 0x2
};

struct _JOURNAL_RENAME_KEY_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ _UNICODE_STRING KeyKeyName;
	/*0038*/
};

struct _JOURNAL_SET_DELETE_VALUE_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ _UNICODE_STRING ValueName;
	/*0038*/ ULONG OldValueType;
	/*003c*/ ULONG OldDataLength;
	/*0040*/ void * OldData;
	/*0048*/ ULONG NewValueType;
	/*004c*/ ULONG NewDataLength;
	/*0050*/ void * NewData;
	/*0058*/
};

struct _JOURNAL_SET_KEY_LAST_WRITE_TIME_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ _LARGE_INTEGER OldLastWriteTime;
	/*0030*/ _LARGE_INTEGER NewLastWriteTime;
	/*0038*/
};

struct _JOURNAL_SET_KEY_SECURITY_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ ULONG OldSecurityDescriptorLength;
	/*0030*/ void * OldSecurityDescriptor;
	/*0038*/ ULONG NewSecurityDescriptorLength;
	/*0040*/ void * NewSecurityDescriptor;
	/*0048*/
};

struct _JOURNAL_SET_KEY_USER_FLAGS_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _UNICODE_STRING KeyPathName;
	/*0028*/ ULONG OldFlags;
	/*002c*/ ULONG NewFlags;
	/*0030*/
};

struct _JOURNAL_TRANSACTION_BOUNDARY_INFORMATION {
	/*0000*/ _JOURNAL_CHANGE_INFORMATION_CLASS Action;
	/*0008*/ ULONGLONG RecordNumber;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _GUID TransactionID;
	/*0028*/
};

struct _JUMP_BUFFER {
	/*0000*/ ULONGLONG Frame;
	/*0008*/ ULONGLONG Rbx;
	/*0010*/ ULONGLONG Rsp;
	/*0018*/ ULONGLONG Rbp;
	/*0020*/ ULONGLONG Rsi;
	/*0028*/ ULONGLONG Rdi;
	/*0030*/ ULONGLONG R12;
	/*0038*/ ULONGLONG R13;
	/*0040*/ ULONGLONG R14;
	/*0048*/ ULONGLONG R15;
	/*0050*/ ULONGLONG Rip;
	/*0058*/ ULONG MxCsr;
	/*005c*/ USHORT FpCsr;
	/*005e*/ USHORT Spare;
	/*0060*/ _SETJMP_FLOAT128 Xmm6;
	/*0070*/ _SETJMP_FLOAT128 Xmm7;
	/*0080*/ _SETJMP_FLOAT128 Xmm8;
	/*0090*/ _SETJMP_FLOAT128 Xmm9;
	/*00a0*/ _SETJMP_FLOAT128 Xmm10;
	/*00b0*/ _SETJMP_FLOAT128 Xmm11;
	/*00c0*/ _SETJMP_FLOAT128 Xmm12;
	/*00d0*/ _SETJMP_FLOAT128 Xmm13;
	/*00e0*/ _SETJMP_FLOAT128 Xmm14;
	/*00f0*/ _SETJMP_FLOAT128 Xmm15;
	/*0100*/
};

struct _KAFFINITY_ENUMERATION_CONTEXT {
	/*0000*/ _KAFFINITY_EX * Affinity;
	/*0008*/ ULONGLONG CurrentMask;
	/*0010*/ USHORT CurrentIndex;
	/*0018*/
};

struct _KAFFINITY_EX {
	/*0000*/ USHORT Count;
	/*0002*/ USHORT Size;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG Bitmap[0x14];
	/*00a8*/
};

struct _KCONTINUE_ARGUMENT {
	/*0000*/ _KCONTINUE_TYPE ContinueType;
	/*0004*/ ULONG ContinueFlags;
	/*0008*/ ULONGLONG Reserved[0x2];
	/*0018*/
};

enum _KCONTINUE_TYPE {
	KCONTINUE_UNWIND = 0x0,
	KCONTINUE_RESUME = 0x1,
	KCONTINUE_LONGJUMP = 0x2,
	KCONTINUE_SET = 0x3,
	KCONTINUE_LAST = 0x4
};

struct _KCRM_MARSHAL_HEADER {
	/*0000*/ ULONG VersionMajor;
	/*0004*/ ULONG VersionMinor;
	/*0008*/ ULONG NumProtocols;
	/*000c*/ ULONG Unused;
	/*0010*/
};

struct _KCRM_PROTOCOL_BLOB {
	/*0000*/ _GUID ProtocolId;
	/*0010*/ ULONG StaticInfoLength;
	/*0014*/ ULONG TransactionIdInfoLength;
	/*0018*/ ULONG Unused1;
	/*001c*/ ULONG Unused2;
	/*0020*/
};

struct _KCRM_TRANSACTION_BLOB {
	/*0000*/ _GUID UOW;
	/*0010*/ _GUID TmIdentity;
	/*0020*/ ULONG IsolationLevel;
	/*0024*/ ULONG IsolationFlags;
	/*0028*/ ULONG Timeout;
	/*002c*/ WCHAR Description[0x40];
	/*00ac*/
};

struct _KERNEL_USER_TIMES {
	/*0000*/ _LARGE_INTEGER CreateTime;
	/*0008*/ _LARGE_INTEGER ExitTime;
	/*0010*/ _LARGE_INTEGER KernelTime;
	/*0018*/ _LARGE_INTEGER UserTime;
	/*0020*/
};

struct _KEY_BASIC_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/ ULONG TitleIndex;
	/*000c*/ ULONG NameLength;
	/*0010*/ WCHAR Name[0x1];
	/*0018*/
};

struct _KEY_CACHED_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/ ULONG TitleIndex;
	/*000c*/ ULONG SubKeys;
	/*0010*/ ULONG MaxNameLen;
	/*0014*/ ULONG Values;
	/*0018*/ ULONG MaxValueNameLen;
	/*001c*/ ULONG MaxValueDataLen;
	/*0020*/ ULONG NameLength;
	/*0028*/
};

struct _KEY_CONTROL_FLAGS_INFORMATION {
	/*0000*/ ULONG ControlFlags;
	/*0004*/
};

struct _KEY_EVENT_RECORD {
	
	/*0000*/ INT bKeyDown;
	/*0004*/ USHORT wRepeatCount;
	/*0006*/ USHORT wVirtualKeyCode;
	/*0008*/ USHORT wVirtualScanCode;
	/*000a*/ <unnamed-type-uChar> uChar;
	/*000c*/ ULONG dwControlKeyState;
	/*0010*/
};

struct _KEY_FLAGS_INFORMATION {
	/*0000*/ ULONG Wow64Flags;
	/*0004*/ ULONG KeyFlags;
	/*0008*/ ULONG ControlFlags;
	/*000c*/
};

struct _KEY_FULL_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/ ULONG TitleIndex;
	/*000c*/ ULONG ClassOffset;
	/*0010*/ ULONG ClassLength;
	/*0014*/ ULONG SubKeys;
	/*0018*/ ULONG MaxNameLen;
	/*001c*/ ULONG MaxClassLen;
	/*0020*/ ULONG Values;
	/*0024*/ ULONG MaxValueNameLen;
	/*0028*/ ULONG MaxValueDataLen;
	/*002c*/ WCHAR Class[0x1];
	/*0030*/
};

struct _KEY_HANDLE_TAGS_INFORMATION {
	/*0000*/ ULONG HandleTags;
	/*0004*/
};

enum _KEY_INFORMATION_CLASS {
	KeyBasicInformation = 0x0,
	KeyNodeInformation = 0x1,
	KeyFullInformation = 0x2,
	KeyNameInformation = 0x3,
	KeyCachedInformation = 0x4,
	KeyFlagsInformation = 0x5,
	KeyVirtualizationInformation = 0x6,
	KeyHandleTagsInformation = 0x7,
	KeyTrustInformation = 0x8,
	KeyLayerInformation = 0x9,
	MaxKeyInfoClass = 0xa
};

struct _KEY_LAYER_INFORMATION {
	/*0000*/ ULONG IsTombstone : 01; // 0x00000001;
	/*0000*/ ULONG IsSupersedeLocal : 01; // 0x00000002;
	/*0000*/ ULONG IsSupersedeTree : 01; // 0x00000004;
	/*0000*/ ULONG ClassIsInherited : 01; // 0x00000008;
	/*0000*/ ULONG Reserved : 28; // 0xfffffff0;
	/*0004*/
};

struct _KEY_NAME_INFORMATION {
	/*0000*/ ULONG NameLength;
	/*0004*/ WCHAR Name[0x1];
	/*0008*/
};

struct _KEY_NODE_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/ ULONG TitleIndex;
	/*000c*/ ULONG ClassOffset;
	/*0010*/ ULONG ClassLength;
	/*0014*/ ULONG NameLength;
	/*0018*/ WCHAR Name[0x1];
	/*0020*/
};

struct _KEY_OPEN_SUBKEYS_INFORMATION {
	/*0000*/ ULONG Count;
	/*0008*/ KEY_PID_ARRAY KeyArray[0x1];
	/*0020*/
};

enum _KEY_SET_INFORMATION_CLASS {
	KeyWriteTimeInformation = 0x0,
	KeyWow64FlagsInformation = 0x1,
	KeyControlFlagsInformation = 0x2,
	KeySetVirtualizationInformation = 0x3,
	KeySetDebugInformation = 0x4,
	KeySetHandleTagsInformation = 0x5,
	KeySetLayerInformation = 0x6,
	MaxKeySetInfoClass = 0x7
};

struct _KEY_SET_LAYER_INFORMATION {
	/*0000*/ ULONG IsTombstone : 01; // 0x00000001;
	/*0000*/ ULONG IsSupersedeLocal : 01; // 0x00000002;
	/*0000*/ ULONG IsSupersedeTree : 01; // 0x00000004;
	/*0000*/ ULONG ClassIsInherited : 01; // 0x00000008;
	/*0000*/ ULONG Reserved : 28; // 0xfffffff0;
	/*0004*/
};

struct _KEY_SET_VIRTUALIZATION_INFORMATION {
	/*0000*/ ULONG VirtualTarget : 01; // 0x00000001;
	/*0000*/ ULONG VirtualStore : 01; // 0x00000002;
	/*0000*/ ULONG VirtualSource : 01; // 0x00000004;
	/*0000*/ ULONG Reserved : 29; // 0xfffffff8;
	/*0004*/
};

struct _KEY_TRUST_INFORMATION {
	/*0000*/ ULONG TrustedKey : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0004*/
};

struct _KEY_VALUE_BASIC_INFORMATION {
	/*0000*/ ULONG TitleIndex;
	/*0004*/ ULONG Type;
	/*0008*/ ULONG NameLength;
	/*000c*/ WCHAR Name[0x1];
	/*0010*/
};

struct _KEY_VALUE_ENTRY {
	/*0000*/ _UNICODE_STRING * ValueName;
	/*0008*/ ULONG DataLength;
	/*000c*/ ULONG DataOffset;
	/*0010*/ ULONG Type;
	/*0018*/
};

struct _KEY_VALUE_FULL_INFORMATION {
	/*0000*/ ULONG TitleIndex;
	/*0004*/ ULONG Type;
	/*0008*/ ULONG DataOffset;
	/*000c*/ ULONG DataLength;
	/*0010*/ ULONG NameLength;
	/*0014*/ WCHAR Name[0x1];
	/*0018*/
};

enum _KEY_VALUE_INFORMATION_CLASS {
	KeyValueBasicInformation = 0x0,
	KeyValueFullInformation = 0x1,
	KeyValuePartialInformation = 0x2,
	KeyValueFullInformationAlign64 = 0x3,
	KeyValuePartialInformationAlign64 = 0x4,
	KeyValueLayerInformation = 0x5,
	MaxKeyValueInfoClass = 0x6
};

struct _KEY_VALUE_LAYER_INFORMATION {
	/*0000*/ ULONG IsTombstone : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0004*/
};

struct _KEY_VALUE_PARTIAL_INFORMATION {
	/*0000*/ ULONG TitleIndex;
	/*0004*/ ULONG Type;
	/*0008*/ ULONG DataLength;
	/*000c*/ UCHAR Data[0x1];
	/*0010*/
};

struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64 {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG DataLength;
	/*0008*/ UCHAR Data[0x1];
	/*000c*/
};

struct _KEY_VIRTUALIZATION_INFORMATION {
	/*0000*/ ULONG VirtualizationCandidate : 01; // 0x00000001;
	/*0000*/ ULONG VirtualizationEnabled : 01; // 0x00000002;
	/*0000*/ ULONG VirtualTarget : 01; // 0x00000004;
	/*0000*/ ULONG VirtualStore : 01; // 0x00000008;
	/*0000*/ ULONG VirtualSource : 01; // 0x00000010;
	/*0000*/ ULONG Reserved : 27; // 0xffffffe0;
	/*0004*/
};

struct _KEY_WOW64_FLAGS_INFORMATION {
	/*0000*/ ULONG UserFlags;
	/*0004*/
};

struct _KEY_WRITE_TIME_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastWriteTime;
	/*0008*/
};

enum _KF_DEFINITION_FLAGS {
	KFDF_LOCAL_REDIRECT_ONLY = 0x2,
	KFDF_ROAMABLE = 0x4,
	KFDF_PRECREATE = 0x8,
	KFDF_STREAM = 0x10,
	KFDF_PUBLISHEXPANDEDPATH = 0x20,
	KFDF_NO_REDIRECT_UI = 0x40
};

enum _KF_REDIRECTION_CAPABILITIES {
	KF_REDIRECTION_CAPABILITIES_ALLOW_ALL = 0xff,
	KF_REDIRECTION_CAPABILITIES_REDIRECTABLE = 0x1,
	KF_REDIRECTION_CAPABILITIES_DENY_ALL = 0xfff00,
	KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED = 0x100,
	KF_REDIRECTION_CAPABILITIES_DENY_POLICY = 0x200,
	KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS = 0x400
};

enum _KF_REDIRECT_FLAGS {
	KF_REDIRECT_USER_EXCLUSIVE = 0x1,
	KF_REDIRECT_COPY_SOURCE_DACL = 0x2,
	KF_REDIRECT_OWNER_USER = 0x4,
	KF_REDIRECT_SET_OWNER_EXPLICIT = 0x8,
	KF_REDIRECT_CHECK_ONLY = 0x10,
	KF_REDIRECT_WITH_UI = 0x20,
	KF_REDIRECT_UNPIN = 0x40,
	KF_REDIRECT_PIN = 0x80,
	KF_REDIRECT_COPY_CONTENTS = 0x200,
	KF_REDIRECT_DEL_SOURCE_CONTENTS = 0x400,
	KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS = 0x800
};

enum _KHETERO_CPU_POLICY {
	KHeteroCpuPolicyAll = 0x0,
	KHeteroCpuPolicyLarge = 0x1,
	KHeteroCpuPolicyLargeOrIdle = 0x2,
	KHeteroCpuPolicySmall = 0x3,
	KHeteroCpuPolicySmallOrIdle = 0x4,
	KHeteroCpuPolicyDynamic = 0x5,
	KHeteroCpuPolicyStaticMax = 0x5,
	KHeteroCpuPolicyBiasedSmall = 0x6,
	KHeteroCpuPolicyBiasedLarge = 0x7,
	KHeteroCpuPolicyDefault = 0x8,
	KHeteroCpuPolicyMax = 0x9
};

struct _KLDR_DATA_TABLE_ENTRY {
	
	/*0000*/ _LIST_ENTRY InLoadOrderLinks;
	/*0010*/ void * ExceptionTable;
	/*0018*/ ULONG ExceptionTableSize;
	/*0020*/ void * GpValue;
	/*0028*/ _NON_PAGED_DEBUG_INFO * NonPagedDebugInfo;
	/*0030*/ void * DllBase;
	/*0038*/ void * EntryPoint;
	/*0040*/ ULONG SizeOfImage;
	/*0048*/ _UNICODE_STRING FullDllName;
	/*0058*/ _UNICODE_STRING BaseDllName;
	/*0068*/ ULONG Flags;
	/*006c*/ USHORT LoadCount;
	/*006e*/ <unnamed-type-u1> u1;
	/*0070*/ void * SectionPointer;
	/*0078*/ ULONG CheckSum;
	/*007c*/ ULONG CoverageSectionSize;
	/*0080*/ void * CoverageSection;
	/*0088*/ void * LoadedImports;
	/*0090*/ void * Spare;
	/*0098*/ ULONG SizeOfImageNotRounded;
	/*009c*/ ULONG TimeDateStamp;
	/*00a0*/
};

struct _KLDR_DATA_TABLE_ENTRY32 {
	/*0000*/ LIST_ENTRY32 InLoadOrderLinks;
	/*0008*/ ULONG __Undefined1;
	/*000c*/ ULONG __Undefined2;
	/*0010*/ ULONG __Undefined3;
	/*0014*/ ULONG NonPagedDebugInfo;
	/*0018*/ ULONG DllBase;
	/*001c*/ ULONG EntryPoint;
	/*0020*/ ULONG SizeOfImage;
	/*0024*/ _STRING32 FullDllName;
	/*002c*/ _STRING32 BaseDllName;
	/*0034*/ ULONG Flags;
	/*0038*/ USHORT LoadCount;
	/*003a*/ USHORT __Undefined5;
	/*003c*/ ULONG __Undefined6;
	/*0040*/ ULONG CheckSum;
	/*0044*/ ULONG TimeDateStamp;
	/*0048*/
};

struct _KLDR_DATA_TABLE_ENTRY64 {
	/*0000*/ LIST_ENTRY64 InLoadOrderLinks;
	/*0010*/ ULONGLONG __Undefined1;
	/*0018*/ ULONGLONG __Undefined2;
	/*0020*/ ULONGLONG __Undefined3;
	/*0028*/ ULONGLONG NonPagedDebugInfo;
	/*0030*/ ULONGLONG DllBase;
	/*0038*/ ULONGLONG EntryPoint;
	/*0040*/ ULONG SizeOfImage;
	/*0048*/ _STRING64 FullDllName;
	/*0058*/ _STRING64 BaseDllName;
	/*0068*/ ULONG Flags;
	/*006c*/ USHORT LoadCount;
	/*006e*/ USHORT __Undefined5;
	/*0070*/ ULONGLONG __Undefined6;
	/*0078*/ ULONG CheckSum;
	/*007c*/ ULONG __padding1;
	/*0080*/ ULONG TimeDateStamp;
	/*0084*/ ULONG __padding2;
	/*0088*/
};

struct _KLOCK_QUEUE_HANDLE {
	/*0000*/ _KSPIN_LOCK_QUEUE LockQueue;
	/*0010*/ UCHAR OldIrql;
	void _KLOCK_QUEUE_HANDLE( _KLOCK_QUEUE_HANDLE && );
	void _KLOCK_QUEUE_HANDLE( _KLOCK_QUEUE_HANDLE const & );
	_KLOCK_QUEUE_HANDLE & operator=( _KLOCK_QUEUE_HANDLE && );
	_KLOCK_QUEUE_HANDLE & operator=( _KLOCK_QUEUE_HANDLE const & );
	/*0018*/
};

struct _KNONVOLATILE_CONTEXT_POINTERS {
	/*0000*/ _M128A * FloatingContext[0x10];
	/*0000*/ _M128A * Xmm0;
	/*0008*/ _M128A * Xmm1;
	/*0010*/ _M128A * Xmm2;
	/*0018*/ _M128A * Xmm3;
	/*0020*/ _M128A * Xmm4;
	/*0028*/ _M128A * Xmm5;
	/*0030*/ _M128A * Xmm6;
	/*0038*/ _M128A * Xmm7;
	/*0040*/ _M128A * Xmm8;
	/*0048*/ _M128A * Xmm9;
	/*0050*/ _M128A * Xmm10;
	/*0058*/ _M128A * Xmm11;
	/*0060*/ _M128A * Xmm12;
	/*0068*/ _M128A * Xmm13;
	/*0070*/ _M128A * Xmm14;
	/*0078*/ _M128A * Xmm15;
	/*0080*/ ULONGLONG * IntegerContext[0x10];
	/*0080*/ ULONGLONG * Rax;
	/*0088*/ ULONGLONG * Rcx;
	/*0090*/ ULONGLONG * Rdx;
	/*0098*/ ULONGLONG * Rbx;
	/*00a0*/ ULONGLONG * Rsp;
	/*00a8*/ ULONGLONG * Rbp;
	/*00b0*/ ULONGLONG * Rsi;
	/*00b8*/ ULONGLONG * Rdi;
	/*00c0*/ ULONGLONG * R8;
	/*00c8*/ ULONGLONG * R9;
	/*00d0*/ ULONGLONG * R10;
	/*00d8*/ ULONGLONG * R11;
	/*00e0*/ ULONGLONG * R12;
	/*00e8*/ ULONGLONG * R13;
	/*00f0*/ ULONGLONG * R14;
	/*00f8*/ ULONGLONG * R15;
	/*0100*/
};

struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {
	/*0000*/ ULONGLONG * X19;
	/*0008*/ ULONGLONG * X20;
	/*0010*/ ULONGLONG * X21;
	/*0018*/ ULONGLONG * X22;
	/*0020*/ ULONGLONG * X23;
	/*0028*/ ULONGLONG * X24;
	/*0030*/ ULONGLONG * X25;
	/*0038*/ ULONGLONG * X26;
	/*0040*/ ULONGLONG * X27;
	/*0048*/ ULONGLONG * X28;
	/*0050*/ ULONGLONG * Fp;
	/*0058*/ ULONGLONG * Lr;
	/*0060*/ ULONGLONG * D8;
	/*0068*/ ULONGLONG * D9;
	/*0070*/ ULONGLONG * D10;
	/*0078*/ ULONGLONG * D11;
	/*0080*/ ULONGLONG * D12;
	/*0088*/ ULONGLONG * D13;
	/*0090*/ ULONGLONG * D14;
	/*0098*/ ULONGLONG * D15;
	/*00a0*/
};

enum _KPROFILE_SOURCE {
	ProfileTime = 0x0,
	ProfileAlignmentFixup = 0x1,
	ProfileTotalIssues = 0x2,
	ProfilePipelineDry = 0x3,
	ProfileLoadInstructions = 0x4,
	ProfilePipelineFrozen = 0x5,
	ProfileBranchInstructions = 0x6,
	ProfileTotalNonissues = 0x7,
	ProfileDcacheMisses = 0x8,
	ProfileIcacheMisses = 0x9,
	ProfileCacheMisses = 0xa,
	ProfileBranchMispredictions = 0xb,
	ProfileStoreInstructions = 0xc,
	ProfileFpInstructions = 0xd,
	ProfileIntegerInstructions = 0xe,
	Profile2Issue = 0xf,
	Profile3Issue = 0x10,
	Profile4Issue = 0x11,
	ProfileSpecialInstructions = 0x12,
	ProfileTotalCycles = 0x13,
	ProfileIcacheIssues = 0x14,
	ProfileDcacheAccesses = 0x15,
	ProfileMemoryBarrierCycles = 0x16,
	ProfileLoadLinkedIssues = 0x17,
	ProfileMaximum = 0x18
};

struct _KSPIN_LOCK_QUEUE {
	/*0000*/ _KSPIN_LOCK_QUEUE * volatile Next;
	/*0008*/ ULONGLONG * volatile Lock;
	void _KSPIN_LOCK_QUEUE( _KSPIN_LOCK_QUEUE && );
	void _KSPIN_LOCK_QUEUE( _KSPIN_LOCK_QUEUE const & );
	_KSPIN_LOCK_QUEUE & operator=( _KSPIN_LOCK_QUEUE && );
	_KSPIN_LOCK_QUEUE & operator=( _KSPIN_LOCK_QUEUE const & );
	/*0010*/
};

struct _KSYSTEM_TIME {
	/*0000*/ ULONG LowPart;
	/*0004*/ LONG High1Time;
	/*0008*/ LONG High2Time;
	/*000c*/
};

struct _KTMOBJECT_CURSOR {
	/*0000*/ _GUID LastQuery;
	/*0010*/ ULONG ObjectIdCount;
	/*0014*/ _GUID ObjectIds[0x1];
	/*0024*/
};

enum _KTMOBJECT_TYPE {
	KTMOBJECT_TRANSACTION = 0x0,
	KTMOBJECT_TRANSACTION_MANAGER = 0x1,
	KTMOBJECT_RESOURCE_MANAGER = 0x2,
	KTMOBJECT_ENLISTMENT = 0x3,
	KTMOBJECT_INVALID = 0x4
};

struct _KUSER_SHARED_DATA {
	/*0000*/ ULONG TickCountLowDeprecated;
	/*0004*/ ULONG TickCountMultiplier;
	/*0008*/ _KSYSTEM_TIME volatile InterruptTime;
	/*0014*/ _KSYSTEM_TIME volatile SystemTime;
	/*0020*/ _KSYSTEM_TIME volatile TimeZoneBias;
	/*002c*/ USHORT ImageNumberLow;
	/*002e*/ USHORT ImageNumberHigh;
	/*0030*/ WCHAR NtSystemRoot[0x104];
	/*0238*/ ULONG MaxStackTraceDepth;
	/*023c*/ ULONG CryptoExponent;
	/*0240*/ ULONG TimeZoneId;
	/*0244*/ ULONG LargePageMinimum;
	/*0248*/ ULONG AitSamplingValue;
	/*024c*/ ULONG AppCompatFlag;
	/*0250*/ ULONGLONG RNGSeedVersion;
	/*0258*/ ULONG GlobalValidationRunlevel;
	/*025c*/ LONG volatile TimeZoneBiasStamp;
	/*0260*/ ULONG NtBuildNumber;
	/*0264*/ _NT_PRODUCT_TYPE NtProductType;
	/*0268*/ UCHAR ProductTypeIsValid;
	/*0269*/ UCHAR Reserved0[0x1];
	/*026a*/ USHORT NativeProcessorArchitecture;
	/*026c*/ ULONG NtMajorVersion;
	/*0270*/ ULONG NtMinorVersion;
	/*0274*/ UCHAR ProcessorFeatures[0x40];
	/*02b4*/ ULONG Reserved1;
	/*02b8*/ ULONG Reserved3;
	/*02bc*/ ULONG volatile TimeSlip;
	/*02c0*/ _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
	/*02c4*/ ULONG BootId;
	/*02c8*/ _LARGE_INTEGER SystemExpirationDate;
	/*02d0*/ ULONG SuiteMask;
	/*02d4*/ UCHAR KdDebuggerEnabled;
	/*02d5*/ UCHAR MitigationPolicies;
	/*02d5*/ UCHAR NXSupportPolicy : 02; // 0x03;
	/*02d5*/ UCHAR SEHValidationPolicy : 02; // 0x0c;
	/*02d5*/ UCHAR CurDirDevicesSkippedForDlls : 02; // 0x30;
	/*02d5*/ UCHAR Reserved : 02; // 0xc0;
	/*02d6*/ USHORT CyclesPerYield;
	/*02d8*/ ULONG volatile ActiveConsoleId;
	/*02dc*/ ULONG volatile DismountCount;
	/*02e0*/ ULONG ComPlusPackage;
	/*02e4*/ ULONG LastSystemRITEventTickCount;
	/*02e8*/ ULONG NumberOfPhysicalPages;
	/*02ec*/ UCHAR SafeBootMode;
	/*02ed*/ UCHAR VirtualizationFlags;
	/*02ee*/ UCHAR Reserved12[0x2];
	/*02f0*/ ULONG SharedDataFlags;
	/*02f0*/ ULONG DbgErrorPortPresent : 01; // 0x00000001;
	/*02f0*/ ULONG DbgElevationEnabled : 01; // 0x00000002;
	/*02f0*/ ULONG DbgVirtEnabled : 01; // 0x00000004;
	/*02f0*/ ULONG DbgInstallerDetectEnabled : 01; // 0x00000008;
	/*02f0*/ ULONG DbgLkgEnabled : 01; // 0x00000010;
	/*02f0*/ ULONG DbgDynProcessorEnabled : 01; // 0x00000020;
	/*02f0*/ ULONG DbgConsoleBrokerEnabled : 01; // 0x00000040;
	/*02f0*/ ULONG DbgSecureBootEnabled : 01; // 0x00000080;
	/*02f0*/ ULONG DbgMultiSessionSku : 01; // 0x00000100;
	/*02f0*/ ULONG DbgMultiUsersInSessionSku : 01; // 0x00000200;
	/*02f0*/ ULONG DbgStateSeparationEnabled : 01; // 0x00000400;
	/*02f0*/ ULONG SpareBits : 21; // 0xfffff800;
	/*02f4*/ ULONG DataFlagsPad[0x1];
	/*02f8*/ ULONGLONG TestRetInstruction;
	/*0300*/ LONGLONG QpcFrequency;
	/*0308*/ ULONG SystemCall;
	/*030c*/ ULONG Reserved2;
	/*0310*/ ULONGLONG SystemCallPad[0x2];
	/*0320*/ _KSYSTEM_TIME volatile TickCount;
	/*0320*/ ULONGLONG volatile TickCountQuad;
	/*0320*/ ULONG ReservedTickCountOverlay[0x3];
	/*032c*/ ULONG TickCountPad[0x1];
	/*0330*/ ULONG Cookie;
	/*0334*/ ULONG CookiePad[0x1];
	/*0338*/ LONGLONG ConsoleSessionForegroundProcessId;
	/*0340*/ ULONGLONG TimeUpdateLock;
	/*0348*/ ULONGLONG BaselineSystemTimeQpc;
	/*0350*/ ULONGLONG BaselineInterruptTimeQpc;
	/*0358*/ ULONGLONG QpcSystemTimeIncrement;
	/*0360*/ ULONGLONG QpcInterruptTimeIncrement;
	/*0368*/ UCHAR QpcSystemTimeIncrementShift;
	/*0369*/ UCHAR QpcInterruptTimeIncrementShift;
	/*036a*/ USHORT UnparkedProcessorCount;
	/*036c*/ ULONG EnclaveFeatureMask[0x4];
	/*037c*/ ULONG TelemetryCoverageRound;
	/*0380*/ USHORT UserModeGlobalLogger[0x10];
	/*03a0*/ ULONG ImageFileExecutionOptions;
	/*03a4*/ ULONG LangGenerationCount;
	/*03a8*/ ULONGLONG Reserved4;
	/*03b0*/ ULONGLONG volatile InterruptTimeBias;
	/*03b8*/ ULONGLONG volatile QpcBias;
	/*03c0*/ ULONG ActiveProcessorCount;
	/*03c4*/ UCHAR volatile ActiveGroupCount;
	/*03c5*/ UCHAR Reserved9;
	/*03c6*/ USHORT QpcData;
	/*03c6*/ UCHAR volatile QpcBypassEnabled;
	/*03c7*/ UCHAR QpcShift;
	/*03c8*/ _LARGE_INTEGER TimeZoneBiasEffectiveStart;
	/*03d0*/ _LARGE_INTEGER TimeZoneBiasEffectiveEnd;
	/*03d8*/ _XSTATE_CONFIGURATION XState;
	/*0710*/ _KSYSTEM_TIME FeatureConfigurationChangeStamp;
	/*071c*/ ULONG Spare;
	/*0720*/
};

struct _L2_NOTIFICATION_DATA {
	/*0000*/ ULONG NotificationSource;
	/*0004*/ ULONG NotificationCode;
	/*0008*/ _GUID InterfaceGuid;
	/*0018*/ ULONG dwDataSize;
	/*0020*/ void * pData;
	/*0028*/
};

enum _L2_PROFILE_INDEX_PREFIX {
	L2_PROFILE_INDEX_WLAN_PREFIX = 0x10000000,
	L2_PROFILE_INDEX_WWAN_PREFIX = 0x20000000,
	L2_PROFILE_INDEX_ROAMING_INDICATOR = 0x80000000,
	L2_PROFILE_INDEX_INT_ROAMING_INDICATOR = 0xc0000000
};

struct _L2_UI_REQUEST {
	/*0000*/ ULONGLONG Flags;
	/*0008*/ ULONGLONG ExpireTime;
	/*0010*/ _GUID InterfaceGuid;
	/*0020*/ _GUID NetworkGuid;
	/*0030*/ ULONG dwSessionId;
	/*0034*/ _GUID UIPageClsid;
	/*0044*/ ULONG dwDataSize;
	/*0048*/ ULONG fIsOneXExtUIReq;
	/*0050*/ LONGLONG Padding;
	/*0058*/ UCHAR DataBlob[0x1];
	/*0060*/
};

struct _L2_UI_RESPONSE {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ _GUID UIRequestId;
	/*0020*/ ULONG dwDataSize;
	/*0028*/ LONGLONG Padding;
	/*0030*/ UCHAR DataBlob[0x1];
	/*0038*/
};

struct _LANG_FONT_NAMES {
	/*0000*/ WCHAR const * pwszInterstitialTextFont;
	/*0008*/ WCHAR const * pwszInterstitialButtonFont;
	/*0010*/ WCHAR const * pwszWatermarkTextFont;
	/*0018*/
};

union _LARGE_INTEGER {
	
	/*0000*/ ULONG LowPart;
	/*0004*/ LONG HighPart;
	/*0000*/ <unnamed-type-u> u;
	/*0000*/ LONGLONG QuadPart;
	/*0008*/
};

struct _LAST_EXCEPTION_LOG {
	/*0000*/ _EXCEPTION_RECORD ExceptionRecord;
	/*00a0*/ _CONTEXT ContextRecord;
	/*0570*/ ULONG ControlPc;
	/*0574*/ _EXCEPTION_DISPOSITION Disposition;
	/*0578*/ ULONG HandlerData[0x5];
	/*0590*/
};

struct _LBLOB {
	/*0000*/ ULONGLONG Length;
	/*0008*/ ULONGLONG MaximumLength;
	/*0010*/ UCHAR * Buffer;
	/*0018*/
};

struct _LDBL12 {
	/*0000*/ UCHAR ld12[0xc];
	/*000c*/
};

struct _LDOUBLE {
	/*0000*/ UCHAR ld[0xa];
	/*000a*/
};

struct _LDRP_CSLIST {
	/*0000*/ _SINGLE_LIST_ENTRY * Tail;
	/*0008*/
};

struct _LDRP_LOAD_CONTEXT;

struct _LDR_DATA_TABLE_ENTRY {
	/*0000*/ _LIST_ENTRY InLoadOrderLinks;
	/*0010*/ _LIST_ENTRY InMemoryOrderLinks;
	/*0020*/ _LIST_ENTRY InInitializationOrderLinks;
	/*0030*/ void * DllBase;
	/*0038*/ void * EntryPoint;
	/*0040*/ ULONG SizeOfImage;
	/*0048*/ _UNICODE_STRING FullDllName;
	/*0058*/ _UNICODE_STRING BaseDllName;
	/*0068*/ UCHAR FlagGroup[0x4];
	/*0068*/ ULONG Flags;
	/*0068*/ ULONG PackagedBinary : 01; // 0x00000001;
	/*0068*/ ULONG MarkedForRemoval : 01; // 0x00000002;
	/*0068*/ ULONG ImageDll : 01; // 0x00000004;
	/*0068*/ ULONG LoadNotificationsSent : 01; // 0x00000008;
	/*0068*/ ULONG TelemetryEntryProcessed : 01; // 0x00000010;
	/*0068*/ ULONG ProcessStaticImport : 01; // 0x00000020;
	/*0068*/ ULONG InLegacyLists : 01; // 0x00000040;
	/*0068*/ ULONG InIndexes : 01; // 0x00000080;
	/*0068*/ ULONG ShimDll : 01; // 0x00000100;
	/*0068*/ ULONG InExceptionTable : 01; // 0x00000200;
	/*0068*/ ULONG ReservedFlags1 : 02; // 0x00000c00;
	/*0068*/ ULONG LoadInProgress : 01; // 0x00001000;
	/*0068*/ ULONG LoadConfigProcessed : 01; // 0x00002000;
	/*0068*/ ULONG EntryProcessed : 01; // 0x00004000;
	/*0068*/ ULONG ProtectDelayLoad : 01; // 0x00008000;
	/*0068*/ ULONG ReservedFlags3 : 02; // 0x00030000;
	/*0068*/ ULONG DontCallForThreads : 01; // 0x00040000;
	/*0068*/ ULONG ProcessAttachCalled : 01; // 0x00080000;
	/*0068*/ ULONG ProcessAttachFailed : 01; // 0x00100000;
	/*0068*/ ULONG CorDeferredValidate : 01; // 0x00200000;
	/*0068*/ ULONG CorImage : 01; // 0x00400000;
	/*0068*/ ULONG DontRelocate : 01; // 0x00800000;
	/*0068*/ ULONG CorILOnly : 01; // 0x01000000;
	/*0068*/ ULONG ChpeImage : 01; // 0x02000000;
	/*0068*/ ULONG ReservedFlags5 : 02; // 0x0c000000;
	/*0068*/ ULONG Redirected : 01; // 0x10000000;
	/*0068*/ ULONG ReservedFlags6 : 02; // 0x60000000;
	/*0068*/ ULONG CompatDatabaseProcessed : 01; // 0x80000000;
	/*006c*/ USHORT ObsoleteLoadCount;
	/*006e*/ USHORT TlsIndex;
	/*0070*/ _LIST_ENTRY HashLinks;
	/*0080*/ ULONG TimeDateStamp;
	/*0088*/ _ACTIVATION_CONTEXT * EntryPointActivationContext;
	/*0090*/ void * Lock;
	/*0098*/ _LDR_DDAG_NODE * DdagNode;
	/*00a0*/ _LIST_ENTRY NodeModuleLink;
	/*00b0*/ _LDRP_LOAD_CONTEXT * LoadContext;
	/*00b8*/ void * ParentDllBase;
	/*00c0*/ void * SwitchBackContext;
	/*00c8*/ _RTL_BALANCED_NODE BaseAddressIndexNode;
	/*00e0*/ _RTL_BALANCED_NODE MappingInfoIndexNode;
	/*00f8*/ ULONGLONG OriginalBase;
	/*0100*/ _LARGE_INTEGER LoadTime;
	/*0108*/ ULONG BaseNameHashValue;
	/*010c*/ _LDR_DLL_LOAD_REASON LoadReason;
	/*0110*/ ULONG ImplicitPathOptions;
	/*0114*/ ULONG ReferenceCount;
	/*0118*/ ULONG DependentLoadFlags;
	/*011c*/ UCHAR SigningLevel;
	/*0120*/
};

struct _LDR_DATA_TABLE_ENTRY32 {
	/*0000*/ LIST_ENTRY32 InLoadOrderLinks;
	/*0008*/ LIST_ENTRY32 InMemoryOrderLinks;
	/*0010*/ LIST_ENTRY32 InInitializationOrderLinks;
	/*0018*/ ULONG DllBase;
	/*001c*/ ULONG EntryPoint;
	/*0020*/ ULONG SizeOfImage;
	/*0024*/ _STRING32 FullDllName;
	/*002c*/ _STRING32 BaseDllName;
	/*0034*/ ULONG Flags;
	/*0038*/ USHORT LoadCount;
	/*003a*/ USHORT TlsIndex;
	/*003c*/ LIST_ENTRY32 HashLinks;
	/*003c*/ ULONG SectionPointer;
	/*0040*/ ULONG CheckSum;
	/*0044*/ ULONG TimeDateStamp;
	/*0044*/ ULONG LoadedImports;
	/*0048*/
};

struct _LDR_DATA_TABLE_ENTRY64 {
	/*0000*/ LIST_ENTRY64 InLoadOrderLinks;
	/*0010*/ LIST_ENTRY64 InMemoryOrderLinks;
	/*0020*/ LIST_ENTRY64 InInitializationOrderLinks;
	/*0030*/ ULONGLONG DllBase;
	/*0038*/ ULONGLONG EntryPoint;
	/*0040*/ ULONG SizeOfImage;
	/*0048*/ _STRING64 FullDllName;
	/*0058*/ _STRING64 BaseDllName;
	/*0068*/ ULONG Flags;
	/*006c*/ USHORT LoadCount;
	/*006e*/ USHORT TlsIndex;
	/*0070*/ LIST_ENTRY64 HashLinks;
	/*0070*/ ULONGLONG SectionPointer;
	/*0078*/ ULONG CheckSum;
	/*0080*/ ULONG TimeDateStamp;
	/*0080*/ ULONGLONG LoadedImports;
	/*0088*/
};

struct _LDR_DDAG_NODE {
	/*0000*/ _LIST_ENTRY Modules;
	/*0010*/ _LDR_SERVICE_TAG_RECORD * ServiceTagList;
	/*0018*/ ULONG LoadCount;
	/*001c*/ ULONG LoadWhileUnloadingCount;
	/*0020*/ ULONG LowestLink;
	/*0028*/ _LDRP_CSLIST Dependencies;
	/*0030*/ _LDRP_CSLIST IncomingDependencies;
	/*0038*/ _LDR_DDAG_STATE State;
	/*0040*/ _SINGLE_LIST_ENTRY CondenseLink;
	/*0048*/ ULONG PreorderNumber;
	/*0050*/
};

enum _LDR_DDAG_STATE {
	LdrModulesMerged = 0xfffffffb,
	LdrModulesInitError = 0xfffffffc,
	LdrModulesSnapError = 0xfffffffd,
	LdrModulesUnloaded = 0xfffffffe,
	LdrModulesUnloading = 0xffffffff,
	LdrModulesPlaceHolder = 0x0,
	LdrModulesMapping = 0x1,
	LdrModulesMapped = 0x2,
	LdrModulesWaitingForDependencies = 0x3,
	LdrModulesSnapping = 0x4,
	LdrModulesSnapped = 0x5,
	LdrModulesCondensed = 0x6,
	LdrModulesReadyToInit = 0x7,
	LdrModulesInitializing = 0x8,
	LdrModulesReadyToRun = 0x9
};

struct _LDR_DLL_LOADED_NOTIFICATION_DATA {
	/*0000*/ ULONG Flags;
	/*0008*/ _UNICODE_STRING const * FullDllName;
	/*0010*/ _UNICODE_STRING const * BaseDllName;
	/*0018*/ void * DllBase;
	/*0020*/ ULONG SizeOfImage;
	/*0028*/
};

enum _LDR_DLL_LOAD_REASON {
	LoadReasonStaticDependency = 0x0,
	LoadReasonStaticForwarderDependency = 0x1,
	LoadReasonDynamicForwarderDependency = 0x2,
	LoadReasonDelayloadDependency = 0x3,
	LoadReasonDynamicLoad = 0x4,
	LoadReasonAsImageLoad = 0x5,
	LoadReasonAsDataLoad = 0x6,
	LoadReasonEnclavePrimary = 0x7,
	LoadReasonEnclaveDependency = 0x8,
	LoadReasonUnknown = 0xffffffff
};

union _LDR_DLL_NOTIFICATION_DATA {
	/*0000*/ _LDR_DLL_LOADED_NOTIFICATION_DATA Loaded;
	/*0000*/ _LDR_DLL_UNLOADED_NOTIFICATION_DATA Unloaded;
	/*0028*/
};

struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA {
	/*0000*/ ULONG Flags;
	/*0008*/ _UNICODE_STRING const * FullDllName;
	/*0010*/ _UNICODE_STRING const * BaseDllName;
	/*0018*/ void * DllBase;
	/*0020*/ ULONG SizeOfImage;
	/*0028*/
};

struct _LDR_ENUM_RESOURCE_ENTRY {
	
	/*0000*/ <unnamed-type-Path> Path[0x3];
	/*0018*/ void * Data;
	/*0020*/ ULONG Size;
	/*0024*/ ULONG Reserved;
	/*0028*/
};

struct _LDR_FAILURE_DATA {
	/*0000*/ LONG Status;
	/*0004*/ WCHAR ImageName[0x20];
	/*0044*/ WCHAR AdditionalInfo[0x20];
	/*0084*/
};

struct _LDR_IMPORT_CALLBACK_INFO {
	/*0000*/ void (* ImportCallbackRoutine)( void * , CHAR * );
	/*0008*/ void * ImportCallbackParameter;
	/*0010*/
};

struct _LDR_RESLOADER_RET {
	/*0000*/ void * Module;
	/*0008*/ void * DataEntry;
	/*0010*/ void * TargetModule;
	/*0018*/
};

struct _LDR_SECTION_INFO {
	/*0000*/ void * SectionHandle;
	/*0008*/ ULONG DesiredAccess;
	/*0010*/ _OBJECT_ATTRIBUTES * ObjA;
	/*0018*/ ULONG SectionPageProtection;
	/*001c*/ ULONG AllocationAttributes;
	/*0020*/
};

struct _LDR_SERVICE_TAG_RECORD {
	/*0000*/ _LDR_SERVICE_TAG_RECORD * Next;
	/*0008*/ ULONG ServiceTag;
	/*0010*/
};

struct _LDR_VERIFY_IMAGE_INFO {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ _LDR_IMPORT_CALLBACK_INFO CallbackInfo;
	/*0018*/ _LDR_SECTION_INFO SectionInfo;
	/*0038*/ USHORT ImageCharacteristics;
	/*0040*/
};

struct _LDT_ENTRY {
	
	/*0000*/ USHORT LimitLow;
	/*0002*/ USHORT BaseLow;
	/*0004*/ <unnamed-type-HighWord> HighWord;
	/*0008*/
};

struct _LEAP_SECOND_DATA;

struct _LEAP_SECOND_DATA_REGISTRY_ENTRY {
	/*0000*/ SHORT Year;
	/*0002*/ SHORT Month;
	/*0004*/ SHORT Day;
	/*0006*/ SHORT Hour;
	/*0008*/ SHORT Flags;
	/*000a*/ SHORT Reserved;
	/*000c*/
};

enum _LEARNING_MODE_LOG_LEVEL {
	LearningModeLogLevelPassive = 0x0,
	LearningModeLogLevelNormalApc = 0x1,
	LearningModeLogLevelSpecialApc = 0x2,
	LearningModeLogLevelMax = 0x3
};

struct _LEARNING_MODE_OBJECT_INFORMATION {
	/*0000*/ _SINGLE_LIST_ENTRY ListEntry;
	/*0008*/ _LEARNING_MODE_LOG_LEVEL LogLevel;
	/*0010*/ _UNICODE_STRING * ObjectType;
	/*0018*/ _UNICODE_STRING * ObjectName;
	/*0020*/ void * RootDirectory;
	/*0028*/ _UNICODE_STRING FullObjectName;
	/*0038*/
};

struct _LINK_TRACKING_INFORMATION {
	/*0000*/ _LINK_TRACKING_INFORMATION_TYPE Type;
	/*0004*/ UCHAR VolumeId[0x10];
	/*0014*/
};

enum _LINK_TRACKING_INFORMATION_TYPE {
	NtfsLinkTrackingInformation = 0x0,
	DfsLinkTrackingInformation = 0x1
};

struct _LIST_ENTRY {
	/*0000*/ _LIST_ENTRY * Flink;
	/*0008*/ _LIST_ENTRY * Blink;
	/*0010*/
};

enum _LI_METRIC {
	LIM_SMALL = 0x0,
	LIM_LARGE = 0x1
};

struct _LOAD_ASDATA_TABLE {
	/*0000*/ void * Module;
	/*0008*/ WCHAR * FilePath;
	/*0010*/ ULONGLONG Size;
	/*0018*/ void * Handle;
	/*0020*/ LONG RefCount;
	/*0028*/ _ACTIVATION_CONTEXT * EntryPointActivationContext;
	/*0030*/
};

struct _LOAD_DLL_DEBUG_INFO {
	/*0000*/ void * hFile;
	/*0008*/ void * lpBaseOfDll;
	/*0010*/ ULONG dwDebugInfoFileOffset;
	/*0014*/ ULONG nDebugInfoSize;
	/*0018*/ void * lpImageName;
	/*0020*/ USHORT fUnicode;
	/*0028*/
};

enum _LOGICAL_PROCESSOR_RELATIONSHIP {
	RelationProcessorCore = 0x0,
	RelationNumaNode = 0x1,
	RelationCache = 0x2,
	RelationProcessorPackage = 0x3,
	RelationGroup = 0x4,
	RelationAll = 0xffff
};

struct _LONGDOUBLE {
	/*0000*/ double x;
	/*0008*/
};

struct _LONG_SIZEDARR {
	/*0000*/ ULONG clSize;
	/*0008*/ ULONG * pData;
	/*0010*/
};

struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
	/*0000*/ ULONG OffsetToNext;
	/*0004*/ ULONG Flags;
	/*0008*/ _LARGE_INTEGER Reserved;
	/*0010*/ _LARGE_INTEGER Cluster;
	/*0018*/ WCHAR FileName[0x1];
	/*0020*/
};

struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumberOfClusters;
	/*0008*/ _LARGE_INTEGER Cluster[0x1];
	/*0010*/
};

struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
	/*0000*/ ULONG Offset;
	/*0004*/ ULONG NumberOfMatches;
	/*0008*/ ULONG BufferSizeRequired;
	/*000c*/
};

struct _LPC_CLIENT_DIED_MSG {
	/*0000*/ _PORT_MESSAGE PortMsg;
	/*0028*/ _LARGE_INTEGER CreateTime;
	/*0030*/
};

struct _LPC_UNREGISTER_PROCESS_MSG {
	/*0000*/ _PORT_MESSAGE PortMsg;
	/*0028*/ void * UniqueProcessId;
	/*0030*/
};

enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION {
	MarshalDirectionMarshal = 0x0,
	MarshalDirectionUnmarshal = 0x1
};

struct _LUID {
	/*0000*/ ULONG LowPart;
	/*0004*/ LONG HighPart;
	/*0008*/
};

struct _LUID_AND_ATTRIBUTES {
	/*0000*/ _LUID Luid;
	/*0008*/ ULONG Attributes;
	/*000c*/
};

struct _LUNICODE_STRING {
	/*0000*/ ULONGLONG Length;
	/*0008*/ ULONGLONG MaximumLength;
	/*0010*/ WCHAR * Buffer;
	/*0018*/
};

struct _LUTF8_STRING {
	/*0000*/ ULONGLONG Length;
	/*0008*/ ULONGLONG MaximumLength;
	/*0010*/ UCHAR * Buffer;
	/*0018*/
};

struct _M128A {
	/*0000*/ ULONGLONG Low;
	/*0008*/ LONGLONG High;
	/*0010*/
};

struct _MALLOC_FREE_STRUCT {
	/*0000*/ void * (* pfnAllocate)( ULONGLONG );
	/*0008*/ void (* pfnFree)( void * );
	/*0010*/
};

struct _MANAGE_HOT_PATCH_LOAD_PATCH {
	
	/*0000*/ ULONG Version;
	/*0008*/ _UNICODE_STRING PatchPath;
	/*0018*/ <unnamed-type-UserSid> UserSid;
	/*005c*/ _HOT_PATCH_IMAGE_INFO BaseInfo;
	/*0068*/
};

struct _MANAGE_HOT_PATCH_QUERY_ACTIVE_PATCHES {
	/*0000*/ ULONG Version;
	/*0008*/ void * ProcessHandle;
	/*0010*/ ULONG PatchCount;
	/*0018*/ _UNICODE_STRING * PatchPathStrings;
	/*0020*/ _HOT_PATCH_IMAGE_INFO * BaseInfos;
	/*0028*/
};

struct _MANAGE_HOT_PATCH_QUERY_PATCHES {
	
	/*0000*/ ULONG Version;
	/*0004*/ <unnamed-type-UserSid> UserSid;
	/*0048*/ ULONG PatchCount;
	/*0050*/ _UNICODE_STRING * PatchPathStrings;
	/*0058*/ _HOT_PATCH_IMAGE_INFO * BaseInfos;
	/*0060*/
};

struct _MANAGE_HOT_PATCH_UNLOAD_PATCH {
	
	/*0000*/ ULONG Version;
	/*0004*/ _HOT_PATCH_IMAGE_INFO BaseInfo;
	/*000c*/ <unnamed-type-UserSid> UserSid;
	/*0050*/
};

struct _MANAGE_WRITES_TO_EXECUTABLE_MEMORY {
	/*0000*/ ULONG Version : 08; // 0x000000ff;
	/*0000*/ ULONG ProcessEnableWriteExceptions : 01; // 0x00000100;
	/*0000*/ ULONG ThreadAllowWrites : 01; // 0x00000200;
	/*0000*/ ULONG Spare : 22; // 0xfffffc00;
	/*0008*/ void * KernelWriteToExecutableSignal;
	/*0010*/
};

enum _MANDATORY_LEVEL {
	MandatoryLevelUntrusted = 0x0,
	MandatoryLevelLow = 0x1,
	MandatoryLevelMedium = 0x2,
	MandatoryLevelHigh = 0x3,
	MandatoryLevelSystem = 0x4,
	MandatoryLevelSecureProcess = 0x5,
	MandatoryLevelCount = 0x6
};

struct _MAPIERROR {
	/*0000*/ ULONG ulVersion;
	/*0008*/ WCHAR * lpszError;
	/*0010*/ WCHAR * lpszComponent;
	/*0018*/ ULONG ulLowLevelError;
	/*001c*/ ULONG ulContext;
	/*0020*/
};

struct _MAPINAMEID {
	
	/*0000*/ _GUID * lpguid;
	/*0008*/ ULONG ulKind;
	/*0010*/ <unnamed-type-Kind> Kind;
	/*0018*/
};

struct _MAPIUID {
	/*0000*/ UCHAR ab[0x10];
	/*0010*/
};

struct _MAT2 {
	/*0000*/ _FIXED eM11;
	/*0004*/ _FIXED eM12;
	/*0008*/ _FIXED eM21;
	/*000c*/ _FIXED eM22;
	/*0010*/
};

struct _MAXVERSIONTESTED_INFO {
	/*0000*/ ULONGLONG MaxVersionTested;
	/*0008*/
};

struct _MCA_EXCEPTION {
	
	/*0000*/ ULONG VersionNumber;
	/*0004*/ MCA_EXCEPTION_TYPE ExceptionType;
	/*0008*/ _LARGE_INTEGER TimeStamp;
	/*0010*/ ULONG ProcessorNumber;
	/*0014*/ ULONG Reserved1;
	/*0018*/ <unnamed-type-u> u;
	/*0038*/ ULONG ExtCnt;
	/*003c*/ ULONG Reserved3;
	/*0040*/ ULONGLONG ExtReg[0x18];
	/*0100*/
};

union _MCI_ADDR {
	/*0000*/ ULONG Address;
	/*0004*/ ULONG Reserved;
	/*0000*/ ULONGLONG QuadPart;
	/*0008*/
};

union _MCI_STATS {
	
	/*0000*/ <unnamed-type-MciStatus> MciStatus;
	/*0000*/ ULONGLONG QuadPart;
	/*0008*/
};

struct _MDNS_QUERY_HANDLE {
	/*0000*/ WCHAR nameBuf[0x100];
	/*0200*/ USHORT wType;
	/*0208*/ void * pSubscription;
	/*0210*/ void * pWnfCallbackParams;
	/*0218*/ ULONG stateNameData[0x2];
	/*0220*/
};

struct _MDNS_QUERY_REQUEST {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG ulRefCount;
	/*0008*/ WCHAR const * Query;
	/*0010*/ USHORT QueryType;
	/*0018*/ ULONGLONG QueryOptions;
	/*0020*/ ULONG InterfaceIndex;
	/*0028*/ void (* pQueryCallback)( void * , _MDNS_QUERY_HANDLE * , _DNS_QUERY_RESULT * );
	/*0030*/ void * pQueryContext;
	/*0038*/ INT fAnswerReceived;
	/*003c*/ ULONG ulResendCount;
	/*0040*/
};

struct _MEMORYSTATUS {
	/*0000*/ ULONG dwLength;
	/*0004*/ ULONG dwMemoryLoad;
	/*0008*/ ULONGLONG dwTotalPhys;
	/*0010*/ ULONGLONG dwAvailPhys;
	/*0018*/ ULONGLONG dwTotalPageFile;
	/*0020*/ ULONGLONG dwAvailPageFile;
	/*0028*/ ULONGLONG dwTotalVirtual;
	/*0030*/ ULONGLONG dwAvailVirtual;
	/*0038*/
};

struct _MEMORYSTATUSEX {
	/*0000*/ ULONG dwLength;
	/*0004*/ ULONG dwMemoryLoad;
	/*0008*/ ULONGLONG ullTotalPhys;
	/*0010*/ ULONGLONG ullAvailPhys;
	/*0018*/ ULONGLONG ullTotalPageFile;
	/*0020*/ ULONGLONG ullAvailPageFile;
	/*0028*/ ULONGLONG ullTotalVirtual;
	/*0030*/ ULONGLONG ullAvailVirtual;
	/*0038*/ ULONGLONG ullAvailExtendedVirtual;
	/*0040*/
};

struct _MEMORY_BASIC_INFORMATION {
	/*0000*/ void * BaseAddress;
	/*0008*/ void * AllocationBase;
	/*0010*/ ULONG AllocationProtect;
	/*0014*/ USHORT PartitionId;
	/*0018*/ ULONGLONG RegionSize;
	/*0020*/ ULONG State;
	/*0024*/ ULONG Protect;
	/*0028*/ ULONG Type;
	/*0030*/
};

struct _MEMORY_BASIC_INFORMATION32 {
	/*0000*/ ULONG BaseAddress;
	/*0004*/ ULONG AllocationBase;
	/*0008*/ ULONG AllocationProtect;
	/*000c*/ ULONG RegionSize;
	/*0010*/ ULONG State;
	/*0014*/ ULONG Protect;
	/*0018*/ ULONG Type;
	/*001c*/
};

struct _MEMORY_BASIC_INFORMATION64 {
	/*0000*/ ULONGLONG BaseAddress;
	/*0008*/ ULONGLONG AllocationBase;
	/*0010*/ ULONG AllocationProtect;
	/*0014*/ ULONG __alignment1;
	/*0018*/ ULONGLONG RegionSize;
	/*0020*/ ULONG State;
	/*0024*/ ULONG Protect;
	/*0028*/ ULONG Type;
	/*002c*/ ULONG __alignment2;
	/*0030*/
};

struct _MEMORY_COMBINE_INFORMATION {
	/*0000*/ void * Handle;
	/*0008*/ ULONGLONG PagesCombined;
	/*0010*/
};

struct _MEMORY_COMBINE_INFORMATION_EX {
	/*0000*/ void * Handle;
	/*0008*/ ULONGLONG PagesCombined;
	/*0010*/ ULONG Flags;
	/*0018*/
};

struct _MEMORY_COMBINE_INFORMATION_EX2 {
	/*0000*/ void * Handle;
	/*0008*/ ULONGLONG PagesCombined;
	/*0010*/ ULONG Flags;
	/*0018*/ void * ProcessHandle;
	/*0020*/
};

struct _MEMORY_ENCLAVE_IMAGE_INFORMATION {
	/*0000*/ _MEMORY_IMAGE_INFORMATION ImageInfo;
	/*0018*/ UCHAR UniqueID[0x20];
	/*0038*/ UCHAR AuthorID[0x20];
	/*0058*/
};

struct _MEMORY_EXHAUSTION_INFORMATION {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Reserved;
	/*0004*/ _MEMORY_EXHAUSTION_TYPE Type;
	/*0008*/ ULONGLONG Value;
	/*0010*/
};

enum _MEMORY_EXHAUSTION_TYPE {
	MemoryExhaustionTypeFailFastOnCommitFailure = 0x0,
	MemoryExhaustionTypeMax = 0x1
};

struct _MEMORY_FRAME_INFORMATION {
	/*0000*/ ULONGLONG UseDescription : 04; // 0x000000000000000f;
	/*0000*/ ULONGLONG ListDescription : 03; // 0x0000000000000070;
	/*0000*/ ULONGLONG Cold : 01; // 0x0000000000000080;
	/*0000*/ ULONGLONG Pinned : 01; // 0x0000000000000100;
	/*0000*/ ULONGLONG DontUse : 48; // 0x01fffffffffffe00;
	/*0000*/ ULONGLONG Priority : 03; // 0x0e00000000000000;
	/*0000*/ ULONGLONG Reserved : 04; // 0xf000000000000000;
	/*0008*/
};

struct _MEMORY_IMAGE_INFORMATION {
	/*0000*/ void * ImageBase;
	/*0008*/ ULONGLONG SizeOfImage;
	/*0010*/ ULONG ImageFlags;
	/*0010*/ ULONG ImagePartialMap : 01; // 0x00000001;
	/*0010*/ ULONG ImageNotExecutable : 01; // 0x00000002;
	/*0010*/ ULONG ImageSigningLevel : 04; // 0x0000003c;
	/*0010*/ ULONG Reserved : 26; // 0xffffffc0;
	/*0018*/
};

enum _MEMORY_INFORMATION_CLASS {
	MemoryBasicInformation = 0x0,
	MemoryWorkingSetInformation = 0x1,
	MemoryMappedFilenameInformation = 0x2,
	MemoryRegionInformation = 0x3,
	MemoryWorkingSetExInformation = 0x4,
	MemorySharedCommitInformation = 0x5,
	MemoryImageInformation = 0x6,
	MemoryRegionInformationEx = 0x7,
	MemoryPrivilegedBasicInformation = 0x8,
	MemoryEnclaveImageInformation = 0x9,
	MemoryBasicInformationCapped = 0xa,
	MemoryPhysicalContiguityInformation = 0xb
};

struct _MEMORY_PARTITION_ATTRIBUTE_INFORMATION {
	/*0000*/ ULONGLONG Flags;
	/*0008*/
};

struct _MEMORY_PARTITION_CONFIGURATION_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumaNode;
	/*0008*/ ULONG Channel;
	/*000c*/ ULONG NumberOfNumaNodes;
	/*0010*/ ULONGLONG ResidentAvailablePages;
	/*0018*/ ULONGLONG CommittedPages;
	/*0020*/ ULONGLONG CommitLimit;
	/*0028*/ ULONGLONG PeakCommitment;
	/*0030*/ ULONGLONG TotalNumberOfPages;
	/*0038*/ ULONGLONG AvailablePages;
	/*0040*/ ULONGLONG ZeroPages;
	/*0048*/ ULONGLONG FreePages;
	/*0050*/ ULONGLONG StandbyPages;
	/*0058*/ ULONGLONG StandbyPageCountByPriority[0x8];
	/*0098*/ ULONGLONG RepurposedPagesByPriority[0x8];
	/*00d8*/ ULONGLONG MaximumCommitLimit;
	/*00e0*/ ULONGLONG DonatedPagesToPartitions;
	/*00e8*/ ULONG PartitionId;
	/*00f0*/
};

struct _MEMORY_PARTITION_CREATE_LARGE_PAGES_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumaNode;
	/*0008*/ ULONGLONG LargePageSize;
	/*0010*/ ULONGLONG NumberOfLargePagesToCreate;
	/*0018*/ ULONGLONG NumberOfLargePagesCreated;
	/*0020*/
};

struct _MEMORY_PARTITION_INITIAL_ADD_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumberOfRanges;
	/*0008*/ ULONGLONG NumberOfPagesAdded;
	/*0010*/ _MEMORY_PARTITION_PAGE_RANGE PartitionRanges[0x1];
	/*0020*/
};

struct _MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION {
	
	/*0000*/ <unnamed-type-Flags> Flags;
	/*0004*/ ULONG HandleAttributes;
	/*0008*/ ULONG DesiredAccess;
	/*0010*/ void * LowCommitCondition;
	/*0018*/ void * HighCommitCondition;
	/*0020*/ void * MaximumCommitCondition;
	/*0028*/
};

struct _MEMORY_PARTITION_NODE_INFORMATION {
	/*0000*/ ULONG NumaNodeCount;
	/*0004*/ ULONG Flags;
	/*0008*/ _MEMORY_PARTITION_NODE_PAGE_INFORMATION * NodePageInformation;
	/*0010*/
};

struct _MEMORY_PARTITION_NODE_PAGE_INFORMATION {
	/*0000*/ ULONGLONG TotalPageCount;
	/*0008*/ ULONGLONG SmallFreePageCount;
	/*0010*/ ULONGLONG SmallZeroPageCount;
	/*0018*/ ULONGLONG MediumFreePageCount;
	/*0020*/ ULONGLONG MediumZeroPageCount;
	/*0028*/ ULONGLONG LargeFreePageCount;
	/*0030*/ ULONGLONG LargeZeroPageCount;
	/*0038*/ ULONGLONG HugeFreePageCount;
	/*0040*/ ULONGLONG HugeZeroPageCount;
	/*0048*/
};

struct _MEMORY_PARTITION_PAGEFILE_INFORMATION {
	/*0000*/ _UNICODE_STRING PageFileName;
	/*0010*/ _LARGE_INTEGER MinimumSize;
	/*0018*/ _LARGE_INTEGER MaximumSize;
	/*0020*/ ULONG Flags;
	/*0028*/
};

struct _MEMORY_PARTITION_PAGE_COMBINE_INFORMATION {
	/*0000*/ void * StopHandle;
	/*0008*/ ULONG Flags;
	/*0010*/ ULONGLONG TotalNumberOfPages;
	/*0018*/
};

struct _MEMORY_PARTITION_PAGE_RANGE {
	/*0000*/ ULONGLONG StartPage;
	/*0008*/ ULONGLONG NumberOfPages;
	/*0010*/
};

struct _MEMORY_PARTITION_TRANSFER_INFORMATION {
	/*0000*/ ULONGLONG NumberOfPages;
	/*0008*/ ULONG NumaNode;
	/*000c*/ ULONG Flags;
	/*0010*/
};

struct _MEMORY_PHYSICAL_CONTIGUITY_INFORMATION {
	/*0000*/ void * VirtualAddress;
	/*0008*/ ULONGLONG Size;
	/*0010*/ ULONGLONG ContiguityUnitSize;
	/*0018*/ ULONG Flags;
	/*0020*/ _MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION * ContiguityUnitInformation;
	/*0028*/
};

struct _MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION {
	/*0000*/ ULONG State : 02; // 0x00000003;
	/*0000*/ ULONG Reserved : 30; // 0xfffffffc;
	/*0000*/ ULONG AllInformation;
	/*0004*/
};

enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE {
	MemoryNotContiguous = 0x0,
	MemoryAlignedAndContiguous = 0x1,
	MemoryNotResident = 0x2,
	MemoryNotEligibleToMakeContiguous = 0x3,
	MemoryContiguityStateMax = 0x4
};

struct _MEMORY_PRIORITY_INFORMATION {
	/*0000*/ ULONG MemoryPriority;
	/*0004*/
};

struct _MEMORY_RANGE_ENTRY {
	/*0000*/ void * VirtualAddress;
	/*0008*/ ULONGLONG NumberOfBytes;
	/*0010*/
};

struct _MEMORY_REGION_INFORMATION {
	/*0000*/ void * AllocationBase;
	/*0008*/ ULONG AllocationProtect;
	/*000c*/ ULONG RegionType;
	/*000c*/ ULONG Private : 01; // 0x00000001;
	/*000c*/ ULONG MappedDataFile : 01; // 0x00000002;
	/*000c*/ ULONG MappedImage : 01; // 0x00000004;
	/*000c*/ ULONG MappedPageFile : 01; // 0x00000008;
	/*000c*/ ULONG MappedPhysical : 01; // 0x00000010;
	/*000c*/ ULONG DirectMapped : 01; // 0x00000020;
	/*000c*/ ULONG SoftwareEnclave : 01; // 0x00000040;
	/*000c*/ ULONG PageSize64K : 01; // 0x00000080;
	/*000c*/ ULONG PlaceholderReservation : 01; // 0x00000100;
	/*000c*/ ULONG Reserved : 23; // 0xfffffe00;
	/*0010*/ ULONGLONG RegionSize;
	/*0018*/ ULONGLONG CommitSize;
	/*0020*/ ULONGLONG PartitionId;
	/*0028*/ ULONGLONG NodePreference;
	/*0030*/
};

enum _MEMORY_RESERVE_TYPE {
	MemoryReserveUserApc = 0x0,
	MemoryReserveIoCompletion = 0x1,
	MemoryReserveTypeMax = 0x2
};

enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
	LowMemoryResourceNotification = 0x0,
	HighMemoryResourceNotification = 0x1
};

struct _MEMORY_SCRUB_INFORMATION {
	/*0000*/ void * Handle;
	/*0008*/ ULONGLONG PagesScrubbed;
	/*0010*/
};

struct _MEMORY_SHARED_COMMIT_INFORMATION {
	/*0000*/ ULONGLONG CommitSize;
	/*0008*/
};

struct _MEMORY_WORKING_SET_BLOCK {
	/*0000*/ ULONGLONG Protection : 05; // 0x000000000000001f;
	/*0000*/ ULONGLONG ShareCount : 03; // 0x00000000000000e0;
	/*0000*/ ULONGLONG Shared : 01; // 0x0000000000000100;
	/*0000*/ ULONGLONG Node : 03; // 0x0000000000000e00;
	/*0000*/ ULONGLONG VirtualPage : 52; // 0xfffffffffffff000;
	/*0008*/
};

struct _MEMORY_WORKING_SET_EX_BLOCK {
	
	/*0000*/ ULONGLONG Valid : 01; // 0x0000000000000001;
	/*0000*/ ULONGLONG ShareCount : 03; // 0x000000000000000e;
	/*0000*/ ULONGLONG Win32Protection : 11; // 0x0000000000007ff0;
	/*0000*/ ULONGLONG Shared : 01; // 0x0000000000008000;
	/*0000*/ ULONGLONG Node : 06; // 0x00000000003f0000;
	/*0000*/ ULONGLONG Locked : 01; // 0x0000000000400000;
	/*0000*/ ULONGLONG LargePage : 01; // 0x0000000000800000;
	/*0000*/ ULONGLONG Priority : 03; // 0x0000000007000000;
	/*0000*/ ULONGLONG Reserved : 03; // 0x0000000038000000;
	/*0000*/ ULONGLONG SharedOriginal : 01; // 0x0000000040000000;
	/*0000*/ ULONGLONG Bad : 01; // 0x0000000080000000;
	/*0000*/ ULONGLONG Win32GraphicsProtection : 04; // 0x0000000f00000000;
	/*0000*/ ULONGLONG ReservedUlong : 28; // 0xfffffff000000000;
	/*0000*/ <unnamed-type-Invalid> Invalid;
	/*0008*/
};

struct _MEMORY_WORKING_SET_EX_INFORMATION {
	
	/*0000*/ void * VirtualAddress;
	/*0008*/ <unnamed-type-u1> u1;
	/*0010*/
};

enum _MEMORY_WORKING_SET_EX_LOCATION {
	MemoryLocationInvalid = 0x0,
	MemoryLocationResident = 0x1,
	MemoryLocationPagefile = 0x2,
	MemoryLocationReserved = 0x3
};

struct _MEMORY_WORKING_SET_INFORMATION {
	/*0000*/ ULONGLONG NumberOfEntries;
	/*0008*/ _MEMORY_WORKING_SET_BLOCK WorkingSetInfo[0x1];
	/*0010*/
};

struct _MEM_ADDRESS_REQUIREMENTS {
	/*0000*/ void * LowestStartingAddress;
	/*0008*/ void * HighestEndingAddress;
	/*0010*/ ULONGLONG Alignment;
	/*0018*/
};

struct _MENU_EVENT_RECORD {
	/*0000*/ UINT dwCommandId;
	/*0004*/
};

struct _MESSAGE_RESOURCE_BLOCK {
	/*0000*/ ULONG LowId;
	/*0004*/ ULONG HighId;
	/*0008*/ ULONG OffsetToEntries;
	/*000c*/
};

struct _MESSAGE_RESOURCE_DATA {
	/*0000*/ ULONG NumberOfBlocks;
	/*0004*/ _MESSAGE_RESOURCE_BLOCK Blocks[0x1];
	/*0010*/
};

struct _MESSAGE_RESOURCE_ENTRY {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT Flags;
	/*0004*/ UCHAR Text[0x1];
	/*0006*/
};

struct _MIBICMPINFO {
	/*0000*/ _MIBICMPSTATS icmpInStats;
	/*0034*/ _MIBICMPSTATS icmpOutStats;
	/*0068*/
};

struct _MIBICMPSTATS {
	/*0000*/ ULONG dwMsgs;
	/*0004*/ ULONG dwErrors;
	/*0008*/ ULONG dwDestUnreachs;
	/*000c*/ ULONG dwTimeExcds;
	/*0010*/ ULONG dwParmProbs;
	/*0014*/ ULONG dwSrcQuenchs;
	/*0018*/ ULONG dwRedirects;
	/*001c*/ ULONG dwEchos;
	/*0020*/ ULONG dwEchoReps;
	/*0024*/ ULONG dwTimestamps;
	/*0028*/ ULONG dwTimestampReps;
	/*002c*/ ULONG dwAddrMasks;
	/*0030*/ ULONG dwAddrMaskReps;
	/*0034*/
};

struct _MIBICMPSTATS_EX_XPSP1 {
	/*0000*/ ULONG dwMsgs;
	/*0004*/ ULONG dwErrors;
	/*0008*/ ULONG rgdwTypeCount[0x100];
	/*0408*/
};

struct _MIB_ANYCASTIPADDRESS_ROW {
	/*0000*/ _SOCKADDR_INET Address;
	/*0020*/ _NET_LUID_LH InterfaceLuid;
	/*0028*/ ULONG InterfaceIndex;
	/*002c*/ SCOPE_ID ScopeId;
	/*0030*/
};

struct _MIB_ANYCASTIPADDRESS_TABLE {
	/*0000*/ ULONG NumEntries;
	/*0008*/ _MIB_ANYCASTIPADDRESS_ROW Table[0x1];
	/*0038*/
};

struct _MIB_BEST_IF {
	/*0000*/ ULONG dwDestAddr;
	/*0004*/ ULONG dwIfIndex;
	/*0008*/
};

struct _MIB_ICMP {
	/*0000*/ _MIBICMPINFO stats;
	/*0068*/
};

struct _MIB_ICMP_EX_XPSP1 {
	/*0000*/ _MIBICMPSTATS_EX_XPSP1 icmpInStats;
	/*0408*/ _MIBICMPSTATS_EX_XPSP1 icmpOutStats;
	/*0810*/
};

struct _MIB_IFNUMBER {
	/*0000*/ ULONG dwValue;
	/*0004*/
};

struct _MIB_IFROW {
	/*0000*/ WCHAR wszName[0x100];
	/*0200*/ ULONG dwIndex;
	/*0204*/ ULONG dwType;
	/*0208*/ ULONG dwMtu;
	/*020c*/ ULONG dwSpeed;
	/*0210*/ ULONG dwPhysAddrLen;
	/*0214*/ UCHAR bPhysAddr[0x8];
	/*021c*/ ULONG dwAdminStatus;
	/*0220*/ _INTERNAL_IF_OPER_STATUS dwOperStatus;
	/*0224*/ ULONG dwLastChange;
	/*0228*/ ULONG dwInOctets;
	/*022c*/ ULONG dwInUcastPkts;
	/*0230*/ ULONG dwInNUcastPkts;
	/*0234*/ ULONG dwInDiscards;
	/*0238*/ ULONG dwInErrors;
	/*023c*/ ULONG dwInUnknownProtos;
	/*0240*/ ULONG dwOutOctets;
	/*0244*/ ULONG dwOutUcastPkts;
	/*0248*/ ULONG dwOutNUcastPkts;
	/*024c*/ ULONG dwOutDiscards;
	/*0250*/ ULONG dwOutErrors;
	/*0254*/ ULONG dwOutQLen;
	/*0258*/ ULONG dwDescrLen;
	/*025c*/ UCHAR bDescr[0x100];
	/*035c*/
};

struct _MIB_IFSTACK_ROW {
	/*0000*/ ULONG HigherLayerInterfaceIndex;
	/*0004*/ ULONG LowerLayerInterfaceIndex;
	/*0008*/
};

struct _MIB_IFSTACK_TABLE {
	/*0000*/ ULONG NumEntries;
	/*0004*/ _MIB_IFSTACK_ROW Table[0x1];
	/*000c*/
};

struct _MIB_IFSTATUS {
	/*0000*/ ULONG dwIfIndex;
	/*0004*/ ULONG dwAdminStatus;
	/*0008*/ ULONG dwOperationalStatus;
	/*000c*/ INT bMHbeatActive;
	/*0010*/ INT bMHbeatAlive;
	/*0014*/
};

struct _MIB_IFTABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_IFROW table[0x1];
	/*0360*/
};

enum _MIB_IF_ENTRY_LEVEL {
	MibIfEntryNormal = 0x0,
	MibIfEntryNormalWithoutStatistics = 0x2
};

struct _MIB_IF_ROW2 {
	
	/*0000*/ _NET_LUID_LH InterfaceLuid;
	/*0008*/ ULONG InterfaceIndex;
	/*000c*/ _GUID InterfaceGuid;
	/*001c*/ WCHAR Alias[0x101];
	/*021e*/ WCHAR Description[0x101];
	/*0420*/ ULONG PhysicalAddressLength;
	/*0424*/ UCHAR PhysicalAddress[0x20];
	/*0444*/ UCHAR PermanentPhysicalAddress[0x20];
	/*0464*/ ULONG Mtu;
	/*0468*/ ULONG Type;
	/*046c*/ TUNNEL_TYPE TunnelType;
	/*0470*/ _NDIS_MEDIUM MediaType;
	/*0474*/ _NDIS_PHYSICAL_MEDIUM PhysicalMediumType;
	/*0478*/ _NET_IF_ACCESS_TYPE AccessType;
	/*047c*/ _NET_IF_DIRECTION_TYPE DirectionType;
	/*0480*/ <unnamed-type-InterfaceAndOperStatusFlags> InterfaceAndOperStatusFlags;
	/*0484*/ IF_OPER_STATUS OperStatus;
	/*0488*/ _NET_IF_ADMIN_STATUS AdminStatus;
	/*048c*/ _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
	/*0490*/ _GUID NetworkGuid;
	/*04a0*/ _NET_IF_CONNECTION_TYPE ConnectionType;
	/*04a8*/ ULONGLONG TransmitLinkSpeed;
	/*04b0*/ ULONGLONG ReceiveLinkSpeed;
	/*04b8*/ ULONGLONG InOctets;
	/*04c0*/ ULONGLONG InUcastPkts;
	/*04c8*/ ULONGLONG InNUcastPkts;
	/*04d0*/ ULONGLONG InDiscards;
	/*04d8*/ ULONGLONG InErrors;
	/*04e0*/ ULONGLONG InUnknownProtos;
	/*04e8*/ ULONGLONG InUcastOctets;
	/*04f0*/ ULONGLONG InMulticastOctets;
	/*04f8*/ ULONGLONG InBroadcastOctets;
	/*0500*/ ULONGLONG OutOctets;
	/*0508*/ ULONGLONG OutUcastPkts;
	/*0510*/ ULONGLONG OutNUcastPkts;
	/*0518*/ ULONGLONG OutDiscards;
	/*0520*/ ULONGLONG OutErrors;
	/*0528*/ ULONGLONG OutUcastOctets;
	/*0530*/ ULONGLONG OutMulticastOctets;
	/*0538*/ ULONGLONG OutBroadcastOctets;
	/*0540*/ ULONGLONG OutQLen;
	/*0548*/
};

struct _MIB_IF_TABLE2 {
	/*0000*/ ULONG NumEntries;
	/*0008*/ _MIB_IF_ROW2 Table[0x1];
	/*0550*/
};

enum _MIB_IF_TABLE_LEVEL {
	MibIfTableNormal = 0x0,
	MibIfTableRaw = 0x1,
	MibIfTableNormalWithoutStatistics = 0x2
};

struct _MIB_INVERTEDIFSTACK_ROW {
	/*0000*/ ULONG LowerLayerInterfaceIndex;
	/*0004*/ ULONG HigherLayerInterfaceIndex;
	/*0008*/
};

struct _MIB_INVERTEDIFSTACK_TABLE {
	/*0000*/ ULONG NumEntries;
	/*0004*/ _MIB_INVERTEDIFSTACK_ROW Table[0x1];
	/*000c*/
};

struct _MIB_IPADDRROW_W2K {
	/*0000*/ ULONG dwAddr;
	/*0004*/ ULONG dwIndex;
	/*0008*/ ULONG dwMask;
	/*000c*/ ULONG dwBCastAddr;
	/*0010*/ ULONG dwReasmSize;
	/*0014*/ USHORT unused1;
	/*0016*/ USHORT unused2;
	/*0018*/
};

struct _MIB_IPADDRROW_XP {
	/*0000*/ ULONG dwAddr;
	/*0004*/ ULONG dwIndex;
	/*0008*/ ULONG dwMask;
	/*000c*/ ULONG dwBCastAddr;
	/*0010*/ ULONG dwReasmSize;
	/*0014*/ USHORT unused1;
	/*0016*/ USHORT wType;
	/*0018*/
};

struct _MIB_IPADDRTABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_IPADDRROW_XP table[0x1];
	/*001c*/
};

struct _MIB_IPDESTROW {
	/*0000*/ _MIB_IPFORWARDROW ForwardRow;
	/*0038*/ ULONG dwForwardPreference;
	/*003c*/ ULONG dwForwardViewSet;
	/*0040*/
};

struct _MIB_IPDESTTABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_IPDESTROW table[0x1];
	/*0044*/
};

struct _MIB_IPFORWARDNUMBER {
	/*0000*/ ULONG dwValue;
	/*0004*/
};

struct _MIB_IPFORWARDROW {
	/*0000*/ ULONG dwForwardDest;
	/*0004*/ ULONG dwForwardMask;
	/*0008*/ ULONG dwForwardPolicy;
	/*000c*/ ULONG dwForwardNextHop;
	/*0010*/ ULONG dwForwardIfIndex;
	/*0014*/ ULONG dwForwardType;
	/*0014*/ MIB_IPFORWARD_TYPE ForwardType;
	/*0018*/ ULONG dwForwardProto;
	/*0018*/ NL_ROUTE_PROTOCOL ForwardProto;
	/*001c*/ ULONG dwForwardAge;
	/*0020*/ ULONG dwForwardNextHopAS;
	/*0024*/ ULONG dwForwardMetric1;
	/*0028*/ ULONG dwForwardMetric2;
	/*002c*/ ULONG dwForwardMetric3;
	/*0030*/ ULONG dwForwardMetric4;
	/*0034*/ ULONG dwForwardMetric5;
	/*0038*/
};

struct _MIB_IPFORWARDTABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_IPFORWARDROW table[0x1];
	/*003c*/
};

struct _MIB_IPFORWARD_ROW2 {
	/*0000*/ _NET_LUID_LH InterfaceLuid;
	/*0008*/ ULONG InterfaceIndex;
	/*000c*/ _IP_ADDRESS_PREFIX DestinationPrefix;
	/*002c*/ _SOCKADDR_INET NextHop;
	/*0048*/ UCHAR SitePrefixLength;
	/*004c*/ ULONG ValidLifetime;
	/*0050*/ ULONG PreferredLifetime;
	/*0054*/ ULONG Metric;
	/*0058*/ NL_ROUTE_PROTOCOL Protocol;
	/*005c*/ UCHAR Loopback;
	/*005d*/ UCHAR AutoconfigureAddress;
	/*005e*/ UCHAR Publish;
	/*005f*/ UCHAR Immortal;
	/*0060*/ ULONG Age;
	/*0064*/ _NL_ROUTE_ORIGIN Origin;
	/*0068*/
};

struct _MIB_IPFORWARD_TABLE2 {
	/*0000*/ ULONG NumEntries;
	/*0008*/ _MIB_IPFORWARD_ROW2 Table[0x1];
	/*0070*/
};

struct _MIB_IPINTERFACE_ROW {
	/*0000*/ USHORT Family;
	/*0008*/ _NET_LUID_LH InterfaceLuid;
	/*0010*/ ULONG InterfaceIndex;
	/*0014*/ ULONG MaxReassemblySize;
	/*0018*/ ULONGLONG InterfaceIdentifier;
	/*0020*/ ULONG MinRouterAdvertisementInterval;
	/*0024*/ ULONG MaxRouterAdvertisementInterval;
	/*0028*/ UCHAR AdvertisingEnabled;
	/*0029*/ UCHAR ForwardingEnabled;
	/*002a*/ UCHAR WeakHostSend;
	/*002b*/ UCHAR WeakHostReceive;
	/*002c*/ UCHAR UseAutomaticMetric;
	/*002d*/ UCHAR UseNeighborUnreachabilityDetection;
	/*002e*/ UCHAR ManagedAddressConfigurationSupported;
	/*002f*/ UCHAR OtherStatefulConfigurationSupported;
	/*0030*/ UCHAR AdvertiseDefaultRoute;
	/*0034*/ _NL_ROUTER_DISCOVERY_BEHAVIOR RouterDiscoveryBehavior;
	/*0038*/ ULONG DadTransmits;
	/*003c*/ ULONG BaseReachableTime;
	/*0040*/ ULONG RetransmitTime;
	/*0044*/ ULONG PathMtuDiscoveryTimeout;
	/*0048*/ _NL_LINK_LOCAL_ADDRESS_BEHAVIOR LinkLocalAddressBehavior;
	/*004c*/ ULONG LinkLocalAddressTimeout;
	/*0050*/ ULONG ZoneIndices[0x10];
	/*0090*/ ULONG SitePrefixLength;
	/*0094*/ ULONG Metric;
	/*0098*/ ULONG NlMtu;
	/*009c*/ UCHAR Connected;
	/*009d*/ UCHAR SupportsWakeUpPatterns;
	/*009e*/ UCHAR SupportsNeighborDiscovery;
	/*009f*/ UCHAR SupportsRouterDiscovery;
	/*00a0*/ ULONG ReachableTime;
	/*00a4*/ _NL_INTERFACE_OFFLOAD_ROD TransmitOffload;
	/*00a5*/ _NL_INTERFACE_OFFLOAD_ROD ReceiveOffload;
	/*00a6*/ UCHAR DisableDefaultRoutes;
	/*00a8*/
};

struct _MIB_IPINTERFACE_TABLE {
	/*0000*/ ULONG NumEntries;
	/*0008*/ _MIB_IPINTERFACE_ROW Table[0x1];
	/*00b0*/
};

struct _MIB_IPMCAST_BOUNDARY {
	/*0000*/ ULONG dwIfIndex;
	/*0004*/ ULONG dwGroupAddress;
	/*0008*/ ULONG dwGroupMask;
	/*000c*/ ULONG dwStatus;
	/*0010*/
};

struct _MIB_IPMCAST_BOUNDARY_TABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_IPMCAST_BOUNDARY table[0x1];
	/*0014*/
};

struct _MIB_IPMCAST_GLOBAL {
	/*0000*/ ULONG dwEnable;
	/*0004*/
};

struct _MIB_IPMCAST_IF_ENTRY {
	/*0000*/ ULONG dwIfIndex;
	/*0004*/ ULONG dwTtl;
	/*0008*/ ULONG dwProtocol;
	/*000c*/ ULONG dwRateLimit;
	/*0010*/ ULONG ulInMcastOctets;
	/*0014*/ ULONG ulOutMcastOctets;
	/*0018*/
};

struct _MIB_IPMCAST_IF_TABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_IPMCAST_IF_ENTRY table[0x1];
	/*001c*/
};

struct _MIB_IPMCAST_MFE {
	/*0000*/ ULONG dwGroup;
	/*0004*/ ULONG dwSource;
	/*0008*/ ULONG dwSrcMask;
	/*000c*/ ULONG dwUpStrmNgbr;
	/*0010*/ ULONG dwInIfIndex;
	/*0014*/ ULONG dwInIfProtocol;
	/*0018*/ ULONG dwRouteProtocol;
	/*001c*/ ULONG dwRouteNetwork;
	/*0020*/ ULONG dwRouteMask;
	/*0024*/ ULONG ulUpTime;
	/*0028*/ ULONG ulExpiryTime;
	/*002c*/ ULONG ulTimeOut;
	/*0030*/ ULONG ulNumOutIf;
	/*0034*/ ULONG fFlags;
	/*0038*/ ULONG dwReserved;
	/*003c*/ _MIB_IPMCAST_OIF_XP rgmioOutInfo[0x1];
	/*004c*/
};

struct _MIB_IPMCAST_MFE_STATS {
	/*0000*/ ULONG dwGroup;
	/*0004*/ ULONG dwSource;
	/*0008*/ ULONG dwSrcMask;
	/*000c*/ ULONG dwUpStrmNgbr;
	/*0010*/ ULONG dwInIfIndex;
	/*0014*/ ULONG dwInIfProtocol;
	/*0018*/ ULONG dwRouteProtocol;
	/*001c*/ ULONG dwRouteNetwork;
	/*0020*/ ULONG dwRouteMask;
	/*0024*/ ULONG ulUpTime;
	/*0028*/ ULONG ulExpiryTime;
	/*002c*/ ULONG ulNumOutIf;
	/*0030*/ ULONG ulInPkts;
	/*0034*/ ULONG ulInOctets;
	/*0038*/ ULONG ulPktsDifferentIf;
	/*003c*/ ULONG ulQueueOverflow;
	/*0040*/ _MIB_IPMCAST_OIF_STATS_LH rgmiosOutStats[0x1];
	/*005c*/
};

struct _MIB_IPMCAST_MFE_STATS_EX_XP {
	/*0000*/ ULONG dwGroup;
	/*0004*/ ULONG dwSource;
	/*0008*/ ULONG dwSrcMask;
	/*000c*/ ULONG dwUpStrmNgbr;
	/*0010*/ ULONG dwInIfIndex;
	/*0014*/ ULONG dwInIfProtocol;
	/*0018*/ ULONG dwRouteProtocol;
	/*001c*/ ULONG dwRouteNetwork;
	/*0020*/ ULONG dwRouteMask;
	/*0024*/ ULONG ulUpTime;
	/*0028*/ ULONG ulExpiryTime;
	/*002c*/ ULONG ulNumOutIf;
	/*0030*/ ULONG ulInPkts;
	/*0034*/ ULONG ulInOctets;
	/*0038*/ ULONG ulPktsDifferentIf;
	/*003c*/ ULONG ulQueueOverflow;
	/*0040*/ ULONG ulUninitMfe;
	/*0044*/ ULONG ulNegativeMfe;
	/*0048*/ ULONG ulInDiscards;
	/*004c*/ ULONG ulInHdrErrors;
	/*0050*/ ULONG ulTotalOutPackets;
	/*0054*/ _MIB_IPMCAST_OIF_STATS_LH rgmiosOutStats[0x1];
	/*0070*/
};

struct _MIB_IPMCAST_OIF_STATS_LH {
	/*0000*/ ULONG dwOutIfIndex;
	/*0004*/ ULONG dwNextHopAddr;
	/*0008*/ ULONG dwDialContext;
	/*000c*/ ULONG ulTtlTooLow;
	/*0010*/ ULONG ulFragNeeded;
	/*0014*/ ULONG ulOutPackets;
	/*0018*/ ULONG ulOutDiscards;
	/*001c*/
};

struct _MIB_IPMCAST_OIF_STATS_W2K {
	/*0000*/ ULONG dwOutIfIndex;
	/*0004*/ ULONG dwNextHopAddr;
	/*0008*/ void * pvDialContext;
	/*0010*/ ULONG ulTtlTooLow;
	/*0014*/ ULONG ulFragNeeded;
	/*0018*/ ULONG ulOutPackets;
	/*001c*/ ULONG ulOutDiscards;
	/*0020*/
};

struct _MIB_IPMCAST_OIF_W2K {
	/*0000*/ ULONG dwOutIfIndex;
	/*0004*/ ULONG dwNextHopAddr;
	/*0008*/ void * pvReserved;
	/*0010*/ ULONG dwReserved;
	/*0018*/
};

struct _MIB_IPMCAST_OIF_XP {
	/*0000*/ ULONG dwOutIfIndex;
	/*0004*/ ULONG dwNextHopAddr;
	/*0008*/ ULONG dwReserved;
	/*000c*/ ULONG dwReserved1;
	/*0010*/
};

struct _MIB_IPMCAST_SCOPE {
	/*0000*/ ULONG dwGroupAddress;
	/*0004*/ ULONG dwGroupMask;
	/*0008*/ WCHAR snNameBuffer[0x100];
	/*0208*/ ULONG dwStatus;
	/*020c*/
};

struct _MIB_IPNETROW_LH {
	/*0000*/ ULONG dwIndex;
	/*0004*/ ULONG dwPhysAddrLen;
	/*0008*/ UCHAR bPhysAddr[0x8];
	/*0010*/ ULONG dwAddr;
	/*0014*/ ULONG dwType;
	/*0014*/ MIB_IPNET_TYPE Type;
	/*0018*/
};

struct _MIB_IPNETROW_W2K {
	/*0000*/ ULONG dwIndex;
	/*0004*/ ULONG dwPhysAddrLen;
	/*0008*/ UCHAR bPhysAddr[0x8];
	/*0010*/ ULONG dwAddr;
	/*0014*/ ULONG dwType;
	/*0018*/
};

struct _MIB_IPNETTABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_IPNETROW_LH table[0x1];
	/*001c*/
};

struct _MIB_IPNET_ROW2 {
	
	/*0000*/ _SOCKADDR_INET Address;
	/*001c*/ ULONG InterfaceIndex;
	/*0020*/ _NET_LUID_LH InterfaceLuid;
	/*0028*/ UCHAR PhysicalAddress[0x20];
	/*0048*/ ULONG PhysicalAddressLength;
	/*004c*/ _NL_NEIGHBOR_STATE State;
	/*0050*/ UCHAR IsRouter : 01; // 0x01;
	/*0050*/ UCHAR IsUnreachable : 01; // 0x02;
	/*0050*/ UCHAR Flags;
	/*0054*/ <unnamed-type-ReachabilityTime> ReachabilityTime;
	/*0058*/
};

struct _MIB_IPNET_TABLE2 {
	/*0000*/ ULONG NumEntries;
	/*0008*/ _MIB_IPNET_ROW2 Table[0x1];
	/*0060*/
};

struct _MIB_IPPATH_ROW {
	/*0000*/ _SOCKADDR_INET Source;
	/*001c*/ _SOCKADDR_INET Destination;
	/*0038*/ _NET_LUID_LH InterfaceLuid;
	/*0040*/ ULONG InterfaceIndex;
	/*0044*/ _SOCKADDR_INET CurrentNextHop;
	/*0060*/ ULONG PathMtu;
	/*0064*/ ULONG RttMean;
	/*0068*/ ULONG RttDeviation;
	/*006c*/ ULONG LastReachable;
	/*006c*/ ULONG LastUnreachable;
	/*0070*/ UCHAR IsReachable;
	/*0078*/ ULONGLONG LinkTransmitSpeed;
	/*0080*/ ULONGLONG LinkReceiveSpeed;
	/*0088*/
};

struct _MIB_IPPATH_TABLE {
	/*0000*/ ULONG NumEntries;
	/*0008*/ _MIB_IPPATH_ROW Table[0x1];
	/*0090*/
};

struct _MIB_IPSTATS_LH {
	/*0000*/ ULONG dwForwarding;
	/*0000*/ MIB_IPSTATS_FORWARDING Forwarding;
	/*0004*/ ULONG dwDefaultTTL;
	/*0008*/ ULONG dwInReceives;
	/*000c*/ ULONG dwInHdrErrors;
	/*0010*/ ULONG dwInAddrErrors;
	/*0014*/ ULONG dwForwDatagrams;
	/*0018*/ ULONG dwInUnknownProtos;
	/*001c*/ ULONG dwInDiscards;
	/*0020*/ ULONG dwInDelivers;
	/*0024*/ ULONG dwOutRequests;
	/*0028*/ ULONG dwRoutingDiscards;
	/*002c*/ ULONG dwOutDiscards;
	/*0030*/ ULONG dwOutNoRoutes;
	/*0034*/ ULONG dwReasmTimeout;
	/*0038*/ ULONG dwReasmReqds;
	/*003c*/ ULONG dwReasmOks;
	/*0040*/ ULONG dwReasmFails;
	/*0044*/ ULONG dwFragOks;
	/*0048*/ ULONG dwFragFails;
	/*004c*/ ULONG dwFragCreates;
	/*0050*/ ULONG dwNumIf;
	/*0054*/ ULONG dwNumAddr;
	/*0058*/ ULONG dwNumRoutes;
	/*005c*/
};

struct _MIB_IPSTATS_W2K {
	/*0000*/ ULONG dwForwarding;
	/*0004*/ ULONG dwDefaultTTL;
	/*0008*/ ULONG dwInReceives;
	/*000c*/ ULONG dwInHdrErrors;
	/*0010*/ ULONG dwInAddrErrors;
	/*0014*/ ULONG dwForwDatagrams;
	/*0018*/ ULONG dwInUnknownProtos;
	/*001c*/ ULONG dwInDiscards;
	/*0020*/ ULONG dwInDelivers;
	/*0024*/ ULONG dwOutRequests;
	/*0028*/ ULONG dwRoutingDiscards;
	/*002c*/ ULONG dwOutDiscards;
	/*0030*/ ULONG dwOutNoRoutes;
	/*0034*/ ULONG dwReasmTimeout;
	/*0038*/ ULONG dwReasmReqds;
	/*003c*/ ULONG dwReasmOks;
	/*0040*/ ULONG dwReasmFails;
	/*0044*/ ULONG dwFragOks;
	/*0048*/ ULONG dwFragFails;
	/*004c*/ ULONG dwFragCreates;
	/*0050*/ ULONG dwNumIf;
	/*0054*/ ULONG dwNumAddr;
	/*0058*/ ULONG dwNumRoutes;
	/*005c*/
};

struct _MIB_IP_NETWORK_CONNECTION_BANDWIDTH_ESTIMATES {
	/*0000*/ _NL_BANDWIDTH_INFORMATION InboundBandwidthInformation;
	/*0018*/ _NL_BANDWIDTH_INFORMATION OutboundBandwidthInformation;
	/*0030*/
};

struct _MIB_MFE_STATS_TABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_IPMCAST_MFE_STATS table[0x1];
	/*0060*/
};

struct _MIB_MFE_STATS_TABLE_EX_XP {
	/*0000*/ ULONG dwNumEntries;
	/*0008*/ _MIB_IPMCAST_MFE_STATS_EX_XP * table[0x1];
	/*0010*/
};

struct _MIB_MFE_TABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_IPMCAST_MFE table[0x1];
	/*0050*/
};

struct _MIB_MULTICASTIPADDRESS_ROW {
	/*0000*/ _SOCKADDR_INET Address;
	/*001c*/ ULONG InterfaceIndex;
	/*0020*/ _NET_LUID_LH InterfaceLuid;
	/*0028*/ SCOPE_ID ScopeId;
	/*0030*/
};

struct _MIB_MULTICASTIPADDRESS_TABLE {
	/*0000*/ ULONG NumEntries;
	/*0008*/ _MIB_MULTICASTIPADDRESS_ROW Table[0x1];
	/*0038*/
};

enum _MIB_NOTIFICATION_TYPE {
	MibParameterNotification = 0x0,
	MibAddInstance = 0x1,
	MibDeleteInstance = 0x2,
	MibInitialNotification = 0x3
};

struct _MIB_OPAQUE_INFO {
	/*0000*/ ULONG dwId;
	/*0008*/ ULONGLONG ullAlign;
	/*0008*/ UCHAR rgbyData[0x1];
	/*0010*/
};

struct _MIB_OPAQUE_QUERY {
	/*0000*/ ULONG dwVarId;
	/*0004*/ ULONG rgdwVarIndex[0x1];
	/*0008*/
};

struct _MIB_PROXYARP {
	/*0000*/ ULONG dwAddress;
	/*0004*/ ULONG dwMask;
	/*0008*/ ULONG dwIfIndex;
	/*000c*/
};

struct _MIB_ROUTESTATE {
	/*0000*/ INT bRoutesSetToStack;
	/*0004*/
};

struct _MIB_TCP6ROW {
	/*0000*/ MIB_TCP_STATE State;
	/*0004*/ in6_addr LocalAddr;
	/*0014*/ ULONG dwLocalScopeId;
	/*0018*/ ULONG dwLocalPort;
	/*001c*/ in6_addr RemoteAddr;
	/*002c*/ ULONG dwRemoteScopeId;
	/*0030*/ ULONG dwRemotePort;
	/*0034*/
};

struct _MIB_TCP6ROW2 {
	/*0000*/ in6_addr LocalAddr;
	/*0010*/ ULONG dwLocalScopeId;
	/*0014*/ ULONG dwLocalPort;
	/*0018*/ in6_addr RemoteAddr;
	/*0028*/ ULONG dwRemoteScopeId;
	/*002c*/ ULONG dwRemotePort;
	/*0030*/ MIB_TCP_STATE State;
	/*0034*/ ULONG dwOwningPid;
	/*0038*/ TCP_CONNECTION_OFFLOAD_STATE dwOffloadState;
	/*003c*/
};

struct _MIB_TCP6ROW_OWNER_MODULE {
	/*0000*/ UCHAR ucLocalAddr[0x10];
	/*0010*/ ULONG dwLocalScopeId;
	/*0014*/ ULONG dwLocalPort;
	/*0018*/ UCHAR ucRemoteAddr[0x10];
	/*0028*/ ULONG dwRemoteScopeId;
	/*002c*/ ULONG dwRemotePort;
	/*0030*/ ULONG dwState;
	/*0034*/ ULONG dwOwningPid;
	/*0038*/ _LARGE_INTEGER liCreateTimestamp;
	/*0040*/ ULONGLONG OwningModuleInfo[0x10];
	/*00c0*/
};

struct _MIB_TCP6ROW_OWNER_PID {
	/*0000*/ UCHAR ucLocalAddr[0x10];
	/*0010*/ ULONG dwLocalScopeId;
	/*0014*/ ULONG dwLocalPort;
	/*0018*/ UCHAR ucRemoteAddr[0x10];
	/*0028*/ ULONG dwRemoteScopeId;
	/*002c*/ ULONG dwRemotePort;
	/*0030*/ ULONG dwState;
	/*0034*/ ULONG dwOwningPid;
	/*0038*/
};

struct _MIB_TCP6TABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_TCP6ROW table[0x1];
	/*0038*/
};

struct _MIB_TCP6TABLE2 {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_TCP6ROW2 table[0x1];
	/*0040*/
};

struct _MIB_TCP6TABLE_OWNER_MODULE {
	/*0000*/ ULONG dwNumEntries;
	/*0008*/ _MIB_TCP6ROW_OWNER_MODULE table[0x1];
	/*00c8*/
};

struct _MIB_TCP6TABLE_OWNER_PID {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_TCP6ROW_OWNER_PID table[0x1];
	/*003c*/
};

struct _MIB_TCPROW2 {
	/*0000*/ ULONG dwState;
	/*0004*/ ULONG dwLocalAddr;
	/*0008*/ ULONG dwLocalPort;
	/*000c*/ ULONG dwRemoteAddr;
	/*0010*/ ULONG dwRemotePort;
	/*0014*/ ULONG dwOwningPid;
	/*0018*/ TCP_CONNECTION_OFFLOAD_STATE dwOffloadState;
	/*001c*/
};

struct _MIB_TCPROW_LH {
	/*0000*/ ULONG dwState;
	/*0000*/ MIB_TCP_STATE State;
	/*0004*/ ULONG dwLocalAddr;
	/*0008*/ ULONG dwLocalPort;
	/*000c*/ ULONG dwRemoteAddr;
	/*0010*/ ULONG dwRemotePort;
	/*0014*/
};

struct _MIB_TCPROW_OWNER_MODULE {
	/*0000*/ ULONG dwState;
	/*0004*/ ULONG dwLocalAddr;
	/*0008*/ ULONG dwLocalPort;
	/*000c*/ ULONG dwRemoteAddr;
	/*0010*/ ULONG dwRemotePort;
	/*0014*/ ULONG dwOwningPid;
	/*0018*/ _LARGE_INTEGER liCreateTimestamp;
	/*0020*/ ULONGLONG OwningModuleInfo[0x10];
	/*00a0*/
};

struct _MIB_TCPROW_OWNER_PID {
	/*0000*/ ULONG dwState;
	/*0004*/ ULONG dwLocalAddr;
	/*0008*/ ULONG dwLocalPort;
	/*000c*/ ULONG dwRemoteAddr;
	/*0010*/ ULONG dwRemotePort;
	/*0014*/ ULONG dwOwningPid;
	/*0018*/
};

struct _MIB_TCPROW_W2K {
	/*0000*/ ULONG dwState;
	/*0004*/ ULONG dwLocalAddr;
	/*0008*/ ULONG dwLocalPort;
	/*000c*/ ULONG dwRemoteAddr;
	/*0010*/ ULONG dwRemotePort;
	/*0014*/
};

struct _MIB_TCPSTATS2 {
	/*0000*/ TCP_RTO_ALGORITHM RtoAlgorithm;
	/*0004*/ ULONG dwRtoMin;
	/*0008*/ ULONG dwRtoMax;
	/*000c*/ ULONG dwMaxConn;
	/*0010*/ ULONG dwActiveOpens;
	/*0014*/ ULONG dwPassiveOpens;
	/*0018*/ ULONG dwAttemptFails;
	/*001c*/ ULONG dwEstabResets;
	/*0020*/ ULONG dwCurrEstab;
	/*0028*/ ULONGLONG dw64InSegs;
	/*0030*/ ULONGLONG dw64OutSegs;
	/*0038*/ ULONG dwRetransSegs;
	/*003c*/ ULONG dwInErrs;
	/*0040*/ ULONG dwOutRsts;
	/*0044*/ ULONG dwNumConns;
	/*0048*/
};

struct _MIB_TCPSTATS_LH {
	/*0000*/ ULONG dwRtoAlgorithm;
	/*0000*/ TCP_RTO_ALGORITHM RtoAlgorithm;
	/*0004*/ ULONG dwRtoMin;
	/*0008*/ ULONG dwRtoMax;
	/*000c*/ ULONG dwMaxConn;
	/*0010*/ ULONG dwActiveOpens;
	/*0014*/ ULONG dwPassiveOpens;
	/*0018*/ ULONG dwAttemptFails;
	/*001c*/ ULONG dwEstabResets;
	/*0020*/ ULONG dwCurrEstab;
	/*0024*/ ULONG dwInSegs;
	/*0028*/ ULONG dwOutSegs;
	/*002c*/ ULONG dwRetransSegs;
	/*0030*/ ULONG dwInErrs;
	/*0034*/ ULONG dwOutRsts;
	/*0038*/ ULONG dwNumConns;
	/*003c*/
};

struct _MIB_TCPSTATS_W2K {
	/*0000*/ ULONG dwRtoAlgorithm;
	/*0004*/ ULONG dwRtoMin;
	/*0008*/ ULONG dwRtoMax;
	/*000c*/ ULONG dwMaxConn;
	/*0010*/ ULONG dwActiveOpens;
	/*0014*/ ULONG dwPassiveOpens;
	/*0018*/ ULONG dwAttemptFails;
	/*001c*/ ULONG dwEstabResets;
	/*0020*/ ULONG dwCurrEstab;
	/*0024*/ ULONG dwInSegs;
	/*0028*/ ULONG dwOutSegs;
	/*002c*/ ULONG dwRetransSegs;
	/*0030*/ ULONG dwInErrs;
	/*0034*/ ULONG dwOutRsts;
	/*0038*/ ULONG dwNumConns;
	/*003c*/
};

struct _MIB_TCPTABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_TCPROW_LH table[0x1];
	/*0018*/
};

struct _MIB_TCPTABLE2 {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_TCPROW2 table[0x1];
	/*0020*/
};

struct _MIB_TCPTABLE_OWNER_MODULE {
	/*0000*/ ULONG dwNumEntries;
	/*0008*/ _MIB_TCPROW_OWNER_MODULE table[0x1];
	/*00a8*/
};

struct _MIB_TCPTABLE_OWNER_PID {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_TCPROW_OWNER_PID table[0x1];
	/*001c*/
};

struct _MIB_UDP6ROW {
	/*0000*/ in6_addr dwLocalAddr;
	/*0010*/ ULONG dwLocalScopeId;
	/*0014*/ ULONG dwLocalPort;
	/*0018*/
};

struct _MIB_UDP6ROW_OWNER_MODULE {
	/*0000*/ UCHAR ucLocalAddr[0x10];
	/*0010*/ ULONG dwLocalScopeId;
	/*0014*/ ULONG dwLocalPort;
	/*0018*/ ULONG dwOwningPid;
	/*0020*/ _LARGE_INTEGER liCreateTimestamp;
	/*0028*/ INT SpecificPortBind : 01; // 0x00000001;
	/*0028*/ INT dwFlags;
	/*0030*/ ULONGLONG OwningModuleInfo[0x10];
	/*00b0*/
};

struct _MIB_UDP6ROW_OWNER_PID {
	/*0000*/ UCHAR ucLocalAddr[0x10];
	/*0010*/ ULONG dwLocalScopeId;
	/*0014*/ ULONG dwLocalPort;
	/*0018*/ ULONG dwOwningPid;
	/*001c*/
};

struct _MIB_UDP6TABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_UDP6ROW table[0x1];
	/*001c*/
};

struct _MIB_UDP6TABLE_OWNER_MODULE {
	/*0000*/ ULONG dwNumEntries;
	/*0008*/ _MIB_UDP6ROW_OWNER_MODULE table[0x1];
	/*00b8*/
};

struct _MIB_UDP6TABLE_OWNER_PID {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_UDP6ROW_OWNER_PID table[0x1];
	/*0020*/
};

struct _MIB_UDPROW {
	/*0000*/ ULONG dwLocalAddr;
	/*0004*/ ULONG dwLocalPort;
	/*0008*/
};

struct _MIB_UDPROW_OWNER_MODULE {
	/*0000*/ ULONG dwLocalAddr;
	/*0004*/ ULONG dwLocalPort;
	/*0008*/ ULONG dwOwningPid;
	/*0010*/ _LARGE_INTEGER liCreateTimestamp;
	/*0018*/ INT SpecificPortBind : 01; // 0x00000001;
	/*0018*/ INT dwFlags;
	/*0020*/ ULONGLONG OwningModuleInfo[0x10];
	/*00a0*/
};

struct _MIB_UDPROW_OWNER_PID {
	/*0000*/ ULONG dwLocalAddr;
	/*0004*/ ULONG dwLocalPort;
	/*0008*/ ULONG dwOwningPid;
	/*000c*/
};

struct _MIB_UDPSTATS {
	/*0000*/ ULONG dwInDatagrams;
	/*0004*/ ULONG dwNoPorts;
	/*0008*/ ULONG dwInErrors;
	/*000c*/ ULONG dwOutDatagrams;
	/*0010*/ ULONG dwNumAddrs;
	/*0014*/
};

struct _MIB_UDPSTATS2 {
	/*0000*/ ULONGLONG dw64InDatagrams;
	/*0008*/ ULONG dwNoPorts;
	/*000c*/ ULONG dwInErrors;
	/*0010*/ ULONGLONG dw64OutDatagrams;
	/*0018*/ ULONG dwNumAddrs;
	/*0020*/
};

struct _MIB_UDPTABLE {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_UDPROW table[0x1];
	/*000c*/
};

struct _MIB_UDPTABLE_OWNER_MODULE {
	/*0000*/ ULONG dwNumEntries;
	/*0008*/ _MIB_UDPROW_OWNER_MODULE table[0x1];
	/*00a8*/
};

struct _MIB_UDPTABLE_OWNER_PID {
	/*0000*/ ULONG dwNumEntries;
	/*0004*/ _MIB_UDPROW_OWNER_PID table[0x1];
	/*0010*/
};

struct _MIB_UNICASTIPADDRESS_ROW {
	/*0000*/ _SOCKADDR_INET Address;
	/*0020*/ _NET_LUID_LH InterfaceLuid;
	/*0028*/ ULONG InterfaceIndex;
	/*002c*/ NL_PREFIX_ORIGIN PrefixOrigin;
	/*0030*/ NL_SUFFIX_ORIGIN SuffixOrigin;
	/*0034*/ ULONG ValidLifetime;
	/*0038*/ ULONG PreferredLifetime;
	/*003c*/ UCHAR OnLinkPrefixLength;
	/*003d*/ UCHAR SkipAsSource;
	/*0040*/ NL_DAD_STATE DadState;
	/*0044*/ SCOPE_ID ScopeId;
	/*0048*/ _LARGE_INTEGER CreationTimeStamp;
	/*0050*/
};

struct _MIB_UNICASTIPADDRESS_TABLE {
	/*0000*/ ULONG NumEntries;
	/*0008*/ _MIB_UNICASTIPADDRESS_ROW Table[0x1];
	/*0058*/
};

struct _MIDL_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[];
	/*0002*/
};

struct _MIDL_INTERCEPTION_INFO {
	/*0000*/ ULONG Version;
	/*0008*/ UCHAR const * ProcString;
	/*0010*/ USHORT const * ProcFormatOffsetTable;
	/*0018*/ ULONG ProcCount;
	/*0020*/ UCHAR const * TypeString;
	/*0028*/
};

struct _MIDL_INTERFACE_METHOD_PROPERTIES {
	/*0000*/ USHORT MethodCount;
	/*0008*/ _MIDL_METHOD_PROPERTY_MAP const * const * MethodProperties;
	/*0010*/
};

struct _MIDL_METHOD_PROPERTY {
	/*0000*/ ULONG Id;
	/*0008*/ ULONGLONG Value;
	/*0010*/
};

struct _MIDL_METHOD_PROPERTY_MAP {
	/*0000*/ ULONG Count;
	/*0008*/ _MIDL_METHOD_PROPERTY const * Properties;
	/*0010*/
};

struct _MIDL_SERVER_INFO_ {
	/*0000*/ _MIDL_STUB_DESC const * pStubDesc;
	/*0008*/ LONG (* const * DispatchTable)();
	/*0010*/ UCHAR const * ProcString;
	/*0018*/ USHORT const * FmtStringOffset;
	/*0020*/ void (* const * ThunkTable)( _MIDL_STUB_MESSAGE * );
	/*0028*/ _RPC_SYNTAX_IDENTIFIER * pTransferSyntax;
	/*0030*/ ULONGLONG nCount;
	/*0038*/ _MIDL_SYNTAX_INFO * pSyntaxInfo;
	/*0040*/
};

struct _MIDL_STUBLESS_PROXY_INFO {
	/*0000*/ _MIDL_STUB_DESC const * pStubDesc;
	/*0008*/ UCHAR const * ProcFormatString;
	/*0010*/ USHORT const * FormatStringOffset;
	/*0018*/ _RPC_SYNTAX_IDENTIFIER * pTransferSyntax;
	/*0020*/ ULONGLONG nCount;
	/*0028*/ _MIDL_SYNTAX_INFO * pSyntaxInfo;
	/*0030*/
};

struct _MIDL_STUB_DESC {
	
	/*0000*/ void * RpcInterfaceInformation;
	/*0008*/ void * (* pfnAllocate)( ULONGLONG );
	/*0010*/ void (* pfnFree)( void * );
	union {
		/*0018*/ void * * pAutoHandle;
		/*0018*/ void * * pPrimitiveHandle;
		/*0018*/ __GENERIC_BINDING_INFO * pGenericBindingInfo;
		/*0020*/
	} IMPLICIT_HANDLE_INFO;
	/*0020*/ void (* const * apfnNdrRundownRoutines)( void * );
	/*0028*/ _GENERIC_BINDING_ROUTINE_PAIR const * aGenericBindingRoutinePairs;
	/*0030*/ void (* const * apfnExprEval)( _MIDL_STUB_MESSAGE * );
	/*0038*/ _XMIT_ROUTINE_QUINTUPLE const * aXmitQuintuple;
	/*0040*/ UCHAR const * pFormatTypes;
	/*0048*/ INT fCheckBounds;
	/*004c*/ ULONG Version;
	/*0050*/ _MALLOC_FREE_STRUCT * pMallocFreeStruct;
	/*0058*/ LONG MIDLVersion;
	/*0060*/ _COMM_FAULT_OFFSETS const * CommFaultOffsets;
	/*0068*/ _USER_MARSHAL_ROUTINE_QUADRUPLE const * aUserMarshalQuadruple;
	/*0070*/ void (* const * NotifyRoutineTable)();
	/*0078*/ ULONGLONG mFlags;
	/*0080*/ _NDR_CS_ROUTINES const * CsRoutineTables;
	/*0088*/ void * ProxyServerInfo;
	/*0090*/ _NDR_EXPR_DESC const * pExprInfo;
	/*0098*/
};

struct _MIDL_STUB_MESSAGE {
	/*0000*/ _RPC_MESSAGE * RpcMsg;
	/*0008*/ UCHAR * Buffer;
	/*0010*/ UCHAR * BufferStart;
	/*0018*/ UCHAR * BufferEnd;
	/*0020*/ UCHAR * BufferMark;
	/*0028*/ ULONG BufferLength;
	/*002c*/ ULONG MemorySize;
	/*0030*/ UCHAR * Memory;
	/*0038*/ UCHAR IsClient;
	/*0039*/ UCHAR Pad;
	/*003a*/ USHORT uFlags2;
	/*003c*/ INT ReuseBuffer;
	/*0040*/ NDR_ALLOC_ALL_NODES_CONTEXT * pAllocAllNodesContext;
	/*0048*/ NDR_POINTER_QUEUE_STATE * pPointerQueueState;
	/*0050*/ INT IgnoreEmbeddedPointers;
	/*0058*/ UCHAR * PointerBufferMark;
	/*0060*/ UCHAR CorrDespIncrement;
	/*0061*/ UCHAR uFlags;
	/*0062*/ USHORT UniquePtrCount;
	/*0068*/ ULONGLONG MaxCount;
	/*0070*/ ULONG Offset;
	/*0074*/ ULONG ActualCount;
	/*0078*/ void * (* pfnAllocate)( ULONGLONG );
	/*0080*/ void (* pfnFree)( void * );
	/*0088*/ UCHAR * StackTop;
	/*0090*/ UCHAR * pPresentedType;
	/*0098*/ UCHAR * pTransmitType;
	/*00a0*/ void * SavedHandle;
	/*00a8*/ _MIDL_STUB_DESC const * StubDesc;
	/*00b0*/ _FULL_PTR_XLAT_TABLES * FullPtrXlatTables;
	/*00b8*/ ULONG FullPtrRefId;
	/*00bc*/ ULONG PointerLength;
	/*00c0*/ INT fInDontFree : 01; // 0x00000001;
	/*00c0*/ INT fDontCallFreeInst : 01; // 0x00000002;
	/*00c0*/ INT fUnused1 : 01; // 0x00000004;
	/*00c0*/ INT fHasReturn : 01; // 0x00000008;
	/*00c0*/ INT fHasExtensions : 01; // 0x00000010;
	/*00c0*/ INT fHasNewCorrDesc : 01; // 0x00000020;
	/*00c0*/ INT fIsIn : 01; // 0x00000040;
	/*00c0*/ INT fIsOut : 01; // 0x00000080;
	/*00c0*/ INT fIsOicf : 01; // 0x00000100;
	/*00c0*/ INT fBufferValid : 01; // 0x00000200;
	/*00c0*/ INT fHasMemoryValidateCallback : 01; // 0x00000400;
	/*00c0*/ INT fInFree : 01; // 0x00000800;
	/*00c0*/ INT fNeedMCCP : 01; // 0x00001000;
	/*00c0*/ INT fUnused2 : 03; // 0x0000e000;
	/*00c0*/ INT fUnused3 : 16; // 0xffff0000;
	/*00c4*/ ULONG dwDestContext;
	/*00c8*/ void * pvDestContext;
	/*00d0*/ <unnamed-type-NDR_SCONTEXT> * * SavedContextHandles;
	/*00d8*/ LONG ParamNumber;
	/*00e0*/ IRpcChannelBuffer * pRpcChannelBuffer;
	/*00e8*/ ARRAY_INFO * pArrayInfo;
	/*00f0*/ ULONG * SizePtrCountArray;
	/*00f8*/ ULONG * SizePtrOffsetArray;
	/*0100*/ ULONG * SizePtrLengthArray;
	/*0108*/ void * pArgQueue;
	/*0110*/ ULONG dwStubPhase;
	/*0118*/ void * LowStackMark;
	/*0120*/ _NDR_ASYNC_MESSAGE * pAsyncMsg;
	/*0128*/ _NDR_CORRELATION_INFO * pCorrInfo;
	/*0130*/ UCHAR * pCorrMemory;
	/*0138*/ void * pMemoryList;
	/*0140*/ LONGLONG pCSInfo;
	/*0148*/ UCHAR * ConformanceMark;
	/*0150*/ UCHAR * VarianceMark;
	/*0158*/ LONGLONG Unused;
	/*0160*/ _NDR_PROC_CONTEXT * pContext;
	/*0168*/ void * ContextHandleHash;
	/*0170*/ void * pUserMarshalList;
	/*0178*/ LONGLONG Reserved51_3;
	/*0180*/ LONGLONG Reserved51_4;
	/*0188*/ LONGLONG Reserved51_5;
	/*0190*/
};

struct _MIDL_SYNTAX_INFO {
	/*0000*/ _RPC_SYNTAX_IDENTIFIER TransferSyntax;
	/*0018*/ RPC_DISPATCH_TABLE * DispatchTable;
	/*0020*/ UCHAR const * ProcString;
	/*0028*/ USHORT const * FmtStringOffset;
	/*0030*/ UCHAR const * TypeString;
	/*0038*/ void const * aUserMarshalQuadruple;
	/*0040*/ _MIDL_INTERFACE_METHOD_PROPERTIES const * pMethodProperties;
	/*0048*/ ULONGLONG pReserved2;
	/*0050*/
};

struct _MIDL_WINRT_TYPE_SERIALIZATION_INFO {
	/*0000*/ ULONG Version;
	/*0008*/ UCHAR const * TypeFormatString;
	/*0010*/ USHORT FormatStringSize;
	/*0012*/ USHORT TypeOffset;
	/*0018*/ _MIDL_STUB_DESC const * StubDesc;
	/*0020*/
};

struct _MMPFN_IDENTITY {
	
	
	/*0000*/ <unnamed-type-u1> u1;
	/*0008*/ ULONGLONG PageFrameIndex;
	/*0010*/ <unnamed-type-u2> u2;
	/*0018*/
};

enum _MM_BROADCAST32_ENUM {
	_MM_BROADCAST32_NONE = 0x0,
	_MM_BROADCAST_1X16 = 0x1,
	_MM_BROADCAST_4X16 = 0x2
};

enum _MM_BROADCAST64_ENUM {
	_MM_BROADCAST64_NONE = 0x0,
	_MM_BROADCAST_1X8 = 0x1,
	_MM_BROADCAST_4X8 = 0x2
};

enum _MM_CMPINT_ENUM {
	_MM_CMPINT_EQ = 0x0,
	_MM_CMPINT_LT = 0x1,
	_MM_CMPINT_LE = 0x2,
	_MM_CMPINT_UNUSED = 0x3,
	_MM_CMPINT_NE = 0x4,
	_MM_CMPINT_NLT = 0x5,
	_MM_CMPINT_NLE = 0x6
};

union _MM_ETW_PAGE_EXTRA_INFO {
	
	
	/*0000*/ <unnamed-type-e1> e1;
	/*0000*/ <unnamed-type-e2> e2;
	/*0000*/ ULONGLONG ProtoPte;
	/*0000*/ void * VirtualAddress;
	/*0008*/
};

struct _MM_ETW_PAGE_INFO {
	/*0000*/ _MMPFN_IDENTITY PfnIdentity;
	/*0018*/
};

struct _MM_ETW_PAGE_INFO_EX {
	/*0000*/ _MM_ETW_PAGE_INFO PageInfo;
	/*0018*/ _MM_ETW_PAGE_EXTRA_INFO Info;
	/*0020*/
};

struct _MM_ETW_WORKING_SET_PFN_RUNDOWN {
	/*0000*/ ULONGLONG ProcessId;
	/*0008*/ ULONGLONG EntryCount;
	/*0010*/ _MM_ETW_PAGE_INFO_EX WorkingSetInfo[0x1];
	/*0030*/
};

enum _MM_ETW_WORKING_SET_TYPE {
	MmEtwWorkingSetTypeUser = 0x0,
	MmEtwWorkingSetTypeSession = 0x1,
	MmEtwWorkingSetTypeSystem = 0x2,
	MmEtwWorkingSetTypeMaximum = 0x3
};

enum _MM_EXP_ADJ_ENUM {
	_MM_EXPADJ_NONE = 0x0,
	_MM_EXPADJ_4 = 0x1,
	_MM_EXPADJ_5 = 0x2,
	_MM_EXPADJ_8 = 0x3,
	_MM_EXPADJ_16 = 0x4,
	_MM_EXPADJ_24 = 0x5,
	_MM_EXPADJ_31 = 0x6,
	_MM_EXPADJ_32 = 0x7
};

enum _MM_FIXUPRESULT_ENUM {
	_MM_FIXUP_NO_CHANGE = 0x0,
	_MM_FIXUP_NEG_INF = 0x1,
	_MM_FIXUP_NEG_ZERO = 0x2,
	_MM_FIXUP_POS_ZERO = 0x3,
	_MM_FIXUP_POS_INF = 0x4,
	_MM_FIXUP_NAN = 0x5,
	_MM_FIXUP_MAX_FLOAT = 0x6,
	_MM_FIXUP_MIN_FLOAT = 0x7
};

enum _MM_INDEX_SCALE_ENUM {
	_MM_SCALE_1 = 0x1,
	_MM_SCALE_2 = 0x2,
	_MM_SCALE_4 = 0x4,
	_MM_SCALE_8 = 0x8
};

enum _MM_MANTISSA_NORM_ENUM {
	_MM_MANT_NORM_1_2 = 0x0,
	_MM_MANT_NORM_p5_2 = 0x1,
	_MM_MANT_NORM_p5_1 = 0x2,
	_MM_MANT_NORM_p75_1p5 = 0x3
};

enum _MM_MANTISSA_SIGN_ENUM {
	_MM_MANT_SIGN_src = 0x0,
	_MM_MANT_SIGN_zero = 0x1,
	_MM_MANT_SIGN_nan = 0x2
};

enum _MM_PERM_ENUM {
	_MM_PERM_AAAA = 0x0,
	_MM_PERM_AAAB = 0x1,
	_MM_PERM_AAAC = 0x2,
	_MM_PERM_AAAD = 0x3,
	_MM_PERM_AABA = 0x4,
	_MM_PERM_AABB = 0x5,
	_MM_PERM_AABC = 0x6,
	_MM_PERM_AABD = 0x7,
	_MM_PERM_AACA = 0x8,
	_MM_PERM_AACB = 0x9,
	_MM_PERM_AACC = 0xa,
	_MM_PERM_AACD = 0xb,
	_MM_PERM_AADA = 0xc,
	_MM_PERM_AADB = 0xd,
	_MM_PERM_AADC = 0xe,
	_MM_PERM_AADD = 0xf,
	_MM_PERM_ABAA = 0x10,
	_MM_PERM_ABAB = 0x11,
	_MM_PERM_ABAC = 0x12,
	_MM_PERM_ABAD = 0x13,
	_MM_PERM_ABBA = 0x14,
	_MM_PERM_ABBB = 0x15,
	_MM_PERM_ABBC = 0x16,
	_MM_PERM_ABBD = 0x17,
	_MM_PERM_ABCA = 0x18,
	_MM_PERM_ABCB = 0x19,
	_MM_PERM_ABCC = 0x1a,
	_MM_PERM_ABCD = 0x1b,
	_MM_PERM_ABDA = 0x1c,
	_MM_PERM_ABDB = 0x1d,
	_MM_PERM_ABDC = 0x1e,
	_MM_PERM_ABDD = 0x1f,
	_MM_PERM_ACAA = 0x20,
	_MM_PERM_ACAB = 0x21,
	_MM_PERM_ACAC = 0x22,
	_MM_PERM_ACAD = 0x23,
	_MM_PERM_ACBA = 0x24,
	_MM_PERM_ACBB = 0x25,
	_MM_PERM_ACBC = 0x26,
	_MM_PERM_ACBD = 0x27,
	_MM_PERM_ACCA = 0x28,
	_MM_PERM_ACCB = 0x29,
	_MM_PERM_ACCC = 0x2a,
	_MM_PERM_ACCD = 0x2b,
	_MM_PERM_ACDA = 0x2c,
	_MM_PERM_ACDB = 0x2d,
	_MM_PERM_ACDC = 0x2e,
	_MM_PERM_ACDD = 0x2f,
	_MM_PERM_ADAA = 0x30,
	_MM_PERM_ADAB = 0x31,
	_MM_PERM_ADAC = 0x32,
	_MM_PERM_ADAD = 0x33,
	_MM_PERM_ADBA = 0x34,
	_MM_PERM_ADBB = 0x35,
	_MM_PERM_ADBC = 0x36,
	_MM_PERM_ADBD = 0x37,
	_MM_PERM_ADCA = 0x38,
	_MM_PERM_ADCB = 0x39,
	_MM_PERM_ADCC = 0x3a,
	_MM_PERM_ADCD = 0x3b,
	_MM_PERM_ADDA = 0x3c,
	_MM_PERM_ADDB = 0x3d,
	_MM_PERM_ADDC = 0x3e,
	_MM_PERM_ADDD = 0x3f,
	_MM_PERM_BAAA = 0x40,
	_MM_PERM_BAAB = 0x41,
	_MM_PERM_BAAC = 0x42,
	_MM_PERM_BAAD = 0x43,
	_MM_PERM_BABA = 0x44,
	_MM_PERM_BABB = 0x45,
	_MM_PERM_BABC = 0x46,
	_MM_PERM_BABD = 0x47,
	_MM_PERM_BACA = 0x48,
	_MM_PERM_BACB = 0x49,
	_MM_PERM_BACC = 0x4a,
	_MM_PERM_BACD = 0x4b,
	_MM_PERM_BADA = 0x4c,
	_MM_PERM_BADB = 0x4d,
	_MM_PERM_BADC = 0x4e,
	_MM_PERM_BADD = 0x4f,
	_MM_PERM_BBAA = 0x50,
	_MM_PERM_BBAB = 0x51,
	_MM_PERM_BBAC = 0x52,
	_MM_PERM_BBAD = 0x53,
	_MM_PERM_BBBA = 0x54,
	_MM_PERM_BBBB = 0x55,
	_MM_PERM_BBBC = 0x56,
	_MM_PERM_BBBD = 0x57,
	_MM_PERM_BBCA = 0x58,
	_MM_PERM_BBCB = 0x59,
	_MM_PERM_BBCC = 0x5a,
	_MM_PERM_BBCD = 0x5b,
	_MM_PERM_BBDA = 0x5c,
	_MM_PERM_BBDB = 0x5d,
	_MM_PERM_BBDC = 0x5e,
	_MM_PERM_BBDD = 0x5f,
	_MM_PERM_BCAA = 0x60,
	_MM_PERM_BCAB = 0x61,
	_MM_PERM_BCAC = 0x62,
	_MM_PERM_BCAD = 0x63,
	_MM_PERM_BCBA = 0x64,
	_MM_PERM_BCBB = 0x65,
	_MM_PERM_BCBC = 0x66,
	_MM_PERM_BCBD = 0x67,
	_MM_PERM_BCCA = 0x68,
	_MM_PERM_BCCB = 0x69,
	_MM_PERM_BCCC = 0x6a,
	_MM_PERM_BCCD = 0x6b,
	_MM_PERM_BCDA = 0x6c,
	_MM_PERM_BCDB = 0x6d,
	_MM_PERM_BCDC = 0x6e,
	_MM_PERM_BCDD = 0x6f,
	_MM_PERM_BDAA = 0x70,
	_MM_PERM_BDAB = 0x71,
	_MM_PERM_BDAC = 0x72,
	_MM_PERM_BDAD = 0x73,
	_MM_PERM_BDBA = 0x74,
	_MM_PERM_BDBB = 0x75,
	_MM_PERM_BDBC = 0x76,
	_MM_PERM_BDBD = 0x77,
	_MM_PERM_BDCA = 0x78,
	_MM_PERM_BDCB = 0x79,
	_MM_PERM_BDCC = 0x7a,
	_MM_PERM_BDCD = 0x7b,
	_MM_PERM_BDDA = 0x7c,
	_MM_PERM_BDDB = 0x7d,
	_MM_PERM_BDDC = 0x7e,
	_MM_PERM_BDDD = 0x7f,
	_MM_PERM_CAAA = 0x80,
	_MM_PERM_CAAB = 0x81,
	_MM_PERM_CAAC = 0x82,
	_MM_PERM_CAAD = 0x83,
	_MM_PERM_CABA = 0x84,
	_MM_PERM_CABB = 0x85,
	_MM_PERM_CABC = 0x86,
	_MM_PERM_CABD = 0x87,
	_MM_PERM_CACA = 0x88,
	_MM_PERM_CACB = 0x89,
	_MM_PERM_CACC = 0x8a,
	_MM_PERM_CACD = 0x8b,
	_MM_PERM_CADA = 0x8c,
	_MM_PERM_CADB = 0x8d,
	_MM_PERM_CADC = 0x8e,
	_MM_PERM_CADD = 0x8f,
	_MM_PERM_CBAA = 0x90,
	_MM_PERM_CBAB = 0x91,
	_MM_PERM_CBAC = 0x92,
	_MM_PERM_CBAD = 0x93,
	_MM_PERM_CBBA = 0x94,
	_MM_PERM_CBBB = 0x95,
	_MM_PERM_CBBC = 0x96,
	_MM_PERM_CBBD = 0x97,
	_MM_PERM_CBCA = 0x98,
	_MM_PERM_CBCB = 0x99,
	_MM_PERM_CBCC = 0x9a,
	_MM_PERM_CBCD = 0x9b,
	_MM_PERM_CBDA = 0x9c,
	_MM_PERM_CBDB = 0x9d,
	_MM_PERM_CBDC = 0x9e,
	_MM_PERM_CBDD = 0x9f,
	_MM_PERM_CCAA = 0xa0,
	_MM_PERM_CCAB = 0xa1,
	_MM_PERM_CCAC = 0xa2,
	_MM_PERM_CCAD = 0xa3,
	_MM_PERM_CCBA = 0xa4,
	_MM_PERM_CCBB = 0xa5,
	_MM_PERM_CCBC = 0xa6,
	_MM_PERM_CCBD = 0xa7,
	_MM_PERM_CCCA = 0xa8,
	_MM_PERM_CCCB = 0xa9,
	_MM_PERM_CCCC = 0xaa,
	_MM_PERM_CCCD = 0xab,
	_MM_PERM_CCDA = 0xac,
	_MM_PERM_CCDB = 0xad,
	_MM_PERM_CCDC = 0xae,
	_MM_PERM_CCDD = 0xaf,
	_MM_PERM_CDAA = 0xb0,
	_MM_PERM_CDAB = 0xb1,
	_MM_PERM_CDAC = 0xb2,
	_MM_PERM_CDAD = 0xb3,
	_MM_PERM_CDBA = 0xb4,
	_MM_PERM_CDBB = 0xb5,
	_MM_PERM_CDBC = 0xb6,
	_MM_PERM_CDBD = 0xb7,
	_MM_PERM_CDCA = 0xb8,
	_MM_PERM_CDCB = 0xb9,
	_MM_PERM_CDCC = 0xba,
	_MM_PERM_CDCD = 0xbb,
	_MM_PERM_CDDA = 0xbc,
	_MM_PERM_CDDB = 0xbd,
	_MM_PERM_CDDC = 0xbe,
	_MM_PERM_CDDD = 0xbf,
	_MM_PERM_DAAA = 0xc0,
	_MM_PERM_DAAB = 0xc1,
	_MM_PERM_DAAC = 0xc2,
	_MM_PERM_DAAD = 0xc3,
	_MM_PERM_DABA = 0xc4,
	_MM_PERM_DABB = 0xc5,
	_MM_PERM_DABC = 0xc6,
	_MM_PERM_DABD = 0xc7,
	_MM_PERM_DACA = 0xc8,
	_MM_PERM_DACB = 0xc9,
	_MM_PERM_DACC = 0xca,
	_MM_PERM_DACD = 0xcb,
	_MM_PERM_DADA = 0xcc,
	_MM_PERM_DADB = 0xcd,
	_MM_PERM_DADC = 0xce,
	_MM_PERM_DADD = 0xcf,
	_MM_PERM_DBAA = 0xd0,
	_MM_PERM_DBAB = 0xd1,
	_MM_PERM_DBAC = 0xd2,
	_MM_PERM_DBAD = 0xd3,
	_MM_PERM_DBBA = 0xd4,
	_MM_PERM_DBBB = 0xd5,
	_MM_PERM_DBBC = 0xd6,
	_MM_PERM_DBBD = 0xd7,
	_MM_PERM_DBCA = 0xd8,
	_MM_PERM_DBCB = 0xd9,
	_MM_PERM_DBCC = 0xda,
	_MM_PERM_DBCD = 0xdb,
	_MM_PERM_DBDA = 0xdc,
	_MM_PERM_DBDB = 0xdd,
	_MM_PERM_DBDC = 0xde,
	_MM_PERM_DBDD = 0xdf,
	_MM_PERM_DCAA = 0xe0,
	_MM_PERM_DCAB = 0xe1,
	_MM_PERM_DCAC = 0xe2,
	_MM_PERM_DCAD = 0xe3,
	_MM_PERM_DCBA = 0xe4,
	_MM_PERM_DCBB = 0xe5,
	_MM_PERM_DCBC = 0xe6,
	_MM_PERM_DCBD = 0xe7,
	_MM_PERM_DCCA = 0xe8,
	_MM_PERM_DCCB = 0xe9,
	_MM_PERM_DCCC = 0xea,
	_MM_PERM_DCCD = 0xeb,
	_MM_PERM_DCDA = 0xec,
	_MM_PERM_DCDB = 0xed,
	_MM_PERM_DCDC = 0xee,
	_MM_PERM_DCDD = 0xef,
	_MM_PERM_DDAA = 0xf0,
	_MM_PERM_DDAB = 0xf1,
	_MM_PERM_DDAC = 0xf2,
	_MM_PERM_DDAD = 0xf3,
	_MM_PERM_DDBA = 0xf4,
	_MM_PERM_DDBB = 0xf5,
	_MM_PERM_DDBC = 0xf6,
	_MM_PERM_DDBD = 0xf7,
	_MM_PERM_DDCA = 0xf8,
	_MM_PERM_DDCB = 0xf9,
	_MM_PERM_DDCC = 0xfa,
	_MM_PERM_DDCD = 0xfb,
	_MM_PERM_DDDA = 0xfc,
	_MM_PERM_DDDB = 0xfd,
	_MM_PERM_DDDC = 0xfe,
	_MM_PERM_DDDD = 0xff
};

enum _MM_ROUND_MODE_ENUM {
	_MM_ROUND_MODE_NEAREST = 0x0,
	_MM_ROUND_MODE_DOWN = 0x1,
	_MM_ROUND_MODE_UP = 0x2,
	_MM_ROUND_MODE_TOWARD_ZERO = 0x3,
	_MM_ROUND_MODE_DEFAULT = 0x4,
	_MM_ROUND_MODE_NO_EXC = 0x8
};

struct _MODEMDEVCAPS {
	/*0000*/ ULONG dwActualSize;
	/*0004*/ ULONG dwRequiredSize;
	/*0008*/ ULONG dwDevSpecificOffset;
	/*000c*/ ULONG dwDevSpecificSize;
	/*0010*/ ULONG dwModemProviderVersion;
	/*0014*/ ULONG dwModemManufacturerOffset;
	/*0018*/ ULONG dwModemManufacturerSize;
	/*001c*/ ULONG dwModemModelOffset;
	/*0020*/ ULONG dwModemModelSize;
	/*0024*/ ULONG dwModemVersionOffset;
	/*0028*/ ULONG dwModemVersionSize;
	/*002c*/ ULONG dwDialOptions;
	/*0030*/ ULONG dwCallSetupFailTimer;
	/*0034*/ ULONG dwInactivityTimeout;
	/*0038*/ ULONG dwSpeakerVolume;
	/*003c*/ ULONG dwSpeakerMode;
	/*0040*/ ULONG dwModemOptions;
	/*0044*/ ULONG dwMaxDTERate;
	/*0048*/ ULONG dwMaxDCERate;
	/*004c*/ UCHAR abVariablePortion[0x1];
	/*0050*/
};

struct _MODEMSETTINGS {
	/*0000*/ ULONG dwActualSize;
	/*0004*/ ULONG dwRequiredSize;
	/*0008*/ ULONG dwDevSpecificOffset;
	/*000c*/ ULONG dwDevSpecificSize;
	/*0010*/ ULONG dwCallSetupFailTimer;
	/*0014*/ ULONG dwInactivityTimeout;
	/*0018*/ ULONG dwSpeakerVolume;
	/*001c*/ ULONG dwSpeakerMode;
	/*0020*/ ULONG dwPreferredModemOptions;
	/*0024*/ ULONG dwNegotiatedModemOptions;
	/*0028*/ ULONG dwNegotiatedDCERate;
	/*002c*/ UCHAR abVariablePortion[0x1];
	/*0030*/
};

struct _MOF_FIELD {
	/*0000*/ ULONGLONG DataPtr;
	/*0008*/ ULONG Length;
	/*000c*/ ULONG DataType;
	/*0010*/
};

enum _MONITOR_DISPLAY_STATE {
	PowerMonitorOff = 0x0,
	PowerMonitorOn = 0x1,
	PowerMonitorDim = 0x2
};

struct _MOUSE_EVENT_RECORD {
	/*0000*/ _COORD dwMousePosition;
	/*0004*/ ULONG dwButtonState;
	/*0008*/ ULONG dwControlKeyState;
	/*000c*/ ULONG dwEventFlags;
	/*0010*/
};

struct _MOVE_FILE_DATA32 {
	/*0000*/ UINT FileHandle;
	/*0008*/ _LARGE_INTEGER StartingVcn;
	/*0010*/ _LARGE_INTEGER StartingLcn;
	/*0018*/ ULONG ClusterCount;
	/*0020*/
};

enum _MSMSEC_UI_RESPONSE_TYPE {
	msmsec_ui_response_key = 0x0,
	msmsec_ui_response_passphrase = 0x1,
	msmsec_ui_response_psk = 0x2,
	msmsec_ui_response_onex = 0x3,
	msmsec_ui_response_any = 0x4,
	msmsec_ui_response_invalid = 0x5
};

enum _MS_VENDOR_EXT_OOB_BLOB_TYPE {
	WfdMsVendorExtensionOobTypeUnknown = 0x0,
	WfdLegacyWcnOobProvisioning = 0xff,
	WfdMsVendorExtensionOobTypeMax = 0xff
};

struct _MUICCENTRY {
	/*0000*/ UINT lCultureNameOffset;
	/*0004*/ UINT ulCultureID;
	/*0008*/ ULONG ulLanguageType;
	/*0010*/ _MUICCENTRY * pNeutralCulture;
	/*0018*/ _MUICCENTRY * lBaseLanguageIndices[0x4];
	/*0038*/ INT lParentLanguageIndices[0x4];
	/*0048*/
};

struct _MUICCHEADER {
	/*0000*/ UINT ulMaxStringsSize;
	/*0004*/ UINT ulSizeStrings;
	/*0008*/ UINT ulMaxNumInstalledCultures;
	/*000c*/ UINT ulNumInstalledCultures;
	/*0010*/ UINT ulMaxNumUnverifiedCultures;
	/*0014*/ UINT ulNumUnverifiedCultures;
	/*0018*/
};

struct _MUILANGCFGLIST {
	/*0000*/ UINT TotalSize;
	/*0004*/ USHORT NumLanguages;
	/*0006*/ USHORT MaxNumLanguages;
	/*0008*/ _MUILANGCFGNODE * LanguageConfigs;
	/*0010*/
};

struct _MUILANGCFGNODE {
	/*0000*/ SHORT LangSpec;
	/*0002*/ USHORT FallbackTypes;
	/*0004*/ USHORT Reserved;
	/*0006*/ SHORT FallbackSpecs[0x3];
	/*000c*/
};

struct _MUILANGINFO {
	/*0000*/ USHORT Flags;
	/*0002*/ USHORT Reserved;
	/*0004*/ USHORT LangId;
	/*0006*/ SHORT LangNameIndex;
	/*0008*/ USHORT FallbackTypes;
	/*000a*/ SHORT NeutralLangSpec;
	/*000c*/ SHORT FallbackSpecs[0x4];
	/*0014*/ SHORT AlternateCodePage[0x4];
	/*001c*/
};

struct _MUILANGLIST {
	/*0000*/ UINT TotalSize;
	/*0004*/ USHORT NumLanguages;
	/*0006*/ USHORT MaxNumLanguages;
	/*0008*/ UCHAR bUseUseMachineConfigList;
	/*0010*/ _MUIREGISTRYINFO * RegInfo;
	/*0018*/ _MUILANGLISTNODE * Languages;
	/*0020*/ ULONGLONG ullMask;
	/*0028*/ UINT uConsoleFlag;
	/*002c*/ WCHAR Checksum[0xa];
	/*0040*/
};

struct _MUILANGLISTNODE {
	/*0000*/ USHORT LanguageType;
	/*0002*/ USHORT Reserved;
	/*0004*/ SHORT LanguageSpec;
	/*0006*/
};

struct _MUILANGUAGES {
	/*0000*/ UINT TotalSize;
	/*0004*/ USHORT MaxNumLanguages;
	/*0006*/ USHORT NumLanguages;
	/*0008*/ USHORT NumInstalledLanguages;
	/*0010*/ _MUILANGINFO * LangInfos;
	/*0018*/
};

struct _MUIREGISTRYINFO {
	/*0000*/ UINT Owned;
	/*0004*/ USHORT InstallLanguageFallback[0x4];
	/*000c*/ ULONG Generation;
	/*0010*/ ULONG ProcessGeneration;
	/*0018*/ _MUILANGUAGES * Installed;
	/*0020*/ _MUISTRINGPOOL * Strings;
	/*0028*/ _MUILANGCFGLIST * MachineConfig;
	/*0030*/ _MUILANGCFGLIST * UserConfig;
	/*0038*/ _MUILANGLIST * MachinePreferred;
	/*0040*/ _MUILANGLIST * UserPreferred;
	/*0048*/ _MUILANGLIST * ProcessPreferred;
	/*0050*/ _MUILANGLIST * MergedUser;
	/*0058*/ _MUILANGLIST * MergedMachine;
	/*0060*/ _MUILANGLIST * MergedFallback;
	/*0068*/ _MUIREGISTRYINFO * PrevRegInfo;
	/*0070*/ ULONG MUI_Locked;
	/*0074*/ ULONG MUI_SE;
	/*0078*/ ULONG MUI_NumberAllowed;
	/*0080*/ WCHAR * MUI_AllowedLanguage;
	/*0088*/ WCHAR * MUI_InstalledSKU;
	/*0090*/ ULONG cbInstalledSKU;
	/*0094*/ ULONG cbAllowedLanguage;
	/*0098*/ WCHAR * MUI_DisallowedLanguage;
	/*00a0*/ ULONG cbDisallowedLanguage;
	/*00a8*/
};

struct _MUISTRINGPOOL {
	/*0000*/ UINT TotalSize;
	/*0004*/ USHORT MaxNumStrings;
	/*0006*/ USHORT NumStrings;
	/*0008*/ USHORT MaxNumCharsInPool;
	/*000a*/ USHORT NumCharsInPool;
	/*0010*/ SHORT * Strings;
	/*0018*/ WCHAR * Pool;
	/*0020*/
};

struct _MULTI_TIME {
	/*0000*/ _LARGE_INTEGER Qpc;
	/*0008*/ _LARGE_INTEGER HostQpc;
	/*0010*/ LONGLONG SystemTime;
	/*0018*/
};

struct _MUTANT_BASIC_INFORMATION {
	/*0000*/ LONG CurrentCount;
	/*0004*/ UCHAR OwnedByCaller;
	/*0005*/ UCHAR AbandonedState;
	/*0008*/
};

enum _MUTANT_INFORMATION_CLASS {
	MutantBasicInformation = 0x0,
	MutantOwnerInformation = 0x1
};

struct _MUTANT_OWNER_INFORMATION {
	/*0000*/ _CLIENT_ID ClientId;
	/*0010*/
};

struct _Mbstatet {
	/*0000*/ ULONG _Wchar;
	/*0004*/ USHORT _Byte;
	/*0006*/ USHORT _State;
	/*0008*/
};

struct _NDIS_802_11_AI_REQFI {
	/*0000*/ USHORT Capabilities;
	/*0002*/ USHORT ListenInterval;
	/*0004*/ UCHAR CurrentAPAddress[0x6];
	/*000a*/
};

struct _NDIS_802_11_AI_RESFI {
	/*0000*/ USHORT Capabilities;
	/*0002*/ USHORT StatusCode;
	/*0004*/ USHORT AssociationId;
	/*0006*/
};

struct _NDIS_802_11_ASSOCIATION_INFORMATION {
	/*0000*/ ULONG Length;
	/*0004*/ USHORT AvailableRequestFixedIEs;
	/*0006*/ _NDIS_802_11_AI_REQFI RequestFixedIEs;
	/*0010*/ ULONG RequestIELength;
	/*0014*/ ULONG OffsetRequestIEs;
	/*0018*/ USHORT AvailableResponseFixedIEs;
	/*001a*/ _NDIS_802_11_AI_RESFI ResponseFixedIEs;
	/*0020*/ ULONG ResponseIELength;
	/*0024*/ ULONG OffsetResponseIEs;
	/*0028*/
};

struct _NDIS_802_11_AUTHENTICATION_ENCRYPTION {
	/*0000*/ _NDIS_802_11_AUTHENTICATION_MODE AuthModeSupported;
	/*0004*/ _NDIS_802_11_WEP_STATUS EncryptStatusSupported;
	/*0008*/
};

struct _NDIS_802_11_AUTHENTICATION_EVENT {
	/*0000*/ _NDIS_802_11_STATUS_INDICATION Status;
	/*0004*/ _NDIS_802_11_AUTHENTICATION_REQUEST Request[0x1];
	/*0014*/
};

enum _NDIS_802_11_AUTHENTICATION_MODE {
	Ndis802_11AuthModeOpen = 0x0,
	Ndis802_11AuthModeShared = 0x1,
	Ndis802_11AuthModeAutoSwitch = 0x2,
	Ndis802_11AuthModeWPA = 0x3,
	Ndis802_11AuthModeWPAPSK = 0x4,
	Ndis802_11AuthModeWPANone = 0x5,
	Ndis802_11AuthModeWPA2 = 0x6,
	Ndis802_11AuthModeWPA2PSK = 0x7,
	Ndis802_11AuthModeWPA3 = 0x8,
	Ndis802_11AuthModeWPA3SAE = 0x9,
	Ndis802_11AuthModeMax = 0xa
};

struct _NDIS_802_11_AUTHENTICATION_REQUEST {
	/*0000*/ ULONG Length;
	/*0004*/ UCHAR Bssid[0x6];
	/*000c*/ ULONG Flags;
	/*0010*/
};

struct _NDIS_802_11_BSSID_LIST {
	/*0000*/ ULONG NumberOfItems;
	/*0004*/ _NDIS_WLAN_BSSID Bssid[0x1];
	/*006c*/
};

struct _NDIS_802_11_BSSID_LIST_EX {
	/*0000*/ ULONG NumberOfItems;
	/*0004*/ _NDIS_WLAN_BSSID_EX Bssid[0x1];
	/*007c*/
};

struct _NDIS_802_11_CAPABILITY {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Version;
	/*0008*/ ULONG NoOfPMKIDs;
	/*000c*/ ULONG NoOfAuthEncryptPairsSupported;
	/*0010*/ _NDIS_802_11_AUTHENTICATION_ENCRYPTION AuthenticationEncryptionSupported[0x1];
	/*0018*/
};

struct _NDIS_802_11_CONFIGURATION {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG BeaconPeriod;
	/*0008*/ ULONG ATIMWindow;
	/*000c*/ ULONG DSConfig;
	/*0010*/ _NDIS_802_11_CONFIGURATION_FH FHConfig;
	/*0020*/
};

struct _NDIS_802_11_CONFIGURATION_FH {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG HopPattern;
	/*0008*/ ULONG HopSet;
	/*000c*/ ULONG DwellTime;
	/*0010*/
};

struct _NDIS_802_11_FIXED_IEs {
	/*0000*/ UCHAR Timestamp[0x8];
	/*0008*/ USHORT BeaconInterval;
	/*000a*/ USHORT Capabilities;
	/*000c*/
};

struct _NDIS_802_11_KEY {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG KeyIndex;
	/*0008*/ ULONG KeyLength;
	/*000c*/ UCHAR BSSID[0x6];
	/*0018*/ ULONGLONG KeyRSC;
	/*0020*/ UCHAR KeyMaterial[0x1];
	/*0028*/
};

enum _NDIS_802_11_MEDIA_STREAM_MODE {
	Ndis802_11MediaStreamOff = 0x0,
	Ndis802_11MediaStreamOn = 0x1
};

enum _NDIS_802_11_NETWORK_INFRASTRUCTURE {
	Ndis802_11IBSS = 0x0,
	Ndis802_11Infrastructure = 0x1,
	Ndis802_11AutoUnknown = 0x2,
	Ndis802_11InfrastructureMax = 0x3
};

enum _NDIS_802_11_NETWORK_TYPE {
	Ndis802_11FH = 0x0,
	Ndis802_11DS = 0x1,
	Ndis802_11OFDM5 = 0x2,
	Ndis802_11OFDM24 = 0x3,
	Ndis802_11Automode = 0x4,
	Ndis802_11NetworkTypeMax = 0x5
};

struct _NDIS_802_11_NETWORK_TYPE_LIST {
	/*0000*/ ULONG NumberOfItems;
	/*0004*/ _NDIS_802_11_NETWORK_TYPE NetworkType[0x1];
	/*0008*/
};

struct _NDIS_802_11_NON_BCAST_SSID_LIST {
	/*0000*/ ULONG NumberOfItems;
	/*0004*/ _NDIS_802_11_SSID Non_Bcast_Ssid[0x1];
	/*0028*/
};

struct _NDIS_802_11_PMKID {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG BSSIDInfoCount;
	/*0008*/ _BSSID_INFO BSSIDInfo[0x1];
	/*0020*/
};

struct _NDIS_802_11_PMKID_CANDIDATE_LIST {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG NumCandidates;
	/*0008*/ _PMKID_CANDIDATE CandidateList[0x1];
	/*0014*/
};

enum _NDIS_802_11_POWER_MODE {
	Ndis802_11PowerModeCAM = 0x0,
	Ndis802_11PowerModeMAX_PSP = 0x1,
	Ndis802_11PowerModeFast_PSP = 0x2,
	Ndis802_11PowerModeMax = 0x3
};

enum _NDIS_802_11_PRIVACY_FILTER {
	Ndis802_11PrivFilterAcceptAll = 0x0,
	Ndis802_11PrivFilter8021xWEP = 0x1
};

enum _NDIS_802_11_RADIO_STATUS {
	Ndis802_11RadioStatusOn = 0x0,
	Ndis802_11RadioStatusHardwareOff = 0x1,
	Ndis802_11RadioStatusSoftwareOff = 0x2,
	Ndis802_11RadioStatusHardwareSoftwareOff = 0x3,
	Ndis802_11RadioStatusMax = 0x4
};

enum _NDIS_802_11_RELOAD_DEFAULTS {
	Ndis802_11ReloadWEPKeys = 0x0
};

struct _NDIS_802_11_REMOVE_KEY {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG KeyIndex;
	/*0008*/ UCHAR BSSID[0x6];
	/*0010*/
};

struct _NDIS_802_11_SSID {
	/*0000*/ ULONG SsidLength;
	/*0004*/ UCHAR Ssid[0x20];
	/*0024*/
};

struct _NDIS_802_11_STATISTICS {
	/*0000*/ ULONG Length;
	/*0008*/ _LARGE_INTEGER TransmittedFragmentCount;
	/*0010*/ _LARGE_INTEGER MulticastTransmittedFrameCount;
	/*0018*/ _LARGE_INTEGER FailedCount;
	/*0020*/ _LARGE_INTEGER RetryCount;
	/*0028*/ _LARGE_INTEGER MultipleRetryCount;
	/*0030*/ _LARGE_INTEGER RTSSuccessCount;
	/*0038*/ _LARGE_INTEGER RTSFailureCount;
	/*0040*/ _LARGE_INTEGER ACKFailureCount;
	/*0048*/ _LARGE_INTEGER FrameDuplicateCount;
	/*0050*/ _LARGE_INTEGER ReceivedFragmentCount;
	/*0058*/ _LARGE_INTEGER MulticastReceivedFrameCount;
	/*0060*/ _LARGE_INTEGER FCSErrorCount;
	/*0068*/ _LARGE_INTEGER TKIPLocalMICFailures;
	/*0070*/ _LARGE_INTEGER TKIPICVErrorCount;
	/*0078*/ _LARGE_INTEGER TKIPCounterMeasuresInvoked;
	/*0080*/ _LARGE_INTEGER TKIPReplays;
	/*0088*/ _LARGE_INTEGER CCMPFormatErrors;
	/*0090*/ _LARGE_INTEGER CCMPReplays;
	/*0098*/ _LARGE_INTEGER CCMPDecryptErrors;
	/*00a0*/ _LARGE_INTEGER FourWayHandshakeFailures;
	/*00a8*/ _LARGE_INTEGER WEPUndecryptableCount;
	/*00b0*/ _LARGE_INTEGER WEPICVErrorCount;
	/*00b8*/ _LARGE_INTEGER DecryptSuccessCount;
	/*00c0*/ _LARGE_INTEGER DecryptFailureCount;
	/*00c8*/
};

struct _NDIS_802_11_STATUS_INDICATION {
	/*0000*/ _NDIS_802_11_STATUS_TYPE StatusType;
	/*0004*/
};

enum _NDIS_802_11_STATUS_TYPE {
	Ndis802_11StatusType_Authentication = 0x0,
	Ndis802_11StatusType_MediaStreamMode = 0x1,
	Ndis802_11StatusType_PMKID_CandidateList = 0x2,
	Ndis802_11StatusTypeMax = 0x3
};

struct _NDIS_802_11_TEST {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG Type;
	/*0008*/ _NDIS_802_11_AUTHENTICATION_EVENT AuthenticationEvent;
	/*0008*/ LONG RssiTrigger;
	/*001c*/
};

struct _NDIS_802_11_VARIABLE_IEs {
	/*0000*/ UCHAR ElementID;
	/*0001*/ UCHAR Length;
	/*0002*/ UCHAR data[0x1];
	/*0003*/
};

struct _NDIS_802_11_WEP {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG KeyIndex;
	/*0008*/ ULONG KeyLength;
	/*000c*/ UCHAR KeyMaterial[0x1];
	/*0010*/
};

enum _NDIS_802_11_WEP_STATUS {
	Ndis802_11WEPEnabled = 0x0,
	Ndis802_11Encryption1Enabled = 0x0,
	Ndis802_11WEPDisabled = 0x1,
	Ndis802_11EncryptionDisabled = 0x1,
	Ndis802_11WEPKeyAbsent = 0x2,
	Ndis802_11Encryption1KeyAbsent = 0x2,
	Ndis802_11WEPNotSupported = 0x3,
	Ndis802_11EncryptionNotSupported = 0x3,
	Ndis802_11Encryption2Enabled = 0x4,
	Ndis802_11Encryption2KeyAbsent = 0x5,
	Ndis802_11Encryption3Enabled = 0x6,
	Ndis802_11Encryption3KeyAbsent = 0x7
};

enum _NDIS_802_5_RING_STATE {
	NdisRingStateOpened = 0x1,
	NdisRingStateClosed = 0x2,
	NdisRingStateOpening = 0x3,
	NdisRingStateClosing = 0x4,
	NdisRingStateOpenFailure = 0x5,
	NdisRingStateRingFailure = 0x6
};

struct _NDIS_CO_LINK_SPEED {
	/*0000*/ ULONG Outbound;
	/*0004*/ ULONG Inbound;
	/*0008*/
};

enum _NDIS_DEVICE_POWER_STATE {
	NdisDeviceStateUnspecified = 0x0,
	NdisDeviceStateD0 = 0x1,
	NdisDeviceStateD1 = 0x2,
	NdisDeviceStateD2 = 0x3,
	NdisDeviceStateD3 = 0x4,
	NdisDeviceStateMaximum = 0x5
};

enum _NDIS_FDDI_ATTACHMENT_TYPE {
	NdisFddiTypeIsolated = 0x1,
	NdisFddiTypeLocalA = 0x2,
	NdisFddiTypeLocalB = 0x3,
	NdisFddiTypeLocalAB = 0x4,
	NdisFddiTypeLocalS = 0x5,
	NdisFddiTypeWrapA = 0x6,
	NdisFddiTypeWrapB = 0x7,
	NdisFddiTypeWrapAB = 0x8,
	NdisFddiTypeWrapS = 0x9,
	NdisFddiTypeCWrapA = 0xa,
	NdisFddiTypeCWrapB = 0xb,
	NdisFddiTypeCWrapS = 0xc,
	NdisFddiTypeThrough = 0xd
};

enum _NDIS_FDDI_LCONNECTION_STATE {
	NdisFddiStateOff = 0x1,
	NdisFddiStateBreak = 0x2,
	NdisFddiStateTrace = 0x3,
	NdisFddiStateConnect = 0x4,
	NdisFddiStateNext = 0x5,
	NdisFddiStateSignal = 0x6,
	NdisFddiStateJoin = 0x7,
	NdisFddiStateVerify = 0x8,
	NdisFddiStateActive = 0x9,
	NdisFddiStateMaintenance = 0xa
};

enum _NDIS_FDDI_RING_MGT_STATE {
	NdisFddiRingIsolated = 0x1,
	NdisFddiRingNonOperational = 0x2,
	NdisFddiRingOperational = 0x3,
	NdisFddiRingDetect = 0x4,
	NdisFddiRingNonOperationalDup = 0x5,
	NdisFddiRingOperationalDup = 0x6,
	NdisFddiRingDirected = 0x7,
	NdisFddiRingTrace = 0x8
};

struct _NDIS_GUID {
	/*0000*/ _GUID Guid;
	/*0010*/ ULONG Oid;
	/*0010*/ INT Status;
	/*0014*/ ULONG Size;
	/*0018*/ ULONG Flags;
	/*001c*/
};

struct _NDIS_HARDWARE_CROSSTIMESTAMP {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG SystemTimestamp1;
	/*0010*/ ULONGLONG HardwareClockTimestamp;
	/*0018*/ ULONGLONG SystemTimestamp2;
	/*0020*/
};

enum _NDIS_HARDWARE_STATUS {
	NdisHardwareStatusReady = 0x0,
	NdisHardwareStatusInitializing = 0x1,
	NdisHardwareStatusReset = 0x2,
	NdisHardwareStatusClosing = 0x3,
	NdisHardwareStatusNotReady = 0x4
};

struct _NDIS_INTERFACE_INFORMATION {
	/*0000*/ _NET_IF_OPER_STATUS ifOperStatus;
	/*0004*/ ULONG ifOperStatusFlags;
	/*0008*/ _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
	/*000c*/ _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
	/*0010*/ ULONG ifMtu;
	/*0014*/ UCHAR ifPromiscuousMode;
	/*0015*/ UCHAR ifDeviceWakeUpEnable;
	/*0018*/ ULONGLONG XmitLinkSpeed;
	/*0020*/ ULONGLONG RcvLinkSpeed;
	/*0028*/ ULONGLONG ifLastChange;
	/*0030*/ ULONGLONG ifCounterDiscontinuityTime;
	/*0038*/ ULONGLONG ifInUnknownProtos;
	/*0040*/ ULONGLONG ifInDiscards;
	/*0048*/ ULONGLONG ifInErrors;
	/*0050*/ ULONGLONG ifHCInOctets;
	/*0058*/ ULONGLONG ifHCInUcastPkts;
	/*0060*/ ULONGLONG ifHCInMulticastPkts;
	/*0068*/ ULONGLONG ifHCInBroadcastPkts;
	/*0070*/ ULONGLONG ifHCOutOctets;
	/*0078*/ ULONGLONG ifHCOutUcastPkts;
	/*0080*/ ULONGLONG ifHCOutMulticastPkts;
	/*0088*/ ULONGLONG ifHCOutBroadcastPkts;
	/*0090*/ ULONGLONG ifOutErrors;
	/*0098*/ ULONGLONG ifOutDiscards;
	/*00a0*/ ULONGLONG ifHCInUcastOctets;
	/*00a8*/ ULONGLONG ifHCInMulticastOctets;
	/*00b0*/ ULONGLONG ifHCInBroadcastOctets;
	/*00b8*/ ULONGLONG ifHCOutUcastOctets;
	/*00c0*/ ULONGLONG ifHCOutMulticastOctets;
	/*00c8*/ ULONGLONG ifHCOutBroadcastOctets;
	/*00d0*/ UINT CompartmentId;
	/*00d4*/ ULONG SupportedStatistics;
	/*00d8*/
};

enum _NDIS_INTERRUPT_MODERATION {
	NdisInterruptModerationUnknown = 0x0,
	NdisInterruptModerationNotSupported = 0x1,
	NdisInterruptModerationEnabled = 0x2,
	NdisInterruptModerationDisabled = 0x3
};

struct _NDIS_INTERRUPT_MODERATION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG Flags;
	/*0008*/ _NDIS_INTERRUPT_MODERATION InterruptModeration;
	/*000c*/
};

struct _NDIS_IPSEC_OFFLOAD_V1 {
	
	
	
	/*0000*/ <unnamed-type-Supported> Supported;
	/*0014*/ <unnamed-type-IPv4AH> IPv4AH;
	/*0018*/ <unnamed-type-IPv4ESP> IPv4ESP;
	/*001c*/
};

struct _NDIS_IP_OPER_STATE {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG Flags;
	/*0008*/ _NDIS_IP_OPER_STATUS IpOperationalStatus;
	/*0014*/
};

struct _NDIS_IP_OPER_STATUS {
	/*0000*/ ULONG AddressFamily;
	/*0004*/ _NET_IF_OPER_STATUS OperationalStatus;
	/*0008*/ ULONG OperationalStatusFlags;
	/*000c*/
};

struct _NDIS_IP_OPER_STATUS_INFO {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG NumberofAddressFamiliesReturned;
	/*000c*/ _NDIS_IP_OPER_STATUS IpOperationalStatus[0x20];
	/*018c*/
};

struct _NDIS_IRDA_PACKET_INFO {
	/*0000*/ ULONG ExtraBOFs;
	/*0004*/ ULONG MinTurnAroundTime;
	/*0008*/
};

struct _NDIS_LINK_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
	/*0008*/ ULONGLONG XmitLinkSpeed;
	/*0010*/ ULONGLONG RcvLinkSpeed;
	/*0018*/ _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
	/*001c*/ ULONG AutoNegotiationFlags;
	/*0020*/
};

struct _NDIS_LINK_SPEED {
	/*0000*/ ULONGLONG XmitLinkSpeed;
	/*0008*/ ULONGLONG RcvLinkSpeed;
	/*0010*/
};

struct _NDIS_LINK_STATE {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
	/*0008*/ _NET_IF_MEDIA_DUPLEX_STATE MediaDuplexState;
	/*0010*/ ULONGLONG XmitLinkSpeed;
	/*0018*/ ULONGLONG RcvLinkSpeed;
	/*0020*/ _NDIS_SUPPORTED_PAUSE_FUNCTIONS PauseFunctions;
	/*0024*/ ULONG AutoNegotiationFlags;
	/*0028*/
};

enum _NDIS_MEDIA_STATE {
	NdisMediaStateConnected = 0x0,
	NdisMediaStateDisconnected = 0x1
};

enum _NDIS_MEDIUM {
	NdisMedium802_3 = 0x0,
	NdisMedium802_5 = 0x1,
	NdisMediumFddi = 0x2,
	NdisMediumWan = 0x3,
	NdisMediumLocalTalk = 0x4,
	NdisMediumDix = 0x5,
	NdisMediumArcnetRaw = 0x6,
	NdisMediumArcnet878_2 = 0x7,
	NdisMediumAtm = 0x8,
	NdisMediumWirelessWan = 0x9,
	NdisMediumIrda = 0xa,
	NdisMediumBpc = 0xb,
	NdisMediumCoWan = 0xc,
	NdisMedium1394 = 0xd,
	NdisMediumInfiniBand = 0xe,
	NdisMediumTunnel = 0xf,
	NdisMediumNative802_11 = 0x10,
	NdisMediumLoopback = 0x11,
	NdisMediumWiMAX = 0x12,
	NdisMediumIP = 0x13,
	NdisMediumMax = 0x14
};

enum _NDIS_NETWORK_CHANGE_TYPE {
	NdisPossibleNetworkChange = 0x1,
	NdisDefinitelyNetworkChange = 0x2,
	NdisNetworkChangeFromMediaConnect = 0x3,
	NdisNetworkChangeMax = 0x4
};

struct _NDIS_OBJECT_HEADER {
	/*0000*/ UCHAR Type;
	/*0001*/ UCHAR Revision;
	/*0002*/ USHORT Size;
	/*0004*/
};

struct _NDIS_OFFLOAD {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _NDIS_TCP_IP_CHECKSUM_OFFLOAD Checksum;
	/*0024*/ _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
	/*0034*/ _NDIS_IPSEC_OFFLOAD_V1 IPsecV1;
	/*0050*/ _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
	/*006c*/ ULONG Flags;
	/*0070*/
};

struct _NDIS_OFFLOAD_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UCHAR IPv4Checksum;
	/*0005*/ UCHAR TCPIPv4Checksum;
	/*0006*/ UCHAR UDPIPv4Checksum;
	/*0007*/ UCHAR TCPIPv6Checksum;
	/*0008*/ UCHAR UDPIPv6Checksum;
	/*0009*/ UCHAR LsoV1;
	/*000a*/ UCHAR IPsecV1;
	/*000b*/ UCHAR LsoV2IPv4;
	/*000c*/ UCHAR LsoV2IPv6;
	/*000d*/ UCHAR TcpConnectionIPv4;
	/*000e*/ UCHAR TcpConnectionIPv6;
	/*0010*/ ULONG Flags;
	/*0014*/
};

struct _NDIS_OPER_STATE {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _NET_IF_OPER_STATUS OperationalStatus;
	/*0008*/ ULONG OperationalStatusFlags;
	/*000c*/
};

struct _NDIS_PCI_DEVICE_CUSTOM_PROPERTIES {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ UINT DeviceType;
	/*0008*/ UINT CurrentSpeedAndMode;
	/*000c*/ UINT CurrentPayloadSize;
	/*0010*/ UINT MaxPayloadSize;
	/*0014*/ UINT MaxReadRequestSize;
	/*0018*/ UINT CurrentLinkSpeed;
	/*001c*/ UINT CurrentLinkWidth;
	/*0020*/ UINT MaxLinkSpeed;
	/*0024*/ UINT MaxLinkWidth;
	/*0028*/ UINT PciExpressVersion;
	/*002c*/ UINT InterruptType;
	/*0030*/ UINT MaxInterruptMessages;
	/*0034*/
};

enum _NDIS_PHYSICAL_MEDIUM {
	NdisPhysicalMediumUnspecified = 0x0,
	NdisPhysicalMediumWirelessLan = 0x1,
	NdisPhysicalMediumCableModem = 0x2,
	NdisPhysicalMediumPhoneLine = 0x3,
	NdisPhysicalMediumPowerLine = 0x4,
	NdisPhysicalMediumDSL = 0x5,
	NdisPhysicalMediumFibreChannel = 0x6,
	NdisPhysicalMedium1394 = 0x7,
	NdisPhysicalMediumWirelessWan = 0x8,
	NdisPhysicalMediumNative802_11 = 0x9,
	NdisPhysicalMediumBluetooth = 0xa,
	NdisPhysicalMediumInfiniband = 0xb,
	NdisPhysicalMediumWiMax = 0xc,
	NdisPhysicalMediumUWB = 0xd,
	NdisPhysicalMedium802_3 = 0xe,
	NdisPhysicalMedium802_5 = 0xf,
	NdisPhysicalMediumIrda = 0x10,
	NdisPhysicalMediumWiredWAN = 0x11,
	NdisPhysicalMediumWiredCoWan = 0x12,
	NdisPhysicalMediumOther = 0x13,
	NdisPhysicalMediumNative802_15_4 = 0x14,
	NdisPhysicalMediumMax = 0x15
};

struct _NDIS_PM_PACKET_PATTERN {
	/*0000*/ ULONG Priority;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONG MaskSize;
	/*000c*/ ULONG PatternOffset;
	/*0010*/ ULONG PatternSize;
	/*0014*/ ULONG PatternFlags;
	/*0018*/
};

struct _NDIS_PM_WAKE_UP_CAPABILITIES {
	/*0000*/ _NDIS_DEVICE_POWER_STATE MinMagicPacketWakeUp;
	/*0004*/ _NDIS_DEVICE_POWER_STATE MinPatternWakeUp;
	/*0008*/ _NDIS_DEVICE_POWER_STATE MinLinkChangeWakeUp;
	/*000c*/
};

struct _NDIS_PNP_CAPABILITIES {
	/*0000*/ ULONG Flags;
	/*0004*/ _NDIS_PM_WAKE_UP_CAPABILITIES WakeUpCapabilities;
	/*0010*/
};

struct _NDIS_PORT {
	/*0000*/ _NDIS_PORT * Next;
	/*0008*/ void * NdisReserved;
	/*0010*/ void * MiniportReserved;
	/*0018*/ void * ProtocolReserved;
	/*0020*/ _NDIS_PORT_CHARACTERISTICS PortCharacteristics;
	/*0060*/
};

struct _NDIS_PORT_ARRAY {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG NumberOfPorts;
	/*0008*/ ULONG OffsetFirstPort;
	/*000c*/ ULONG ElementSize;
	/*0010*/ _NDIS_PORT_CHARACTERISTICS Ports[0x1];
	/*0050*/
};

struct _NDIS_PORT_AUTHENTICATION_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _NDIS_PORT_CONTROL_STATE SendControlState;
	/*0008*/ _NDIS_PORT_CONTROL_STATE RcvControlState;
	/*000c*/ _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
	/*0010*/ _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
	/*0014*/
};

enum _NDIS_PORT_AUTHORIZATION_STATE {
	NdisPortAuthorizationUnknown = 0x0,
	NdisPortAuthorized = 0x1,
	NdisPortUnauthorized = 0x2,
	NdisPortReauthorizing = 0x3
};

struct _NDIS_PORT_CHARACTERISTICS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG PortNumber;
	/*0008*/ ULONG Flags;
	/*000c*/ _NDIS_PORT_TYPE Type;
	/*0010*/ _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
	/*0018*/ ULONGLONG XmitLinkSpeed;
	/*0020*/ ULONGLONG RcvLinkSpeed;
	/*0028*/ _NET_IF_DIRECTION_TYPE Direction;
	/*002c*/ _NDIS_PORT_CONTROL_STATE SendControlState;
	/*0030*/ _NDIS_PORT_CONTROL_STATE RcvControlState;
	/*0034*/ _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
	/*0038*/ _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
	/*0040*/
};

enum _NDIS_PORT_CONTROL_STATE {
	NdisPortControlStateUnknown = 0x0,
	NdisPortControlStateControlled = 0x1,
	NdisPortControlStateUncontrolled = 0x2
};

struct _NDIS_PORT_STATE {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _NET_IF_MEDIA_CONNECT_STATE MediaConnectState;
	/*0008*/ ULONGLONG XmitLinkSpeed;
	/*0010*/ ULONGLONG RcvLinkSpeed;
	/*0018*/ _NET_IF_DIRECTION_TYPE Direction;
	/*001c*/ _NDIS_PORT_CONTROL_STATE SendControlState;
	/*0020*/ _NDIS_PORT_CONTROL_STATE RcvControlState;
	/*0024*/ _NDIS_PORT_AUTHORIZATION_STATE SendAuthorizationState;
	/*0028*/ _NDIS_PORT_AUTHORIZATION_STATE RcvAuthorizationState;
	/*002c*/ ULONG Flags;
	/*0030*/
};

enum _NDIS_PORT_TYPE {
	NdisPortTypeUndefined = 0x0,
	NdisPortTypeBridge = 0x1,
	NdisPortTypeRasConnection = 0x2,
	NdisPortType8021xSupplicant = 0x3,
	NdisPortTypeMax = 0x4
};

enum _NDIS_PROCESSOR_VENDOR {
	NdisProcessorVendorUnknown = 0x0,
	NdisProcessorVendorGenuinIntel = 0x1,
	NdisProcessorVendorGenuineIntel = 0x1,
	NdisProcessorVendorAuthenticAMD = 0x2
};

struct _NDIS_RECEIVE_HASH_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG HashInformation;
	/*000c*/ USHORT HashSecretKeySize;
	/*0010*/ ULONG HashSecretKeyOffset;
	/*0014*/
};

struct _NDIS_RECEIVE_SCALE_CAPABILITIES {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG CapabilitiesFlags;
	/*0008*/ ULONG NumberOfInterruptMessages;
	/*000c*/ ULONG NumberOfReceiveQueues;
	/*0010*/
};

struct _NDIS_RECEIVE_SCALE_PARAMETERS {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ USHORT Flags;
	/*0006*/ USHORT BaseCpuNumber;
	/*0008*/ ULONG HashInformation;
	/*000c*/ USHORT IndirectionTableSize;
	/*0010*/ ULONG IndirectionTableOffset;
	/*0014*/ USHORT HashSecretKeySize;
	/*0018*/ ULONG HashSecretKeyOffset;
	/*001c*/
};

enum _NDIS_REQUEST_TYPE {
	NdisRequestQueryInformation = 0x0,
	NdisRequestSetInformation = 0x1,
	NdisRequestQueryStatistics = 0x2,
	NdisRequestOpen = 0x3,
	NdisRequestClose = 0x4,
	NdisRequestSend = 0x5,
	NdisRequestTransferData = 0x6,
	NdisRequestReset = 0x7,
	NdisRequestGeneric1 = 0x8,
	NdisRequestGeneric2 = 0x9,
	NdisRequestGeneric3 = 0xa,
	NdisRequestGeneric4 = 0xb
};

struct _NDIS_STATISTICS_INFO {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG SupportedStatistics;
	/*0008*/ ULONGLONG ifInDiscards;
	/*0010*/ ULONGLONG ifInErrors;
	/*0018*/ ULONGLONG ifHCInOctets;
	/*0020*/ ULONGLONG ifHCInUcastPkts;
	/*0028*/ ULONGLONG ifHCInMulticastPkts;
	/*0030*/ ULONGLONG ifHCInBroadcastPkts;
	/*0038*/ ULONGLONG ifHCOutOctets;
	/*0040*/ ULONGLONG ifHCOutUcastPkts;
	/*0048*/ ULONGLONG ifHCOutMulticastPkts;
	/*0050*/ ULONGLONG ifHCOutBroadcastPkts;
	/*0058*/ ULONGLONG ifOutErrors;
	/*0060*/ ULONGLONG ifOutDiscards;
	/*0068*/ ULONGLONG ifHCInUcastOctets;
	/*0070*/ ULONGLONG ifHCInMulticastOctets;
	/*0078*/ ULONGLONG ifHCInBroadcastOctets;
	/*0080*/ ULONGLONG ifHCOutUcastOctets;
	/*0088*/ ULONGLONG ifHCOutMulticastOctets;
	/*0090*/ ULONGLONG ifHCOutBroadcastOctets;
	/*0098*/
};

struct _NDIS_STATISTICS_VALUE {
	/*0000*/ ULONG Oid;
	/*0004*/ ULONG DataLength;
	/*0008*/ UCHAR Data[0x1];
	/*000c*/
};

struct _NDIS_STATISTICS_VALUE_EX {
	/*0000*/ ULONG Oid;
	/*0004*/ ULONG DataLength;
	/*0008*/ ULONG Length;
	/*000c*/ UCHAR Data[0x1];
	/*0010*/
};

enum _NDIS_SUPPORTED_PAUSE_FUNCTIONS {
	NdisPauseFunctionsUnsupported = 0x0,
	NdisPauseFunctionsSendOnly = 0x1,
	NdisPauseFunctionsReceiveOnly = 0x2,
	NdisPauseFunctionsSendAndReceive = 0x3,
	NdisPauseFunctionsUnknown = 0x4
};

struct _NDIS_TCP_CONNECTION_OFFLOAD {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG Encapsulation;
	/*0008*/ ULONG SupportIPv4 : 02; // 0x00000003;
	/*0008*/ ULONG SupportIPv6 : 02; // 0x0000000c;
	/*0008*/ ULONG SupportIPv6ExtensionHeaders : 02; // 0x00000030;
	/*0008*/ ULONG SupportSack : 02; // 0x000000c0;
	/*000c*/ ULONG TcpConnectionOffloadCapacity;
	/*0010*/ ULONG Flags;
	/*0014*/
};

struct _NDIS_TCP_IP_CHECKSUM_OFFLOAD {
	
	
	
	
	/*0000*/ <unnamed-type-IPv4Transmit> IPv4Transmit;
	/*0008*/ <unnamed-type-IPv4Receive> IPv4Receive;
	/*0010*/ <unnamed-type-IPv6Transmit> IPv6Transmit;
	/*0018*/ <unnamed-type-IPv6Receive> IPv6Receive;
	/*0020*/
};

struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V1 {
	
	/*0000*/ <unnamed-type-IPv4> IPv4;
	/*0010*/
};

struct _NDIS_TCP_LARGE_SEND_OFFLOAD_V2 {
	
	
	/*0000*/ <unnamed-type-IPv4> IPv4;
	/*000c*/ <unnamed-type-IPv6> IPv6;
	/*001c*/
};

struct _NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG TimeoutArrayLength;
	/*000c*/ ULONG TimeoutArray[0x1];
	/*0010*/
};

struct _NDIS_TIMESTAMP_CAPABILITIES {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0008*/ ULONGLONG HardwareClockFrequencyHz;
	/*0010*/ UCHAR CrossTimestamp;
	/*0018*/ ULONGLONG Reserved1;
	/*0020*/ ULONGLONG Reserved2;
	/*0028*/ _NDIS_TIMESTAMP_CAPABILITY_FLAGS TimestampFlags;
	/*0038*/
};

struct _NDIS_TIMESTAMP_CAPABILITY_FLAGS {
	/*0000*/ UCHAR PtpV2OverUdpIPv4EventMsgReceiveHw;
	/*0001*/ UCHAR PtpV2OverUdpIPv4AllMsgReceiveHw;
	/*0002*/ UCHAR PtpV2OverUdpIPv4EventMsgTransmitHw;
	/*0003*/ UCHAR PtpV2OverUdpIPv4AllMsgTransmitHw;
	/*0004*/ UCHAR PtpV2OverUdpIPv6EventMsgReceiveHw;
	/*0005*/ UCHAR PtpV2OverUdpIPv6AllMsgReceiveHw;
	/*0006*/ UCHAR PtpV2OverUdpIPv6EventMsgTransmitHw;
	/*0007*/ UCHAR PtpV2OverUdpIPv6AllMsgTransmitHw;
	/*0008*/ UCHAR AllReceiveHw;
	/*0009*/ UCHAR AllTransmitHw;
	/*000a*/ UCHAR TaggedTransmitHw;
	/*000b*/ UCHAR AllReceiveSw;
	/*000c*/ UCHAR AllTransmitSw;
	/*000d*/ UCHAR TaggedTransmitSw;
	/*000e*/
};

struct _NDIS_VAR_DATA_DESC {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0008*/ ULONGLONG Offset;
	/*0010*/
};

enum _NDIS_WAN_HEADER_FORMAT {
	NdisWanHeaderNative = 0x0,
	NdisWanHeaderEthernet = 0x1
};

enum _NDIS_WAN_MEDIUM_SUBTYPE {
	NdisWanMediumHub = 0x0,
	NdisWanMediumX_25 = 0x1,
	NdisWanMediumIsdn = 0x2,
	NdisWanMediumSerial = 0x3,
	NdisWanMediumFrameRelay = 0x4,
	NdisWanMediumAtm = 0x5,
	NdisWanMediumSonet = 0x6,
	NdisWanMediumSW56K = 0x7,
	NdisWanMediumPPTP = 0x8,
	NdisWanMediumL2TP = 0x9,
	NdisWanMediumIrda = 0xa,
	NdisWanMediumParallel = 0xb,
	NdisWanMediumPppoe = 0xc,
	NdisWanMediumSSTP = 0xd,
	NdisWanMediumAgileVPN = 0xe,
	NdisWanMediumGre = 0xf,
	NdisWanMediumSubTypeMax = 0x10
};

struct _NDIS_WAN_PROTOCOL_CAPS {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Reserved;
	/*0008*/
};

enum _NDIS_WAN_QUALITY {
	NdisWanRaw = 0x0,
	NdisWanErrorControl = 0x1,
	NdisWanReliable = 0x2
};

struct _NDIS_WLAN_BSSID {
	/*0000*/ ULONG Length;
	/*0004*/ UCHAR MacAddress[0x6];
	/*000a*/ UCHAR Reserved[0x2];
	/*000c*/ _NDIS_802_11_SSID Ssid;
	/*0030*/ ULONG Privacy;
	/*0034*/ LONG Rssi;
	/*0038*/ _NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
	/*003c*/ _NDIS_802_11_CONFIGURATION Configuration;
	/*005c*/ _NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
	/*0060*/ UCHAR SupportedRates[0x8];
	/*0068*/
};

struct _NDIS_WLAN_BSSID_EX {
	/*0000*/ ULONG Length;
	/*0004*/ UCHAR MacAddress[0x6];
	/*000a*/ UCHAR Reserved[0x2];
	/*000c*/ _NDIS_802_11_SSID Ssid;
	/*0030*/ ULONG Privacy;
	/*0034*/ LONG Rssi;
	/*0038*/ _NDIS_802_11_NETWORK_TYPE NetworkTypeInUse;
	/*003c*/ _NDIS_802_11_CONFIGURATION Configuration;
	/*005c*/ _NDIS_802_11_NETWORK_INFRASTRUCTURE InfrastructureMode;
	/*0060*/ UCHAR SupportedRates[0x10];
	/*0070*/ ULONG IELength;
	/*0074*/ UCHAR IEs[0x1];
	/*0078*/
};

struct _NDIS_WMI_ENUM_ADAPTER {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG IfIndex;
	/*0008*/ _NET_LUID_LH NetLuid;
	/*0010*/ USHORT DeviceNameLength;
	/*0012*/ CHAR DeviceName[0x1];
	/*0018*/
};

struct _NDIS_WMI_EVENT_HEADER {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG IfIndex;
	/*0008*/ _NET_LUID_LH NetLuid;
	/*0010*/ ULONGLONG RequestId;
	/*0018*/ ULONG PortNumber;
	/*001c*/ ULONG DeviceNameLength;
	/*0020*/ ULONG DeviceNameOffset;
	/*0024*/ UCHAR Padding[0x4];
	/*0028*/
};

struct _NDIS_WMI_IPSEC_OFFLOAD_V1 {
	
	
	
	/*0000*/ <unnamed-type-Supported> Supported;
	/*0014*/ <unnamed-type-IPv4AH> IPv4AH;
	/*002c*/ <unnamed-type-IPv4ESP> IPv4ESP;
	/*004c*/
};

struct _NDIS_WMI_METHOD_HEADER {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG PortNumber;
	/*0008*/ _NET_LUID_LH NetLuid;
	/*0010*/ ULONGLONG RequestId;
	/*0018*/ ULONG Timeout;
	/*001c*/ UCHAR Padding[0x4];
	/*0020*/
};

struct _NDIS_WMI_OFFLOAD {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD Checksum;
	/*005c*/ _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 LsoV1;
	/*0070*/ _NDIS_WMI_IPSEC_OFFLOAD_V1 IPsecV1;
	/*00bc*/ _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 LsoV2;
	/*00dc*/ ULONG Flags;
	/*00e0*/
};

struct _NDIS_WMI_SET_HEADER {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG PortNumber;
	/*0008*/ _NET_LUID_LH NetLuid;
	/*0010*/ ULONGLONG RequestId;
	/*0018*/ ULONG Timeout;
	/*001c*/ UCHAR Padding[0x4];
	/*0020*/
};

struct _NDIS_WMI_TCP_CONNECTION_OFFLOAD {
	/*0000*/ _NDIS_OBJECT_HEADER Header;
	/*0004*/ ULONG Encapsulation;
	/*0008*/ ULONG SupportIPv4;
	/*000c*/ ULONG SupportIPv6;
	/*0010*/ ULONG SupportIPv6ExtensionHeaders;
	/*0014*/ ULONG SupportSack;
	/*0018*/ ULONG TcpConnectionOffloadCapacity;
	/*001c*/ ULONG Flags;
	/*0020*/
};

struct _NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD {
	
	
	
	
	/*0000*/ <unnamed-type-IPv4Transmit> IPv4Transmit;
	/*0018*/ <unnamed-type-IPv4Receive> IPv4Receive;
	/*0030*/ <unnamed-type-IPv6Transmit> IPv6Transmit;
	/*0044*/ <unnamed-type-IPv6Receive> IPv6Receive;
	/*0058*/
};

struct _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 {
	
	/*0000*/ <unnamed-type-IPv4> IPv4;
	/*0014*/
};

struct _NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 {
	
	
	/*0000*/ <unnamed-type-IPv4> IPv4;
	/*000c*/ <unnamed-type-IPv6> IPv6;
	/*0020*/
};

struct _NDR64_ARRAY_ELEMENT_INFO {
	/*0000*/ UINT ElementMemSize;
	/*0008*/ void const * Element;
	/*0010*/
};

struct _NDR64_ARRAY_FLAGS {
	/*0000*/ UCHAR HasPointerInfo : 01; // 0x01;
	/*0000*/ UCHAR HasElementInfo : 01; // 0x02;
	/*0000*/ UCHAR IsMultiDimensional : 01; // 0x04;
	/*0000*/ UCHAR IsArrayofStrings : 01; // 0x08;
	/*0000*/ UCHAR Reserved1 : 01; // 0x10;
	/*0000*/ UCHAR Reserved2 : 01; // 0x20;
	/*0000*/ UCHAR Reserved3 : 01; // 0x40;
	/*0000*/ UCHAR Reserved4 : 01; // 0x80;
	/*0001*/
};

struct _NDR64_BIND_AND_NOTIFY_EXTENSION {
	/*0000*/ _NDR64_BIND_CONTEXT Binding;
	/*0006*/ USHORT NotifyIndex;
	/*0008*/
};

struct _NDR64_BIND_CONTEXT {
	/*0000*/ UCHAR HandleType;
	/*0001*/ UCHAR Flags;
	/*0002*/ USHORT StackOffset;
	/*0004*/ UCHAR RoutineIndex;
	/*0005*/ UCHAR Ordinal;
	/*0006*/
};

struct _NDR64_CONF_ARRAY_HEADER_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR Alignment;
	/*0002*/ _NDR64_ARRAY_FLAGS Flags;
	/*0003*/ UCHAR Reserved;
	/*0004*/ UINT ElementSize;
	/*0008*/ void const * ConfDescriptor;
	/*0010*/
};

struct _NDR64_CONF_STRUCTURE_HEADER_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR Alignment;
	/*0002*/ _NDR64_STRUCTURE_FLAGS Flags;
	/*0003*/ UCHAR Reserve;
	/*0004*/ UINT MemorySize;
	/*0008*/ void const * ArrayDescription;
	/*0010*/
};

struct _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR Alignment;
	/*0002*/ _NDR64_ARRAY_FLAGS Flags;
	/*0003*/ UCHAR Reserved;
	/*0004*/ UINT ElementSize;
	/*0008*/ void const * ConfDescriptor;
	/*0010*/ void const * VarDescriptor;
	/*0018*/
};

struct _NDR64_CONSTANT_IID_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR Flags;
	/*0002*/ USHORT Reserved;
	/*0004*/ _GUID Guid;
	/*0014*/
};

struct _NDR64_CONTEXT_HANDLE_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR ContextFlags;
	/*0002*/ UCHAR RundownRoutineIndex;
	/*0003*/ UCHAR Ordinal;
	/*0004*/
};

struct _NDR64_EXPR_CONST64 {
	/*0000*/ UCHAR ExprType;
	/*0001*/ UCHAR Reserved;
	/*0002*/ USHORT Reserved1;
	/*0008*/ LONGLONG ConstValue;
	/*0010*/
};

struct _NDR64_EXPR_NOOP {
	/*0000*/ UCHAR ExprType;
	/*0001*/ UCHAR Size;
	/*0002*/ USHORT Reserved;
	/*0004*/
};

struct _NDR64_EXPR_OPERATOR {
	/*0000*/ UCHAR ExprType;
	/*0001*/ UCHAR Operator;
	/*0002*/ UCHAR CastType;
	/*0003*/ UCHAR Reserved;
	/*0004*/
};

struct _NDR64_EXPR_VAR {
	/*0000*/ UCHAR ExprType;
	/*0001*/ UCHAR VarType;
	/*0002*/ USHORT Reserved;
	/*0004*/ UINT Offset;
	/*0008*/
};

struct _NDR64_PARAM_FLAGS {
	/*0000*/ USHORT MustSize : 01; // 0x0001;
	/*0000*/ USHORT MustFree : 01; // 0x0002;
	/*0000*/ USHORT IsPipe : 01; // 0x0004;
	/*0000*/ USHORT IsIn : 01; // 0x0008;
	/*0000*/ USHORT IsOut : 01; // 0x0010;
	/*0000*/ USHORT IsReturn : 01; // 0x0020;
	/*0000*/ USHORT IsBasetype : 01; // 0x0040;
	/*0000*/ USHORT IsByValue : 01; // 0x0080;
	/*0000*/ USHORT IsSimpleRef : 01; // 0x0100;
	/*0000*/ USHORT IsDontCallFreeInst : 01; // 0x0200;
	/*0000*/ USHORT SaveForAsyncFinish : 01; // 0x0400;
	/*0000*/ USHORT IsPartialIgnore : 01; // 0x0800;
	/*0000*/ USHORT IsForceAllocate : 01; // 0x1000;
	/*0000*/ USHORT Reserved : 02; // 0x6000;
	/*0000*/ USHORT UseCache : 01; // 0x8000;
	/*0002*/
};

struct _NDR64_PARAM_FORMAT {
	/*0000*/ void const * Type;
	/*0008*/ _NDR64_PARAM_FLAGS Attributes;
	/*000a*/ USHORT Reserved;
	/*000c*/ UINT StackOffset;
	/*0010*/
};

struct _NDR64_POINTER_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR Flags;
	/*0002*/ USHORT Reserved;
	/*0008*/ void const * Pointee;
	/*0010*/
};

struct _NDR64_POINTER_INSTANCE_HEADER_FORMAT {
	/*0000*/ UINT Offset;
	/*0004*/ UINT Reserved;
	/*0008*/
};

struct _NDR64_POINTER_REPEAT_FLAGS {
	/*0000*/ UCHAR SetCorrMark : 01; // 0x01;
	/*0000*/ UCHAR Reserved : 07; // 0xfe;
	/*0001*/
};

struct _NDR64_PROC_FORMAT {
	/*0000*/ UINT Flags;
	/*0004*/ UINT StackSize;
	/*0008*/ UINT ConstantClientBufferSize;
	/*000c*/ UINT ConstantServerBufferSize;
	/*0010*/ USHORT RpcFlags;
	/*0012*/ USHORT FloatDoubleMask;
	/*0014*/ USHORT NumberOfParams;
	/*0016*/ USHORT ExtensionSize;
	/*0018*/
};

struct _NDR64_REPEAT_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ _NDR64_POINTER_REPEAT_FLAGS Flags;
	/*0002*/ USHORT Reserved;
	/*0004*/ UINT Increment;
	/*0008*/ UINT OffsetToArray;
	/*000c*/ UINT NumberOfPointers;
	/*0010*/
};

struct _NDR64_STRUCTURE_FLAGS {
	/*0000*/ UCHAR HasPointerInfo : 01; // 0x01;
	/*0000*/ UCHAR HasMemberInfo : 01; // 0x02;
	/*0000*/ UCHAR HasConfArray : 01; // 0x04;
	/*0000*/ UCHAR HasOrigPointerInfo : 01; // 0x08;
	/*0000*/ UCHAR HasOrigMemberInfo : 01; // 0x10;
	/*0000*/ UCHAR Reserved1 : 01; // 0x20;
	/*0000*/ UCHAR Reserved2 : 01; // 0x40;
	/*0000*/ UCHAR Reserved3 : 01; // 0x80;
	/*0001*/
};

struct _NDR64_STRUCTURE_HEADER_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR Alignment;
	/*0002*/ _NDR64_STRUCTURE_FLAGS Flags;
	/*0003*/ UCHAR Reserve;
	/*0004*/ UINT MemorySize;
	/*0008*/
};

struct _NDR64_TYPE_STRICT_CONTEXT_HANDLE {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR RealFormatCode;
	/*0002*/ USHORT Reserved;
	/*0008*/ void const * Type;
	/*0010*/ UINT CtxtFlags;
	/*0014*/ UINT CtxtID;
	/*0018*/
};

struct _NDR64_USER_MARSHAL_FORMAT {
	/*0000*/ UCHAR FormatCode;
	/*0001*/ UCHAR Flags;
	/*0002*/ USHORT RoutineIndex;
	/*0004*/ USHORT TransmittedTypeWireAlignment;
	/*0006*/ USHORT MemoryAlignment;
	/*0008*/ UINT UserTypeMemorySize;
	/*000c*/ UINT TransmittedTypeBufferSize;
	/*0010*/ void const * TransmittedType;
	/*0018*/
};

struct _NDR_ASYNC_MESSAGE;

struct _NDR_CORRELATION_INFO;

struct _NDR_CS_ROUTINES {
	/*0000*/ _NDR_CS_SIZE_CONVERT_ROUTINES * pSizeConvertRoutines;
	/*0008*/ void (* * pTagGettingRoutines)( void * , INT , ULONG * , ULONG * , ULONG * , ULONG * );
	/*0010*/
};

struct _NDR_CS_SIZE_CONVERT_ROUTINES {
	/*0000*/ void (* pfnNetSize)( void * , ULONG , ULONG , _IDL_CS_CONVERT * , ULONG * , ULONG * );
	/*0008*/ void (* pfnToNetCs)( void * , ULONG , void * , ULONG , UCHAR * , ULONG * , ULONG * );
	/*0010*/ void (* pfnLocalSize)( void * , ULONG , ULONG , _IDL_CS_CONVERT * , ULONG * , ULONG * );
	/*0018*/ void (* pfnFromNetCs)( void * , ULONG , UCHAR * , ULONG , ULONG , void * , ULONG * , ULONG * );
	/*0020*/
};

struct _NDR_EXPR_DESC {
	/*0000*/ USHORT const * pOffset;
	/*0008*/ UCHAR const * pFormatExpr;
	/*0010*/
};

struct _NDR_PROC_CONTEXT;

struct _NDR_USER_MARSHAL_INFO {
	/*0000*/ ULONG InformationLevel;
	/*0008*/ _NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
	/*0058*/
};

struct _NDR_USER_MARSHAL_INFO_LEVEL1 {
	/*0000*/ void * Buffer;
	/*0008*/ ULONG BufferSize;
	/*0010*/ void * (* pfnAllocate)( ULONGLONG );
	/*0018*/ void (* pfnFree)( void * );
	/*0020*/ IRpcChannelBuffer * pRpcChannelBuffer;
	/*0028*/ ULONGLONG Reserved[0x5];
	/*0050*/
};

struct _NETCONNECTINFOSTRUCT {
	/*0000*/ ULONG cbStructure;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG dwSpeed;
	/*000c*/ ULONG dwDelay;
	/*0010*/ ULONG dwOptDataSize;
	/*0014*/
};

struct _NETINFOSTRUCT {
	/*0000*/ ULONG cbStructure;
	/*0004*/ ULONG dwProviderVersion;
	/*0008*/ ULONG dwStatus;
	/*000c*/ ULONG dwCharacteristics;
	/*0010*/ ULONGLONG dwHandle;
	/*0018*/ USHORT wNetType;
	/*001c*/ ULONG dwPrinters;
	/*0020*/ ULONG dwDrives;
	/*0028*/
};

struct _NETRESOURCEA {
	/*0000*/ ULONG dwScope;
	/*0004*/ ULONG dwType;
	/*0008*/ ULONG dwDisplayType;
	/*000c*/ ULONG dwUsage;
	/*0010*/ CHAR * lpLocalName;
	/*0018*/ CHAR * lpRemoteName;
	/*0020*/ CHAR * lpComment;
	/*0028*/ CHAR * lpProvider;
	/*0030*/
};

struct _NETRESOURCEW {
	/*0000*/ ULONG dwScope;
	/*0004*/ ULONG dwType;
	/*0008*/ ULONG dwDisplayType;
	/*000c*/ ULONG dwUsage;
	/*0010*/ WCHAR * lpLocalName;
	/*0018*/ WCHAR * lpRemoteName;
	/*0020*/ WCHAR * lpComment;
	/*0028*/ WCHAR * lpProvider;
	/*0030*/
};

struct _NETWORK_ADDRESS {
	/*0000*/ USHORT AddressLength;
	/*0002*/ USHORT AddressType;
	/*0004*/ UCHAR Address[0x1];
	/*0006*/
};

struct _NETWORK_ADDRESS_IP {
	/*0000*/ USHORT sin_port;
	/*0004*/ ULONG in_addr;
	/*0008*/ UCHAR sin_zero[0x8];
	/*0010*/
};

struct _NETWORK_ADDRESS_IP6 {
	/*0000*/ USHORT sin6_port;
	/*0004*/ ULONG sin6_flowinfo;
	/*0008*/ USHORT sin6_addr[0x8];
	/*0018*/ ULONG sin6_scope_id;
	/*001c*/
};

struct _NETWORK_ADDRESS_IPX {
	/*0000*/ ULONG NetworkAddress;
	/*0004*/ UCHAR NodeAddress[0x6];
	/*000a*/ USHORT Socket;
	/*000c*/
};

struct _NETWORK_ADDRESS_LIST {
	/*0000*/ LONG AddressCount;
	/*0004*/ USHORT AddressType;
	/*0006*/ _NETWORK_ADDRESS Address[0x1];
	/*000c*/
};

struct _NETWORK_APP_INSTANCE_EA {
	/*0000*/ _GUID AppInstanceID;
	/*0010*/ ULONG CsvFlags;
	/*0014*/
};

enum _NETWORK_STATUS {
	NS_NOT_AVAILABLE = 0x0,
	NS_WIRED_INTERNET = 0x1,
	NS_WIRED_NO_INTERNET = 0x2,
	NS_WIRED_DISCONNECTED = 0x3,
	NS_WIFI_INTERNET = 0x10,
	NS_MBB_INTERNET = 0x11,
	NS_MBB_ROAMING_INTERNET = 0x12,
	NS_MBB_SHARED_INTERNET = 0x13,
	NS_WIRELESS_NO_INTERNET = 0x20,
	NS_WIRELESS_AVAILABLE = 0x21,
	NS_WIRELESS_DISCONNECTED = 0x22,
	NS_AIRPLANE_MODE = 0x30,
	NS_UNKNOWN_INTERNET = 0x40,
	NS_UNKNOWN_NO_INTERNET = 0x41
};

enum _NET_IF_ACCESS_TYPE {
	NET_IF_ACCESS_LOOPBACK = 0x1,
	NET_IF_ACCESS_BROADCAST = 0x2,
	NET_IF_ACCESS_POINT_TO_POINT = 0x3,
	NET_IF_ACCESS_POINT_TO_MULTI_POINT = 0x4,
	NET_IF_ACCESS_MAXIMUM = 0x5
};

enum _NET_IF_ADMIN_STATUS {
	NET_IF_ADMIN_STATUS_UP = 0x1,
	NET_IF_ADMIN_STATUS_DOWN = 0x2,
	NET_IF_ADMIN_STATUS_TESTING = 0x3
};

struct _NET_IF_ALIAS_LH {
	/*0000*/ USHORT ifAliasLength;
	/*0002*/ USHORT ifAliasOffset;
	/*0004*/
};

enum _NET_IF_CONNECTION_TYPE {
	NET_IF_CONNECTION_DEDICATED = 0x1,
	NET_IF_CONNECTION_PASSIVE = 0x2,
	NET_IF_CONNECTION_DEMAND = 0x3,
	NET_IF_CONNECTION_MAXIMUM = 0x4
};

enum _NET_IF_DIRECTION_TYPE {
	NET_IF_DIRECTION_SENDRECEIVE = 0x0,
	NET_IF_DIRECTION_SENDONLY = 0x1,
	NET_IF_DIRECTION_RECEIVEONLY = 0x2,
	NET_IF_DIRECTION_MAXIMUM = 0x3
};

enum _NET_IF_MEDIA_CONNECT_STATE {
	MediaConnectStateUnknown = 0x0,
	MediaConnectStateConnected = 0x1,
	MediaConnectStateDisconnected = 0x2
};

enum _NET_IF_MEDIA_DUPLEX_STATE {
	MediaDuplexStateUnknown = 0x0,
	MediaDuplexStateHalf = 0x1,
	MediaDuplexStateFull = 0x2
};

enum _NET_IF_OPER_STATUS {
	NET_IF_OPER_STATUS_UP = 0x1,
	NET_IF_OPER_STATUS_DOWN = 0x2,
	NET_IF_OPER_STATUS_TESTING = 0x3,
	NET_IF_OPER_STATUS_UNKNOWN = 0x4,
	NET_IF_OPER_STATUS_DORMANT = 0x5,
	NET_IF_OPER_STATUS_NOT_PRESENT = 0x6,
	NET_IF_OPER_STATUS_LOWER_LAYER_DOWN = 0x7
};

struct _NET_IF_RCV_ADDRESS_LH {
	/*0000*/ _NET_IF_RCV_ADDRESS_TYPE ifRcvAddressType;
	/*0004*/ USHORT ifRcvAddressLength;
	/*0006*/ USHORT ifRcvAddressOffset;
	/*0008*/
};

enum _NET_IF_RCV_ADDRESS_TYPE {
	NET_IF_RCV_ADDRESS_TYPE_OTHER = 0x1,
	NET_IF_RCV_ADDRESS_TYPE_VOLATILE = 0x2,
	NET_IF_RCV_ADDRESS_TYPE_NON_VOLATILE = 0x3
};

union _NET_LUID_LH {
	
	/*0000*/ ULONGLONG Value;
	/*0000*/ <unnamed-type-Info> Info;
	/*0008*/
};

struct _NET_PHYSICAL_LOCATION_LH {
	/*0000*/ ULONG BusNumber;
	/*0004*/ ULONG SlotNumber;
	/*0008*/ ULONG FunctionNumber;
	/*000c*/
};

struct _NEWMAIL_NOTIFICATION {
	/*0000*/ ULONG cbEntryID;
	/*0008*/ ENTRYID * lpEntryID;
	/*0010*/ ULONG cbParentID;
	/*0018*/ ENTRYID * lpParentID;
	/*0020*/ ULONG ulFlags;
	/*0028*/ WCHAR * lpszMessageClass;
	/*0030*/ ULONG ulMessageFlags;
	/*0038*/
};

struct _NLA_BANDWIDTH_DATA {
	/*0000*/ sockaddr_storage SourceIP;
	/*0080*/ sockaddr_storage DestinationIP;
	/*0100*/ ULONG InboundBandwidthEstimate;
	/*0104*/ ULONG OutboundBandwidthEstimate;
	/*0108*/ ULONG InboundBandwidthInstability;
	/*010c*/ ULONG OutboundBandwidthInstability;
	/*0110*/ UCHAR InboundBandwidthPeaked;
	/*0111*/ UCHAR OutboundBandwidthPeaked;
	/*0118*/
};

struct _NLA_CAPABILITY_CHANGE {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ _NET_LUID_LH InterfaceLuid;
	/*0018*/ _NLA_CONNECTIVITY_FAMILY Family;
	/*001c*/ _CONNECTIVITY_CAPABILITY Capability;
	/*0020*/ _NLA_CAPABILITY_CHANGE_REASON CapabilityChangeReason;
	/*0024*/ _CONNECTIVITY_CAPABILITY PreviousCapability;
	/*0028*/
};

enum _NLA_CAPABILITY_CHANGE_REASON {
	CapabilityChangeReasonUnknown = 0x0,
	CapabilityChangeReasonNoAddress = 0x1,
	CapabilityChangeReasonNoGlobalAddress = 0x2,
	CapabilityChangeReasonNoRoute = 0x3,
	CapabilityChangeReasonActiveHttpProbeSucceeded = 0x4,
	CapabilityChangeReasonActiveHttpProbeFailed = 0x5,
	CapabilityChangeReasonActiveHttpProbeFailedButDnsSucceeded = 0x6,
	CapabilityChangeReasonActiveHttpProbeFailedHotspotDetected = 0x7,
	CapabilityChangeReasonActiveDnsProbeSucceeded = 0x8,
	CapabilityChangeReasonActiveDnsProbeFailed = 0x9,
	CapabilityChangeReasonSuspectDnsProbeFailed = 0xa,
	CapabilityChangeReasonSuspectDnsProbeFailedAndNoGateway = 0xb,
	CapabilityChangeReasonSuspectArpProbeFailed = 0xc,
	CapabilityChangeReasonPassivePacketHops = 0xd,
	CapabilityChangeReasonCapabilityReset = 0xe,
	CapabilityChangeReasonActiveHttpProbeSucceededViaProxy = 0xf,
	CapabilityChangeReasonSuspectArpProbeFailedExitingCS = 0x10
};

struct _NLA_COMPLETION {
	/*0000*/ _NLA_COMPLETION_TYPE CompletionType;
	/*0008*/ void * pApplicationContext;
	/*0010*/ void * hEvent;
	/*0010*/ void (* pCallback)( void * , void * );
	/*0018*/ void * hThread;
	/*0010*/ _OVERLAPPED Overlapped;
	/*0030*/ void * hPort;
	/*0038*/ ULONGLONG Key;
	/*0010*/ HWND__ * hWnd;
	/*0018*/ UINT Message;
	/*0040*/
};

enum _NLA_COMPLETION_TYPE {
	NLA_COMPLETION_EVENT = 0x0,
	NLA_COMPLETION_APC = 0x1,
	NLA_COMPLETION_WM = 0x2
};

enum _NLA_CONNECTION_COST {
	NLA_CONNECTION_COST_UNKNOWN = 0x0,
	NLA_CONNECTION_COST_UNRESTRICTED = 0x1,
	NLA_CONNECTION_COST_FIXED = 0x2,
	NLA_CONNECTION_COST_VARIABLE = 0x4,
	NLA_CONNECTION_COST_OVERDATALIMIT = 0x10000,
	NLA_CONNECTION_COST_CONGESTED = 0x20000,
	NLA_CONNECTION_COST_ROAMING = 0x40000,
	NLA_CONNECTION_COST_APPROACHINGDATALIMIT = 0x80000
};

enum _NLA_CONNECTIVITY_FAMILY {
	IPv4 = 0x0,
	IPv6 = 0x1,
	CONNECTIVITY_FAMILY_COUNT = 0x2
};

struct _NLA_DATA {
	/*0000*/ _NLA_DATA_TYPE Type;
	/*0004*/ _NLA_DATA_STATE State;
	/*0008*/ ULONG Length;
	/*0010*/ UCHAR Signature[0x30];
	/*0010*/ _NLA_TRI_STATE TriState;
	/*0010*/ _NLA_BANDWIDTH_DATA BandwidthData;
	/*0010*/ _NLA_INTERNET_CAPABILITY InternetCapability;
	/*0010*/ WCHAR IfID[0x27];
	/*0010*/ ULONG IfType;
	/*0010*/ UCHAR MacAddress[0x8];
	/*0010*/ sockaddr_storage IPAddress;
	/*0010*/ WCHAR DnsSuffix[0x100];
	/*0010*/ _WLAN_CONNECTION_ATTRIBUTES Wlan;
	/*0010*/ _NLA_WLAN_CONNECTION_INFO WlanEx;
	/*0010*/ _NLA_ONEX OneX;
	/*0010*/ WCHAR WwanNetworkId[0x100];
	/*0010*/ WCHAR WwanNetworkName[0x100];
	/*0010*/ _NLA_STABLE_STATE StableState;
	/*0010*/ _NLA_DS_INFO DsInfo;
	/*0010*/ _NLA_SIGNATURE_SOURCE SignatureSource;
	/*0010*/ UCHAR ImageHash[0x20];
	/*0010*/ ULONG UlongData;
	/*0010*/ INT BoolData;
	/*0010*/ ULONG ConnectionCost;
	/*0010*/ _NLA_DATAPLAN_STATUS ProfileData;
	/*0010*/ UCHAR Extension[0x1];
	/*1020*/
};

struct _NLA_DATAPLAN_STATUS {
	/*0000*/ _NLA_USAGE_DATA usageData;
	/*000c*/ ULONG dataLimitInMegabytes;
	/*0010*/ ULONG inboundBandwidthInKbps;
	/*0014*/ ULONG outboundBandwidthInKbps;
	/*0018*/ _FILETIME nextBillingCycle;
	/*0020*/ ULONG maxTransferSizeInMegabytes;
	/*0024*/ ULONG reserved;
	/*0028*/
};

enum _NLA_DATAPLAN_STATUS_RESERVED_BIT {
	NLA_DATAPLAN_STATUS_RESERVED_DISALLOW_PUBLIC_OVERWRITE = 0x1
};

struct _NLA_DATA_SET {
	/*0000*/ ULONG Count;
	/*0008*/ _NLA_DATA * * pNlaData;
	/*0010*/
};

enum _NLA_DATA_STATE {
	NLA_DATA_STATE_UNCHANGED = 0x0,
	NLA_DATA_STATE_ADDED = 0x1,
	NLA_DATA_STATE_CHANGED = 0x2,
	NLA_DATA_STATE_REMOVED = 0x3
};

enum _NLA_DATA_TYPE {
	NLA_DATA_TYPE_ANY = 0x0,
	NLA_DATA_TYPE_NET_SIGNATURE = 0x1,
	NLA_DATA_TYPE_INTERNET_CAPABILITY = 0x2,
	NLA_DATA_TYPE_INTRANET_CAPABILITY = 0x3,
	NLA_DATA_TYPE_INTRANET_AUTHENTICATED = 0x4,
	NLA_DATA_TYPE_IF_ID = 0x5,
	NLA_DATA_TYPE_IF_TYPE = 0x6,
	NLA_DATA_TYPE_IF_MAC_ADDRESS = 0x7,
	NLA_DATA_TYPE_IF_DNS_SUFFIX = 0x8,
	NLA_DATA_TYPE_IF_IP_ADDRESS = 0x9,
	NLA_DATA_TYPE_IF_LINK_IP_ADDRESS = 0xa,
	NLA_DATA_TYPE_BANDWIDTH_ESTIMATE = 0xb,
	NLA_DATA_TYPE_WLAN = 0xc,
	NLA_DATA_TYPE_ONEX = 0xd,
	NLA_DATA_TYPE_IF_DHCP_STABLE = 0xe,
	NLA_DATA_TYPE_IF_LINK_MAC_ADDRESS = 0xf,
	NLA_DATA_TYPE_INTRANET_DS_INFO = 0x10,
	NLA_DATA_TYPE_INTRANET_AUTH_EXPECTED = 0x11,
	NLA_DATA_TYPE_INTRANET_AUTH_LEVEL = 0x12,
	NLA_DATA_TYPE_NET_SIGNATURE_SOURCE = 0x13,
	NLA_DATA_TYPE_WLAN_SIGNATURE = 0x14,
	NLA_DATA_TYPE_WLAN_SECURITY_SIGNATURE = 0x15,
	NLA_DATA_TYPE_PREVIOUS_INTRANET_AUTH_LEVEL = 0x16,
	NLA_DATA_TYPE_IF_LINK_STABLE = 0x17,
	NLA_DATA_TYPE_WLAN_STABLE = 0x18,
	NLA_DATA_TYPE_ONEX_STABLE = 0x19,
	NLA_DATA_TYPE_IF_IP_PREFIX_ORIGIN = 0x1a,
	NLA_DATA_TYPE_IF_IP_SUFFIX_ORIGIN = 0x1b,
	NLA_DATA_TYPE_IGD_AVAILABLE = 0x1c,
	NLA_DATA_TYPE_IF_PRIVATE = 0x1d,
	NLA_DATA_TYPE_WWAN_NETWORK_ID = 0x1e,
	NLA_DATA_TYPE_WWAN_NETWORK_NAME = 0x1f,
	NLA_DATA_TYPE_WWAN_STABLE = 0x20,
	NLA_DATA_TYPE_CONNECTION_COST = 0x21,
	NLA_DATA_TYPE_PROFILE_DATA = 0x22,
	NLA_DATA_TYPE_MAX = 0x23
};

struct _NLA_DS_INFO {
	/*0000*/ WCHAR DomainName[0x100];
	/*0200*/ WCHAR ForestName[0x100];
	/*0400*/ UCHAR DomainGuidHash[0x20];
	/*0420*/ UCHAR RootDomainGuidHash[0x20];
	/*0440*/
};

struct _NLA_EAP_TLVS {
	/*0000*/ ULONG dwSize;
	/*0004*/ UCHAR nlaEapTlvs[0x1000];
	/*1004*/
};

struct _NLA_INTERNET_CAPABILITY {
	/*0000*/ _CONNECTIVITY_CAPABILITY CapabilityV4;
	/*0004*/ ULONG AgeV4;
	/*0008*/ ULONG FlagsV4;
	/*000c*/ _CONNECTIVITY_CAPABILITY CapabilityV6;
	/*0010*/ ULONG AgeV6;
	/*0014*/ ULONG FlagsV6;
	/*0018*/
};

struct _NLA_ONEX {
	/*0000*/ _ONEX_AUTH_STATUS OneXStatus;
	/*0004*/ _ONEX_AUTH_IDENTITY OneXIdentity;
	/*0008*/ _NLA_EAP_TLVS EapTlvs;
	/*100c*/
};

enum _NLA_OPERATOR {
	NLA_OPERATOR_EQUAL = 0x0,
	NLA_OPERATOR_NOTEQUAL = 0x1,
	NLA_OPERATOR_AND = 0x2,
	NLA_OPERATOR_OR = 0x3
};

struct _NLA_QUERY_FILTER {
	/*0000*/ _NLA_OPERATOR Operator;
	/*0008*/ UCHAR * Reserved;
	/*0010*/ ULONG Count;
	/*0018*/ _NLA_QUERY_FILTER * * ppOperands;
	/*0010*/ _NLA_DATA * pData;
	/*0020*/
};

enum _NLA_SIGNATURE_FLAGS {
	NLA_NET_SIGNATURE_NET_ID = 0x1,
	NLA_NET_SIGNATURE_LINK_ID = 0x2,
	NLA_NET_SIGNATURE_HOP_ID = 0x4,
	NLA_NET_SIGNATURE_ALL = 0x7
};

enum _NLA_SIGNATURE_SOURCE {
	NLA_SIGNATURE_SOURCE_UNIDENTIFIED = 0x1,
	NLA_SIGNATURE_SOURCE_IDENTIFYING = 0x2,
	NLA_SIGNATURE_SOURCE_RANDOM = 0x4,
	NLA_SIGNATURE_SOURCE_GATEWAY_MAC = 0x8,
	NLA_SIGNATURE_SOURCE_DOMAIN_GUID = 0x10,
	NLA_SIGNATURE_SOURCE_ROOT_DOMAIN_GUID = 0x20,
	NLA_SIGNATURE_SOURCE_DOMAIN_NAME = 0x40,
	NLA_SIGNATURE_SOURCE_FOREST_NAME = 0x80,
	NLA_SIGNATURE_SOURCE_DNS_SUFFIX = 0x100,
	NLA_SIGNATURE_SOURCE_LOCAL_INTERFACE_ID = 0x200,
	NLA_SIGNATURE_SOURCE_WLAN_SSID = 0x400,
	NLA_SIGNATURE_SOURCE_WLAN_PROFILE = 0x800,
	NLA_SIGNATURE_SOURCE_WWAN = 0x1000,
	NLA_SIGNATURE_SOURCE_SECURITY_DOWNGRADE = 0x10000,
	NLA_SIGNATURE_SOURCE_PRIVATE = 0x10000000,
	NLA_SIGNATURE_SOURCE_SECONDARY = 0x20000000
};

enum _NLA_STABLE_STATE {
	NLA_STABLE_UNKNOWN = 0x0,
	NLA_STABLE_STABLE = 0x1,
	NLA_STABLE_GAVE_UP = 0x2,
	NLA_STABLE_TRYING = 0x3
};

enum _NLA_TRI_STATE {
	NLA_TRI_STATE_FALSE = 0x0,
	NLA_TRI_STATE_TRUE = 0x1,
	NLA_TRI_STATE_UNKNOWN = 0x2
};

struct _NLA_USAGE_DATA {
	/*0000*/ ULONG usageInMegabytes;
	/*0004*/ _FILETIME lastSyncTime;
	/*000c*/
};

struct _NLA_WLAN_CONNECTION_INFO {
	/*0000*/ _WLAN_CONNECTION_ATTRIBUTES ConnectionAttributes;
	/*025c*/ ULONG CurrentOpMode;
	/*0260*/ INT bWFDIntraBSSDistributionSupported;
	/*0264*/ INT bWFDCrossConnectionSupported;
	/*0268*/
};

struct _NLSTABLEINFO {
	/*0000*/ _CPTABLEINFO OemTableInfo;
	/*0040*/ _CPTABLEINFO AnsiTableInfo;
	/*0080*/ WCHAR * UpperCaseTable;
	/*0088*/ WCHAR * LowerCaseTable;
	/*0090*/
};

enum _NL_BANDWIDTH_DIRECTION {
	NlBwDirectionInbound = 0x0,
	NlBwDirectionOutbound = 0x1,
	NlBwDirectionMax = 0x2
};

enum _NL_BANDWIDTH_FLAG {
	NlbwDisabled = 0x0,
	NlbwEnabled = 0x1,
	NlbwUnchanged = 0xffffffff
};

struct _NL_BANDWIDTH_INFORMATION {
	/*0000*/ ULONGLONG Bandwidth;
	/*0008*/ ULONGLONG Instability;
	/*0010*/ UCHAR BandwidthPeaked;
	/*0018*/
};

struct _NL_COMPARTMENT_RW {
	/*0000*/ NL_COMPARTMENT_FORWARDING Forwarding;
	/*0004*/ UCHAR WeakHostSend;
	/*0005*/ UCHAR WeakHostReceive;
	/*0008*/ ULONG DefaultHopLimit;
	/*000c*/ UCHAR MulticastForwarding;
	/*000d*/ UCHAR GroupForwardedFragments;
	/*000e*/ UCHAR Layer2Forwarding;
	/*0010*/
};

enum _NL_DOMAIN_NETWORK_LOCATION {
	DomainNetworkLocationRemote = 0x0,
	DomainNetworkCategoryLink = 0x1,
	DomainNetworkUnchanged = 0xffffffff
};

enum _NL_DOMAIN_TYPE {
	DomainTypeNonDomainNetwork = 0x0,
	DomainTypeDomainNetwork = 0x1,
	DomainTypeDomainAuthenticated = 0x2,
	DomainTypeUnchanged = 0xffffffff
};

struct _NL_GLOBAL_RW {
	/*0000*/ NL_TEMPORARY_ADDRESS_MODE UseTemporaryAddresses;
	/*0004*/ ULONG MaxTemporaryDesynchronizationTime;
	/*0008*/ ULONG MaxTemporaryValidLifetime;
	/*000c*/ ULONG MaxTemporaryPreferredLifetime;
	/*0010*/ ULONG MaxTemporaryDadAttempts;
	/*0014*/ ULONG TemporaryRegenerateTime;
	/*0018*/ ULONG DefaultHopLimit;
	/*001c*/ ULONG NeighborCacheLimit;
	/*0020*/ ULONG PathCacheLimit;
	/*0024*/ ULONG ReassemblyLimit;
	/*0028*/ ULONG RouteTableLimit;
	/*002c*/ UCHAR Installed;
	/*0030*/ ULONG DeadRouteProbeTimeout;
	/*0034*/ ULONG DeadRouteTimeout;
	/*0038*/ ULONG PathUnreachableTimeout;
	/*003c*/ ULONG DeadRouteProbeTrafficPercent;
	/*0040*/ _NL_LINK_LOCAL_ADDRESS_BEHAVIOR LinkLocalAddressBehavior;
	/*0044*/ _IP_ADDRESS_STORAGE LinkLocalAddressPrefix;
	/*0054*/ ULONG LinkLocalAddressPrefixLength;
	/*0058*/ NL_SOURCE_ROUTING_BEHAVIOR SourceRoutingBehavior;
	/*005c*/ NL_MLD_LEVEL MldLevel;
	/*0060*/ NL_MLD_VERSION MldVersion;
	/*0064*/ ULONG DadTransmits;
	/*0068*/ UCHAR EnableForwarding;
	/*0069*/ UCHAR EnableIcmpRedirects;
	/*006a*/ UCHAR EnableAddrMaskReply;
	/*006b*/ UCHAR DisableTaskOffload;
	/*006c*/ UCHAR EnableNonUnicastDatalinkAddresses;
	/*006d*/ UCHAR DisableMediaSense;
	/*006e*/ UCHAR DisableMediaSenseEventLog;
	/*006f*/ UCHAR EnableMulticastForwarding;
	/*0070*/ UCHAR GroupForwardedFragments;
	/*0071*/ UCHAR RandomizeIdentifiers;
	/*0072*/ UCHAR UseEthernetSnap;
	/*0073*/ UCHAR OverrideDefaultAddressSelection;
	/*0074*/ UCHAR LimitAutoConfiguredAddressRoute;
	/*0078*/ ULONG MinimumMtu;
	/*007c*/ UCHAR EnableDeadGatewayDetection;
	/*007d*/ UCHAR MaxSuspectPathReachabilityCount;
	/*007e*/ UCHAR MaxDeadRouteProbeTraffic;
	/*007f*/ UCHAR OverrideLocalityAddressSelection;
	/*0080*/ UCHAR EnableFlowLabel;
	/*0081*/ UCHAR EnableLoopbackLargeMtu;
	/*0082*/ UCHAR LoopbackWorkerCount;
	/*0084*/ NL_LOOPBACK_EXECUTION_MODE LoopbackExecutionMode;
	/*0088*/ UCHAR EnableSourceBasedEcmp;
	/*008a*/ USHORT ReassemblyOutOfOrderLimit;
	/*008c*/
};

enum _NL_INTERFACE_ECN_CAPABILITY {
	NlInterfaceEcnUnchanged = 0xffffffff,
	NlInterfaceEcnDisabled = 0x0,
	NlInterfaceEcnUseEct1 = 0x1,
	NlInterfaceEcnUseEct0 = 0x2,
	NlInterfaceEcnAppDecide = 0x3
};

enum _NL_INTERFACE_NETWORK_CATEGORY_STATE {
	NlincCategoryUnknown = 0x0,
	NlincPublic = 0x1,
	NlincPrivate = 0x2,
	NlincDomainAuthenticated = 0x3,
	NlincCategoryStateMax = 0x4
};

struct _NL_INTERFACE_OFFLOAD_ROD {
	/*0000*/ UCHAR NlChecksumSupported : 01; // 0x01;
	/*0000*/ UCHAR NlOptionsSupported : 01; // 0x02;
	/*0000*/ UCHAR TlDatagramChecksumSupported : 01; // 0x04;
	/*0000*/ UCHAR TlStreamChecksumSupported : 01; // 0x08;
	/*0000*/ UCHAR TlStreamOptionsSupported : 01; // 0x10;
	/*0000*/ UCHAR FastPathCompatible : 01; // 0x20;
	/*0000*/ UCHAR TlLargeSendOffloadSupported : 01; // 0x40;
	/*0000*/ UCHAR TlGiantSendOffloadSupported : 01; // 0x80;
	/*0001*/
};

struct _NL_INTERFACE_RW {
	/*0000*/ UCHAR AdvertisingEnabled;
	/*0001*/ UCHAR ForwardingEnabled;
	/*0002*/ UCHAR MulticastForwardingEnabled;
	/*0003*/ UCHAR WeakHostSend;
	/*0004*/ UCHAR WeakHostReceive;
	/*0005*/ UCHAR UseNeighborUnreachabilityDetection;
	/*0006*/ UCHAR UseAutomaticMetric;
	/*0007*/ UCHAR UseZeroBroadcastAddress;
	/*0008*/ UCHAR UseBroadcastForRouterDiscovery;
	/*0009*/ UCHAR DhcpRouterDiscoveryEnabled;
	/*000a*/ UCHAR ManagedAddressConfigurationSupported;
	/*000b*/ UCHAR OtherStatefulConfigurationSupported;
	/*000c*/ UCHAR AdvertiseDefaultRoute;
	/*0010*/ _NL_NETWORK_CATEGORY NetworkCategory;
	/*0014*/ _NL_ROUTER_DISCOVERY_BEHAVIOR RouterDiscoveryBehavior;
	/*0018*/ _NL_TYPE_OF_INTERFACE TypeOfInterface;
	/*001c*/ ULONG Metric;
	/*0020*/ ULONG BaseReachableTime;
	/*0024*/ ULONG RetransmitTime;
	/*0028*/ ULONG PathMtuDiscoveryTimeout;
	/*002c*/ ULONG DadTransmits;
	/*0030*/ _NL_LINK_LOCAL_ADDRESS_BEHAVIOR LinkLocalAddressBehavior;
	/*0034*/ ULONG LinkLocalAddressTimeout;
	/*0038*/ ULONG ZoneIndices[0x10];
	/*0078*/ ULONG NlMtu;
	/*007c*/ ULONG SitePrefixLength;
	/*0080*/ ULONG MulticastForwardingHopLimit;
	/*0084*/ ULONG CurrentHopLimit;
	/*0088*/ _IP_ADDRESS_STORAGE LinkLocalAddress;
	/*0098*/ UCHAR DisableDefaultRoutes;
	/*009c*/ ULONG AdvertisedRouterLifetime;
	/*00a0*/ UCHAR SendUnsolicitedNeighborAdvertisementOnDad;
	/*00a1*/ UCHAR LimitedLinkConnectivity;
	/*00a2*/ UCHAR ForceARPNDPattern;
	/*00a3*/ UCHAR EnableDirectMACPattern;
	/*00a4*/ UCHAR EnableWol;
	/*00a5*/ UCHAR ForceTunneling;
	/*00a8*/ _NL_DOMAIN_NETWORK_LOCATION DomainNetworkLocation;
	/*00b0*/ ULONGLONG RandomizedEpoch;
	/*00b8*/ _NL_INTERFACE_ECN_CAPABILITY EcnCapability;
	/*00bc*/ _NL_DOMAIN_TYPE DomainType;
	/*00c0*/ _GUID NetworkSignature;
	/*00d0*/ _NL_INTERNET_CONNECTIVITY_STATUS InternetConnectivityDetected;
	/*00d4*/ UCHAR ProxyDetected;
	/*00d8*/ ULONG DadRetransmitTime;
	/*00dc*/ UCHAR PrefixSharing;
	/*00dd*/ _NL_ROUTING_FLAGS RoutingFlags;
	/*00e0*/ ULONG NetworkContext;
	/*00e4*/ UCHAR ResetAutoconfigurationOnOperStatusDown;
	/*00e5*/ UCHAR ClampMssEnabled;
	/*00e6*/ UCHAR DnsAutoConfigurationEnabled;
	/*00e7*/ UCHAR DhcpStaticIPCoexistence;
	/*00e8*/ UCHAR IcmpRedirectEnabled;
	/*00e9*/ UCHAR PromiscuousMode;
	/*00ea*/ UCHAR MulticastPromiscuousMode;
	/*00f0*/
};

enum _NL_INTERNET_CONNECTIVITY_STATUS {
	NlNoInternetConnectivity = 0x0,
	NlNoInternetDnsResolutionSucceeded = 0x1,
	NlInternetConnectivityDetected = 0x2,
	NlInternetConnectivityUnknown = 0xffffffff
};

enum _NL_LINK_LOCAL_ADDRESS_BEHAVIOR {
	LinkLocalAlwaysOff = 0x0,
	LinkLocalDelayed = 0x1,
	LinkLocalAlwaysOn = 0x2,
	LinkLocalUnchanged = 0xffffffff
};

struct _NL_LOCAL_BOTTLENECK_INFORMATION {
	/*0000*/ _NL_BANDWIDTH_INFORMATION BwInformation[0x2];
	/*0030*/
};

struct _NL_LOCAL_UNICAST_ADDRESS_RW {
	/*0000*/ ULONG PreferredLifetime;
	/*0004*/ ULONG ValidLifetime;
	/*0008*/ NL_PREFIX_ORIGIN PrefixOrigin;
	/*000c*/ NL_SUFFIX_ORIGIN SuffixOrigin;
	/*0010*/ UCHAR OnLinkPrefixLength;
	/*0011*/ UCHAR SkipAsSource;
	/*0014*/ ULONG SourceAddressPreference;
	/*0018*/ UCHAR ConfigureTunnelAddressForSkipAsSource;
	/*0019*/ UCHAR OptimisticDad;
	/*001c*/
};

struct _NL_MFE_OUTGOING_INTERFACE {
	/*0000*/ ULONG OutgoingInterfaceIndex;
	/*0004*/ ULONG OutgoingSubInterfaceIndex;
	/*0008*/
};

struct _NL_MFE_RW {
	/*0000*/ ULONG IncomingInterfaceIndex;
	/*0004*/ ULONG TimeOut;
	/*0008*/ ULONG NumberOfOutgoingInterfaces;
	/*000c*/ _NL_MFE_OUTGOING_INTERFACE OutgoingInterfaces[0x100];
	/*080c*/
};

struct _NL_NEIGHBOR_RW {
	/*0000*/ UCHAR DlAddress[0x20];
	/*0020*/
};

enum _NL_NEIGHBOR_STATE {
	NlnsUnreachable = 0x0,
	NlnsIncomplete = 0x1,
	NlnsProbe = 0x2,
	NlnsDelay = 0x3,
	NlnsStale = 0x4,
	NlnsReachable = 0x5,
	NlnsPermanent = 0x6,
	NlnsMaximum = 0x7
};

enum _NL_NETWORK_CATEGORY {
	NetworkCategoryPublic = 0x0,
	NetworkCategoryPrivate = 0x1,
	NetworkCategoryDomainAuthenticated = 0x2,
	NetworkCategoryUnchanged = 0xffffffff,
	NetworkCategoryUnknown = 0xffffffff
};

enum _NL_NETWORK_CONNECTIVITY_COST_HINT {
	NetworkConnectivityCostHintUnknown = 0x0,
	NetworkConnectivityCostHintUnrestricted = 0x1,
	NetworkConnectivityCostHintFixed = 0x2,
	NetworkConnectivityCostHintVariable = 0x3
};

struct _NL_NETWORK_CONNECTIVITY_HINT {
	/*0000*/ _NL_NETWORK_CONNECTIVITY_LEVEL_HINT ConnectivityLevel;
	/*0004*/ _NL_NETWORK_CONNECTIVITY_COST_HINT ConnectivityCost;
	/*0008*/ UCHAR ApproachingDataLimit;
	/*0009*/ UCHAR OverDataLimit;
	/*000a*/ UCHAR Roaming;
	/*000c*/
};

enum _NL_NETWORK_CONNECTIVITY_LEVEL_HINT {
	NetworkConnectivityLevelHintUnknown = 0x0,
	NetworkConnectivityLevelHintNone = 0x1,
	NetworkConnectivityLevelHintLocalAccess = 0x2,
	NetworkConnectivityLevelHintInternetAccess = 0x3,
	NetworkConnectivityLevelHintConstrainedInternetAccess = 0x4,
	NetworkConnectivityLevelHintHidden = 0x5
};

struct _NL_PATH_BANDWIDTH_ROD {
	/*0000*/ ULONGLONG Bandwidth;
	/*0008*/ ULONGLONG Instability;
	/*0010*/ UCHAR BandwidthPeaked;
	/*0018*/
};

enum _NL_PROTOCOL_TIMER {
	NlProtocolTimerIpv4 = 0x0,
	NlProtocolTimerIpv6 = 0x1,
	NlProtocolTimerMax = 0x2
};

enum _NL_ROUTER_DISCOVERY_BEHAVIOR {
	RouterDiscoveryDisabled = 0x0,
	RouterDiscoveryEnabled = 0x1,
	RouterDiscoveryDhcp = 0x2,
	RouterDiscoveryUnchanged = 0xffffffff
};

enum _NL_ROUTE_ORIGIN {
	NlroManual = 0x0,
	NlroWellKnown = 0x1,
	NlroDHCP = 0x2,
	NlroRouterAdvertisement = 0x3,
	Nlro6to4 = 0x4
};

struct _NL_ROUTE_RW {
	
	/*0000*/ UCHAR SitePrefixLength;
	/*0004*/ ULONG ValidLifetime;
	/*0008*/ ULONG PreferredLifetime;
	/*000c*/ ULONG Metric;
	/*0010*/ NL_ROUTE_PROTOCOL Protocol;
	/*0014*/ <unnamed-type-Flags> Flags;
	/*001c*/ _NL_ROUTE_STATE State;
	/*0020*/
};

enum _NL_ROUTE_STATE {
	RouteAlive = 0x0,
	RouteDead = 0x1,
	RouteProbe = 0x2
};

union _NL_ROUTING_FLAGS {
	/*0000*/ UCHAR Value;
	/*0000*/ UCHAR DisableUnconstrainedRouteLookup : 01; // 0x01;
	/*0000*/ UCHAR DisableUnconstrainedOffLinkRouteLookup : 01; // 0x02;
	/*0001*/
};

enum _NL_TIMER_TYPE {
	NlTimerTypePathSet = 0x0,
	NlTimerTypeRecalcuation = 0x1,
	NlTimerTypeAddressSet = 0x2,
	NlTimerTypeAnycastAdvertisement = 0x3,
	NlTimerTypeNeighborSet = 0x4,
	NlTimerTypeRouterDiscovery = 0x5,
	NlTimerTypeLinkLocalAddress = 0x6,
	NlTimerTypeMulticastDiscoveryV1 = 0x7,
	NlTimerTypeMulticastDiscoveryV2 = 0x8,
	NlTimerTypeMulticastReport = 0x9,
	NlTimerTypeMulticastGeneralQuery = 0xa,
	NlTimerTypeMulticastSpecificQuery = 0xb,
	NlTimerTypeRouteSet = 0xc,
	NlTimerTypeMfeSet = 0xd,
	NlTimerTypeEphemeralLoopbackAddressSet = 0xe,
	NlTimerTypeReassembly = 0xf,
	NlTimerTypeEchoRequest = 0x10,
	NlTimerTypePhysicalInterfaceRequest = 0x11,
	NlTimerTypeMax = 0x12
};

enum _NL_TYPE_OF_INTERFACE {
	InterfaceAllowAll = 0x0,
	InterfaceDisallowUnicast = 0x1,
	InterfaceDisallowMulticast = 0x2,
	InterfaceDisallowAll = 0x3,
	InterfaceUnchanged = 0xffffffff
};

enum _NMCII_FLAGS {
	NMCII_NONE = 0x0,
	NMCII_ITEMS = 0x1,
	NMCII_FOLDERS = 0x2
};

enum _NMCSAEI_FLAGS {
	NMCSAEI_SELECT = 0x0,
	NMCSAEI_EDIT = 0x1
};

struct _NMTBCUSTOMDRAW {
	/*0000*/ tagNMCUSTOMDRAWINFO nmcd;
	/*0050*/ HBRUSH__ * hbrMonoDither;
	/*0058*/ HBRUSH__ * hbrLines;
	/*0060*/ HPEN__ * hpenLines;
	/*0068*/ ULONG clrText;
	/*006c*/ ULONG clrMark;
	/*0070*/ ULONG clrTextHighlight;
	/*0074*/ ULONG clrBtnFace;
	/*0078*/ ULONG clrBtnHighlight;
	/*007c*/ ULONG clrHighlightHotTrack;
	/*0080*/ tagRECT rcText;
	/*0090*/ INT nStringBkMode;
	/*0094*/ INT nHLStringBkMode;
	/*0098*/ INT iListGap;
	/*00a0*/
};

struct _NM_UPDOWN {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iPos;
	/*001c*/ INT iDelta;
	/*0020*/
};

struct _NON_PAGED_DEBUG_INFO {
	/*0000*/ USHORT Signature;
	/*0002*/ USHORT Flags;
	/*0004*/ ULONG Size;
	/*0008*/ USHORT Machine;
	/*000a*/ USHORT Characteristics;
	/*000c*/ ULONG TimeDateStamp;
	/*0010*/ ULONG CheckSum;
	/*0014*/ ULONG SizeOfImage;
	/*0018*/ ULONGLONG ImageBase;
	/*0020*/
};

enum _NORM_FORM {
	NormalizationOther = 0x0,
	NormalizationC = 0x1,
	NormalizationD = 0x2,
	NormalizationKC = 0x5,
	NormalizationKD = 0x6
};

struct _NOTIFICATION {
	
	/*0000*/ ULONG ulEventType;
	/*0004*/ ULONG ulAlignPad;
	/*0008*/ <unnamed-type-info> info;
	/*0058*/
};

struct _NOTIFICATION_ENERGY {
	/*0000*/ ULONG BackgroundScreenOffmJ;
	/*0004*/ ULONG BackgroundScreenOnmJ;
	/*0008*/ ULONG ForegroundScreenOffmJ;
	/*000c*/ ULONG ForegroundScreenOnmJ;
	/*0010*/
};

union _NOTIFICATION_INFORMATION {
	/*0000*/ _NOTIFICATION_INFORMATION_DETAIL Detail;
	/*0000*/ ULONG ulNotificationInformation;
	/*0004*/
};

struct _NOTIFICATION_INFORMATION_DETAIL {
	/*0000*/ ULONG bmType : 04; // 0x0000000f;
	/*0000*/ ULONG bmTitleId : 04; // 0x000000f0;
	/*0000*/ ULONG bmDescriptionId : 04; // 0x00000f00;
	/*0000*/ ULONG bmButtonId : 04; // 0x0000f000;
	/*0000*/ ULONG Reserved : 16; // 0xffff0000;
	/*0004*/
};

struct _NPI_MODULEID {
	/*0000*/ USHORT Length;
	/*0004*/ _NPI_MODULEID_TYPE Type;
	/*0008*/ _GUID Guid;
	/*0008*/ _LUID IfLuid;
	/*0018*/
};

enum _NPI_MODULEID_TYPE {
	MIT_GUID = 0x1,
	MIT_IF_LUID = 0x2
};

enum _NSI_STORE {
	NsiPersistent = 0x0,
	NsiActive = 0x1,
	NsiBoth = 0x2,
	NsiCurrent = 0x3,
	NsiBootFirmwareTable = 0x4
};

enum _NSTCITEMSTATE {
	NSTCIS_NONE = 0x0,
	NSTCIS_SELECTED = 0x1,
	NSTCIS_EXPANDED = 0x2,
	NSTCIS_BOLD = 0x4,
	NSTCIS_DISABLED = 0x8,
	NSTCIS_SELECTEDNOEXPAND = 0x10
};

enum _NSTCROOTSTYLE {
	NSTCRS_VISIBLE = 0x0,
	NSTCRS_HIDDEN = 0x1,
	NSTCRS_EXPANDED = 0x2
};

enum _NSTCSTYLE {
	NSTCS_HASEXPANDOS = 0x1,
	NSTCS_HASLINES = 0x2,
	NSTCS_SINGLECLICKEXPAND = 0x4,
	NSTCS_FULLROWSELECT = 0x8,
	NSTCS_SPRINGEXPAND = 0x10,
	NSTCS_HORIZONTALSCROLL = 0x20,
	NSTCS_ROOTHASEXPANDO = 0x40,
	NSTCS_SHOWSELECTIONALWAYS = 0x80,
	NSTCS_NOINFOTIP = 0x200,
	NSTCS_EVENHEIGHT = 0x400,
	NSTCS_NOREPLACEOPEN = 0x800,
	NSTCS_DISABLEDRAGDROP = 0x1000,
	NSTCS_NOORDERSTREAM = 0x2000,
	NSTCS_RICHTOOLTIP = 0x4000,
	NSTCS_BORDER = 0x8000,
	NSTCS_NOEDITLABELS = 0x10000,
	NSTCS_TABSTOP = 0x20000,
	NSTCS_FAVORITESMODE = 0x80000,
	NSTCS_AUTOHSCROLL = 0x100000,
	NSTCS_FADEINOUTEXPANDOS = 0x200000,
	NSTCS_EMPTYTEXT = 0x400000,
	NSTCS_CHECKBOXES = 0x800000,
	NSTCS_PARTIALCHECKBOXES = 0x1000000,
	NSTCS_EXCLUSIONCHECKBOXES = 0x2000000,
	NSTCS_DIMMEDCHECKBOXES = 0x4000000,
	NSTCS_NOINDENTCHECKS = 0x8000000,
	NSTCS_ALLOWJUNCTIONS = 0x10000000,
	NSTCS_SHOWTABSBUTTON = 0x20000000,
	NSTCS_SHOWDELETEBUTTON = 0x40000000,
	NSTCS_SHOWREFRESHBUTTON = 0x80000000
};

struct _NTFS_STATISTICS {
	
	
	
	
	
	/*0000*/ ULONG LogFileFullExceptions;
	/*0004*/ ULONG OtherExceptions;
	/*0008*/ ULONG MftReads;
	/*000c*/ ULONG MftReadBytes;
	/*0010*/ ULONG MftWrites;
	/*0014*/ ULONG MftWriteBytes;
	/*0018*/ <unnamed-type-MftWritesUserLevel> MftWritesUserLevel;
	/*0020*/ USHORT MftWritesFlushForLogFileFull;
	/*0022*/ USHORT MftWritesLazyWriter;
	/*0024*/ USHORT MftWritesUserRequest;
	/*0028*/ ULONG Mft2Writes;
	/*002c*/ ULONG Mft2WriteBytes;
	/*0030*/ <unnamed-type-Mft2WritesUserLevel> Mft2WritesUserLevel;
	/*0038*/ USHORT Mft2WritesFlushForLogFileFull;
	/*003a*/ USHORT Mft2WritesLazyWriter;
	/*003c*/ USHORT Mft2WritesUserRequest;
	/*0040*/ ULONG RootIndexReads;
	/*0044*/ ULONG RootIndexReadBytes;
	/*0048*/ ULONG RootIndexWrites;
	/*004c*/ ULONG RootIndexWriteBytes;
	/*0050*/ ULONG BitmapReads;
	/*0054*/ ULONG BitmapReadBytes;
	/*0058*/ ULONG BitmapWrites;
	/*005c*/ ULONG BitmapWriteBytes;
	/*0060*/ USHORT BitmapWritesFlushForLogFileFull;
	/*0062*/ USHORT BitmapWritesLazyWriter;
	/*0064*/ USHORT BitmapWritesUserRequest;
	/*0066*/ <unnamed-type-BitmapWritesUserLevel> BitmapWritesUserLevel;
	/*006c*/ ULONG MftBitmapReads;
	/*0070*/ ULONG MftBitmapReadBytes;
	/*0074*/ ULONG MftBitmapWrites;
	/*0078*/ ULONG MftBitmapWriteBytes;
	/*007c*/ USHORT MftBitmapWritesFlushForLogFileFull;
	/*007e*/ USHORT MftBitmapWritesLazyWriter;
	/*0080*/ USHORT MftBitmapWritesUserRequest;
	/*0082*/ <unnamed-type-MftBitmapWritesUserLevel> MftBitmapWritesUserLevel;
	/*008c*/ ULONG UserIndexReads;
	/*0090*/ ULONG UserIndexReadBytes;
	/*0094*/ ULONG UserIndexWrites;
	/*0098*/ ULONG UserIndexWriteBytes;
	/*009c*/ ULONG LogFileReads;
	/*00a0*/ ULONG LogFileReadBytes;
	/*00a4*/ ULONG LogFileWrites;
	/*00a8*/ ULONG LogFileWriteBytes;
	/*00ac*/ <unnamed-type-Allocate> Allocate;
	/*00d4*/ ULONG DiskResourcesExhausted;
	/*00d8*/
};

struct _NTFS_STATISTICS_EX {
	
	
	
	
	
	/*0000*/ ULONG LogFileFullExceptions;
	/*0004*/ ULONG OtherExceptions;
	/*0008*/ ULONGLONG MftReads;
	/*0010*/ ULONGLONG MftReadBytes;
	/*0018*/ ULONGLONG MftWrites;
	/*0020*/ ULONGLONG MftWriteBytes;
	/*0028*/ <unnamed-type-MftWritesUserLevel> MftWritesUserLevel;
	/*0038*/ ULONG MftWritesFlushForLogFileFull;
	/*003c*/ ULONG MftWritesLazyWriter;
	/*0040*/ ULONG MftWritesUserRequest;
	/*0048*/ ULONGLONG Mft2Writes;
	/*0050*/ ULONGLONG Mft2WriteBytes;
	/*0058*/ <unnamed-type-Mft2WritesUserLevel> Mft2WritesUserLevel;
	/*0068*/ ULONG Mft2WritesFlushForLogFileFull;
	/*006c*/ ULONG Mft2WritesLazyWriter;
	/*0070*/ ULONG Mft2WritesUserRequest;
	/*0078*/ ULONGLONG RootIndexReads;
	/*0080*/ ULONGLONG RootIndexReadBytes;
	/*0088*/ ULONGLONG RootIndexWrites;
	/*0090*/ ULONGLONG RootIndexWriteBytes;
	/*0098*/ ULONGLONG BitmapReads;
	/*00a0*/ ULONGLONG BitmapReadBytes;
	/*00a8*/ ULONGLONG BitmapWrites;
	/*00b0*/ ULONGLONG BitmapWriteBytes;
	/*00b8*/ ULONG BitmapWritesFlushForLogFileFull;
	/*00bc*/ ULONG BitmapWritesLazyWriter;
	/*00c0*/ ULONG BitmapWritesUserRequest;
	/*00c4*/ <unnamed-type-BitmapWritesUserLevel> BitmapWritesUserLevel;
	/*00d8*/ ULONGLONG MftBitmapReads;
	/*00e0*/ ULONGLONG MftBitmapReadBytes;
	/*00e8*/ ULONGLONG MftBitmapWrites;
	/*00f0*/ ULONGLONG MftBitmapWriteBytes;
	/*00f8*/ ULONG MftBitmapWritesFlushForLogFileFull;
	/*00fc*/ ULONG MftBitmapWritesLazyWriter;
	/*0100*/ ULONG MftBitmapWritesUserRequest;
	/*0104*/ <unnamed-type-MftBitmapWritesUserLevel> MftBitmapWritesUserLevel;
	/*0118*/ ULONGLONG UserIndexReads;
	/*0120*/ ULONGLONG UserIndexReadBytes;
	/*0128*/ ULONGLONG UserIndexWrites;
	/*0130*/ ULONGLONG UserIndexWriteBytes;
	/*0138*/ ULONGLONG LogFileReads;
	/*0140*/ ULONGLONG LogFileReadBytes;
	/*0148*/ ULONGLONG LogFileWrites;
	/*0150*/ ULONGLONG LogFileWriteBytes;
	/*0158*/ <unnamed-type-Allocate> Allocate;
	/*0190*/ ULONG DiskResourcesExhausted;
	/*0198*/ ULONGLONG VolumeTrimCount;
	/*01a0*/ ULONGLONG VolumeTrimTime;
	/*01a8*/ ULONGLONG VolumeTrimByteCount;
	/*01b0*/ ULONGLONG FileLevelTrimCount;
	/*01b8*/ ULONGLONG FileLevelTrimTime;
	/*01c0*/ ULONGLONG FileLevelTrimByteCount;
	/*01c8*/ ULONGLONG VolumeTrimSkippedCount;
	/*01d0*/ ULONGLONG VolumeTrimSkippedByteCount;
	/*01d8*/ ULONGLONG NtfsFillStatInfoFromMftRecordCalledCount;
	/*01e0*/ ULONGLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
	/*01e8*/ ULONGLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;
	/*01f0*/
};

struct _NTPSS_MEMORY_BULK_INFORMATION {
	/*0000*/ ULONG QueryFlags;
	/*0004*/ ULONG NumberOfEntries;
	/*0008*/ void * NextValidAddress;
	/*0010*/
};

enum _NT_PRODUCT_TYPE {
	NtProductWinNt = 0x1,
	NtProductLanManNt = 0x2,
	NtProductServer = 0x3
};

struct _NT_TIB {
	/*0000*/ _EXCEPTION_REGISTRATION_RECORD * ExceptionList;
	/*0008*/ void * StackBase;
	/*0010*/ void * StackLimit;
	/*0018*/ void * SubSystemTib;
	/*0020*/ void * FiberData;
	/*0020*/ ULONG Version;
	/*0028*/ void * ArbitraryUserPointer;
	/*0030*/ _NT_TIB * Self;
	/*0038*/
};

struct _NT_TIB32 {
	/*0000*/ ULONG ExceptionList;
	/*0004*/ ULONG StackBase;
	/*0008*/ ULONG StackLimit;
	/*000c*/ ULONG SubSystemTib;
	/*0010*/ ULONG FiberData;
	/*0010*/ ULONG Version;
	/*0014*/ ULONG ArbitraryUserPointer;
	/*0018*/ ULONG Self;
	/*001c*/
};

struct _NT_TIB64 {
	/*0000*/ ULONGLONG ExceptionList;
	/*0008*/ ULONGLONG StackBase;
	/*0010*/ ULONGLONG StackLimit;
	/*0018*/ ULONGLONG SubSystemTib;
	/*0020*/ ULONGLONG FiberData;
	/*0020*/ ULONG Version;
	/*0028*/ ULONGLONG ArbitraryUserPointer;
	/*0030*/ ULONGLONG Self;
	/*0038*/
};

struct _NUMA_NODE_RELATIONSHIP {
	/*0000*/ ULONG NodeNumber;
	/*0004*/ UCHAR Reserved[0x14];
	/*0018*/ _GROUP_AFFINITY GroupMask;
	/*0028*/
};

struct _NV_MEMORY_RANGE {
	/*0000*/ void * BaseAddress;
	/*0008*/ ULONGLONG Length;
	/*0010*/
};

struct _OBJECTID {
	/*0000*/ _GUID Lineage;
	/*0010*/ ULONG Uniquifier;
	/*0014*/
};

struct _OBJECT_ATTRIBUTES {
	/*0000*/ ULONG Length;
	/*0008*/ void * RootDirectory;
	/*0010*/ _UNICODE_STRING * ObjectName;
	/*0018*/ ULONG Attributes;
	/*0020*/ void * SecurityDescriptor;
	/*0028*/ void * SecurityQualityOfService;
	/*0030*/
};

struct _OBJECT_ATTRIBUTES32 {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG RootDirectory;
	/*0008*/ ULONG ObjectName;
	/*000c*/ ULONG Attributes;
	/*0010*/ ULONG SecurityDescriptor;
	/*0014*/ ULONG SecurityQualityOfService;
	/*0018*/
};

struct _OBJECT_ATTRIBUTES64 {
	/*0000*/ ULONG Length;
	/*0008*/ ULONGLONG RootDirectory;
	/*0010*/ ULONGLONG ObjectName;
	/*0018*/ ULONG Attributes;
	/*0020*/ ULONGLONG SecurityDescriptor;
	/*0028*/ ULONGLONG SecurityQualityOfService;
	/*0030*/
};

struct _OBJECT_BASIC_INFORMATION {
	/*0000*/ ULONG Attributes;
	/*0004*/ ULONG GrantedAccess;
	/*0008*/ ULONG HandleCount;
	/*000c*/ ULONG PointerCount;
	/*0010*/ ULONG PagedPoolCharge;
	/*0014*/ ULONG NonPagedPoolCharge;
	/*0018*/ ULONG Reserved[0x3];
	/*0024*/ ULONG NameInfoSize;
	/*0028*/ ULONG TypeInfoSize;
	/*002c*/ ULONG SecurityDescriptorSize;
	/*0030*/ _LARGE_INTEGER CreationTime;
	/*0038*/
};

struct _OBJECT_DIRECTORY_INFORMATION {
	/*0000*/ _UNICODE_STRING Name;
	/*0010*/ _UNICODE_STRING TypeName;
	/*0020*/
};

struct _OBJECT_HANDLE_FLAG_INFORMATION {
	/*0000*/ UCHAR Inherit;
	/*0001*/ UCHAR ProtectFromClose;
	/*0002*/
};

enum _OBJECT_INFORMATION_CLASS {
	ObjectBasicInformation = 0x0,
	ObjectNameInformation = 0x1,
	ObjectTypeInformation = 0x2,
	ObjectTypesInformation = 0x3,
	ObjectHandleFlagInformation = 0x4,
	ObjectSessionInformation = 0x5,
	ObjectSessionObjectInformation = 0x6,
	MaxObjectInfoClass = 0x7
};

struct _OBJECT_NAME_INFORMATION {
	/*0000*/ _UNICODE_STRING Name;
	/*0010*/
};

struct _OBJECT_NOTIFICATION {
	/*0000*/ ULONG cbEntryID;
	/*0008*/ ENTRYID * lpEntryID;
	/*0010*/ ULONG ulObjType;
	/*0014*/ ULONG cbParentID;
	/*0018*/ ENTRYID * lpParentID;
	/*0020*/ ULONG cbOldID;
	/*0028*/ ENTRYID * lpOldID;
	/*0030*/ ULONG cbOldParentID;
	/*0038*/ ENTRYID * lpOldParentID;
	/*0040*/ _SPropTagArray * lpPropTagArray;
	/*0048*/
};

struct _OBJECT_TYPES_INFORMATION {
	/*0000*/ ULONG NumberOfTypes;
	/*0004*/
};

struct _OBJECT_TYPE_INFORMATION {
	/*0000*/ _UNICODE_STRING TypeName;
	/*0010*/ ULONG TotalNumberOfObjects;
	/*0014*/ ULONG TotalNumberOfHandles;
	/*0018*/ ULONG TotalPagedPoolUsage;
	/*001c*/ ULONG TotalNonPagedPoolUsage;
	/*0020*/ ULONG TotalNamePoolUsage;
	/*0024*/ ULONG TotalHandleTableUsage;
	/*0028*/ ULONG HighWaterNumberOfObjects;
	/*002c*/ ULONG HighWaterNumberOfHandles;
	/*0030*/ ULONG HighWaterPagedPoolUsage;
	/*0034*/ ULONG HighWaterNonPagedPoolUsage;
	/*0038*/ ULONG HighWaterNamePoolUsage;
	/*003c*/ ULONG HighWaterHandleTableUsage;
	/*0040*/ ULONG InvalidAttributes;
	/*0044*/ _GENERIC_MAPPING GenericMapping;
	/*0054*/ ULONG ValidAccessMask;
	/*0058*/ UCHAR SecurityRequired;
	/*0059*/ UCHAR MaintainHandleCount;
	/*005a*/ UCHAR TypeIndex;
	/*005b*/ CHAR ReservedByte;
	/*005c*/ ULONG PoolType;
	/*0060*/ ULONG DefaultPagedPoolCharge;
	/*0064*/ ULONG DefaultNonPagedPoolCharge;
	/*0068*/
};

struct _OBJECT_TYPE_LIST {
	/*0000*/ USHORT Level;
	/*0002*/ USHORT Sbz;
	/*0008*/ _GUID * ObjectType;
	/*0010*/
};

struct _OFFLOAD_ALGO_INFO {
	/*0000*/ ULONG algoIdentifier;
	/*0004*/ ULONG algoKeylen;
	/*0008*/ ULONG algoRounds;
	/*000c*/
};

enum _OFFLOAD_CONF_ALGO {
	OFFLOAD_IPSEC_CONF_NONE = 0x0,
	OFFLOAD_IPSEC_CONF_DES = 0x1,
	OFFLOAD_IPSEC_CONF_RESERVED = 0x2,
	OFFLOAD_IPSEC_CONF_3_DES = 0x3,
	OFFLOAD_IPSEC_CONF_MAX = 0x4
};

enum _OFFLOAD_INTEGRITY_ALGO {
	OFFLOAD_IPSEC_INTEGRITY_NONE = 0x0,
	OFFLOAD_IPSEC_INTEGRITY_MD5 = 0x1,
	OFFLOAD_IPSEC_INTEGRITY_SHA = 0x2,
	OFFLOAD_IPSEC_INTEGRITY_MAX = 0x3
};

struct _OFFLOAD_IPSEC_ADD_SA {
	/*0000*/ ULONG SrcAddr;
	/*0004*/ ULONG SrcMask;
	/*0008*/ ULONG DestAddr;
	/*000c*/ ULONG DestMask;
	/*0010*/ ULONG Protocol;
	/*0014*/ USHORT SrcPort;
	/*0016*/ USHORT DestPort;
	/*0018*/ ULONG SrcTunnelAddr;
	/*001c*/ ULONG DestTunnelAddr;
	/*0020*/ USHORT Flags;
	/*0022*/ SHORT NumSAs;
	/*0024*/ _OFFLOAD_SECURITY_ASSOCIATION SecAssoc[0x3];
	/*00a8*/ void * OffloadHandle;
	/*00b0*/ ULONG KeyLen;
	/*00b4*/ UCHAR KeyMat[0x1];
	/*00b8*/
};

struct _OFFLOAD_IPSEC_ADD_UDPESP_SA {
	/*0000*/ ULONG SrcAddr;
	/*0004*/ ULONG SrcMask;
	/*0008*/ ULONG DstAddr;
	/*000c*/ ULONG DstMask;
	/*0010*/ ULONG Protocol;
	/*0014*/ USHORT SrcPort;
	/*0016*/ USHORT DstPort;
	/*0018*/ ULONG SrcTunnelAddr;
	/*001c*/ ULONG DstTunnelAddr;
	/*0020*/ USHORT Flags;
	/*0022*/ SHORT NumSAs;
	/*0024*/ _OFFLOAD_SECURITY_ASSOCIATION SecAssoc[0x3];
	/*00a8*/ void * OffloadHandle;
	/*00b0*/ _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY EncapTypeEntry;
	/*00b8*/ void * EncapTypeEntryOffldHandle;
	/*00c0*/ ULONG KeyLen;
	/*00c4*/ UCHAR KeyMat[0x1];
	/*00c8*/
};

struct _OFFLOAD_IPSEC_DELETE_SA {
	/*0000*/ void * OffloadHandle;
	/*0008*/
};

struct _OFFLOAD_IPSEC_DELETE_UDPESP_SA {
	/*0000*/ void * OffloadHandle;
	/*0008*/ void * EncapTypeEntryOffldHandle;
	/*0010*/
};

struct _OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY {
	/*0000*/ _UDP_ENCAP_TYPE UdpEncapType;
	/*0004*/ USHORT DstEncapPort;
	/*0008*/
};

enum _OFFLOAD_OPERATION_E {
	AUTHENTICATE = 0x1,
	ENCRYPT = 0x2
};

struct _OFFLOAD_SECURITY_ASSOCIATION {
	/*0000*/ _OFFLOAD_OPERATION_E Operation;
	/*0004*/ ULONG SPI;
	/*0008*/ _OFFLOAD_ALGO_INFO IntegrityAlgo;
	/*0014*/ _OFFLOAD_ALGO_INFO ConfAlgo;
	/*0020*/ _OFFLOAD_ALGO_INFO Reserved;
	/*002c*/
};

struct _OFSTRUCT {
	/*0000*/ UCHAR cBytes;
	/*0001*/ UCHAR fFixedDisk;
	/*0002*/ USHORT nErrCode;
	/*0004*/ USHORT Reserved1;
	/*0006*/ USHORT Reserved2;
	/*0008*/ CHAR szPathName[0x80];
	/*0088*/
};

struct _OLESTREAM {
	/*0000*/ _OLESTREAMVTBL * lpstbl;
	/*0008*/
};

struct _OLESTREAMVTBL {
	/*0000*/ ULONG (* Get)( _OLESTREAM * , void * , ULONG );
	/*0008*/ ULONG (* Put)( _OLESTREAM * , void const * , ULONG );
	/*0010*/
};

enum _ONEX_AUTH_IDENTITY {
	OneXAuthIdentityNone = 0x0,
	OneXAuthIdentityMachine = 0x1,
	OneXAuthIdentityUser = 0x2,
	OneXAuthIdentityExplicitUser = 0x3,
	OneXAuthIdentityGuest = 0x4,
	OneXAuthIdentityInvalid = 0x5
};

struct _ONEX_AUTH_PARAMS {
	/*0000*/ INT fUpdatePending;
	/*0004*/ _ONEX_VARIABLE_BLOB oneXConnProfile;
	/*000c*/ _ONEX_AUTH_IDENTITY authIdentity;
	/*0010*/ ULONG dwQuarantineState;
	/*0014*/ ULONG fSessionId : 01; // 0x00000001;
	/*0014*/ ULONG fhUserToken : 01; // 0x00000002;
	/*0014*/ ULONG fOnexUserProfile : 01; // 0x00000004;
	/*0014*/ ULONG fIdentity : 01; // 0x00000008;
	/*0014*/ ULONG fUserName : 01; // 0x00000010;
	/*0014*/ ULONG fDomain : 01; // 0x00000020;
	/*0018*/ ULONG dwSessionId;
	/*0020*/ void * hUserToken;
	/*0028*/ _ONEX_VARIABLE_BLOB OneXUserProfile;
	/*0030*/ _ONEX_VARIABLE_BLOB Identity;
	/*0038*/ _ONEX_VARIABLE_BLOB UserName;
	/*0040*/ _ONEX_VARIABLE_BLOB Domain;
	/*0048*/
};

enum _ONEX_AUTH_RESTART_REASON {
	OneXRestartReasonPeerInitiated = 0x0,
	OneXRestartReasonMsmInitiated = 0x1,
	OneXRestartReasonOneXHeldStateTimeout = 0x2,
	OneXRestartReasonOneXAuthTimeout = 0x3,
	OneXRestartReasonOneXConfigurationChanged = 0x4,
	OneXRestartReasonOneXUserChanged = 0x5,
	OneXRestartReasonQuarantineStateChanged = 0x6,
	OneXRestartReasonAltCredsTrial = 0x7,
	OneXRestartReasonInvalid = 0x8
};

enum _ONEX_AUTH_STATUS {
	OneXAuthNotStarted = 0x0,
	OneXAuthInProgress = 0x1,
	OneXAuthNoAuthenticatorFound = 0x2,
	OneXAuthSuccess = 0x3,
	OneXAuthFailure = 0x4,
	OneXAuthInvalid = 0x5
};

struct _ONEX_EAP_ERROR {
	/*0000*/ ULONG dwWinError;
	/*0004*/ _EAP_METHOD_TYPE type;
	/*0014*/ ULONG dwReasonCode;
	/*0018*/ _GUID rootCauseGuid;
	/*0028*/ _GUID repairGuid;
	/*0038*/ _GUID helpLinkGuid;
	/*0048*/ ULONG fRootCauseString : 01; // 0x00000001;
	/*0048*/ ULONG fRepairString : 01; // 0x00000002;
	/*004c*/ _ONEX_VARIABLE_BLOB RootCauseString;
	/*0054*/ _ONEX_VARIABLE_BLOB RepairString;
	/*005c*/
};

enum _ONEX_EAP_METHOD_BACKEND_SUPPORT {
	OneXEapMethodBackendSupportUnknown = 0x0,
	OneXEapMethodBackendSupported = 0x1,
	OneXEapMethodBackendUnsupported = 0x2
};

enum _ONEX_NOTIFICATION_TYPE {
	OneXPublicNotificationBase = 0x0,
	OneXNotificationTypeResultUpdate = 0x1,
	OneXNotificationTypeAuthRestarted = 0x2,
	OneXNotificationTypeEventInvalid = 0x3,
	OneXNumNotifications = 0x3
};

enum _ONEX_REASON_CODE {
	ONEX_REASON_CODE_SUCCESS = 0x0,
	ONEX_REASON_START = 0x50000,
	ONEX_UNABLE_TO_IDENTIFY_USER = 0x50001,
	ONEX_IDENTITY_NOT_FOUND = 0x50002,
	ONEX_UI_DISABLED = 0x50003,
	ONEX_UI_FAILURE = 0x50004,
	ONEX_EAP_FAILURE_RECEIVED = 0x50005,
	ONEX_AUTHENTICATOR_NO_LONGER_PRESENT = 0x50006,
	ONEX_NO_RESPONSE_TO_IDENTITY = 0x50007,
	ONEX_PROFILE_VERSION_NOT_SUPPORTED = 0x50008,
	ONEX_PROFILE_INVALID_LENGTH = 0x50009,
	ONEX_PROFILE_DISALLOWED_EAP_TYPE = 0x5000a,
	ONEX_PROFILE_INVALID_EAP_TYPE_OR_FLAG = 0x5000b,
	ONEX_PROFILE_INVALID_ONEX_FLAGS = 0x5000c,
	ONEX_PROFILE_INVALID_TIMER_VALUE = 0x5000d,
	ONEX_PROFILE_INVALID_SUPPLICANT_MODE = 0x5000e,
	ONEX_PROFILE_INVALID_AUTH_MODE = 0x5000f,
	ONEX_PROFILE_INVALID_EAP_CONNECTION_PROPERTIES = 0x50010,
	ONEX_UI_CANCELLED = 0x50011,
	ONEX_PROFILE_INVALID_EXPLICIT_CREDENTIALS = 0x50012,
	ONEX_PROFILE_EXPIRED_EXPLICIT_CREDENTIALS = 0x50013,
	ONEX_UI_NOT_PERMITTED = 0x50014
};

struct _ONEX_RESULT_UPDATE_DATA {
	/*0000*/ _ONEX_STATUS oneXStatus;
	/*000c*/ _ONEX_EAP_METHOD_BACKEND_SUPPORT BackendSupport;
	/*0010*/ INT fBackendEngaged;
	/*0014*/ ULONG fOneXAuthParams : 01; // 0x00000001;
	/*0014*/ ULONG fEapError : 01; // 0x00000002;
	/*0018*/ _ONEX_VARIABLE_BLOB authParams;
	/*0020*/ _ONEX_VARIABLE_BLOB eapError;
	/*0028*/
};

struct _ONEX_STATUS {
	/*0000*/ _ONEX_AUTH_STATUS authStatus;
	/*0004*/ ULONG dwReason;
	/*0008*/ ULONG dwError;
	/*000c*/
};

struct _ONEX_USER_INFO {
	/*0000*/ _ONEX_AUTH_IDENTITY authIdentity;
	/*0004*/ ULONG fUserName : 01; // 0x00000001;
	/*0004*/ ULONG fDomainName : 01; // 0x00000002;
	/*0008*/ _ONEX_VARIABLE_BLOB UserName;
	/*0010*/ _ONEX_VARIABLE_BLOB DomainName;
	/*0018*/
};

struct _ONEX_VARIABLE_BLOB {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwOffset;
	/*0008*/
};

struct _OPERATION_END_PARAMETERS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG OperationId;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _OPERATION_START_PARAMETERS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG OperationId;
	/*0008*/ ULONG Flags;
	/*000c*/
};

enum _OPPROGDLGF {
	OPPROGDLG_DEFAULT = 0x0,
	OPPROGDLG_ENABLEPAUSE = 0x80,
	OPPROGDLG_ALLOWUNDO = 0x100,
	OPPROGDLG_DONTDISPLAYSOURCEPATH = 0x200,
	OPPROGDLG_DONTDISPLAYDESTPATH = 0x400,
	OPPROGDLG_NOMULTIDAYESTIMATES = 0x800,
	OPPROGDLG_DONTDISPLAYLOCATIONS = 0x1000
};

struct _OSVERSIONINFOA {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ CHAR szCSDVersion[0x80];
	/*0094*/
};

struct _OSVERSIONINFOEX2A {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ CHAR szCSDVersion[0x80];
	/*0094*/ USHORT wServicePackMajor;
	/*0096*/ USHORT wServicePackMinor;
	/*0098*/ USHORT wSuiteMask;
	/*009a*/ UCHAR wProductType;
	/*009b*/ UCHAR wReserved;
	/*009c*/ ULONG wSuiteMaskEx;
	/*00a0*/ ULONG wReserved2;
	/*00a4*/
};

struct _OSVERSIONINFOEX2W {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ WCHAR szCSDVersion[0x80];
	/*0114*/ USHORT wServicePackMajor;
	/*0116*/ USHORT wServicePackMinor;
	/*0118*/ USHORT wSuiteMask;
	/*011a*/ UCHAR wProductType;
	/*011b*/ UCHAR wReserved;
	/*011c*/ ULONG wSuiteMaskEx;
	/*0120*/ ULONG wReserved2;
	/*0124*/
};

struct _OSVERSIONINFOEXA {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ CHAR szCSDVersion[0x80];
	/*0094*/ USHORT wServicePackMajor;
	/*0096*/ USHORT wServicePackMinor;
	/*0098*/ USHORT wSuiteMask;
	/*009a*/ UCHAR wProductType;
	/*009b*/ UCHAR wReserved;
	/*009c*/
};

struct _OSVERSIONINFOEXW {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ WCHAR szCSDVersion[0x80];
	/*0114*/ USHORT wServicePackMajor;
	/*0116*/ USHORT wServicePackMinor;
	/*0118*/ USHORT wSuiteMask;
	/*011a*/ UCHAR wProductType;
	/*011b*/ UCHAR wReserved;
	/*011c*/
};

struct _OSVERSIONINFOW {
	/*0000*/ ULONG dwOSVersionInfoSize;
	/*0004*/ ULONG dwMajorVersion;
	/*0008*/ ULONG dwMinorVersion;
	/*000c*/ ULONG dwBuildNumber;
	/*0010*/ ULONG dwPlatformId;
	/*0014*/ WCHAR szCSDVersion[0x80];
	/*0114*/
};

enum _OS_DEPLOYEMENT_STATE_VALUES {
	OS_DEPLOYMENT_STANDARD = 0x1,
	OS_DEPLOYMENT_COMPACT = 0x2
};

struct _OUTLINETEXTMETRICA {
	/*0000*/ UINT otmSize;
	/*0004*/ tagTEXTMETRICA otmTextMetrics;
	/*003c*/ UCHAR otmFiller;
	/*003d*/ tagPANOSE otmPanoseNumber;
	/*0048*/ UINT otmfsSelection;
	/*004c*/ UINT otmfsType;
	/*0050*/ INT otmsCharSlopeRise;
	/*0054*/ INT otmsCharSlopeRun;
	/*0058*/ INT otmItalicAngle;
	/*005c*/ UINT otmEMSquare;
	/*0060*/ INT otmAscent;
	/*0064*/ INT otmDescent;
	/*0068*/ UINT otmLineGap;
	/*006c*/ UINT otmsCapEmHeight;
	/*0070*/ UINT otmsXHeight;
	/*0074*/ tagRECT otmrcFontBox;
	/*0084*/ INT otmMacAscent;
	/*0088*/ INT otmMacDescent;
	/*008c*/ UINT otmMacLineGap;
	/*0090*/ UINT otmusMinimumPPEM;
	/*0094*/ tagPOINT otmptSubscriptSize;
	/*009c*/ tagPOINT otmptSubscriptOffset;
	/*00a4*/ tagPOINT otmptSuperscriptSize;
	/*00ac*/ tagPOINT otmptSuperscriptOffset;
	/*00b4*/ UINT otmsStrikeoutSize;
	/*00b8*/ INT otmsStrikeoutPosition;
	/*00bc*/ INT otmsUnderscoreSize;
	/*00c0*/ INT otmsUnderscorePosition;
	/*00c8*/ CHAR * otmpFamilyName;
	/*00d0*/ CHAR * otmpFaceName;
	/*00d8*/ CHAR * otmpStyleName;
	/*00e0*/ CHAR * otmpFullName;
	/*00e8*/
};

struct _OUTLINETEXTMETRICW {
	/*0000*/ UINT otmSize;
	/*0004*/ tagTEXTMETRICW otmTextMetrics;
	/*0040*/ UCHAR otmFiller;
	/*0041*/ tagPANOSE otmPanoseNumber;
	/*004c*/ UINT otmfsSelection;
	/*0050*/ UINT otmfsType;
	/*0054*/ INT otmsCharSlopeRise;
	/*0058*/ INT otmsCharSlopeRun;
	/*005c*/ INT otmItalicAngle;
	/*0060*/ UINT otmEMSquare;
	/*0064*/ INT otmAscent;
	/*0068*/ INT otmDescent;
	/*006c*/ UINT otmLineGap;
	/*0070*/ UINT otmsCapEmHeight;
	/*0074*/ UINT otmsXHeight;
	/*0078*/ tagRECT otmrcFontBox;
	/*0088*/ INT otmMacAscent;
	/*008c*/ INT otmMacDescent;
	/*0090*/ UINT otmMacLineGap;
	/*0094*/ UINT otmusMinimumPPEM;
	/*0098*/ tagPOINT otmptSubscriptSize;
	/*00a0*/ tagPOINT otmptSubscriptOffset;
	/*00a8*/ tagPOINT otmptSuperscriptSize;
	/*00b0*/ tagPOINT otmptSuperscriptOffset;
	/*00b8*/ UINT otmsStrikeoutSize;
	/*00bc*/ INT otmsStrikeoutPosition;
	/*00c0*/ INT otmsUnderscoreSize;
	/*00c4*/ INT otmsUnderscorePosition;
	/*00c8*/ CHAR * otmpFamilyName;
	/*00d0*/ CHAR * otmpFaceName;
	/*00d8*/ CHAR * otmpStyleName;
	/*00e0*/ CHAR * otmpFullName;
	/*00e8*/
};

struct _OUTPUT_DEBUG_STRING_INFO {
	/*0000*/ CHAR * lpDebugStringData;
	/*0008*/ USHORT fUnicode;
	/*000a*/ USHORT nDebugStringLength;
	/*0010*/
};

struct _OVERLAPPED {
	/*0000*/ ULONGLONG Internal;
	/*0008*/ ULONGLONG InternalHigh;
	/*0010*/ ULONG Offset;
	/*0014*/ ULONG OffsetHigh;
	/*0010*/ void * Pointer;
	/*0018*/ void * hEvent;
	/*0020*/
};

struct _OVERLAPPED_ENTRY {
	/*0000*/ ULONGLONG lpCompletionKey;
	/*0008*/ _OVERLAPPED * lpOverlapped;
	/*0010*/ ULONGLONG Internal;
	/*0018*/ ULONG dwNumberOfBytesTransferred;
	/*0020*/
};

struct _PACKAGE_APPLICATION_CONTEXT_REFERENCE {
	/*0000*/ void * reserved;
	/*0008*/
};

struct _PACKAGE_CONTEXT_REFERENCE {
	/*0000*/ void * reserved;
	/*0008*/
};

struct _PACKAGE_GLOBALIZATION_CONTEXT_REFERENCE {
	/*0000*/ void * reserved;
	/*0008*/
};

struct _PACKAGE_INFO_REFERENCE {
	/*0000*/ void * reserved;
	/*0008*/
};

struct _PACKAGE_RESOURCES_CONTEXT_REFERENCE {
	/*0000*/ void * reserved;
	/*0008*/
};

struct _PACKAGE_SECURITY_CONTEXT_REFERENCE {
	/*0000*/ void * reserved;
	/*0008*/
};

struct _PACKEDEVENTINFO {
	/*0000*/ ULONG ulSize;
	/*0004*/ ULONG ulNumEventsForLogFile;
	/*0008*/ ULONG ulOffsets[];
	/*0008*/
};

struct _PAGEDIR_INFORMATION {
	/*0000*/ ULONGLONG DontUse : 09; // 0x00000000000001ff;
	/*0000*/ ULONGLONG PageDirectoryBase : 48; // 0x01fffffffffffe00;
	/*0000*/ ULONGLONG Reserved : 07; // 0xfe00000000000000;
	/*0008*/
};

struct _PAGE_PRIORITY_INFORMATION {
	/*0000*/ ULONG PagePriority;
	/*0004*/
};

struct _PARSE_MESSAGE_CONTEXT {
	/*0000*/ ULONG fFlags;
	/*0004*/ ULONG cwSavColumn;
	/*0008*/ ULONGLONG iwSrc;
	/*0010*/ ULONGLONG iwDst;
	/*0018*/ ULONGLONG iwDstSpace;
	/*0020*/ CHAR * lpvArgStart;
	/*0028*/
};

enum _PARTITION_INFORMATION_CLASS {
	SystemMemoryPartitionInformation = 0x0,
	SystemMemoryPartitionMoveMemory = 0x1,
	SystemMemoryPartitionAddPagefile = 0x2,
	SystemMemoryPartitionCombineMemory = 0x3,
	SystemMemoryPartitionInitialAddMemory = 0x4,
	SystemMemoryPartitionGetMemoryEvents = 0x5,
	SystemMemoryPartitionSetAttributes = 0x6,
	SystemMemoryPartitionNodeInformation = 0x7,
	SystemMemoryPartitionCreateLargePages = 0x8,
	SystemMemoryPartitionMax = 0x9
};

struct _PATHNAME_BUFFER {
	/*0000*/ ULONG PathNameLength;
	/*0004*/ WCHAR Name[0x1];
	/*0008*/
};

enum _PDMODE {
	PDM_DEFAULT = 0x0,
	PDM_RUN = 0x1,
	PDM_PREFLIGHT = 0x2,
	PDM_UNDOING = 0x4,
	PDM_ERRORSBLOCKING = 0x8,
	PDM_INDETERMINATE = 0x10
};

struct _PEB {
	/*0000*/ UCHAR InheritedAddressSpace;
	/*0001*/ UCHAR ReadImageFileExecOptions;
	/*0002*/ UCHAR BeingDebugged;
	/*0003*/ UCHAR BitField;
	/*0003*/ UCHAR ImageUsesLargePages : 01; // 0x01;
	/*0003*/ UCHAR IsProtectedProcess : 01; // 0x02;
	/*0003*/ UCHAR IsImageDynamicallyRelocated : 01; // 0x04;
	/*0003*/ UCHAR SkipPatchingUser32Forwarders : 01; // 0x08;
	/*0003*/ UCHAR IsPackagedProcess : 01; // 0x10;
	/*0003*/ UCHAR IsAppContainer : 01; // 0x20;
	/*0003*/ UCHAR IsProtectedProcessLight : 01; // 0x40;
	/*0003*/ UCHAR IsLongPathAwareProcess : 01; // 0x80;
	/*0004*/ UCHAR Padding0[0x4];
	/*0008*/ void * Mutant;
	/*0010*/ void * ImageBaseAddress;
	/*0018*/ _PEB_LDR_DATA * Ldr;
	/*0020*/ _RTL_USER_PROCESS_PARAMETERS * ProcessParameters;
	/*0028*/ void * SubSystemData;
	/*0030*/ void * ProcessHeap;
	/*0038*/ _RTL_CRITICAL_SECTION * FastPebLock;
	/*0040*/ _SLIST_HEADER * volatile AtlThunkSListPtr;
	/*0048*/ void * IFEOKey;
	/*0050*/ ULONG CrossProcessFlags;
	/*0050*/ ULONG ProcessInJob : 01; // 0x00000001;
	/*0050*/ ULONG ProcessInitializing : 01; // 0x00000002;
	/*0050*/ ULONG ProcessUsingVEH : 01; // 0x00000004;
	/*0050*/ ULONG ProcessUsingVCH : 01; // 0x00000008;
	/*0050*/ ULONG ProcessUsingFTH : 01; // 0x00000010;
	/*0050*/ ULONG ProcessPreviouslyThrottled : 01; // 0x00000020;
	/*0050*/ ULONG ProcessCurrentlyThrottled : 01; // 0x00000040;
	/*0050*/ ULONG ProcessImagesHotPatched : 01; // 0x00000080;
	/*0050*/ ULONG ReservedBits0 : 24; // 0xffffff00;
	/*0054*/ UCHAR Padding1[0x4];
	/*0058*/ void * KernelCallbackTable;
	/*0058*/ void * UserSharedInfoPtr;
	/*0060*/ ULONG SystemReserved;
	/*0064*/ ULONG AtlThunkSListPtr32;
	/*0068*/ void * ApiSetMap;
	/*0070*/ ULONG TlsExpansionCounter;
	/*0074*/ UCHAR Padding2[0x4];
	/*0078*/ void * TlsBitmap;
	/*0080*/ ULONG TlsBitmapBits[0x2];
	/*0088*/ void * ReadOnlySharedMemoryBase;
	/*0090*/ void * SharedData;
	/*0098*/ void * * ReadOnlyStaticServerData;
	/*00a0*/ void * AnsiCodePageData;
	/*00a8*/ void * OemCodePageData;
	/*00b0*/ void * UnicodeCaseTableData;
	/*00b8*/ ULONG NumberOfProcessors;
	/*00bc*/ ULONG NtGlobalFlag;
	/*00c0*/ _LARGE_INTEGER CriticalSectionTimeout;
	/*00c8*/ ULONGLONG HeapSegmentReserve;
	/*00d0*/ ULONGLONG HeapSegmentCommit;
	/*00d8*/ ULONGLONG HeapDeCommitTotalFreeThreshold;
	/*00e0*/ ULONGLONG HeapDeCommitFreeBlockThreshold;
	/*00e8*/ ULONG NumberOfHeaps;
	/*00ec*/ ULONG MaximumNumberOfHeaps;
	/*00f0*/ void * * ProcessHeaps;
	/*00f8*/ void * GdiSharedHandleTable;
	/*0100*/ void * ProcessStarterHelper;
	/*0108*/ ULONG GdiDCAttributeList;
	/*010c*/ UCHAR Padding3[0x4];
	/*0110*/ _RTL_CRITICAL_SECTION * LoaderLock;
	/*0118*/ ULONG OSMajorVersion;
	/*011c*/ ULONG OSMinorVersion;
	/*0120*/ USHORT OSBuildNumber;
	/*0122*/ USHORT OSCSDVersion;
	/*0124*/ ULONG OSPlatformId;
	/*0128*/ ULONG ImageSubsystem;
	/*012c*/ ULONG ImageSubsystemMajorVersion;
	/*0130*/ ULONG ImageSubsystemMinorVersion;
	/*0134*/ UCHAR Padding4[0x4];
	/*0138*/ ULONGLONG ActiveProcessAffinityMask;
	/*0140*/ ULONG GdiHandleBuffer[0x3c];
	/*0230*/ void (* PostProcessInitRoutine)();
	/*0238*/ void * TlsExpansionBitmap;
	/*0240*/ ULONG TlsExpansionBitmapBits[0x20];
	/*02c0*/ ULONG SessionId;
	/*02c4*/ UCHAR Padding5[0x4];
	/*02c8*/ _ULARGE_INTEGER AppCompatFlags;
	/*02d0*/ _ULARGE_INTEGER AppCompatFlagsUser;
	/*02d8*/ void * pShimData;
	/*02e0*/ void * AppCompatInfo;
	/*02e8*/ _UNICODE_STRING CSDVersion;
	/*02f8*/ _ACTIVATION_CONTEXT_DATA const * ActivationContextData;
	/*0300*/ _ASSEMBLY_STORAGE_MAP * ProcessAssemblyStorageMap;
	/*0308*/ _ACTIVATION_CONTEXT_DATA const * SystemDefaultActivationContextData;
	/*0310*/ _ASSEMBLY_STORAGE_MAP * SystemAssemblyStorageMap;
	/*0318*/ ULONGLONG MinimumStackCommit;
	/*0320*/ void * SparePointers[0x4];
	/*0340*/ ULONG SpareUlongs[0x5];
	/*0358*/ void * WerRegistrationData;
	/*0360*/ void * WerShipAssertPtr;
	/*0368*/ void * pUnused;
	/*0370*/ void * pImageHeaderHash;
	/*0378*/ ULONG TracingFlags;
	/*0378*/ ULONG HeapTracingEnabled : 01; // 0x00000001;
	/*0378*/ ULONG CritSecTracingEnabled : 01; // 0x00000002;
	/*0378*/ ULONG LibLoaderTracingEnabled : 01; // 0x00000004;
	/*0378*/ ULONG SpareTracingBits : 29; // 0xfffffff8;
	/*037c*/ UCHAR Padding6[0x4];
	/*0380*/ ULONGLONG CsrServerReadOnlySharedMemoryBase;
	/*0388*/ ULONGLONG TppWorkerpListLock;
	/*0390*/ _LIST_ENTRY TppWorkerpList;
	/*03a0*/ void * WaitOnAddressHashTable[0x80];
	/*07a0*/ void * TelemetryCoverageHeader;
	/*07a8*/ ULONG CloudFileFlags;
	/*07ac*/ ULONG CloudFileDiagFlags;
	/*07b0*/ CHAR PlaceholderCompatibilityMode;
	/*07b1*/ CHAR PlaceholderCompatibilityModeReserved[0x7];
	/*07b8*/ _LEAP_SECOND_DATA * LeapSecondData;
	/*07c0*/ ULONG LeapSecondFlags;
	/*07c0*/ ULONG SixtySecondEnabled : 01; // 0x00000001;
	/*07c0*/ ULONG Reserved : 31; // 0xfffffffe;
	/*07c4*/ ULONG NtGlobalFlag2;
	void _PEB( _PEB && );
	void _PEB( _PEB const & );
	_PEB & operator=( _PEB && );
	_PEB & operator=( _PEB const & );
	/*07c8*/
};

struct _PEBS_DS_SAVE_AREA {
	/*0000*/ _PEBS_DS_SAVE_AREA32 As32Bit;
	/*0000*/ _PEBS_DS_SAVE_AREA64 As64Bit;
	/*00a0*/
};

struct _PEBS_DS_SAVE_AREA32 {
	/*0000*/ ULONG BtsBufferBase;
	/*0004*/ ULONG BtsIndex;
	/*0008*/ ULONG BtsAbsoluteMaximum;
	/*000c*/ ULONG BtsInterruptThreshold;
	/*0010*/ ULONG PebsBufferBase;
	/*0014*/ ULONG PebsIndex;
	/*0018*/ ULONG PebsAbsoluteMaximum;
	/*001c*/ ULONG PebsInterruptThreshold;
	/*0020*/ ULONGLONG PebsGpCounterReset[0x8];
	/*0060*/ ULONGLONG PebsFixedCounterReset[0x4];
	/*0080*/
};

struct _PEBS_DS_SAVE_AREA64 {
	/*0000*/ ULONGLONG BtsBufferBase;
	/*0008*/ ULONGLONG BtsIndex;
	/*0010*/ ULONGLONG BtsAbsoluteMaximum;
	/*0018*/ ULONGLONG BtsInterruptThreshold;
	/*0020*/ ULONGLONG PebsBufferBase;
	/*0028*/ ULONGLONG PebsIndex;
	/*0030*/ ULONGLONG PebsAbsoluteMaximum;
	/*0038*/ ULONGLONG PebsInterruptThreshold;
	/*0040*/ ULONGLONG PebsGpCounterReset[0x8];
	/*0080*/ ULONGLONG PebsFixedCounterReset[0x4];
	/*00a0*/
};

struct _PEB_LDR_DATA {
	/*0000*/ ULONG Length;
	/*0004*/ UCHAR Initialized;
	/*0008*/ void * SsHandle;
	/*0010*/ _LIST_ENTRY InLoadOrderModuleList;
	/*0020*/ _LIST_ENTRY InMemoryOrderModuleList;
	/*0030*/ _LIST_ENTRY InInitializationOrderModuleList;
	/*0040*/ void * EntryInProgress;
	/*0048*/ UCHAR ShutdownInProgress;
	/*0050*/ void * ShutdownThreadId;
	/*0058*/
};

struct _PERFORMANCE_DATA {
	/*0000*/ USHORT Size;
	/*0002*/ UCHAR Version;
	/*0003*/ UCHAR HwCountersCount;
	/*0004*/ ULONG ContextSwitchCount;
	/*0008*/ ULONGLONG WaitReasonBitMap;
	/*0010*/ ULONGLONG CycleTime;
	/*0018*/ ULONG RetryCount;
	/*001c*/ ULONG Reserved;
	/*0020*/ _HARDWARE_COUNTER_DATA HwCounters[0x10];
	/*0120*/
};

struct _PERSIST_FOLDER_TARGET_INFO {
	/*0000*/ _ITEMIDLIST __unaligned * pidlTargetFolder;
	/*0008*/ WCHAR szTargetParsingName[0x104];
	/*0210*/ WCHAR szNetworkProvider[0x104];
	/*0418*/ ULONG dwAttributes;
	/*041c*/ INT csidl;
	/*0420*/
};

enum _PERSIST_SPROPSTORE_FLAGS {
	FPSPS_DEFAULT = 0x0,
	FPSPS_READONLY = 0x1,
	FPSPS_TREAT_NEW_VALUES_AS_DIRTY = 0x2
};

struct _PHYSICAL_CHANNEL_RUN {
	/*0000*/ ULONG NodeNumber;
	/*0004*/ ULONG ChannelNumber;
	/*0008*/ ULONGLONG BasePage;
	/*0010*/ ULONGLONG PageCount;
	/*0018*/ ULONGLONG Flags;
	/*0020*/
};

enum _PLAP_CREDENTIAL_CHANGED_STATUS {
	PlapCredentialChangedStatusUnknown = 0x0,
	PlapCredentialChangedStatusSuccess = 0x1,
	PlapCredentialChangedStatusFailure = 0x2
};

struct _PLAP_INPUT_FIELD_DATA {
	/*0000*/ _PLAP_INPUT_FIELD_TYPE Type;
	/*0004*/ ULONG dwFlagProps;
	/*0008*/ ULONG dwExtendedProps;
	/*000c*/ WCHAR wszLabel[0x100];
	/*020c*/ WCHAR wszData[0x400];
	/*0a0c*/ ULONG dwMinDataLength;
	/*0a10*/ ULONG dwMaxDataLength;
	/*0a14*/
};

enum _PLAP_INPUT_FIELD_TYPE {
	PlapInputUsername = 0x0,
	PlapInputPassword = 0x1,
	PlapInputNetworkUsername = 0x2,
	PlapInputNetworkPassword = 0x3,
	PlapInputPin = 0x4,
	PlapInputPSK = 0x5,
	PlapInputToken = 0x6,
	PlapInputEdit = 0x7,
	PlapInputScardUsername = 0x8,
	PlapInputScardError = 0x9
};

struct _PLAP_UI_CREDS {
	/*0000*/ INT fCredsAvailable;
	/*0004*/ _PLAP_INPUT_FIELD_TYPE plapCredentialType;
	/*0008*/ WCHAR wszCredential[0x400];
	/*0808*/
};

struct _PLAP_UI_PARAMS {
	/*0000*/ _PLAP_UI_CREDS plapOldCreds;
	/*0808*/ _PLAP_UI_CREDS plapNewCreds;
	/*1010*/ _PLAP_CREDENTIAL_CHANGED_STATUS plapCredentialChangedStatus;
	/*1014*/ INT bCredChangeInProgress;
	/*1018*/
};

struct _PLEX_READ_DATA_REQUEST {
	/*0000*/ _LARGE_INTEGER ByteOffset;
	/*0008*/ ULONG ByteLength;
	/*000c*/ ULONG PlexNumber;
	/*0010*/
};

struct _PLUGPLAY_CONTROL_BLOCKED_DRIVER_DATA {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG BufferLength;
	/*0008*/ void * Buffer;
	/*0010*/
};

enum _PLUGPLAY_CONTROL_CLASS {
	PlugPlayControlEnumerateDevice = 0x0,
	PlugPlayControlRegisterNewDevice = 0x1,
	PlugPlayControlDeregisterDevice = 0x2,
	PlugPlayControlInitializeDevice = 0x3,
	PlugPlayControlStartDevice = 0x4,
	PlugPlayControlUnlockDevice = 0x5,
	PlugPlayControlQueryAndRemoveDevice = 0x6,
	PlugPlayControlUserResponse = 0x7,
	PlugPlayControlGenerateLegacyDevice = 0x8,
	PlugPlayControlGetInterfaceDeviceList = 0x9,
	PlugPlayControlProperty = 0xa,
	PlugPlayControlDeviceClassAssociation = 0xb,
	PlugPlayControlGetRelatedDevice = 0xc,
	PlugPlayControlGetInterfaceDeviceAlias = 0xd,
	PlugPlayControlDeviceStatus = 0xe,
	PlugPlayControlGetDeviceDepth = 0xf,
	PlugPlayControlQueryDeviceRelations = 0x10,
	PlugPlayControlTargetDeviceRelation = 0x11,
	PlugPlayControlQueryConflictList = 0x12,
	PlugPlayControlRetrieveDock = 0x13,
	PlugPlayControlResetDevice = 0x14,
	PlugPlayControlHaltDevice = 0x15,
	PlugPlayControlGetBlockedDriverList = 0x16,
	PlugPlayControlGetDeviceInterfaceEnabled = 0x17,
	MaxPlugPlayControl = 0x18
};

struct _PLUGPLAY_CONTROL_CLASS_ASSOCIATION_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ _GUID * InterfaceGuid;
	/*0018*/ _UNICODE_STRING Reference;
	/*0028*/ UCHAR Register;
	/*0030*/ WCHAR * SymLink;
	/*0038*/ ULONG SymLinkLength;
	/*0040*/
};

struct _PLUGPLAY_CONTROL_CONFLICT_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ _CM_RESOURCE_LIST * ResourceList;
	/*0018*/ ULONG ResourceListSize;
	/*0020*/ _PLUGPLAY_CONTROL_CONFLICT_LIST * ConflictBuffer;
	/*0028*/ ULONG ConflictBufferSize;
	/*002c*/ ULONG Flags;
	/*0030*/ LONG Status;
	/*0038*/
};

struct _PLUGPLAY_CONTROL_CONFLICT_ENTRY {
	/*0000*/ ULONG DeviceInstance;
	/*0004*/ ULONG DeviceFlags;
	/*0008*/ ULONG ResourceType;
	/*0010*/ ULONGLONG ResourceStart;
	/*0018*/ ULONGLONG ResourceEnd;
	/*0020*/ ULONG ResourceFlags;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_CONFLICT_LIST {
	/*0000*/ ULONG Reserved1;
	/*0004*/ ULONG Reserved2;
	/*0008*/ ULONG ConflictsCounted;
	/*000c*/ ULONG ConflictsListed;
	/*0010*/ ULONG RequiredBufferSize;
	/*0018*/ _PLUGPLAY_CONTROL_CONFLICT_ENTRY ConflictEntry[0x1];
	/*0040*/
};

struct _PLUGPLAY_CONTROL_CONFLICT_STRINGS {
	/*0000*/ ULONG NullDeviceInstance;
	/*0004*/ WCHAR DeviceInstanceStrings[0x1];
	/*0008*/
};

struct _PLUGPLAY_CONTROL_DEPTH_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG DeviceDepth;
	/*0018*/
};

struct _PLUGPLAY_CONTROL_DEVICE_CONTROL_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG Flags;
	/*0018*/
};

struct _PLUGPLAY_CONTROL_DEVICE_INTERFACE_ENABLED {
	/*0000*/ _UNICODE_STRING DeviceInterface;
	/*0010*/ ULONG Flags;
	/*0014*/ UCHAR Enabled;
	/*0018*/
};

struct _PLUGPLAY_CONTROL_DEVICE_RELATIONS_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ _PNP_QUERY_RELATION Operation;
	/*0014*/ ULONG BufferLength;
	/*0018*/ WCHAR * Buffer;
	/*0020*/
};

struct _PLUGPLAY_CONTROL_INSTALL_DATA {
	/*0000*/ ULONG BufferLength;
	/*0008*/ WCHAR * Buffer;
	/*0010*/
};

struct _PLUGPLAY_CONTROL_INTERFACE_ALIAS_DATA {
	/*0000*/ _UNICODE_STRING SymbolicLinkName;
	/*0010*/ _GUID * AliasClassGuid;
	/*0018*/ WCHAR * AliasSymbolicLinkName;
	/*0020*/ ULONG AliasSymbolicLinkNameLength;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_INTERFACE_LIST_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ _GUID * InterfaceGuid;
	/*0018*/ WCHAR * InterfaceList;
	/*0020*/ ULONG InterfaceListSize;
	/*0024*/ ULONG Flags;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA {
	/*0000*/ _UNICODE_STRING ServiceName;
	/*0010*/ WCHAR * DeviceInstance;
	/*0018*/ ULONG DeviceInstanceLength;
	/*0020*/
};

struct _PLUGPLAY_CONTROL_PROPERTY_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG PropertyType;
	/*0018*/ void * Buffer;
	/*0020*/ ULONG BufferSize;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_QUERY_AND_REMOVE_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG Flags;
	/*0014*/ _PNP_VETO_TYPE VetoType;
	/*0018*/ WCHAR * VetoName;
	/*0020*/ ULONG VetoNameLength;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_RELATED_DEVICE_DATA {
	/*0000*/ _UNICODE_STRING TargetDeviceInstance;
	/*0010*/ ULONG Relation;
	/*0018*/ WCHAR * RelatedDeviceInstance;
	/*0020*/ ULONG RelatedDeviceInstanceLength;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_RETRIEVE_DOCK_DATA {
	/*0000*/ ULONG DeviceInstanceLength;
	/*0008*/ WCHAR * DeviceInstance;
	/*0010*/
};

struct _PLUGPLAY_CONTROL_STATUS_DATA {
	/*0000*/ _UNICODE_STRING DeviceInstance;
	/*0010*/ ULONG Operation;
	/*0014*/ ULONG DeviceStatus;
	/*0018*/ ULONG DeviceProblem;
	/*001c*/ ULONG Flags;
	/*0020*/ LONG ProblemStatus;
	/*0028*/
};

struct _PLUGPLAY_CONTROL_TARGET_RELATION_DATA {
	/*0000*/ void * UserFileHandle;
	/*0008*/ LONG Status;
	/*000c*/ ULONG DeviceInstanceLen;
	/*0010*/ WCHAR * DeviceInstance;
	/*0018*/
};

struct _PLUGPLAY_CONTROL_USER_RESPONSE_DATA {
	/*0000*/ ULONG Response;
	/*0004*/ _PNP_VETO_TYPE VetoType;
	/*0008*/ WCHAR * VetoName;
	/*0010*/ ULONG VetoNameLength;
	/*0018*/
};

struct _PLUGPLAY_CUSTOM_NOTIFICATION {
	/*0000*/ _PLUGPLAY_NOTIFY_HDR HeaderInfo;
	/*0018*/ void * FileObject;
	/*0020*/ LONG NameBufferOffset;
	/*0024*/ UCHAR CustomDataBuffer[0x1];
	/*0028*/
};

struct _PLUGPLAY_EVENT_BLOCK {
	
	/*0000*/ _GUID EventGuid;
	/*0010*/ _PLUGPLAY_EVENT_CATEGORY EventCategory;
	/*0018*/ ULONG * Result;
	/*0020*/ ULONG Flags;
	/*0024*/ ULONG TotalSize;
	/*0028*/ void * DeviceObject;
	/*0030*/ <unnamed-type-u> u;
	/*0050*/
};

enum _PLUGPLAY_EVENT_CATEGORY {
	HardwareProfileChangeEvent = 0x0,
	TargetDeviceChangeEvent = 0x1,
	DeviceClassChangeEvent = 0x2,
	CustomDeviceEvent = 0x3,
	DeviceInstallEvent = 0x4,
	DeviceArrivalEvent = 0x5,
	VetoEvent = 0x6,
	BlockedDriverEvent = 0x7,
	InvalidIDEvent = 0x8,
	DevicePropertyChangeEvent = 0x9,
	DeviceInstanceRemovalEvent = 0xa,
	DeviceInstanceStartedEvent = 0xb,
	MaxPlugEventCategory = 0xc
};

struct _PLUGPLAY_NOTIFY_HDR {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Size;
	/*0004*/ _GUID Event;
	/*0014*/
};

struct _PMD {
	/*0000*/ INT mdisp;
	/*0004*/ INT pdisp;
	/*0008*/ INT vdisp;
	/*000c*/
};

struct _PMKID_CANDIDATE {
	/*0000*/ UCHAR BSSID[0x6];
	/*0008*/ ULONG Flags;
	/*000c*/
};

enum _PMTUD_STATE {
	IP_PMTUDISC_NOT_SET = 0x0,
	IP_PMTUDISC_DO = 0x1,
	IP_PMTUDISC_DONT = 0x2,
	IP_PMTUDISC_PROBE = 0x3,
	IP_PMTUDISC_MAX = 0x4
};

enum _PNP_QUERY_RELATION {
	PnpQueryEjectRelations = 0x0,
	PnpQueryRemovalRelations = 0x1,
	PnpQueryPowerRelations = 0x2,
	PnpQueryBusRelations = 0x3,
	PnpQueryTransportRelations = 0x4,
	MaxPnpQueryRelations = 0x5
};

enum _PNP_VETO_TYPE {
	PNP_VetoTypeUnknown = 0x0,
	PNP_VetoLegacyDevice = 0x1,
	PNP_VetoPendingClose = 0x2,
	PNP_VetoWindowsApp = 0x3,
	PNP_VetoWindowsService = 0x4,
	PNP_VetoOutstandingOpen = 0x5,
	PNP_VetoDevice = 0x6,
	PNP_VetoDriver = 0x7,
	PNP_VetoIllegalDeviceRequest = 0x8,
	PNP_VetoInsufficientPower = 0x9,
	PNP_VetoNonDisableable = 0xa,
	PNP_VetoLegacyDriver = 0xb,
	PNP_VetoInsufficientRights = 0xc,
	PNP_VetoAlreadyRemoved = 0xd
};

struct _POINTFLOAT {
	/*0000*/ float x;
	/*0004*/ float y;
	/*0008*/
};

struct _POINTL {
	/*0000*/ LONG x;
	/*0004*/ LONG y;
	/*0008*/
};

struct _POOLED_USAGE_AND_LIMITS {
	/*0000*/ ULONGLONG PeakPagedPoolUsage;
	/*0008*/ ULONGLONG PagedPoolUsage;
	/*0010*/ ULONGLONG PagedPoolLimit;
	/*0018*/ ULONGLONG PeakNonPagedPoolUsage;
	/*0020*/ ULONGLONG NonPagedPoolUsage;
	/*0028*/ ULONGLONG NonPagedPoolLimit;
	/*0030*/ ULONGLONG PeakPagefileUsage;
	/*0038*/ ULONGLONG PagefileUsage;
	/*0040*/ ULONGLONG PagefileLimit;
	/*0048*/
};

struct _PORT_DATA_ENTRY {
	/*0000*/ void * Base;
	/*0008*/ ULONG Size;
	/*0010*/
};

struct _PORT_DATA_INFORMATION {
	/*0000*/ ULONG CountDataEntries;
	/*0008*/ _PORT_DATA_ENTRY DataEntries[0x1];
	/*0018*/
};

enum _PORT_INFORMATION_CLASS {
	PortBasicInformation = 0x0,
	PortDumpInformation = 0x1
};

struct _PORT_MESSAGE {
	
	
	/*0000*/ <unnamed-type-u1> u1;
	/*0004*/ <unnamed-type-u2> u2;
	/*0008*/ _CLIENT_ID ClientId;
	/*0008*/ double DoNotUseThisField;
	/*0018*/ ULONG MessageId;
	/*0020*/ ULONGLONG ClientViewSize;
	/*0020*/ ULONG CallbackId;
	/*0028*/
};

struct _PORT_VIEW {
	/*0000*/ ULONG Length;
	/*0008*/ void * SectionHandle;
	/*0010*/ ULONG SectionOffset;
	/*0018*/ ULONGLONG ViewSize;
	/*0020*/ void * ViewBase;
	/*0028*/ void * ViewRemoteBase;
	/*0030*/
};

struct _POWER_IDLE_RESILIENCY {
	/*0000*/ ULONG CoalescingTimeout;
	/*0004*/ ULONG IdleResiliencyPeriod;
	/*0008*/
};

struct _POWER_MONITOR_INVOCATION {
	/*0000*/ UCHAR Console;
	/*0004*/ POWER_MONITOR_REQUEST_REASON RequestReason;
	/*0008*/
};

enum _POWER_MONITOR_REQUEST_TYPE {
	MonitorRequestTypeOff = 0x0,
	MonitorRequestTypeOnAndPresent = 0x1,
	MonitorRequestTypeToggleOn = 0x2
};

struct _POWER_PLATFORM_INFORMATION {
	/*0000*/ UCHAR AoAc;
	/*0001*/
};

enum _POWER_PLATFORM_ROLE {
	PlatformRoleUnspecified = 0x0,
	PlatformRoleDesktop = 0x1,
	PlatformRoleMobile = 0x2,
	PlatformRoleWorkstation = 0x3,
	PlatformRoleEnterpriseServer = 0x4,
	PlatformRoleSOHOServer = 0x5,
	PlatformRoleAppliancePC = 0x6,
	PlatformRolePerformanceServer = 0x7,
	PlatformRoleSlate = 0x8,
	PlatformRoleMaximum = 0x9
};

enum _POWER_REQUEST_TYPE {
	PowerRequestDisplayRequired = 0x0,
	PowerRequestSystemRequired = 0x1,
	PowerRequestAwayModeRequired = 0x2,
	PowerRequestExecutionRequired = 0x3
};

struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {
	/*0000*/ UCHAR IsAllowed;
	/*0001*/
};

struct _POWER_SESSION_CONNECT {
	/*0000*/ UCHAR Connected;
	/*0001*/ UCHAR Console;
	/*0002*/
};

struct _POWER_SESSION_RIT_STATE {
	/*0000*/ UCHAR Active;
	/*0004*/ ULONG LastInputTime;
	/*0008*/
};

struct _POWER_SESSION_TIMEOUTS {
	/*0000*/ ULONG InputTimeout;
	/*0004*/ ULONG DisplayTimeout;
	/*0008*/
};

struct _POWER_SESSION_WINLOGON {
	/*0000*/ ULONG SessionId;
	/*0004*/ UCHAR Console;
	/*0005*/ UCHAR Locked;
	/*0008*/
};

union _POWER_STATE {
	/*0000*/ _SYSTEM_POWER_STATE SystemState;
	/*0000*/ _DEVICE_POWER_STATE DeviceState;
	/*0004*/
};

enum _POWER_STATE_TYPE {
	SystemPowerState = 0x0,
	DevicePowerState = 0x1
};

struct _POWER_THROTTLING_PROCESS_STATE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG ControlMask;
	/*0008*/ ULONG StateMask;
	/*000c*/
};

struct _POWER_THROTTLING_THREAD_STATE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG ControlMask;
	/*0008*/ ULONG StateMask;
	/*000c*/
};

struct _POWER_USER_PRESENCE {
	/*0000*/ POWER_USER_PRESENCE_TYPE UserPresence;
	/*0004*/
};

enum _PO_CS_DEVICE_NOTIFICATION_TYPE {
	PoCsDeviceNotificationStorage = 0x0,
	PoCsDeviceNotificationWiFi = 0x1,
	PoCsDeviceNotificationMbn = 0x2,
	PoCsDeviceNotificationAudio = 0x3,
	PoCsDeviceNotificationEthernet = 0x4,
	PoCsDeviceNotificationMaximum = 0x5
};

enum _PO_HIBER_FORCE_DISABLE_REASON {
	PoHiberForceDisableReasonPolicy = 0x0,
	PoHiberForceDisableReasonGuardedHost = 0x1,
	PoHiberForceDisableReasonMax = 0x2
};

enum _PO_SLEEP_DISABLE_REASON {
	PoSleepDisableReasonVideo = 0x0,
	PoSleepDisableReasonHypervisor = 0x1,
	PoSleepDisableReasonVhdBoot = 0x2,
	PoSleepDisableReasonPortableWorkspace = 0x3,
	PoSleepDisableReasonPolicy = 0x4,
	PoSleepDisableReasonGuardedHost = 0x5,
	PoSleepDisableReasonMax = 0x6
};

struct _PO_SPR_ACTIVE_SESSION_DATA {
	/*0000*/ UCHAR Start;
	/*0004*/ _GUID ActiveSessionGuid;
	/*0014*/
};

struct _PO_WAKE_SOURCE_DEVICE {
	/*0000*/ _PO_WAKE_SOURCE_HEADER Header;
	/*0008*/ WCHAR InstancePath[0x1];
	/*000c*/
};

struct _PO_WAKE_SOURCE_FIXED {
	/*0000*/ _PO_WAKE_SOURCE_HEADER Header;
	/*0008*/ PO_FIXED_WAKE_SOURCE_TYPE FixedWakeSourceType;
	/*000c*/
};

struct _PO_WAKE_SOURCE_HEADER {
	/*0000*/ PO_WAKE_SOURCE_TYPE Type;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _PO_WAKE_SOURCE_HISTORY {
	/*0000*/ ULONG Count;
	/*0004*/ ULONG Offsets[0x1];
	/*0008*/
};

struct _PO_WAKE_SOURCE_INFO {
	/*0000*/ ULONG Count;
	/*0004*/ ULONG Offsets[0x1];
	/*0008*/
};

struct _PO_WAKE_SOURCE_INTERNAL {
	/*0000*/ _PO_WAKE_SOURCE_HEADER Header;
	/*0008*/ PO_INTERNAL_WAKE_SOURCE_TYPE InternalWakeSourceType;
	/*000c*/
};

struct _PO_WAKE_SOURCE_TIMER {
	/*0000*/ _PO_WAKE_SOURCE_HEADER Header;
	/*0008*/ _DIAGNOSTIC_BUFFER Reason;
	/*0030*/
};

struct _PREFIX_TABLE {
	/*0000*/ SHORT NodeTypeCode;
	/*0002*/ SHORT NameLength;
	/*0008*/ _PREFIX_TABLE_ENTRY * NextPrefixTree;
	/*0010*/
};

struct _PREFIX_TABLE_ENTRY {
	/*0000*/ SHORT NodeTypeCode;
	/*0002*/ SHORT NameLength;
	/*0008*/ _PREFIX_TABLE_ENTRY * NextPrefixTree;
	/*0010*/ _RTL_SPLAY_LINKS Links;
	/*0028*/ _STRING * Prefix;
	/*0030*/
};

enum _PRIORITY_HINT {
	IoPriorityHintVeryLow = 0x0,
	IoPriorityHintLow = 0x1,
	IoPriorityHintNormal = 0x2,
	MaximumIoPriorityHintType = 0x3
};

struct _PRIVILEGE_SET {
	/*0000*/ ULONG PrivilegeCount;
	/*0004*/ ULONG Control;
	/*0008*/ _LUID_AND_ATTRIBUTES Privilege[0x1];
	/*0014*/
};

enum _PROCESSINFOCLASS {
	ProcessBasicInformation = 0x0,
	ProcessQuotaLimits = 0x1,
	ProcessIoCounters = 0x2,
	ProcessVmCounters = 0x3,
	ProcessTimes = 0x4,
	ProcessBasePriority = 0x5,
	ProcessRaisePriority = 0x6,
	ProcessDebugPort = 0x7,
	ProcessExceptionPort = 0x8,
	ProcessAccessToken = 0x9,
	ProcessLdtInformation = 0xa,
	ProcessLdtSize = 0xb,
	ProcessDefaultHardErrorMode = 0xc,
	ProcessIoPortHandlers = 0xd,
	ProcessPooledUsageAndLimits = 0xe,
	ProcessWorkingSetWatch = 0xf,
	ProcessUserModeIOPL = 0x10,
	ProcessEnableAlignmentFaultFixup = 0x11,
	ProcessPriorityClass = 0x12,
	ProcessWx86Information = 0x13,
	ProcessHandleCount = 0x14,
	ProcessAffinityMask = 0x15,
	ProcessPriorityBoost = 0x16,
	ProcessDeviceMap = 0x17,
	ProcessSessionInformation = 0x18,
	ProcessForegroundInformation = 0x19,
	ProcessWow64Information = 0x1a,
	ProcessImageFileName = 0x1b,
	ProcessLUIDDeviceMapsEnabled = 0x1c,
	ProcessBreakOnTermination = 0x1d,
	ProcessDebugObjectHandle = 0x1e,
	ProcessDebugFlags = 0x1f,
	ProcessHandleTracing = 0x20,
	ProcessIoPriority = 0x21,
	ProcessExecuteFlags = 0x22,
	ProcessTlsInformation = 0x23,
	ProcessCookie = 0x24,
	ProcessImageInformation = 0x25,
	ProcessCycleTime = 0x26,
	ProcessPagePriority = 0x27,
	ProcessInstrumentationCallback = 0x28,
	ProcessThreadStackAllocation = 0x29,
	ProcessWorkingSetWatchEx = 0x2a,
	ProcessImageFileNameWin32 = 0x2b,
	ProcessImageFileMapping = 0x2c,
	ProcessAffinityUpdateMode = 0x2d,
	ProcessMemoryAllocationMode = 0x2e,
	ProcessGroupInformation = 0x2f,
	ProcessTokenVirtualizationEnabled = 0x30,
	ProcessOwnerInformation = 0x31,
	ProcessWindowInformation = 0x32,
	ProcessHandleInformation = 0x33,
	ProcessMitigationPolicy = 0x34,
	ProcessDynamicFunctionTableInformation = 0x35,
	ProcessHandleCheckingMode = 0x36,
	ProcessKeepAliveCount = 0x37,
	ProcessRevokeFileHandles = 0x38,
	ProcessWorkingSetControl = 0x39,
	ProcessHandleTable = 0x3a,
	ProcessCheckStackExtentsMode = 0x3b,
	ProcessCommandLineInformation = 0x3c,
	ProcessProtectionInformation = 0x3d,
	ProcessMemoryExhaustion = 0x3e,
	ProcessFaultInformation = 0x3f,
	ProcessTelemetryIdInformation = 0x40,
	ProcessCommitReleaseInformation = 0x41,
	ProcessDefaultCpuSetsInformation = 0x42,
	ProcessAllowedCpuSetsInformation = 0x43,
	ProcessReserved1Information = 0x42,
	ProcessReserved2Information = 0x43,
	ProcessSubsystemProcess = 0x44,
	ProcessJobMemoryInformation = 0x45,
	ProcessInPrivate = 0x46,
	ProcessRaiseUMExceptionOnInvalidHandleClose = 0x47,
	ProcessIumChallengeResponse = 0x48,
	ProcessChildProcessInformation = 0x49,
	ProcessHighGraphicsPriorityInformation = 0x4a,
	ProcessSubsystemInformation = 0x4b,
	ProcessEnergyValues = 0x4c,
	ProcessPowerThrottlingState = 0x4d,
	ProcessReserved3Information = 0x4e,
	ProcessWin32kSyscallFilterInformation = 0x4f,
	ProcessDisableSystemAllowedCpuSets = 0x50,
	ProcessWakeInformation = 0x51,
	ProcessEnergyTrackingState = 0x52,
	ProcessManageWritesToExecutableMemory = 0x53,
	ProcessCaptureTrustletLiveDump = 0x54,
	ProcessTelemetryCoverage = 0x55,
	ProcessEnclaveInformation = 0x56,
	ProcessEnableReadWriteVmLogging = 0x57,
	ProcessUptimeInformation = 0x58,
	ProcessImageSection = 0x59,
	ProcessDebugAuthInformation = 0x5a,
	ProcessSystemResourceManagement = 0x5b,
	ProcessSequenceNumber = 0x5c,
	ProcessLoaderDetour = 0x5d,
	ProcessSecurityDomainInformation = 0x5e,
	ProcessCombineSecurityDomainsInformation = 0x5f,
	ProcessEnableLogging = 0x60,
	ProcessLeapSecondInformation = 0x61,
	ProcessFiberShadowStackAllocation = 0x62,
	ProcessFreeFiberShadowStackAllocation = 0x63,
	ProcessAltSystemCallInformation = 0x64,
	ProcessDynamicEHContinuationTargets = 0x65,
	ProcessDynamicEnforcedCetCompatibleRanges = 0x66,
	MaxProcessInfoClass = 0x67
};

enum _PROCESSOR_CACHE_TYPE {
	CacheUnified = 0x0,
	CacheInstruction = 0x1,
	CacheData = 0x2,
	CacheTrace = 0x3
};

struct _PROCESSOR_GROUP_INFO {
	/*0000*/ UCHAR MaximumProcessorCount;
	/*0001*/ UCHAR ActiveProcessorCount;
	/*0002*/ UCHAR Reserved[0x26];
	/*0028*/ ULONGLONG ActiveProcessorMask;
	/*0030*/
};

struct _PROCESSOR_IDLE_STATE {
	/*0000*/ UCHAR StateType;
	/*0004*/ ULONG StateFlags;
	/*0008*/ ULONG HardwareLatency;
	/*000c*/ ULONG Power;
	/*0010*/ ULONGLONG Context;
	/*0018*/ LONG (* Handler)( ULONGLONG , PROCESSOR_IDLE_TIMES * );
	/*0020*/
};

struct _PROCESSOR_IDLE_STATES {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Revision;
	/*0008*/ ULONG Count;
	/*000c*/ ULONG Type;
	/*0010*/ ULONGLONG TargetProcessors;
	/*0018*/ _PROCESSOR_IDLE_STATE State[0x1];
	/*0038*/
};

struct _PROCESSOR_NUMBER {
	/*0000*/ USHORT Group;
	/*0002*/ UCHAR Number;
	/*0003*/ UCHAR Reserved;
	/*0004*/
};

struct _PROCESSOR_POWER_INFORMATION {
	/*0000*/ ULONG Number;
	/*0004*/ ULONG MaxMhz;
	/*0008*/ ULONG CurrentMhz;
	/*000c*/ ULONG MhzLimit;
	/*0010*/ ULONG MaxIdleState;
	/*0014*/ ULONG CurrentIdleState;
	/*0018*/
};

struct _PROCESSOR_POWER_POLICY {
	/*0000*/ ULONG Revision;
	/*0004*/ UCHAR DynamicThrottle;
	/*0005*/ UCHAR Spare[0x3];
	/*0008*/ ULONG DisableCStates : 01; // 0x00000001;
	/*0008*/ ULONG Reserved : 31; // 0xfffffffe;
	/*000c*/ ULONG PolicyCount;
	/*0010*/ _PROCESSOR_POWER_POLICY_INFO Policy[0x3];
	/*004c*/
};

struct _PROCESSOR_POWER_POLICY_INFO {
	/*0000*/ ULONG TimeCheck;
	/*0004*/ ULONG DemoteLimit;
	/*0008*/ ULONG PromoteLimit;
	/*000c*/ UCHAR DemotePercent;
	/*000d*/ UCHAR PromotePercent;
	/*000e*/ UCHAR Spare[0x2];
	/*0010*/ ULONG AllowDemotion : 01; // 0x00000001;
	/*0010*/ ULONG AllowPromotion : 01; // 0x00000002;
	/*0010*/ ULONG Reserved : 30; // 0xfffffffc;
	/*0014*/
};

struct _PROCESSOR_PROFILE_CONTROL_AREA {
	/*0000*/ _PEBS_DS_SAVE_AREA PebsDsSaveArea;
	/*00a0*/
};

struct _PROCESSOR_RELATIONSHIP {
	/*0000*/ UCHAR Flags;
	/*0001*/ UCHAR EfficiencyClass;
	/*0002*/ UCHAR Reserved[0x14];
	/*0016*/ USHORT GroupCount;
	/*0018*/ _GROUP_AFFINITY GroupMask[0x1];
	/*0028*/
};

struct _PROCESS_ACCESS_TOKEN {
	/*0000*/ void * Token;
	/*0008*/ void * Thread;
	/*0010*/
};

enum _PROCESS_ACTIVITY_TYPE {
	ProcessActivityTypeAudio = 0x0,
	ProcessActivityTypeMax = 0x1
};

union _PROCESS_AFFINITY_UPDATE_MODE {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableAutoUpdate : 01; // 0x00000001;
	/*0000*/ ULONG Permanent : 01; // 0x00000002;
	/*0000*/ ULONG Reserved : 30; // 0xfffffffc;
	/*0004*/
};

struct _PROCESS_BASIC_INFORMATION {
	/*0000*/ LONG ExitStatus;
	/*0008*/ _PEB * PebBaseAddress;
	/*0010*/ ULONGLONG AffinityMask;
	/*0018*/ LONG BasePriority;
	/*0020*/ ULONGLONG UniqueProcessId;
	/*0028*/ ULONGLONG InheritedFromUniqueProcessId;
	/*0030*/
};

struct _PROCESS_BASIC_INFORMATION64 {
	/*0000*/ LONG ExitStatus;
	/*0004*/ UINT Pad1;
	/*0008*/ ULONGLONG PebBaseAddress;
	/*0010*/ ULONGLONG AffinityMask;
	/*0018*/ LONG BasePriority;
	/*001c*/ UINT Pad2;
	/*0020*/ ULONGLONG UniqueProcessId;
	/*0028*/ ULONGLONG InheritedFromUniqueProcessId;
	/*0030*/
};

struct _PROCESS_CHILD_PROCESS_INFORMATION {
	/*0000*/ UCHAR ProhibitChildProcesses;
	/*0001*/ UCHAR AlwaysAllowSecureChildProcess;
	/*0002*/ UCHAR AuditProhibitChildProcesses;
	/*0003*/
};

struct _PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION {
	/*0000*/ void * ProcessHandle;
	/*0008*/
};

struct _PROCESS_COMMIT_RELEASE_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Eligible : 01; // 0x00000001;
	/*0004*/ ULONG ReleaseRepurposedMemResetCommit : 01; // 0x00000002;
	/*0004*/ ULONG ForceReleaseMemResetCommit : 01; // 0x00000004;
	/*0004*/ ULONG Spare : 29; // 0xfffffff8;
	/*0008*/ ULONGLONG CommitDebt;
	/*0010*/ ULONGLONG CommittedMemResetSize;
	/*0018*/ ULONGLONG RepurposedMemResetSize;
	/*0020*/
};

struct _PROCESS_CYCLE_TIME_INFORMATION {
	/*0000*/ ULONGLONG AccumulatedCycles;
	/*0008*/ ULONGLONG CurrentCycleCount;
	/*0010*/
};

struct _PROCESS_DEVICEMAP_INFORMATION {
	
	/*0000*/ <unnamed-type-Set> Set;
	/*0000*/ <unnamed-type-Query> Query;
	/*0028*/
};

struct _PROCESS_DEVICEMAP_INFORMATION_EX {
	
	/*0000*/ <unnamed-type-Set> Set;
	/*0000*/ <unnamed-type-Query> Query;
	/*0028*/ ULONG Flags;
	/*0030*/
};

struct _PROCESS_DISK_COUNTERS {
	/*0000*/ ULONGLONG BytesRead;
	/*0008*/ ULONGLONG BytesWritten;
	/*0010*/ ULONGLONG ReadOperationCount;
	/*0018*/ ULONGLONG WriteOperationCount;
	/*0020*/ ULONGLONG FlushOperationCount;
	/*0028*/
};

struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {
	/*0000*/ ULONGLONG TargetAddress;
	/*0008*/ ULONGLONG Flags;
	/*0010*/
};

struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {
	/*0000*/ USHORT NumberOfTargets;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Reserved2;
	/*0008*/ _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET * Targets;
	/*0010*/
};

struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE {
	/*0000*/ ULONGLONG BaseAddress;
	/*0008*/ ULONGLONG Size;
	/*0010*/ ULONG Flags;
	/*0018*/
};

struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION {
	/*0000*/ USHORT NumberOfRanges;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG Reserved2;
	/*0008*/ _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE * Ranges;
	/*0010*/
};

struct _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION {
	/*0000*/ _DYNAMIC_FUNCTION_TABLE * DynamicFunctionTable;
	/*0008*/ UCHAR Remove;
	/*0010*/
};

enum _PROCESS_ENERGY_COMPONENT_TYPE_NUM {
	PsEnergyComponentTypeCpu = 0x0,
	PsEnergyComponentTypeStorage = 0x1,
	PsEnergyComponentTypeNetwork = 0x2,
	PsEnergyComponentTypeMBB = 0x3,
	PsEnergyComponentTypeForegroundTime = 0x4,
	PsEnergyComponentTypeDesktopVisibleTime = 0x5,
	PsEnergyComponentTypeWindowResource = 0x6,
	PsEnergyComponentTypeCompositorResource = 0x7,
	PsEnergyComponentTypeTrackingState = 0x8,
	PsEnergyComponentTypeInput = 0x9,
	PsEnergyComponentTypeAudioIn = 0xa,
	PsEnergyComponentTypeAudioOut = 0xb,
	PsEnergyComponentTypeDisplayRequired = 0xc,
	PsEnergyComponentTypeKeyboardInput = 0xd,
	PsEnergyComponentTypeMouseInput = 0xe,
	PsEnergyComponentTypeMax = 0xf
};

struct _PROCESS_ENERGY_TRACKING_STATE {
	/*0000*/ ULONG StateUpdateMask;
	/*0004*/ ULONG StateDesiredValue;
	/*0008*/ ULONG StateSequence;
	/*000c*/ ULONG UpdateTag : 01; // 0x00000001;
	/*0010*/ WCHAR Tag[0x40];
	/*0090*/
};

struct _PROCESS_ENERGY_VALUES {
	/*0000*/ ULONGLONG Cycles[0x4][0x2];
	/*0040*/ ULONGLONG DiskEnergy;
	/*0048*/ ULONGLONG NetworkTailEnergy;
	/*0050*/ ULONGLONG MBBTailEnergy;
	/*0058*/ ULONGLONG NetworkTxRxBytes;
	/*0060*/ ULONGLONG MBBTxRxBytes;
	/*0068*/ _ENERGY_STATE_DURATION Durations[0x3];
	/*0068*/ _ENERGY_STATE_DURATION ForegroundDuration;
	/*0070*/ _ENERGY_STATE_DURATION DesktopVisibleDuration;
	/*0078*/ _ENERGY_STATE_DURATION PSMForegroundDuration;
	/*0080*/ ULONG CompositionRendered;
	/*0084*/ ULONG CompositionDirtyGenerated;
	/*0088*/ ULONG CompositionDirtyPropagated;
	/*008c*/ ULONG Reserved1;
	/*0090*/ ULONGLONG AttributedCycles[0x4][0x2];
	/*00d0*/ ULONGLONG WorkOnBehalfCycles[0x4][0x2];
	/*0110*/
};

struct _PROCESS_ENERGY_VALUES_EXTENSION {
	/*0000*/ _TIMELINE_BITMAP Timelines[0xe];
	/*0000*/ _TIMELINE_BITMAP CpuTimeline;
	/*0008*/ _TIMELINE_BITMAP DiskTimeline;
	/*0010*/ _TIMELINE_BITMAP NetworkTimeline;
	/*0018*/ _TIMELINE_BITMAP MBBTimeline;
	/*0020*/ _TIMELINE_BITMAP ForegroundTimeline;
	/*0028*/ _TIMELINE_BITMAP DesktopVisibleTimeline;
	/*0030*/ _TIMELINE_BITMAP CompositionRenderedTimeline;
	/*0038*/ _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
	/*0040*/ _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
	/*0048*/ _TIMELINE_BITMAP InputTimeline;
	/*0050*/ _TIMELINE_BITMAP AudioInTimeline;
	/*0058*/ _TIMELINE_BITMAP AudioOutTimeline;
	/*0060*/ _TIMELINE_BITMAP DisplayRequiredTimeline;
	/*0068*/ _TIMELINE_BITMAP KeyboardInputTimeline;
	/*0070*/ _ENERGY_STATE_DURATION Durations[0x5];
	/*0070*/ _ENERGY_STATE_DURATION InputDuration;
	/*0078*/ _ENERGY_STATE_DURATION AudioInDuration;
	/*0080*/ _ENERGY_STATE_DURATION AudioOutDuration;
	/*0088*/ _ENERGY_STATE_DURATION DisplayRequiredDuration;
	/*0090*/ _ENERGY_STATE_DURATION PSMBackgroundDuration;
	/*0098*/ ULONG KeyboardInput;
	/*009c*/ ULONG MouseInput;
	/*00a0*/
};

struct _PROCESS_EXCEPTION_PORT {
	/*0000*/ void * ExceptionPortHandle;
	/*0008*/ ULONG StateFlags;
	/*0010*/
};

struct _PROCESS_EXTENDED_BASIC_INFORMATION {
	/*0000*/ ULONGLONG Size;
	/*0008*/ _PROCESS_BASIC_INFORMATION BasicInfo;
	/*0038*/ ULONG Flags;
	/*0038*/ ULONG IsProtectedProcess : 01; // 0x00000001;
	/*0038*/ ULONG IsWow64Process : 01; // 0x00000002;
	/*0038*/ ULONG IsProcessDeleting : 01; // 0x00000004;
	/*0038*/ ULONG IsCrossSessionCreate : 01; // 0x00000008;
	/*0038*/ ULONG IsFrozen : 01; // 0x00000010;
	/*0038*/ ULONG IsBackground : 01; // 0x00000020;
	/*0038*/ ULONG IsStronglyNamed : 01; // 0x00000040;
	/*0038*/ ULONG IsSecureProcess : 01; // 0x00000080;
	/*0038*/ ULONG IsSubsystemProcess : 01; // 0x00000100;
	/*0038*/ ULONG SpareBits : 23; // 0xfffffe00;
	/*0040*/
};

struct _PROCESS_EXTENDED_BASIC_INFORMATION64 {
	/*0000*/ ULONGLONG Size;
	/*0008*/ _PROCESS_BASIC_INFORMATION64 BasicInfo;
	/*0038*/ UINT Flags;
	/*0038*/ UINT IsProtectedProcess : 01; // 0x00000001;
	/*0038*/ UINT IsWow64Process : 01; // 0x00000002;
	/*0038*/ UINT IsProcessDeleting : 01; // 0x00000004;
	/*0038*/ UINT IsCrossSessionCreate : 01; // 0x00000008;
	/*0038*/ UINT IsFrozen : 01; // 0x00000010;
	/*0038*/ UINT IsBackground : 01; // 0x00000020;
	/*0038*/ UINT IsStronglyNamed : 01; // 0x00000040;
	/*0038*/ UINT IsSecureProcess : 01; // 0x00000080;
	/*0038*/ UINT IsPicoProcess : 01; // 0x00000100;
	/*0038*/ UINT SpareBits : 23; // 0xfffffe00;
	/*0040*/
};

struct _PROCESS_EXTENDED_ENERGY_VALUES {
	/*0000*/ _PROCESS_ENERGY_VALUES Base;
	/*0110*/ _PROCESS_ENERGY_VALUES_EXTENSION Extension;
	/*01b0*/
};

struct _PROCESS_FAULT_INFORMATION {
	/*0000*/ ULONG FaultFlags;
	/*0004*/ ULONG AdditionalInfo;
	/*0008*/
};

struct _PROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION {
	/*0000*/ ULONGLONG ReserveSize;
	/*0008*/ ULONGLONG CommitSize;
	/*0010*/ ULONG PreferredNode;
	/*0014*/ ULONG Reserved;
	/*0018*/ void * Ssp;
	/*0020*/
};

struct _PROCESS_FOREGROUND_BACKGROUND {
	/*0000*/ UCHAR Foreground;
	/*0001*/
};

struct _PROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION {
	/*0000*/ void * Ssp;
	/*0008*/
};

struct _PROCESS_HANDLE_INFORMATION {
	/*0000*/ ULONG HandleCount;
	/*0004*/ ULONG HandleCountHighWatermark;
	/*0008*/
};

struct _PROCESS_HANDLE_SNAPSHOT_INFORMATION {
	/*0000*/ ULONGLONG NumberOfHandles;
	/*0008*/ ULONGLONG Reserved;
	/*0010*/ _PROCESS_HANDLE_TABLE_ENTRY_INFO Handles[0x1];
	/*0038*/
};

struct _PROCESS_HANDLE_TABLE_ENTRY_INFO {
	/*0000*/ void * HandleValue;
	/*0008*/ ULONGLONG HandleCount;
	/*0010*/ ULONGLONG PointerCount;
	/*0018*/ ULONG GrantedAccess;
	/*001c*/ ULONG ObjectTypeIndex;
	/*0020*/ ULONG HandleAttributes;
	/*0024*/ ULONG Reserved;
	/*0028*/
};

struct _PROCESS_HANDLE_TRACING_ENABLE {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _PROCESS_HANDLE_TRACING_ENABLE_EX {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG TotalSlots;
	/*0008*/
};

struct _PROCESS_HANDLE_TRACING_ENTRY {
	/*0000*/ void * Handle;
	/*0008*/ _CLIENT_ID ClientId;
	/*0018*/ ULONG Type;
	/*0020*/ void * Stacks[0x10];
	/*00a0*/
};

struct _PROCESS_HANDLE_TRACING_QUERY {
	/*0000*/ void * Handle;
	/*0008*/ ULONG TotalTraces;
	/*0010*/ _PROCESS_HANDLE_TRACING_ENTRY HandleTrace[0x1];
	/*00b0*/
};

struct _PROCESS_HEAP_ENTRY {
	
	/*0000*/ void * lpData;
	/*0008*/ ULONG cbData;
	/*000c*/ UCHAR cbOverhead;
	/*000d*/ UCHAR iRegionIndex;
	/*000e*/ USHORT wFlags;
	/*0010*/ <unnamed-type-Block> Block;
	/*0010*/ <unnamed-type-Region> Region;
	/*0028*/
};

struct _PROCESS_HEAP_INFORMATION {
	/*0000*/ ULONGLONG ReserveSize;
	/*0008*/ ULONGLONG CommitSize;
	/*0010*/ ULONG NumberOfHeaps;
	/*0018*/ ULONGLONG FirstHeapInformationOffset;
	/*0020*/
};

struct _PROCESS_INFORMATION {
	/*0000*/ void * hProcess;
	/*0008*/ void * hThread;
	/*0010*/ ULONG dwProcessId;
	/*0014*/ ULONG dwThreadId;
	/*0018*/
};

enum _PROCESS_INFORMATION_CLASS {
	ProcessMemoryPriority = 0x0,
	ProcessMemoryExhaustionInfo = 0x1,
	ProcessAppMemoryInfo = 0x2,
	ProcessInPrivateInfo = 0x3,
	ProcessPowerThrottling = 0x4,
	ProcessReservedValue1 = 0x5,
	ProcessTelemetryCoverageInfo = 0x6,
	ProcessProtectionLevelInfo = 0x7,
	ProcessLeapSecondInfo = 0x8,
	ProcessInformationClassMax = 0x9
};

struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG Callback;
	/*0010*/
};

struct _PROCESS_JOB_MEMORY_INFO {
	/*0000*/ ULONGLONG SharedCommitUsage;
	/*0008*/ ULONGLONG PrivateCommitUsage;
	/*0010*/ ULONGLONG PeakPrivateCommitUsage;
	/*0018*/ ULONGLONG PrivateCommitLimit;
	/*0020*/ ULONGLONG TotalCommitLimit;
	/*0028*/
};

struct _PROCESS_KEEPALIVE_COUNT_INFORMATION {
	/*0000*/ ULONG WakeCount;
	/*0004*/ ULONG NoWakeCount;
	/*0008*/
};

struct _PROCESS_LEAP_SECOND_INFO {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Reserved;
	/*0008*/
};

struct _PROCESS_LEAP_SECOND_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Reserved;
	/*0008*/
};

union _PROCESS_LOGGING_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableReadVmLogging : 01; // 0x00000001;
	/*0000*/ ULONG EnableWriteVmLogging : 01; // 0x00000002;
	/*0000*/ ULONG EnableProcessSuspendResumeLogging : 01; // 0x00000004;
	/*0000*/ ULONG EnableThreadSuspendResumeLogging : 01; // 0x00000008;
	/*0000*/ ULONG Reserved : 28; // 0xfffffff0;
	/*0004*/
};

union _PROCESS_MEMORY_ALLOCATION_MODE {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG TopDown : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0004*/
};

struct _PROCESS_MEMORY_EXHAUSTION_INFO {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Reserved;
	/*0004*/ _PROCESS_MEMORY_EXHAUSTION_TYPE Type;
	/*0008*/ ULONGLONG Value;
	/*0010*/
};

enum _PROCESS_MEMORY_EXHAUSTION_TYPE {
	PMETypeFailFastOnCommitFailure = 0x0,
	PMETypeMax = 0x1
};

struct _PROCESS_MITIGATION_ASLR_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableBottomUpRandomization : 01; // 0x00000001;
	/*0000*/ ULONG EnableForceRelocateImages : 01; // 0x00000002;
	/*0000*/ ULONG EnableHighEntropy : 01; // 0x00000004;
	/*0000*/ ULONG DisallowStrippedImages : 01; // 0x00000008;
	/*0000*/ ULONG ReservedFlags : 28; // 0xfffffff0;
	/*0004*/
};

struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG MicrosoftSignedOnly : 01; // 0x00000001;
	/*0000*/ ULONG StoreSignedOnly : 01; // 0x00000002;
	/*0000*/ ULONG MitigationOptIn : 01; // 0x00000004;
	/*0000*/ ULONG AuditMicrosoftSignedOnly : 01; // 0x00000008;
	/*0000*/ ULONG AuditStoreSignedOnly : 01; // 0x00000010;
	/*0000*/ ULONG ReservedFlags : 27; // 0xffffffe0;
	/*0004*/
};

struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG NoChildProcessCreation : 01; // 0x00000001;
	/*0000*/ ULONG AuditNoChildProcessCreation : 01; // 0x00000002;
	/*0000*/ ULONG AllowSecureProcessCreation : 01; // 0x00000004;
	/*0000*/ ULONG ReservedFlags : 29; // 0xfffffff8;
	/*0004*/
};

struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableControlFlowGuard : 01; // 0x00000001;
	/*0000*/ ULONG EnableExportSuppression : 01; // 0x00000002;
	/*0000*/ ULONG StrictMode : 01; // 0x00000004;
	/*0000*/ ULONG ReservedFlags : 29; // 0xfffffff8;
	/*0004*/
};

struct _PROCESS_MITIGATION_DEP_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Enable : 01; // 0x00000001;
	/*0000*/ ULONG DisableAtlThunkEmulation : 01; // 0x00000002;
	/*0000*/ ULONG ReservedFlags : 30; // 0xfffffffc;
	/*0004*/ UCHAR Permanent;
	/*0008*/
};

struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG ProhibitDynamicCode : 01; // 0x00000001;
	/*0000*/ ULONG AllowThreadOptOut : 01; // 0x00000002;
	/*0000*/ ULONG AllowRemoteDowngrade : 01; // 0x00000004;
	/*0000*/ ULONG AuditProhibitDynamicCode : 01; // 0x00000008;
	/*0000*/ ULONG ReservedFlags : 28; // 0xfffffff0;
	/*0004*/
};

struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG DisableExtensionPoints : 01; // 0x00000001;
	/*0000*/ ULONG ReservedFlags : 31; // 0xfffffffe;
	/*0004*/
};

struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG DisableNonSystemFonts : 01; // 0x00000001;
	/*0000*/ ULONG AuditNonSystemFontLoading : 01; // 0x00000002;
	/*0000*/ ULONG ReservedFlags : 30; // 0xfffffffc;
	/*0004*/
};

struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG NoRemoteImages : 01; // 0x00000001;
	/*0000*/ ULONG NoLowMandatoryLabelImages : 01; // 0x00000002;
	/*0000*/ ULONG PreferSystem32Images : 01; // 0x00000004;
	/*0000*/ ULONG AuditNoRemoteImages : 01; // 0x00000008;
	/*0000*/ ULONG AuditNoLowMandatoryLabelImages : 01; // 0x00000010;
	/*0000*/ ULONG ReservedFlags : 27; // 0xffffffe0;
	/*0004*/
};

struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableExportAddressFilter : 01; // 0x00000001;
	/*0000*/ ULONG AuditExportAddressFilter : 01; // 0x00000002;
	/*0000*/ ULONG EnableExportAddressFilterPlus : 01; // 0x00000004;
	/*0000*/ ULONG AuditExportAddressFilterPlus : 01; // 0x00000008;
	/*0000*/ ULONG EnableImportAddressFilter : 01; // 0x00000010;
	/*0000*/ ULONG AuditImportAddressFilter : 01; // 0x00000020;
	/*0000*/ ULONG EnableRopStackPivot : 01; // 0x00000040;
	/*0000*/ ULONG AuditRopStackPivot : 01; // 0x00000080;
	/*0000*/ ULONG EnableRopCallerCheck : 01; // 0x00000100;
	/*0000*/ ULONG AuditRopCallerCheck : 01; // 0x00000200;
	/*0000*/ ULONG EnableRopSimExec : 01; // 0x00000400;
	/*0000*/ ULONG AuditRopSimExec : 01; // 0x00000800;
	/*0000*/ ULONG ReservedFlags : 20; // 0xfffff000;
	/*0004*/
};

enum _PROCESS_MITIGATION_POLICY {
	ProcessDEPPolicy = 0x0,
	ProcessASLRPolicy = 0x1,
	ProcessDynamicCodePolicy = 0x2,
	ProcessStrictHandleCheckPolicy = 0x3,
	ProcessSystemCallDisablePolicy = 0x4,
	ProcessMitigationOptionsMask = 0x5,
	ProcessExtensionPointDisablePolicy = 0x6,
	ProcessControlFlowGuardPolicy = 0x7,
	ProcessSignaturePolicy = 0x8,
	ProcessFontDisablePolicy = 0x9,
	ProcessImageLoadPolicy = 0xa,
	ProcessSystemCallFilterPolicy = 0xb,
	ProcessPayloadRestrictionPolicy = 0xc,
	ProcessChildProcessPolicy = 0xd,
	ProcessSideChannelIsolationPolicy = 0xe,
	ProcessUserShadowStackPolicy = 0xf,
	MaxProcessMitigationPolicy = 0x10
};

struct _PROCESS_MITIGATION_POLICY_INFORMATION {
	/*0000*/ _PROCESS_MITIGATION_POLICY Policy;
	/*0004*/ _PROCESS_MITIGATION_ASLR_POLICY ASLRPolicy;
	/*0004*/ _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY StrictHandleCheckPolicy;
	/*0004*/ _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY SystemCallDisablePolicy;
	/*0004*/ _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY ExtensionPointDisablePolicy;
	/*0004*/ _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY DynamicCodePolicy;
	/*0004*/ _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY ControlFlowGuardPolicy;
	/*0004*/ _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY SignaturePolicy;
	/*0004*/ _PROCESS_MITIGATION_FONT_DISABLE_POLICY FontDisablePolicy;
	/*0004*/ _PROCESS_MITIGATION_IMAGE_LOAD_POLICY ImageLoadPolicy;
	/*0004*/ _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY SystemCallFilterPolicy;
	/*0004*/ _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY PayloadRestrictionPolicy;
	/*0004*/ _PROCESS_MITIGATION_CHILD_PROCESS_POLICY ChildProcessPolicy;
	/*0004*/ _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY SideChannelIsolationPolicy;
	/*0004*/ _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY UserShadowStackPolicy;
	/*0008*/
};

struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG SmtBranchTargetIsolation : 01; // 0x00000001;
	/*0000*/ ULONG IsolateSecurityDomain : 01; // 0x00000002;
	/*0000*/ ULONG DisablePageCombine : 01; // 0x00000004;
	/*0000*/ ULONG SpeculativeStoreBypassDisable : 01; // 0x00000008;
	/*0000*/ ULONG ReservedFlags : 28; // 0xfffffff0;
	/*0004*/
};

struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG RaiseExceptionOnInvalidHandleReference : 01; // 0x00000001;
	/*0000*/ ULONG HandleExceptionsPermanentlyEnabled : 01; // 0x00000002;
	/*0000*/ ULONG ReservedFlags : 30; // 0xfffffffc;
	/*0004*/
};

struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG DisallowWin32kSystemCalls : 01; // 0x00000001;
	/*0000*/ ULONG AuditDisallowWin32kSystemCalls : 01; // 0x00000002;
	/*0000*/ ULONG ReservedFlags : 30; // 0xfffffffc;
	/*0004*/
};

struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG FilterId : 04; // 0x0000000f;
	/*0000*/ ULONG ReservedFlags : 28; // 0xfffffff0;
	/*0004*/
};

struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG EnableUserShadowStack : 01; // 0x00000001;
	/*0000*/ ULONG AuditUserShadowStack : 01; // 0x00000002;
	/*0000*/ ULONG SetContextIpValidation : 01; // 0x00000004;
	/*0000*/ ULONG AuditSetContextIpValidation : 01; // 0x00000008;
	/*0000*/ ULONG EnableUserShadowStackStrictMode : 01; // 0x00000010;
	/*0000*/ ULONG BlockNonCetBinaries : 01; // 0x00000020;
	/*0000*/ ULONG BlockNonCetBinariesNonEhcont : 01; // 0x00000040;
	/*0000*/ ULONG AuditBlockNonCetBinaries : 01; // 0x00000080;
	/*0000*/ ULONG CetDynamicApisOutOfProcOnly : 01; // 0x00000100;
	/*0000*/ ULONG SetContextIpValidationRelaxedMode : 01; // 0x00000200;
	/*0000*/ ULONG ReservedFlags : 22; // 0xfffffc00;
	/*0004*/
};

struct _PROCESS_POWER_THROTTLING_STATE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG ControlMask;
	/*0008*/ ULONG StateMask;
	/*000c*/
};

struct _PROCESS_PRIORITY_CLASS {
	/*0000*/ UCHAR Foreground;
	/*0001*/ UCHAR PriorityClass;
	/*0002*/
};

union _PROCESS_READWRITEVM_LOGGING_INFORMATION {
	/*0000*/ UCHAR Flags;
	/*0000*/ UCHAR EnableReadVmLogging : 01; // 0x01;
	/*0000*/ UCHAR EnableWriteVmLogging : 01; // 0x02;
	/*0000*/ UCHAR Unused : 06; // 0xfc;
	/*0001*/
};

struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION {
	/*0000*/ _UNICODE_STRING TargetDevicePath;
	/*0010*/
};

struct _PROCESS_SECURITY_DOMAIN_INFORMATION {
	/*0000*/ ULONGLONG SecurityDomain;
	/*0008*/
};

struct _PROCESS_SESSION_INFORMATION {
	/*0000*/ ULONG SessionId;
	/*0004*/
};

struct _PROCESS_STACK_ALLOCATION_INFORMATION {
	/*0000*/ ULONGLONG ReserveSize;
	/*0008*/ ULONGLONG ZeroBits;
	/*0010*/ void * StackBase;
	/*0018*/
};

struct _PROCESS_STACK_ALLOCATION_INFORMATION_EX {
	/*0000*/ ULONG PreferredNode;
	/*0004*/ ULONG Reserved0;
	/*0008*/ ULONG Reserved1;
	/*000c*/ ULONG Reserved2;
	/*0010*/ _PROCESS_STACK_ALLOCATION_INFORMATION AllocInfo;
	/*0028*/
};

union _PROCESS_SYSTEM_RESOURCE_MANAGEMENT {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Foreground : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0004*/
};

struct _PROCESS_TELEMETRY_ID_INFORMATION {
	/*0000*/ ULONG HeaderSize;
	/*0004*/ ULONG ProcessId;
	/*0008*/ ULONGLONG ProcessStartKey;
	/*0010*/ ULONGLONG CreateTime;
	/*0018*/ ULONGLONG CreateInterruptTime;
	/*0020*/ ULONGLONG CreateUnbiasedInterruptTime;
	/*0028*/ ULONGLONG ProcessSequenceNumber;
	/*0030*/ ULONGLONG SessionCreateTime;
	/*0038*/ ULONG SessionId;
	/*003c*/ ULONG BootId;
	/*0040*/ ULONG ImageChecksum;
	/*0044*/ ULONG ImageTimeDateStamp;
	/*0048*/ ULONG UserSidOffset;
	/*004c*/ ULONG ImagePathOffset;
	/*0050*/ ULONG PackageNameOffset;
	/*0054*/ ULONG RelativeAppNameOffset;
	/*0058*/ ULONG CommandLineOffset;
	/*0060*/
};

struct _PROCESS_TLS_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG OperationType;
	/*0008*/ ULONG ThreadDataCount;
	/*000c*/ ULONG TlsIndex;
	/*000c*/ ULONG PreviousCount;
	/*0010*/ _THREAD_TLS_INFORMATION ThreadData[0x1];
	/*0028*/
};

enum _PROCESS_TLS_INFORMATION_TYPE {
	ProcessTlsReplaceIndex = 0x0,
	ProcessTlsReplaceVector = 0x1,
	MaxProcessTlsOperation = 0x2
};

struct _PROCESS_UPTIME_INFORMATION {
	/*0000*/ ULONGLONG QueryInterruptTime;
	/*0008*/ ULONGLONG QueryUnbiasedTime;
	/*0010*/ ULONGLONG EndInterruptTime;
	/*0018*/ ULONGLONG TimeSinceCreation;
	/*0020*/ ULONGLONG Uptime;
	/*0028*/ ULONGLONG SuspendedTime;
	/*0030*/ ULONG HangCount : 04; // 0x0000000f;
	/*0030*/ ULONG GhostCount : 04; // 0x000000f0;
	/*0030*/ ULONG Crashed : 01; // 0x00000100;
	/*0030*/ ULONG Terminated : 01; // 0x00000200;
	/*0038*/
};

struct _PROCESS_WAKE_INFORMATION {
	/*0000*/ ULONGLONG NotificationChannel;
	/*0008*/ ULONG WakeCounters[0x7];
	/*0024*/ _JOBOBJECT_WAKE_FILTER WakeFilter;
	/*0030*/
};

struct _PROCESS_WINDOW_INFORMATION {
	/*0000*/ ULONG WindowFlags;
	/*0004*/ USHORT WindowTitleLength;
	/*0006*/ WCHAR WindowTitle[0x1];
	/*0008*/
};

struct _PROCESS_WORKING_SET_CONTROL {
	/*0000*/ ULONG Version;
	/*0004*/ _PROCESS_WORKING_SET_OPERATION Operation;
	/*0008*/ ULONG Flags;
	/*000c*/
};

enum _PROCESS_WORKING_SET_OPERATION {
	ProcessWorkingSetSwap = 0x0,
	ProcessWorkingSetEmpty = 0x1,
	ProcessWorkingSetOperationMax = 0x2
};

struct _PROCESS_WS_WATCH_INFORMATION {
	/*0000*/ void * FaultingPc;
	/*0008*/ void * FaultingVa;
	/*0010*/
};

struct _PROCESS_WS_WATCH_INFORMATION_EX {
	/*0000*/ _PROCESS_WS_WATCH_INFORMATION BasicInfo;
	/*0010*/ ULONGLONG FaultingThreadId;
	/*0018*/ ULONGLONG Flags;
	/*0020*/
};

struct _PROC_THREAD_ATTRIBUTE_LIST;

enum _PROC_THREAD_ATTRIBUTE_NUM {
	ProcThreadAttributeParentProcess = 0x0,
	ProcThreadAttributeHandleList = 0x2,
	ProcThreadAttributeGroupAffinity = 0x3,
	ProcThreadAttributePreferredNode = 0x4,
	ProcThreadAttributeIdealProcessor = 0x5,
	ProcThreadAttributeUmsThread = 0x6,
	ProcThreadAttributeMitigationPolicy = 0x7,
	ProcThreadAttributeSecurityCapabilities = 0x9,
	ProcThreadAttributeProtectionLevel = 0xb,
	ProcThreadAttributeJobList = 0xd,
	ProcThreadAttributeChildProcessPolicy = 0xe,
	ProcThreadAttributeAllApplicationPackagesPolicy = 0xf,
	ProcThreadAttributeWin32kFilter = 0x10,
	ProcThreadAttributeSafeOpenPromptOriginClaim = 0x11,
	ProcThreadAttributeDesktopAppPolicy = 0x12,
	ProcThreadAttributePseudoConsole = 0x16,
	ProcThreadAttributeMitigationAuditPolicy = 0x18
};

struct _PROFILE_SOURCE_INFO {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG Source;
	/*0008*/ ULONG MinInterval;
	/*000c*/ ULONG MaxInterval;
	/*0010*/ ULONGLONG Reserved;
	/*0018*/ WCHAR Description[0x1];
	/*0020*/
};

enum _PROPERTYUI_FLAGS {
	PUIF_DEFAULT = 0x0,
	PUIF_RIGHTALIGN = 0x1,
	PUIF_NOLABELININFOTIP = 0x2
};

enum _PROPERTYUI_FORMAT_FLAGS {
	PUIFFDF_DEFAULT = 0x0,
	PUIFFDF_RIGHTTOLEFT = 0x1,
	PUIFFDF_SHORTFORMAT = 0x2,
	PUIFFDF_NOTIME = 0x4,
	PUIFFDF_FRIENDLYDATE = 0x8
};

enum _PROPERTYUI_NAME_FLAGS {
	PUIFNF_DEFAULT = 0x0,
	PUIFNF_MNEMONIC = 0x1
};

struct _PROPSHEETHEADERA_V1 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndParent;
	/*0010*/ HINSTANCE__ * hInstance;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ CHAR const * pszIcon;
	/*0020*/ CHAR const * pszCaption;
	/*0028*/ UINT nPages;
	/*0030*/ UINT nStartPage;
	/*0030*/ CHAR const * pStartPage;
	/*0038*/ _PROPSHEETPAGEA const * ppsp;
	/*0038*/ _PSP * * phpage;
	/*0040*/ INT (* pfnCallback)( HWND__ * , UINT , LONGLONG );
	/*0048*/
};

struct _PROPSHEETHEADERA_V2 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndParent;
	/*0010*/ HINSTANCE__ * hInstance;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ CHAR const * pszIcon;
	/*0020*/ CHAR const * pszCaption;
	/*0028*/ UINT nPages;
	/*0030*/ UINT nStartPage;
	/*0030*/ CHAR const * pStartPage;
	/*0038*/ _PROPSHEETPAGEA const * ppsp;
	/*0038*/ _PSP * * phpage;
	/*0040*/ INT (* pfnCallback)( HWND__ * , UINT , LONGLONG );
	/*0048*/ HBITMAP__ * hbmWatermark;
	/*0048*/ CHAR const * pszbmWatermark;
	/*0050*/ HPALETTE__ * hplWatermark;
	/*0058*/ HBITMAP__ * hbmHeader;
	/*0058*/ CHAR const * pszbmHeader;
	/*0060*/
};

struct _PROPSHEETHEADERW_V1 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndParent;
	/*0010*/ HINSTANCE__ * hInstance;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ WCHAR const * pszIcon;
	/*0020*/ WCHAR const * pszCaption;
	/*0028*/ UINT nPages;
	/*0030*/ UINT nStartPage;
	/*0030*/ WCHAR const * pStartPage;
	/*0038*/ _PROPSHEETPAGEW const * ppsp;
	/*0038*/ _PSP * * phpage;
	/*0040*/ INT (* pfnCallback)( HWND__ * , UINT , LONGLONG );
	/*0048*/
};

struct _PROPSHEETHEADERW_V2 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndParent;
	/*0010*/ HINSTANCE__ * hInstance;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ WCHAR const * pszIcon;
	/*0020*/ WCHAR const * pszCaption;
	/*0028*/ UINT nPages;
	/*0030*/ UINT nStartPage;
	/*0030*/ WCHAR const * pStartPage;
	/*0038*/ _PROPSHEETPAGEW const * ppsp;
	/*0038*/ _PSP * * phpage;
	/*0040*/ INT (* pfnCallback)( HWND__ * , UINT , LONGLONG );
	/*0048*/ HBITMAP__ * hbmWatermark;
	/*0048*/ WCHAR const * pszbmWatermark;
	/*0050*/ HPALETTE__ * hplWatermark;
	/*0058*/ HBITMAP__ * hbmHeader;
	/*0058*/ WCHAR const * pszbmHeader;
	/*0060*/
};

struct _PROPSHEETPAGEA {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ CHAR const * pszTemplate;
	/*0010*/ DLGTEMPLATE const * pResource;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ CHAR const * pszIcon;
	/*0020*/ CHAR const * pszTitle;
	/*0028*/ LONGLONG (* pfnDlgProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0030*/ LONGLONG lParam;
	/*0038*/ UINT (* pfnCallback)( HWND__ * , UINT , _PROPSHEETPAGEA * );
	/*0040*/ UINT * pcRefParent;
	/*0048*/ CHAR const * pszHeaderTitle;
	/*0050*/ CHAR const * pszHeaderSubTitle;
	/*0058*/ void * hActCtx;
	/*0060*/ HBITMAP__ * hbmHeader;
	/*0060*/ CHAR const * pszbmHeader;
	/*0068*/
};

struct _PROPSHEETPAGEA_V1 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ CHAR const * pszTemplate;
	/*0010*/ DLGTEMPLATE const * pResource;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ CHAR const * pszIcon;
	/*0020*/ CHAR const * pszTitle;
	/*0028*/ LONGLONG (* pfnDlgProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0030*/ LONGLONG lParam;
	/*0038*/ UINT (* pfnCallback)( HWND__ * , UINT , _PROPSHEETPAGEA * );
	/*0040*/ UINT * pcRefParent;
	/*0048*/
};

struct _PROPSHEETPAGEA_V2 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ CHAR const * pszTemplate;
	/*0010*/ DLGTEMPLATE const * pResource;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ CHAR const * pszIcon;
	/*0020*/ CHAR const * pszTitle;
	/*0028*/ LONGLONG (* pfnDlgProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0030*/ LONGLONG lParam;
	/*0038*/ UINT (* pfnCallback)( HWND__ * , UINT , _PROPSHEETPAGEA * );
	/*0040*/ UINT * pcRefParent;
	/*0048*/ CHAR const * pszHeaderTitle;
	/*0050*/ CHAR const * pszHeaderSubTitle;
	/*0058*/
};

struct _PROPSHEETPAGEA_V3 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ CHAR const * pszTemplate;
	/*0010*/ DLGTEMPLATE const * pResource;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ CHAR const * pszIcon;
	/*0020*/ CHAR const * pszTitle;
	/*0028*/ LONGLONG (* pfnDlgProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0030*/ LONGLONG lParam;
	/*0038*/ UINT (* pfnCallback)( HWND__ * , UINT , _PROPSHEETPAGEA * );
	/*0040*/ UINT * pcRefParent;
	/*0048*/ CHAR const * pszHeaderTitle;
	/*0050*/ CHAR const * pszHeaderSubTitle;
	/*0058*/ void * hActCtx;
	/*0060*/
};

struct _PROPSHEETPAGEW {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ WCHAR const * pszTemplate;
	/*0010*/ DLGTEMPLATE const * pResource;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ WCHAR const * pszIcon;
	/*0020*/ WCHAR const * pszTitle;
	/*0028*/ LONGLONG (* pfnDlgProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0030*/ LONGLONG lParam;
	/*0038*/ UINT (* pfnCallback)( HWND__ * , UINT , _PROPSHEETPAGEW * );
	/*0040*/ UINT * pcRefParent;
	/*0048*/ WCHAR const * pszHeaderTitle;
	/*0050*/ WCHAR const * pszHeaderSubTitle;
	/*0058*/ void * hActCtx;
	/*0060*/ HBITMAP__ * hbmHeader;
	/*0060*/ WCHAR const * pszbmHeader;
	/*0068*/
};

struct _PROPSHEETPAGEW_V1 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ WCHAR const * pszTemplate;
	/*0010*/ DLGTEMPLATE const * pResource;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ WCHAR const * pszIcon;
	/*0020*/ WCHAR const * pszTitle;
	/*0028*/ LONGLONG (* pfnDlgProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0030*/ LONGLONG lParam;
	/*0038*/ UINT (* pfnCallback)( HWND__ * , UINT , _PROPSHEETPAGEW * );
	/*0040*/ UINT * pcRefParent;
	/*0048*/
};

struct _PROPSHEETPAGEW_V2 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ WCHAR const * pszTemplate;
	/*0010*/ DLGTEMPLATE const * pResource;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ WCHAR const * pszIcon;
	/*0020*/ WCHAR const * pszTitle;
	/*0028*/ LONGLONG (* pfnDlgProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0030*/ LONGLONG lParam;
	/*0038*/ UINT (* pfnCallback)( HWND__ * , UINT , _PROPSHEETPAGEW * );
	/*0040*/ UINT * pcRefParent;
	/*0048*/ WCHAR const * pszHeaderTitle;
	/*0050*/ WCHAR const * pszHeaderSubTitle;
	/*0058*/
};

struct _PROPSHEETPAGEW_V3 {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ WCHAR const * pszTemplate;
	/*0010*/ DLGTEMPLATE const * pResource;
	/*0018*/ HICON__ * hIcon;
	/*0018*/ WCHAR const * pszIcon;
	/*0020*/ WCHAR const * pszTitle;
	/*0028*/ LONGLONG (* pfnDlgProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0030*/ LONGLONG lParam;
	/*0038*/ UINT (* pfnCallback)( HWND__ * , UINT , _PROPSHEETPAGEW * );
	/*0040*/ UINT * pcRefParent;
	/*0048*/ WCHAR const * pszHeaderTitle;
	/*0050*/ WCHAR const * pszHeaderSubTitle;
	/*0058*/ void * hActCtx;
	/*0060*/
};

struct _PSFEATURE_CUSTPAPER {
	/*0000*/ LONG lOrientation;
	/*0004*/ LONG lWidth;
	/*0008*/ LONG lHeight;
	/*000c*/ LONG lWidthOffset;
	/*0010*/ LONG lHeightOffset;
	/*0014*/
};

struct _PSFEATURE_OUTPUT {
	/*0000*/ INT bPageIndependent;
	/*0004*/ INT bSetPageDevice;
	/*0008*/
};

struct _PSHNOTIFY {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ LONGLONG lParam;
	/*0020*/
};

struct _PSINJECTDATA {
	/*0000*/ ULONG DataBytes;
	/*0004*/ USHORT InjectionPoint;
	/*0006*/ USHORT PageNumber;
	/*0008*/
};

enum _PSM_APPSTATE_CHANGE_ROUTINE_CATEGORY {
	StateChangeCategorySystem = 0x0,
	StateChangeCategoryLibrary = 0x1,
	StateChangeCategoryFramework = 0x2,
	StateChangeCategoryApplication = 0x3,
	StateChangeCategoryMaximum = 0x4
};

struct _PSM_APPSTATE_REGISTRATION;

struct _PSP;

struct _PS_ATTRIBUTE {
	/*0000*/ ULONGLONG Attribute;
	/*0008*/ ULONGLONG Size;
	/*0010*/ ULONGLONG Value;
	/*0010*/ void * ValuePtr;
	/*0018*/ ULONGLONG * ReturnLength;
	/*0020*/
};

struct _PS_ATTRIBUTE_LIST {
	/*0000*/ ULONGLONG TotalLength;
	/*0008*/ _PS_ATTRIBUTE Attributes[0x1];
	/*0028*/
};

enum _PS_ATTRIBUTE_NUM {
	PsAttributeParentProcess = 0x0,
	PsAttributeDebugObject = 0x1,
	PsAttributeToken = 0x2,
	PsAttributeClientId = 0x3,
	PsAttributeTebAddress = 0x4,
	PsAttributeImageName = 0x5,
	PsAttributeImageInfo = 0x6,
	PsAttributeMemoryReserve = 0x7,
	PsAttributePriorityClass = 0x8,
	PsAttributeErrorMode = 0x9,
	PsAttributeStdHandleInfo = 0xa,
	PsAttributeHandleList = 0xb,
	PsAttributeGroupAffinity = 0xc,
	PsAttributePreferredNode = 0xd,
	PsAttributeIdealProcessor = 0xe,
	PsAttributeUmsThread = 0xf,
	PsAttributeMitigationOptions = 0x10,
	PsAttributeProtectionLevel = 0x11,
	PsAttributeSecureProcess = 0x12,
	PsAttributeJobList = 0x13,
	PsAttributeChildProcessPolicy = 0x14,
	PsAttributeAllApplicationPackagesPolicy = 0x15,
	PsAttributeWin32kFilter = 0x16,
	PsAttributeSafeOpenPromptOriginClaim = 0x17,
	PsAttributeBnoIsolation = 0x18,
	PsAttributeDesktopAppPolicy = 0x19,
	PsAttributeChpe = 0x1a,
	PsAttributeMitigationAuditOptions = 0x1b,
	PsAttributeMax = 0x1c
};

struct _PS_BNO_ISOLATION_PARAMETERS {
	/*0000*/ _UNICODE_STRING IsolationPrefix;
	/*0010*/ ULONG HandleCount;
	/*0018*/ void * * Handles;
	/*0020*/ UCHAR IsolationEnabled;
	/*0028*/
};

struct _PS_CPU_QUOTA_QUERY_ENTRY {
	/*0000*/ ULONG SessionId;
	/*0004*/ ULONG Weight;
	/*0008*/
};

struct _PS_CPU_QUOTA_QUERY_INFORMATION {
	/*0000*/ ULONG SessionCount;
	/*0004*/ _PS_CPU_QUOTA_QUERY_ENTRY SessionInformation[0x1];
	/*000c*/
};

struct _PS_CPU_QUOTA_SET_INFORMATION {
	/*0000*/ LONGLONG SessionHandle;
	/*0008*/ ULONG Weight;
	/*0010*/
};

struct _PS_CREATE_INFO {
	
	/*0000*/ ULONGLONG Size;
	/*0008*/ PS_CREATE_STATE State;
	/*0010*/ <unnamed-type-InitState> InitState;
	/*0010*/ <unnamed-type-FailSection> FailSection;
	/*0010*/ <unnamed-type-ExeFormat> ExeFormat;
	/*0010*/ <unnamed-type-ExeName> ExeName;
	/*0010*/ <unnamed-type-SuccessState> SuccessState;
	/*0058*/
};

struct _PS_MEMORY_RESERVE {
	/*0000*/ void * ReserveAddress;
	/*0008*/ ULONGLONG ReserveSize;
	/*0010*/
};

struct _PS_MITIGATION_AUDIT_OPTIONS_MAP {
	/*0000*/ ULONGLONG Map[0x3];
	/*0018*/
};

enum _PS_MITIGATION_OPTION {
	PS_MITIGATION_OPTION_NX = 0x0,
	PS_MITIGATION_OPTION_SEHOP = 0x1,
	PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 0x2,
	PS_MITIGATION_OPTION_HEAP_TERMINATE = 0x3,
	PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 0x4,
	PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 0x5,
	PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 0x6,
	PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 0x7,
	PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 0x8,
	PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 0x9,
	PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 0xa,
	PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 0xb,
	PS_MITIGATION_OPTION_FONT_DISABLE = 0xc,
	PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 0xd,
	PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 0xe,
	PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 0xf,
	PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 0x10,
	PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 0x11,
	PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 0x12,
	PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 0x13,
	PS_MITIGATION_OPTION_ROP_STACKPIVOT = 0x14,
	PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 0x15,
	PS_MITIGATION_OPTION_ROP_SIMEXEC = 0x16,
	PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 0x17,
	PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 0x18,
	PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 0x19,
	PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 0x1a,
	PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 0x1b,
	PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 0x1c,
	PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 0x1d,
	PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 0x1e,
	PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS = 0x1f,
	PS_MITIGATION_OPTION_USER_CET_SET_CONTEXT_IP_VALIDATION = 0x20,
	PS_MITIGATION_OPTION_BLOCK_NON_CET_BINARIES = 0x21,
	PS_MITIGATION_OPTION_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY = 0x24
};

struct _PS_MITIGATION_OPTIONS_MAP {
	/*0000*/ ULONGLONG Map[0x3];
	/*0018*/
};

struct _PS_PKG_CLAIM {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Origin : 08; // 0x000000ff;
	/*0008*/
};

enum _PS_PROTECTED_SIGNER {
	PsProtectedSignerNone = 0x0,
	PsProtectedSignerAuthenticode = 0x1,
	PsProtectedSignerCodeGen = 0x2,
	PsProtectedSignerAntimalware = 0x3,
	PsProtectedSignerLsa = 0x4,
	PsProtectedSignerWindows = 0x5,
	PsProtectedSignerWinTcb = 0x6,
	PsProtectedSignerWinSystem = 0x7,
	PsProtectedSignerApp = 0x8,
	PsProtectedSignerMax = 0x9
};

enum _PS_PROTECTED_TYPE {
	PsProtectedTypeNone = 0x0,
	PsProtectedTypeProtectedLight = 0x1,
	PsProtectedTypeProtected = 0x2,
	PsProtectedTypeMax = 0x3
};

struct _PS_PROTECTION {
	/*0000*/ UCHAR Level;
	/*0000*/ UCHAR Type : 03; // 0x07;
	/*0000*/ UCHAR Audit : 01; // 0x08;
	/*0000*/ UCHAR Signer : 04; // 0xf0;
	/*0001*/
};

struct _PS_STD_HANDLE_INFO {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG StdHandleState : 02; // 0x00000003;
	/*0000*/ ULONG PseudoHandleMask : 03; // 0x0000001c;
	/*0004*/ ULONG StdHandleSubsystemType;
	/*0008*/
};

enum _PS_STD_HANDLE_STATE {
	PsNeverDuplicate = 0x0,
	PsRequestDuplicate = 0x1,
	PsAlwaysDuplicate = 0x2,
	PsMaxStdHandleStates = 0x3
};

struct _PS_SYSTEM_DLL_INIT_BLOCK {
	/*0000*/ ULONG Size;
	/*0008*/ ULONGLONG SystemDllWowRelocation;
	/*0010*/ ULONGLONG SystemDllNativeRelocation;
	/*0018*/ ULONGLONG Wow64SharedInformation[0x10];
	/*0098*/ ULONG RngData;
	/*009c*/ ULONG Flags;
	/*009c*/ ULONG CfgOverride : 01; // 0x00000001;
	/*009c*/ ULONG Reserved : 31; // 0xfffffffe;
	/*00a0*/ _PS_MITIGATION_OPTIONS_MAP MitigationOptionsMap;
	/*00b8*/ ULONGLONG CfgBitMap;
	/*00c0*/ ULONGLONG CfgBitMapSize;
	/*00c8*/ ULONGLONG Wow64CfgBitMap;
	/*00d0*/ ULONGLONG Wow64CfgBitMapSize;
	/*00d8*/ _PS_MITIGATION_AUDIT_OPTIONS_MAP MitigationAuditOptionsMap;
	/*00f0*/
};

enum _PS_WAKE_REASON {
	PsWakeReasonUser = 0x0,
	PsWakeReasonExecutionRequired = 0x1,
	PsWakeReasonKernel = 0x2,
	PsWakeReasonInstrumentation = 0x3,
	PsWakeReasonPreserveProcess = 0x4,
	PsWakeReasonActivityReference = 0x5,
	PsWakeReasonWorkOnBehalf = 0x6,
	PsMaxWakeReasons = 0x7
};

struct _PUBLIC_OBJECT_BASIC_INFORMATION {
	/*0000*/ ULONG Attributes;
	/*0004*/ ULONG GrantedAccess;
	/*0008*/ ULONG HandleCount;
	/*000c*/ ULONG PointerCount;
	/*0010*/ ULONG Reserved[0xa];
	/*0038*/
};

union _PV {
	/*0000*/ SHORT i;
	/*0000*/ LONG l;
	/*0000*/ ULONG ul;
	/*0000*/ float flt;
	/*0000*/ double dbl;
	/*0000*/ USHORT b;
	/*0000*/ tagCY cur;
	/*0000*/ double at;
	/*0000*/ _FILETIME ft;
	/*0000*/ CHAR * lpszA;
	/*0000*/ _SBinary bin;
	/*0000*/ WCHAR * lpszW;
	/*0000*/ _GUID * lpguid;
	/*0000*/ _LARGE_INTEGER li;
	/*0000*/ _SShortArray MVi;
	/*0000*/ _SLongArray MVl;
	/*0000*/ _SRealArray MVflt;
	/*0000*/ _SDoubleArray MVdbl;
	/*0000*/ _SCurrencyArray MVcur;
	/*0000*/ _SAppTimeArray MVat;
	/*0000*/ _SDateTimeArray MVft;
	/*0000*/ _SBinaryArray MVbin;
	/*0000*/ _SLPSTRArray MVszA;
	/*0000*/ _SWStringArray MVszW;
	/*0000*/ _SGuidArray MVguid;
	/*0000*/ _SLargeIntegerArray MVli;
	/*0000*/ LONG err;
	/*0000*/ LONG x;
	/*0010*/
};

struct _QOS_SD_MODE {
	/*0000*/ QOS_OBJECT_HDR ObjectHdr;
	/*0008*/ ULONG ShapeDiscardMode;
	/*000c*/
};

struct _QOS_SHAPING_RATE {
	/*0000*/ QOS_OBJECT_HDR ObjectHdr;
	/*0008*/ ULONG ShapingRate;
	/*000c*/
};

struct _QUAD {
	/*0000*/ LONGLONG UseThisFieldToCopy;
	/*0000*/ double DoNotUseThisField;
	/*0008*/
};

struct _QUERY_BAD_RANGES_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumRanges;
	/*0008*/ _QUERY_BAD_RANGES_INPUT_RANGE Ranges[0x1];
	/*0018*/
};

struct _QUERY_BAD_RANGES_INPUT_RANGE {
	/*0000*/ ULONGLONG StartOffset;
	/*0008*/ ULONGLONG LengthInBytes;
	/*0010*/
};

struct _QUERY_BAD_RANGES_OUTPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG NumBadRanges;
	/*0008*/ ULONGLONG NextOffsetToLookUp;
	/*0010*/ _QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[0x1];
	/*0028*/
};

struct _QUERY_BAD_RANGES_OUTPUT_RANGE {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Reserved;
	/*0008*/ ULONGLONG StartOffset;
	/*0010*/ ULONGLONG LengthInBytes;
	/*0018*/
};

enum _QUERY_FILE_LAYOUT_FILTER_TYPE {
	QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0x0,
	QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 0x1,
	QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 0x2,
	QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 0x3,
	QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 0x4
};

struct _QUERY_FILE_LAYOUT_INPUT {
	
	/*0000*/ ULONG FilterEntryCount;
	/*0000*/ ULONG NumberOfPairs;
	/*0004*/ ULONG Flags;
	/*0008*/ _QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
	/*000c*/ ULONG Reserved;
	/*0010*/ <unnamed-type-Filter> Filter;
	/*0020*/
};

struct _QUERY_FILE_LAYOUT_OUTPUT {
	/*0000*/ ULONG FileEntryCount;
	/*0004*/ ULONG FirstFileOffset;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Reserved;
	/*0010*/
};

struct _QUERY_PERFORMANCE_COUNTER_FLAGS {
	/*0000*/ ULONG KernelTransition : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0000*/ ULONG ul;
	/*0004*/
};

struct _QUERY_SERVICE_CONFIGA {
	/*0000*/ ULONG dwServiceType;
	/*0004*/ ULONG dwStartType;
	/*0008*/ ULONG dwErrorControl;
	/*0010*/ CHAR * lpBinaryPathName;
	/*0018*/ CHAR * lpLoadOrderGroup;
	/*0020*/ ULONG dwTagId;
	/*0028*/ CHAR * lpDependencies;
	/*0030*/ CHAR * lpServiceStartName;
	/*0038*/ CHAR * lpDisplayName;
	/*0040*/
};

struct _QUERY_SERVICE_CONFIGW {
	/*0000*/ ULONG dwServiceType;
	/*0004*/ ULONG dwStartType;
	/*0008*/ ULONG dwErrorControl;
	/*0010*/ WCHAR * lpBinaryPathName;
	/*0018*/ WCHAR * lpLoadOrderGroup;
	/*0020*/ ULONG dwTagId;
	/*0028*/ WCHAR * lpDependencies;
	/*0030*/ WCHAR * lpServiceStartName;
	/*0038*/ WCHAR * lpDisplayName;
	/*0040*/
};

struct _QUERY_SERVICE_LOCK_STATUSA {
	/*0000*/ ULONG fIsLocked;
	/*0008*/ CHAR * lpLockOwner;
	/*0010*/ ULONG dwLockDuration;
	/*0018*/
};

struct _QUERY_SERVICE_LOCK_STATUSW {
	/*0000*/ ULONG fIsLocked;
	/*0008*/ WCHAR * lpLockOwner;
	/*0010*/ ULONG dwLockDuration;
	/*0018*/
};

struct _QUERY_STORAGE_RESERVE_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG AreaIdOffset;
	/*000c*/ ULONG AreaIdCount;
	/*0010*/ _STORAGE_RESERVE_ID AreaId[0x1];
	/*0014*/
};

struct _QUERY_STORAGE_RESERVE_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG AreaInfoCount;
	/*0008*/ _STORAGE_RESERVE_AREA_INFO AreaInfo[0x1];
	/*0020*/
};

struct _QUOTA_LIMITS {
	/*0000*/ ULONGLONG PagedPoolLimit;
	/*0008*/ ULONGLONG NonPagedPoolLimit;
	/*0010*/ ULONGLONG MinimumWorkingSetSize;
	/*0018*/ ULONGLONG MaximumWorkingSetSize;
	/*0020*/ ULONGLONG PagefileLimit;
	/*0028*/ _LARGE_INTEGER TimeLimit;
	/*0030*/
};

struct _QUOTA_LIMITS_EX {
	/*0000*/ ULONGLONG PagedPoolLimit;
	/*0008*/ ULONGLONG NonPagedPoolLimit;
	/*0010*/ ULONGLONG MinimumWorkingSetSize;
	/*0018*/ ULONGLONG MaximumWorkingSetSize;
	/*0020*/ ULONGLONG PagefileLimit;
	/*0028*/ _LARGE_INTEGER TimeLimit;
	/*0030*/ ULONGLONG WorkingSetLimit;
	/*0038*/ ULONGLONG Reserved2;
	/*0040*/ ULONGLONG Reserved3;
	/*0048*/ ULONGLONG Reserved4;
	/*0050*/ ULONG Flags;
	/*0054*/ _RATE_QUOTA_LIMIT CpuRateLimit;
	/*0058*/
};

struct _QualityOfService {
	/*0000*/ _flowspec SendingFlowspec;
	/*0020*/ _flowspec ReceivingFlowspec;
	/*0040*/ _WSABUF ProviderSpecific;
	/*0050*/
};

struct _RASTERIZER_STATUS {
	/*0000*/ SHORT nSize;
	/*0002*/ SHORT wFlags;
	/*0004*/ SHORT nLanguageID;
	/*0006*/
};

union _RATE_QUOTA_LIMIT {
	/*0000*/ ULONG RateData;
	/*0000*/ ULONG RatePercent : 07; // 0x0000007f;
	/*0000*/ ULONG Reserved0 : 25; // 0xffffff80;
	/*0004*/
};

struct _RB_HITTESTINFO {
	/*0000*/ tagPOINT pt;
	/*0008*/ UINT flags;
	/*000c*/ INT iBand;
	/*0010*/
};

struct _RC_CONFIG {
	/*0000*/ ULONG dwSignature;
	/*0004*/ ULONG dwLength;
	/*0008*/ ULONG dwRCConfigVersion;
	/*000c*/ ULONG dwFilePathType;
	/*0010*/ ULONG dwFileType;
	/*0014*/ ULONG dwSystemAttributes;
	/*0018*/ ULONG dwUltimateFallbackLocation;
	/*001c*/ ULONG dwServiceCheckSum[0x4];
	/*002c*/ ULONG dwChecksum[0x4];
	/*003c*/ ULONG dwReserved1;
	/*0040*/ ULONG dwReserved2;
	/*0044*/ ULONG dwMUIFileNameOffset;
	/*0048*/ ULONG dwMUIFileNameLength;
	/*004c*/ ULONG dwMUIFilePathOffset;
	/*0050*/ ULONG dwMUIFilePathLength;
	/*0054*/ ULONG dwMainResNameTypesOffset;
	/*0058*/ ULONG dwMainResNameTypesLength;
	/*005c*/ ULONG dwMainResIDTypesOffset;
	/*0060*/ ULONG dwMainResIDTypesLength;
	/*0064*/ ULONG dwMUIResNameTypesOffset;
	/*0068*/ ULONG dwMUIResNameTypesLength;
	/*006c*/ ULONG dwMUIResIDTypesOffset;
	/*0070*/ ULONG dwMUIResIDTypesLength;
	/*0074*/ ULONG dwLanguageOffset;
	/*0078*/ ULONG dwLanguageLength;
	/*007c*/ ULONG dwUltimateFallbackLanguageOffset;
	/*0080*/ ULONG dwUltimateFallbackLanguageLength;
	/*0084*/
};

struct _RDR_CALLOUT_STATE {
	/*0000*/ LONG LastError;
	/*0008*/ void * LastEEInfo;
	/*0010*/ _RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
	/*0018*/ WCHAR * ServerName;
	/*0020*/ WCHAR * ServerPort;
	/*0028*/ WCHAR * RemoteUser;
	/*0030*/ WCHAR * AuthType;
	/*0038*/ UCHAR ResourceTypePresent;
	/*0039*/ UCHAR SessionIdPresent;
	/*003a*/ UCHAR InterfacePresent;
	/*003c*/ _GUID ResourceType;
	/*004c*/ _GUID SessionId;
	/*005c*/ _RPC_SYNTAX_IDENTIFIER Interface;
	/*0070*/ void * CertContext;
	/*0078*/
};

enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS {
	ReadDirectoryNotifyInformation = 0x1,
	ReadDirectoryNotifyExtendedInformation = 0x2
};

struct _REARRANGE_FILE_DATA {
	/*0000*/ ULONGLONG SourceStartingOffset;
	/*0008*/ ULONGLONG TargetOffset;
	/*0010*/ void * SourceFileHandle;
	/*0018*/ ULONG Length;
	/*001c*/ ULONG Flags;
	/*0020*/
};

struct _REARRANGE_FILE_DATA32 {
	/*0000*/ ULONGLONG SourceStartingOffset;
	/*0008*/ ULONGLONG TargetOffset;
	/*0010*/ UINT SourceFileHandle;
	/*0014*/ ULONG Length;
	/*0018*/ ULONG Flags;
	/*0020*/
};

struct _REASON_BUFFER {
	/*0000*/ ULONG Flags;
	/*0008*/ ULONGLONG ResourceFileNameOffset;
	/*0010*/ USHORT ResourceReasonId;
	/*0014*/ ULONG StringCount;
	/*0018*/ ULONGLONG SubstitutionStringsOffset;
	/*0008*/ ULONGLONG SimpleStringOffset;
	/*0020*/
};

struct _REASON_CONTEXT {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ <unnamed-type-Reason> Reason;
	/*0020*/
};

struct _RECTL {
	/*0000*/ LONG left;
	/*0004*/ LONG top;
	/*0008*/ LONG right;
	/*000c*/ LONG bottom;
	/*0010*/
};

struct _REDIRECTION_DESCRIPTOR {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG FunctionCount;
	/*0008*/ _REDIRECTION_FUNCTION_DESCRIPTOR const * Redirections;
	/*0010*/
};

struct _REDIRECTION_FUNCTION_DESCRIPTOR {
	/*0000*/ CHAR const * DllName;
	/*0008*/ CHAR const * FunctionName;
	/*0010*/ void * RedirectionTarget;
	/*0018*/
};

struct _REFS_DEALLOCATE_RANGES_INPUT_BUFFER {
	/*0000*/ ULONG RangeCount;
	/*0008*/ _REFS_DEALLOCATE_RANGES_RANGE Ranges[0x1];
	/*0018*/
};

struct _REFS_DEALLOCATE_RANGES_RANGE {
	/*0000*/ ULONGLONG StartOfRange;
	/*0008*/ ULONGLONG CountOfRange;
	/*0010*/
};

enum _REFS_SMR_VOLUME_GC_ACTION {
	SmrGcActionStart = 0x1,
	SmrGcActionStartFullSpeed = 0x2,
	SmrGcActionPause = 0x3,
	SmrGcActionStop = 0x4
};

enum _REFS_SMR_VOLUME_GC_METHOD {
	SmrGcMethodCompaction = 0x1,
	SmrGcMethodCompression = 0x2,
	SmrGcMethodRotation = 0x3
};

struct _REFS_SMR_VOLUME_GC_PARAMETERS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _REFS_SMR_VOLUME_GC_ACTION Action;
	/*000c*/ _REFS_SMR_VOLUME_GC_METHOD Method;
	/*0010*/ ULONG IoGranularity;
	/*0014*/ ULONG CompressionFormat;
	/*0018*/ ULONGLONG Unused[0x8];
	/*0058*/
};

enum _REFS_SMR_VOLUME_GC_STATE {
	SmrGcStateInactive = 0x0,
	SmrGcStatePaused = 0x1,
	SmrGcStateActive = 0x2,
	SmrGcStateActiveFullSpeed = 0x3
};

struct _REFS_SMR_VOLUME_INFO_OUTPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _LARGE_INTEGER SizeOfRandomlyWritableTier;
	/*0010*/ _LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
	/*0018*/ _LARGE_INTEGER SizeofSMRTier;
	/*0020*/ _LARGE_INTEGER FreeSpaceInSMRTier;
	/*0028*/ _LARGE_INTEGER UsableFreeSpaceInSMRTier;
	/*0030*/ _REFS_SMR_VOLUME_GC_STATE VolumeGcState;
	/*0034*/ LONG VolumeGcLastStatus;
	/*0038*/ ULONGLONG Unused[0x7];
	/*0070*/
};

struct _REFS_VOLUME_COUNTER_INFO_INPUT_BUFFER {
	/*0000*/ UCHAR ResetCounters;
	/*0001*/
};

enum _REG_ACTION {
	KeyAdded = 0x0,
	KeyRemoved = 0x1,
	KeyModified = 0x2
};

struct _REG_NOTIFY_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _REG_ACTION Action;
	/*0008*/ ULONG KeyLength;
	/*000c*/ WCHAR Key[0x1];
	/*0010*/
};

struct _REMOTE_LINK_TRACKING_INFORMATION_ {
	/*0000*/ void * TargetFileObject;
	/*0008*/ ULONG TargetLinkTrackingInformationLength;
	/*000c*/ UCHAR TargetLinkTrackingInformationBuffer[0x1];
	/*0010*/
};

struct _REMOTE_NAME_INFOA {
	/*0000*/ CHAR * lpUniversalName;
	/*0008*/ CHAR * lpConnectionName;
	/*0010*/ CHAR * lpRemainingPath;
	/*0018*/
};

struct _REMOTE_NAME_INFOW {
	/*0000*/ WCHAR * lpUniversalName;
	/*0008*/ WCHAR * lpConnectionName;
	/*0010*/ WCHAR * lpRemainingPath;
	/*0018*/
};

struct _REMOTE_PORT_VIEW {
	/*0000*/ ULONG Length;
	/*0008*/ ULONGLONG ViewSize;
	/*0010*/ void * ViewBase;
	/*0018*/
};

struct _REMSECURITY_ATTRIBUTES {
	/*0000*/ ULONG nLength;
	/*0004*/ ULONG lpSecurityDescriptor;
	/*0008*/ INT bInheritHandle;
	/*000c*/
};

struct _REPAIR_COPIES_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ _LARGE_INTEGER FileOffset;
	/*0010*/ ULONG Length;
	/*0014*/ ULONG SourceCopy;
	/*0018*/ ULONG NumberOfRepairCopies;
	/*001c*/ ULONG RepairCopies[0x1];
	/*0020*/
};

struct _REPAIR_COPIES_OUTPUT {
	/*0000*/ ULONG Size;
	/*0004*/ LONG Status;
	/*0008*/ _LARGE_INTEGER ResumeFileOffset;
	/*0010*/
};

struct _REPAIR_STORAGE_RESERVE_INPUT {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG AreaIdOffset;
	/*000c*/ ULONG AreaIdCount;
	/*0010*/ _STORAGE_RESERVE_ID AreaId[0x1];
	/*0014*/
};

struct _REPARSE_DATA_BUFFER {
	
	/*0000*/ ULONG ReparseTag;
	/*0004*/ USHORT ReparseDataLength;
	/*0006*/ USHORT Reserved;
	/*0008*/ <unnamed-type-SymbolicLinkReparseBuffer> SymbolicLinkReparseBuffer;
	/*0008*/ <unnamed-type-MountPointReparseBuffer> MountPointReparseBuffer;
	/*0008*/ <unnamed-type-GenericReparseBuffer> GenericReparseBuffer;
	/*0018*/
};

struct _REPARSE_DATA_BUFFER_EX {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG ExistingReparseTag;
	/*0008*/ _GUID ExistingReparseGuid;
	/*0018*/ ULONGLONG Reserved;
	/*0020*/ _REPARSE_DATA_BUFFER ReparseDataBuffer;
	/*0020*/ _REPARSE_GUID_DATA_BUFFER ReparseGuidDataBuffer;
	/*0040*/
};

struct _REPARSE_GUID_DATA_BUFFER {
	
	/*0000*/ ULONG ReparseTag;
	/*0004*/ USHORT ReparseDataLength;
	/*0006*/ USHORT Reserved;
	/*0008*/ _GUID ReparseGuid;
	/*0018*/ <unnamed-type-GenericReparseBuffer> GenericReparseBuffer;
	/*001c*/
};

struct _REPARSE_INDEX_KEY {
	/*0000*/ ULONG FileReparseTag;
	/*0004*/ _LARGE_INTEGER FileId;
	/*000c*/
};

struct _REPARSE_POINT_INFORMATION {
	/*0000*/ USHORT ReparseDataLength;
	/*0002*/ USHORT UnparsedNameLength;
	/*0004*/
};

enum _REQUESTER_TYPE {
	KernelRequester = 0x0,
	UserProcessRequester = 0x1,
	UserSharedServiceRequester = 0x2
};

struct _REQUEST_OPLOCK_INPUT_BUFFER {
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureLength;
	/*0004*/ ULONG RequestedOplockLevel;
	/*0008*/ ULONG Flags;
	/*000c*/
};

struct _REQUEST_OPLOCK_OUTPUT_BUFFER {
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureLength;
	/*0004*/ ULONG OriginalOplockLevel;
	/*0008*/ ULONG NewOplockLevel;
	/*000c*/ ULONG Flags;
	/*0010*/ ULONG AccessMode;
	/*0014*/ USHORT ShareMode;
	/*0018*/
};

struct _REQUEST_RAW_ENCRYPTED_DATA {
	/*0000*/ LONGLONG FileOffset;
	/*0008*/ ULONG Length;
	/*0010*/
};

enum _REQUEST_TIMES {
	NameResolutionStart = 0x0,
	NameResolutionEnd = 0x1,
	ConnectionEstablishmentStart = 0x2,
	ConnectionEstablishmentEnd = 0x3,
	TLSHandshakeStart = 0x4,
	TLSHandshakeEnd = 0x5,
	HttpRequestTimeMax = 0x20
};

struct _RESOLVED_USERNAME_INFO {
	/*0000*/ INT bResolved;
	/*0008*/ WCHAR * pszResolvedName;
	/*0010*/
};

struct _RESOLVED_USERNAME_LIST {
	/*0000*/ ULONG cItems;
	/*0008*/ _RESOLVED_USERNAME_INFO rgUserNameInfo[0x1];
	/*0018*/
};

struct _RESOURCEMANAGER_BASIC_INFORMATION {
	/*0000*/ _GUID ResourceManagerId;
	/*0010*/ ULONG DescriptionLength;
	/*0014*/ WCHAR Description[0x1];
	/*0018*/
};

struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
	/*0000*/ void * IoCompletionPortHandle;
	/*0008*/ ULONGLONG CompletionKey;
	/*0010*/
};

enum _RESOURCEMANAGER_INFORMATION_CLASS {
	ResourceManagerBasicInformation = 0x0,
	ResourceManagerCompletionInformation = 0x1
};

struct _RESUME_PERFORMANCE {
	/*0000*/ ULONG PostTimeMs;
	/*0008*/ ULONGLONG TotalResumeTimeMs;
	/*0010*/ ULONGLONG ResumeCompleteTimestamp;
	/*0018*/
};

struct _RETRIEVAL_POINTER_BASE {
	/*0000*/ _LARGE_INTEGER FileAreaOffset;
	/*0008*/
};

struct _RGNDATA {
	/*0000*/ _RGNDATAHEADER rdh;
	/*0020*/ CHAR Buffer[0x1];
	/*0024*/
};

struct _RGNDATAHEADER {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG iType;
	/*0008*/ ULONG nCount;
	/*000c*/ ULONG nRgnSize;
	/*0010*/ tagRECT rcBound;
	/*0020*/
};

struct _RIP_INFO {
	/*0000*/ ULONG dwError;
	/*0004*/ ULONG dwType;
	/*0008*/
};

enum _RPC_ASYNC_EVENT {
	RpcCallComplete = 0x0,
	RpcSendComplete = 0x1,
	RpcReceiveComplete = 0x2,
	RpcClientDisconnect = 0x3,
	RpcClientCancel = 0x4
};

union _RPC_ASYNC_NOTIFICATION_INFO {
	
	
	
	/*0000*/ <unnamed-type-APC> APC;
	/*0000*/ <unnamed-type-IOC> IOC;
	/*0000*/ <unnamed-type-HWND> HWND;
	/*0000*/ void * hEvent;
	/*0000*/ void (* NotificationRoutine)( _RPC_ASYNC_STATE * , void * , _RPC_ASYNC_EVENT );
	/*0020*/
};

struct _RPC_ASYNC_STATE {
	/*0000*/ UINT Size;
	/*0004*/ ULONG Signature;
	/*0008*/ LONG Lock;
	/*000c*/ ULONG Flags;
	/*0010*/ void * StubInfo;
	/*0018*/ void * UserInfo;
	/*0020*/ void * RuntimeInfo;
	/*0028*/ _RPC_ASYNC_EVENT Event;
	/*002c*/ _RPC_NOTIFICATION_TYPES NotificationType;
	/*0030*/ _RPC_ASYNC_NOTIFICATION_INFO u;
	/*0050*/ LONGLONG Reserved[0x4];
	/*0070*/
};

struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ComTimeout;
	/*000c*/ ULONG CallTimeout;
	/*0010*/
};

struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
	/*0000*/ ULONG Version;
	/*0008*/ UCHAR * ServerPrincName;
	/*0010*/ ULONG AuthnLevel;
	/*0014*/ ULONG AuthnSvc;
	/*0018*/ _SEC_WINNT_AUTH_IDENTITY_A * AuthIdentity;
	/*0020*/ _RPC_SECURITY_QOS * SecurityQos;
	/*0028*/
};

struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
	/*0000*/ ULONG Version;
	/*0008*/ WCHAR * ServerPrincName;
	/*0010*/ ULONG AuthnLevel;
	/*0014*/ ULONG AuthnSvc;
	/*0018*/ _SEC_WINNT_AUTH_IDENTITY_W * AuthIdentity;
	/*0020*/ _RPC_SECURITY_QOS * SecurityQos;
	/*0028*/
};

struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ProtocolSequence;
	/*0010*/ UCHAR * NetworkAddress;
	/*0018*/ UCHAR * StringEndpoint;
	/*0020*/ <unnamed-type-u1> u1;
	/*0028*/ _GUID ObjectUuid;
	/*0038*/
};

struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ProtocolSequence;
	/*0010*/ WCHAR * NetworkAddress;
	/*0018*/ WCHAR * StringEndpoint;
	/*0020*/ <unnamed-type-u1> u1;
	/*0028*/ _GUID ObjectUuid;
	/*0038*/
};

struct _RPC_BINDING_VECTOR {
	/*0000*/ ULONG Count;
	/*0008*/ void * BindingH[0x1];
	/*0010*/
};

struct _RPC_CALL_LOCAL_ADDRESS_V1 {
	/*0000*/ UINT Version;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG BufferSize;
	/*0014*/ tagRpcLocalAddressFormat AddressFormat;
	/*0018*/
};

struct _RPC_CLIENT_INTERFACE {
	/*0000*/ UINT Length;
	/*0004*/ _RPC_SYNTAX_IDENTIFIER InterfaceId;
	/*0018*/ _RPC_SYNTAX_IDENTIFIER TransferSyntax;
	/*0030*/ RPC_DISPATCH_TABLE * DispatchTable;
	/*0038*/ UINT RpcProtseqEndpointCount;
	/*0040*/ _RPC_PROTSEQ_ENDPOINT * RpcProtseqEndpoint;
	/*0048*/ ULONGLONG Reserved;
	/*0050*/ void const * InterpreterInfo;
	/*0058*/ UINT Flags;
	/*0060*/
};

struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR {
	/*0000*/ ULONG BufferSize;
	/*0008*/ CHAR * Buffer;
	/*0010*/
};

enum _RPC_HTTP_REDIRECTOR_STAGE {
	RPCHTTP_RS_REDIRECT = 0x1,
	RPCHTTP_RS_ACCESS_1 = 0x2,
	RPCHTTP_RS_SESSION = 0x3,
	RPCHTTP_RS_ACCESS_2 = 0x4,
	RPCHTTP_RS_INTERFACE = 0x5
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A {
	/*0000*/ _SEC_WINNT_AUTH_IDENTITY_A * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ UCHAR * ServerCertificateSubject;
	/*0028*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A {
	/*0000*/ _SEC_WINNT_AUTH_IDENTITY_A * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ UCHAR * ServerCertificateSubject;
	/*0028*/ _SEC_WINNT_AUTH_IDENTITY_A * ProxyCredentials;
	/*0030*/ ULONG NumberOfProxyAuthnSchemes;
	/*0038*/ ULONG * ProxyAuthnSchemes;
	/*0040*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W {
	/*0000*/ _SEC_WINNT_AUTH_IDENTITY_W * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ WCHAR * ServerCertificateSubject;
	/*0028*/ _SEC_WINNT_AUTH_IDENTITY_W * ProxyCredentials;
	/*0030*/ ULONG NumberOfProxyAuthnSchemes;
	/*0038*/ ULONG * ProxyAuthnSchemes;
	/*0040*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A {
	/*0000*/ void * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ UCHAR * ServerCertificateSubject;
	/*0028*/ void * ProxyCredentials;
	/*0030*/ ULONG NumberOfProxyAuthnSchemes;
	/*0038*/ ULONG * ProxyAuthnSchemes;
	/*0040*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W {
	/*0000*/ void * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ WCHAR * ServerCertificateSubject;
	/*0028*/ void * ProxyCredentials;
	/*0030*/ ULONG NumberOfProxyAuthnSchemes;
	/*0038*/ ULONG * ProxyAuthnSchemes;
	/*0040*/
};

struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W {
	/*0000*/ _SEC_WINNT_AUTH_IDENTITY_W * TransportCredentials;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG AuthenticationTarget;
	/*0010*/ ULONG NumberOfAuthnSchemes;
	/*0018*/ ULONG * AuthnSchemes;
	/*0020*/ WCHAR * ServerCertificateSubject;
	/*0028*/
};

struct _RPC_IF_ID {
	/*0000*/ _GUID Uuid;
	/*0010*/ USHORT VersMajor;
	/*0012*/ USHORT VersMinor;
	/*0014*/
};

struct _RPC_MESSAGE {
	/*0000*/ void * Handle;
	/*0008*/ ULONG DataRepresentation;
	/*0010*/ void * Buffer;
	/*0018*/ UINT BufferLength;
	/*001c*/ UINT ProcNum;
	/*0020*/ _RPC_SYNTAX_IDENTIFIER * TransferSyntax;
	/*0028*/ void * RpcInterfaceInformation;
	/*0030*/ void * ReservedForRuntime;
	/*0038*/ void * ManagerEpv;
	/*0040*/ void * ImportContext;
	/*0048*/ ULONG RpcFlags;
	/*0050*/
};

enum _RPC_NOTIFICATIONS {
	RpcNotificationCallNone = 0x0,
	RpcNotificationClientDisconnect = 0x1,
	RpcNotificationCallCancel = 0x2
};

enum _RPC_NOTIFICATION_TYPES {
	RpcNotificationTypeNone = 0x0,
	RpcNotificationTypeEvent = 0x1,
	RpcNotificationTypeApc = 0x2,
	RpcNotificationTypeIoc = 0x3,
	RpcNotificationTypeHwnd = 0x4,
	RpcNotificationTypeCallback = 0x5
};

struct _RPC_POLICY {
	/*0000*/ UINT Length;
	/*0004*/ ULONG EndpointFlags;
	/*0008*/ ULONG NICFlags;
	/*000c*/
};

struct _RPC_PROTSEQ_ENDPOINT {
	/*0000*/ UCHAR * RpcProtocolSequence;
	/*0008*/ UCHAR * Endpoint;
	/*0010*/
};

struct _RPC_PROTSEQ_VECTORA {
	/*0000*/ UINT Count;
	/*0008*/ UCHAR * Protseq[0x1];
	/*0010*/
};

struct _RPC_PROTSEQ_VECTORW {
	/*0000*/ UINT Count;
	/*0008*/ WCHAR * Protseq[0x1];
	/*0010*/
};

struct _RPC_SECURITY_QOS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/
};

struct _RPC_SECURITY_QOS_V2_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/
};

struct _RPC_SECURITY_QOS_V2_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/
};

struct _RPC_SECURITY_QOS_V3_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/
};

struct _RPC_SECURITY_QOS_V3_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/
};

struct _RPC_SECURITY_QOS_V4_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/ UINT EffectiveOnly;
	/*0030*/
};

struct _RPC_SECURITY_QOS_V4_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/ UINT EffectiveOnly;
	/*0030*/
};

struct _RPC_SECURITY_QOS_V5_A {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/ UINT EffectiveOnly;
	/*0030*/ void * ServerSecurityDescriptor;
	/*0038*/
};

struct _RPC_SECURITY_QOS_V5_W {
	
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Capabilities;
	/*0008*/ ULONG IdentityTracking;
	/*000c*/ ULONG ImpersonationType;
	/*0010*/ ULONG AdditionalSecurityInfoType;
	/*0018*/ <unnamed-type-u> u;
	/*0020*/ void * Sid;
	/*0028*/ UINT EffectiveOnly;
	/*0030*/ void * ServerSecurityDescriptor;
	/*0038*/
};

struct _RPC_SEC_CONTEXT_KEY_INFO {
	/*0000*/ ULONG EncryptAlgorithm;
	/*0004*/ ULONG KeySize;
	/*0008*/ ULONG SignatureAlgorithm;
	/*000c*/
};

struct _RPC_SERVER_INTERFACE {
	/*0000*/ UINT Length;
	/*0004*/ _RPC_SYNTAX_IDENTIFIER InterfaceId;
	/*0018*/ _RPC_SYNTAX_IDENTIFIER TransferSyntax;
	/*0030*/ RPC_DISPATCH_TABLE * DispatchTable;
	/*0038*/ UINT RpcProtseqEndpointCount;
	/*0040*/ _RPC_PROTSEQ_ENDPOINT * RpcProtseqEndpoint;
	/*0048*/ void * DefaultManagerEpv;
	/*0050*/ void const * InterpreterInfo;
	/*0058*/ UINT Flags;
	/*0060*/
};

struct _RPC_SYNTAX_IDENTIFIER {
	/*0000*/ _GUID SyntaxGUID;
	/*0010*/ _RPC_VERSION SyntaxVersion;
	/*0014*/
};

struct _RPC_TRANSFER_SYNTAX {
	/*0000*/ _GUID Uuid;
	/*0010*/ USHORT VersMajor;
	/*0012*/ USHORT VersMinor;
	/*0014*/
};

struct _RPC_VERSION {
	/*0000*/ USHORT MajorVersion;
	/*0002*/ USHORT MinorVersion;
	/*0004*/
};

enum _RTC_ErrorNumber {
	_RTC_CHKSTK = 0x0,
	_RTC_CVRT_LOSS_INFO = 0x1,
	_RTC_CORRUPT_STACK = 0x2,
	_RTC_UNINIT_LOCAL_USE = 0x3,
	_RTC_CORRUPTED_ALLOCA = 0x4,
	_RTC_ILLEGAL = 0x5
};

struct _RTLP_CURDIR_REF;

struct _RTLP_HEAP_SERIALIZED_MAPPING {
	/*0000*/ ULONGLONG Allocation;
	/*0008*/ void * StackReference;
	/*0010*/ ULONGLONG Size;
	/*0018*/
};

struct _RTLP_HEAP_STACK_TRACE_SERIALIZATION_HEADER {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT PointerSize;
	/*0008*/ ULONGLONG Heap;
	/*0010*/ ULONGLONG TotalCommit;
	/*0018*/ ULONGLONG TotalReserve;
	/*0020*/
};

struct _RTLP_HEAP_TAGGING_INFO {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Flags;
	/*0008*/ void * Process;
	/*0010*/ ULONGLONG EntriesCount;
	/*0018*/ _RTLP_TAG_INFO Entries[0x1];
	/*0030*/
};

struct _RTLP_PROCESS_REFLECTION_CONTEXT {
	/*0000*/ ULONGLONG ReflectionContextSize;
	/*0008*/ ULONG ReflectionFlags;
	/*0010*/ LONG (* ReflectionRoutine)( void * );
	/*0018*/ void * ReflectionParameter;
	/*0020*/ void * ReflectedProcessCreatedEvent;
	/*0028*/ void * ReflectedProcessHandlesDuplicatedEvent;
	/*0030*/ void * ReflectionStartEvent;
	/*0038*/ _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION ReflectionInformation;
	/*0058*/
};

struct _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION {
	/*0000*/ void * ReflectionProcessHandle;
	/*0008*/ void * ReflectionThreadHandle;
	/*0010*/ _CLIENT_ID ReflectionClientId;
	/*0020*/
};

struct _RTLP_TAG_INFO {
	/*0000*/ _GUID Id;
	/*0010*/ ULONGLONG CurrentAllocatedBytes;
	/*0018*/
};

struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME {
	/*0000*/ _RTL_ACTIVATION_CONTEXT_STACK_FRAME * Previous;
	/*0008*/ _ACTIVATION_CONTEXT * ActivationContext;
	/*0010*/ ULONG Flags;
	/*0018*/
};

struct _RTL_AVL_TABLE {
	/*0000*/ _RTL_BALANCED_LINKS BalancedRoot;
	/*0020*/ void * OrderedPointer;
	/*0028*/ ULONG WhichOrderedElement;
	/*002c*/ ULONG NumberGenericTableElements;
	/*0030*/ ULONG DepthOfTree;
	/*0038*/ _RTL_BALANCED_LINKS * RestartKey;
	/*0040*/ ULONG DeleteCount;
	/*0048*/ _RTL_GENERIC_COMPARE_RESULTS (* CompareRoutine)( _RTL_AVL_TABLE * , void * , void * );
	/*0050*/ void * (* AllocateRoutine)( _RTL_AVL_TABLE * , ULONG );
	/*0058*/ void (* FreeRoutine)( _RTL_AVL_TABLE * , void * );
	/*0060*/ void * TableContext;
	/*0068*/
};

struct _RTL_AVL_TREE {
	/*0000*/ _RTL_BALANCED_NODE * Root;
	/*0008*/
};

struct _RTL_BACKOFF {
	/*0000*/ ULONG Delay;
	/*0004*/
};

struct _RTL_BALANCED_LINKS {
	/*0000*/ _RTL_BALANCED_LINKS * Parent;
	/*0008*/ _RTL_BALANCED_LINKS * LeftChild;
	/*0010*/ _RTL_BALANCED_LINKS * RightChild;
	/*0018*/ CHAR Balance;
	/*0019*/ UCHAR Reserved[0x3];
	/*0020*/
};

struct _RTL_BALANCED_NODE {
	/*0000*/ _RTL_BALANCED_NODE * Children[0x2];
	/*0000*/ _RTL_BALANCED_NODE * Left;
	/*0008*/ _RTL_BALANCED_NODE * Right;
	/*0010*/ UCHAR Red : 01; // 0x01;
	/*0010*/ UCHAR Balance : 02; // 0x03;
	/*0010*/ ULONGLONG ParentValue;
	/*0018*/
};

struct _RTL_BARRIER {
	
	/*0000*/ ULONG Reserved1;
	/*0004*/ ULONG Reserved2;
	/*0008*/ ULONGLONG Reserved3[0x2];
	/*0018*/ ULONG Reserved4;
	/*001c*/ ULONG Reserved5;
	/*0020*/
};

struct _RTL_BITMAP {
	/*0000*/ ULONG SizeOfBitMap;
	/*0008*/ ULONG * Buffer;
	/*0010*/
};

struct _RTL_BITMAP_EX {
	/*0000*/ ULONGLONG SizeOfBitMap;
	/*0008*/ ULONGLONG * Buffer;
	/*0010*/
};

struct _RTL_BITMAP_RUN {
	/*0000*/ ULONG StartingIndex;
	/*0004*/ ULONG NumberOfBits;
	/*0008*/
};

struct _RTL_BSD_ITEM {
	/*0000*/ RTL_BSD_ITEM_TYPE Type;
	/*0008*/ void * DataBuffer;
	/*0010*/ ULONG DataLength;
	/*0018*/
};

struct _RTL_BUFFER {
	/*0000*/ UCHAR * Buffer;
	/*0008*/ UCHAR * StaticBuffer;
	/*0010*/ ULONGLONG Size;
	/*0018*/ ULONGLONG StaticSize;
	/*0020*/
};

struct _RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_BASIC {
	/*0000*/ ULONGLONG Size;
	/*0008*/ ULONG Format;
	/*0010*/ _RTL_ACTIVATION_CONTEXT_STACK_FRAME Frame;
	/*0028*/
};

struct _RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_EXTENDED {
	/*0000*/ ULONGLONG Size;
	/*0008*/ ULONG Format;
	/*0010*/ _RTL_ACTIVATION_CONTEXT_STACK_FRAME Frame;
	/*0028*/ void * Extra1;
	/*0030*/ void * Extra2;
	/*0038*/ void * Extra3;
	/*0040*/ void * Extra4;
	/*0048*/
};

struct _RTL_CIRCULAR_LIST_HEAD {
	/*0000*/ _LIST_ENTRY * HeadEntry;
	/*0008*/
};

struct _RTL_CONDITION_VARIABLE {
	/*0000*/ void * Ptr;
	/*0008*/
};

class _RTL_CONSTANT_STRING_remove_const_template_class<1> {
	/*0001*/
};

class _RTL_CONSTANT_STRING_remove_const_template_class<2> {
	/*0001*/
};

struct _RTL_CRITICAL_SECTION {
	/*0000*/ _RTL_CRITICAL_SECTION_DEBUG * DebugInfo;
	/*0008*/ LONG LockCount;
	/*000c*/ LONG RecursionCount;
	/*0010*/ void * OwningThread;
	/*0018*/ void * LockSemaphore;
	/*0020*/ ULONGLONG SpinCount;
	/*0028*/
};

struct _RTL_CRITICAL_SECTION32 {
	/*0000*/ ULONG DebugInfo;
	/*0004*/ LONG LockCount;
	/*0008*/ LONG RecursionCount;
	/*000c*/ ULONG OwningThread;
	/*0010*/ ULONG LockSemaphore;
	/*0014*/ ULONG SpinCount;
	/*0018*/
};

struct _RTL_CRITICAL_SECTION64 {
	/*0000*/ ULONGLONG DebugInfo;
	/*0008*/ LONG LockCount;
	/*000c*/ LONG RecursionCount;
	/*0010*/ ULONGLONG OwningThread;
	/*0018*/ ULONGLONG LockSemaphore;
	/*0020*/ ULONGLONG SpinCount;
	/*0028*/
};

struct _RTL_CRITICAL_SECTION_DEBUG {
	/*0000*/ USHORT Type;
	/*0002*/ USHORT CreatorBackTraceIndex;
	/*0008*/ _RTL_CRITICAL_SECTION * CriticalSection;
	/*0010*/ _LIST_ENTRY ProcessLocksList;
	/*0020*/ ULONG EntryCount;
	/*0024*/ ULONG ContentionCount;
	/*0028*/ ULONG Flags;
	/*002c*/ USHORT CreatorBackTraceIndexHigh;
	/*002e*/ USHORT SpareWORD;
	/*0030*/
};

struct _RTL_CRITICAL_SECTION_DEBUG32 {
	/*0000*/ USHORT Type;
	/*0002*/ USHORT CreatorBackTraceIndex;
	/*0004*/ ULONG CriticalSection;
	/*0008*/ LIST_ENTRY32 ProcessLocksList;
	/*0010*/ ULONG EntryCount;
	/*0014*/ ULONG ContentionCount;
	/*0018*/ ULONG Spare[0x2];
	/*0020*/
};

struct _RTL_CRITICAL_SECTION_DEBUG64 {
	/*0000*/ USHORT Type;
	/*0002*/ USHORT CreatorBackTraceIndex;
	/*0008*/ ULONGLONG CriticalSection;
	/*0010*/ LIST_ENTRY64 ProcessLocksList;
	/*0020*/ ULONG EntryCount;
	/*0024*/ ULONG ContentionCount;
	/*0028*/ ULONG Spare[0x2];
	/*0030*/
};

struct _RTL_DEBUG_INFORMATION {
	/*0000*/ void * SectionHandleClient;
	/*0008*/ void * ViewBaseClient;
	/*0010*/ void * ViewBaseTarget;
	/*0018*/ ULONGLONG ViewBaseDelta;
	/*0020*/ void * EventPairClient;
	/*0028*/ void * EventPairTarget;
	/*0030*/ void * TargetProcessId;
	/*0038*/ void * TargetThreadHandle;
	/*0040*/ ULONG Flags;
	/*0048*/ ULONGLONG OffsetFree;
	/*0050*/ ULONGLONG CommitSize;
	/*0058*/ ULONGLONG ViewSize;
	/*0060*/ _RTL_PROCESS_MODULES * Modules;
	/*0060*/ _RTL_PROCESS_MODULE_INFORMATION_EX * ModulesEx;
	/*0068*/ _RTL_PROCESS_BACKTRACES * BackTraces;
	/*0070*/ _RTL_PROCESS_HEAPS * Heaps;
	/*0078*/ _RTL_PROCESS_LOCKS * Locks;
	/*0080*/ void * SpecificHeap;
	/*0088*/ void * TargetProcessHandle;
	/*0090*/ _RTL_PROCESS_VERIFIER_OPTIONS * VerifierOptions;
	/*0098*/ void * ProcessHeap;
	/*00a0*/ void * CriticalSectionHandle;
	/*00a8*/ void * CriticalSectionOwnerThread;
	/*00b0*/ void * Reserved[0x4];
	/*00d0*/
};

struct _RTL_DEBUG_INFORMATION32 {
	/*0000*/ ULONG SectionHandleClient;
	/*0004*/ ULONG ViewBaseClient;
	/*0008*/ ULONG ViewBaseTarget;
	/*000c*/ ULONG ViewBaseDelta;
	/*0010*/ ULONG EventPairClient;
	/*0014*/ ULONG EventPairTarget;
	/*0018*/ ULONG TargetProcessId;
	/*001c*/ ULONG TargetThreadHandle;
	/*0020*/ ULONG Flags;
	/*0024*/ ULONG OffsetFree;
	/*0028*/ ULONG CommitSize;
	/*002c*/ ULONG ViewSize;
	/*0030*/ ULONG Modules;
	/*0030*/ ULONG ModulesEx;
	/*0034*/ ULONG BackTraces;
	/*0038*/ ULONG Heaps;
	/*003c*/ ULONG Locks;
	/*0040*/ ULONG SpecificHeap;
	/*0044*/ ULONG TargetProcessHandle;
	/*0048*/ ULONG VerifierOptions;
	/*004c*/ ULONG ProcessHeap;
	/*0050*/ ULONG CriticalSectionHandle;
	/*0054*/ ULONG CriticalSectionOwnerThread;
	/*0058*/ ULONG Reserved[0x4];
	/*0068*/
};

struct _RTL_DISK_SPACE_INFO {
	/*0000*/ RTL_DISK_SPACE_POLICY Policy;
	/*0004*/
};

struct _RTL_DISK_SPEED_INFO {
	/*0000*/ RTL_DISK_SPEED_POLICY Policy;
	/*0004*/
};

struct _RTL_DISK_WRITE_CONSTRAINT_INFO {
	/*0000*/ RTL_DISK_WRITE_CONSTRAINT_POLICY Policy;
	/*0004*/
};

struct _RTL_DRIVE_LETTER_CURDIR {
	/*0000*/ USHORT Flags;
	/*0002*/ USHORT Length;
	/*0004*/ ULONG TimeStamp;
	/*0008*/ _STRING DosPath;
	/*0018*/
};

struct _RTL_DYNAMIC_HASH_TABLE {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG Shift;
	/*0008*/ ULONG TableSize;
	/*000c*/ ULONG Pivot;
	/*0010*/ ULONG DivisorMask;
	/*0014*/ ULONG NumEntries;
	/*0018*/ ULONG NonEmptyBuckets;
	/*001c*/ ULONG NumEnumerators;
	/*0020*/ void * Directory;
	/*0028*/
};

struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT {
	/*0000*/ _LIST_ENTRY * ChainHead;
	/*0008*/ _LIST_ENTRY * PrevLinkage;
	/*0010*/ ULONGLONG Signature;
	/*0018*/
};

struct _RTL_DYNAMIC_HASH_TABLE_ENTRY {
	/*0000*/ _LIST_ENTRY Linkage;
	/*0010*/ ULONGLONG Signature;
	/*0018*/
};

struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR {
	/*0000*/ _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
	/*0000*/ _LIST_ENTRY * CurEntry;
	/*0018*/ _LIST_ENTRY * ChainHead;
	/*0020*/ ULONG BucketIndex;
	/*0028*/
};

struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION {
	/*0000*/ _RTL_TIME_ZONE_INFORMATION tzi;
	/*00ac*/ WCHAR TimeZoneKeyName[0x80];
	/*01ac*/ UCHAR DynamicDaylightTimeDisabled;
	/*01b0*/
};

union _RTL_ELEVATION_FLAGS {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG ElevationEnabled : 01; // 0x00000001;
	/*0000*/ ULONG VirtualizationEnabled : 01; // 0x00000002;
	/*0000*/ ULONG InstallerDetectEnabled : 01; // 0x00000004;
	/*0000*/ ULONG ReservedBits : 29; // 0xfffffff8;
	/*0004*/
};

struct _RTL_ENCLAVE_LAUNCH_TOKEN {
	/*0000*/ UCHAR Measurement[0x20];
	/*0020*/ UCHAR AuthorId[0x20];
	/*0040*/ UCHAR FamilyId[0x10];
	/*0050*/ UCHAR ImageId[0x10];
	/*0060*/ ULONGLONG EnclaveSize;
	/*0068*/ ULONG EnclaveSvn;
	/*006c*/ ULONG PolicyFlags;
	/*0070*/
};

struct _RTL_FEATURE_CONFIGURATION {
	/*0000*/ UINT FeatureId;
	/*0004*/ UINT Priority : 04; // 0x0000000f;
	/*0004*/ UINT EnabledState : 02; // 0x00000030;
	/*0004*/ UINT IsWexpConfiguration : 01; // 0x00000040;
	/*0004*/ UINT HasSubscriptions : 01; // 0x00000080;
	/*0004*/ UINT Variant : 06; // 0x00003f00;
	/*0004*/ UINT VariantPayloadKind : 02; // 0x0000c000;
	/*0008*/ UINT VariantPayload;
	/*000c*/
};

enum _RTL_FEATURE_CONFIGURATION_OPERATION {
	FeatureConfigurationOperationNone = 0x0,
	FeatureConfigurationOperationFeatureState = 0x1,
	FeatureConfigurationOperationVariantState = 0x2,
	FeatureConfigurationOperationResetState = 0x4
};

enum _RTL_FEATURE_CONFIGURATION_PRIORITY {
	FeatureConfigurationPriorityImageDefault = 0x0,
	FeatureConfigurationPriorityService = 0x4,
	FeatureConfigurationPriorityUser = 0x8,
	FeatureConfigurationPriorityUserPolicy = 0xa,
	FeatureConfigurationPriorityTest = 0xc,
	FeatureConfigurationPriorityImageOverride = 0xf,
	FeatureConfigurationPriorityMax = 0xf
};

struct _RTL_FEATURE_CONFIGURATION_TABLE {
	/*0000*/ ULONG FeatureCount;
	/*0004*/ _RTL_FEATURE_CONFIGURATION Features[0x1];
	/*0010*/
};

enum _RTL_FEATURE_CONFIGURATION_TYPE {
	RtlFeatureConfigurationBoot = 0x0,
	RtlFeatureConfigurationRuntime = 0x1,
	RtlFeatureConfigurationCount = 0x2
};

struct _RTL_FEATURE_CONFIGURATION_UPDATE {
	/*0000*/ UINT FeatureId;
	/*0004*/ _RTL_FEATURE_CONFIGURATION_PRIORITY Priority;
	/*0008*/ _RTL_FEATURE_ENABLED_STATE EnabledState;
	/*000c*/ _RTL_FEATURE_ENABLED_STATE_OPTIONS EnabledStateOptions;
	/*0010*/ UCHAR Variant;
	/*0011*/ UCHAR Reserved[0x3];
	/*0014*/ _RTL_FEATURE_VARIANT_PAYLOAD_KIND VariantPayloadKind;
	/*0018*/ UINT VariantPayload;
	/*001c*/ _RTL_FEATURE_CONFIGURATION_OPERATION Operation;
	/*0020*/
};

enum _RTL_FEATURE_ENABLED_STATE {
	FeatureEnabledStateDefault = 0x0,
	FeatureEnabledStateDisabled = 0x1,
	FeatureEnabledStateEnabled = 0x2
};

enum _RTL_FEATURE_ENABLED_STATE_OPTIONS {
	FeatureEnabledStateOptionsNone = 0x0,
	FeatureEnabledStateOptionsWexpConfig = 0x1
};

struct _RTL_FEATURE_USAGE_DATA {
	/*0000*/ UINT FeatureId;
	/*0004*/ USHORT ReportingKind;
	/*0006*/ USHORT Reserved;
	/*0008*/
};

struct _RTL_FEATURE_USAGE_REPORT {
	/*0000*/ UINT FeatureId;
	/*0004*/ USHORT ReportingKind;
	/*0006*/ USHORT ReportingOptions;
	/*0008*/
};

struct _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS {
	/*0000*/ UINT FeatureId;
	/*0004*/ USHORT ReportingKind;
	/*0006*/ USHORT ReportingOptions;
	/*0008*/ _RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET ReportingTarget;
	/*0010*/
};

struct _RTL_FEATURE_USAGE_SUBSCRIPTION_TABLE {
	/*0000*/ ULONG SubscriptionCount;
	/*0004*/ _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS Subscriptions[0x1];
	/*0014*/
};

struct _RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET {
	/*0000*/ ULONG Data[0x2];
	/*0008*/
};

enum _RTL_FEATURE_VARIANT_PAYLOAD_KIND {
	FeatureVariantPayloadKindNone = 0x0,
	FeatureVariantPayloadKindResident = 0x1,
	FeatureVariantPayloadKindExternal = 0x2
};

enum _RTL_GENERIC_COMPARE_RESULTS {
	GenericLessThan = 0x0,
	GenericGreaterThan = 0x1,
	GenericEqual = 0x2
};

struct _RTL_GENERIC_TABLE {
	/*0000*/ _RTL_SPLAY_LINKS * TableRoot;
	/*0008*/ _LIST_ENTRY InsertOrderList;
	/*0018*/ _LIST_ENTRY * OrderedPointer;
	/*0020*/ ULONG WhichOrderedElement;
	/*0024*/ ULONG NumberGenericTableElements;
	/*0028*/ _RTL_GENERIC_COMPARE_RESULTS (* CompareRoutine)( _RTL_GENERIC_TABLE * , void * , void * );
	/*0030*/ void * (* AllocateRoutine)( _RTL_GENERIC_TABLE * , ULONG );
	/*0038*/ void (* FreeRoutine)( _RTL_GENERIC_TABLE * , void * );
	/*0040*/ void * TableContext;
	/*0048*/
};

struct _RTL_HANDLE_TABLE {
	/*0000*/ ULONG MaximumNumberOfHandles;
	/*0004*/ ULONG SizeOfHandleTableEntry;
	/*0008*/ ULONG UseHeap;
	/*000c*/ ULONG TableSize;
	/*0010*/ _RTL_HANDLE_TABLE_ENTRY * FreeHandles;
	/*0018*/ _RTL_HANDLE_TABLE_ENTRY * CommittedHandles;
	/*0020*/ _RTL_HANDLE_TABLE_ENTRY * UnCommittedHandles;
	/*0028*/ _RTL_HANDLE_TABLE_ENTRY * MaxReservedHandles;
	/*0030*/
};

struct _RTL_HANDLE_TABLE_ENTRY {
	/*0000*/ ULONG Flags;
	/*0000*/ _RTL_HANDLE_TABLE_ENTRY * NextFree;
	/*0008*/
};

struct _RTL_HASH_ENTRY {
	/*0000*/ _SINGLE_LIST_ENTRY BucketLink;
	/*0008*/ ULONGLONG Key;
	/*0010*/
};

struct _RTL_HASH_TABLE {
	/*0000*/ ULONG EntryCount;
	/*0004*/ ULONG MaskBitCount : 05; // 0x0000001f;
	/*0004*/ ULONG BucketCount : 27; // 0xffffffe0;
	/*0008*/ _SINGLE_LIST_ENTRY * Buckets;
	/*0010*/
};

struct _RTL_HEAP_ENTRY {
	
	/*0000*/ ULONGLONG Size;
	/*0008*/ USHORT Flags;
	/*000a*/ USHORT AllocatorBackTraceIndex;
	/*0010*/ <unnamed-type-u> u;
	/*0020*/
};

struct _RTL_HEAP_INFORMATION {
	/*0000*/ void * BaseAddress;
	/*0008*/ ULONG Flags;
	/*000c*/ USHORT EntryOverhead;
	/*000e*/ USHORT CreatorBackTraceIndex;
	/*0010*/ ULONGLONG BytesAllocated;
	/*0018*/ ULONGLONG BytesCommitted;
	/*0020*/ ULONG NumberOfTags;
	/*0024*/ ULONG NumberOfEntries;
	/*0028*/ ULONG NumberOfPseudoTags;
	/*002c*/ ULONG PseudoTagGranularity;
	/*0030*/ ULONG Reserved[0x5];
	/*0048*/ _RTL_HEAP_TAG * Tags;
	/*0050*/ _RTL_HEAP_ENTRY * Entries;
	/*0058*/
};

struct _RTL_HEAP_MEMORY_LIMIT_DATA {
	/*0000*/ ULONGLONG CommitLimitBytes;
	/*0008*/ ULONGLONG CommitLimitFailureCode;
	/*0010*/ ULONGLONG MaxAllocationSizeBytes;
	/*0018*/ ULONGLONG AllocationLimitFailureCode;
	/*0020*/
};

struct _RTL_HEAP_MEMORY_LIMIT_INFO {
	/*0000*/ ULONG Version;
	/*0008*/ _RTL_HEAP_MEMORY_LIMIT_DATA Data;
	/*0028*/
};

struct _RTL_HEAP_PARAMETERS {
	/*0000*/ ULONG Length;
	/*0008*/ ULONGLONG SegmentReserve;
	/*0010*/ ULONGLONG SegmentCommit;
	/*0018*/ ULONGLONG DeCommitFreeBlockThreshold;
	/*0020*/ ULONGLONG DeCommitTotalFreeThreshold;
	/*0028*/ ULONGLONG MaximumAllocationSize;
	/*0030*/ ULONGLONG VirtualMemoryThreshold;
	/*0038*/ ULONGLONG InitialCommit;
	/*0040*/ ULONGLONG InitialReserve;
	/*0048*/ LONG (* CommitRoutine)( void * , void * * , ULONGLONG * );
	/*0050*/ ULONGLONG Reserved[0x2];
	/*0060*/
};

struct _RTL_HEAP_STACK_CONTROL {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Flags;
	/*0008*/ void * Process;
	/*0010*/
};

struct _RTL_HEAP_STACK_QUERY {
	/*0000*/ ULONG Version;
	/*0008*/ void * Process;
	/*0010*/ LONG (* WriteRoutine)( void * , ULONGLONG , void * );
	/*0018*/ void * SerializationContext;
	/*0020*/ UCHAR QueryLevel;
	/*0021*/ UCHAR Flags;
	/*0028*/
};

struct _RTL_HEAP_TAG {
	/*0000*/ ULONG NumberOfAllocations;
	/*0004*/ ULONG NumberOfFrees;
	/*0008*/ ULONGLONG BytesAllocated;
	/*0010*/ USHORT TagIndex;
	/*0012*/ USHORT CreatorBackTraceIndex;
	/*0014*/ WCHAR TagName[0x18];
	/*0048*/
};

struct _RTL_HEAP_TAG_INFO {
	/*0000*/ ULONG NumberOfAllocations;
	/*0004*/ ULONG NumberOfFrees;
	/*0008*/ ULONGLONG BytesAllocated;
	/*0010*/
};

struct _RTL_HEAP_WALK_ENTRY {
	
	/*0000*/ void * DataAddress;
	/*0008*/ ULONGLONG DataSize;
	/*0010*/ UCHAR OverheadBytes;
	/*0011*/ UCHAR SegmentIndex;
	/*0012*/ USHORT Flags;
	/*0018*/ <unnamed-type-Block> Block;
	/*0018*/ <unnamed-type-Segment> Segment;
	/*0030*/
};

struct _RTL_IMAGE_MITIGATION_ASLR_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY ForceRelocateImages;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY BottomUpRandomization;
	/*0010*/ _RTL_IMAGE_MITIGATION_POLICY HighEntropyRandomization;
	/*0018*/
};

struct _RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY BlockNonMicrosoftSignedBinaries;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY EnforceSigningOnModuleDependencies;
	/*0010*/
};

struct _RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY DisallowChildProcessCreation;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY ControlFlowGuard;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY StrictControlFlowGuard;
	/*0010*/
};

struct _RTL_IMAGE_MITIGATION_DEP_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY Dep;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY BlockDynamicCode;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY DisableExtensionPoints;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY DisableNonSystemFonts;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_HEAP_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY TerminateOnHeapErrors;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY BlockRemoteImageLoads;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY BlockLowLabelImageLoads;
	/*0010*/ _RTL_IMAGE_MITIGATION_POLICY PreferSystem32;
	/*0018*/
};

enum _RTL_IMAGE_MITIGATION_OPTION_STATE {
	RtlMitigationOptionStateNotConfigured = 0x0,
	RtlMitigationOptionStateOn = 0x1,
	RtlMitigationOptionStateOff = 0x2
};

struct _RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilter;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilterPlus;
	/*0010*/ _RTL_IMAGE_MITIGATION_POLICY EnableImportAddressFilter;
	/*0018*/ _RTL_IMAGE_MITIGATION_POLICY EnableRopStackPivot;
	/*0020*/ _RTL_IMAGE_MITIGATION_POLICY EnableRopCallerCheck;
	/*0028*/ _RTL_IMAGE_MITIGATION_POLICY EnableRopSimExec;
	/*0030*/ WCHAR EafPlusModuleList[0x200];
	/*0430*/
};

union _RTL_IMAGE_MITIGATION_POLICY {
	/*0000*/ ULONGLONG AuditState : 02; // 0x0000000000000003;
	/*0000*/ ULONGLONG AuditFlag : 01; // 0x0000000000000004;
	/*0000*/ ULONGLONG EnableAdditionalAuditingOption : 01; // 0x0000000000000008;
	/*0000*/ ULONGLONG Reserved : 60; // 0xfffffffffffffff0;
	/*0000*/ ULONGLONG PolicyState : 02; // 0x0000000000000003;
	/*0000*/ ULONGLONG AlwaysInherit : 01; // 0x0000000000000004;
	/*0000*/ ULONGLONG EnableAdditionalPolicyOption : 01; // 0x0000000000000008;
	/*0000*/ ULONGLONG AuditReserved : 60; // 0xfffffffffffffff0;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_SEHOP_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY Sehop;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY StrictHandleChecks;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY BlockWin32kSystemCalls;
	/*0008*/
};

struct _RTL_IMAGE_MITIGATION_USER_SHADOW_STACK_POLICY {
	/*0000*/ _RTL_IMAGE_MITIGATION_POLICY UserShadowStack;
	/*0008*/ _RTL_IMAGE_MITIGATION_POLICY SetContextIpValidation;
	/*0010*/ _RTL_IMAGE_MITIGATION_POLICY BlockNonCetBinaries;
	/*0018*/
};

struct _RTL_IMAGE_POLICY_METADATA {
	/*0000*/ _IMAGE_POLICY_METADATA const * PolicyMetadata;
	/*0008*/ ULONGLONG LBound;
	/*0010*/ ULONGLONG UBound;
	/*0018*/
};

struct _RTL_LFG_RNG_STATE {
	/*0000*/ ULONG SeedArray[0x37];
	/*00dc*/ ULONG Next;
	/*00e0*/ ULONG NextP;
	/*00e4*/
};

enum _RTL_MEMORY_TYPE {
	MemoryTypePaged = 0x0,
	MemoryTypeNonPaged = 0x1,
	MemoryTypeLargePage = 0x2,
	MemoryTypeHugePage = 0x3,
	MemoryTypeMax = 0x4
};

struct _RTL_MODULE_BASIC_INFO {
	/*0000*/ void * ImageBase;
	/*0008*/
};

struct _RTL_MODULE_EXTENDED_INFO {
	/*0000*/ _RTL_MODULE_BASIC_INFO BasicInfo;
	/*0008*/ ULONG ImageSize;
	/*000c*/ USHORT FileNameOffset;
	/*000e*/ UCHAR FullPathName[0x100];
	/*0110*/
};

enum _RTL_PATH_TYPE {
	RtlPathTypeUnknown = 0x0,
	RtlPathTypeUncAbsolute = 0x1,
	RtlPathTypeDriveAbsolute = 0x2,
	RtlPathTypeDriveRelative = 0x3,
	RtlPathTypeRooted = 0x4,
	RtlPathTypeRelative = 0x5,
	RtlPathTypeLocalDevice = 0x6,
	RtlPathTypeRootLocalDevice = 0x7
};

struct _RTL_PERTHREAD_CURDIR {
	/*0000*/ _RTL_DRIVE_LETTER_CURDIR * CurrentDirectories;
	/*0008*/ _UNICODE_STRING * ImageName;
	/*0010*/ void * Environment;
	/*0018*/
};

struct _RTL_PHYSICAL_MEMORY_INFO {
	/*0000*/ RTL_PHYSICAL_MEMORY_POLICY Policy;
	/*0004*/
};

struct _RTL_PROCESS_BACKTRACES {
	/*0000*/ ULONGLONG CommittedMemory;
	/*0008*/ ULONGLONG ReservedMemory;
	/*0010*/ ULONG NumberOfBackTraceLookups;
	/*0014*/ ULONG NumberOfBackTraces;
	/*0018*/ _RTL_PROCESS_BACKTRACE_INFORMATION BackTraces[0x1];
	/*0128*/
};

struct _RTL_PROCESS_BACKTRACES_CONTROL {
	/*0000*/ ULONG ControlCode;
	/*0004*/ ULONG ControlSize;
	/*0008*/ UCHAR ControlData[0x1];
	/*0008*/ _RTL_STACK_TRACE_DATABASE_CREATE DatabaseCreate;
	/*0020*/
};

struct _RTL_PROCESS_BACKTRACE_INFORMATION {
	/*0000*/ CHAR * SymbolicBackTrace;
	/*0008*/ ULONG TraceCount;
	/*000c*/ USHORT Index;
	/*000e*/ USHORT Depth;
	/*0010*/ void * BackTrace[0x20];
	/*0110*/
};

struct _RTL_PROCESS_HEAPS {
	/*0000*/ ULONG NumberOfHeaps;
	/*0008*/ _RTL_HEAP_INFORMATION Heaps[0x1];
	/*0060*/
};

struct _RTL_PROCESS_LOCKS {
	/*0000*/ ULONG NumberOfLocks;
	/*0008*/ _RTL_PROCESS_LOCK_INFORMATION Locks[0x1];
	/*0038*/
};

struct _RTL_PROCESS_LOCK_INFORMATION {
	/*0000*/ void * Address;
	/*0008*/ USHORT Type;
	/*000a*/ USHORT CreatorBackTraceIndex;
	/*0010*/ void * OwningThread;
	/*0018*/ LONG LockCount;
	/*001c*/ ULONG ContentionCount;
	/*0020*/ ULONG EntryCount;
	/*0024*/ LONG RecursionCount;
	/*0028*/ ULONG NumberOfWaitingShared;
	/*002c*/ ULONG NumberOfWaitingExclusive;
	/*0030*/
};

struct _RTL_PROCESS_MODULES {
	/*0000*/ ULONG NumberOfModules;
	/*0008*/ _RTL_PROCESS_MODULE_INFORMATION Modules[0x1];
	/*0130*/
};

struct _RTL_PROCESS_MODULE_INFORMATION {
	/*0000*/ void * Section;
	/*0008*/ void * MappedBase;
	/*0010*/ void * ImageBase;
	/*0018*/ ULONG ImageSize;
	/*001c*/ ULONG Flags;
	/*0020*/ USHORT LoadOrderIndex;
	/*0022*/ USHORT InitOrderIndex;
	/*0024*/ USHORT LoadCount;
	/*0026*/ USHORT OffsetToFileName;
	/*0028*/ UCHAR FullPathName[0x100];
	/*0128*/
};

struct _RTL_PROCESS_MODULE_INFORMATION_EX {
	/*0000*/ USHORT NextOffset;
	/*0008*/ _RTL_PROCESS_MODULE_INFORMATION BaseInfo;
	/*0130*/ ULONG ImageChecksum;
	/*0134*/ ULONG TimeDateStamp;
	/*0138*/ void * DefaultBase;
	/*0140*/
};

struct _RTL_PROCESS_VERIFIER_OPTIONS {
	/*0000*/ ULONG SizeStruct;
	/*0004*/ ULONG Option;
	/*0008*/ UCHAR OptionData[0x1];
	/*000c*/
};

struct _RTL_PROTECTED_ACCESS {
	/*0000*/ ULONG DominateMask;
	/*0004*/ ULONG DeniedProcessAccess;
	/*0008*/ ULONG DeniedThreadAccess;
	/*000c*/
};

struct _RTL_QUERY_DEBUG_INFORMATION_INFO {
	/*0000*/ ULONG UniqueProcessId;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONGLONG Buffer;
	/*0010*/
};

struct _RTL_QUERY_DEBUG_VIRTUAL_PROCESS {
	/*0000*/ void * Context;
	/*0008*/ LONG (* ReadMemoryRoutine)( void * , void * , void * , ULONGLONG , ULONGLONG * );
	/*0010*/ LONG (* QueryInformationRoutine)( void * , _PROCESSINFOCLASS , void * , ULONG , ULONG * );
	/*0018*/
};

struct _RTL_QUERY_REGISTRY_TABLE {
	/*0000*/ LONG (* QueryRoutine)( WCHAR * , ULONG , void * , ULONG , void * , void * );
	/*0008*/ ULONG Flags;
	/*0010*/ WCHAR * Name;
	/*0018*/ void * EntryContext;
	/*0020*/ ULONG DefaultType;
	/*0028*/ void * DefaultData;
	/*0030*/ ULONG DefaultLength;
	/*0038*/
};

struct _RTL_RB_TREE {
	/*0000*/ _RTL_BALANCED_NODE * Root;
	/*0008*/ UCHAR Encoded : 01; // 0x01;
	/*0008*/ _RTL_BALANCED_NODE * Min;
	/*0010*/
};

struct _RTL_RELATIVE_NAME_U {
	/*0000*/ _UNICODE_STRING RelativeName;
	/*0010*/ void * ContainingDirectory;
	/*0018*/ _RTLP_CURDIR_REF * CurDirRef;
	/*0020*/
};

struct _RTL_RESOURCE {
	/*0000*/ _RTL_CRITICAL_SECTION CriticalSection;
	/*0028*/ void * SharedSemaphore;
	/*0030*/ ULONG volatile NumberOfWaitingShared;
	/*0038*/ void * ExclusiveSemaphore;
	/*0040*/ ULONG volatile NumberOfWaitingExclusive;
	/*0044*/ LONG volatile NumberOfActive;
	/*0048*/ void * ExclusiveOwnerThread;
	/*0050*/ ULONG Flags;
	/*0058*/ _RTL_CRITICAL_SECTION_DEBUG * DebugInfo;
	void _RTL_RESOURCE( _RTL_RESOURCE && );
	void _RTL_RESOURCE( _RTL_RESOURCE const & );
	_RTL_RESOURCE & operator=( _RTL_RESOURCE && );
	_RTL_RESOURCE & operator=( _RTL_RESOURCE const & );
	/*0060*/
};

enum _RTL_RESOURCE_CATEGORY {
	RtlResTypePhysicalMemoryTier = 0x0,
	RtlResTypeDiskSpaceTier = 0x1,
	RtlResTypeDiskSpeedTier = 0x2,
	RtlResTypeDiskWriteConstraintTier = 0x3,
	RtlResTypeMax = 0x4
};

enum _RTL_RESOURCE_POLICY_FLAGS {
	RTL_RESOURCE_POLICY_FLAGS_NONE = 0x0
};

struct _RTL_RETPOLINE_BINARY_INFO {
	/*0000*/ LONG RetpolineStubsStartRva;
	/*0004*/ ULONG CfgDispatchFunctionPtrRva;
	/*0008*/ ULONG IATRva;
	/*0010*/ LONG * ImportRvas;
	/*0018*/ ULONGLONG * IAT;
	/*0020*/ void * ImageBase;
	/*0028*/ ULONG (* CheckFunction)( void * );
	/*0030*/
};

struct _RTL_RETPOLINE_RELOCATION_INDEX {
	
	/*0000*/ USHORT ImportRelocationSize;
	/*0002*/ USHORT IndirectRelocationSize;
	/*0004*/ USHORT SwitchJumpRelocationSize;
	/*0006*/ USHORT StraddleType;
	/*0008*/ <unnamed-type-StraddleReloc> StraddleReloc;
	/*000c*/
};

struct _RTL_RETPOLINE_ROUTINES {
	/*0000*/ ULONG UnwindDataOffset;
	/*0004*/ ULONG SwitchtableJump[0x10];
	/*0044*/ ULONG CfgIndirectRax;
	/*0048*/ ULONG NonCfgIndirectRax;
	/*004c*/ ULONG ImportR10;
	/*0050*/
};

union _RTL_RUN_ONCE {
	/*0000*/ void * Ptr;
	/*0008*/
};

struct _RTL_RVA_LIST {
	/*0000*/ ULONGLONG RvaCount;
	/*0008*/ ULONG StateBitsPerRva;
	/*0010*/ UCHAR * CompressedBuffer;
	/*0018*/ ULONGLONG CompressedBufferSize;
	/*0020*/ _RTL_BITMAP_EX RvaStateBitMap;
	/*0030*/ ULONG * StateBitValueMap;
	/*0038*/ void * ExtensionBuffer;
	/*0040*/
};

struct _RTL_RVA_LIST_ITERATOR {
	/*0000*/ ULONG CurrentRva;
	/*0004*/ ULONG CurrentRvaIndex;
	/*0008*/ ULONG CompressedRvaDataOffset;
	/*000c*/
};

struct _RTL_RXACT_CONTEXT {
	/*0000*/ void * RootRegistryKey;
	/*0008*/ void * RXactKey;
	/*0010*/ UCHAR HandlesValid;
	/*0018*/ _RTL_RXACT_LOG * RXactLog;
	/*0020*/
};

struct _RTL_RXACT_LOG {
	/*0000*/ ULONG OperationCount;
	/*0004*/ ULONG LogSize;
	/*0008*/ ULONG LogSizeInUse;
	/*000c*/ ULONG Alignment;
	/*0010*/
};

enum _RTL_RXACT_OPERATION {
	RtlRXactOperationDelete = 0x1,
	RtlRXactOperationSetValue = 0x2,
	RtlRXactOperationDelAttribute = 0x3,
	RtlRXactOperationSetAttribute = 0x4
};

struct _RTL_SEGMENT_HEAP_MEMORY_SOURCE {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG MemoryTypeMask;
	/*0008*/ ULONG NumaNode;
	/*0010*/ void * PartitionHandle;
	/*0018*/ ULONGLONG Reserved[0x2];
	/*0028*/
};

struct _RTL_SEGMENT_HEAP_PARAMETERS {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Size;
	/*0004*/ ULONG Flags;
	/*0008*/ _RTL_SEGMENT_HEAP_MEMORY_SOURCE MemorySource;
	/*0030*/ ULONGLONG Reserved[0x4];
	/*0050*/
};

struct _RTL_SPARSE_BITMAP_CTX {
	/*0000*/ ULONGLONG Lock;
	/*0008*/ _RTL_SPARSE_BITMAP_RANGE * * BitmapRanges;
	/*0010*/ _RTL_BITMAP RangeArrayCommitStatus;
	/*0020*/ void * (* AllocateRoutine)( ULONGLONG );
	/*0028*/ void (* FreeRoutine)( void * );
	/*0030*/ ULONG RangeCount;
	/*0034*/ ULONG RangeIndexLimit;
	/*0038*/ ULONG BitsPerRange;
	/*003c*/ ULONG RangeCountMax;
	/*0040*/ ULONG RangeMetadataOffset;
	/*0044*/ ULONG MetadataSizePerBit;
	/*0048*/ ULONG DefaultBitsSet : 01; // 0x00000001;
	/*0048*/ ULONG SparseRangeArray : 01; // 0x00000002;
	/*0048*/ ULONG NoInternalLocking : 01; // 0x00000004;
	/*0048*/ ULONG SpareFlags : 29; // 0xfffffff8;
	/*0050*/
};

enum _RTL_SPARSE_BITMAP_CTX_OPERATION {
	RtlSparseBitmapOperationClear = 0x0,
	RtlSparseBitmapOperationSet = 0x1,
	RtlSparseBitmapOperationAny = 0x2,
	RtlSparseBitmapOperationMax = 0x3
};

struct _RTL_SPARSE_BITMAP_PARAMETER {
	/*0000*/ ULONGLONG BitCountMax;
	/*0008*/ ULONG MetadataSizePerBit;
	/*000c*/ ULONG BitsPerRange;
	/*0010*/ ULONG RangeCountMax;
	/*0018*/ void * (* AllocateRoutine)( ULONGLONG );
	/*0020*/ void (* FreeRoutine)( void * );
	/*0028*/ ULONG DefaultBitsSet : 01; // 0x00000001;
	/*0028*/ ULONG SparseRangeArray : 01; // 0x00000002;
	/*0028*/ ULONG NoInternalLocking : 01; // 0x00000004;
	/*0028*/ ULONG SpareFlags : 29; // 0xfffffff8;
	/*0030*/
};

struct _RTL_SPARSE_BITMAP_RANGE {
	/*0000*/ ULONGLONG Lock;
	/*0008*/ _RTL_BITMAP RangeBitmap;
	/*0000*/ _SINGLE_LIST_ENTRY Next;
	/*0018*/
};

struct _RTL_SPARSE_BITMAP_RUN {
	/*0000*/ ULONG StartingIndexLow;
	/*0004*/ ULONG StartingIndexHigh;
	/*0008*/ ULONG Length;
	/*0010*/ void * Metadata;
	/*0018*/
};

struct _RTL_SPLAY_LINKS {
	/*0000*/ _RTL_SPLAY_LINKS * Parent;
	/*0008*/ _RTL_SPLAY_LINKS * LeftChild;
	/*0010*/ _RTL_SPLAY_LINKS * RightChild;
	/*0018*/
};

struct _RTL_SRWLOCK {
	/*0000*/ ULONGLONG Locked : 01; // 0x0000000000000001;
	/*0000*/ ULONGLONG Waiting : 01; // 0x0000000000000002;
	/*0000*/ ULONGLONG Waking : 01; // 0x0000000000000004;
	/*0000*/ ULONGLONG MultipleShared : 01; // 0x0000000000000008;
	/*0000*/ ULONGLONG Shared : 60; // 0xfffffffffffffff0;
	/*0000*/ ULONGLONG Value;
	/*0000*/ void * Ptr;
	/*0008*/
};

struct _RTL_STACK_CONTEXT {
	/*0000*/ ULONG NumberOfEntries;
	/*0008*/ _RTL_STACK_CONTEXT_ENTRY Entry[0x1];
	/*0018*/
};

struct _RTL_STACK_CONTEXT_ENTRY {
	/*0000*/ ULONGLONG Address;
	/*0008*/ ULONGLONG Data;
	/*0010*/
};

enum _RTL_STACK_TRACE_DATABASE_CONTROL {
	BackTraceDatabaseCreate = 0x0,
	BackTraceDatabaseDelete = 0x1,
	BackTraceDatabaseFlush = 0x2,
	BackTraceDatabaseMaxControl = 0x3
};

struct _RTL_STACK_TRACE_DATABASE_CREATE {
	/*0000*/ void * CommitBase;
	/*0008*/ ULONGLONG CommitSize;
	/*0010*/ ULONGLONG ReserveSize;
	/*0018*/
};

union _RTL_TICK_LOCK {
	/*0000*/ ULONGLONG AsULong64;
	/*0000*/ ULONGLONG Busy : 01; // 0x0000000000000001;
	/*0000*/ ULONGLONG Ticks : 63; // 0xfffffffffffffffe;
	/*0008*/
};

struct _RTL_TIME_ZONE_INFORMATION {
	/*0000*/ LONG Bias;
	/*0004*/ WCHAR StandardName[0x20];
	/*0044*/ _TIME_FIELDS StandardStart;
	/*0054*/ LONG StandardBias;
	/*0058*/ WCHAR DaylightName[0x20];
	/*0098*/ _TIME_FIELDS DaylightStart;
	/*00a8*/ LONG DaylightBias;
	/*00ac*/
};

struct _RTL_TRACE_BLOCK {
	/*0000*/ ULONG Magic;
	/*0004*/ ULONG Count;
	/*0008*/ ULONG Size;
	/*0010*/ ULONGLONG UserCount;
	/*0018*/ ULONGLONG UserSize;
	/*0020*/ void * UserContext;
	/*0028*/ _RTL_TRACE_BLOCK * Next;
	/*0030*/ void * * Trace;
	/*0038*/
};

struct _RTL_TRACE_DATABASE;

struct _RTL_TRACE_ENUMERATE {
	/*0000*/ _RTL_TRACE_DATABASE * Database;
	/*0008*/ ULONG Index;
	/*0010*/ _RTL_TRACE_BLOCK * Block;
	/*0018*/
};

struct _RTL_UMS_COMPLETION_LIST {
	/*0000*/ _SINGLE_LIST_ENTRY * ThreadListHead;
	/*0008*/ void * CompletionEvent;
	/*0010*/ ULONG CompletionFlags;
	/*0018*/ _SINGLE_LIST_ENTRY InternalListHead;
	/*0020*/
};

struct _RTL_UMS_CONTEXT {
	/*0000*/ _SINGLE_LIST_ENTRY Link;
	/*0010*/ _CONTEXT Context;
	/*04e0*/ void * Teb;
	/*04e8*/ void * UserContext;
	/*04f0*/ ULONG volatile ScheduledThread : 01; // 0x00000001;
	/*04f0*/ ULONG volatile Suspended : 01; // 0x00000002;
	/*04f0*/ ULONG volatile VolatileContext : 01; // 0x00000004;
	/*04f0*/ ULONG volatile Terminated : 01; // 0x00000008;
	/*04f0*/ ULONG volatile DebugActive : 01; // 0x00000010;
	/*04f0*/ ULONG volatile RunningOnSelfThread : 01; // 0x00000020;
	/*04f0*/ ULONG volatile DenyRunningOnSelfThread : 01; // 0x00000040;
	/*04f0*/ LONG volatile Flags;
	/*04f8*/ ULONGLONG volatile KernelUpdateLock : 02; // 0x0000000000000003;
	/*04f8*/ ULONGLONG volatile PrimaryClientID : 62; // 0xfffffffffffffffc;
	/*04f8*/ ULONGLONG volatile ContextLock;
	/*0500*/ _RTL_UMS_CONTEXT * PrimaryUmsContext;
	/*0508*/ ULONG SwitchCount;
	/*050c*/ ULONG KernelYieldCount;
	/*0510*/ ULONG MixedYieldCount;
	/*0514*/ ULONG YieldCount;
	void _RTL_UMS_CONTEXT( _RTL_UMS_CONTEXT && );
	void _RTL_UMS_CONTEXT( _RTL_UMS_CONTEXT const & );
	_RTL_UMS_CONTEXT & operator=( _RTL_UMS_CONTEXT && );
	_RTL_UMS_CONTEXT & operator=( _RTL_UMS_CONTEXT const & );
	/*0520*/
};

enum _RTL_UMS_SCHEDULER_REASON {
	UmsSchedulerStartup = 0x0,
	UmsSchedulerThreadBlocked = 0x1,
	UmsSchedulerThreadYield = 0x2
};

struct _RTL_UMS_SCHEDULER_STARTUP_INFO {
	/*0000*/ ULONG UmsVersion;
	/*0008*/ _RTL_UMS_COMPLETION_LIST * CompletionList;
	/*0010*/ void (* SchedulerProc)( _RTL_UMS_SCHEDULER_REASON , ULONGLONG , void * );
	/*0018*/ void * SchedulerParam;
	/*0020*/
};

enum _RTL_UMS_THREAD_INFO_CLASS {
	UmsThreadInvalidInfoClass = 0x0,
	UmsThreadUserContext = 0x1,
	UmsThreadPriority = 0x2,
	UmsThreadAffinity = 0x3,
	UmsThreadTeb = 0x4,
	UmsThreadIsSuspended = 0x5,
	UmsThreadIsTerminated = 0x6,
	UmsThreadMaxInfoClass = 0x7
};

struct _RTL_UNICODE_STRING_BUFFER {
	/*0000*/ _UNICODE_STRING String;
	/*0010*/ _RTL_BUFFER ByteBuffer;
	/*0030*/ UCHAR MinimumStaticBufferForTerminalNul[0x2];
	/*0038*/
};

struct _RTL_UNLOAD_EVENT_TRACE {
	/*0000*/ void * BaseAddress;
	/*0008*/ ULONGLONG SizeOfImage;
	/*0010*/ ULONG Sequence;
	/*0014*/ ULONG TimeDateStamp;
	/*0018*/ ULONG CheckSum;
	/*001c*/ WCHAR ImageName[0x20];
	/*005c*/ ULONG Version[0x2];
	/*0068*/
};

struct _RTL_UNLOAD_EVENT_TRACE32 {
	/*0000*/ ULONG BaseAddress;
	/*0004*/ ULONG SizeOfImage;
	/*0008*/ ULONG Sequence;
	/*000c*/ ULONG TimeDateStamp;
	/*0010*/ ULONG CheckSum;
	/*0014*/ WCHAR ImageName[0x20];
	/*0054*/ ULONG Version[0x2];
	/*005c*/
};

struct _RTL_UNLOAD_EVENT_TRACE64 {
	/*0000*/ ULONGLONG BaseAddress;
	/*0008*/ ULONGLONG SizeOfImage;
	/*0010*/ ULONG Sequence;
	/*0014*/ ULONG TimeDateStamp;
	/*0018*/ ULONG CheckSum;
	/*001c*/ WCHAR ImageName[0x20];
	/*005c*/ ULONG Version[0x2];
	/*0068*/
};

struct _RTL_USER_PROCESS_EXTENDED_PARAMETERS {
	/*0000*/ USHORT Version;
	/*0002*/ USHORT NodeNumber;
	/*0008*/ void * ProcessSecurityDescriptor;
	/*0010*/ void * ThreadSecurityDescriptor;
	/*0018*/ void * ParentProcess;
	/*0020*/ void * DebugPort;
	/*0028*/ void * TokenHandle;
	/*0030*/ void * JobHandle;
	/*0038*/
};

struct _RTL_USER_PROCESS_INFORMATION {
	/*0000*/ ULONG Length;
	/*0008*/ void * Process;
	/*0010*/ void * Thread;
	/*0018*/ _CLIENT_ID ClientId;
	/*0028*/ _SECTION_IMAGE_INFORMATION ImageInformation;
	/*0068*/
};

struct _RTL_USER_PROCESS_INFORMATION64 {
	/*0000*/ ULONG Length;
	/*0008*/ LONGLONG Process;
	/*0010*/ LONGLONG Thread;
	/*0018*/ _CLIENT_ID64 ClientId;
	/*0028*/ _SECTION_IMAGE_INFORMATION64 ImageInformation;
	/*0068*/
};

struct _RTL_USER_PROCESS_PARAMETERS {
	/*0000*/ ULONG MaximumLength;
	/*0004*/ ULONG Length;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG DebugFlags;
	/*0010*/ void * ConsoleHandle;
	/*0018*/ ULONG ConsoleFlags;
	/*0020*/ void * StandardInput;
	/*0028*/ void * StandardOutput;
	/*0030*/ void * StandardError;
	/*0038*/ _CURDIR CurrentDirectory;
	/*0050*/ _UNICODE_STRING DllPath;
	/*0060*/ _UNICODE_STRING ImagePathName;
	/*0070*/ _UNICODE_STRING CommandLine;
	/*0080*/ void * Environment;
	/*0088*/ ULONG StartingX;
	/*008c*/ ULONG StartingY;
	/*0090*/ ULONG CountX;
	/*0094*/ ULONG CountY;
	/*0098*/ ULONG CountCharsX;
	/*009c*/ ULONG CountCharsY;
	/*00a0*/ ULONG FillAttribute;
	/*00a4*/ ULONG WindowFlags;
	/*00a8*/ ULONG ShowWindowFlags;
	/*00b0*/ _UNICODE_STRING WindowTitle;
	/*00c0*/ _UNICODE_STRING DesktopInfo;
	/*00d0*/ _UNICODE_STRING ShellInfo;
	/*00e0*/ _UNICODE_STRING RuntimeData;
	/*00f0*/ _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[0x20];
	/*03f0*/ ULONGLONG EnvironmentSize;
	/*03f8*/ ULONGLONG EnvironmentVersion;
	/*0400*/ void * PackageDependencyData;
	/*0408*/ ULONG ProcessGroupId;
	/*040c*/ ULONG LoaderThreads;
	/*0410*/ _UNICODE_STRING RedirectionDllName;
	/*0420*/ _UNICODE_STRING HeapPartitionName;
	/*0430*/ ULONGLONG * DefaultThreadpoolCpuSetMasks;
	/*0438*/ ULONG DefaultThreadpoolCpuSetMaskCount;
	/*043c*/ ULONG DefaultThreadpoolThreadMaximum;
	/*0440*/
};

struct _RTL_WORK_ON_BEHALF_TICKET_EX {
	/*0000*/ _ALPC_WORK_ON_BEHALF_TICKET Ticket;
	/*0008*/ ULONG Flags;
	/*0008*/ ULONG CurrentThread : 01; // 0x00000001;
	/*0008*/ ULONG Reserved1 : 31; // 0xfffffffe;
	/*000c*/ ULONG Reserved2;
	/*0010*/
};

enum _RUM_TELEMETRY_EVENT_TYPE {
	SrumtelEventInitializaiton = 0x0,
	SrumtelEventSuspend = 0x1,
	SrumtelEventResume = 0x2,
	SrumtelEventSwitchToDC = 0x3,
	SrumtelEventSwitchToAC = 0x4,
	SrumtelEventMonitorOff = 0x5,
	SrumtelEventMonitorOn = 0x6,
	SrumtelEventTimer = 0x7,
	SrumtelEventShutdown = 0x8,
	SrumtelEventBatteryChanged = 0x9,
	SrumtelEventMonitorBrightnessChanged = 0xa,
	SrumtelEventEnergySaverOff = 0xb,
	SrumtelEventEnergySaverOn = 0xc,
	SrumtelEventBatteryRemainingChanged = 0xd,
	SrumtelEventCompositeBatteryChanged = 0xe,
	SrumtelEventBatteryNotificationTrigger = 0xf,
	SrumtelEventActualOverlayChanged = 0x10,
	SrumtelEventSecondPhaseInitComplete = 0x11
};

struct _Real_type<float> {
	/*0001*/
};

struct _Real_type<long double> {
	/*0001*/
};

struct _Real_widened<double,double> {
	/*0001*/
};

struct _Real_widened<double,float> {
	/*0001*/
};

struct _Real_widened<float,double> {
	/*0001*/
};

struct _Real_widened<float,float> {
	/*0001*/
};

struct _RemotableHandle {

	union __MIDL_IWinTypes_0009 {
		/*0000*/ LONG hInproc;
		/*0000*/ LONG hRemote;
		/*0004*/
	};

	/*0000*/ LONG fContext;
	/*0004*/ __MIDL_IWinTypes_0009 u;
	/*0008*/
};

struct _SAndRestriction {
	/*0000*/ ULONG cRes;
	/*0008*/ _SRestriction * lpRes;
	/*0010*/
};

struct _SAppTimeArray {
	/*0000*/ ULONG cValues;
	/*0008*/ double * lpat;
	/*0010*/
};

struct _SBinary {
	/*0000*/ ULONG cb;
	/*0008*/ UCHAR * lpb;
	/*0010*/
};

struct _SBinaryArray {
	/*0000*/ ULONG cValues;
	/*0008*/ _SBinary * lpbin;
	/*0010*/
};

struct _SBitMaskRestriction {
	/*0000*/ ULONG relBMR;
	/*0004*/ ULONG ulPropTag;
	/*0008*/ ULONG ulMask;
	/*000c*/
};

enum _SCHEMACONTENTTYPE {
	SCHEMACONTENTTYPE_EMPTY = 0x0,
	SCHEMACONTENTTYPE_TEXTONLY = 0x1,
	SCHEMACONTENTTYPE_ELEMENTONLY = 0x2,
	SCHEMACONTENTTYPE_MIXED = 0x3
};

enum _SCHEMADERIVATIONMETHOD {
	SCHEMADERIVATIONMETHOD_EMPTY = 0x0,
	SCHEMADERIVATIONMETHOD_SUBSTITUTION = 0x1,
	SCHEMADERIVATIONMETHOD_EXTENSION = 0x2,
	SCHEMADERIVATIONMETHOD_RESTRICTION = 0x4,
	SCHEMADERIVATIONMETHOD_LIST = 0x8,
	SCHEMADERIVATIONMETHOD_UNION = 0x10,
	SCHEMADERIVATIONMETHOD_ALL = 0xff,
	SCHEMADERIVATIONMETHOD_NONE = 0x100
};

enum _SCHEMAPROCESSCONTENTS {
	SCHEMAPROCESSCONTENTS_NONE = 0x0,
	SCHEMAPROCESSCONTENTS_SKIP = 0x1,
	SCHEMAPROCESSCONTENTS_LAX = 0x2,
	SCHEMAPROCESSCONTENTS_STRICT = 0x3
};

enum _SCHEMATYPEVARIETY {
	SCHEMATYPEVARIETY_NONE = 0xffffffff,
	SCHEMATYPEVARIETY_ATOMIC = 0x0,
	SCHEMATYPEVARIETY_LIST = 0x1,
	SCHEMATYPEVARIETY_UNION = 0x2
};

enum _SCHEMAUSE {
	SCHEMAUSE_OPTIONAL = 0x0,
	SCHEMAUSE_PROHIBITED = 0x1,
	SCHEMAUSE_REQUIRED = 0x2
};

enum _SCHEMAWHITESPACE {
	SCHEMAWHITESPACE_NONE = 0xffffffff,
	SCHEMAWHITESPACE_PRESERVE = 0x0,
	SCHEMAWHITESPACE_REPLACE = 0x1,
	SCHEMAWHITESPACE_COLLAPSE = 0x2
};

struct _SCONTEXT_QUEUE {
	/*0000*/ ULONG NumberOfObjects;
	/*0008*/ <unnamed-type-NDR_SCONTEXT> * * ArrayOfObjects;
	/*0010*/
};

struct _SCOPE_TABLE_AMD64 {
	
	/*0000*/ ULONG Count;
	/*0004*/ <unnamed-type-ScopeRecord> ScopeRecord[0x1];
	/*0014*/
};

struct _SCOPE_TABLE_ARM {
	
	/*0000*/ ULONG Count;
	/*0004*/ <unnamed-type-ScopeRecord> ScopeRecord[0x1];
	/*0014*/
};

struct _SCOPE_TABLE_ARM64 {
	
	/*0000*/ ULONG Count;
	/*0004*/ <unnamed-type-ScopeRecord> ScopeRecord[0x1];
	/*0014*/
};

struct _SCRUB_DATA_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG MaximumIos;
	/*000c*/ ULONG ObjectId[0x4];
	/*001c*/ ULONG Reserved[0x19];
	/*0080*/ UCHAR ResumeContext[0x330];
	/*03b0*/
};

struct _SCRUB_DATA_OUTPUT {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG Status;
	/*0010*/ ULONGLONG ErrorFileOffset;
	/*0018*/ ULONGLONG ErrorLength;
	/*0020*/ ULONGLONG NumberOfBytesRepaired;
	/*0028*/ ULONGLONG NumberOfBytesFailed;
	/*0030*/ ULONGLONG InternalFileReference;
	/*0038*/ USHORT ResumeContextLength;
	/*003a*/ USHORT ParityExtentDataOffset;
	/*003c*/ ULONG Reserved[0x9];
	/*0060*/ ULONGLONG NumberOfMetadataBytesProcessed;
	/*0068*/ ULONGLONG NumberOfDataBytesProcessed;
	/*0070*/ ULONGLONG TotalNumberOfMetadataBytesInUse;
	/*0078*/ ULONGLONG TotalNumberOfDataBytesInUse;
	/*0080*/ UCHAR ResumeContext[0x330];
	/*03b0*/
};

struct _SCRUB_PARITY_EXTENT {
	/*0000*/ LONGLONG Offset;
	/*0008*/ ULONGLONG Length;
	/*0010*/
};

struct _SCRUB_PARITY_EXTENT_DATA {
	/*0000*/ USHORT Size;
	/*0002*/ USHORT Flags;
	/*0004*/ USHORT NumberOfParityExtents;
	/*0006*/ USHORT MaximumNumberOfParityExtents;
	/*0008*/ _SCRUB_PARITY_EXTENT ParityExtents[0x1];
	/*0018*/
};

struct _SC_ACTION {
	/*0000*/ _SC_ACTION_TYPE Type;
	/*0004*/ ULONG Delay;
	/*0008*/
};

enum _SC_ACTION_TYPE {
	SC_ACTION_NONE = 0x0,
	SC_ACTION_RESTART = 0x1,
	SC_ACTION_REBOOT = 0x2,
	SC_ACTION_RUN_COMMAND = 0x3,
	SC_ACTION_OWN_RESTART = 0x4
};

enum _SC_ENUM_TYPE {
	SC_ENUM_PROCESS_INFO = 0x0
};

enum _SC_EVENT_TYPE {
	SC_EVENT_DATABASE_CHANGE = 0x0,
	SC_EVENT_PROPERTY_CHANGE = 0x1,
	SC_EVENT_STATUS_CHANGE = 0x2
};

struct _SC_NOTIFICATION_REGISTRATION;

enum _SC_STATUS_TYPE {
	SC_STATUS_PROCESS_INFO = 0x0
};

struct _SCommentRestriction {
	/*0000*/ ULONG cValues;
	/*0008*/ _SRestriction * lpRes;
	/*0010*/ _SPropValue * lpProp;
	/*0018*/
};

struct _SComparePropsRestriction {
	/*0000*/ ULONG relop;
	/*0004*/ ULONG ulPropTag1;
	/*0008*/ ULONG ulPropTag2;
	/*000c*/
};

struct _SContentRestriction {
	/*0000*/ ULONG ulFuzzyLevel;
	/*0004*/ ULONG ulPropTag;
	/*0008*/ _SPropValue * lpProp;
	/*0010*/
};

struct _SCurrencyArray {
	/*0000*/ ULONG cValues;
	/*0008*/ tagCY * lpcur;
	/*0010*/
};

struct _SD_CHANGE_MACHINE_SID_INPUT {
	/*0000*/ USHORT CurrentMachineSIDOffset;
	/*0002*/ USHORT CurrentMachineSIDLength;
	/*0004*/ USHORT NewMachineSIDOffset;
	/*0006*/ USHORT NewMachineSIDLength;
	/*0008*/
};

struct _SD_CHANGE_MACHINE_SID_OUTPUT {
	/*0000*/ ULONGLONG NumSDChangedSuccess;
	/*0008*/ ULONGLONG NumSDChangedFail;
	/*0010*/ ULONGLONG NumSDUnused;
	/*0018*/ ULONGLONG NumSDTotal;
	/*0020*/ ULONGLONG NumMftSDChangedSuccess;
	/*0028*/ ULONGLONG NumMftSDChangedFail;
	/*0030*/ ULONGLONG NumMftSDTotal;
	/*0038*/
};

struct _SD_ENUM_SDS_ENTRY {
	/*0000*/ ULONG Hash;
	/*0004*/ ULONG SecurityId;
	/*0008*/ ULONGLONG Offset;
	/*0010*/ ULONG Length;
	/*0014*/ UCHAR Descriptor[0x1];
	/*0018*/
};

struct _SD_ENUM_SDS_INPUT {
	/*0000*/ ULONGLONG StartingOffset;
	/*0008*/ ULONGLONG MaxSDEntriesToReturn;
	/*0010*/
};

struct _SD_ENUM_SDS_OUTPUT {
	/*0000*/ ULONGLONG NextOffset;
	/*0008*/ ULONGLONG NumSDEntriesReturned;
	/*0010*/ ULONGLONG NumSDBytesReturned;
	/*0018*/ _SD_ENUM_SDS_ENTRY SDEntry[0x1];
	/*0030*/
};

struct _SD_GLOBAL_CHANGE_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG ChangeType;
	/*0008*/ _SD_CHANGE_MACHINE_SID_INPUT SdChange;
	/*0008*/ _SD_QUERY_STATS_INPUT SdQueryStats;
	/*0008*/ _SD_ENUM_SDS_INPUT SdEnumSds;
	/*0018*/
};

struct _SD_GLOBAL_CHANGE_OUTPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG ChangeType;
	/*0008*/ _SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
	/*0008*/ _SD_QUERY_STATS_OUTPUT SdQueryStats;
	/*0008*/ _SD_ENUM_SDS_OUTPUT SdEnumSds;
	/*0048*/
};

struct _SD_QUERY_STATS_INPUT {
	/*0000*/ ULONG Reserved;
	/*0004*/
};

struct _SD_QUERY_STATS_OUTPUT {
	/*0000*/ ULONGLONG SdsStreamSize;
	/*0008*/ ULONGLONG SdsAllocationSize;
	/*0010*/ ULONGLONG SiiStreamSize;
	/*0018*/ ULONGLONG SiiAllocationSize;
	/*0020*/ ULONGLONG SdhStreamSize;
	/*0028*/ ULONGLONG SdhAllocationSize;
	/*0030*/ ULONGLONG NumSDTotal;
	/*0038*/ ULONGLONG NumSDUnused;
	/*0040*/
};

struct _SDateTimeArray {
	/*0000*/ ULONG cValues;
	/*0008*/ _FILETIME * lpft;
	/*0010*/
};

struct _SDoubleArray {
	/*0000*/ ULONG cValues;
	/*0008*/ double * lpdbl;
	/*0010*/
};

struct _SECTIONBASICINFO {
	/*0000*/ void * BaseAddress;
	/*0008*/ ULONG AllocationAttributes;
	/*0010*/ _LARGE_INTEGER MaximumSize;
	/*0018*/
};

struct _SECTION_IMAGE_INFORMATION {
	/*0000*/ void * TransferAddress;
	/*0008*/ ULONG ZeroBits;
	/*0010*/ ULONGLONG MaximumStackSize;
	/*0018*/ ULONGLONG CommittedStackSize;
	/*0020*/ ULONG SubSystemType;
	/*0024*/ USHORT SubSystemMinorVersion;
	/*0026*/ USHORT SubSystemMajorVersion;
	/*0024*/ ULONG SubSystemVersion;
	/*0028*/ USHORT MajorOperatingSystemVersion;
	/*002a*/ USHORT MinorOperatingSystemVersion;
	/*0028*/ ULONG OperatingSystemVersion;
	/*002c*/ USHORT ImageCharacteristics;
	/*002e*/ USHORT DllCharacteristics;
	/*0030*/ USHORT Machine;
	/*0032*/ UCHAR ImageContainsCode;
	/*0033*/ UCHAR ImageFlags;
	/*0033*/ UCHAR ComPlusNativeReady : 01; // 0x01;
	/*0033*/ UCHAR ComPlusILOnly : 01; // 0x02;
	/*0033*/ UCHAR ImageDynamicallyRelocated : 01; // 0x04;
	/*0033*/ UCHAR ImageMappedFlat : 01; // 0x08;
	/*0033*/ UCHAR BaseBelow4gb : 01; // 0x10;
	/*0033*/ UCHAR ComPlusPrefer32bit : 01; // 0x20;
	/*0033*/ UCHAR Reserved : 02; // 0xc0;
	/*0034*/ ULONG LoaderFlags;
	/*0038*/ ULONG ImageFileSize;
	/*003c*/ ULONG CheckSum;
	/*0040*/
};

struct _SECTION_IMAGE_INFORMATION32 {
	/*0000*/ ULONG TransferAddress;
	/*0004*/ ULONG ZeroBits;
	/*0008*/ ULONG MaximumStackSize;
	/*000c*/ ULONG CommittedStackSize;
	/*0010*/ ULONG SubSystemType;
	/*0014*/ USHORT SubSystemMinorVersion;
	/*0016*/ USHORT SubSystemMajorVersion;
	/*0014*/ ULONG SubSystemVersion;
	/*0018*/ USHORT MajorOperatingSystemVersion;
	/*001a*/ USHORT MinorOperatingSystemVersion;
	/*0018*/ ULONG OperatingSystemVersion;
	/*001c*/ USHORT ImageCharacteristics;
	/*001e*/ USHORT DllCharacteristics;
	/*0020*/ USHORT Machine;
	/*0022*/ UCHAR ImageContainsCode;
	/*0023*/ UCHAR ImageFlags;
	/*0023*/ UCHAR ComPlus : 01; // 0x01;
	/*0023*/ UCHAR ImageDynamicallyRelocated : 01; // 0x02;
	/*0023*/ UCHAR Reserved : 06; // 0xfc;
	/*0024*/ ULONG LoaderFlags;
	/*0028*/ ULONG ImageFileSize;
	/*002c*/ ULONG CheckSum;
	/*0030*/
};

struct _SECTION_IMAGE_INFORMATION64 {
	/*0000*/ ULONGLONG TransferAddress;
	/*0008*/ ULONG ZeroBits;
	/*0010*/ ULONGLONG MaximumStackSize;
	/*0018*/ ULONGLONG CommittedStackSize;
	/*0020*/ ULONG SubSystemType;
	/*0024*/ USHORT SubSystemMinorVersion;
	/*0026*/ USHORT SubSystemMajorVersion;
	/*0024*/ ULONG SubSystemVersion;
	/*0028*/ USHORT MajorOperatingSystemVersion;
	/*002a*/ USHORT MinorOperatingSystemVersion;
	/*0028*/ ULONG OperatingSystemVersion;
	/*002c*/ USHORT ImageCharacteristics;
	/*002e*/ USHORT DllCharacteristics;
	/*0030*/ USHORT Machine;
	/*0032*/ UCHAR ImageContainsCode;
	/*0033*/ UCHAR ImageFlags;
	/*0033*/ UCHAR ComPlus : 01; // 0x01;
	/*0033*/ UCHAR ImageDynamicallyRelocated : 01; // 0x02;
	/*0033*/ UCHAR Reserved : 06; // 0xfc;
	/*0034*/ ULONG LoaderFlags;
	/*0038*/ ULONG ImageFileSize;
	/*003c*/ ULONG CheckSum;
	/*0040*/
};

enum _SECTION_INFORMATION_CLASS {
	SectionBasicInformation = 0x0,
	SectionImageInformation = 0x1,
	SectionRelocationInformation = 0x2,
	SectionOriginalBaseInformation = 0x3,
	SectionInternalImageInformation = 0x4,
	MaxSectionInfoClass = 0x5
};

enum _SECTION_INHERIT {
	ViewShare = 0x1,
	ViewUnmap = 0x2
};

struct _SECTION_INTERNAL_IMAGE_INFORMATION {
	/*0000*/ _SECTION_IMAGE_INFORMATION SectionInformation;
	/*0040*/ ULONG ExtendedFlags;
	/*0040*/ ULONG ImageExportSuppressionEnabled : 01; // 0x00000001;
	/*0040*/ ULONG ImageCetShadowStacksReady : 01; // 0x00000002;
	/*0040*/ ULONG ImageXfgEnabled : 01; // 0x00000004;
	/*0040*/ ULONG ImageCetShadowStacksStrictMode : 01; // 0x00000008;
	/*0040*/ ULONG ImageCetSetContextIpValidationRelaxedMode : 01; // 0x00000010;
	/*0040*/ ULONG ImageCetDynamicApisAllowInProc : 01; // 0x00000020;
	/*0040*/ ULONG ImageCetDowngradeReserved1 : 01; // 0x00000040;
	/*0040*/ ULONG ImageCetDowngradeReserved2 : 01; // 0x00000080;
	/*0040*/ ULONG Reserved : 24; // 0xffffff00;
	/*0048*/
};

enum _SECURE_SETTING_VALUE_TYPE {
	SecureSettingValueTypeBoolean = 0x0,
	SecureSettingValueTypeUlong = 0x1,
	SecureSettingValueTypeBinary = 0x2,
	SecureSettingValueTypeString = 0x3,
	SecureSettingValueTypeUnknown = 0x4
};

struct _SECURE_SPECULATION_CONTROL_INFORMATION {
	
	/*0000*/ <unnamed-type-SecureSpeculationFlags> SecureSpeculationFlags;
	/*0004*/
};

struct _SECURITY_ATTRIBUTES {
	/*0000*/ ULONG nLength;
	/*0008*/ void * lpSecurityDescriptor;
	/*0010*/ INT bInheritHandle;
	/*0018*/
};

struct _SECURITY_CAPABILITIES {
	/*0000*/ void * AppContainerSid;
	/*0008*/ _SID_AND_ATTRIBUTES * Capabilities;
	/*0010*/ ULONG CapabilityCount;
	/*0014*/ ULONG Reserved;
	/*0018*/
};

struct _SECURITY_DESCRIPTOR {
	/*0000*/ UCHAR Revision;
	/*0001*/ UCHAR Sbz1;
	/*0002*/ USHORT Control;
	/*0008*/ void * Owner;
	/*0010*/ void * Group;
	/*0018*/ _ACL * Sacl;
	/*0020*/ _ACL * Dacl;
	/*0028*/
};

struct _SECURITY_DESCRIPTOR_RELATIVE {
	/*0000*/ UCHAR Revision;
	/*0001*/ UCHAR Sbz1;
	/*0002*/ USHORT Control;
	/*0004*/ ULONG Owner;
	/*0008*/ ULONG Group;
	/*000c*/ ULONG Sacl;
	/*0010*/ ULONG Dacl;
	/*0014*/
};

enum _SECURITY_IMPERSONATION_LEVEL {
	SecurityAnonymous = 0x0,
	SecurityIdentification = 0x1,
	SecurityImpersonation = 0x2,
	SecurityDelegation = 0x3
};

struct _SECURITY_OBJECT_AI_PARAMS {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG ConstraintMask;
	/*0008*/
};

struct _SECURITY_QUALITY_OF_SERVICE {
	/*0000*/ ULONG Length;
	/*0004*/ _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	/*0008*/ UCHAR ContextTrackingMode;
	/*0009*/ UCHAR EffectiveOnly;
	/*000c*/
};

struct _SECURITY_SEED_AND_LENGTH {
	/*0000*/ UCHAR Length;
	/*0001*/ UCHAR Seed;
	/*0002*/
};

struct _SEC_WINNT_AUTH_IDENTITY_A {
	/*0000*/ UCHAR * User;
	/*0008*/ ULONG UserLength;
	/*0010*/ UCHAR * Domain;
	/*0018*/ ULONG DomainLength;
	/*0020*/ UCHAR * Password;
	/*0028*/ ULONG PasswordLength;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _SEC_WINNT_AUTH_IDENTITY_W {
	/*0000*/ WCHAR * User;
	/*0008*/ ULONG UserLength;
	/*0010*/ WCHAR * Domain;
	/*0018*/ ULONG DomainLength;
	/*0020*/ WCHAR * Password;
	/*0028*/ ULONG PasswordLength;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION {
	/*0000*/ ULONGLONG SegmentReserveSize;
	/*0008*/ ULONGLONG SegmentCommitSize;
	/*0010*/ ULONGLONG SegmentCount;
	/*0018*/ ULONGLONG AllocatedSize;
	/*0020*/ ULONGLONG LargeAllocReserveSize;
	/*0028*/ ULONGLONG LargeAllocCommitSize;
	/*0030*/
};

struct _SEMAPHORE_BASIC_INFORMATION {
	/*0000*/ LONG CurrentCount;
	/*0004*/ LONG MaximumCount;
	/*0008*/
};

enum _SEMAPHORE_INFORMATION_CLASS {
	SemaphoreBasicInformation = 0x0
};

struct _SERVERSILO_BASIC_INFORMATION {
	/*0000*/ ULONG ServiceSessionId;
	/*0004*/ _SERVERSILO_STATE State;
	/*0008*/ ULONG ExitStatus;
	/*000c*/ UCHAR IsDownlevelContainer;
	/*0010*/ void * ApiSetSchema;
	/*0018*/ void * HostApiSetSchema;
	/*0020*/
};

struct _SERVERSILO_INIT_INFORMATION {
	/*0000*/ void * DeleteEvent;
	/*0008*/ UCHAR IsDownlevelContainer;
	/*0010*/
};

enum _SERVERSILO_STATE {
	SERVERSILO_INITING = 0x0,
	SERVERSILO_STARTED = 0x1,
	SERVERSILO_SHUTTING_DOWN = 0x2,
	SERVERSILO_TERMINATING = 0x3,
	SERVERSILO_TERMINATED = 0x4
};

enum _SERVERXMLHTTP_OPTION {
	SXH_OPTION_URL = 0xffffffff,
	SXH_OPTION_URL_CODEPAGE = 0x0,
	SXH_OPTION_ESCAPE_PERCENT_IN_URL = 0x1,
	SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 0x2,
	SXH_OPTION_SELECT_CLIENT_SSL_CERT = 0x3
};

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
	/*0000*/ ULONG dwReason;
	/*0008*/ CHAR * pszComment;
	/*0010*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0038*/
};

struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
	/*0000*/ ULONG dwReason;
	/*0008*/ WCHAR * pszComment;
	/*0010*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0038*/
};

struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
	
	/*0000*/ <unnamed-type-u> u;
	/*0008*/
};

struct _SERVICE_DELAYED_AUTO_START_INFO {
	/*0000*/ INT fDelayedAutostart;
	/*0004*/
};

struct _SERVICE_DESCRIPTIONA {
	/*0000*/ CHAR * lpDescription;
	/*0008*/
};

struct _SERVICE_DESCRIPTIONW {
	/*0000*/ WCHAR * lpDescription;
	/*0008*/
};

struct _SERVICE_FAILURE_ACTIONSA {
	/*0000*/ ULONG dwResetPeriod;
	/*0008*/ CHAR * lpRebootMsg;
	/*0010*/ CHAR * lpCommand;
	/*0018*/ ULONG cActions;
	/*0020*/ _SC_ACTION * lpsaActions;
	/*0028*/
};

struct _SERVICE_FAILURE_ACTIONSW {
	/*0000*/ ULONG dwResetPeriod;
	/*0008*/ WCHAR * lpRebootMsg;
	/*0010*/ WCHAR * lpCommand;
	/*0018*/ ULONG cActions;
	/*0020*/ _SC_ACTION * lpsaActions;
	/*0028*/
};

struct _SERVICE_FAILURE_ACTIONS_FLAG {
	/*0000*/ INT fFailureActionsOnNonCrashFailures;
	/*0004*/
};

struct _SERVICE_LAUNCH_PROTECTED_INFO {
	/*0000*/ ULONG dwLaunchProtected;
	/*0004*/
};

struct _SERVICE_NOTIFY_1 {
	/*0000*/ ULONG dwVersion;
	/*0008*/ void (* pfnNotifyCallback)( void * );
	/*0010*/ void * pContext;
	/*0018*/ ULONG dwNotificationStatus;
	/*001c*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0040*/
};

struct _SERVICE_NOTIFY_2A {
	/*0000*/ ULONG dwVersion;
	/*0008*/ void (* pfnNotifyCallback)( void * );
	/*0010*/ void * pContext;
	/*0018*/ ULONG dwNotificationStatus;
	/*001c*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0040*/ ULONG dwNotificationTriggered;
	/*0048*/ CHAR * pszServiceNames;
	/*0050*/
};

struct _SERVICE_NOTIFY_2W {
	/*0000*/ ULONG dwVersion;
	/*0008*/ void (* pfnNotifyCallback)( void * );
	/*0010*/ void * pContext;
	/*0018*/ ULONG dwNotificationStatus;
	/*001c*/ _SERVICE_STATUS_PROCESS ServiceStatus;
	/*0040*/ ULONG dwNotificationTriggered;
	/*0048*/ WCHAR * pszServiceNames;
	/*0050*/
};

struct _SERVICE_PREFERRED_NODE_INFO {
	/*0000*/ USHORT usPreferredNode;
	/*0002*/ UCHAR fDelete;
	/*0004*/
};

struct _SERVICE_PRESHUTDOWN_INFO {
	/*0000*/ ULONG dwPreshutdownTimeout;
	/*0004*/
};

struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
	/*0000*/ CHAR * pmszRequiredPrivileges;
	/*0008*/
};

struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
	/*0000*/ WCHAR * pmszRequiredPrivileges;
	/*0008*/
};

struct _SERVICE_SID_INFO {
	/*0000*/ ULONG dwServiceSidType;
	/*0004*/
};

struct _SERVICE_START_REASON {
	/*0000*/ ULONG dwReason;
	/*0004*/
};

struct _SERVICE_STATUS {
	/*0000*/ ULONG dwServiceType;
	/*0004*/ ULONG dwCurrentState;
	/*0008*/ ULONG dwControlsAccepted;
	/*000c*/ ULONG dwWin32ExitCode;
	/*0010*/ ULONG dwServiceSpecificExitCode;
	/*0014*/ ULONG dwCheckPoint;
	/*0018*/ ULONG dwWaitHint;
	/*001c*/
};

struct _SERVICE_STATUS_PROCESS {
	/*0000*/ ULONG dwServiceType;
	/*0004*/ ULONG dwCurrentState;
	/*0008*/ ULONG dwControlsAccepted;
	/*000c*/ ULONG dwWin32ExitCode;
	/*0010*/ ULONG dwServiceSpecificExitCode;
	/*0014*/ ULONG dwCheckPoint;
	/*0018*/ ULONG dwWaitHint;
	/*001c*/ ULONG dwProcessId;
	/*0020*/ ULONG dwServiceFlags;
	/*0024*/
};

struct _SERVICE_TABLE_ENTRYA {
	/*0000*/ CHAR * lpServiceName;
	/*0008*/ void (* lpServiceProc)( ULONG , CHAR * * );
	/*0010*/
};

struct _SERVICE_TABLE_ENTRYW {
	/*0000*/ WCHAR * lpServiceName;
	/*0008*/ void (* lpServiceProc)( ULONG , WCHAR * * );
	/*0010*/
};

struct _SERVICE_TIMECHANGE_INFO {
	/*0000*/ _LARGE_INTEGER liNewTime;
	/*0008*/ _LARGE_INTEGER liOldTime;
	/*0010*/
};

struct _SERVICE_TRIGGER {
	/*0000*/ ULONG dwTriggerType;
	/*0004*/ ULONG dwAction;
	/*0008*/ _GUID * pTriggerSubtype;
	/*0010*/ ULONG cDataItems;
	/*0018*/ _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM * pDataItems;
	/*0020*/
};

struct _SERVICE_TRIGGER_INFO {
	/*0000*/ ULONG cTriggers;
	/*0008*/ _SERVICE_TRIGGER * pTriggers;
	/*0010*/ UCHAR * pReserved;
	/*0018*/
};

struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
	/*0000*/ ULONG dwDataType;
	/*0004*/ ULONG cbData;
	/*0008*/ UCHAR * pData;
	/*0010*/
};

struct _SETJMP_FLOAT128 {
	/*0000*/ ULONGLONG Part[0x2];
	/*0010*/
};

struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG AlignmentShift;
	/*0008*/ ULONGLONG FileOffsetToAlign;
	/*0010*/ ULONG FallbackAlignmentShift;
	/*0018*/
};

struct _SET_PURGE_FAILURE_MODE_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _SE_ACCESS_REPLY {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG ResultListCount;
	/*0008*/ ULONG * GrantedAccess;
	/*0010*/ ULONG * AccessStatus;
	/*0018*/ _ACCESS_REASONS * AccessReason;
	/*0020*/ _PRIVILEGE_SET * * Privileges;
	/*0028*/
};

struct _SE_ACCESS_REQUEST {
	/*0000*/ ULONG Size;
	/*0008*/ _SE_SECURITY_DESCRIPTOR * SeSecurityDescriptor;
	/*0010*/ ULONG DesiredAccess;
	/*0014*/ ULONG PreviouslyGrantedAccess;
	/*0018*/ void * PrincipalSelfSid;
	/*0020*/ _GENERIC_MAPPING * GenericMapping;
	/*0028*/ ULONG ObjectTypeListCount;
	/*0030*/ _OBJECT_TYPE_LIST * ObjectTypeList;
	/*0038*/
};

struct _SE_AUDIT_INFO {
	/*0000*/ ULONG Size;
	/*0004*/ _AUDIT_EVENT_TYPE AuditType;
	/*0008*/ _SE_AUDIT_OPERATION AuditOperation;
	/*000c*/ ULONG AuditFlags;
	/*0010*/ _UNICODE_STRING SubsystemName;
	/*0020*/ _UNICODE_STRING ObjectTypeName;
	/*0030*/ _UNICODE_STRING ObjectName;
	/*0040*/ void * HandleId;
	/*0048*/ _GUID * TransactionId;
	/*0050*/ _LUID * OperationId;
	/*0058*/ UCHAR ObjectCreation;
	/*0059*/ UCHAR GenerateOnClose;
	/*0060*/
};

enum _SE_AUDIT_OPERATION {
	AuditPrivilegeObject = 0x0,
	AuditPrivilegeService = 0x1,
	AuditAccessCheck = 0x2,
	AuditOpenObject = 0x3,
	AuditOpenObjectWithTransaction = 0x4,
	AuditCloseObject = 0x5,
	AuditDeleteObject = 0x6,
	AuditOpenObjectForDelete = 0x7,
	AuditOpenObjectForDeleteWithTransaction = 0x8,
	AuditCloseNonObject = 0x9,
	AuditOpenNonObject = 0xa,
	AuditObjectReference = 0xb,
	AuditHandleCreation = 0xc
};

enum _SE_IMAGE_SIGNATURE_TYPE {
	SeImageSignatureNone = 0x0,
	SeImageSignatureEmbedded = 0x1,
	SeImageSignatureCache = 0x2,
	SeImageSignatureCatalogCached = 0x3,
	SeImageSignatureCatalogNotCached = 0x4,
	SeImageSignatureCatalogHint = 0x5,
	SeImageSignaturePackageCatalog = 0x6
};

struct _SE_IMPERSONATION_STATE {
	/*0000*/ void * Token;
	/*0008*/ UCHAR CopyOnOpen;
	/*0009*/ UCHAR EffectiveOnly;
	/*000c*/ _SECURITY_IMPERSONATION_LEVEL Level;
	/*0010*/
};

enum _SE_LEARNING_MODE_DATA_TYPE {
	SeLearningModeInvalidType = 0x0,
	SeLearningModeSettings = 0x1,
	SeLearningModeMax = 0x2
};

struct _SE_LEARNING_MODE_USER_OBJECT_DATA {
	/*0000*/ ULONG Cookie;
	/*0008*/ _UNICODE_STRING * ObjectType;
	/*0010*/ _UNICODE_STRING * ObjectName;
	/*0018*/
};

struct _SE_PACKAGE_CAPABILITY_INFO {
	/*0000*/ ULONG Remaining;
	/*0004*/ ULONG PackageGrantedAccess;
	/*0008*/ ULONG CapabilityGrantedAccess;
	/*000c*/ ULONG UserGroupsRemaining;
	/*0010*/ ULONG AllAppPackagesSkippedAccess;
	/*0014*/ UCHAR PackagesPresent;
	/*0015*/ UCHAR PackageMatch;
	/*0016*/ UCHAR CapabilityMatch;
	/*0017*/ UCHAR LogPermissiveFailure;
	/*0018*/ UCHAR AllAppPackagesSkipped;
	/*001c*/
};

struct _SE_SECURITY_DESCRIPTOR {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG Flags;
	/*0008*/ void * SecurityDescriptor;
	/*0010*/
};

struct _SE_SET_FILE_CACHE_INFORMATION {
	/*0000*/ ULONG Size;
	/*0008*/ _UNICODE_STRING CatalogDirectoryPath;
	/*0018*/
};

union _SE_SID {
	/*0000*/ _SID Sid;
	/*0000*/ UCHAR Buffer[0x44];
	/*0044*/
};

struct _SE_TOKEN_USER {
	/*0000*/ _TOKEN_USER TokenUser;
	/*0000*/ _SID_AND_ATTRIBUTES User;
	/*0010*/ _SID Sid;
	/*0010*/ UCHAR Buffer[0x44];
	/*0058*/
};

enum _SE_VALIDATE_MAPPING_TYPE {
	SE_VALIDATE_MAPPING_HEADER_ONLY = 0x0,
	SE_VALIDATE_MAPPING_ENTIRE_IMAGE = 0x1,
	SE_VALIDATE_MAPPING_ENTIRE_IMAGE_CLEAN = 0x2
};

struct _SExistRestriction {
	/*0000*/ ULONG ulReserved1;
	/*0004*/ ULONG ulPropTag;
	/*0008*/ ULONG ulReserved2;
	/*000c*/
};

struct _SGuidArray {
	/*0000*/ ULONG cValues;
	/*0008*/ _GUID * lpguid;
	/*0010*/
};

struct _SHARED_VIRTUAL_DISK_SUPPORT {
	/*0000*/ _SharedVirtualDiskSupportType SharedVirtualDiskSupport;
	/*0004*/ _SharedVirtualDiskHandleState HandleState;
	/*0008*/
};

enum _SHARE_ITEM_TYPE {
	SIT_FILE = 0x0,
	SIT_FOLDER = 0x1,
	SIT_DRIVE = 0x2,
	SIT_LIBRARY = 0x3,
	SIT_UNSUPPORTED = 0x4
};

enum _SHCONTF {
	SHCONTF_CHECKING_FOR_CHILDREN = 0x10,
	SHCONTF_FOLDERS = 0x20,
	SHCONTF_NONFOLDERS = 0x40,
	SHCONTF_INCLUDEHIDDEN = 0x80,
	SHCONTF_INIT_ON_FIRST_NEXT = 0x100,
	SHCONTF_NETPRINTERSRCH = 0x200,
	SHCONTF_SHAREABLE = 0x400,
	SHCONTF_STORAGE = 0x800,
	SHCONTF_NAVIGATION_ENUM = 0x1000,
	SHCONTF_FASTITEMS = 0x2000,
	SHCONTF_FLATLIST = 0x4000,
	SHCONTF_ENABLE_ASYNC = 0x8000,
	SHCONTF_INCLUDESUPERHIDDEN = 0x10000
};

struct _SHELLDETAILS {
	/*0000*/ INT fmt;
	/*0004*/ INT cxChar;
	/*0008*/ _STRRET str;
	/*0118*/
};

struct _SHELLEXECUTEINFOW;

enum _SHELLKEY {
	SHELLKEY_HKCU_EXPLORER = 0x1,
	SHELLKEY_HKLM_EXPLORER = 0x2,
	SHELLKEY_HKCU_SHELL = 0x11,
	SHELLKEY_HKLM_SHELL = 0x12,
	SHELLKEY_HKCU_SHELLNOROAM = 0x21,
	SHELLKEY_HKCULM_MUICACHE = 0x5021,
	SHELLKEY_HKCU_FILEEXTS = 0x6001,
	SHELLKEY_HKCULS_SHELL = 0x1ffff
};

struct _SHFILEINFOA {
	/*0000*/ HICON__ * hIcon;
	/*0008*/ INT iIcon;
	/*000c*/ ULONG dwAttributes;
	/*0010*/ CHAR szDisplayName[0x104];
	/*0114*/ CHAR szTypeName[0x50];
	/*0168*/
};

struct _SHFILEINFOW {
	/*0000*/ HICON__ * hIcon;
	/*0008*/ INT iIcon;
	/*000c*/ ULONG dwAttributes;
	/*0010*/ WCHAR szDisplayName[0x104];
	/*0218*/ WCHAR szTypeName[0x50];
	/*02b8*/
};

struct _SHFILEOPSTRUCTW;

enum _SHGDNF {
	SHGDN_NORMAL = 0x0,
	SHGDN_INFOLDER = 0x1,
	SHGDN_FOREDITING = 0x1000,
	SHGDN_FORADDRESSBAR = 0x4000,
	SHGDN_FORPARSING = 0x8000
};

struct _SHITEMID {
	/*0000*/ USHORT cb;
	/*0002*/ UCHAR abID[0x1];
	/*0003*/
};

struct _SHORT_SIZEDARR {
	/*0000*/ ULONG clSize;
	/*0008*/ WCHAR * pData;
	/*0010*/
};

struct _SHRINK_VOLUME_INFORMATION {
	/*0000*/ _SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
	/*0008*/ ULONGLONG Flags;
	/*0010*/ LONGLONG NewNumberOfSectors;
	/*0018*/
};

enum _SHRINK_VOLUME_REQUEST_TYPES {
	ShrinkPrepare = 0x1,
	ShrinkCommit = 0x2,
	ShrinkAbort = 0x3
};

struct _SHUFFLE_FILE_DATA {
	/*0000*/ LONGLONG StartingOffset;
	/*0008*/ LONGLONG Length;
	/*0010*/ ULONG Flags;
	/*0018*/
};

enum _SHUTDOWN_ACTION {
	ShutdownNoReboot = 0x0,
	ShutdownReboot = 0x1,
	ShutdownPowerOff = 0x2,
	ShutdownRebootForRecovery = 0x3
};

enum _SICHINTF {
	SICHINT_DISPLAY = 0x0,
	SICHINT_ALLFIELDS = 0x80000000,
	SICHINT_CANONICAL = 0x10000000,
	SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL = 0x20000000
};

struct _SID {
	/*0000*/ UCHAR Revision;
	/*0001*/ UCHAR SubAuthorityCount;
	/*0002*/ _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
	/*0008*/ ULONG SubAuthority[0x1];
	/*000c*/
};

struct _SID_AND_ATTRIBUTES {
	/*0000*/ void * Sid;
	/*0008*/ ULONG Attributes;
	/*0010*/
};

struct _SID_AND_ATTRIBUTES_HASH {
	/*0000*/ ULONG SidCount;
	/*0008*/ _SID_AND_ATTRIBUTES * SidAttr;
	/*0010*/ ULONGLONG Hash[0x20];
	/*0110*/
};

struct _SID_IDENTIFIER_AUTHORITY {
	/*0000*/ UCHAR Value[0x6];
	/*0006*/
};

enum _SID_NAME_USE {
	SidTypeUser = 0x1,
	SidTypeGroup = 0x2,
	SidTypeDomain = 0x3,
	SidTypeAlias = 0x4,
	SidTypeWellKnownGroup = 0x5,
	SidTypeDeletedAccount = 0x6,
	SidTypeInvalid = 0x7,
	SidTypeUnknown = 0x8,
	SidTypeComputer = 0x9,
	SidTypeLabel = 0xa,
	SidTypeLogonSession = 0xb
};

enum _SIGDN {
	SIGDN_NORMALDISPLAY = 0x0,
	SIGDN_PARENTRELATIVEPARSING = 0x80018001,
	SIGDN_DESKTOPABSOLUTEPARSING = 0x80028000,
	SIGDN_PARENTRELATIVEEDITING = 0x80031001,
	SIGDN_DESKTOPABSOLUTEEDITING = 0x8004c000,
	SIGDN_FILESYSPATH = 0x80058000,
	SIGDN_URL = 0x80068000,
	SIGDN_PARENTRELATIVEFORADDRESSBAR = 0x8007c001,
	SIGDN_PARENTRELATIVE = 0x80080001,
	SIGDN_PARENTRELATIVEFORUI = 0x80094001
};

enum _SIIGBF {
	SIIGBF_RESIZETOFIT = 0x0,
	SIIGBF_BIGGERSIZEOK = 0x1,
	SIIGBF_MEMORYONLY = 0x2,
	SIIGBF_ICONONLY = 0x4,
	SIIGBF_THUMBNAILONLY = 0x8,
	SIIGBF_INCACHEONLY = 0x10,
	SIIGBF_CROPTOSQUARE = 0x20,
	SIIGBF_WIDETHUMBNAILS = 0x40,
	SIIGBF_ICONBACKGROUND = 0x80,
	SIIGBF_SCALEUP = 0x100
};

struct _SILOOBJECT_BASIC_INFORMATION {
	/*0000*/ ULONG SiloId;
	/*0004*/ ULONG SiloParentId;
	/*0008*/ ULONG NumberOfProcesses;
	/*000c*/ UCHAR IsInServerSilo;
	/*000d*/ UCHAR Reserved[0x3];
	/*0010*/
};

struct _SILOOBJECT_ROOT_DIRECTORY {
	/*0000*/ ULONG ControlFlags;
	/*0000*/ _UNICODE_STRING Path;
	/*0010*/
};

struct _SILO_USER_SHARED_DATA {
	/*0000*/ ULONG ServiceSessionId;
	/*0004*/ ULONG ActiveConsoleId;
	/*0008*/ LONGLONG ConsoleSessionForegroundProcessId;
	/*0010*/ _NT_PRODUCT_TYPE NtProductType;
	/*0014*/ ULONG SuiteMask;
	/*0018*/ ULONG SharedUserSessionId;
	/*001c*/ UCHAR IsMultiSessionSku;
	/*001e*/ WCHAR NtSystemRoot[0x104];
	/*0226*/ USHORT UserModeGlobalLogger[0x10];
	/*0248*/
};

struct _SINGLE_LIST_ENTRY {
	/*0000*/ _SINGLE_LIST_ENTRY * Next;
	/*0008*/
};

struct _SINGLE_LIST_ENTRY32 {
	/*0000*/ ULONG Next;
	/*0004*/
};

struct _SI_COPYFILE {
	/*0000*/ ULONG SourceFileNameLength;
	/*0004*/ ULONG DestinationFileNameLength;
	/*0008*/ ULONG Flags;
	/*000c*/ WCHAR FileNameBuffer[0x1];
	/*0010*/
};

struct _SLIST_ENTRY {
	/*0000*/ _SLIST_ENTRY * Next;
	/*0010*/
};

union _SLIST_HEADER {
	
	/*0000*/ ULONGLONG Alignment;
	/*0008*/ ULONGLONG Region;
	/*0000*/ <unnamed-type-HeaderX64> HeaderX64;
	/*0010*/
};

struct _SLPSTRArray {
	/*0000*/ ULONG cValues;
	/*0008*/ CHAR * * lppszA;
	/*0010*/
};

struct _SL_APPX_CACHE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG DataSize;
	/*0010*/ ULONGLONG DataCheckSum;
	/*0018*/ _SL_APPX_CACHE_VALUE_DESCRIPTOR Descriptors[0x1];
	/*0048*/
};

struct _SL_APPX_CACHE_VALUE_DESCRIPTOR {
	/*0000*/ UCHAR HashedName[0x20];
	/*0020*/ ULONGLONG Expiration;
	/*0028*/ ULONG DataSize;
	/*002c*/ UCHAR Data[0x1];
	/*0030*/
};

enum _SL_GENUINE_STATE {
	SL_GEN_STATE_IS_GENUINE = 0x0,
	SL_GEN_STATE_INVALID_LICENSE = 0x1,
	SL_GEN_STATE_TAMPERED = 0x2,
	SL_GEN_STATE_OFFLINE = 0x3,
	SL_GEN_STATE_LAST = 0x4
};

struct _SL_HWID_DEVICE_INFO {
	/*0000*/ ULONG SizeBytes;
	/*0004*/ UCHAR Type;
	/*0005*/ UCHAR DeviceRemovalPolicy;
	/*0006*/ UCHAR AuthenticationStatus;
	/*0007*/ UCHAR Disposition;
	/*0008*/ ULONG DeviceNodeLevel;
	/*000c*/ _GUID Guid;
	/*001c*/ UCHAR Data[0x1];
	/*0020*/
};

struct _SL_KMEM_CACHE {
	/*0000*/ ULONG TotalSize;
	/*0004*/ ULONG SizeOfData;
	/*0008*/ ULONG SignatureSize;
	/*000c*/ ULONG Flags;
	/*0010*/ ULONG Version;
	/*0014*/ _SL_KMEM_CACHE_VALUE_DESCRIPTOR Descriptors[0x1];
	/*0028*/
};

struct _SL_KMEM_CACHE_VALUE_DESCRIPTOR {
	/*0000*/ USHORT Size;
	/*0002*/ USHORT NameLength;
	/*0004*/ USHORT Type;
	/*0006*/ USHORT DataLength;
	/*0008*/ ULONG Attributes;
	/*000c*/ ULONG Reserved;
	/*0010*/ WCHAR Name[0x1];
	/*0014*/
};

struct _SLargeIntegerArray {
	/*0000*/ ULONG cValues;
	/*0008*/ _LARGE_INTEGER * lpli;
	/*0010*/
};

struct _SLongArray {
	/*0000*/ ULONG cValues;
	/*0008*/ LONG * lpl;
	/*0010*/
};

struct _SMALL_RECT {
	/*0000*/ SHORT Left;
	/*0002*/ SHORT Top;
	/*0004*/ SHORT Right;
	/*0006*/ SHORT Bottom;
	/*0008*/
};

struct _SNotRestriction {
	/*0000*/ ULONG ulReserved;
	/*0008*/ _SRestriction * lpRes;
	/*0010*/
};

union _SOCKADDR_INET {
	/*0000*/ sockaddr_in Ipv4;
	/*0000*/ sockaddr_in6 Ipv6;
	/*0000*/ USHORT si_family;
	/*001c*/
};

struct _SOCKET_ADDRESS {
	/*0000*/ sockaddr * lpSockaddr;
	/*0008*/ INT iSockaddrLength;
	/*0010*/
};

struct _SOCKET_ADDRESS_LIST {
	/*0000*/ INT iAddressCount;
	/*0008*/ _SOCKET_ADDRESS Address[0x1];
	/*0018*/
};

struct _SOCKET_PROCESSOR_AFFINITY {
	/*0000*/ _PROCESSOR_NUMBER Processor;
	/*0004*/ USHORT NumaNodeId;
	/*0006*/ USHORT Reserved;
	/*0008*/
};

enum _SOMITEMTYPE {
	SOMITEM_SCHEMA = 0x1000,
	SOMITEM_ATTRIBUTE = 0x1001,
	SOMITEM_ATTRIBUTEGROUP = 0x1002,
	SOMITEM_NOTATION = 0x1003,
	SOMITEM_ANNOTATION = 0x1004,
	SOMITEM_IDENTITYCONSTRAINT = 0x1100,
	SOMITEM_KEY = 0x1101,
	SOMITEM_KEYREF = 0x1102,
	SOMITEM_UNIQUE = 0x1103,
	SOMITEM_ANYTYPE = 0x2000,
	SOMITEM_DATATYPE = 0x2100,
	SOMITEM_DATATYPE_ANYTYPE = 0x2101,
	SOMITEM_DATATYPE_ANYURI = 0x2102,
	SOMITEM_DATATYPE_BASE64BINARY = 0x2103,
	SOMITEM_DATATYPE_BOOLEAN = 0x2104,
	SOMITEM_DATATYPE_BYTE = 0x2105,
	SOMITEM_DATATYPE_DATE = 0x2106,
	SOMITEM_DATATYPE_DATETIME = 0x2107,
	SOMITEM_DATATYPE_DAY = 0x2108,
	SOMITEM_DATATYPE_DECIMAL = 0x2109,
	SOMITEM_DATATYPE_DOUBLE = 0x210a,
	SOMITEM_DATATYPE_DURATION = 0x210b,
	SOMITEM_DATATYPE_ENTITIES = 0x210c,
	SOMITEM_DATATYPE_ENTITY = 0x210d,
	SOMITEM_DATATYPE_FLOAT = 0x210e,
	SOMITEM_DATATYPE_HEXBINARY = 0x210f,
	SOMITEM_DATATYPE_ID = 0x2110,
	SOMITEM_DATATYPE_IDREF = 0x2111,
	SOMITEM_DATATYPE_IDREFS = 0x2112,
	SOMITEM_DATATYPE_INT = 0x2113,
	SOMITEM_DATATYPE_INTEGER = 0x2114,
	SOMITEM_DATATYPE_LANGUAGE = 0x2115,
	SOMITEM_DATATYPE_LONG = 0x2116,
	SOMITEM_DATATYPE_MONTH = 0x2117,
	SOMITEM_DATATYPE_MONTHDAY = 0x2118,
	SOMITEM_DATATYPE_NAME = 0x2119,
	SOMITEM_DATATYPE_NCNAME = 0x211a,
	SOMITEM_DATATYPE_NEGATIVEINTEGER = 0x211b,
	SOMITEM_DATATYPE_NMTOKEN = 0x211c,
	SOMITEM_DATATYPE_NMTOKENS = 0x211d,
	SOMITEM_DATATYPE_NONNEGATIVEINTEGER = 0x211e,
	SOMITEM_DATATYPE_NONPOSITIVEINTEGER = 0x211f,
	SOMITEM_DATATYPE_NORMALIZEDSTRING = 0x2120,
	SOMITEM_DATATYPE_NOTATION = 0x2121,
	SOMITEM_DATATYPE_POSITIVEINTEGER = 0x2122,
	SOMITEM_DATATYPE_QNAME = 0x2123,
	SOMITEM_DATATYPE_SHORT = 0x2124,
	SOMITEM_DATATYPE_STRING = 0x2125,
	SOMITEM_DATATYPE_TIME = 0x2126,
	SOMITEM_DATATYPE_TOKEN = 0x2127,
	SOMITEM_DATATYPE_UNSIGNEDBYTE = 0x2128,
	SOMITEM_DATATYPE_UNSIGNEDINT = 0x2129,
	SOMITEM_DATATYPE_UNSIGNEDLONG = 0x212a,
	SOMITEM_DATATYPE_UNSIGNEDSHORT = 0x212b,
	SOMITEM_DATATYPE_YEAR = 0x212c,
	SOMITEM_DATATYPE_YEARMONTH = 0x212d,
	SOMITEM_DATATYPE_ANYSIMPLETYPE = 0x21ff,
	SOMITEM_SIMPLETYPE = 0x2200,
	SOMITEM_COMPLEXTYPE = 0x2400,
	SOMITEM_PARTICLE = 0x4000,
	SOMITEM_ANY = 0x4001,
	SOMITEM_ANYATTRIBUTE = 0x4002,
	SOMITEM_ELEMENT = 0x4003,
	SOMITEM_GROUP = 0x4100,
	SOMITEM_ALL = 0x4101,
	SOMITEM_CHOICE = 0x4102,
	SOMITEM_SEQUENCE = 0x4103,
	SOMITEM_EMPTYPARTICLE = 0x4104,
	SOMITEM_NULL = 0x800,
	SOMITEM_NULL_TYPE = 0x2800,
	SOMITEM_NULL_ANY = 0x4801,
	SOMITEM_NULL_ANYATTRIBUTE = 0x4802,
	SOMITEM_NULL_ELEMENT = 0x4803
};

struct _SOrRestriction {
	/*0000*/ ULONG cRes;
	/*0008*/ _SRestriction * lpRes;
	/*0010*/
};

enum _SPACTION {
	SPACTION_NONE = 0x0,
	SPACTION_MOVING = 0x1,
	SPACTION_COPYING = 0x2,
	SPACTION_RECYCLING = 0x3,
	SPACTION_APPLYINGATTRIBS = 0x4,
	SPACTION_DOWNLOADING = 0x5,
	SPACTION_SEARCHING_INTERNET = 0x6,
	SPACTION_CALCULATING = 0x7,
	SPACTION_UPLOADING = 0x8,
	SPACTION_SEARCHING_FILES = 0x9,
	SPACTION_DELETING = 0xa,
	SPACTION_RENAMING = 0xb,
	SPACTION_FORMATTING = 0xc,
	SPACTION_COPY_MOVING = 0xd
};

struct _SPARSE_OVERALLOCATE_DATA {
	/*0000*/ ULONG SparseOverAllocateSize;
	/*0004*/
};

enum _SPBEGINF {
	SPBEGINF_NORMAL = 0x0,
	SPBEGINF_AUTOTIME = 0x2,
	SPBEGINF_NOPROGRESSBAR = 0x10,
	SPBEGINF_MARQUEEPROGRESS = 0x20,
	SPBEGINF_NOCANCELBUTTON = 0x40
};

enum _SPCALL2ID {
	SPCALL2_QUERY_POLICY = 0x0,
	SPCALL2_UPDATE_POLICIES = 0x1,
	SPCALL2_AUTHENTICATE_CALLER = 0x2,
	SPCALL2_PAINT_SECOND_START = 0x3,
	SPCALL2_PAINT_FINISH_CALLBACK = 0x4,
	SPCALL2_DISPLAY_WINDOW = 0x5,
	SPCALL2_DISPLAY_BUTTON = 0x6,
	SPCALL2_LAST_NOTIFICATION_TIME_RESET = 0x7,
	SPCALL2_GET_PACKAGE_ORIGIN = 0x13,
	SPCALL2_UPDATE_PACKAGE_ORIGIN = 0x14,
	SPCALL2_GET_APP_ORIGIN = 0x15,
	SPCALL2_QUERY_FILE_USN = 0x16,
	SPCALL2_UPDATE_FILE_INTEGRITY = 0x17,
	SPCALL2_QUERY_FILE_INTEGRITY = 0x18,
	SPCALL2_TEST_HOOK_SHOW_UI_FOR_POLICY = 0x1e,
	SPCALL2_TEST_HOOK_CLEAR_ALL = 0x1f,
	SPCALL2_TEST_HOOK_SET_KDP_THROTTLE_OVERRIDE = 0x20,
	SPCALL2_TEST_HOOK_GET_LAST_VERIFICATION_TIME = 0x21,
	SPCALL2_TEST_HOOK_TAMPER_KERNEL_CACHE_CHECKSUM = 0x22,
	SPCALL2_TEST_HOOK_TAMPER_KERNEL_CACHE_LICENSE_STATUS = 0x23,
	SPCALL2_TEST_HOOK_GET_LICENSE_TAMPER_STATUS = 0x24,
	SPCALL2_TEST_HOOK_SET_UI_TYPE = 0x25,
	SPCALL2_UTEST_HOOK_CLEAR = 0x32,
	SPCALL2_UTEST_HOOK_APPEND_OUT_PARAM = 0x33,
	SPCALL2_UTEST_HOOK_ALLOCATE_BUFFER = 0x34,
	SPCALL2_UTEST_HOOK_ENCRYPT_BUFFER = 0x35,
	SPCALL2_UTEST_HOOK_DECRYPT_BUFFER = 0x36,
	SPCALL2_UTEST_HOOK_GENERATE_NONCE = 0x37,
	SPCALL2_UTEST_HOOK_SET_NOTIMPL = 0x38,
	SPCALL2_UTEST_HOOK_UNSET_NOTIMPL = 0x39,
	SPCALL2_UTEST_HOOK_GET_TICKCOUNT = 0x3a,
	SPCALL2_UTEST_HOOK_UPDATE_CHECKSUM = 0x3b,
	SPCALL2_UTEST_HOOK_ENCRYPT_POINTER = 0x3c,
	SPCALL2_UTEST_HOOK_DECRYPT_POINTER = 0x3d,
	SPCALL2_UTEST_HOOK_SET_FAKE_TIME = 0x3e,
	SPCALL2_UTEST_HOOK_CLEAR_FAKE_TIME = 0x3f,
	SPCALL2_UPDATE_LICENSE = 0x64,
	SPCALL2_REMOVE_LICENSE = 0x65,
	SPCALL2_INITIALIZE = 0x66,
	SPCALL2_CREATE_LICENSE_EFS_HEADER = 0x67,
	SPCALL2_LICENSE_EFS_HEADER_CONTAINS_FEK = 0x68,
	SPCALL2_GET_LICENSE_CHALLENGE = 0x69,
	SPCALL2_GET_BASE_CONTENT_KEY_FROM_LICENSE = 0x6a,
	SPCALL2_GET_BASE_CONTENT_KEY_FROM_KEYID = 0x6b,
	SPCALL2_RESERVED_108 = 0x6c,
	SPCALL2_IS_APP_LICENSED = 0x6d,
	SPCALL2_DUMP_LICENSE_GROUP = 0x6e,
	SPCALL2_CLEAR_LICENSE_STORE = 0x6f,
	SPCALL2_CLEP_SIGN = 0x70,
	SPCALL2_CLEP_KDF = 0x71,
	SPCALL2_RESERVED_DONTUSE = 0xc8,
	SPCALL2_SET_APP_SIGNATURE_ORIGIN = 0xc9,
	SPCALL2_GET_APP_PACKAGE_ORIGIN = 0xca,
	SPCALL2_HAS_DEVELOPER_LICENSE = 0xcb,
	SPCALL2_UPDATE_OSPFN_POLICYSET = 0xcc,
	SPCALL2_CHECK_LICENSE = 0xcd,
	SPCALL2_GET_CURRENT_HARDWARE_ID = 0xce,
	SPCALL2_CREATE_LICENSE_KEYID_EFS_HEADER = 0xcf,
	SPCALL2_GET_APP_POLICY_VALUE = 0xd0,
	SPCALL2_QUERY_CACHED_OPTIONAL_INFO = 0xd1,
	SPCALL2_AC_REQUEST = 0xd2,
	SPCALL2_AC_HMAC = 0xd3,
	LAST_SPCALLID = 0xd4
};

enum _SPINITF {
	SPINITF_NORMAL = 0x0,
	SPINITF_MODAL = 0x1,
	SPINITF_NOMINIMIZE = 0x8
};

enum _SPTEXT {
	SPTEXT_ACTIONDESCRIPTION = 0x1,
	SPTEXT_ACTIONDETAIL = 0x2
};

struct _SPropProblem {
	/*0000*/ ULONG ulIndex;
	/*0004*/ ULONG ulPropTag;
	/*0008*/ LONG scode;
	/*000c*/
};

struct _SPropProblemArray {
	/*0000*/ ULONG cProblem;
	/*0004*/ _SPropProblem aProblem[0x1];
	/*0010*/
};

struct _SPropTagArray {
	/*0000*/ ULONG cValues;
	/*0004*/ ULONG aulPropTag[0x1];
	/*0008*/
};

struct _SPropValue {
	/*0000*/ ULONG ulPropTag;
	/*0004*/ ULONG dwAlignPad;
	/*0008*/ _PV Value;
	/*0018*/
};

struct _SPropertyRestriction {
	/*0000*/ ULONG relop;
	/*0004*/ ULONG ulPropTag;
	/*0008*/ _SPropValue * lpProp;
	/*0010*/
};

struct _SQM_STREAM_ENTRY {
	
	/*0000*/ ULONG dwType;
	/*0008*/ <unnamed-type-val> val;
	/*0010*/
};

struct _SQM_STREAM_ENTRY_EX {
	
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG dwType;
	/*0008*/ <unnamed-type-val> val;
	/*0010*/
};

enum _SQM_TYPE {
	SQM_TYPE_NONE = 0x0,
	SQM_TYPE_DWORD = 0x1,
	SQM_TYPE_STRING = 0x2,
	SQM_TYPE_DWORD64 = 0x3
};

struct _SRU_APPID {
	
	/*0000*/ _SRU_APPID_TYPE AppIdType;
	/*0008*/ <unnamed-type-AppId> AppId;
	/*0010*/
};

enum _SRU_APPID_TYPE {
	SruAppIdExePath = 0x0,
	SruAppIdSvcName = 0x1,
	SruAppIdPkgName = 0x2,
	SruAppIdPlaceHolderUserSid = 0x3,
	SruAppIdProviderDefined = 0x4
};

struct _SRU_BINARY_DATA {
	/*0000*/ ULONGLONG DataLength;
	/*0008*/ UCHAR * Data;
	/*0010*/
};

union _SRU_ENERGY_RECORD_STATE {
	/*0000*/ UCHAR PowerSourceBattery : 01; // 0x01;
	/*0000*/ UCHAR MonitorPowerOn : 01; // 0x02;
	/*0000*/ UCHAR EnergySaverActive : 01; // 0x04;
	/*0000*/ UCHAR LowPowerEpochActive : 01; // 0x08;
	/*0000*/ UCHAR Reserved1 : 04; // 0xf0;
	/*0000*/ UCHAR PowerState;
	/*0001*/ UCHAR Reserved2;
	/*0002*/ UCHAR Foreground : 01; // 0x01;
	/*0002*/ UCHAR Reserved3 : 03; // 0x0e;
	/*0002*/ UCHAR InteractivityState : 04; // 0xf0;
	/*0002*/ UCHAR ApplicationState;
	/*0003*/ UCHAR Reserved4;
	/*0000*/ ULONG Data;
	/*0004*/
};

enum _SRU_PROVIDER_CLASS {
	SruProviderClassNetwork = 0x0,
	SruProviderClassCpu = 0x1,
	SruProviderClassNotification = 0x2,
	SruProviderClassClassicApp = 0x3,
	SruProviderClassEnergy = 0x4,
	SruProviderClassNetworkConnectivity = 0x5,
	SruProviderClassBatterySense = 0x6,
	SruProviderClassEnergyEstimation = 0x7,
	SruProviderClassTaggedEnergy = 0x8,
	SruProviderClassAppTimeline = 0x9,
	SruProviderClassVelocityFeature = 0xa,
	SruProviderClassSdpCpu = 0xb,
	SruProviderClassSdpEventLog = 0xc,
	SruProviderClassSdpNetwork = 0xd,
	SruProviderClassSdpPerfCounter = 0xe,
	SruProviderClassSdpPhysicalDisk = 0xf,
	SruProviderClassSdpVolume = 0x10,
	SruProviderClassMax = 0x11
};

struct _SRU_SEQ_NUMBER {
	/*0000*/ ULONG Part1;
	/*0004*/ ULONG Part2;
	/*0008*/ ULONG Part3;
	/*000c*/ ULONG Part4;
	/*0010*/
};

struct _SRU_SID {
	/*0000*/ ULONGLONG Size;
	/*0008*/ void * Sid;
	/*0010*/
};

struct _SRU_STATS_COLUMN {
	
	/*0000*/ USHORT ColId;
	/*0004*/ _SRU_STATS_COLUMN_TYPE ColType;
	/*0008*/ <unnamed-type-ColData> ColData;
	/*0018*/
};

enum _SRU_STATS_COLUMN_TYPE {
	SruColTypeULong = 0x0,
	SruColTypeULong64 = 0x1,
	SruColTypeString = 0x2,
	SruColTypeBinary = 0x3,
	SruColTypeTimeStamp = 0x4
};

struct _SRU_STATS_RECORD {
	/*0000*/ _SYSTEMTIME TimeStamp;
	/*0010*/ _SRU_APPID AppId;
	/*0020*/ _SRU_SID UserId;
	/*0030*/ USHORT ColCount;
	/*0038*/ _SRU_STATS_COLUMN * Columns;
	/*0040*/
};

struct _SRU_STATS_RECORD_SET {
	/*0000*/ ULONG RecordCount;
	/*0008*/ _SRU_STATS_RECORD * RecordList;
	/*0010*/
};

struct _SRealArray {
	/*0000*/ ULONG cValues;
	/*0008*/ float * lpflt;
	/*0010*/
};

struct _SRestriction {
	
	/*0000*/ ULONG rt;
	/*0008*/ <unnamed-type-res> res;
	/*0020*/
};

struct _SRow {
	/*0000*/ ULONG ulAdrEntryPad;
	/*0004*/ ULONG cValues;
	/*0008*/ _SPropValue * lpProps;
	/*0010*/
};

struct _SRowSet {
	/*0000*/ ULONG cRows;
	/*0008*/ _SRow aRow[0x1];
	/*0018*/
};

struct _SShortArray {
	/*0000*/ ULONG cValues;
	/*0008*/ SHORT * lpi;
	/*0010*/
};

struct _SSizeRestriction {
	/*0000*/ ULONG relop;
	/*0004*/ ULONG ulPropTag;
	/*0008*/ ULONG cb;
	/*000c*/
};

struct _SSortOrder {
	/*0000*/ ULONG ulPropTag;
	/*0004*/ ULONG ulOrder;
	/*0008*/
};

struct _SSortOrderSet {
	/*0000*/ ULONG cSorts;
	/*0004*/ ULONG cCategories;
	/*0008*/ ULONG cExpanded;
	/*000c*/ _SSortOrder aSort[0x1];
	/*0014*/
};

struct _SSubRestriction {
	/*0000*/ ULONG ulSubObject;
	/*0008*/ _SRestriction * lpRes;
	/*0010*/
};

struct _STARTUPINFOA {
	/*0000*/ ULONG cb;
	/*0008*/ CHAR * lpReserved;
	/*0010*/ CHAR * lpDesktop;
	/*0018*/ CHAR * lpTitle;
	/*0020*/ ULONG dwX;
	/*0024*/ ULONG dwY;
	/*0028*/ ULONG dwXSize;
	/*002c*/ ULONG dwYSize;
	/*0030*/ ULONG dwXCountChars;
	/*0034*/ ULONG dwYCountChars;
	/*0038*/ ULONG dwFillAttribute;
	/*003c*/ ULONG dwFlags;
	/*0040*/ USHORT wShowWindow;
	/*0042*/ USHORT cbReserved2;
	/*0048*/ UCHAR * lpReserved2;
	/*0050*/ void * hStdInput;
	/*0058*/ void * hStdOutput;
	/*0060*/ void * hStdError;
	/*0068*/
};

struct _STARTUPINFOEXA {
	/*0000*/ _STARTUPINFOA StartupInfo;
	/*0068*/ _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList;
	/*0070*/
};

struct _STARTUPINFOEXW {
	/*0000*/ _STARTUPINFOW StartupInfo;
	/*0068*/ _PROC_THREAD_ATTRIBUTE_LIST * lpAttributeList;
	/*0070*/
};

struct _STARTUPINFOW {
	/*0000*/ ULONG cb;
	/*0008*/ WCHAR * lpReserved;
	/*0010*/ WCHAR * lpDesktop;
	/*0018*/ WCHAR * lpTitle;
	/*0020*/ ULONG dwX;
	/*0024*/ ULONG dwY;
	/*0028*/ ULONG dwXSize;
	/*002c*/ ULONG dwYSize;
	/*0030*/ ULONG dwXCountChars;
	/*0034*/ ULONG dwYCountChars;
	/*0038*/ ULONG dwFillAttribute;
	/*003c*/ ULONG dwFlags;
	/*0040*/ USHORT wShowWindow;
	/*0042*/ USHORT cbReserved2;
	/*0048*/ UCHAR * lpReserved2;
	/*0050*/ void * hStdInput;
	/*0058*/ void * hStdOutput;
	/*0060*/ void * hStdError;
	/*0068*/
};

enum _STATE_LOCATION_TYPE {
	LocationTypeRegistry = 0x0,
	LocationTypeFileSystem = 0x1,
	LocationTypeMaximum = 0x2
};

struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
	/*0000*/ ULONG EntryLength;
	/*0004*/ ULONG DependencyTypeFlags;
	/*0008*/ ULONG ProviderSpecificFlags;
	/*000c*/ _VIRTUAL_STORAGE_TYPE VirtualStorageType;
	/*0020*/
};

struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
	/*0000*/ ULONG EntryLength;
	/*0004*/ ULONG DependencyTypeFlags;
	/*0008*/ ULONG ProviderSpecificFlags;
	/*000c*/ _VIRTUAL_STORAGE_TYPE VirtualStorageType;
	/*0020*/ ULONG AncestorLevel;
	/*0024*/ ULONG HostVolumeNameOffset;
	/*0028*/ ULONG HostVolumeNameSize;
	/*002c*/ ULONG DependentVolumeNameOffset;
	/*0030*/ ULONG DependentVolumeNameSize;
	/*0034*/ ULONG RelativePathOffset;
	/*0038*/ ULONG RelativePathSize;
	/*003c*/ ULONG DependentDeviceNameOffset;
	/*0040*/ ULONG DependentDeviceNameSize;
	/*0044*/
};

struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
	/*0000*/ ULONG RequestLevel;
	/*0004*/ ULONG RequestFlags;
	/*0008*/
};

struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
	/*0000*/ ULONG ResponseLevel;
	/*0004*/ ULONG NumberEntries;
	/*0008*/ _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
	/*0008*/ _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
	/*004c*/
};

struct _STORAGE_RESERVE_AREA_DEFINITION {
	/*0000*/ _STORAGE_RESERVE_ID Id;
	/*0004*/ ULONG Flags;
	/*0008*/ LONGLONG SpaceGuarantee;
	/*0010*/
};

struct _STORAGE_RESERVE_AREA_INFO {
	/*0000*/ _STORAGE_RESERVE_ID Id;
	/*0004*/ ULONG Flags;
	/*0008*/ LONGLONG SpaceGuarantee;
	/*0010*/ LONGLONG SpaceUsed;
	/*0018*/
};

enum _STORAGE_RESERVE_ID {
	StorageReserveIdNone = 0x0,
	StorageReserveIdHard = 0x1,
	StorageReserveIdSoft = 0x2,
	StorageReserveIdUpdateScratch = 0x3,
	StorageReserveIdMax = 0x4
};

struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG StreamId;
	/*0008*/
};

struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {
	/*0000*/ ULONG StreamId;
	/*0004*/
};

struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
	/*0000*/ ULONG OptimalWriteSize;
	/*0004*/ ULONG StreamGranularitySize;
	/*0008*/ ULONG StreamIdMin;
	/*000c*/ ULONG StreamIdMax;
	/*0010*/
};

struct _STREAM_EXTENT_ENTRY {
	
	/*0000*/ ULONG Flags;
	/*0008*/ <unnamed-type-ExtentInformation> ExtentInformation;
	/*0028*/
};

struct _STREAM_INFORMATION_ENTRY {

	union _StreamInformation {
	
		struct _Ea {
			/*0000*/ USHORT Length;
			/*0002*/ USHORT Flags;
			/*0004*/ ULONG EaSize;
			/*0008*/ ULONG EaInformationOffset;
			/*000c*/
		};

	
		struct _Reparse {
			/*0000*/ USHORT Length;
			/*0002*/ USHORT Flags;
			/*0004*/ ULONG ReparseDataSize;
			/*0008*/ ULONG ReparseDataOffset;
			/*000c*/
		};

	
		struct _DataStream {
			/*0000*/ USHORT Length;
			/*0002*/ USHORT Flags;
			/*0004*/ ULONG Reserved;
			/*0008*/ ULONGLONG Vdl;
			/*0010*/
		};

	
		struct _DesiredStorageClass {
			/*0000*/ _FILE_STORAGE_TIER_CLASS Class;
			/*0004*/ ULONG Flags;
			/*0008*/
		};

		/*0000*/ _DesiredStorageClass DesiredStorageClass;
		/*0000*/ _DataStream DataStream;
		/*0000*/ _Reparse Reparse;
		/*0000*/ _Ea Ea;
		/*0010*/
	};

	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _StreamInformation StreamInformation;
	/*0018*/
};

enum _STREAM_INFO_LEVELS {
	FindStreamInfoStandard = 0x0,
	FindStreamInfoMaxInfoLevel = 0x1
};

struct _STREAM_LAYOUT_ENTRY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG NextStreamOffset;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG ExtentInformationOffset;
	/*0010*/ _LARGE_INTEGER AllocationSize;
	/*0018*/ _LARGE_INTEGER EndOfFile;
	/*0020*/ ULONG StreamInformationOffset;
	/*0024*/ ULONG AttributeTypeCode;
	/*0028*/ ULONG AttributeFlags;
	/*002c*/ ULONG StreamIdentifierLength;
	/*0030*/ WCHAR StreamIdentifier[0x1];
	/*0038*/
};

struct _STRING {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0008*/ CHAR * Buffer;
	/*0010*/
};

struct _STRING32 {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0004*/ ULONG Buffer;
	/*0008*/
};

struct _STRING64 {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0008*/ ULONGLONG Buffer;
	/*0010*/
};

struct _STRRET {
	/*0000*/ UINT uType;
	/*0008*/ WCHAR * pOleStr;
	/*0008*/ UINT uOffset;
	/*0008*/ CHAR cStr[0x104];
	/*0110*/
};

enum _SUBSYSTEM_INFORMATION_TYPE {
	SubsystemInformationTypeWin32 = 0x0,
	SubsystemInformationTypeWSL = 0x1,
	MaxSubsystemInformationType = 0x2
};

enum _SUITE_TYPE {
	SmallBusiness = 0x0,
	Enterprise = 0x1,
	BackOffice = 0x2,
	CommunicationServer = 0x3,
	TerminalServer = 0x4,
	SmallBusinessRestricted = 0x5,
	EmbeddedNT = 0x6,
	DataCenter = 0x7,
	SingleUserTS = 0x8,
	Personal = 0x9,
	Blade = 0xa,
	EmbeddedRestricted = 0xb,
	SecurityAppliance = 0xc,
	StorageServer = 0xd,
	ComputeServer = 0xe,
	WHServer = 0xf,
	PhoneNT = 0x10,
	MultiUserTS = 0x11,
	MaxSuiteType = 0x12
};

struct _SUPPORTED_OS_INFO {
	/*0000*/ USHORT MajorVersion;
	/*0002*/ USHORT MinorVersion;
	/*0004*/
};

enum _SUSPEND_RESILIENCY_STATE {
	SuspendResiliencyStateUnknown = 0x0,
	SuspendResiliencyStateSuspending = 0x1,
	SuspendResiliencyStateResuming = 0x2,
	SuspendResiliencyStateTerminating = 0x3,
	SuspendResiliencyStateSuspended = 0x4,
	SuspendResiliencyStateRunning = 0x5
};

enum _SUSPEND_RESILIENCY_TYPE {
	SuspendResiliencyTypeLocal = 0x0,
	SuspendResiliencyTypeCrossVM = 0x1
};

struct _SV2CVW2_PARAMS {
	/*0000*/ ULONG cbSize;
	/*0008*/ IShellView * psvPrev;
	/*0010*/ FOLDERSETTINGS const * pfs;
	/*0018*/ IShellBrowser * psbOwner;
	/*0020*/ tagRECT * prcView;
	/*0028*/ _GUID const * pvid;
	/*0030*/ HWND__ * hwndView;
	/*0038*/
};

enum _SVGIO {
	SVGIO_BACKGROUND = 0x0,
	SVGIO_SELECTION = 0x1,
	SVGIO_ALLVIEW = 0x2,
	SVGIO_CHECKED = 0x3,
	SVGIO_TYPE_MASK = 0xf,
	SVGIO_FLAG_VIEWORDER = 0x80000000
};

enum _SVSIF {
	SVSI_DESELECT = 0x0,
	SVSI_SELECT = 0x1,
	SVSI_EDIT = 0x3,
	SVSI_DESELECTOTHERS = 0x4,
	SVSI_ENSUREVISIBLE = 0x8,
	SVSI_FOCUSED = 0x10,
	SVSI_TRANSLATEPT = 0x20,
	SVSI_SELECTIONMARK = 0x40,
	SVSI_POSITIONITEM = 0x80,
	SVSI_CHECK = 0x100,
	SVSI_CHECK2 = 0x200,
	SVSI_KEYBOARDSELECT = 0x401,
	SVSI_NOTAKEFOCUS = 0x40000000
};

struct _SWStringArray {
	/*0000*/ ULONG cValues;
	/*0008*/ WCHAR * * lppszW;
	/*0010*/
};

enum _SXH_PROXY_SETTING {
	SXH_PROXY_SET_DEFAULT = 0x0,
	SXH_PROXY_SET_PRECONFIG = 0x0,
	SXH_PROXY_SET_DIRECT = 0x1,
	SXH_PROXY_SET_PROXY = 0x2
};

enum _SXH_SERVER_CERT_OPTION {
	SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 0x100,
	SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 0x200,
	SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 0x1000,
	SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 0x2000,
	SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 0x3300
};

enum _SYMBOLIC_LINK_INFO_CLASS {
	SymbolicLinkGlobalInformation = 0x1,
	SymbolicLinkAccessMask = 0x2
};

struct _SYSDBG_BUS_DATA {
	/*0000*/ ULONG Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0014*/ _BUS_DATA_TYPE BusDataType;
	/*0018*/ ULONG BusNumber;
	/*001c*/ ULONG SlotNumber;
	/*0020*/
};

enum _SYSDBG_COMMAND {
	SysDbgQueryModuleInformation = 0x0,
	SysDbgQueryTraceInformation = 0x1,
	SysDbgSetTracepoint = 0x2,
	SysDbgSetSpecialCall = 0x3,
	SysDbgClearSpecialCalls = 0x4,
	SysDbgQuerySpecialCalls = 0x5,
	SysDbgBreakPoint = 0x6,
	SysDbgQueryVersion = 0x7,
	SysDbgReadVirtual = 0x8,
	SysDbgWriteVirtual = 0x9,
	SysDbgReadPhysical = 0xa,
	SysDbgWritePhysical = 0xb,
	SysDbgReadControlSpace = 0xc,
	SysDbgWriteControlSpace = 0xd,
	SysDbgReadIoSpace = 0xe,
	SysDbgWriteIoSpace = 0xf,
	SysDbgReadMsr = 0x10,
	SysDbgWriteMsr = 0x11,
	SysDbgReadBusData = 0x12,
	SysDbgWriteBusData = 0x13,
	SysDbgCheckLowMemory = 0x14,
	SysDbgEnableKernelDebugger = 0x15,
	SysDbgDisableKernelDebugger = 0x16,
	SysDbgGetAutoKdEnable = 0x17,
	SysDbgSetAutoKdEnable = 0x18,
	SysDbgGetPrintBufferSize = 0x19,
	SysDbgSetPrintBufferSize = 0x1a,
	SysDbgGetKdUmExceptionEnable = 0x1b,
	SysDbgSetKdUmExceptionEnable = 0x1c,
	SysDbgGetTriageDump = 0x1d,
	SysDbgGetKdBlockEnable = 0x1e,
	SysDbgSetKdBlockEnable = 0x1f,
	SysDbgRegisterForUmBreakInfo = 0x20,
	SysDbgGetUmBreakPid = 0x21,
	SysDbgClearUmBreakPid = 0x22,
	SysDbgGetUmAttachPid = 0x23,
	SysDbgClearUmAttachPid = 0x24,
	SysDbgGetLiveKernelDump = 0x25,
	SysDbgKdPullRemoteFile = 0x26
};

struct _SYSDBG_CONTROL_SPACE {
	/*0000*/ ULONGLONG Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0014*/ ULONG Processor;
	/*0018*/
};

struct _SYSDBG_IO_SPACE {
	/*0000*/ ULONGLONG Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0014*/ _INTERFACE_TYPE InterfaceType;
	/*0018*/ ULONG BusNumber;
	/*001c*/ ULONG AddressSpace;
	/*0020*/
};

struct _SYSDBG_KD_PULL_REMOTE_FILE {
	/*0000*/ _UNICODE_STRING ImageFileName;
	/*0010*/
};

struct _SYSDBG_LIVEDUMP_CONTROL {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG BugCheckCode;
	/*0008*/ ULONGLONG BugCheckParam1;
	/*0010*/ ULONGLONG BugCheckParam2;
	/*0018*/ ULONGLONG BugCheckParam3;
	/*0020*/ ULONGLONG BugCheckParam4;
	/*0028*/ void * DumpFileHandle;
	/*0030*/ void * CancelEventHandle;
	/*0038*/ _SYSDBG_LIVEDUMP_CONTROL_FLAGS Flags;
	/*003c*/ _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES AddPagesControl;
	/*0040*/
};

union _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES {
	/*0000*/ ULONG HypervisorPages : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0000*/ ULONG AsUlong;
	/*0004*/
};

union _SYSDBG_LIVEDUMP_CONTROL_FLAGS {
	/*0000*/ ULONG UseDumpStorageStack : 01; // 0x00000001;
	/*0000*/ ULONG CompressMemoryPagesData : 01; // 0x00000002;
	/*0000*/ ULONG IncludeUserSpaceMemoryPages : 01; // 0x00000004;
	/*0000*/ ULONG AbortIfMemoryPressure : 01; // 0x00000008;
	/*0000*/ ULONG Reserved : 28; // 0xfffffff0;
	/*0000*/ ULONG AsUlong;
	/*0004*/
};

struct _SYSDBG_MSR {
	/*0000*/ ULONG Msr;
	/*0008*/ ULONGLONG Data;
	/*0010*/
};

struct _SYSDBG_PHYSICAL {
	/*0000*/ _LARGE_INTEGER Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0018*/
};

struct _SYSDBG_TRIAGE_DUMP {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG BugCheckCode;
	/*0008*/ ULONGLONG BugCheckParam1;
	/*0010*/ ULONGLONG BugCheckParam2;
	/*0018*/ ULONGLONG BugCheckParam3;
	/*0020*/ ULONGLONG BugCheckParam4;
	/*0028*/ ULONG ProcessHandles;
	/*002c*/ ULONG ThreadHandles;
	/*0030*/ void * * Handles;
	/*0038*/
};

struct _SYSDBG_VIRTUAL {
	/*0000*/ void * Address;
	/*0008*/ void * Buffer;
	/*0010*/ ULONG Request;
	/*0018*/
};

struct _SYSTEMTIME {
	/*0000*/ USHORT wYear;
	/*0002*/ USHORT wMonth;
	/*0004*/ USHORT wDayOfWeek;
	/*0006*/ USHORT wDay;
	/*0008*/ USHORT wHour;
	/*000a*/ USHORT wMinute;
	/*000c*/ USHORT wSecond;
	/*000e*/ USHORT wMilliseconds;
	/*0010*/
};

struct _SYSTEM_ACCESS_FILTER_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_ACPI_AUDIT_INFORMATION {
	/*0000*/ ULONG RsdpCount;
	/*0004*/ ULONG SameRsdt : 01; // 0x00000001;
	/*0004*/ ULONG SlicPresent : 01; // 0x00000002;
	/*0004*/ ULONG SlicDifferent : 01; // 0x00000004;
	/*0008*/
};

enum _SYSTEM_ACTIVITY_MODERATION_APP_TYPE {
	SystemActivityModerationAppTypeClassic = 0x0,
	SystemActivityModerationAppTypePackaged = 0x1,
	MaxSystemActivityModerationAppType = 0x2
};

struct _SYSTEM_ACTIVITY_MODERATION_INFO {
	/*0000*/ _UNICODE_STRING Identifier;
	/*0010*/ _SYSTEM_ACTIVITY_MODERATION_STATE ModerationState;
	/*0014*/ _SYSTEM_ACTIVITY_MODERATION_APP_TYPE AppType;
	/*0018*/
};

enum _SYSTEM_ACTIVITY_MODERATION_STATE {
	SystemActivityModerationStateSystemManaged = 0x0,
	SystemActivityModerationStateUserManagedAllowThrottling = 0x1,
	SystemActivityModerationStateUserManagedDisableThrottling = 0x2,
	MaxSystemActivityModerationState = 0x3
};

struct _SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS {
	/*0000*/ void * UserKeyHandle;
	/*0008*/
};

struct _SYSTEM_ALARM_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_ALARM_CALLBACK_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _SYSTEM_ALARM_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _SYSTEM_AUDIT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_AUDIT_CALLBACK_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _SYSTEM_AUDIT_OBJECT_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG Flags;
	/*000c*/ _GUID ObjectType;
	/*001c*/ _GUID InheritedObjectType;
	/*002c*/ ULONG SidStart;
	/*0030*/
};

struct _SYSTEM_BASIC_INFORMATION {
	/*0000*/ ULONG Reserved;
	/*0004*/ ULONG TimerResolution;
	/*0008*/ ULONG PageSize;
	/*000c*/ ULONG NumberOfPhysicalPages;
	/*0010*/ ULONG LowestPhysicalPageNumber;
	/*0014*/ ULONG HighestPhysicalPageNumber;
	/*0018*/ ULONG AllocationGranularity;
	/*0020*/ ULONGLONG MinimumUserModeAddress;
	/*0028*/ ULONGLONG MaximumUserModeAddress;
	/*0030*/ ULONGLONG ActiveProcessorsAffinityMask;
	/*0038*/ CHAR NumberOfProcessors;
	/*0040*/
};

struct _SYSTEM_BASIC_PERFORMANCE_INFORMATION {
	/*0000*/ ULONGLONG AvailablePages;
	/*0008*/ ULONGLONG CommittedPages;
	/*0010*/ ULONGLONG CommitLimit;
	/*0018*/ ULONGLONG PeakCommitment;
	/*0020*/
};

struct _SYSTEM_BIGPOOL_ENTRY {
	/*0000*/ void * VirtualAddress;
	/*0000*/ ULONGLONG NonPaged : 01; // 0x0000000000000001;
	/*0008*/ ULONGLONG SizeInBytes;
	/*0010*/ UCHAR Tag[0x4];
	/*0010*/ ULONG TagUlong;
	/*0018*/
};

struct _SYSTEM_BIGPOOL_INFORMATION {
	/*0000*/ ULONG Count;
	/*0008*/ _SYSTEM_BIGPOOL_ENTRY AllocatedInfo[0x1];
	/*0020*/
};

struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION {
	/*0000*/ _GUID BootIdentifier;
	/*0010*/ _FIRMWARE_TYPE FirmwareType;
	/*0018*/ ULONGLONG BootFlags;
	/*0018*/ ULONGLONG DbgMenuOsSelection : 01; // 0x0000000000000001;
	/*0018*/ ULONGLONG DbgHiberBoot : 01; // 0x0000000000000002;
	/*0018*/ ULONGLONG DbgSoftBoot : 01; // 0x0000000000000004;
	/*0018*/ ULONGLONG DbgMeasuredLaunch : 01; // 0x0000000000000008;
	/*0018*/ ULONGLONG DbgMeasuredLaunchCapable : 01; // 0x0000000000000010;
	/*0018*/ ULONGLONG DbgSystemHiveReplace : 01; // 0x0000000000000020;
	/*0018*/ ULONGLONG DbgMeasuredLaunchSmmProtections : 01; // 0x0000000000000040;
	/*0018*/ ULONGLONG DbgMeasuredLaunchSmmLevel : 07; // 0x0000000000003f80;
	/*0020*/
};

struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION_V1 {
	/*0000*/ _GUID BootIdentifier;
	/*0010*/ _FIRMWARE_TYPE FirmwareType;
	/*0014*/
};

struct _SYSTEM_BOOT_GRAPHICS_INFORMATION {
	/*0000*/ _LARGE_INTEGER FrameBuffer;
	/*0008*/ ULONG Width;
	/*000c*/ ULONG Height;
	/*0010*/ ULONG PixelStride;
	/*0014*/ ULONG Flags;
	/*0018*/ _SYSTEM_PIXEL_FORMAT Format;
	/*001c*/ ULONG DisplayRotation;
	/*0020*/
};

struct _SYSTEM_BOOT_LOGO_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG BitmapOffset;
	/*0008*/
};

struct _SYSTEM_CALL_COUNT_INFORMATION {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG NumberOfTables;
	/*0008*/
};

struct _SYSTEM_CALL_TIME_INFORMATION {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG TotalCalls;
	/*0008*/ _LARGE_INTEGER TimeOfCalls[0x1];
	/*0010*/
};

struct _SYSTEM_CODEINTEGRITYPOLICY_INFORMATION {
	/*0000*/ ULONG Options;
	/*0004*/ ULONG HVCIOptions;
	/*0008*/ ULONGLONG Version;
	/*0010*/ _GUID PolicyGuid;
	/*0020*/
};

struct _SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION {
	/*0000*/ void * FileHandle;
	/*0008*/ ULONG ImageSize;
	/*0010*/ void * Image;
	/*0018*/
};

struct _SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION {
	/*0000*/ void * ImageFile;
	/*0008*/ ULONG Type;
	/*0010*/
};

struct _SYSTEM_CODEINTEGRITY_INFORMATION {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG CodeIntegrityOptions;
	/*0008*/
};

struct _SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG Locked : 01; // 0x00000001;
	/*0000*/ ULONG UnlockApplied : 01; // 0x00000002;
	/*0000*/ ULONG UnlockIdValid : 01; // 0x00000004;
	/*0000*/ ULONG Reserved : 29; // 0xfffffff8;
	/*0004*/ UCHAR UnlockId[0x20];
	/*0024*/
};

struct _SYSTEM_CONSOLE_INFORMATION {
	/*0000*/ ULONG DriverLoaded : 01; // 0x00000001;
	/*0000*/ ULONG Spare : 31; // 0xfffffffe;
	/*0004*/
};

struct _SYSTEM_CONTEXT_SWITCH_INFORMATION {
	/*0000*/ ULONG ContextSwitches;
	/*0004*/ ULONG FindAny;
	/*0008*/ ULONG FindLast;
	/*000c*/ ULONG FindIdeal;
	/*0010*/ ULONG IdleAny;
	/*0014*/ ULONG IdleCurrent;
	/*0018*/ ULONG IdleLast;
	/*001c*/ ULONG IdleIdeal;
	/*0020*/ ULONG PreemptAny;
	/*0024*/ ULONG PreemptCurrent;
	/*0028*/ ULONG PreemptLast;
	/*002c*/ ULONG SwitchToIdle;
	/*0030*/
};

struct _SYSTEM_CPU_SET_INFORMATION {
	
	/*0000*/ ULONG Size;
	/*0004*/ _CPU_SET_INFORMATION_TYPE Type;
	/*0008*/ <unnamed-type-CpuSet> CpuSet;
	/*0020*/
};

struct _SYSTEM_CPU_SET_TAG_INFORMATION {
	/*0000*/ ULONGLONG Tag;
	/*0008*/ ULONGLONG CpuSets[0x1];
	/*0010*/
};

enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS {
	SystemCrashDumpDisable = 0x0,
	SystemCrashDumpReconfigure = 0x1,
	SystemCrashDumpInitializationComplete = 0x2
};

struct _SYSTEM_CRASH_DUMP_STATE_INFORMATION {
	/*0000*/ _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS CrashDumpConfigurationClass;
	/*0004*/
};

struct _SYSTEM_DEVICE_DATA_INFORMATION {
	/*0000*/ _UNICODE_STRING DeviceId;
	/*0010*/ _UNICODE_STRING DataName;
	/*0020*/ ULONG DataType;
	/*0024*/ ULONG DataBufferLength;
	/*0028*/ void * DataBuffer;
	/*0030*/
};

struct _SYSTEM_DEVICE_INFORMATION {
	/*0000*/ ULONG NumberOfDisks;
	/*0004*/ ULONG NumberOfFloppies;
	/*0008*/ ULONG NumberOfCdRoms;
	/*000c*/ ULONG NumberOfTapes;
	/*0010*/ ULONG NumberOfSerialPorts;
	/*0014*/ ULONG NumberOfParallelPorts;
	/*0018*/
};

struct _SYSTEM_DMA_GUARD_POLICY_INFORMATION {
	/*0000*/ UCHAR DmaGuardPolicyEnabled;
	/*0001*/
};

struct _SYSTEM_DPC_BEHAVIOR_INFORMATION {
	/*0000*/ ULONG Spare;
	/*0004*/ ULONG DpcQueueDepth;
	/*0008*/ ULONG MinimumDpcRate;
	/*000c*/ ULONG AdjustDpcThreshold;
	/*0010*/ ULONG IdealDpcRate;
	/*0014*/
};

struct _SYSTEM_ELAM_CERTIFICATE_INFORMATION {
	/*0000*/ void * ElamDriverFile;
	/*0008*/
};

struct _SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION {
	/*0000*/ UCHAR EnclaveLaunchSigner[0x20];
	/*0020*/
};

struct _SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION {
	/*0000*/ UCHAR Enabled;
	/*0001*/
};

struct _SYSTEM_ENTROPY_TIMING_INFORMATION {
	/*0000*/ void (* EntropyRoutine)( void * , ULONG );
	/*0008*/ void (* InitializationRoutine)( void * , ULONG , void * );
	/*0010*/ void * InitializationContext;
	/*0018*/
};

struct _SYSTEM_ERROR_PORT_TIMEOUTS {
	/*0000*/ ULONG StartTimeout;
	/*0004*/ ULONG CommTimeout;
	/*0008*/
};

struct _SYSTEM_EXCEPTION_INFORMATION {
	/*0000*/ ULONG AlignmentFixupCount;
	/*0004*/ ULONG ExceptionDispatchCount;
	/*0008*/ ULONG FloatingEmulationCount;
	/*000c*/ ULONG ByteWordEmulationCount;
	/*0010*/
};

struct _SYSTEM_EXTENDED_THREAD_INFORMATION {
	/*0000*/ _SYSTEM_THREAD_INFORMATION ThreadInfo;
	/*0050*/ void * StackBase;
	/*0058*/ void * StackLimit;
	/*0060*/ void * Win32StartAddress;
	/*0068*/ void * TebBase;
	/*0070*/ ULONGLONG Reserved2;
	/*0078*/ ULONGLONG Reserved3;
	/*0080*/ ULONGLONG Reserved4;
	/*0088*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_INFORMATION {
	/*0000*/ ULONGLONG ChangeStamp;
	/*0008*/ _RTL_FEATURE_CONFIGURATION Configuration;
	/*0018*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_QUERY {
	/*0000*/ _RTL_FEATURE_CONFIGURATION_TYPE ConfigurationType;
	/*0004*/ UINT FeatureId;
	/*0008*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION {
	/*0000*/ ULONGLONG OverallChangeStamp;
	/*0008*/ _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY Descriptors[0x3];
	/*0050*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY {
	/*0000*/ ULONGLONG ChangeStamp;
	/*0008*/ void * Section;
	/*0010*/ ULONGLONG Size;
	/*0018*/
};

struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_REQUEST {
	/*0000*/ ULONGLONG PreviousChangeStamps[0x3];
	/*0018*/
};

enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE {
	SystemFeatureConfigurationSectionTypeBoot = 0x0,
	SystemFeatureConfigurationSectionTypeRuntime = 0x1,
	SystemFeatureConfigurationSectionTypeUsageTriggers = 0x2,
	SystemFeatureConfigurationSectionTypeCount = 0x3
};

struct _SYSTEM_FEATURE_CONFIGURATION_UPDATE {
	/*0000*/ ULONGLONG PreviousChangeStamp;
	/*0008*/ _RTL_FEATURE_CONFIGURATION_TYPE ConfigurationType;
	/*000c*/ ULONG UpdateCount;
	/*0010*/ _RTL_FEATURE_CONFIGURATION_UPDATE Updates[0x1];
	/*0030*/
};

struct _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE {
	/*0000*/ ULONG UpdateCount;
	/*0004*/ _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY Updates[0x1];
	/*0018*/
};

struct _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY {
	/*0000*/ ULONG Remove;
	/*0004*/ _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS Details;
	/*0014*/
};

struct _SYSTEM_FILECACHE_INFORMATION {
	/*0000*/ ULONGLONG CurrentSize;
	/*0008*/ ULONGLONG PeakSize;
	/*0010*/ ULONG PageFaultCount;
	/*0018*/ ULONGLONG MinimumWorkingSet;
	/*0020*/ ULONGLONG MaximumWorkingSet;
	/*0028*/ ULONGLONG CurrentSizeIncludingTransitionInPages;
	/*0030*/ ULONGLONG PeakSizeIncludingTransitionInPages;
	/*0038*/ ULONG TransitionRePurposeCount;
	/*003c*/ ULONG Flags;
	/*0040*/
};

struct _SYSTEM_FIRMWARE_PARTITION_INFORMATION {
	/*0000*/ _UNICODE_STRING FirmwarePartition;
	/*0010*/
};

enum _SYSTEM_FIRMWARE_TABLE_ACTION {
	SystemFirmwareTable_Enumerate = 0x0,
	SystemFirmwareTable_Get = 0x1
};

struct _SYSTEM_FIRMWARE_TABLE_HANDLER {
	/*0000*/ ULONG ProviderSignature;
	/*0004*/ UCHAR Register;
	/*0008*/ LONG (* FirmwareTableHandler)( _SYSTEM_FIRMWARE_TABLE_INFORMATION * );
	/*0010*/ void * DriverObject;
	/*0018*/
};

struct _SYSTEM_FIRMWARE_TABLE_INFORMATION {
	/*0000*/ ULONG ProviderSignature;
	/*0004*/ _SYSTEM_FIRMWARE_TABLE_ACTION Action;
	/*0008*/ ULONG TableID;
	/*000c*/ ULONG TableBufferLength;
	/*0010*/ UCHAR TableBuffer[0x1];
	/*0014*/
};

struct _SYSTEM_FLAGS_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _SYSTEM_FLUSH_INFORMATION {
	/*0000*/ ULONG SupportedFlushMethods;
	/*0004*/ ULONG ProcessorCacheFlushSize;
	/*0008*/ ULONGLONG SystemFlushCapabilities;
	/*0010*/ ULONGLONG Reserved[0x2];
	/*0020*/
};

struct _SYSTEM_GDI_DRIVER_INFORMATION {
	/*0000*/ _UNICODE_STRING DriverName;
	/*0010*/ void * ImageAddress;
	/*0018*/ void * SectionPointer;
	/*0020*/ void * EntryPoint;
	/*0028*/ _IMAGE_EXPORT_DIRECTORY * ExportSectionPointer;
	/*0030*/ ULONG ImageLength;
	/*0038*/
};

struct _SYSTEM_HANDLE_INFORMATION {
	/*0000*/ ULONG NumberOfHandles;
	/*0008*/ _SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[0x1];
	/*0020*/
};

struct _SYSTEM_HANDLE_INFORMATION_EX {
	/*0000*/ ULONGLONG NumberOfHandles;
	/*0008*/ ULONGLONG Reserved;
	/*0010*/ _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX Handles[0x1];
	/*0038*/
};

struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO {
	/*0000*/ USHORT UniqueProcessId;
	/*0002*/ USHORT CreatorBackTraceIndex;
	/*0004*/ UCHAR ObjectTypeIndex;
	/*0005*/ UCHAR HandleAttributes;
	/*0006*/ USHORT HandleValue;
	/*0008*/ void * Object;
	/*0010*/ ULONG GrantedAccess;
	/*0018*/
};

struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX {
	/*0000*/ void * Object;
	/*0008*/ ULONGLONG UniqueProcessId;
	/*0010*/ ULONGLONG HandleValue;
	/*0018*/ ULONG GrantedAccess;
	/*001c*/ USHORT CreatorBackTraceIndex;
	/*001e*/ USHORT ObjectTypeIndex;
	/*0020*/ ULONG HandleAttributes;
	/*0024*/ ULONG Reserved;
	/*0028*/
};

struct _SYSTEM_HIBERFILE_INFORMATION {
	/*0000*/ ULONG NumberOfMcbPairs;
	/*0008*/ _LARGE_INTEGER Mcb[0x1];
	/*0010*/
};

struct _SYSTEM_HOT_PATCH_REGISTRY_VALUE {
	/*0000*/ USHORT ImageNameLength;
	/*0002*/ WCHAR ImageName[0x1];
	/*0004*/
};

struct _SYSTEM_HYPERVISOR_DETAIL_INFORMATION {
	/*0000*/ _HV_DETAILS HvVendorAndMaxFunction;
	/*0010*/ _HV_DETAILS HypervisorInterface;
	/*0020*/ _HV_DETAILS HypervisorVersion;
	/*0030*/ _HV_DETAILS HvFeatures;
	/*0040*/ _HV_DETAILS HwFeatures;
	/*0050*/ _HV_DETAILS EnlightenmentInfo;
	/*0060*/ _HV_DETAILS ImplementationLimits;
	/*0070*/
};

struct _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION {
	/*0000*/ ULONG NumberOfLogicalProcessors;
	/*0004*/ ULONG NumberOfCores;
	/*0008*/
};

struct _SYSTEM_HYPERVISOR_QUERY_INFORMATION {
	/*0000*/ UCHAR HypervisorConnected;
	/*0001*/ UCHAR HypervisorDebuggingEnabled;
	/*0002*/ UCHAR HypervisorPresent;
	/*0003*/ UCHAR HypervisorSchedulerType;
	/*0004*/ UCHAR Spare0[0x4];
	/*0008*/ ULONGLONG EnabledEnlightenments;
	/*0010*/
};

struct _SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION {
	/*0000*/ void * HypervisorSharedUserVa;
	/*0008*/
};

struct _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION {
	/*0000*/ ULONG FlagsToEnable;
	/*0004*/ ULONG FlagsToDisable;
	/*0008*/
};

struct _SYSTEM_INFO {
	/*0000*/ ULONG dwOemId;
	/*0000*/ USHORT wProcessorArchitecture;
	/*0002*/ USHORT wReserved;
	/*0004*/ ULONG dwPageSize;
	/*0008*/ void * lpMinimumApplicationAddress;
	/*0010*/ void * lpMaximumApplicationAddress;
	/*0018*/ ULONGLONG dwActiveProcessorMask;
	/*0020*/ ULONG dwNumberOfProcessors;
	/*0024*/ ULONG dwProcessorType;
	/*0028*/ ULONG dwAllocationGranularity;
	/*002c*/ USHORT wProcessorLevel;
	/*002e*/ USHORT wProcessorRevision;
	/*0030*/
};

enum _SYSTEM_INFORMATION_CLASS {
	SystemBasicInformation = 0x0,
	SystemProcessorInformation = 0x1,
	SystemPerformanceInformation = 0x2,
	SystemTimeOfDayInformation = 0x3,
	SystemPathInformation = 0x4,
	SystemProcessInformation = 0x5,
	SystemCallCountInformation = 0x6,
	SystemDeviceInformation = 0x7,
	SystemProcessorPerformanceInformation = 0x8,
	SystemFlagsInformation = 0x9,
	SystemCallTimeInformation = 0xa,
	SystemModuleInformation = 0xb,
	SystemLocksInformation = 0xc,
	SystemStackTraceInformation = 0xd,
	SystemPagedPoolInformation = 0xe,
	SystemNonPagedPoolInformation = 0xf,
	SystemHandleInformation = 0x10,
	SystemObjectInformation = 0x11,
	SystemPageFileInformation = 0x12,
	SystemVdmInstemulInformation = 0x13,
	SystemVdmBopInformation = 0x14,
	SystemFileCacheInformation = 0x15,
	SystemPoolTagInformation = 0x16,
	SystemInterruptInformation = 0x17,
	SystemDpcBehaviorInformation = 0x18,
	SystemFullMemoryInformation = 0x19,
	SystemLoadGdiDriverInformation = 0x1a,
	SystemUnloadGdiDriverInformation = 0x1b,
	SystemTimeAdjustmentInformation = 0x1c,
	SystemSummaryMemoryInformation = 0x1d,
	SystemMirrorMemoryInformation = 0x1e,
	SystemPerformanceTraceInformation = 0x1f,
	SystemObsolete0 = 0x20,
	SystemExceptionInformation = 0x21,
	SystemCrashDumpStateInformation = 0x22,
	SystemKernelDebuggerInformation = 0x23,
	SystemContextSwitchInformation = 0x24,
	SystemRegistryQuotaInformation = 0x25,
	SystemExtendServiceTableInformation = 0x26,
	SystemPrioritySeperation = 0x27,
	SystemVerifierAddDriverInformation = 0x28,
	SystemVerifierRemoveDriverInformation = 0x29,
	SystemProcessorIdleInformation = 0x2a,
	SystemLegacyDriverInformation = 0x2b,
	SystemCurrentTimeZoneInformation = 0x2c,
	SystemLookasideInformation = 0x2d,
	SystemTimeSlipNotification = 0x2e,
	SystemSessionCreate = 0x2f,
	SystemSessionDetach = 0x30,
	SystemSessionInformation = 0x31,
	SystemRangeStartInformation = 0x32,
	SystemVerifierInformation = 0x33,
	SystemVerifierThunkExtend = 0x34,
	SystemSessionProcessInformation = 0x35,
	SystemLoadGdiDriverInSystemSpace = 0x36,
	SystemNumaProcessorMap = 0x37,
	SystemPrefetcherInformation = 0x38,
	SystemExtendedProcessInformation = 0x39,
	SystemRecommendedSharedDataAlignment = 0x3a,
	SystemComPlusPackage = 0x3b,
	SystemNumaAvailableMemory = 0x3c,
	SystemProcessorPowerInformation = 0x3d,
	SystemEmulationBasicInformation = 0x3e,
	SystemEmulationProcessorInformation = 0x3f,
	SystemExtendedHandleInformation = 0x40,
	SystemLostDelayedWriteInformation = 0x41,
	SystemBigPoolInformation = 0x42,
	SystemSessionPoolTagInformation = 0x43,
	SystemSessionMappedViewInformation = 0x44,
	SystemHotpatchInformation = 0x45,
	SystemObjectSecurityMode = 0x46,
	SystemWatchdogTimerHandler = 0x47,
	SystemWatchdogTimerInformation = 0x48,
	SystemLogicalProcessorInformation = 0x49,
	SystemWow64SharedInformationObsolete = 0x4a,
	SystemRegisterFirmwareTableInformationHandler = 0x4b,
	SystemFirmwareTableInformation = 0x4c,
	SystemModuleInformationEx = 0x4d,
	SystemVerifierTriageInformation = 0x4e,
	SystemSuperfetchInformation = 0x4f,
	SystemMemoryListInformation = 0x50,
	SystemFileCacheInformationEx = 0x51,
	SystemThreadPriorityClientIdInformation = 0x52,
	SystemProcessorIdleCycleTimeInformation = 0x53,
	SystemVerifierCancellationInformation = 0x54,
	SystemProcessorPowerInformationEx = 0x55,
	SystemRefTraceInformation = 0x56,
	SystemSpecialPoolInformation = 0x57,
	SystemProcessIdInformation = 0x58,
	SystemErrorPortInformation = 0x59,
	SystemBootEnvironmentInformation = 0x5a,
	SystemHypervisorInformation = 0x5b,
	SystemVerifierInformationEx = 0x5c,
	SystemTimeZoneInformation = 0x5d,
	SystemImageFileExecutionOptionsInformation = 0x5e,
	SystemCoverageInformation = 0x5f,
	SystemPrefetchPatchInformation = 0x60,
	SystemVerifierFaultsInformation = 0x61,
	SystemSystemPartitionInformation = 0x62,
	SystemSystemDiskInformation = 0x63,
	SystemProcessorPerformanceDistribution = 0x64,
	SystemNumaProximityNodeInformation = 0x65,
	SystemDynamicTimeZoneInformation = 0x66,
	SystemCodeIntegrityInformation = 0x67,
	SystemProcessorMicrocodeUpdateInformation = 0x68,
	SystemProcessorBrandString = 0x69,
	SystemVirtualAddressInformation = 0x6a,
	SystemLogicalProcessorAndGroupInformation = 0x6b,
	SystemProcessorCycleTimeInformation = 0x6c,
	SystemStoreInformation = 0x6d,
	SystemRegistryAppendString = 0x6e,
	SystemAitSamplingValue = 0x6f,
	SystemVhdBootInformation = 0x70,
	SystemCpuQuotaInformation = 0x71,
	SystemNativeBasicInformation = 0x72,
	SystemErrorPortTimeouts = 0x73,
	SystemLowPriorityIoInformation = 0x74,
	SystemBootEntropyInformation = 0x75,
	SystemVerifierCountersInformation = 0x76,
	SystemPagedPoolInformationEx = 0x77,
	SystemSystemPtesInformationEx = 0x78,
	SystemNodeDistanceInformation = 0x79,
	SystemAcpiAuditInformation = 0x7a,
	SystemBasicPerformanceInformation = 0x7b,
	SystemQueryPerformanceCounterInformation = 0x7c,
	SystemSessionBigPoolInformation = 0x7d,
	SystemBootGraphicsInformation = 0x7e,
	SystemScrubPhysicalMemoryInformation = 0x7f,
	SystemBadPageInformation = 0x80,
	SystemProcessorProfileControlArea = 0x81,
	SystemCombinePhysicalMemoryInformation = 0x82,
	SystemEntropyInterruptTimingInformation = 0x83,
	SystemConsoleInformation = 0x84,
	SystemPlatformBinaryInformation = 0x85,
	SystemPolicyInformation = 0x86,
	SystemHypervisorProcessorCountInformation = 0x87,
	SystemDeviceDataInformation = 0x88,
	SystemDeviceDataEnumerationInformation = 0x89,
	SystemMemoryTopologyInformation = 0x8a,
	SystemMemoryChannelInformation = 0x8b,
	SystemBootLogoInformation = 0x8c,
	SystemProcessorPerformanceInformationEx = 0x8d,
	SystemCriticalProcessErrorLogInformation = 0x8e,
	SystemSecureBootPolicyInformation = 0x8f,
	SystemPageFileInformationEx = 0x90,
	SystemSecureBootInformation = 0x91,
	SystemEntropyInterruptTimingRawInformation = 0x92,
	SystemPortableWorkspaceEfiLauncherInformation = 0x93,
	SystemFullProcessInformation = 0x94,
	SystemKernelDebuggerInformationEx = 0x95,
	SystemBootMetadataInformation = 0x96,
	SystemSoftRebootInformation = 0x97,
	SystemElamCertificateInformation = 0x98,
	SystemOfflineDumpConfigInformation = 0x99,
	SystemProcessorFeaturesInformation = 0x9a,
	SystemRegistryReconciliationInformation = 0x9b,
	SystemEdidInformation = 0x9c,
	SystemManufacturingInformation = 0x9d,
	SystemEnergyEstimationConfigInformation = 0x9e,
	SystemHypervisorDetailInformation = 0x9f,
	SystemProcessorCycleStatsInformation = 0xa0,
	SystemVmGenerationCountInformation = 0xa1,
	SystemTrustedPlatformModuleInformation = 0xa2,
	SystemKernelDebuggerFlags = 0xa3,
	SystemCodeIntegrityPolicyInformation = 0xa4,
	SystemIsolatedUserModeInformation = 0xa5,
	SystemHardwareSecurityTestInterfaceResultsInformation = 0xa6,
	SystemSingleModuleInformation = 0xa7,
	SystemAllowedCpuSetsInformation = 0xa8,
	SystemVsmProtectionInformation = 0xa9,
	SystemInterruptCpuSetsInformation = 0xaa,
	SystemSecureBootPolicyFullInformation = 0xab,
	SystemCodeIntegrityPolicyFullInformation = 0xac,
	SystemAffinitizedInterruptProcessorInformation = 0xad,
	SystemRootSiloInformation = 0xae,
	SystemCpuSetInformation = 0xaf,
	SystemCpuSetTagInformation = 0xb0,
	SystemWin32WerStartCallout = 0xb1,
	SystemSecureKernelProfileInformation = 0xb2,
	SystemCodeIntegrityPlatformManifestInformation = 0xb3,
	SystemInterruptSteeringInformation = 0xb4,
	SystemSupportedProcessorArchitectures = 0xb5,
	SystemMemoryUsageInformation = 0xb6,
	SystemCodeIntegrityCertificateInformation = 0xb7,
	SystemPhysicalMemoryInformation = 0xb8,
	SystemControlFlowTransition = 0xb9,
	SystemKernelDebuggingAllowed = 0xba,
	SystemActivityModerationExeState = 0xbb,
	SystemActivityModerationUserSettings = 0xbc,
	SystemCodeIntegrityPoliciesFullInformation = 0xbd,
	SystemCodeIntegrityUnlockInformation = 0xbe,
	SystemIntegrityQuotaInformation = 0xbf,
	SystemFlushInformation = 0xc0,
	SystemProcessorIdleMaskInformation = 0xc1,
	SystemSecureDumpEncryptionInformation = 0xc2,
	SystemWriteConstraintInformation = 0xc3,
	SystemKernelVaShadowInformation = 0xc4,
	SystemHypervisorSharedPageInformation = 0xc5,
	SystemFirmwareBootPerformanceInformation = 0xc6,
	SystemCodeIntegrityVerificationInformation = 0xc7,
	SystemFirmwarePartitionInformation = 0xc8,
	SystemSpeculationControlInformation = 0xc9,
	SystemDmaGuardPolicyInformation = 0xca,
	SystemEnclaveLaunchControlInformation = 0xcb,
	SystemWorkloadAllowedCpuSetsInformation = 0xcc,
	SystemCodeIntegrityUnlockModeInformation = 0xcd,
	SystemLeapSecondInformation = 0xce,
	SystemFlags2Information = 0xcf,
	SystemSecurityModelInformation = 0xd0,
	SystemCodeIntegritySyntheticCacheInformation = 0xd1,
	SystemFeatureConfigurationInformation = 0xd2,
	SystemFeatureConfigurationSectionInformation = 0xd3,
	SystemFeatureUsageSubscriptionInformation = 0xd4,
	SystemSecureSpeculationControlInformation = 0xd5,
	SystemSpacesBootInformation = 0xd6,
	SystemFwRamdiskInformation = 0xd7,
	SystemWheaIpmiHardwareInformation = 0xd8,
	SystemDifSetRuleClassInformation = 0xd9,
	SystemDifClearRuleClassInformation = 0xda,
	SystemDifApplyPluginVerificationOnDriver = 0xdb,
	SystemDifRemovePluginVerificationOnDriver = 0xdc,
	SystemShadowStackInformation = 0xdd,
	SystemBuildVersionInformation = 0xde,
	SystemPoolLimitInformation = 0xdf,
	SystemCodeIntegrityAddDynamicStore = 0xe0,
	SystemCodeIntegrityClearDynamicStores = 0xe1,
	SystemPoolZeroingInformation = 0xe3,
	MaxSystemInfoClass = 0xe4
};

struct _SYSTEM_INTERRUPT_CPU_SET_INFORMATION {
	/*0000*/ ULONG Gsiv;
	/*0004*/ USHORT Group;
	/*0008*/ ULONGLONG CpuSets;
	/*0010*/
};

struct _SYSTEM_INTERRUPT_INFORMATION {
	/*0000*/ ULONG ContextSwitches;
	/*0004*/ ULONG DpcCount;
	/*0008*/ ULONG DpcRate;
	/*000c*/ ULONG TimeIncrement;
	/*0010*/ ULONG DpcBypassCount;
	/*0014*/ ULONG ApcBypassCount;
	/*0018*/
};

struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT {
	/*0000*/ ULONG Gsiv;
	/*0004*/ UCHAR ControllerInterrupt;
	/*0005*/ UCHAR EdgeInterrupt;
	/*0006*/ UCHAR IsPrimaryInterrupt;
	/*0008*/ _GROUP_AFFINITY TargetAffinity;
	/*0018*/
};

struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT {
	/*0000*/ ULONG Enabled : 01; // 0x00000001;
	/*0000*/ ULONG Reserved : 31; // 0xfffffffe;
	/*0000*/ ULONG AsULONG;
	/*0004*/
};

struct _SYSTEM_ISOLATED_USER_MODE_INFORMATION {
	/*0000*/ UCHAR SecureKernelRunning : 01; // 0x01;
	/*0000*/ UCHAR HvciEnabled : 01; // 0x02;
	/*0000*/ UCHAR HvciStrictMode : 01; // 0x04;
	/*0000*/ UCHAR DebugEnabled : 01; // 0x08;
	/*0000*/ UCHAR FirmwarePageProtection : 01; // 0x10;
	/*0000*/ UCHAR EncryptionKeyAvailable : 01; // 0x20;
	/*0000*/ UCHAR SpareFlags : 02; // 0xc0;
	/*0001*/ UCHAR TrustletRunning : 01; // 0x01;
	/*0001*/ UCHAR HvciDisableAllowed : 01; // 0x02;
	/*0001*/ UCHAR SpareFlags2 : 06; // 0xfc;
	/*0002*/ UCHAR Spare0[0x6];
	/*0008*/ ULONGLONG Spare1;
	/*0010*/
};

struct _SYSTEM_KERNEL_DEBUGGER_FLAGS {
	/*0000*/ UCHAR KernelDebuggerIgnoreUmExceptions;
	/*0001*/
};

struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION {
	/*0000*/ UCHAR KernelDebuggerEnabled;
	/*0001*/ UCHAR KernelDebuggerNotPresent;
	/*0002*/
};

struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX {
	/*0000*/ UCHAR DebuggerAllowed;
	/*0001*/ UCHAR DebuggerEnabled;
	/*0002*/ UCHAR DebuggerPresent;
	/*0003*/
};

struct _SYSTEM_KERNEL_VA_SHADOW_INFORMATION {
	
	/*0000*/ <unnamed-type-KvaShadowFlags> KvaShadowFlags;
	/*0004*/
};

struct _SYSTEM_LEAP_SECOND_INFORMATION {
	/*0000*/ UCHAR Enabled;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _SYSTEM_LEGACY_DRIVER_INFORMATION {
	/*0000*/ ULONG VetoType;
	/*0008*/ _UNICODE_STRING VetoList;
	/*0018*/
};

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
	
	/*0000*/ ULONGLONG ProcessorMask;
	/*0008*/ _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
	/*0010*/ <unnamed-type-ProcessorCore> ProcessorCore;
	/*0010*/ <unnamed-type-NumaNode> NumaNode;
	/*0010*/ _CACHE_DESCRIPTOR Cache;
	/*0010*/ ULONGLONG Reserved[0x2];
	/*0020*/
};

struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
	/*0000*/ _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
	/*0004*/ ULONG Size;
	/*0008*/ _PROCESSOR_RELATIONSHIP Processor;
	/*0008*/ _NUMA_NODE_RELATIONSHIP NumaNode;
	/*0008*/ _CACHE_RELATIONSHIP Cache;
	/*0008*/ _GROUP_RELATIONSHIP Group;
	/*0050*/
};

struct _SYSTEM_LOOKASIDE_INFORMATION {
	/*0000*/ USHORT CurrentDepth;
	/*0002*/ USHORT MaximumDepth;
	/*0004*/ ULONG TotalAllocates;
	/*0008*/ ULONG AllocateMisses;
	/*000c*/ ULONG TotalFrees;
	/*0010*/ ULONG FreeMisses;
	/*0014*/ ULONG Type;
	/*0018*/ ULONG Tag;
	/*001c*/ ULONG Size;
	/*0020*/
};

struct _SYSTEM_LOW_PRIORITY_IO_INFORMATION {
	/*0000*/ ULONG LowPriReadOperations;
	/*0004*/ ULONG LowPriWriteOperations;
	/*0008*/ ULONG KernelBumpedToNormalOperations;
	/*000c*/ ULONG LowPriPagingReadOperations;
	/*0010*/ ULONG KernelPagingReadsBumpedToNormal;
	/*0014*/ ULONG LowPriPagingWriteOperations;
	/*0018*/ ULONG KernelPagingWritesBumpedToNormal;
	/*001c*/ ULONG BoostedIrpCount;
	/*0020*/ ULONG BoostedPagingIrpCount;
	/*0024*/ ULONG BlanketBoostCount;
	/*0028*/
};

struct _SYSTEM_MANDATORY_LABEL_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_MANUFACTURING_INFORMATION {
	/*0000*/ ULONG Options;
	/*0008*/ _UNICODE_STRING ProfileName;
	/*0018*/
};

struct _SYSTEM_MEMORY_CHANNEL_INFORMATION {
	/*0000*/ ULONG ChannelNumber;
	/*0004*/ ULONG ChannelHeatIndex;
	/*0008*/ ULONGLONG TotalPageCount;
	/*0010*/ ULONGLONG ZeroPageCount;
	/*0018*/ ULONGLONG FreePageCount;
	/*0020*/ ULONGLONG StandbyPageCount;
	/*0028*/
};

struct _SYSTEM_MEMORY_INFORMATION {
	/*0000*/ ULONGLONG PagedPoolCommitPageCount;
	/*0008*/ ULONGLONG NonPagedPoolPageCount;
	/*0010*/ ULONGLONG MdlPageCount;
	/*0018*/ ULONGLONG CommitPageCount;
	/*0020*/
};

enum _SYSTEM_MEMORY_LIST_COMMAND {
	MemoryCaptureAccessedBits = 0x0,
	MemoryCaptureAndResetAccessedBits = 0x1,
	MemoryEmptyWorkingSets = 0x2,
	MemoryFlushModifiedList = 0x3,
	MemoryPurgeStandbyList = 0x4,
	MemoryPurgeLowPriorityStandbyList = 0x5,
	MemoryCommandMax = 0x6
};

struct _SYSTEM_MEMORY_LIST_INFORMATION {
	/*0000*/ ULONGLONG ZeroPageCount;
	/*0008*/ ULONGLONG FreePageCount;
	/*0010*/ ULONGLONG ModifiedPageCount;
	/*0018*/ ULONGLONG ModifiedNoWritePageCount;
	/*0020*/ ULONGLONG BadPageCount;
	/*0028*/ ULONGLONG PageCountByPriority[0x8];
	/*0068*/ ULONGLONG RepurposedPagesByPriority[0x8];
	/*00a8*/ ULONGLONG ModifiedPageCountPageFile;
	/*00b0*/
};

struct _SYSTEM_MEMORY_TOPOLOGY_INFORMATION {
	/*0000*/ ULONGLONG NumberOfRuns;
	/*0008*/ ULONG NumberOfNodes;
	/*000c*/ ULONG NumberOfChannels;
	/*0010*/ _PHYSICAL_CHANNEL_RUN Run[0x1];
	/*0030*/
};

struct _SYSTEM_MEMORY_USAGE_INFORMATION {
	/*0000*/ ULONGLONG TotalPhysicalBytes;
	/*0008*/ ULONGLONG AvailableBytes;
	/*0010*/ LONGLONG ResidentAvailableBytes;
	/*0018*/ ULONGLONG CommittedBytes;
	/*0020*/ ULONGLONG SharedCommittedBytes;
	/*0028*/ ULONGLONG CommitLimitBytes;
	/*0030*/ ULONGLONG PeakCommitmentBytes;
	/*0038*/
};

struct _SYSTEM_NET_RATE_CONTROL_CALLBACK_TABLE {
	/*0000*/ LONG (* NetRateControlDispatch)( _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER * );
	/*0008*/
};

struct _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER {
	/*0000*/ ULONGLONG PolicyCookie;
	/*0008*/ _SYSTEM_NET_RATE_CONTROL_TYPE Type;
	/*0010*/
};

struct _SYSTEM_NET_RATE_CONTROL_QUOTA_CONTEXT {
	/*0000*/ _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER Header;
	/*0010*/ ULONGLONG OverQuotaHistory;
	/*0018*/ ULONG IntervalLength;
	/*001c*/ ULONG NumberOfIntervals;
	/*0020*/
};

struct _SYSTEM_NET_RATE_CONTROL_SET_CONTEXT {
	/*0000*/ _SYSTEM_NET_RATE_CONTROL_CONTEXT_HEADER Header;
	/*0010*/ ULONGLONG MaxBandwidth;
	/*0018*/ _GUID * ContainerId;
	/*0020*/ ULONG Flags;
	/*0020*/ ULONG Set : 01; // 0x00000001;
	/*0020*/ ULONG Update : 01; // 0x00000002;
	/*0020*/ ULONG Clear : 01; // 0x00000004;
	/*0020*/ ULONG DscpTagEnabled : 01; // 0x00000008;
	/*0020*/ ULONG MaxBandwidthEnabled : 01; // 0x00000010;
	/*0020*/ ULONG Reserved : 27; // 0xffffffe0;
	/*0024*/ UCHAR DscpTag;
	/*0028*/
};

enum _SYSTEM_NET_RATE_CONTROL_TYPE {
	SystemNetRateControlSet = 0x0,
	SystemNetRateControlQuota = 0x1
};

struct _SYSTEM_NUMA_INFORMATION {
	/*0000*/ ULONG HighestNodeNumber;
	/*0004*/ ULONG Reserved;
	/*0008*/ _GROUP_AFFINITY ActiveProcessorsGroupAffinity[0x40];
	/*0008*/ ULONGLONG AvailableMemory[0x40];
	/*0008*/ ULONGLONG Pad[0x80];
	/*0408*/
};

struct _SYSTEM_NUMA_PROXIMITY_MAP {
	/*0000*/ ULONG NodeProximityId;
	/*0004*/ USHORT NodeNumber;
	/*0008*/
};

struct _SYSTEM_OBJECTTYPE_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG NumberOfObjects;
	/*0008*/ ULONG NumberOfHandles;
	/*000c*/ ULONG TypeIndex;
	/*0010*/ ULONG InvalidAttributes;
	/*0014*/ _GENERIC_MAPPING GenericMapping;
	/*0024*/ ULONG ValidAccessMask;
	/*0028*/ ULONG PoolType;
	/*002c*/ UCHAR SecurityRequired;
	/*002d*/ UCHAR WaitableObject;
	/*0030*/ _UNICODE_STRING TypeName;
	/*0040*/
};

struct _SYSTEM_OBJECT_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0008*/ void * Object;
	/*0010*/ void * CreatorUniqueProcess;
	/*0018*/ USHORT CreatorBackTraceIndex;
	/*001a*/ USHORT Flags;
	/*001c*/ LONG PointerCount;
	/*0020*/ LONG HandleCount;
	/*0024*/ ULONG PagedPoolCharge;
	/*0028*/ ULONG NonPagedPoolCharge;
	/*0030*/ void * ExclusiveProcessId;
	/*0038*/ void * SecurityDescriptor;
	/*0040*/ _OBJECT_NAME_INFORMATION NameInfo;
	/*0050*/
};

struct _SYSTEM_PAGEFILE_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG TotalSize;
	/*0008*/ ULONG TotalInUse;
	/*000c*/ ULONG PeakUsage;
	/*0010*/ _UNICODE_STRING PageFileName;
	/*0020*/
};

struct _SYSTEM_PAGEFILE_INFORMATION_EX {
	/*0000*/ _SYSTEM_PAGEFILE_INFORMATION Info;
	/*0020*/ ULONG MinimumSize;
	/*0024*/ ULONG MaximumSize;
	/*0028*/
};

struct _SYSTEM_PERFORMANCE_INFORMATION {
	/*0000*/ _LARGE_INTEGER IdleProcessTime;
	/*0008*/ _LARGE_INTEGER IoReadTransferCount;
	/*0010*/ _LARGE_INTEGER IoWriteTransferCount;
	/*0018*/ _LARGE_INTEGER IoOtherTransferCount;
	/*0020*/ ULONG IoReadOperationCount;
	/*0024*/ ULONG IoWriteOperationCount;
	/*0028*/ ULONG IoOtherOperationCount;
	/*002c*/ ULONG AvailablePages;
	/*0030*/ ULONG CommittedPages;
	/*0034*/ ULONG CommitLimit;
	/*0038*/ ULONG PeakCommitment;
	/*003c*/ ULONG PageFaultCount;
	/*0040*/ ULONG CopyOnWriteCount;
	/*0044*/ ULONG TransitionCount;
	/*0048*/ ULONG CacheTransitionCount;
	/*004c*/ ULONG DemandZeroCount;
	/*0050*/ ULONG PageReadCount;
	/*0054*/ ULONG PageReadIoCount;
	/*0058*/ ULONG CacheReadCount;
	/*005c*/ ULONG CacheIoCount;
	/*0060*/ ULONG DirtyPagesWriteCount;
	/*0064*/ ULONG DirtyWriteIoCount;
	/*0068*/ ULONG MappedPagesWriteCount;
	/*006c*/ ULONG MappedWriteIoCount;
	/*0070*/ ULONG PagedPoolPages;
	/*0074*/ ULONG NonPagedPoolPages;
	/*0078*/ ULONG PagedPoolAllocs;
	/*007c*/ ULONG PagedPoolFrees;
	/*0080*/ ULONG NonPagedPoolAllocs;
	/*0084*/ ULONG NonPagedPoolFrees;
	/*0088*/ ULONG FreeSystemPtes;
	/*008c*/ ULONG ResidentSystemCodePage;
	/*0090*/ ULONG TotalSystemDriverPages;
	/*0094*/ ULONG TotalSystemCodePages;
	/*0098*/ ULONG NonPagedPoolLookasideHits;
	/*009c*/ ULONG PagedPoolLookasideHits;
	/*00a0*/ ULONG AvailablePagedPoolPages;
	/*00a4*/ ULONG ResidentSystemCachePage;
	/*00a8*/ ULONG ResidentPagedPoolPage;
	/*00ac*/ ULONG ResidentSystemDriverPage;
	/*00b0*/ ULONG CcFastReadNoWait;
	/*00b4*/ ULONG CcFastReadWait;
	/*00b8*/ ULONG CcFastReadResourceMiss;
	/*00bc*/ ULONG CcFastReadNotPossible;
	/*00c0*/ ULONG CcFastMdlReadNoWait;
	/*00c4*/ ULONG CcFastMdlReadWait;
	/*00c8*/ ULONG CcFastMdlReadResourceMiss;
	/*00cc*/ ULONG CcFastMdlReadNotPossible;
	/*00d0*/ ULONG CcMapDataNoWait;
	/*00d4*/ ULONG CcMapDataWait;
	/*00d8*/ ULONG CcMapDataNoWaitMiss;
	/*00dc*/ ULONG CcMapDataWaitMiss;
	/*00e0*/ ULONG CcPinMappedDataCount;
	/*00e4*/ ULONG CcPinReadNoWait;
	/*00e8*/ ULONG CcPinReadWait;
	/*00ec*/ ULONG CcPinReadNoWaitMiss;
	/*00f0*/ ULONG CcPinReadWaitMiss;
	/*00f4*/ ULONG CcCopyReadNoWait;
	/*00f8*/ ULONG CcCopyReadWait;
	/*00fc*/ ULONG CcCopyReadNoWaitMiss;
	/*0100*/ ULONG CcCopyReadWaitMiss;
	/*0104*/ ULONG CcMdlReadNoWait;
	/*0108*/ ULONG CcMdlReadWait;
	/*010c*/ ULONG CcMdlReadNoWaitMiss;
	/*0110*/ ULONG CcMdlReadWaitMiss;
	/*0114*/ ULONG CcReadAheadIos;
	/*0118*/ ULONG CcLazyWriteIos;
	/*011c*/ ULONG CcLazyWritePages;
	/*0120*/ ULONG CcDataFlushes;
	/*0124*/ ULONG CcDataPages;
	/*0128*/ ULONG ContextSwitches;
	/*012c*/ ULONG FirstLevelTbFills;
	/*0130*/ ULONG SecondLevelTbFills;
	/*0134*/ ULONG SystemCalls;
	/*0138*/ ULONGLONG CcTotalDirtyPages;
	/*0140*/ ULONGLONG CcDirtyPageThreshold;
	/*0148*/ LONGLONG ResidentAvailablePages;
	/*0150*/ ULONGLONG SharedCommittedPages;
	/*0158*/
};

struct _SYSTEM_PHYSICAL_MEMORY_INFORMATION {
	/*0000*/ ULONGLONG TotalPhysicalBytes;
	/*0008*/ ULONGLONG LowestPhysicalAddress;
	/*0010*/ ULONGLONG HighestPhysicalAddress;
	/*0018*/
};

enum _SYSTEM_PIXEL_FORMAT {
	SystemPixelFormatUnknown = 0x0,
	SystemPixelFormatR8G8B8 = 0x1,
	SystemPixelFormatR8G8B8X8 = 0x2,
	SystemPixelFormatB8G8R8 = 0x3,
	SystemPixelFormatB8G8R8X8 = 0x4
};

struct _SYSTEM_PLATFORM_BINARY_INFORMATION {
	/*0000*/ ULONGLONG PhysicalAddress;
	/*0008*/ void * HandoffBuffer;
	/*0010*/ void * CommandLineBuffer;
	/*0018*/ ULONG HandoffBufferSize;
	/*001c*/ ULONG CommandLineBufferSize;
	/*0020*/
};

struct _SYSTEM_POLICY_INFORMATION {
	/*0000*/ void * InputData;
	/*0008*/ void * OutputData;
	/*0010*/ ULONG InputDataSize;
	/*0014*/ ULONG OutputDataSize;
	/*0018*/ ULONG Version;
	/*0020*/
};

struct _SYSTEM_POOLTAG {
	/*0000*/ UCHAR Tag[0x4];
	/*0000*/ ULONG TagUlong;
	/*0004*/ ULONG PagedAllocs;
	/*0008*/ ULONG PagedFrees;
	/*0010*/ ULONGLONG PagedUsed;
	/*0018*/ ULONG NonPagedAllocs;
	/*001c*/ ULONG NonPagedFrees;
	/*0020*/ ULONGLONG NonPagedUsed;
	/*0028*/
};

struct _SYSTEM_POOLTAG_INFORMATION {
	/*0000*/ ULONG Count;
	/*0008*/ _SYSTEM_POOLTAG TagInfo[0x1];
	/*0030*/
};

struct _SYSTEM_POOL_ENTRY {
	/*0000*/ UCHAR Allocated;
	/*0001*/ UCHAR Spare0;
	/*0002*/ USHORT AllocatorBackTraceIndex;
	/*0004*/ ULONG Size;
	/*0008*/ UCHAR Tag[0x4];
	/*0008*/ ULONG TagUlong;
	/*0008*/ void * ProcessChargedQuota;
	/*0010*/
};

struct _SYSTEM_POOL_INFORMATION {
	/*0000*/ ULONGLONG TotalSize;
	/*0008*/ void * FirstEntry;
	/*0010*/ USHORT EntryOverhead;
	/*0012*/ UCHAR PoolTagPresent;
	/*0013*/ UCHAR Spare0;
	/*0014*/ ULONG NumberOfEntries;
	/*0018*/ _SYSTEM_POOL_ENTRY Entries[0x1];
	/*0028*/
};

struct _SYSTEM_POOL_ZEROING_INFORMATION {
	/*0000*/ UCHAR PoolZeroingSupportPresent;
	/*0001*/
};

struct _SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION {
	/*0000*/ UCHAR EfiLauncherEnabled;
	/*0001*/
};

struct _SYSTEM_POWER_INFORMATION {
	/*0000*/ ULONG MaxIdlenessAllowed;
	/*0004*/ ULONG Idleness;
	/*0008*/ ULONG TimeRemaining;
	/*000c*/ UCHAR CoolingMode;
	/*0010*/
};

struct _SYSTEM_POWER_LOGGING_ENTRY {
	/*0000*/ ULONG Reason;
	/*0004*/ ULONG States;
	/*0008*/
};

struct _SYSTEM_POWER_POLICY {
	/*0000*/ ULONG Revision;
	/*0004*/ POWER_ACTION_POLICY PowerButton;
	/*0010*/ POWER_ACTION_POLICY SleepButton;
	/*001c*/ POWER_ACTION_POLICY LidClose;
	/*0028*/ _SYSTEM_POWER_STATE LidOpenWake;
	/*002c*/ ULONG Reserved;
	/*0030*/ POWER_ACTION_POLICY Idle;
	/*003c*/ ULONG IdleTimeout;
	/*0040*/ UCHAR IdleSensitivity;
	/*0041*/ UCHAR DynamicThrottle;
	/*0042*/ UCHAR Spare2[0x2];
	/*0044*/ _SYSTEM_POWER_STATE MinSleep;
	/*0048*/ _SYSTEM_POWER_STATE MaxSleep;
	/*004c*/ _SYSTEM_POWER_STATE ReducedLatencySleep;
	/*0050*/ ULONG WinLogonFlags;
	/*0054*/ ULONG Spare3;
	/*0058*/ ULONG DozeS4Timeout;
	/*005c*/ ULONG BroadcastCapacityResolution;
	/*0060*/ SYSTEM_POWER_LEVEL DischargePolicy[0x4];
	/*00c0*/ ULONG VideoTimeout;
	/*00c4*/ UCHAR VideoDimDisplay;
	/*00c8*/ ULONG VideoReserved[0x3];
	/*00d4*/ ULONG SpindownTimeout;
	/*00d8*/ UCHAR OptimizeForPower;
	/*00d9*/ UCHAR FanThrottleTolerance;
	/*00da*/ UCHAR ForcedThrottle;
	/*00db*/ UCHAR MinThrottle;
	/*00dc*/ POWER_ACTION_POLICY OverThrottled;
	/*00e8*/
};

enum _SYSTEM_POWER_STATE {
	PowerSystemUnspecified = 0x0,
	PowerSystemWorking = 0x1,
	PowerSystemSleeping1 = 0x2,
	PowerSystemSleeping2 = 0x3,
	PowerSystemSleeping3 = 0x4,
	PowerSystemHibernate = 0x5,
	PowerSystemShutdown = 0x6,
	PowerSystemMaximum = 0x7
};

struct _SYSTEM_POWER_STATE_CONTEXT {
	/*0000*/ ULONG Reserved1 : 08; // 0x000000ff;
	/*0000*/ ULONG TargetSystemState : 04; // 0x00000f00;
	/*0000*/ ULONG EffectiveSystemState : 04; // 0x0000f000;
	/*0000*/ ULONG CurrentSystemState : 04; // 0x000f0000;
	/*0000*/ ULONG IgnoreHibernationPath : 01; // 0x00100000;
	/*0000*/ ULONG PseudoTransition : 01; // 0x00200000;
	/*0000*/ ULONG KernelSoftReboot : 01; // 0x00400000;
	/*0000*/ ULONG DirectedDripsTransition : 01; // 0x00800000;
	/*0000*/ ULONG Reserved2 : 08; // 0xff000000;
	/*0000*/ ULONG ContextAsUlong;
	/*0004*/
};

struct _SYSTEM_POWER_STATE_DISABLE_REASON {
	/*0000*/ UCHAR AffectedState[0x8];
	/*0008*/ ULONG PowerReasonCode;
	/*000c*/ ULONG PowerReasonLength;
	/*0010*/
};

struct _SYSTEM_POWER_STATUS {
	/*0000*/ UCHAR ACLineStatus;
	/*0001*/ UCHAR BatteryFlag;
	/*0002*/ UCHAR BatteryLifePercent;
	/*0003*/ UCHAR SystemStatusFlag;
	/*0004*/ ULONG BatteryLifeTime;
	/*0008*/ ULONG BatteryFullLifeTime;
	/*000c*/
};

struct _SYSTEM_PREFETCH_OPTIONS {
	/*0000*/ ULONG LowerPriority : 01; // 0x00000001;
	/*0000*/ ULONG VirtualOffsets : 01; // 0x00000002;
	/*0000*/ ULONG TrickleIOs : 01; // 0x00000004;
	/*0000*/ ULONG SkipInStorePages : 01; // 0x00000008;
	/*0000*/ ULONG PrefetchFilesByVa : 01; // 0x00000010;
	/*0000*/ ULONG SkipMemoryStorePages : 01; // 0x00000020;
	/*0000*/ ULONG Spare : 02; // 0x000000c0;
	/*0000*/ ULONG ScenarioType : 08; // 0x0000ff00;
	/*0004*/
};

struct _SYSTEM_PREFETCH_PATCH_INFORMATION {
	/*0000*/ ULONG PrefetchPatchCount;
	/*0004*/
};

struct _SYSTEM_PREFETCH_STATS {
	/*0000*/ ULONG DemandFilePageCount;
	/*0004*/ ULONG DemandFileIOCount;
	/*0008*/ ULONG TrickleFilePageCount;
	/*000c*/ ULONG TrickleFileIOCount;
	/*0010*/ ULONG DemandPrivatePageCount;
	/*0014*/ ULONG DemandPrivateIOCount;
	/*0018*/ ULONG TricklePrivatePageCount;
	/*001c*/ ULONG TricklePrivateIOCount;
	/*0020*/
};

struct _SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION {
	/*0000*/ ULONGLONG Cycles[0x4][0x2];
	/*0040*/
};

struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
	/*0000*/ ULONGLONG CycleTime;
	/*0008*/
};

struct _SYSTEM_PROCESSOR_FEATURES_INFORMATION {
	/*0000*/ ULONGLONG ProcessorFeatureBits;
	/*0008*/ ULONGLONG Reserved[0x3];
	/*0020*/
};

struct _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION {
	/*0000*/ ULONGLONG CycleTime;
	/*0008*/
};

struct _SYSTEM_PROCESSOR_IDLE_INFORMATION {
	/*0000*/ ULONGLONG IdleTime;
	/*0008*/ ULONGLONG C1Time;
	/*0010*/ ULONGLONG C2Time;
	/*0018*/ ULONGLONG C3Time;
	/*0020*/ ULONG C1Transitions;
	/*0024*/ ULONG C2Transitions;
	/*0028*/ ULONG C3Transitions;
	/*002c*/ ULONG Padding;
	/*0030*/
};

struct _SYSTEM_PROCESSOR_INFORMATION {
	/*0000*/ USHORT ProcessorArchitecture;
	/*0002*/ USHORT ProcessorLevel;
	/*0004*/ USHORT ProcessorRevision;
	/*0006*/ USHORT MaximumProcessors;
	/*0008*/ ULONG ProcessorFeatureBits;
	/*000c*/
};

struct _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION {
	/*0000*/ ULONG Operation;
	/*0004*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION {
	/*0000*/ ULONG ProcessorCount;
	/*0004*/ ULONG Offsets[0x1];
	/*0008*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT {
	/*0000*/ ULONGLONG Hits;
	/*0008*/ UCHAR PercentFrequency;
	/*0010*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION {
	/*0000*/ _LARGE_INTEGER IdleTime;
	/*0008*/ _LARGE_INTEGER KernelTime;
	/*0010*/ _LARGE_INTEGER UserTime;
	/*0018*/ _LARGE_INTEGER DpcTime;
	/*0020*/ _LARGE_INTEGER InterruptTime;
	/*0028*/ ULONG InterruptCount;
	/*0030*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX {
	/*0000*/ _LARGE_INTEGER IdleTime;
	/*0008*/ _LARGE_INTEGER KernelTime;
	/*0010*/ _LARGE_INTEGER UserTime;
	/*0018*/ _LARGE_INTEGER DpcTime;
	/*0020*/ _LARGE_INTEGER InterruptTime;
	/*0028*/ ULONG InterruptCount;
	/*002c*/ ULONG Spare0;
	/*0030*/ _LARGE_INTEGER AvailableTime;
	/*0038*/ _LARGE_INTEGER Spare1;
	/*0040*/ _LARGE_INTEGER Spare2;
	/*0048*/
};

struct _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION {
	/*0000*/ ULONG ProcessorNumber;
	/*0004*/ ULONG StateCount;
	/*0008*/ _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT States[0x1];
	/*0018*/
};

struct _SYSTEM_PROCESSOR_POLICY_INFORMATION {
	/*0000*/ ULONG Length;
	/*0004*/ ULONG PolicyId;
	/*0008*/ _XSAVE_POLICY Policy;
	/*0038*/
};

struct _SYSTEM_PROCESSOR_POWER_INFORMATION {
	/*0000*/ UCHAR CurrentFrequency;
	/*0001*/ UCHAR ThermalLimitFrequency;
	/*0002*/ UCHAR ConstantThrottleFrequency;
	/*0003*/ UCHAR DegradedThrottleFrequency;
	/*0004*/ UCHAR LastBusyFrequency;
	/*0005*/ UCHAR LastC3Frequency;
	/*0006*/ UCHAR LastAdjustedBusyFrequency;
	/*0007*/ UCHAR ProcessorMinThrottle;
	/*0008*/ UCHAR ProcessorMaxThrottle;
	/*000c*/ ULONG NumberOfFrequencies;
	/*0010*/ ULONG PromotionCount;
	/*0014*/ ULONG DemotionCount;
	/*0018*/ ULONG ErrorCount;
	/*001c*/ ULONG RetryCount;
	/*0020*/ ULONGLONG CurrentFrequencyTime;
	/*0028*/ ULONGLONG CurrentProcessorTime;
	/*0030*/ ULONGLONG CurrentProcessorIdleTime;
	/*0038*/ ULONGLONG LastProcessorTime;
	/*0040*/ ULONGLONG LastProcessorIdleTime;
	/*0048*/ ULONGLONG Energy;
	/*0050*/
};

struct _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA {
	/*0000*/ _PROCESSOR_PROFILE_CONTROL_AREA * ProcessorProfileControlArea;
	/*0008*/ UCHAR Allocate;
	/*0010*/
};

enum _SYSTEM_PROCESS_CLASSIFICATION {
	SystemProcessClassificationNormal = 0x0,
	SystemProcessClassificationSystem = 0x1,
	SystemProcessClassificationSecureSystem = 0x2,
	SystemProcessClassificationMemCompression = 0x3,
	SystemProcessClassificationRegistry = 0x4,
	SystemProcessClassificationMaximum = 0x5
};

struct _SYSTEM_PROCESS_ID_INFORMATION {
	/*0000*/ void * ProcessId;
	/*0008*/ _UNICODE_STRING ImageName;
	/*0018*/
};

struct _SYSTEM_PROCESS_INFORMATION {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG NumberOfThreads;
	/*0008*/ _LARGE_INTEGER WorkingSetPrivateSize;
	/*0010*/ ULONG HardFaultCount;
	/*0014*/ ULONG NumberOfThreadsHighWatermark;
	/*0018*/ ULONGLONG CycleTime;
	/*0020*/ _LARGE_INTEGER CreateTime;
	/*0028*/ _LARGE_INTEGER UserTime;
	/*0030*/ _LARGE_INTEGER KernelTime;
	/*0038*/ _UNICODE_STRING ImageName;
	/*0048*/ LONG BasePriority;
	/*0050*/ void * UniqueProcessId;
	/*0058*/ void * InheritedFromUniqueProcessId;
	/*0060*/ ULONG HandleCount;
	/*0064*/ ULONG SessionId;
	/*0068*/ ULONGLONG UniqueProcessKey;
	/*0070*/ ULONGLONG PeakVirtualSize;
	/*0078*/ ULONGLONG VirtualSize;
	/*0080*/ ULONG PageFaultCount;
	/*0088*/ ULONGLONG PeakWorkingSetSize;
	/*0090*/ ULONGLONG WorkingSetSize;
	/*0098*/ ULONGLONG QuotaPeakPagedPoolUsage;
	/*00a0*/ ULONGLONG QuotaPagedPoolUsage;
	/*00a8*/ ULONGLONG QuotaPeakNonPagedPoolUsage;
	/*00b0*/ ULONGLONG QuotaNonPagedPoolUsage;
	/*00b8*/ ULONGLONG PagefileUsage;
	/*00c0*/ ULONGLONG PeakPagefileUsage;
	/*00c8*/ ULONGLONG PrivatePageCount;
	/*00d0*/ _LARGE_INTEGER ReadOperationCount;
	/*00d8*/ _LARGE_INTEGER WriteOperationCount;
	/*00e0*/ _LARGE_INTEGER OtherOperationCount;
	/*00e8*/ _LARGE_INTEGER ReadTransferCount;
	/*00f0*/ _LARGE_INTEGER WriteTransferCount;
	/*00f8*/ _LARGE_INTEGER OtherTransferCount;
	/*0100*/
};

struct _SYSTEM_PROCESS_INFORMATION_EXTENSION {
	/*0000*/ _PROCESS_DISK_COUNTERS DiskCounters;
	/*0028*/ ULONGLONG ContextSwitches;
	/*0030*/ ULONG Flags;
	/*0030*/ ULONG HasStrongId : 01; // 0x00000001;
	/*0030*/ ULONG Classification : 04; // 0x0000001e;
	/*0030*/ ULONG BackgroundActivityModerated : 01; // 0x00000020;
	/*0030*/ ULONG Spare : 26; // 0xffffffc0;
	/*0034*/ ULONG UserSidOffset;
	/*0038*/ ULONG PackageFullNameOffset;
	/*0040*/ _PROCESS_ENERGY_VALUES EnergyValues;
	/*0150*/ ULONG AppIdOffset;
	/*0158*/ ULONGLONG SharedCommitCharge;
	/*0160*/ ULONG JobObjectId;
	/*0164*/ ULONG SpareUlong;
	/*0168*/ ULONGLONG ProcessSequenceNumber;
	/*0170*/
};

struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION {
	/*0000*/ ULONG Version;
	/*0004*/ _QUERY_PERFORMANCE_COUNTER_FLAGS Flags;
	/*0008*/ _QUERY_PERFORMANCE_COUNTER_FLAGS ValidFlags;
	/*000c*/
};

struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION {
	/*0000*/ ULONG TimeAdjustment;
	/*0004*/ ULONG TimeIncrement;
	/*0008*/ UCHAR Enable;
	/*000c*/
};

struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE {
	/*0000*/ ULONGLONG TimeAdjustment;
	/*0008*/ ULONGLONG TimeIncrement;
	/*0010*/ UCHAR Enable;
	/*0018*/
};

struct _SYSTEM_REF_TRACE_INFORMATION {
	/*0000*/ UCHAR TraceEnable;
	/*0001*/ UCHAR TracePermanent;
	/*0008*/ _UNICODE_STRING TraceProcessName;
	/*0018*/ _UNICODE_STRING TracePoolTags;
	/*0028*/
};

struct _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS {
	/*0000*/ void * KeyHandle;
	/*0008*/ _UNICODE_STRING * ValueNamePointer;
	/*0010*/ ULONG * RequiredLengthPointer;
	/*0018*/ UCHAR * Buffer;
	/*0020*/ ULONG BufferLength;
	/*0024*/ ULONG Type;
	/*0028*/ UCHAR * AppendBuffer;
	/*0030*/ ULONG AppendBufferLength;
	/*0034*/ UCHAR CreateIfDoesntExist;
	/*0035*/ UCHAR TruncateExistingValue;
	/*0038*/
};

struct _SYSTEM_REGISTRY_QUOTA_INFORMATION {
	/*0000*/ ULONG RegistryQuotaAllowed;
	/*0004*/ ULONG RegistryQuotaUsed;
	/*0008*/ ULONGLONG PagedPoolSize;
	/*0010*/
};

struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_ROOT_SILO_INFORMATION {
	/*0000*/ ULONG NumberOfSilos;
	/*0004*/ ULONG SiloIdList[0x1];
	/*0008*/
};

struct _SYSTEM_SCOPED_POLICY_ID_ACE {
	/*0000*/ _ACE_HEADER Header;
	/*0004*/ ULONG Mask;
	/*0008*/ ULONG SidStart;
	/*000c*/
};

struct _SYSTEM_SECUREBOOT_INFORMATION {
	/*0000*/ UCHAR SecureBootEnabled;
	/*0001*/ UCHAR SecureBootCapable;
	/*0002*/
};

struct _SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION {
	/*0000*/ ULONG PlatformManifestSize;
	/*0004*/ UCHAR PlatformManifest[0x1];
	/*0008*/
};

struct _SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION {
	/*0000*/ _SYSTEM_SECUREBOOT_POLICY_INFORMATION PolicyInformation;
	/*0018*/ ULONG PolicySize;
	/*001c*/ UCHAR Policy[0x1];
	/*0020*/
};

struct _SYSTEM_SECUREBOOT_POLICY_INFORMATION {
	/*0000*/ _GUID PolicyPublisher;
	/*0010*/ ULONG PolicyVersion;
	/*0014*/ ULONG PolicyOptions;
	/*0018*/
};

struct _SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION {
	/*0000*/ ULONG ExtentCount;
	/*0004*/ ULONG ValidStructureSize;
	/*0008*/ ULONG NextExtentIndex;
	/*000c*/ ULONG ExtentRestart;
	/*0010*/ ULONG CycleCount;
	/*0014*/ ULONG TimeoutCount;
	/*0018*/ ULONGLONG CycleTime;
	/*0020*/ ULONGLONG CycleTimeMax;
	/*0028*/ ULONGLONG ExtentTime;
	/*0030*/ ULONG ExtentTimeIndex;
	/*0034*/ ULONG ExtentTimeMaxIndex;
	/*0038*/ ULONGLONG ExtentTimeMax;
	/*0040*/ ULONGLONG HyperFlushTimeMax;
	/*0048*/ ULONGLONG TranslateVaTimeMax;
	/*0050*/ ULONGLONG DebugExemptionCount;
	/*0058*/ ULONGLONG TbHitCount;
	/*0060*/ ULONGLONG TbMissCount;
	/*0068*/ ULONGLONG VinaPendingYield;
	/*0070*/ ULONGLONG HashCycles;
	/*0078*/ ULONG HistogramOffset;
	/*007c*/ ULONG HistogramBuckets;
	/*0080*/ ULONG HistogramShift;
	/*0084*/ ULONG Reserved1;
	/*0088*/ ULONGLONG PageNotPresentCount;
	/*0090*/
};

struct _SYSTEM_SECURITY_MODEL_INFORMATION {
	
	/*0000*/ <unnamed-type-SecurityModelFlags> SecurityModelFlags;
	/*0004*/
};

struct _SYSTEM_SESSION_BIGPOOL_INFORMATION {
	/*0000*/ ULONGLONG NextEntryOffset;
	/*0008*/ ULONG SessionId;
	/*000c*/ ULONG Count;
	/*0010*/ _SYSTEM_BIGPOOL_ENTRY AllocatedInfo[0x1];
	/*0028*/
};

struct _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION {
	/*0000*/ ULONGLONG NextEntryOffset;
	/*0008*/ ULONG SessionId;
	/*000c*/ ULONG ViewFailures;
	/*0010*/ ULONGLONG NumberOfBytesAvailable;
	/*0018*/ ULONGLONG NumberOfBytesAvailableContiguous;
	/*0020*/
};

struct _SYSTEM_SESSION_POOLTAG_INFORMATION {
	/*0000*/ ULONGLONG NextEntryOffset;
	/*0008*/ ULONG SessionId;
	/*000c*/ ULONG Count;
	/*0010*/ _SYSTEM_POOLTAG TagInfo[0x1];
	/*0038*/
};

struct _SYSTEM_SESSION_PROCESS_INFORMATION {
	/*0000*/ ULONG SessionId;
	/*0004*/ ULONG SizeOfBuf;
	/*0008*/ void * Buffer;
	/*0010*/
};

struct _SYSTEM_SET_TIME_ADJUST_INFORMATION {
	/*0000*/ ULONG TimeAdjustment;
	/*0004*/ UCHAR Enable;
	/*0008*/
};

struct _SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE {
	/*0000*/ ULONGLONG TimeAdjustment;
	/*0008*/ UCHAR Enable;
	/*0010*/
};

struct _SYSTEM_SHADOW_STACK_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0000*/ ULONG CetCapable : 01; // 0x00000001;
	/*0000*/ ULONG UserCetAllowed : 01; // 0x00000002;
	/*0000*/ ULONG ReservedForUserCet : 06; // 0x000000fc;
	/*0000*/ ULONG KernelCetEnabled : 01; // 0x00000100;
	/*0000*/ ULONG ReservedForKernelCet : 07; // 0x0000fe00;
	/*0000*/ ULONG Reserved : 16; // 0xffff0000;
	/*0004*/
};

struct _SYSTEM_SINGLE_MODULE_INFORMATION {
	/*0000*/ void * TargetModuleAddress;
	/*0008*/ _RTL_PROCESS_MODULE_INFORMATION_EX ExInfo;
	/*0148*/
};

struct _SYSTEM_SPECIAL_POOL_INFORMATION {
	/*0000*/ ULONG PoolTag;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _SYSTEM_SPECULATION_CONTROL_INFORMATION {
	
	/*0000*/ <unnamed-type-SpeculationControlFlags> SpeculationControlFlags;
	/*0004*/
};

struct _SYSTEM_SYSTEM_DISK_INFORMATION {
	/*0000*/ _UNICODE_STRING SystemDisk;
	/*0010*/
};

struct _SYSTEM_SYSTEM_PARTITION_INFORMATION {
	/*0000*/ _UNICODE_STRING SystemPartition;
	/*0010*/
};

struct _SYSTEM_THREAD_CID_PRIORITY_INFORMATION {
	/*0000*/ _CLIENT_ID ClientId;
	/*0010*/ LONG Priority;
	/*0018*/
};

struct _SYSTEM_THREAD_INFORMATION {
	/*0000*/ _LARGE_INTEGER KernelTime;
	/*0008*/ _LARGE_INTEGER UserTime;
	/*0010*/ _LARGE_INTEGER CreateTime;
	/*0018*/ ULONG WaitTime;
	/*0020*/ void * StartAddress;
	/*0028*/ _CLIENT_ID ClientId;
	/*0038*/ LONG Priority;
	/*003c*/ LONG BasePriority;
	/*0040*/ ULONG ContextSwitches;
	/*0044*/ ULONG ThreadState;
	/*0048*/ ULONG WaitReason;
	/*0050*/
};

struct _SYSTEM_TIMEOFDAY_INFORMATION {
	/*0000*/ _LARGE_INTEGER BootTime;
	/*0008*/ _LARGE_INTEGER CurrentTime;
	/*0010*/ _LARGE_INTEGER TimeZoneBias;
	/*0018*/ ULONG TimeZoneId;
	/*001c*/ ULONG Reserved;
	/*0020*/ ULONGLONG BootTimeBias;
	/*0028*/ ULONGLONG SleepTimeBias;
	/*0030*/
};

struct _SYSTEM_TPM_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0004*/
};

struct _SYSTEM_VA_LIST_INFORMATION {
	/*0000*/ ULONGLONG VirtualSize;
	/*0008*/ ULONGLONG VirtualPeak;
	/*0010*/ ULONGLONG VirtualLimit;
	/*0018*/ ULONGLONG AllocationFailures;
	/*0020*/
};

enum _SYSTEM_VA_TYPE {
	SystemVaTypeAll = 0x0,
	SystemVaTypeNonPagedPool = 0x1,
	SystemVaTypePagedPool = 0x2,
	SystemVaTypeSystemCache = 0x3,
	SystemVaTypeSystemPtes = 0x4,
	SystemVaTypeSessionSpace = 0x5,
	SystemVaTypeMax = 0x6
};

struct _SYSTEM_VDM_INSTEMUL_INFO {
	/*0000*/ ULONG SegmentNotPresent;
	/*0004*/ ULONG VdmOpcode0F;
	/*0008*/ ULONG OpcodeESPrefix;
	/*000c*/ ULONG OpcodeCSPrefix;
	/*0010*/ ULONG OpcodeSSPrefix;
	/*0014*/ ULONG OpcodeDSPrefix;
	/*0018*/ ULONG OpcodeFSPrefix;
	/*001c*/ ULONG OpcodeGSPrefix;
	/*0020*/ ULONG OpcodeOPER32Prefix;
	/*0024*/ ULONG OpcodeADDR32Prefix;
	/*0028*/ ULONG OpcodeINSB;
	/*002c*/ ULONG OpcodeINSW;
	/*0030*/ ULONG OpcodeOUTSB;
	/*0034*/ ULONG OpcodeOUTSW;
	/*0038*/ ULONG OpcodePUSHF;
	/*003c*/ ULONG OpcodePOPF;
	/*0040*/ ULONG OpcodeINTnn;
	/*0044*/ ULONG OpcodeINTO;
	/*0048*/ ULONG OpcodeIRET;
	/*004c*/ ULONG OpcodeINBimm;
	/*0050*/ ULONG OpcodeINWimm;
	/*0054*/ ULONG OpcodeOUTBimm;
	/*0058*/ ULONG OpcodeOUTWimm;
	/*005c*/ ULONG OpcodeINB;
	/*0060*/ ULONG OpcodeINW;
	/*0064*/ ULONG OpcodeOUTB;
	/*0068*/ ULONG OpcodeOUTW;
	/*006c*/ ULONG OpcodeLOCKPrefix;
	/*0070*/ ULONG OpcodeREPNEPrefix;
	/*0074*/ ULONG OpcodeREPPrefix;
	/*0078*/ ULONG OpcodeHLT;
	/*007c*/ ULONG OpcodeCLI;
	/*0080*/ ULONG OpcodeSTI;
	/*0084*/ ULONG BopCount;
	/*0088*/
};

struct _SYSTEM_VERIFIER_CANCELLATION_INFORMATION {
	/*0000*/ ULONG CancelProbability;
	/*0004*/ ULONG CancelThreshold;
	/*0008*/ ULONG CompletionThreshold;
	/*000c*/ ULONG CancellationVerifierDisabled;
	/*0010*/ ULONG AvailableIssues;
	/*0018*/ _SYSTEM_VERIFIER_ISSUE Issues[0x80];
	/*1018*/
};

struct _SYSTEM_VERIFIER_COUNTERS_INFORMATION {
	/*0000*/ _SYSTEM_VERIFIER_INFORMATION Legacy;
	/*0090*/ ULONG RaiseIrqls;
	/*0094*/ ULONG AcquireSpinLocks;
	/*0098*/ ULONG SynchronizeExecutions;
	/*009c*/ ULONG AllocationsWithNoTag;
	/*00a0*/ ULONG AllocationsFailed;
	/*00a4*/ ULONG AllocationsFailedDeliberately;
	/*00a8*/ ULONGLONG LockedBytes;
	/*00b0*/ ULONGLONG PeakLockedBytes;
	/*00b8*/ ULONGLONG MappedLockedBytes;
	/*00c0*/ ULONGLONG PeakMappedLockedBytes;
	/*00c8*/ ULONGLONG MappedIoSpaceBytes;
	/*00d0*/ ULONGLONG PeakMappedIoSpaceBytes;
	/*00d8*/ ULONGLONG PagesForMdlBytes;
	/*00e0*/ ULONGLONG PeakPagesForMdlBytes;
	/*00e8*/ ULONGLONG ContiguousMemoryBytes;
	/*00f0*/ ULONGLONG PeakContiguousMemoryBytes;
	/*00f8*/ ULONG ExecutePoolTypes;
	/*00fc*/ ULONG ExecutePageProtections;
	/*0100*/ ULONG ExecutePageMappings;
	/*0104*/ ULONG ExecuteWriteSections;
	/*0108*/ ULONG SectionAlignmentFailures;
	/*010c*/ ULONG IATInExecutableSection;
	/*0110*/
};

struct _SYSTEM_VERIFIER_FAULTS_INFORMATION {
	/*0000*/ ULONG Probability;
	/*0004*/ ULONG MaxProbability;
	/*0008*/ _UNICODE_STRING PoolTags;
	/*0018*/ _UNICODE_STRING Applications;
	/*0028*/
};

struct _SYSTEM_VERIFIER_INFORMATION {
	
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG Level;
	/*0008*/ ULONG RuleClasses[0x2];
	/*0010*/ ULONG TriageContext;
	/*0014*/ <unnamed-type-u1> u1;
	/*0018*/ _UNICODE_STRING DriverName;
	/*0028*/ ULONG RaiseIrqls;
	/*002c*/ ULONG AcquireSpinLocks;
	/*0030*/ ULONG SynchronizeExecutions;
	/*0034*/ ULONG AllocationsAttempted;
	/*0038*/ ULONG AllocationsSucceeded;
	/*003c*/ ULONG AllocationsSucceededSpecialPool;
	/*0040*/ ULONG AllocationsWithNoTag;
	/*0044*/ ULONG TrimRequests;
	/*0048*/ ULONG Trims;
	/*004c*/ ULONG AllocationsFailed;
	/*0050*/ ULONG AllocationsFailedDeliberately;
	/*0054*/ ULONG Loads;
	/*0058*/ ULONG Unloads;
	/*005c*/ ULONG UnTrackedPool;
	/*0060*/ ULONG CurrentPagedPoolAllocations;
	/*0064*/ ULONG CurrentNonPagedPoolAllocations;
	/*0068*/ ULONG PeakPagedPoolAllocations;
	/*006c*/ ULONG PeakNonPagedPoolAllocations;
	/*0070*/ ULONGLONG PagedPoolUsageInBytes;
	/*0078*/ ULONGLONG NonPagedPoolUsageInBytes;
	/*0080*/ ULONGLONG PeakPagedPoolUsageInBytes;
	/*0088*/ ULONGLONG PeakNonPagedPoolUsageInBytes;
	/*0090*/
};

struct _SYSTEM_VERIFIER_INFORMATION_EX {
	/*0000*/ ULONG VerifyMode;
	/*0004*/ ULONG OptionChanges;
	/*0008*/ _UNICODE_STRING PreviousBucketName;
	/*0018*/ ULONG IrpCancelTimeoutMsec;
	/*001c*/ ULONG VerifierExtensionEnabled;
	/*0020*/ ULONG Reserved[0x1];
	/*0028*/
};

struct _SYSTEM_VERIFIER_ISSUE {
	/*0000*/ ULONGLONG IssueType;
	/*0008*/ void * Address;
	/*0010*/ ULONGLONG Parameters[0x2];
	/*0020*/
};

struct _SYSTEM_VERIFIER_TRIAGE_INFORMATION {
	/*0000*/ ULONG ActionTaken;
	/*0008*/ ULONGLONG CrashData[0x5];
	/*0030*/ ULONG VerifierMode;
	/*0034*/ ULONG VerifierFlags;
	/*0038*/ WCHAR VerifierTargets[0x100];
	/*0238*/
};

struct _SYSTEM_VHD_BOOT_INFORMATION {
	/*0000*/ UCHAR OsDiskIsVhd;
	/*0004*/ ULONG OsVhdFilePathOffset;
	/*0008*/ WCHAR OsVhdParentVolume[0x1];
	/*000c*/
};

struct _SYSTEM_VSM_PROTECTION_INFORMATION {
	/*0000*/ UCHAR DmaProtectionsAvailable;
	/*0001*/ UCHAR DmaProtectionsInUse;
	/*0002*/ UCHAR HardwareMbecAvailable;
	/*0003*/ UCHAR ApicVirtualizationAvailable;
	/*0004*/
};

struct _SYSTEM_WATCHDOG_TIMER_INFORMATION {
	/*0000*/ _WATCHDOG_INFORMATION_CLASS WdInfoClass;
	/*0004*/ ULONG DataValue;
	/*0008*/
};

struct _SYSTEM_WORKINGSET_ENTRY {
	/*0000*/ ULONG UniqueProcessId;
	/*0000*/ ULONG SessionId;
	/*0008*/ ULONGLONG WorkingSetPageCount;
	/*0010*/ ULONGLONG CommitPageCount;
	/*0018*/ ULONGLONG PagedPoolPageCount;
	/*0018*/ ULONGLONG VirtualSizeInPages;
	/*0020*/ ULONGLONG PrivateWorkingSetPageCount;
	/*0028*/
};

struct _SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION {
	/*0000*/ ULONGLONG WorkloadClass;
	/*0008*/ ULONGLONG CpuSets[0x1];
	/*0010*/
};

struct _SYSTEM_WRITE_CONSTRAINT_INFORMATION {
	/*0000*/ ULONG WriteConstraintPolicy;
	/*0004*/ ULONG Reserved;
	/*0008*/
};

enum _SchGetExtensionsOptions {
	SCH_EXTENSIONS_OPTIONS_NONE = 0x0,
	SCH_NO_RECORD_HEADER = 0x1
};

enum _SharedVirtualDiskHandleState {
	SharedVirtualDiskHandleStateNone = 0x0,
	SharedVirtualDiskHandleStateFileShared = 0x1,
	SharedVirtualDiskHandleStateHandleShared = 0x3
};

enum _SharedVirtualDiskSupportType {
	SharedVirtualDisksUnsupported = 0x0,
	SharedVirtualDisksSupported = 0x1,
	SharedVirtualDiskSnapshotsSupported = 0x3,
	SharedVirtualDiskCDPSnapshotsSupported = 0x7
};

struct _T2_SET_PARAMETERS_V0 {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Reserved;
	/*0008*/ LONGLONG NoWakeTolerance;
	/*0010*/
};

struct _TABLE_NOTIFICATION {
	/*0000*/ ULONG ulTableEvent;
	/*0004*/ HRESULT hResult;
	/*0008*/ _SPropValue propIndex;
	/*0020*/ _SPropValue propPrior;
	/*0038*/ _SRow row;
	/*0048*/ ULONG ulPad;
	/*0050*/
};

enum _TABLE_SEARCH_RESULT {
	TableEmptyTree = 0x0,
	TableFoundNode = 0x1,
	TableInsertAsLeft = 0x2,
	TableInsertAsRight = 0x3
};

struct _TAPE_CREATE_PARTITION {
	/*0000*/ ULONG Method;
	/*0004*/ ULONG Count;
	/*0008*/ ULONG Size;
	/*000c*/
};

enum _TAPE_DRIVE_PROBLEM_TYPE {
	TapeDriveProblemNone = 0x0,
	TapeDriveReadWriteWarning = 0x1,
	TapeDriveReadWriteError = 0x2,
	TapeDriveReadWarning = 0x3,
	TapeDriveWriteWarning = 0x4,
	TapeDriveReadError = 0x5,
	TapeDriveWriteError = 0x6,
	TapeDriveHardwareError = 0x7,
	TapeDriveUnsupportedMedia = 0x8,
	TapeDriveScsiConnectionError = 0x9,
	TapeDriveTimetoClean = 0xa,
	TapeDriveCleanDriveNow = 0xb,
	TapeDriveMediaLifeExpired = 0xc,
	TapeDriveSnappedTape = 0xd
};

struct _TAPE_ERASE {
	/*0000*/ ULONG Type;
	/*0004*/ UCHAR Immediate;
	/*0008*/
};

struct _TAPE_GET_DRIVE_PARAMETERS {
	/*0000*/ UCHAR ECC;
	/*0001*/ UCHAR Compression;
	/*0002*/ UCHAR DataPadding;
	/*0003*/ UCHAR ReportSetmarks;
	/*0004*/ ULONG DefaultBlockSize;
	/*0008*/ ULONG MaximumBlockSize;
	/*000c*/ ULONG MinimumBlockSize;
	/*0010*/ ULONG MaximumPartitionCount;
	/*0014*/ ULONG FeaturesLow;
	/*0018*/ ULONG FeaturesHigh;
	/*001c*/ ULONG EOTWarningZoneSize;
	/*0020*/
};

struct _TAPE_GET_MEDIA_PARAMETERS {
	/*0000*/ _LARGE_INTEGER Capacity;
	/*0008*/ _LARGE_INTEGER Remaining;
	/*0010*/ ULONG BlockSize;
	/*0014*/ ULONG PartitionCount;
	/*0018*/ UCHAR WriteProtected;
	/*0020*/
};

struct _TAPE_GET_POSITION {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Partition;
	/*0008*/ _LARGE_INTEGER Offset;
	/*0010*/
};

struct _TAPE_PREPARE {
	/*0000*/ ULONG Operation;
	/*0004*/ UCHAR Immediate;
	/*0008*/
};

struct _TAPE_SET_DRIVE_PARAMETERS {
	/*0000*/ UCHAR ECC;
	/*0001*/ UCHAR Compression;
	/*0002*/ UCHAR DataPadding;
	/*0003*/ UCHAR ReportSetmarks;
	/*0004*/ ULONG EOTWarningZoneSize;
	/*0008*/
};

struct _TAPE_SET_MEDIA_PARAMETERS {
	/*0000*/ ULONG BlockSize;
	/*0004*/
};

struct _TAPE_SET_POSITION {
	/*0000*/ ULONG Method;
	/*0004*/ ULONG Partition;
	/*0008*/ _LARGE_INTEGER Offset;
	/*0010*/ UCHAR Immediate;
	/*0018*/
};

struct _TAPE_WMI_OPERATIONS {
	/*0000*/ ULONG Method;
	/*0004*/ ULONG DataBufferSize;
	/*0008*/ void * DataBuffer;
	/*0010*/
};

struct _TAPE_WRITE_MARKS {
	/*0000*/ ULONG Type;
	/*0004*/ ULONG Count;
	/*0008*/ UCHAR Immediate;
	/*000c*/
};

struct _TARGET_PLATFORM_CONTEXT_REFERENCE {
	/*0000*/ void * reserved;
	/*0008*/
};

struct _TASKDIALOGCONFIG {
	/*0000*/ UINT cbSize;
	/*0004*/ HWND__ * hwndParent;
	/*000c*/ HINSTANCE__ * hInstance;
	/*0014*/ INT dwFlags;
	/*0018*/ INT dwCommonButtons;
	/*001c*/ WCHAR const * pszWindowTitle;
	/*0024*/ HICON__ * hMainIcon;
	/*0024*/ WCHAR const * pszMainIcon;
	/*002c*/ WCHAR const * pszMainInstruction;
	/*0034*/ WCHAR const * pszContent;
	/*003c*/ UINT cButtons;
	/*0040*/ _TASKDIALOG_BUTTON const * pButtons;
	/*0048*/ INT nDefaultButton;
	/*004c*/ UINT cRadioButtons;
	/*0050*/ _TASKDIALOG_BUTTON const * pRadioButtons;
	/*0058*/ INT nDefaultRadioButton;
	/*005c*/ WCHAR const * pszVerificationText;
	/*0064*/ WCHAR const * pszExpandedInformation;
	/*006c*/ WCHAR const * pszExpandedControlText;
	/*0074*/ WCHAR const * pszCollapsedControlText;
	/*007c*/ HICON__ * hFooterIcon;
	/*007c*/ WCHAR const * pszFooterIcon;
	/*0084*/ WCHAR const * pszFooter;
	/*008c*/ HRESULT (* pfCallback)( HWND__ * , UINT , ULONGLONG , LONGLONG , LONGLONG );
	/*0094*/ LONGLONG lpCallbackData;
	/*009c*/ UINT cxWidth;
	/*00a0*/
};

struct _TASKDIALOG_BUTTON {
	/*0000*/ INT nButtonID;
	/*0004*/ WCHAR const * pszButtonText;
	/*000c*/
};

enum _TASKDIALOG_COMMON_BUTTON_FLAGS {
	TDCBF_OK_BUTTON = 0x1,
	TDCBF_YES_BUTTON = 0x2,
	TDCBF_NO_BUTTON = 0x4,
	TDCBF_CANCEL_BUTTON = 0x8,
	TDCBF_RETRY_BUTTON = 0x10,
	TDCBF_CLOSE_BUTTON = 0x20
};

enum _TASKDIALOG_ELEMENTS {
	TDE_CONTENT = 0x0,
	TDE_EXPANDED_INFORMATION = 0x1,
	TDE_FOOTER = 0x2,
	TDE_MAIN_INSTRUCTION = 0x3
};

enum _TASKDIALOG_FLAGS {
	TDF_ENABLE_HYPERLINKS = 0x1,
	TDF_USE_HICON_MAIN = 0x2,
	TDF_USE_HICON_FOOTER = 0x4,
	TDF_ALLOW_DIALOG_CANCELLATION = 0x8,
	TDF_USE_COMMAND_LINKS = 0x10,
	TDF_USE_COMMAND_LINKS_NO_ICON = 0x20,
	TDF_EXPAND_FOOTER_AREA = 0x40,
	TDF_EXPANDED_BY_DEFAULT = 0x80,
	TDF_VERIFICATION_FLAG_CHECKED = 0x100,
	TDF_SHOW_PROGRESS_BAR = 0x200,
	TDF_SHOW_MARQUEE_PROGRESS_BAR = 0x400,
	TDF_CALLBACK_TIMER = 0x800,
	TDF_POSITION_RELATIVE_TO_WINDOW = 0x1000,
	TDF_RTL_LAYOUT = 0x2000,
	TDF_NO_DEFAULT_RADIO_BUTTON = 0x4000,
	TDF_CAN_BE_MINIMIZED = 0x8000,
	TDF_NO_SET_FOREGROUND = 0x10000,
	TDF_SIZE_TO_CONTENT = 0x1000000
};

enum _TASKDIALOG_ICON_ELEMENTS {
	TDIE_ICON_MAIN = 0x0,
	TDIE_ICON_FOOTER = 0x1
};

enum _TASKDIALOG_MESSAGES {
	TDM_NAVIGATE_PAGE = 0x465,
	TDM_CLICK_BUTTON = 0x466,
	TDM_SET_MARQUEE_PROGRESS_BAR = 0x467,
	TDM_SET_PROGRESS_BAR_STATE = 0x468,
	TDM_SET_PROGRESS_BAR_RANGE = 0x469,
	TDM_SET_PROGRESS_BAR_POS = 0x46a,
	TDM_SET_PROGRESS_BAR_MARQUEE = 0x46b,
	TDM_SET_ELEMENT_TEXT = 0x46c,
	TDM_CLICK_RADIO_BUTTON = 0x46e,
	TDM_ENABLE_BUTTON = 0x46f,
	TDM_ENABLE_RADIO_BUTTON = 0x470,
	TDM_CLICK_VERIFICATION = 0x471,
	TDM_UPDATE_ELEMENT_TEXT = 0x472,
	TDM_SET_BUTTON_ELEVATION_REQUIRED_STATE = 0x473,
	TDM_UPDATE_ICON = 0x474
};

enum _TASKDIALOG_NOTIFICATIONS {
	TDN_CREATED = 0x0,
	TDN_NAVIGATED = 0x1,
	TDN_BUTTON_CLICKED = 0x2,
	TDN_HYPERLINK_CLICKED = 0x3,
	TDN_TIMER = 0x4,
	TDN_DESTROYED = 0x5,
	TDN_RADIO_BUTTON_CLICKED = 0x6,
	TDN_DIALOG_CONSTRUCTED = 0x7,
	TDN_VERIFICATION_CLICKED = 0x8,
	TDN_HELP = 0x9,
	TDN_EXPANDO_BUTTON_CLICKED = 0xa
};

struct _TBBUTTON {
	/*0000*/ INT iBitmap;
	/*0004*/ INT idCommand;
	/*0008*/ UCHAR fsState;
	/*0009*/ UCHAR fsStyle;
	/*000a*/ UCHAR bReserved[0x6];
	/*0010*/ ULONGLONG dwData;
	/*0018*/ LONGLONG iString;
	/*0020*/
};

struct _TCPIP_OWNER_MODULE_BASIC_INFO {
	/*0000*/ WCHAR * pModuleName;
	/*0008*/ WCHAR * pModulePath;
	/*0010*/
};

enum _TCPIP_OWNER_MODULE_INFO_CLASS {
	TCPIP_OWNER_MODULE_INFO_BASIC = 0x0
};

enum _TCP_BOOLEAN_OPTIONAL {
	TcpBoolOptDisabled = 0x0,
	TcpBoolOptEnabled = 0x1,
	TcpBoolOptUnchanged = 0xffffffff
};

struct _TCP_ESTATS_BANDWIDTH_ROD_v0 {
	/*0000*/ ULONGLONG OutboundBandwidth;
	/*0008*/ ULONGLONG InboundBandwidth;
	/*0010*/ ULONGLONG OutboundInstability;
	/*0018*/ ULONGLONG InboundInstability;
	/*0020*/ UCHAR OutboundBandwidthPeaked;
	/*0021*/ UCHAR InboundBandwidthPeaked;
	/*0028*/
};

struct _TCP_ESTATS_BANDWIDTH_RW_v0 {
	/*0000*/ _TCP_BOOLEAN_OPTIONAL EnableCollectionOutbound;
	/*0004*/ _TCP_BOOLEAN_OPTIONAL EnableCollectionInbound;
	/*0008*/
};

struct _TCP_ESTATS_DATA_ROD_v0 {
	/*0000*/ ULONGLONG DataBytesOut;
	/*0008*/ ULONGLONG DataSegsOut;
	/*0010*/ ULONGLONG DataBytesIn;
	/*0018*/ ULONGLONG DataSegsIn;
	/*0020*/ ULONGLONG SegsOut;
	/*0028*/ ULONGLONG SegsIn;
	/*0030*/ ULONG SoftErrors;
	/*0034*/ ULONG SoftErrorReason;
	/*0038*/ ULONG SndUna;
	/*003c*/ ULONG SndNxt;
	/*0040*/ ULONG SndMax;
	/*0048*/ ULONGLONG ThruBytesAcked;
	/*0050*/ ULONG RcvNxt;
	/*0058*/ ULONGLONG ThruBytesReceived;
	/*0060*/
};

struct _TCP_ESTATS_DATA_RW_v0 {
	/*0000*/ UCHAR EnableCollection;
	/*0001*/
};

struct _TCP_ESTATS_FINE_RTT_ROD_v0 {
	/*0000*/ ULONG RttVar;
	/*0004*/ ULONG MaxRtt;
	/*0008*/ ULONG MinRtt;
	/*000c*/ ULONG SumRtt;
	/*0010*/
};

struct _TCP_ESTATS_FINE_RTT_RW_v0 {
	/*0000*/ UCHAR EnableCollection;
	/*0001*/
};

struct _TCP_ESTATS_OBS_REC_ROD_v0 {
	/*0000*/ ULONG CurRwinRcvd;
	/*0004*/ ULONG MaxRwinRcvd;
	/*0008*/ ULONG MinRwinRcvd;
	/*000c*/ UCHAR WinScaleRcvd;
	/*0010*/
};

struct _TCP_ESTATS_OBS_REC_RW_v0 {
	/*0000*/ UCHAR EnableCollection;
	/*0001*/
};

struct _TCP_ESTATS_PATH_ROD_v0 {
	/*0000*/ ULONG FastRetran;
	/*0004*/ ULONG Timeouts;
	/*0008*/ ULONG SubsequentTimeouts;
	/*000c*/ ULONG CurTimeoutCount;
	/*0010*/ ULONG AbruptTimeouts;
	/*0014*/ ULONG PktsRetrans;
	/*0018*/ ULONG BytesRetrans;
	/*001c*/ ULONG DupAcksIn;
	/*0020*/ ULONG SacksRcvd;
	/*0024*/ ULONG SackBlocksRcvd;
	/*0028*/ ULONG CongSignals;
	/*002c*/ ULONG PreCongSumCwnd;
	/*0030*/ ULONG PreCongSumRtt;
	/*0034*/ ULONG PostCongSumRtt;
	/*0038*/ ULONG PostCongCountRtt;
	/*003c*/ ULONG EcnSignals;
	/*0040*/ ULONG EceRcvd;
	/*0044*/ ULONG SendStall;
	/*0048*/ ULONG QuenchRcvd;
	/*004c*/ ULONG RetranThresh;
	/*0050*/ ULONG SndDupAckEpisodes;
	/*0054*/ ULONG SumBytesReordered;
	/*0058*/ ULONG NonRecovDa;
	/*005c*/ ULONG NonRecovDaEpisodes;
	/*0060*/ ULONG AckAfterFr;
	/*0064*/ ULONG DsackDups;
	/*0068*/ ULONG SampleRtt;
	/*006c*/ ULONG SmoothedRtt;
	/*0070*/ ULONG RttVar;
	/*0074*/ ULONG MaxRtt;
	/*0078*/ ULONG MinRtt;
	/*007c*/ ULONG SumRtt;
	/*0080*/ ULONG CountRtt;
	/*0084*/ ULONG CurRto;
	/*0088*/ ULONG MaxRto;
	/*008c*/ ULONG MinRto;
	/*0090*/ ULONG CurMss;
	/*0094*/ ULONG MaxMss;
	/*0098*/ ULONG MinMss;
	/*009c*/ ULONG SpuriousRtoDetections;
	/*00a0*/
};

struct _TCP_ESTATS_PATH_RW_v0 {
	/*0000*/ UCHAR EnableCollection;
	/*0001*/
};

struct _TCP_ESTATS_REC_ROD_v0 {
	/*0000*/ ULONG CurRwinSent;
	/*0004*/ ULONG MaxRwinSent;
	/*0008*/ ULONG MinRwinSent;
	/*000c*/ ULONG LimRwin;
	/*0010*/ ULONG DupAckEpisodes;
	/*0014*/ ULONG DupAcksOut;
	/*0018*/ ULONG CeRcvd;
	/*001c*/ ULONG EcnSent;
	/*0020*/ ULONG EcnNoncesRcvd;
	/*0024*/ ULONG CurReasmQueue;
	/*0028*/ ULONG MaxReasmQueue;
	/*0030*/ ULONGLONG CurAppRQueue;
	/*0038*/ ULONGLONG MaxAppRQueue;
	/*0040*/ UCHAR WinScaleSent;
	/*0048*/
};

struct _TCP_ESTATS_REC_RW_v0 {
	/*0000*/ UCHAR EnableCollection;
	/*0001*/
};

struct _TCP_ESTATS_SEND_BUFF_ROD_v0 {
	/*0000*/ ULONGLONG CurRetxQueue;
	/*0008*/ ULONGLONG MaxRetxQueue;
	/*0010*/ ULONGLONG CurAppWQueue;
	/*0018*/ ULONGLONG MaxAppWQueue;
	/*0020*/
};

struct _TCP_ESTATS_SEND_BUFF_RW_v0 {
	/*0000*/ UCHAR EnableCollection;
	/*0001*/
};

struct _TCP_ESTATS_SND_CONG_ROD_v0 {
	/*0000*/ ULONG SndLimTransRwin;
	/*0004*/ ULONG SndLimTimeRwin;
	/*0008*/ ULONGLONG SndLimBytesRwin;
	/*0010*/ ULONG SndLimTransCwnd;
	/*0014*/ ULONG SndLimTimeCwnd;
	/*0018*/ ULONGLONG SndLimBytesCwnd;
	/*0020*/ ULONG SndLimTransSnd;
	/*0024*/ ULONG SndLimTimeSnd;
	/*0028*/ ULONGLONG SndLimBytesSnd;
	/*0030*/ ULONG SlowStart;
	/*0034*/ ULONG CongAvoid;
	/*0038*/ ULONG OtherReductions;
	/*003c*/ ULONG CurCwnd;
	/*0040*/ ULONG MaxSsCwnd;
	/*0044*/ ULONG MaxCaCwnd;
	/*0048*/ ULONG CurSsthresh;
	/*004c*/ ULONG MaxSsthresh;
	/*0050*/ ULONG MinSsthresh;
	/*0058*/
};

struct _TCP_ESTATS_SND_CONG_ROS_v0 {
	/*0000*/ ULONG LimCwnd;
	/*0004*/
};

struct _TCP_ESTATS_SND_CONG_RW_v0 {
	/*0000*/ UCHAR EnableCollection;
	/*0001*/
};

struct _TCP_ESTATS_SYN_OPTS_ROS_v0 {
	/*0000*/ UCHAR ActiveOpen;
	/*0004*/ ULONG MssRcvd;
	/*0008*/ ULONG MssSent;
	/*000c*/
};

enum _TCP_TABLE_CLASS {
	TCP_TABLE_BASIC_LISTENER = 0x0,
	TCP_TABLE_BASIC_CONNECTIONS = 0x1,
	TCP_TABLE_BASIC_ALL = 0x2,
	TCP_TABLE_OWNER_PID_LISTENER = 0x3,
	TCP_TABLE_OWNER_PID_CONNECTIONS = 0x4,
	TCP_TABLE_OWNER_PID_ALL = 0x5,
	TCP_TABLE_OWNER_MODULE_LISTENER = 0x6,
	TCP_TABLE_OWNER_MODULE_CONNECTIONS = 0x7,
	TCP_TABLE_OWNER_MODULE_ALL = 0x8
};

struct _TEB {
	/*0000*/ _NT_TIB NtTib;
	/*0038*/ void * EnvironmentPointer;
	/*0040*/ _CLIENT_ID ClientId;
	/*0050*/ void * ActiveRpcHandle;
	/*0058*/ void * ThreadLocalStoragePointer;
	/*0060*/ _PEB * ProcessEnvironmentBlock;
	/*0068*/ ULONG LastErrorValue;
	/*006c*/ ULONG CountOfOwnedCriticalSections;
	/*0070*/ void * CsrClientThread;
	/*0078*/ void * Win32ThreadInfo;
	/*0080*/ ULONG User32Reserved[0x1a];
	/*00e8*/ ULONG UserReserved[0x5];
	/*0100*/ void * WOW32Reserved;
	/*0108*/ ULONG CurrentLocale;
	/*010c*/ ULONG FpSoftwareStatusRegister;
	/*0110*/ void * ReservedForDebuggerInstrumentation[0x10];
	/*0190*/ void * SystemReserved1[0x1e];
	/*0280*/ CHAR PlaceholderCompatibilityMode;
	/*0281*/ UCHAR PlaceholderHydrationAlwaysExplicit;
	/*0282*/ CHAR PlaceholderReserved[0xa];
	/*028c*/ ULONG ProxiedProcessId;
	/*0290*/ _ACTIVATION_CONTEXT_STACK _ActivationStack;
	/*02b8*/ UCHAR WorkingOnBehalfTicket[0x8];
	/*02c0*/ LONG ExceptionCode;
	/*02c4*/ UCHAR Padding0[0x4];
	/*02c8*/ _ACTIVATION_CONTEXT_STACK * ActivationContextStackPointer;
	/*02d0*/ ULONGLONG InstrumentationCallbackSp;
	/*02d8*/ ULONGLONG InstrumentationCallbackPreviousPc;
	/*02e0*/ ULONGLONG InstrumentationCallbackPreviousSp;
	/*02e8*/ ULONG TxFsContext;
	/*02ec*/ UCHAR InstrumentationCallbackDisabled;
	/*02ed*/ UCHAR UnalignedLoadStoreExceptions;
	/*02ee*/ UCHAR Padding1[0x2];
	/*02f0*/ _GDI_TEB_BATCH GdiTebBatch;
	/*07d8*/ _CLIENT_ID RealClientId;
	/*07e8*/ void * GdiCachedProcessHandle;
	/*07f0*/ ULONG GdiClientPID;
	/*07f4*/ ULONG GdiClientTID;
	/*07f8*/ void * GdiThreadLocalInfo;
	/*0800*/ ULONGLONG Win32ClientInfo[0x3e];
	/*09f0*/ void * glDispatchTable[0xe9];
	/*1138*/ ULONGLONG glReserved1[0x1d];
	/*1220*/ void * glReserved2;
	/*1228*/ void * glSectionInfo;
	/*1230*/ void * glSection;
	/*1238*/ void * glTable;
	/*1240*/ void * glCurrentRC;
	/*1248*/ void * glContext;
	/*1250*/ ULONG LastStatusValue;
	/*1254*/ UCHAR Padding2[0x4];
	/*1258*/ _UNICODE_STRING StaticUnicodeString;
	/*1268*/ WCHAR StaticUnicodeBuffer[0x105];
	/*1472*/ UCHAR Padding3[0x6];
	/*1478*/ void * DeallocationStack;
	/*1480*/ void * TlsSlots[0x40];
	/*1680*/ _LIST_ENTRY TlsLinks;
	/*1690*/ void * Vdm;
	/*1698*/ void * ReservedForNtRpc;
	/*16a0*/ void * DbgSsReserved[0x2];
	/*16b0*/ ULONG HardErrorMode;
	/*16b4*/ UCHAR Padding4[0x4];
	/*16b8*/ void * Instrumentation[0xb];
	/*1710*/ _GUID ActivityId;
	/*1720*/ void * SubProcessTag;
	/*1728*/ void * PerflibData;
	/*1730*/ void * EtwTraceData;
	/*1738*/ void * WinSockData;
	/*1740*/ ULONG GdiBatchCount;
	/*1744*/ _PROCESSOR_NUMBER CurrentIdealProcessor;
	/*1744*/ ULONG IdealProcessorValue;
	/*1744*/ UCHAR ReservedPad0;
	/*1745*/ UCHAR ReservedPad1;
	/*1746*/ UCHAR ReservedPad2;
	/*1747*/ UCHAR IdealProcessor;
	/*1748*/ ULONG GuaranteedStackBytes;
	/*174c*/ UCHAR Padding5[0x4];
	/*1750*/ void * ReservedForPerf;
	/*1758*/ void * ReservedForOle;
	/*1760*/ ULONG WaitingOnLoaderLock;
	/*1764*/ UCHAR Padding6[0x4];
	/*1768*/ void * SavedPriorityState;
	/*1770*/ ULONGLONG ReservedForCodeCoverage;
	/*1778*/ void * ThreadPoolData;
	/*1780*/ void * * TlsExpansionSlots;
	/*1788*/ void * DeallocationBStore;
	/*1790*/ void * BStoreLimit;
	/*1798*/ ULONG MuiGeneration;
	/*179c*/ ULONG IsImpersonating;
	/*17a0*/ void * NlsCache;
	/*17a8*/ void * pShimData;
	/*17b0*/ ULONG HeapData;
	/*17b4*/ UCHAR Padding7[0x4];
	/*17b8*/ void * CurrentTransactionHandle;
	/*17c0*/ _TEB_ACTIVE_FRAME * ActiveFrame;
	/*17c8*/ void * FlsData;
	/*17d0*/ void * PreferredLanguages;
	/*17d8*/ void * UserPrefLanguages;
	/*17e0*/ void * MergedPrefLanguages;
	/*17e8*/ ULONG MuiImpersonation;
	/*17ec*/ USHORT volatile CrossTebFlags;
	/*17ec*/ USHORT SpareCrossTebBits : 16; // 0xffff;
	/*17ee*/ USHORT SameTebFlags;
	/*17ee*/ USHORT SafeThunkCall : 01; // 0x0001;
	/*17ee*/ USHORT InDebugPrint : 01; // 0x0002;
	/*17ee*/ USHORT HasFiberData : 01; // 0x0004;
	/*17ee*/ USHORT SkipThreadAttach : 01; // 0x0008;
	/*17ee*/ USHORT WerInShipAssertCode : 01; // 0x0010;
	/*17ee*/ USHORT RanProcessInit : 01; // 0x0020;
	/*17ee*/ USHORT ClonedThread : 01; // 0x0040;
	/*17ee*/ USHORT SuppressDebugMsg : 01; // 0x0080;
	/*17ee*/ USHORT DisableUserStackWalk : 01; // 0x0100;
	/*17ee*/ USHORT RtlExceptionAttached : 01; // 0x0200;
	/*17ee*/ USHORT InitialThread : 01; // 0x0400;
	/*17ee*/ USHORT SessionAware : 01; // 0x0800;
	/*17ee*/ USHORT LoadOwner : 01; // 0x1000;
	/*17ee*/ USHORT LoaderWorker : 01; // 0x2000;
	/*17ee*/ USHORT SkipLoaderInit : 01; // 0x4000;
	/*17ee*/ USHORT SpareSameTebBits : 01; // 0x8000;
	/*17f0*/ void * TxnScopeEnterCallback;
	/*17f8*/ void * TxnScopeExitCallback;
	/*1800*/ void * TxnScopeContext;
	/*1808*/ ULONG LockCount;
	/*180c*/ LONG WowTebOffset;
	/*1810*/ void * ResourceRetValue;
	/*1818*/ void * ReservedForWdf;
	/*1820*/ ULONGLONG ReservedForCrt;
	/*1828*/ _GUID EffectiveContainerId;
	void _TEB( _TEB && );
	void _TEB( _TEB const & );
	_TEB & operator=( _TEB && );
	_TEB & operator=( _TEB const & );
	/*1838*/
};

struct _TEB_ACTIVE_FRAME {
	/*0000*/ ULONG Flags;
	/*0008*/ _TEB_ACTIVE_FRAME * Previous;
	/*0010*/ _TEB_ACTIVE_FRAME_CONTEXT const * Context;
	/*0018*/
};

struct _TEB_ACTIVE_FRAME_CONTEXT {
	/*0000*/ ULONG Flags;
	/*0008*/ CHAR const * FrameName;
	/*0010*/
};

struct _TEB_ACTIVE_FRAME_CONTEXT_EX {
	/*0000*/ _TEB_ACTIVE_FRAME_CONTEXT BasicContext;
	/*0010*/ CHAR const * SourceLocation;
	/*0018*/
};

struct _TEB_ACTIVE_FRAME_EX {
	/*0000*/ _TEB_ACTIVE_FRAME BasicFrame;
	/*0018*/ void * ExtensionIdentifier;
	/*0020*/
};

enum _TEREDOEXT_ID {
	TEREDOEXT_ID_UNSPEC = 0x0,
	TEREDOEXT_ID_XBOX = 0x1,
	TEREDOEXT_ID_DO = 0x2,
	TEREDOEXT_ID_MSRA = 0x3,
	TEREDOEXT_ID_MAX = 0x4
};

enum _TEREDO_CONTROL_ID {
	TEREDO_CONTROL_ID_UNSPEC = 0x0,
	TEREDO_CONTROL_ID_XBOX = 0x1,
	TEREDO_CONTROL_ID_DO = 0x2,
	TEREDO_CONTROL_ID_MSRA = 0x3,
	TEREDO_CONTROL_ID_MAX = 0x4
};

struct _TETHERING_AP_NOTIFICATION_DATA {
	/*0000*/ _WCM_TETHERING_MODE currentTetheringMode;
	/*0008*/ ULONGLONG cCurrentConnectedStations;
	/*0010*/ ULONGLONG cMaxAllowedStations;
	/*0018*/ _GUID guidInterface;
	/*0028*/ HRESULT hrOperation;
	/*002c*/ INT fAsyncOperation;
	/*0030*/
};

enum _THDTYPE {
	THDTYPE_BLOCKMESSAGES = 0x0,
	THDTYPE_PROCESSMESSAGES = 0x1
};

enum _THREADINFOCLASS {
	ThreadBasicInformation = 0x0,
	ThreadTimes = 0x1,
	ThreadPriority = 0x2,
	ThreadBasePriority = 0x3,
	ThreadAffinityMask = 0x4,
	ThreadImpersonationToken = 0x5,
	ThreadDescriptorTableEntry = 0x6,
	ThreadEnableAlignmentFaultFixup = 0x7,
	ThreadEventPair_Reusable = 0x8,
	ThreadQuerySetWin32StartAddress = 0x9,
	ThreadZeroTlsCell = 0xa,
	ThreadPerformanceCount = 0xb,
	ThreadAmILastThread = 0xc,
	ThreadIdealProcessor = 0xd,
	ThreadPriorityBoost = 0xe,
	ThreadSetTlsArrayAddress = 0xf,
	ThreadIsIoPending = 0x10,
	ThreadHideFromDebugger = 0x11,
	ThreadBreakOnTermination = 0x12,
	ThreadSwitchLegacyState = 0x13,
	ThreadIsTerminated = 0x14,
	ThreadLastSystemCall = 0x15,
	ThreadIoPriority = 0x16,
	ThreadCycleTime = 0x17,
	ThreadPagePriority = 0x18,
	ThreadActualBasePriority = 0x19,
	ThreadTebInformation = 0x1a,
	ThreadCSwitchMon = 0x1b,
	ThreadCSwitchPmu = 0x1c,
	ThreadWow64Context = 0x1d,
	ThreadGroupInformation = 0x1e,
	ThreadUmsInformation = 0x1f,
	ThreadCounterProfiling = 0x20,
	ThreadIdealProcessorEx = 0x21,
	ThreadCpuAccountingInformation = 0x22,
	ThreadSuspendCount = 0x23,
	ThreadHeterogeneousCpuPolicy = 0x24,
	ThreadContainerId = 0x25,
	ThreadNameInformation = 0x26,
	ThreadSelectedCpuSets = 0x27,
	ThreadSystemThreadInformation = 0x28,
	ThreadActualGroupAffinity = 0x29,
	ThreadDynamicCodePolicyInfo = 0x2a,
	ThreadExplicitCaseSensitivity = 0x2b,
	ThreadWorkOnBehalfTicket = 0x2c,
	ThreadSubsystemInformation = 0x2d,
	ThreadDbgkWerReportActive = 0x2e,
	ThreadAttachContainer = 0x2f,
	ThreadManageWritesToExecutableMemory = 0x30,
	ThreadPowerThrottlingState = 0x31,
	ThreadWorkloadClass = 0x32,
	MaxThreadInfoClass = 0x33
};

struct _THREAD_BASIC_INFORMATION {
	/*0000*/ LONG ExitStatus;
	/*0008*/ _TEB * TebBaseAddress;
	/*0010*/ _CLIENT_ID ClientId;
	/*0020*/ ULONGLONG AffinityMask;
	/*0028*/ LONG Priority;
	/*002c*/ LONG BasePriority;
	/*0030*/
};

struct _THREAD_CYCLE_TIME_INFORMATION {
	/*0000*/ ULONGLONG AccumulatedCycles;
	/*0008*/ ULONGLONG CurrentCycleCount;
	/*0010*/
};

struct _THREAD_ENERGY_VALUES {
	/*0000*/ ULONGLONG Cycles[0x4][0x2];
	/*0040*/ ULONGLONG AttributedCycles[0x4][0x2];
	/*0080*/ ULONGLONG WorkOnBehalfCycles[0x4][0x2];
	/*00c0*/ _TIMELINE_BITMAP CpuTimeline;
	/*00c8*/
};

enum _THREAD_INFORMATION_CLASS {
	ThreadMemoryPriority = 0x0,
	ThreadAbsoluteCpuPriority = 0x1,
	ThreadDynamicCodePolicy = 0x2,
	ThreadPowerThrottling = 0x3,
	ThreadInformationClassMax = 0x4
};

struct _THREAD_LAST_SYSCALL_INFORMATION {
	/*0000*/ void * FirstArgument;
	/*0008*/ USHORT SystemCallNumber;
	/*000a*/ USHORT Pad[0x3];
	/*0010*/ ULONGLONG WaitTime;
	/*0018*/
};

struct _THREAD_NAME_INFORMATION {
	/*0000*/ _UNICODE_STRING ThreadName;
	/*0010*/
};

struct _THREAD_PERFORMANCE_DATA {
	/*0000*/ USHORT Size;
	/*0002*/ USHORT Version;
	/*0004*/ _PROCESSOR_NUMBER ProcessorNumber;
	/*0008*/ ULONG ContextSwitches;
	/*000c*/ ULONG HwCountersCount;
	/*0010*/ ULONGLONG volatile UpdateCount;
	/*0018*/ ULONGLONG WaitReasonBitMap;
	/*0020*/ ULONGLONG HardwareCounters;
	/*0028*/ _COUNTER_READING CycleTime;
	/*0040*/ _COUNTER_READING HwCounters[0x10];
	void _THREAD_PERFORMANCE_DATA( _THREAD_PERFORMANCE_DATA && );
	void _THREAD_PERFORMANCE_DATA( _THREAD_PERFORMANCE_DATA const & );
	_THREAD_PERFORMANCE_DATA & operator=( _THREAD_PERFORMANCE_DATA && );
	_THREAD_PERFORMANCE_DATA & operator=( _THREAD_PERFORMANCE_DATA const & );
	/*01c0*/
};

struct _THREAD_POWER_THROTTLING_STATE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG ControlMask;
	/*0008*/ ULONG StateMask;
	/*000c*/
};

struct _THREAD_PROFILING_INFORMATION {
	/*0000*/ ULONGLONG HardwareCounters;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Enable;
	/*0010*/ _THREAD_PERFORMANCE_DATA * PerformanceData;
	/*0018*/
};

struct _THREAD_TEB_INFORMATION {
	/*0000*/ void * TebInformation;
	/*0008*/ ULONG TebOffset;
	/*000c*/ ULONG BytesToRead;
	/*0010*/
};

struct _THREAD_TLS_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0008*/ void * NewTlsData;
	/*0008*/ void * OldTlsData;
	/*0010*/ void * ThreadId;
	/*0018*/
};

struct _THREAD_UMS_INFORMATION {
	/*0000*/ _THREAD_UMS_INFORMATION_COMMAND Command;
	/*0008*/ _RTL_UMS_COMPLETION_LIST * CompletionList;
	/*0010*/ _RTL_UMS_CONTEXT * UmsContext;
	/*0008*/ ULONG Flags;
	/*0008*/ ULONG IsUmsSchedulerThread : 01; // 0x00000001;
	/*0008*/ ULONG IsUmsWorkerThread : 01; // 0x00000002;
	/*0018*/
};

enum _THREAD_UMS_INFORMATION_COMMAND {
	UmsInformationCommandInvalid = 0x0,
	UmsInformationCommandAttach = 0x1,
	UmsInformationCommandDetach = 0x2,
	UmsInformationCommandQuery = 0x3
};

enum _THREAD_WORKLOAD_CLASS {
	ThreadWorkloadClassDefault = 0x0,
	ThreadWorkloadClassGraphics = 0x1,
	MaxThreadWorkloadClass = 0x2
};

union _TIMELINE_BITMAP {
	/*0000*/ ULONGLONG Value;
	/*0000*/ ULONG EndTime;
	/*0004*/ ULONG Bitmap;
	/*0008*/
};

struct _TIMER_BASIC_INFORMATION {
	/*0000*/ _LARGE_INTEGER RemainingTime;
	/*0008*/ UCHAR TimerState;
	/*0010*/
};

enum _TIMER_INFORMATION_CLASS {
	TimerBasicInformation = 0x0
};

struct _TIMER_SET_COALESCABLE_TIMER_INFO {
	/*0000*/ _LARGE_INTEGER DueTime;
	/*0008*/ void (* TimerApcRoutine)( void * , ULONG , LONG );
	/*0010*/ void * TimerContext;
	/*0018*/ _COUNTED_REASON_CONTEXT * WakeContext;
	/*0020*/ ULONG Period;
	/*0024*/ ULONG TolerableDelay;
	/*0028*/ UCHAR * PreviousState;
	/*0030*/
};

enum _TIMER_SET_INFORMATION_CLASS {
	TimerSetCoalescableTimer = 0x0,
	MaxTimerInfoClass = 0x1
};

enum _TIMER_TYPE {
	NotificationTimer = 0x0,
	SynchronizationTimer = 0x1
};

struct _TIME_DYNAMIC_ZONE_INFORMATION {
	/*0000*/ LONG Bias;
	/*0004*/ WCHAR StandardName[0x20];
	/*0044*/ _SYSTEMTIME StandardDate;
	/*0054*/ LONG StandardBias;
	/*0058*/ WCHAR DaylightName[0x20];
	/*0098*/ _SYSTEMTIME DaylightDate;
	/*00a8*/ LONG DaylightBias;
	/*00ac*/ WCHAR TimeZoneKeyName[0x80];
	/*01ac*/ UCHAR DynamicDaylightTimeDisabled;
	/*01b0*/
};

struct _TIME_FIELDS {
	/*0000*/ SHORT Year;
	/*0002*/ SHORT Month;
	/*0004*/ SHORT Day;
	/*0006*/ SHORT Hour;
	/*0008*/ SHORT Minute;
	/*000a*/ SHORT Second;
	/*000c*/ SHORT Milliseconds;
	/*000e*/ SHORT Weekday;
	/*0010*/
};

struct _TIME_ZONE_INFORMATION {
	/*0000*/ LONG Bias;
	/*0004*/ WCHAR StandardName[0x20];
	/*0044*/ _SYSTEMTIME StandardDate;
	/*0054*/ LONG StandardBias;
	/*0058*/ WCHAR DaylightName[0x20];
	/*0098*/ _SYSTEMTIME DaylightDate;
	/*00a8*/ LONG DaylightBias;
	/*00ac*/
};

struct _TOKEN_ACCESS_INFORMATION {
	/*0000*/ _SID_AND_ATTRIBUTES_HASH * SidHash;
	/*0008*/ _SID_AND_ATTRIBUTES_HASH * RestrictedSidHash;
	/*0010*/ _TOKEN_PRIVILEGES * Privileges;
	/*0018*/ _LUID AuthenticationId;
	/*0020*/ _TOKEN_TYPE TokenType;
	/*0024*/ _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	/*0028*/ _TOKEN_MANDATORY_POLICY MandatoryPolicy;
	/*002c*/ ULONG Flags;
	/*0030*/ ULONG AppContainerNumber;
	/*0038*/ void * PackageSid;
	/*0040*/ _SID_AND_ATTRIBUTES_HASH * CapabilitiesHash;
	/*0048*/ void * TrustLevelSid;
	/*0050*/ void * SecurityAttributes;
	/*0058*/
};

struct _TOKEN_APPCONTAINER_INFORMATION {
	/*0000*/ void * TokenAppContainer;
	/*0008*/
};

struct _TOKEN_AUDIT_POLICY {
	/*0000*/ UCHAR PerUserPolicy[0x1e];
	/*001e*/
};

struct _TOKEN_BNO_ISOLATION_INFORMATION {
	/*0000*/ WCHAR * IsolationPrefix;
	/*0008*/ UCHAR IsolationEnabled;
	/*0010*/
};

struct _TOKEN_CONTROL {
	/*0000*/ _LUID TokenId;
	/*0008*/ _LUID AuthenticationId;
	/*0010*/ _LUID ModifiedId;
	/*0018*/ _TOKEN_SOURCE TokenSource;
	/*0028*/
};

struct _TOKEN_DEFAULT_DACL {
	/*0000*/ _ACL * DefaultDacl;
	/*0008*/
};

struct _TOKEN_DEVICE_CLAIMS {
	/*0000*/ void * DeviceClaims;
	/*0008*/
};

struct _TOKEN_ELEVATION {
	/*0000*/ ULONG TokenIsElevated;
	/*0004*/
};

enum _TOKEN_ELEVATION_TYPE {
	TokenElevationTypeDefault = 0x1,
	TokenElevationTypeFull = 0x2,
	TokenElevationTypeLimited = 0x3
};

struct _TOKEN_GROUPS {
	/*0000*/ ULONG GroupCount;
	/*0008*/ _SID_AND_ATTRIBUTES Groups[0x1];
	/*0018*/
};

struct _TOKEN_GROUPS_AND_PRIVILEGES {
	/*0000*/ ULONG SidCount;
	/*0004*/ ULONG SidLength;
	/*0008*/ _SID_AND_ATTRIBUTES * Sids;
	/*0010*/ ULONG RestrictedSidCount;
	/*0014*/ ULONG RestrictedSidLength;
	/*0018*/ _SID_AND_ATTRIBUTES * RestrictedSids;
	/*0020*/ ULONG PrivilegeCount;
	/*0024*/ ULONG PrivilegeLength;
	/*0028*/ _LUID_AND_ATTRIBUTES * Privileges;
	/*0030*/ _LUID AuthenticationId;
	/*0038*/
};

enum _TOKEN_INFORMATION_CLASS {
	TokenUser = 0x1,
	TokenGroups = 0x2,
	TokenPrivileges = 0x3,
	TokenOwner = 0x4,
	TokenPrimaryGroup = 0x5,
	TokenDefaultDacl = 0x6,
	TokenSource = 0x7,
	TokenType = 0x8,
	TokenImpersonationLevel = 0x9,
	TokenStatistics = 0xa,
	TokenRestrictedSids = 0xb,
	TokenSessionId = 0xc,
	TokenGroupsAndPrivileges = 0xd,
	TokenSessionReference = 0xe,
	TokenSandBoxInert = 0xf,
	TokenAuditPolicy = 0x10,
	TokenOrigin = 0x11,
	TokenElevationType = 0x12,
	TokenLinkedToken = 0x13,
	TokenElevation = 0x14,
	TokenHasRestrictions = 0x15,
	TokenAccessInformation = 0x16,
	TokenVirtualizationAllowed = 0x17,
	TokenVirtualizationEnabled = 0x18,
	TokenIntegrityLevel = 0x19,
	TokenUIAccess = 0x1a,
	TokenMandatoryPolicy = 0x1b,
	TokenLogonSid = 0x1c,
	TokenIsAppContainer = 0x1d,
	TokenCapabilities = 0x1e,
	TokenAppContainerSid = 0x1f,
	TokenAppContainerNumber = 0x20,
	TokenUserClaimAttributes = 0x21,
	TokenDeviceClaimAttributes = 0x22,
	TokenRestrictedUserClaimAttributes = 0x23,
	TokenRestrictedDeviceClaimAttributes = 0x24,
	TokenDeviceGroups = 0x25,
	TokenRestrictedDeviceGroups = 0x26,
	TokenSecurityAttributes = 0x27,
	TokenIsRestricted = 0x28,
	TokenProcessTrustLevel = 0x29,
	TokenPrivateNameSpace = 0x2a,
	TokenSingletonAttributes = 0x2b,
	TokenBnoIsolation = 0x2c,
	TokenChildProcessFlags = 0x2d,
	TokenIsLessPrivilegedAppContainer = 0x2e,
	TokenIsSandboxed = 0x2f,
	TokenOriginatingProcessTrustLevel = 0x30,
	MaxTokenInfoClass = 0x31
};

struct _TOKEN_LINKED_TOKEN {
	/*0000*/ void * LinkedToken;
	/*0008*/
};

struct _TOKEN_MANDATORY_LABEL {
	/*0000*/ _SID_AND_ATTRIBUTES Label;
	/*0010*/
};

struct _TOKEN_MANDATORY_POLICY {
	/*0000*/ ULONG Policy;
	/*0004*/
};

struct _TOKEN_ORIGIN {
	/*0000*/ _LUID OriginatingLogonSession;
	/*0008*/
};

struct _TOKEN_OWNER {
	/*0000*/ void * Owner;
	/*0008*/
};

struct _TOKEN_PRIMARY_GROUP {
	/*0000*/ void * PrimaryGroup;
	/*0008*/
};

struct _TOKEN_PRIVILEGES {
	/*0000*/ ULONG PrivilegeCount;
	/*0004*/ _LUID_AND_ATTRIBUTES Privileges[0x1];
	/*0010*/
};

struct _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION {
	/*0000*/ _TOKEN_SECURITY_ATTRIBUTES_INFORMATION * Attributes;
	/*0008*/ _TOKEN_SECURITY_ATTRIBUTE_OPERATION * Operations;
	/*0010*/
};

struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION {
	
	/*0000*/ USHORT Version;
	/*0002*/ USHORT Reserved;
	/*0004*/ ULONG AttributeCount;
	/*0008*/ <unnamed-type-Attribute> Attribute;
	/*0010*/
};

struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE {
	/*0000*/ ULONGLONG Version;
	/*0008*/ _UNICODE_STRING Name;
	/*0018*/
};

struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
	/*0000*/ void * pValue;
	/*0008*/ ULONG ValueLength;
	/*0010*/
};

enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION {
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_NONE = 0x0,
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = 0x1,
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_ADD = 0x2,
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_DELETE = 0x3,
	TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE = 0x4
};

struct _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1 {
	
	/*0000*/ ULONG Name;
	/*0004*/ USHORT ValueType;
	/*0006*/ USHORT Reserved;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG ValueCount;
	/*0010*/ <unnamed-type-Values> Values;
	/*0014*/
};

struct _TOKEN_SECURITY_ATTRIBUTE_V1 {
	
	/*0000*/ _UNICODE_STRING Name;
	/*0010*/ USHORT ValueType;
	/*0012*/ USHORT Reserved;
	/*0014*/ ULONG Flags;
	/*0018*/ ULONG ValueCount;
	/*0020*/ <unnamed-type-Values> Values;
	/*0028*/
};

struct _TOKEN_SID_INFORMATION {
	/*0000*/ void * Sid;
	/*0008*/
};

struct _TOKEN_SOURCE {
	/*0000*/ CHAR SourceName[0x8];
	/*0008*/ _LUID SourceIdentifier;
	/*0010*/
};

struct _TOKEN_STATISTICS {
	/*0000*/ _LUID TokenId;
	/*0008*/ _LUID AuthenticationId;
	/*0010*/ _LARGE_INTEGER ExpirationTime;
	/*0018*/ _TOKEN_TYPE TokenType;
	/*001c*/ _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	/*0020*/ ULONG DynamicCharged;
	/*0024*/ ULONG DynamicAvailable;
	/*0028*/ ULONG GroupCount;
	/*002c*/ ULONG PrivilegeCount;
	/*0030*/ _LUID ModifiedId;
	/*0038*/
};

enum _TOKEN_TYPE {
	TokenPrimary = 0x1,
	TokenImpersonation = 0x2
};

struct _TOKEN_USER {
	/*0000*/ _SID_AND_ATTRIBUTES User;
	/*0010*/
};

struct _TOKEN_USER_CLAIMS {
	/*0000*/ void * UserClaims;
	/*0008*/
};

struct _TPP_THREAD_DATA_CALLBACK;

struct _TP_ALPC;

struct _TP_CALLBACK_ENVIRON_V3 {
	
	/*0000*/ ULONG Version;
	/*0008*/ _TP_POOL * Pool;
	/*0010*/ _TP_CLEANUP_GROUP * CleanupGroup;
	/*0018*/ void (* CleanupGroupCancelCallback)( void * , void * );
	/*0020*/ void * RaceDll;
	/*0028*/ _ACTIVATION_CONTEXT * ActivationContext;
	/*0030*/ void (* FinalizationCallback)( _TP_CALLBACK_INSTANCE * , void * );
	/*0038*/ <unnamed-type-u> u;
	/*003c*/ _TP_CALLBACK_PRIORITY CallbackPriority;
	/*0040*/ ULONG Size;
	/*0048*/
};

struct _TP_CALLBACK_INSTANCE;

enum _TP_CALLBACK_PRIORITY {
	TP_CALLBACK_PRIORITY_HIGH = 0x0,
	TP_CALLBACK_PRIORITY_NORMAL = 0x1,
	TP_CALLBACK_PRIORITY_LOW = 0x2,
	TP_CALLBACK_PRIORITY_INVALID = 0x3,
	TP_CALLBACK_PRIORITY_COUNT = 0x3
};

struct _TP_CLEANUP_GROUP;

enum _TP_DEBUG_CLASS {
	TP_DEBUG_CLASS_POOL = 0x0
};

struct _TP_DEBUG_FREE_INFO {
	/*0000*/ ULONG FreeListSize;
	/*0004*/
};

struct _TP_DIRECT {
	/*0000*/ _TP_TASK Task;
	/*0020*/ ULONGLONG Lock;
	/*0028*/ _LIST_ENTRY IoCompletionInformationList;
	/*0038*/ void (* Callback)( _TP_CALLBACK_INSTANCE * , _TP_DIRECT * , void * , _IO_STATUS_BLOCK * );
	/*0040*/ ULONG NumaNode;
	/*0044*/ UCHAR IdealProcessor;
	/*0048*/
};

struct _TP_IO;

struct _TP_JOB;

enum _TP_LOG_LEVEL {
	TP_LOG_LEVEL_ERROR = 0x0,
	TP_LOG_LEVEL_WARNING = 0x1,
	TP_LOG_LEVEL_INFO = 0x2,
	TP_LOG_LEVEL_TRACE_ENTER = 0x3,
	TP_LOG_LEVEL_TRACE_LEAVE = 0x4
};

struct _TP_POOL;

struct _TP_POOL_STACK_INFORMATION {
	/*0000*/ ULONGLONG StackReserve;
	/*0008*/ ULONGLONG StackCommit;
	/*0010*/
};

struct _TP_TASK {
	/*0000*/ _TP_TASK_CALLBACKS const * Callbacks;
	/*0008*/ ULONG NumaNode;
	/*000c*/ UCHAR IdealProcessor;
	/*0010*/ _LIST_ENTRY ListEntry;
	/*0020*/
};

struct _TP_TASK_CALLBACKS {
	/*0000*/ void (* ExecuteCallback)( _TP_CALLBACK_INSTANCE * , _TP_TASK * );
	/*0008*/ void (* Unposted)( _TP_TASK * , _TP_POOL * );
	/*0010*/
};

struct _TP_TIMER;

enum _TP_TRACE_TYPE {
	TpTraceThreadPriority = 0x1,
	TpTraceThreadAffinity = 0x2,
	MaxTpTraceType = 0x3
};

struct _TP_WAIT;

struct _TP_WORK;

struct _TRACE_ENABLE_INFO {
	/*0000*/ ULONG IsEnabled;
	/*0004*/ UCHAR Level;
	/*0005*/ UCHAR Reserved1;
	/*0006*/ USHORT LoggerId;
	/*0008*/ ULONG EnableProperty;
	/*000c*/ ULONG Reserved2;
	/*0010*/ ULONGLONG MatchAnyKeyword;
	/*0018*/ ULONGLONG MatchAllKeyword;
	/*0020*/
};

struct _TRACE_GUID_INFO {
	/*0000*/ ULONG InstanceCount;
	/*0004*/ ULONG Reserved;
	/*0008*/
};

struct _TRACE_GUID_PROPERTIES {
	/*0000*/ _GUID Guid;
	/*0010*/ ULONG GuidType;
	/*0014*/ ULONG LoggerId;
	/*0018*/ ULONG EnableLevel;
	/*001c*/ ULONG EnableFlags;
	/*0020*/ UCHAR IsEnable;
	/*0024*/
};

struct _TRACE_GUID_REGISTRATION {
	/*0000*/ _GUID const * Guid;
	/*0008*/ void * RegHandle;
	/*0010*/
};

struct _TRACE_LOGFILE_HEADER {
	
	/*0000*/ ULONG BufferSize;
	/*0004*/ ULONG Version;
	/*0004*/ <unnamed-type-VersionDetail> VersionDetail;
	/*0008*/ ULONG ProviderVersion;
	/*000c*/ ULONG NumberOfProcessors;
	/*0010*/ _LARGE_INTEGER EndTime;
	/*0018*/ ULONG TimerResolution;
	/*001c*/ ULONG MaximumFileSize;
	/*0020*/ ULONG LogFileMode;
	/*0024*/ ULONG BuffersWritten;
	/*0028*/ _GUID LogInstanceGuid;
	/*0028*/ ULONG StartBuffers;
	/*002c*/ ULONG PointerSize;
	/*0030*/ ULONG EventsLost;
	/*0034*/ ULONG CpuSpeedInMHz;
	/*0038*/ WCHAR * LoggerName;
	/*0040*/ WCHAR * LogFileName;
	/*0048*/ _TIME_ZONE_INFORMATION TimeZone;
	/*00f8*/ _LARGE_INTEGER BootTime;
	/*0100*/ _LARGE_INTEGER PerfFreq;
	/*0108*/ _LARGE_INTEGER StartTime;
	/*0110*/ ULONG ReservedFlags;
	/*0114*/ ULONG BuffersLost;
	/*0118*/
};

struct _TRACE_LOGFILE_HEADER32 {
	
	/*0000*/ ULONG BufferSize;
	/*0004*/ ULONG Version;
	/*0004*/ <unnamed-type-VersionDetail> VersionDetail;
	/*0008*/ ULONG ProviderVersion;
	/*000c*/ ULONG NumberOfProcessors;
	/*0010*/ _LARGE_INTEGER EndTime;
	/*0018*/ ULONG TimerResolution;
	/*001c*/ ULONG MaximumFileSize;
	/*0020*/ ULONG LogFileMode;
	/*0024*/ ULONG BuffersWritten;
	/*0028*/ _GUID LogInstanceGuid;
	/*0028*/ ULONG StartBuffers;
	/*002c*/ ULONG PointerSize;
	/*0030*/ ULONG EventsLost;
	/*0034*/ ULONG CpuSpeedInMHz;
	/*0038*/ UINT LoggerName;
	/*003c*/ UINT LogFileName;
	/*0040*/ _TIME_ZONE_INFORMATION TimeZone;
	/*00f0*/ _LARGE_INTEGER BootTime;
	/*00f8*/ _LARGE_INTEGER PerfFreq;
	/*0100*/ _LARGE_INTEGER StartTime;
	/*0108*/ ULONG ReservedFlags;
	/*010c*/ ULONG BuffersLost;
	/*0110*/
};

struct _TRACE_LOGFILE_HEADER64 {
	
	/*0000*/ ULONG BufferSize;
	/*0004*/ ULONG Version;
	/*0004*/ <unnamed-type-VersionDetail> VersionDetail;
	/*0008*/ ULONG ProviderVersion;
	/*000c*/ ULONG NumberOfProcessors;
	/*0010*/ _LARGE_INTEGER EndTime;
	/*0018*/ ULONG TimerResolution;
	/*001c*/ ULONG MaximumFileSize;
	/*0020*/ ULONG LogFileMode;
	/*0024*/ ULONG BuffersWritten;
	/*0028*/ _GUID LogInstanceGuid;
	/*0028*/ ULONG StartBuffers;
	/*002c*/ ULONG PointerSize;
	/*0030*/ ULONG EventsLost;
	/*0034*/ ULONG CpuSpeedInMHz;
	/*0038*/ ULONGLONG LoggerName;
	/*0040*/ ULONGLONG LogFileName;
	/*0048*/ _TIME_ZONE_INFORMATION TimeZone;
	/*00f8*/ _LARGE_INTEGER BootTime;
	/*0100*/ _LARGE_INTEGER PerfFreq;
	/*0108*/ _LARGE_INTEGER StartTime;
	/*0110*/ ULONG ReservedFlags;
	/*0114*/ ULONG BuffersLost;
	/*0118*/
};

struct _TRACE_PERIODIC_CAPTURE_STATE_INFO {
	/*0000*/ ULONG CaptureStateFrequencyInSeconds;
	/*0004*/ USHORT ProviderCount;
	/*0006*/ USHORT Reserved;
	/*0008*/
};

struct _TRACE_PROFILE_INTERVAL {
	/*0000*/ ULONG Source;
	/*0004*/ ULONG Interval;
	/*0008*/
};

struct _TRACE_PROVIDER_INSTANCE_INFO {
	/*0000*/ ULONG NextOffset;
	/*0004*/ ULONG EnableCount;
	/*0008*/ ULONG Pid;
	/*000c*/ ULONG Flags;
	/*0010*/
};

enum _TRACE_QUERY_INFO_CLASS {
	TraceGuidQueryList = 0x0,
	TraceGuidQueryInfo = 0x1,
	TraceGuidQueryProcess = 0x2,
	TraceStackTracingInfo = 0x3,
	TraceSystemTraceEnableFlagsInfo = 0x4,
	TraceSampledProfileIntervalInfo = 0x5,
	TraceProfileSourceConfigInfo = 0x6,
	TraceProfileSourceListInfo = 0x7,
	TracePmcEventListInfo = 0x8,
	TracePmcCounterListInfo = 0x9,
	TraceSetDisallowList = 0xa,
	TraceVersionInfo = 0xb,
	TraceGroupQueryList = 0xc,
	TraceGroupQueryInfo = 0xd,
	TraceDisallowListQuery = 0xe,
	TraceInfoReserved15 = 0xf,
	TracePeriodicCaptureStateListInfo = 0x10,
	TracePeriodicCaptureStateInfo = 0x11,
	TraceProviderBinaryTracking = 0x12,
	TraceMaxLoggersQuery = 0x13,
	TraceLbrConfigurationInfo = 0x14,
	TraceLbrEventListInfo = 0x15,
	TraceMaxPmcCounterQuery = 0x16,
	MaxTraceSetInfoClass = 0x17
};

struct _TRACE_VERSION_INFO {
	/*0000*/ UINT EtwTraceProcessingVersion;
	/*0004*/ UINT Reserved;
	/*0008*/
};

struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
	/*0000*/ _GUID TmIdentity;
	/*0010*/ _LARGE_INTEGER VirtualClock;
	/*0018*/
};

enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
	TransactionManagerBasicInformation = 0x0,
	TransactionManagerLogInformation = 0x1,
	TransactionManagerLogPathInformation = 0x2,
	TransactionManagerRecoveryInformation = 0x4,
	TransactionManagerOnlineProbeInformation = 0x3,
	TransactionManagerOldestTransactionInformation = 0x5
};

struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
	/*0000*/ ULONG LogPathLength;
	/*0004*/ WCHAR LogPath[0x1];
	/*0008*/
};

struct _TRANSACTIONMANAGER_LOG_INFORMATION {
	/*0000*/ _GUID LogIdentity;
	/*0010*/
};

struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
	/*0000*/ _GUID OldestTransactionGuid;
	/*0010*/
};

struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
	/*0000*/ ULONGLONG LastRecoveredLsn;
	/*0008*/
};

struct _TRANSACTION_BASIC_INFORMATION {
	/*0000*/ _GUID TransactionId;
	/*0010*/ ULONG State;
	/*0014*/ ULONG Outcome;
	/*0018*/
};

struct _TRANSACTION_BIND_INFORMATION {
	/*0000*/ void * TmHandle;
	/*0008*/
};

struct _TRANSACTION_ENLISTMENTS_INFORMATION {
	/*0000*/ ULONG NumberOfEnlistments;
	/*0004*/ _TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[0x1];
	/*0024*/
};

struct _TRANSACTION_ENLISTMENT_PAIR {
	/*0000*/ _GUID EnlistmentId;
	/*0010*/ _GUID ResourceManagerId;
	/*0020*/
};

enum _TRANSACTION_INFORMATION_CLASS {
	TransactionBasicInformation = 0x0,
	TransactionPropertiesInformation = 0x1,
	TransactionEnlistmentInformation = 0x2,
	TransactionSuperiorEnlistmentInformation = 0x3,
	TransactionBindInformation = 0x4,
	TransactionDTCPrivateInformation = 0x5
};

struct _TRANSACTION_LIST_ENTRY {
	/*0000*/ _GUID UOW;
	/*0010*/
};

struct _TRANSACTION_LIST_INFORMATION {
	/*0000*/ ULONG NumberOfTransactions;
	/*0004*/ _TRANSACTION_LIST_ENTRY TransactionInformation[0x1];
	/*0014*/
};

struct _TRANSACTION_NOTIFICATION {
	/*0000*/ void * TransactionKey;
	/*0008*/ ULONG TransactionNotification;
	/*0010*/ _LARGE_INTEGER TmVirtualClock;
	/*0018*/ ULONG ArgumentLength;
	/*0020*/
};

struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
	/*0000*/ ULONG MarshalCookie;
	/*0004*/ _GUID UOW;
	/*0014*/
};

struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
	/*0000*/ ULONG PropagationCookie;
	/*0004*/ _GUID UOW;
	/*0014*/ _GUID TmIdentity;
	/*0024*/ ULONG BufferLength;
	/*0028*/
};

struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
	/*0000*/ _GUID EnlistmentId;
	/*0010*/ _GUID UOW;
	/*0020*/
};

struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
	/*0000*/ ULONG SavepointId;
	/*0004*/
};

struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
	/*0000*/ _GUID TmIdentity;
	/*0010*/ ULONG Flags;
	/*0014*/
};

enum _TRANSACTION_OUTCOME {
	TransactionOutcomeUndetermined = 0x1,
	TransactionOutcomeCommitted = 0x2,
	TransactionOutcomeAborted = 0x3
};

struct _TRANSACTION_PROPERTIES_INFORMATION {
	/*0000*/ ULONG IsolationLevel;
	/*0004*/ ULONG IsolationFlags;
	/*0008*/ _LARGE_INTEGER Timeout;
	/*0010*/ ULONG Outcome;
	/*0014*/ ULONG DescriptionLength;
	/*0018*/ WCHAR Description[0x1];
	/*0020*/
};

enum _TRANSACTION_STATE {
	TransactionStateNormal = 0x1,
	TransactionStateIndoubt = 0x2,
	TransactionStateCommittedNotify = 0x3
};

struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
	/*0000*/ _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
	/*0020*/
};

enum _TRANSFER_ADVISE_STATE {
	TS_NONE = 0x0,
	TS_PERFORMING = 0x1,
	TS_PREPARING = 0x2,
	TS_INDETERMINATE = 0x4
};

enum _TRANSFER_SOURCE_FLAGS {
	TSF_NORMAL = 0x0,
	TSF_FAIL_EXIST = 0x0,
	TSF_RENAME_EXIST = 0x1,
	TSF_OVERWRITE_EXIST = 0x2,
	TSF_ALLOW_DECRYPTION = 0x4,
	TSF_NO_SECURITY = 0x8,
	TSF_COPY_CREATION_TIME = 0x10,
	TSF_COPY_WRITE_TIME = 0x20,
	TSF_USE_FULL_ACCESS = 0x40,
	TSF_DELETE_RECYCLE_IF_POSSIBLE = 0x80,
	TSF_COPY_HARD_LINK = 0x100,
	TSF_COPY_LOCALIZED_NAME = 0x200,
	TSF_MOVE_AS_COPY_DELETE = 0x400,
	TSF_SUSPEND_SHELLEVENTS = 0x800
};

struct _TRANSPORT_HEADER_OFFSET {
	/*0000*/ USHORT ProtocolType;
	/*0002*/ USHORT HeaderOffset;
	/*0004*/
};

struct _TREEITEM;

struct _TRIVERTEX {
	/*0000*/ LONG x;
	/*0004*/ LONG y;
	/*0008*/ USHORT Red;
	/*000a*/ USHORT Green;
	/*000c*/ USHORT Blue;
	/*000e*/ USHORT Alpha;
	/*0010*/
};

struct _TTGETTITLE {
	/*0000*/ ULONG dwSize;
	/*0004*/ UINT uTitleBitmap;
	/*0008*/ UINT cch;
	/*0010*/ WCHAR * pszTitle;
	/*0018*/
};

struct _TT_HITTESTINFOA {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ tagPOINT pt;
	/*0010*/ tagTOOLINFOA ti;
	/*0058*/
};

struct _TT_HITTESTINFOW {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ tagPOINT pt;
	/*0010*/ tagTOOLINFOW ti;
	/*0058*/
};

enum _TVITEMPART {
	TVGIPR_BUTTON = 0x1
};

struct _TXFS_CREATE_MINIVERSION_INFO {
	/*0000*/ USHORT StructureVersion;
	/*0002*/ USHORT StructureLength;
	/*0004*/ ULONG BaseVersion;
	/*0008*/ USHORT MiniVersion;
	/*000c*/
};

struct _TXFS_GET_METADATA_INFO_OUT {
	
	/*0000*/ <unnamed-type-TxfFileId> TxfFileId;
	/*0010*/ _GUID LockingTransaction;
	/*0020*/ ULONGLONG LastLsn;
	/*0028*/ ULONG TransactionState;
	/*0030*/
};

struct _TXFS_GET_TRANSACTED_VERSION {
	/*0000*/ ULONG ThisBaseVersion;
	/*0004*/ ULONG LatestVersion;
	/*0008*/ USHORT ThisMiniVersion;
	/*000a*/ USHORT FirstMiniVersion;
	/*000c*/ USHORT LatestMiniVersion;
	/*0010*/
};

struct _TXFS_LIST_TRANSACTIONS {
	/*0000*/ ULONGLONG NumberOfTransactions;
	/*0008*/ ULONGLONG BufferSizeRequired;
	/*0010*/
};

struct _TXFS_LIST_TRANSACTIONS_ENTRY {
	/*0000*/ _GUID TransactionId;
	/*0010*/ ULONG TransactionState;
	/*0014*/ ULONG Reserved1;
	/*0018*/ ULONG Reserved2;
	/*0020*/ LONGLONG Reserved3;
	/*0028*/
};

struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {
	/*0000*/ _GUID KtmTransaction;
	/*0010*/ ULONGLONG NumberOfFiles;
	/*0018*/ ULONGLONG BufferSizeRequired;
	/*0020*/ ULONGLONG Offset;
	/*0028*/
};

struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {
	/*0000*/ ULONGLONG Offset;
	/*0008*/ ULONG NameFlags;
	/*0010*/ LONGLONG FileId;
	/*0018*/ ULONG Reserved1;
	/*001c*/ ULONG Reserved2;
	/*0020*/ LONGLONG Reserved3;
	/*0028*/ WCHAR FileName[0x1];
	/*0030*/
};

struct _TXFS_MODIFY_RM {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG LogContainerCountMax;
	/*0008*/ ULONG LogContainerCountMin;
	/*000c*/ ULONG LogContainerCount;
	/*0010*/ ULONG LogGrowthIncrement;
	/*0014*/ ULONG LogAutoShrinkPercentage;
	/*0018*/ ULONGLONG Reserved;
	/*0020*/ USHORT LoggingMode;
	/*0028*/
};

struct _TXFS_QUERY_RM_INFORMATION {
	/*0000*/ ULONG BytesRequired;
	/*0008*/ ULONGLONG TailLsn;
	/*0010*/ ULONGLONG CurrentLsn;
	/*0018*/ ULONGLONG ArchiveTailLsn;
	/*0020*/ ULONGLONG LogContainerSize;
	/*0028*/ _LARGE_INTEGER HighestVirtualClock;
	/*0030*/ ULONG LogContainerCount;
	/*0034*/ ULONG LogContainerCountMax;
	/*0038*/ ULONG LogContainerCountMin;
	/*003c*/ ULONG LogGrowthIncrement;
	/*0040*/ ULONG LogAutoShrinkPercentage;
	/*0044*/ ULONG Flags;
	/*0048*/ USHORT LoggingMode;
	/*004a*/ USHORT Reserved;
	/*004c*/ ULONG RmState;
	/*0050*/ ULONGLONG LogCapacity;
	/*0058*/ ULONGLONG LogFree;
	/*0060*/ ULONGLONG TopsSize;
	/*0068*/ ULONGLONG TopsUsed;
	/*0070*/ ULONGLONG TransactionCount;
	/*0078*/ ULONGLONG OnePCCount;
	/*0080*/ ULONGLONG TwoPCCount;
	/*0088*/ ULONGLONG NumberLogFileFull;
	/*0090*/ ULONGLONG OldestTransactionAge;
	/*0098*/ _GUID RMName;
	/*00a8*/ ULONG TmLogPathOffset;
	/*00b0*/
};

struct _TXFS_READ_BACKUP_INFORMATION_OUT {
	/*0000*/ ULONG BufferLength;
	/*0000*/ UCHAR Buffer[0x1];
	/*0004*/
};

struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
	/*0000*/ _LARGE_INTEGER LastVirtualClock;
	/*0008*/ ULONGLONG LastRedoLsn;
	/*0010*/ ULONGLONG HighestRecoveryLsn;
	/*0018*/ ULONG Flags;
	/*0020*/
};

struct _TXFS_SAVEPOINT_INFORMATION {
	/*0000*/ void * KtmTransaction;
	/*0008*/ ULONG ActionCode;
	/*000c*/ ULONG SavepointId;
	/*0010*/
};

struct _TXFS_START_RM_INFORMATION {
	/*0000*/ ULONG Flags;
	/*0008*/ ULONGLONG LogContainerSize;
	/*0010*/ ULONG LogContainerCountMin;
	/*0014*/ ULONG LogContainerCountMax;
	/*0018*/ ULONG LogGrowthIncrement;
	/*001c*/ ULONG LogAutoShrinkPercentage;
	/*0020*/ ULONG TmLogPathOffset;
	/*0024*/ USHORT TmLogPathLength;
	/*0026*/ USHORT LoggingMode;
	/*0028*/ USHORT LogPathLength;
	/*002a*/ USHORT Reserved;
	/*002c*/ WCHAR LogPath[0x1];
	/*0030*/
};

struct _TXFS_TRANSACTION_ACTIVE_INFO {
	/*0000*/ UCHAR TransactionsActiveAtSnapshot;
	/*0001*/
};

struct _TXFS_WRITE_BACKUP_INFORMATION {
	/*0000*/ UCHAR Buffer[0x1];
	/*0001*/
};

class _TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5> {

	enum State {
		Created = 0x0,
		Started = 0x1,
		Stopped = 0x2,
		Destroyed = 0x3
	};

protected:
	void _TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5>( _TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5> && );
	void _TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5>();
private:
	void _TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5>( _TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5> const & );
protected:
	_TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5> & operator=( _TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5> && );
private:
	_TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5> & operator=( _TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5> const & );
	void Reset();
	/*0000*/ State m_State;
	/*0004*/ BOOLEAN m_HasRelatedId;
	/*0008*/ _GUID m_Id;
	/*0018*/ _GUID m_CapturedRelatedId;
protected:
	void ~_TlgActivityBase<TraceLoggingActivity<&g_traceLoggingProvider,70368744177664,5,_TlgReflectorTag_Param0IsHProvider>,70368744177664,5>();
	void SetRelatedId( _GUID const & );
	_GUID const * GetRelatedId() const;
	void PushThreadActivityId();
	void PopThreadActivityId();
public:
	static ULONGLONG const Keyword;
	static UCHAR const Level;
	_GUID const * Id() const;
	BOOLEAN IsStarted() const;
	_GUID const * zInternalRelatedId() const;
	void zInternalStart();
	void zInternalStop();
protected:
	void * __vecDelDtor( UINT );
	/*0028*/
};

enum _TlgBlob_t {
	_TlgBlobNone = 0x0,
	_TlgBlobEnd = 0x1,
	_TlgBlobProvider = 0x2,
	_TlgBlobEvent3 = 0x3,
	_TlgBlobProvider3 = 0x4,
	_TlgBlobEvent2 = 0x5,
	_TlgBlobEvent4 = 0x6,
	_TlgBlobMax = 0x7
};

enum _TlgFlags_t {
	_TlgFlagsNone = 0x0,
	_TlgFlagsPtr64 = 0x1
};

enum _TlgOptions_t {
	_TlgOptionNone = 0x0,
	_TlgOptionGroup = 0x1
};

struct _TraceLoggingMetadata_t {
	/*0000*/ UINT Signature;
	/*0004*/ USHORT Size;
	/*0006*/ UCHAR Version;
	/*0007*/ UCHAR Flags;
	/*0008*/ ULONGLONG Magic;
	/*0010*/
};

struct _TypeDescriptor {
	/*0000*/ void const * pVFTable;
	/*0008*/ void * spare;
	/*0010*/ CHAR name[];
	/*0010*/
};

struct _UDACCEL {
	/*0000*/ UINT nSec;
	/*0004*/ UINT nInc;
	/*0008*/
};

enum _UDP_ENCAP_TYPE {
	OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE = 0x0,
	OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER = 0x1
};

enum _UDP_TABLE_CLASS {
	UDP_TABLE_BASIC = 0x0,
	UDP_TABLE_OWNER_PID = 0x1,
	UDP_TABLE_OWNER_MODULE = 0x2
};

union _ULARGE_INTEGER {
	
	/*0000*/ ULONG LowPart;
	/*0004*/ ULONG HighPart;
	/*0000*/ <unnamed-type-u> u;
	/*0000*/ ULONGLONG QuadPart;
	/*0008*/
};

struct _UMS_CREATE_THREAD_ATTRIBUTES {
	/*0000*/ ULONG UmsVersion;
	/*0008*/ void * UmsContext;
	/*0010*/ void * UmsCompletionList;
	/*0018*/
};

struct _UMS_SCHEDULER_STARTUP_INFO {
	/*0000*/ ULONG UmsVersion;
	/*0008*/ void * CompletionList;
	/*0010*/ void (* SchedulerProc)( _RTL_UMS_SCHEDULER_REASON , ULONGLONG , void * );
	/*0018*/ void * SchedulerParam;
	/*0020*/
};

struct _UMS_SYSTEM_THREAD_INFORMATION {
	/*0000*/ ULONG UmsVersion;
	/*0004*/ ULONG IsUmsSchedulerThread : 01; // 0x00000001;
	/*0004*/ ULONG IsUmsWorkerThread : 01; // 0x00000002;
	/*0004*/ ULONG ThreadUmsFlags;
	/*0008*/
};

struct _UNICODE_PREFIX_TABLE {
	/*0000*/ SHORT NodeTypeCode;
	/*0002*/ SHORT NameLength;
	/*0008*/ _UNICODE_PREFIX_TABLE_ENTRY * NextPrefixTree;
	/*0010*/ _UNICODE_PREFIX_TABLE_ENTRY * LastNextEntry;
	/*0018*/
};

struct _UNICODE_PREFIX_TABLE_ENTRY {
	/*0000*/ SHORT NodeTypeCode;
	/*0002*/ SHORT NameLength;
	/*0008*/ _UNICODE_PREFIX_TABLE_ENTRY * NextPrefixTree;
	/*0010*/ _UNICODE_PREFIX_TABLE_ENTRY * CaseMatch;
	/*0018*/ _RTL_SPLAY_LINKS Links;
	/*0030*/ _UNICODE_STRING * Prefix;
	/*0038*/
};

struct _UNICODE_STRING {
	/*0000*/ USHORT Length;
	/*0002*/ USHORT MaximumLength;
	/*0008*/ WCHAR * Buffer;
	/*0010*/
};

struct _UNIQUE_PROCESS_INFORMATION {
	/*0000*/ ULONGLONG DontUse : 09; // 0x00000000000001ff;
	/*0000*/ ULONGLONG UniqueProcessKey : 48; // 0x01fffffffffffe00;
	/*0000*/ ULONGLONG Reserved : 07; // 0xfe00000000000000;
	/*0008*/
};

struct _UNIVERSAL_NAME_INFOA {
	/*0000*/ CHAR * lpUniversalName;
	/*0008*/
};

struct _UNIVERSAL_NAME_INFOW {
	/*0000*/ WCHAR * lpUniversalName;
	/*0008*/
};

struct _UNLOAD_DLL_DEBUG_INFO {
	/*0000*/ void * lpBaseOfDll;
	/*0008*/
};

union _UNWIND_CODE {
	
	/*0000*/ UCHAR CodeOffset;
	/*0001*/ UCHAR UnwindOp : 04; // 0x0f;
	/*0001*/ UCHAR OpInfo : 04; // 0xf0;
	/*0000*/ <unnamed-type-EpilogueCode> EpilogueCode;
	/*0000*/ USHORT FrameOffset;
	/*0002*/
};

struct _UNWIND_HISTORY_TABLE {
	/*0000*/ ULONG Count;
	/*0004*/ UCHAR LocalHint;
	/*0005*/ UCHAR GlobalHint;
	/*0006*/ UCHAR Search;
	/*0007*/ UCHAR Once;
	/*0008*/ ULONGLONG LowAddress;
	/*0010*/ ULONGLONG HighAddress;
	/*0018*/ _UNWIND_HISTORY_TABLE_ENTRY Entry[0xc];
	/*00d8*/
};

struct _UNWIND_HISTORY_TABLE_ENTRY {
	/*0000*/ ULONGLONG ImageBase;
	/*0008*/ _IMAGE_RUNTIME_FUNCTION_ENTRY * FunctionEntry;
	/*0010*/
};

struct _UNWIND_INFO {
	/*0000*/ UCHAR Version : 03; // 0x07;
	/*0000*/ UCHAR Flags : 05; // 0xf8;
	/*0001*/ UCHAR SizeOfProlog;
	/*0002*/ UCHAR CountOfCodes;
	/*0003*/ UCHAR FrameRegister : 04; // 0x0f;
	/*0003*/ UCHAR FrameOffset : 04; // 0xf0;
	/*0004*/ _UNWIND_CODE UnwindCode[0x1];
	/*0006*/
};

enum _UNWIND_OP_CODES {
	UWOP_PUSH_NONVOL = 0x0,
	UWOP_ALLOC_LARGE = 0x1,
	UWOP_ALLOC_SMALL = 0x2,
	UWOP_SET_FPREG = 0x3,
	UWOP_SAVE_NONVOL = 0x4,
	UWOP_SAVE_NONVOL_FAR = 0x5,
	UWOP_EPILOG = 0x6,
	UWOP_SPARE_CODE = 0x7,
	UWOP_SAVE_XMM128 = 0x8,
	UWOP_SAVE_XMM128_FAR = 0x9,
	UWOP_PUSH_MACHFRAME = 0xa
};

enum _URLZONEREG {
	URLZONEREG_DEFAULT = 0x0,
	URLZONEREG_HKLM = 0x1,
	URLZONEREG_HKCU = 0x2
};

enum _USER_ACTIVITY_PRESENCE {
	PowerUserPresent = 0x0,
	PowerUserNotPresent = 0x1,
	PowerUserInactive = 0x2,
	PowerUserMaximum = 0x3,
	PowerUserInvalid = 0x3
};

struct _USER_MARSHAL_CB {
	/*0000*/ ULONG Flags;
	/*0008*/ _MIDL_STUB_MESSAGE * pStubMsg;
	/*0010*/ UCHAR const * pReserve;
	/*0018*/ ULONG Signature;
	/*001c*/ _USER_MARSHAL_CB_TYPE CBType;
	/*0020*/ UCHAR const * pFormat;
	/*0028*/ UCHAR const * pTypeFormat;
	/*0030*/
};

enum _USER_MARSHAL_CB_TYPE {
	USER_MARSHAL_CB_BUFFER_SIZE = 0x0,
	USER_MARSHAL_CB_MARSHALL = 0x1,
	USER_MARSHAL_CB_UNMARSHALL = 0x2,
	USER_MARSHAL_CB_FREE = 0x3
};

struct _USER_MARSHAL_ROUTINE_QUADRUPLE {
	/*0000*/ ULONG (* pfnBufferSize)( ULONG * , ULONG , void * );
	/*0008*/ UCHAR * (* pfnMarshall)( ULONG * , UCHAR * , void * );
	/*0010*/ UCHAR * (* pfnUnmarshall)( ULONG * , UCHAR * , void * );
	/*0018*/ void (* pfnFree)( ULONG * , void * );
	/*0020*/
};

struct _UUID_VECTOR {
	/*0000*/ ULONG Count;
	/*0008*/ _GUID * Uuid[0x1];
	/*0010*/
};

struct _VARIABLE_NAME {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ _GUID VendorGuid;
	/*0014*/ WCHAR Name[0x1];
	/*0018*/
};

struct _VARIABLE_NAME_AND_VALUE {
	/*0000*/ ULONG NextEntryOffset;
	/*0004*/ ULONG ValueOffset;
	/*0008*/ ULONG ValueLength;
	/*000c*/ ULONG Attributes;
	/*0010*/ _GUID VendorGuid;
	/*0020*/ WCHAR Name[0x1];
	/*0024*/
};

struct _VCN_RANGE_INPUT_BUFFER {
	/*0000*/ _LARGE_INTEGER StartingVcn;
	/*0008*/ _LARGE_INTEGER ClusterCount;
	/*0010*/
};

struct _VIDEOPARAMETERS {
	/*0000*/ _GUID Guid;
	/*0010*/ ULONG dwOffset;
	/*0014*/ ULONG dwCommand;
	/*0018*/ ULONG dwFlags;
	/*001c*/ ULONG dwMode;
	/*0020*/ ULONG dwTVStandard;
	/*0024*/ ULONG dwAvailableModes;
	/*0028*/ ULONG dwAvailableTVStandard;
	/*002c*/ ULONG dwFlickerFilter;
	/*0030*/ ULONG dwOverScanX;
	/*0034*/ ULONG dwOverScanY;
	/*0038*/ ULONG dwMaxUnscaledX;
	/*003c*/ ULONG dwMaxUnscaledY;
	/*0040*/ ULONG dwPositionX;
	/*0044*/ ULONG dwPositionY;
	/*0048*/ ULONG dwBrightness;
	/*004c*/ ULONG dwContrast;
	/*0050*/ ULONG dwCPType;
	/*0054*/ ULONG dwCPCommand;
	/*0058*/ ULONG dwCPStandard;
	/*005c*/ ULONG dwCPKey;
	/*0060*/ ULONG bCP_APSTriggerBits;
	/*0064*/ UCHAR bOEMCopyProtection[0x100];
	/*0164*/
};

struct _VIRTUALIZATION_INSTANCE_INFO_INPUT {
	/*0000*/ ULONG NumberOfWorkerThreads;
	/*0004*/ ULONG Flags;
	/*0008*/
};

struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX {
	/*0000*/ USHORT HeaderSize;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG NotificationInfoSize;
	/*000c*/ USHORT NotificationInfoOffset;
	/*000e*/ USHORT ProviderMajorVersion;
	/*0010*/
};

struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
	/*0000*/ _GUID VirtualizationInstanceID;
	/*0010*/
};

enum _VIRTUAL_MEMORY_INFORMATION_CLASS {
	VmPrefetchInformation = 0x0,
	VmPagePriorityInformation = 0x1,
	VmCfgCallTargetInformation = 0x2,
	VmPageDirtyStateInformation = 0x3,
	VmImageHotPatchInformation = 0x4,
	VmPhysicalContiguityInformation = 0x5,
	VmVirtualMachinePrepopulateInformation = 0x6
};

enum _VIRTUAL_STORAGE_BEHAVIOR_CODE {
	VirtualStorageBehaviorUndefined = 0x0,
	VirtualStorageBehaviorCacheWriteThrough = 0x1,
	VirtualStorageBehaviorCacheWriteBack = 0x2
};

struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT {
	/*0000*/ ULONG Size;
	/*0004*/ _VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;
	/*0008*/
};

struct _VIRTUAL_STORAGE_TYPE {
	/*0000*/ ULONG DeviceId;
	/*0004*/ _GUID VendorId;
	/*0014*/
};

struct _VM_COUNTERS {
	/*0000*/ ULONGLONG PeakVirtualSize;
	/*0008*/ ULONGLONG VirtualSize;
	/*0010*/ ULONG PageFaultCount;
	/*0018*/ ULONGLONG PeakWorkingSetSize;
	/*0020*/ ULONGLONG WorkingSetSize;
	/*0028*/ ULONGLONG QuotaPeakPagedPoolUsage;
	/*0030*/ ULONGLONG QuotaPagedPoolUsage;
	/*0038*/ ULONGLONG QuotaPeakNonPagedPoolUsage;
	/*0040*/ ULONGLONG QuotaNonPagedPoolUsage;
	/*0048*/ ULONGLONG PagefileUsage;
	/*0050*/ ULONGLONG PeakPagefileUsage;
	/*0058*/
};

struct _VM_COUNTERS_EX {
	/*0000*/ ULONGLONG PeakVirtualSize;
	/*0008*/ ULONGLONG VirtualSize;
	/*0010*/ ULONG PageFaultCount;
	/*0018*/ ULONGLONG PeakWorkingSetSize;
	/*0020*/ ULONGLONG WorkingSetSize;
	/*0028*/ ULONGLONG QuotaPeakPagedPoolUsage;
	/*0030*/ ULONGLONG QuotaPagedPoolUsage;
	/*0038*/ ULONGLONG QuotaPeakNonPagedPoolUsage;
	/*0040*/ ULONGLONG QuotaNonPagedPoolUsage;
	/*0048*/ ULONGLONG PagefileUsage;
	/*0050*/ ULONGLONG PeakPagefileUsage;
	/*0058*/ ULONGLONG PrivateUsage;
	/*0060*/
};

struct _VM_COUNTERS_EX2 {
	/*0000*/ _VM_COUNTERS_EX CountersEx;
	/*0060*/ ULONGLONG PrivateWorkingSetSize;
	/*0068*/ ULONGLONG SharedCommitUsage;
	/*0070*/
};

struct _VOLUME_REFS_INFO_BUFFER {
	/*0000*/ _LARGE_INTEGER CacheSizeInBytes;
	/*0008*/ _LARGE_INTEGER AllocatedCacheInBytes;
	/*0010*/ _LARGE_INTEGER PopulatedCacheInBytes;
	/*0018*/ _LARGE_INTEGER InErrorCacheInBytes;
	/*0020*/ _LARGE_INTEGER MemoryUsedForCacheMetadata;
	/*0028*/ ULONG CacheLineSize;
	/*002c*/ LONG CacheTransactionsOutstanding;
	/*0030*/ LONG CacheLinesFree;
	/*0034*/ LONG CacheLinesInError;
	/*0038*/ _LARGE_INTEGER CacheHitsInBytes;
	/*0040*/ _LARGE_INTEGER CacheMissesInBytes;
	/*0048*/ _LARGE_INTEGER CachePopulationUpdatesInBytes;
	/*0050*/ _LARGE_INTEGER CacheWriteThroughUpdatesInBytes;
	/*0058*/ _LARGE_INTEGER CacheInvalidationsInBytes;
	/*0060*/ _LARGE_INTEGER CacheOverReadsInBytes;
	/*0068*/ _LARGE_INTEGER MetadataWrittenBytes;
	/*0070*/ LONG CacheHitCounter;
	/*0074*/ LONG CacheMissCounter;
	/*0078*/ LONG CacheLineAllocationCounter;
	/*007c*/ LONG CacheInvalidationsCounter;
	/*0080*/ LONG CachePopulationUpdatesCounter;
	/*0084*/ LONG CacheWriteThroughUpdatesCounter;
	/*0088*/ LONG MaxCacheTransactionsOutstanding;
	/*008c*/ LONG DataWritesReallocationCount;
	/*0090*/ LONG DataInPlaceWriteCount;
	/*0094*/ LONG MetadataAllocationsFastTierCount;
	/*0098*/ LONG MetadataAllocationsSlowTierCount;
	/*009c*/ LONG DataAllocationsFastTierCount;
	/*00a0*/ LONG DataAllocationsSlowTierCount;
	/*00a4*/ LONG DestagesSlowTierToFastTier;
	/*00a8*/ LONG DestagesFastTierToSlowTier;
	/*00ac*/ LONG SlowTierDataFillRatio;
	/*00b0*/ LONG FastTierDataFillRatio;
	/*00b4*/ LONG SlowTierMetadataFillRatio;
	/*00b8*/ LONG FastTierMetadataFillRatio;
	/*00bc*/ LONG SlowToFastDestageReadLatency;
	/*00c0*/ LONG SlowToFastDestageReadLatencyBase;
	/*00c4*/ LONG SlowToFastDestageWriteLatency;
	/*00c8*/ LONG SlowToFastDestageWriteLatencyBase;
	/*00cc*/ LONG FastToSlowDestageReadLatency;
	/*00d0*/ LONG FastToSlowDestageReadLatencyBase;
	/*00d4*/ LONG FastToSlowDestageWriteLatency;
	/*00d8*/ LONG FastToSlowDestageWriteLatencyBase;
	/*00dc*/ LONG SlowTierContainerFillRatio;
	/*00e0*/ LONG SlowTierContainerFillRatioBase;
	/*00e4*/ LONG FastTierContainerFillRatio;
	/*00e8*/ LONG FastTierContainerFillRatioBase;
	/*00ec*/ LONG TreeUpdateLatency;
	/*00f0*/ LONG TreeUpdateLatencyBase;
	/*00f4*/ LONG CheckpointLatency;
	/*00f8*/ LONG CheckpointLatencyBase;
	/*00fc*/ LONG TreeUpdateCount;
	/*0100*/ LONG CheckpointCount;
	/*0104*/ LONG LogWriteCount;
	/*0108*/ LONG LogFillRatio;
	/*010c*/ LONG ReadCacheInvalidationsForOverwrite;
	/*0110*/ LONG ReadCacheInvalidationsForReuse;
	/*0114*/ LONG ReadCacheInvalidationsGeneral;
	/*0118*/ LONG ReadCacheChecksOnMount;
	/*011c*/ LONG ReadCacheIssuesOnMount;
	/*0120*/ LONG TrimLatency;
	/*0124*/ LONG TrimLatencyBase;
	/*0128*/ LONG DataCompactionCount;
	/*012c*/ LONG CompactionReadLatency;
	/*0130*/ LONG CompactionReadLatencyBase;
	/*0134*/ LONG CompactionWriteLatency;
	/*0138*/ LONG CompactionWriteLatencyBase;
	/*0140*/ _LARGE_INTEGER DataInPlaceWriteClusterCount;
	/*0148*/ LONG CompactionFailedDueToIneligibleContainer;
	/*014c*/ LONG CompactionFailedDueToMaxFragmentation;
	/*0150*/ LONG CompactedContainerFillRatio;
	/*0154*/ LONG CompactedContainerFillRatioBase;
	/*0158*/ LONG ContainerMoveRetryCount;
	/*015c*/ LONG ContainerMoveFailedDueToIneligibleContainer;
	/*0160*/ LONG CompactionFailureCount;
	/*0164*/ LONG ContainerMoveFailureCount;
	/*0168*/ _LARGE_INTEGER NumberOfDirtyMetadataPages;
	/*0170*/ LONG NumberOfDirtyTableListEntries;
	/*0174*/ LONG NumberOfDeleteQueueEntries;
	/*0178*/
};

enum _VRF_RULE_CLASS_ID {
	VrfSpecialPoolRuleClass = 0x0,
	VrfForceIrqlRuleClass = 0x1,
	VrfAllocationFailuresRuleClass = 0x2,
	VrfTrackingPoolAllocationsRuleClass = 0x3,
	VrfIORuleClass = 0x4,
	VrfDeadlockPreventionRuleClass = 0x5,
	VrfEnhancedIORuleClass = 0x6,
	VrfDMARuleClass = 0x7,
	VrfSecurityRuleClass = 0x8,
	VrfForcePendingIORequestRuleClass = 0x9,
	VrfIRPTrackingRuleClass = 0xa,
	VrfMiscellaneousRuleClass = 0xb,
	VrfMoreDebuggingRuleClass = 0xc,
	VrfMDLInvariantStackRuleClass = 0xd,
	VrfMDLInvariantDriverRuleClass = 0xe,
	VrfPowerDelayFuzzingRuleClass = 0xf,
	VrfPortMiniportRuleClass = 0x10,
	VrfStandardDDIRuleClass = 0x11,
	VrfAutoFailRuleClass = 0x12,
	VrfAdditionalDDIRuleClass = 0x13,
	VrfRuleClassBase = 0x14,
	VrfNdisWifiRuleClass = 0x15,
	VrfDriverLoggingRuleClass = 0x16,
	VrfSyncDelayFuzzingRuleClass = 0x17,
	VrfVMSwitchingRuleClass = 0x18,
	VrfCodeIntegrityRuleClass = 0x19,
	VrfBelow4GBAllocationRuleClass = 0x1a,
	VrfProcessorBranchTraceRuleClass = 0x1b,
	VrfAdvancedMMRuleClass = 0x1c,
	VrfExtendingXDVTimeLimit = 0x1d,
	VrfSystemBIOSRuleClass = 0x1e,
	VrfHardwareRuleClass = 0x1f,
	VrfStateSepRuleClass = 0x20,
	VrfWDFRuleClass = 0x21,
	VrfMoreIrqlRuleClass = 0x22,
	VrfXDVPlatformMode = 0x23,
	VrfStandalonePlatformMode = 0x24,
	VrfPlatformModeTest = 0x25,
	VrfInfoDisclosureIRPRule = 0x26,
	VrfLwSpecialPool = 0x27,
	VrfAVXCorruption = 0x28,
	VrfAccessModeMismatch = 0x29,
	ReservedForDVRF42 = 0x2a,
	ReservedForDVRF43 = 0x2b,
	ReservedForDVRF44 = 0x2c,
	ReservedForDVRF45 = 0x2d,
	ReservedForDVRF46 = 0x2e,
	ReservedForDVRF47 = 0x2f,
	ReservedForDVRF48 = 0x30,
	ReservedForDVRF49 = 0x31,
	ReservedForDVRF50 = 0x32,
	ReservedForDVRF51 = 0x33,
	ReservedForDVRF52 = 0x34,
	ReservedForDVRF53 = 0x35,
	ReservedForDVRF54 = 0x36,
	ReservedForDVRF55 = 0x37,
	ReservedForDVRF56 = 0x38,
	ReservedForDVRF57 = 0x39,
	ReservedForDVRF58 = 0x3a,
	ReservedForDVRF59 = 0x3b,
	ReservedForDVRF60 = 0x3c,
	ReservedForDVRF61 = 0x3d,
	ReservedForDVRF62 = 0x3e,
	ReservedForDVRF63 = 0x3f,
	VrfRuleClassSizeMax = 0x40
};

enum _VRF_TRIAGE_CONTEXT {
	VRF_TRIAGE_CONTEXT_NONE = 0x0,
	VRF_TRIAGE_CONTEXT_DEFAULT = 0x1,
	VRF_TRIAGE_CONTEXT_DEVELOPMENT = 0x1,
	VRF_TRIAGE_CONTEXT_CERTIFICATION = 0x2,
	VRF_TRIAGE_CONTEXT_FLIGHT_TARGETED = 0x3,
	VRF_TRIAGE_CONTEXT_FLIGHT_DIAGNOSTICS = 0x4,
	VRF_TRIAGE_CONTEXT_FLIGHT_MONITORING = 0x5,
	NUM_VRF_TRIAGE_CONTEXTS = 0x6
};

enum _WAIT_TYPE {
	WaitAll = 0x0,
	WaitAny = 0x1,
	WaitNotification = 0x2,
	WaitDequeue = 0x3
};

struct _WAKE_TIMER_INFO {
	/*0000*/ ULONGLONG OffsetToNext;
	/*0008*/ _ULARGE_INTEGER DueTime;
	/*0010*/ ULONG Period;
	/*0018*/ _DIAGNOSTIC_BUFFER ReasonContext;
	/*0040*/
};

enum _WATCHDOG_HANDLER_ACTION {
	WdActionSetTimeoutValue = 0x0,
	WdActionQueryTimeoutValue = 0x1,
	WdActionResetTimer = 0x2,
	WdActionStopTimer = 0x3,
	WdActionStartTimer = 0x4,
	WdActionSetTriggerAction = 0x5,
	WdActionQueryTriggerAction = 0x6,
	WdActionQueryState = 0x7,
	WdActionSleep = 0x8,
	WdActionWake = 0x9,
	WdActionMarkHiberPhase = 0xa
};

enum _WATCHDOG_INFORMATION_CLASS {
	WdInfoTimeoutValue = 0x0,
	WdInfoResetTimer = 0x1,
	WdInfoStopTimer = 0x2,
	WdInfoStartTimer = 0x3,
	WdInfoTriggerAction = 0x4,
	WdInfoState = 0x5,
	WdInfoTriggerReset = 0x6,
	WdInfoNop = 0x7,
	WdInfoGeneratedLastReset = 0x8,
	WdInfoInvalid = 0x9
};

struct _WCM_ALLOWED_CONNECTIVITY {
	/*0000*/ INT fAutoConnectEnabled;
	/*0004*/ INT fManualConnectEnabled;
	/*0008*/ INT fChanged;
	/*000c*/ INT fResetManualConnectState;
	/*0010*/ WCM_INTF_PROFILELIST_TRI_STATE AutoConnectFilterControl;
	/*0014*/ WCM_INTF_PROFILELIST_TRI_STATE ManualConnectFilterControl;
	/*0018*/ ULONG dwAutoConnectProfileCount;
	/*001c*/ ULONG dwManualConnectProfileCount;
	/*0020*/
};

enum _WCM_AVAILABLE_NETWORK_STATUS {
	WcmAvailableNetworkUnknown = 0x0,
	WcmAvailableNetworkDisconnected = 0x1,
	WcmAvailableNetworkConnecting = 0x2,
	WcmAvailableNetworkDisconnecting = 0x3,
	WcmAvailableNetworkConnected = 0x4,
	WcmAvailableNetworkFailed = 0x5
};

enum _WCM_CONNECTION_COST {
	WCM_CONNECTION_COST_UNKNOWN = 0x0,
	WCM_CONNECTION_COST_UNRESTRICTED = 0x1,
	WCM_CONNECTION_COST_FIXED = 0x2,
	WCM_CONNECTION_COST_VARIABLE = 0x4,
	WCM_CONNECTION_COST_OVERDATALIMIT = 0x10000,
	WCM_CONNECTION_COST_CONGESTED = 0x20000,
	WCM_CONNECTION_COST_ROAMING = 0x40000,
	WCM_CONNECTION_COST_APPROACHINGDATALIMIT = 0x80000
};

struct _WCM_CONNECTION_COST_DATA {
	/*0000*/ ULONG ConnectionCost;
	/*0004*/ _WCM_CONNECTION_COST_SOURCE CostSource;
	/*0008*/
};

enum _WCM_CONNECTION_COST_SOURCE {
	WCM_CONNECTION_COST_SOURCE_DEFAULT = 0x0,
	WCM_CONNECTION_COST_SOURCE_GP = 0x1,
	WCM_CONNECTION_COST_SOURCE_USER = 0x2,
	WCM_CONNECTION_COST_SOURCE_OPERATOR = 0x3
};

enum _WCM_CONNECTION_MODE {
	wcm_connection_mode_profile = 0x0,
	wcm_connection_mode_temporary_profile = 0x1,
	wcm_connection_mode_auto = 0x2,
	wcm_connection_mode_external = 0x3,
	wcm_connection_mode_invalid = 0x4
};

struct _WCM_CONNECTOID_PROPERTIES {
	/*0000*/ ULONG ConnectionId;
	/*0004*/ INT IsPolicyRequiredForUse;
	/*0008*/ _CSP_AVAILABLE_CONNECTION_PROPERTIES Properties;
	/*003c*/ WCHAR CspAvailableConnectionName[0x100];
	/*023c*/ WCHAR ConnectionName[0x100];
	/*043c*/
};

enum _WCM_CSP_AUTOCONNECTTYPE {
	WcmAutoConnectUnknown = 0x0,
	WcmAutoConnectAlways = 0x1,
	WcmAutoConnectNone = 0x2
};

enum _WCM_CSP_EXTRA_PROFILE_TYPE {
	WcmCspOnDemandProfile = 0x2000000,
	WcmCspDefaultProfile = 0x4000000
};

struct _WCM_CSP_PROFILE {
	/*0000*/ ULONG dwVersion;
	/*0004*/ WCHAR strName[0x100];
	/*0204*/ ULONG dwType;
	/*0208*/ INT fAutoSwitch;
	/*020c*/ _WCM_CSP_AUTOCONNECTTYPE AutoConnect;
	/*0210*/ _WCM_MEDIA_TYPE MediaType;
	/*0214*/ ULONG dwNlaFlags;
	/*0218*/ ULONG dwNlaHistory;
	/*021c*/
};

struct _WCM_CSP_PROFILE_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ ULONG dwIndex;
	/*0008*/ _WCM_CSP_PROFILE Profile[0x1];
	/*0224*/
};

struct _WCM_DATAPLAN_STATUS {
	/*0000*/ _WCM_USAGE_DATA UsageData;
	/*000c*/ ULONG DataLimitInMegabytes;
	/*0010*/ ULONG InboundBandwidthInKbps;
	/*0014*/ ULONG OutboundBandwidthInKbps;
	/*0018*/ WCM_BILLING_CYCLE_INFO BillingCycle;
	/*0034*/ ULONG MaxTransferSizeInMegabytes;
	/*0038*/ ULONG Reserved;
	/*003c*/
};

struct _WCM_INTERFACE_INFO {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ _WCM_MEDIA_TYPE wcmMediaType;
	/*0014*/ _WCM_INTF_STATUS ifStatus;
	/*0018*/ ULONG dwNlaFlags;
	/*001c*/
};

struct _WCM_INTERFACE_INFO_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ ULONG dwIndex;
	/*0008*/ _WCM_INTERFACE_INFO InterfaceInfo[0x1];
	/*0024*/
};

enum _WCM_INTF_STATUS {
	wcm_interface_status_unknown = 0x0,
	wcm_interface_status_connected = 0x1,
	wcm_interface_status_connecting = 0x2,
	wcm_interface_status_disconnecting = 0x3,
	wcm_interface_status_disconnected = 0x4
};

struct _WCM_MANUAL_NETWORK_QUALITY {
	/*0000*/ _WCM_MEDIA_TYPE MediaType;
	/*0004*/ USHORT Family;
	/*0008*/ ULONG NetworkQuality;
	/*000c*/
};

enum _WCM_MEDIA_TYPE {
	wcm_media_unknown = 0x0,
	wcm_media_ethernet = 0x1,
	wcm_media_wlan = 0x2,
	wcm_media_mbn = 0x3,
	wcm_media_invalid = 0x4,
	wcm_media_max = 0x5
};

enum _WCM_NETWORK_REGISTER_STATE {
	wcm_network_register_state_home = 0x0,
	wcm_network_register_state_partner = 0x1,
	wcm_network_register_state_roaming = 0x2,
	wcm_network_register_state_unavailable = 0x3
};

struct _WCM_NET_INTERFACE_CONTEXT {
	/*0000*/ ULONG InterfaceIndex;
	/*0004*/ WCHAR ProfileName[0x100];
	/*0204*/
};

struct _WCM_NET_INTERFACE_CONTEXT_TABLE {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _WCM_NET_INTERFACE_CONTEXT InterfaceContextArray[0x1];
	/*0208*/
};

enum _WCM_NLA_HISTORY {
	WCM_NLA_HISTORY_INTERNET = 0x1
};

struct _WCM_NLA_NOTIFICATION_DATA {
	/*0000*/ ULONG dwNlaFlags;
	/*0004*/ WCHAR strNetworkName[0x104];
	/*020c*/
};

enum _WCM_NOTIFICATION_CM {
	wcm_notification_cm_begin = 0x0,
	wcm_notification_cm_connected = 0x1,
	wcm_notification_cm_disconnected = 0x2,
	wcm_notification_cm_policy_change = 0x3,
	wcm_notification_cm_ndis_adapter_arrival = 0x4,
	wcm_notification_cm_l2_adapter_arrival = 0x5,
	wcm_notification_cm_ndis_adapter_removal = 0x6,
	wcm_notification_cm_l2_adapter_removal = 0x7,
	wcm_notification_cm_preferred_order_change = 0x8,
	wcm_notification_cm_end = 0x9
};

enum _WCM_NOTIFICATION_CM_PRIVATE {
	wcm_notification_cm_private_begin = 0x10000,
	wcm_notification_cm_private_nla = 0x10001,
	wcm_notification_cm_private_power_change = 0x10002,
	wcm_notification_cm_private_session_change = 0x10003,
	wcm_notification_cm_private_csp_state = 0x10004,
	wcm_notification_cm_private_grouppolicy_change = 0x10005,
	wcm_notification_cm_private_hotspot_detected = 0x10006,
	wcm_notification_cm_private_register_state_changed = 0x10007,
	wcm_notification_cm_private_system_time_changed = 0x10008,
	wcm_notification_cm_private_connected_standby_enter = 0x10009,
	wcm_notification_cm_private_connected_standby_exit = 0x1000a,
	wcm_notification_cm_private_network_quiet_mode_enter = 0x1000b,
	wcm_notification_cm_private_network_quiet_mode_exit = 0x1000c,
	wcm_notification_cm_private_wifi_limited_connectivity_override = 0x1000d,
	wcm_notification_cm_private_end = 0x1000e
};

struct _WCM_NOTIFICATION_DATA {
	/*0000*/ ULONG NotificationSource;
	/*0004*/ ULONG NotificationCode;
	/*0008*/ _GUID InterfaceGuid;
	/*0018*/ _WCM_MEDIA_TYPE MediaType;
	/*001c*/ ULONG dwDataSize;
	/*0020*/ void * pData;
	/*0028*/
};

enum _WCM_ONDEMAND_ALLOWANCE_TYPE {
	WCM_ONDEMAND_ALLOWANCE_NONE = 0x0,
	WCM_ONDEMAND_ALLOWANCE_HASCAPABILITY = 0x1,
	WCM_ONDEMAND_ALLOWANCE_ALLOWIFNOLIST = 0x2
};

enum _WCM_ONDEMAND_CONNECTIVITY_LEVEL {
	ondemand_connectivity_level_none = 0x0,
	ondemand_connectivity_level_local = 0x1,
	ondemand_connectivity_level_internet = 0x2
};

struct _WCM_ONDEMAND_CONTEXT {
	
	/*0000*/ _WCM_ONDEMAND_TYPE type;
	/*0004*/ _GUID PrimaryInterfaceGuid;
	/*0014*/ <unnamed-type-data> data;
	/*0a1c*/
};

enum _WCM_ONDEMAND_STATE {
	ondemand_state_new = 0x0,
	ondemand_state_ready = 0x1,
	ondemand_state_pending = 0x2,
	ondemand_state_active = 0x3,
	ondemand_state_inactive = 0x4
};

struct _WCM_ONDEMAND_STATE_INFO {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ _GUID PrimaryInterfaceGuid;
	/*0020*/ WCHAR strProfileName[0x100];
	/*0220*/ _WCM_MEDIA_TYPE wcmMediaType;
	/*0224*/ _WCM_ONDEMAND_STATE wcmOnDemandState;
	/*0228*/ ULONG dwLastError;
	/*022c*/ _WCM_ONDEMAND_CONNECTIVITY_LEVEL wcmOnDemandConnectivityLevel;
	/*0230*/
};

struct _WCM_ONDEMAND_TOKEN_CONTEXT {
	/*0000*/ _WCM_ONDEMAND_CONTEXT onDemandContext;
	/*0a1c*/ INT fAllow;
	/*0a20*/ ULONG ulConnectionID;
	/*0a24*/
};

enum _WCM_ONDEMAND_TYPE {
	wcm_ondemand_apn = 0x0
};

enum _WCM_OPCODE {
	wcm_intf_opcode_private_begin = 0x100,
	wcm_global_opcode_domain_policy = 0x101,
	wcm_global_opcode_minimize_policy = 0x102,
	wcm_global_opcode_roaming_policy = 0x103,
	wcm_intf_opcode_cost_data_user = 0x104,
	wcm_intf_opcode_cost_data_operator = 0x105,
	wcm_intf_opcode_cost_profile_data_operator = 0x106,
	wcm_intf_opcode_provisioning = 0x107,
	wcm_intf_opcode_plan_policy = 0x108,
	wcm_intf_opcode_nla = 0x109,
	wcm_intf_property_connection_cost_inproc = 0x10a,
	wcm_intf_opcode_cost_data_operator_inproc = 0x10b,
	wcm_intf_opcode_cost_data_user_inproc = 0x10c,
	wcm_intf_opcode_cost_profile_data_operator_inproc = 0x10d,
	wcm_intf_opcode_mbae_metadata_wnfstatename = 0x10e,
	wcm_intf_opcode_set_duty_cycle = 0x10f,
	wcm_intf_opcode_connection_settings = 0x110,
	wcm_intf_opcode_multiple_pdp_support = 0x111,
	wcm_intf_opcode_tethering_error_string = 0x112,
	wcm_intf_opcode_bearer_classes = 0x113,
	wcm_intf_opcode_app_allow_list = 0x114,
	wcm_intf_opcode_tethering_mode = 0x115,
	wcm_intf_opcode_tethering_display_connection_information = 0x116,
	wcm_intf_opcode_tethering_connection_information = 0x117,
	wcm_intf_opcode_tethering_stations_information = 0x118,
	wcm_intf_opcode_tethering_information = 0x119,
	wcm_intf_opcode_tethering_approve_entitlement = 0x11a,
	wcm_intf_opcode_tethering_operator_error = 0x11b,
	wcm_intf_opcode_support_number = 0x11c,
	wcm_intf_opcode_deprecated_1 = 0x11d,
	wcm_intf_opcode_deprecated_2 = 0x11e,
	wcm_intf_opcode_ondemand_state = 0x11f,
	wcm_intf_opcode_check_ondemand_permission = 0x120,
	wcm_intf_opcode_cost_profile_data_user = 0x121,
	wcm_intf_opcode_cost_profile_data_user_roaming = 0x122,
	wcm_intf_opcode_cost_profile_data_operator_roaming = 0x123,
	wcm_intf_opcode_use_operator = 0x124,
	wcm_intf_opcode_restrict_background_traffic = 0x125,
	wcm_intf_opcode_restrict_background_traffic_roaming = 0x126,
	wcm_intf_opcode_dpu_state = 0x127,
	wcm_intf_opcode_is_background_restrict = 0x128,
	wcm_intf_opcode_dpu_state_inproc = 0x129,
	wcm_intf_opcode_is_background_restrict_inproc = 0x12a,
	wcm_intf_opcode_operator_cycle_data = 0x12b,
	wcm_intf_opcode_query_total_data_usage = 0x12c,
	wcm_intf_opcode_attribution_mappings = 0x12d,
	wcm_intf_opcode_manual_network_quality = 0x12e,
	wcm_intf_opcode_cost_inproc = 0x12f,
	wcm_intf_opcode_manual_krypton_host = 0x130
};

enum _WCM_PDP_AUTH_PROTOCOL {
	wcm_pdp_auth_protocol_none = 0x0,
	wcm_pdp_auth_protocol_pap = 0x1,
	wcm_pdp_auth_protocol_chap = 0x2,
	wcm_pdp_auth_protocol_mschapv2 = 0x3
};

struct _WCM_PDP_CONTEXT {
	/*0000*/ WCHAR strProviderID[0x100];
	/*0200*/ WCHAR strApnName[0x100];
	/*0400*/ WCHAR strUserName[0x100];
	/*0600*/ WCHAR strPassword[0x100];
	/*0800*/ WCHAR strProfileName[0x100];
	/*0a00*/ INT bEnableCompression;
	/*0a04*/ _WCM_PDP_AUTH_PROTOCOL wcmAuthProtocol;
	/*0a08*/
};

struct _WCM_PLAN_POLICY {
	/*0000*/ INT securityUpdateExempt;
	/*0004*/ INT UserSMSEnabled;
	/*0008*/ INT DataUsageInMobileOperatorNotificationEnabled;
	/*000c*/
};

struct _WCM_POLICY_VALUE {
	/*0000*/ INT fValue;
	/*0004*/ INT fIsGroupPolicy;
	/*0008*/
};

struct _WCM_PROFILE_INFO {
	/*0000*/ WCHAR strProfileName[0x100];
	/*0200*/ _GUID AdapterGUID;
	/*0210*/ _WCM_MEDIA_TYPE Media;
	/*0214*/
};

struct _WCM_PROFILE_INFO_INTERNAL {
	/*0000*/ WCHAR strProfileName[0x100];
	/*0200*/ _GUID AdapterGUID;
	/*0210*/ _WCM_MEDIA_TYPE Media;
	/*0214*/ INT fIsProfileGP;
	/*0218*/
};

struct _WCM_PROFILE_INFO_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _WCM_PROFILE_INFO ProfileInfo[0x1];
	/*0218*/
};

struct _WCM_PROFILE_INFO_LIST_INTERNAL {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _WCM_PROFILE_INFO_INTERNAL ProfileInfo[0x1];
	/*021c*/
};

enum _WCM_PROPERTY {
	wcm_global_property_domain_policy = 0x0,
	wcm_global_property_minimize_policy = 0x1,
	wcm_global_property_roaming_policy = 0x2,
	wcm_global_property_powermanagement_policy = 0x3,
	wcm_intf_property_connection_cost = 0x4,
	wcm_intf_property_dataplan_status = 0x5,
	wcm_intf_property_hotspot_profile = 0x6
};

struct _WCM_RPC_NOTIFICATION {
	/*0000*/ INT fIsLegacyNotification;
	/*0004*/ ULONG dwNotificationSize;
	/*0008*/ UCHAR Notification[0x1];
	/*000c*/
};

struct _WCM_SELECTABLE_CONNECTION_DETAIL {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ ULONG InterfaceIndex;
	/*0014*/ _WCM_MEDIA_TYPE MediaType;
	/*0018*/ _WCM_CONNECTOID_PROPERTIES Properties;
	/*0454*/
};

struct _WCM_SELECTABLE_CONNECTION_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _WCM_SELECTABLE_CONNECTION_DETAIL Connections[0x1];
	/*0458*/
};

enum _WCM_SELECTION_COMPARISON {
	WCM_SELECTION_COMPARISON_ANY = 0x0,
	WCM_SELECTION_COMPARISON_EQUAL = 0x1,
	WCM_SELECTION_COMPARISON_NOT_EQUAL = 0x2,
	WCM_SELECTION_COMPARISON_LESSTHAN = 0x3,
	WCM_SELECTION_COMPARISON_LESSTHANEQUAL = 0x4,
	WCM_SELECTION_COMPARISON_GREATERTHANEQUAL = 0x5,
	WCM_SELECTION_COMPARISON_GREATERTHAN = 0x6
};

struct _WCM_SELECTION_CONNECTED_FILTER {
	/*0000*/ _WCM_SELECTION_EQUALITY Operator;
	/*0004*/ INT Value;
	/*0008*/
};

enum _WCM_SELECTION_CONNECTION_TYPE {
	WCM_SELECTION_CONNECTION_TYPE_IWLAN = 0x0
};

struct _WCM_SELECTION_CONNECTION_TYPE_FILTER {
	/*0000*/ _WCM_SELECTION_EQUALITY Operator;
	/*0004*/ _WCM_SELECTION_CONNECTION_TYPE Value;
	/*0008*/
};

struct _WCM_SELECTION_COSTTYPE_FILTER {
	/*0000*/ _WCM_SELECTION_EQUALITY Operator;
	/*0004*/ _WCM_CONNECTION_COST Value;
	/*0008*/
};

struct _WCM_SELECTION_DATAPLANUSAGE_BACKGROUNDRESTRICTION_FILTER {
	/*0000*/ _WCM_SELECTION_EQUALITY Operator;
	/*0004*/ INT Value;
	/*0008*/
};

struct _WCM_SELECTION_DATAPLANUSAGE_STATUS_FILTER {
	/*0000*/ _WCM_SELECTION_COMPARISON Operator;
	/*0004*/ _DUSM_DATAPLANUSAGE_STATUS Value;
	/*0008*/
};

enum _WCM_SELECTION_EQUALITY {
	WCM_SELECTION_EQUALITY_ANY = 0x0,
	WCM_SELECTION_EQUALITY_EQUAL = 0x1,
	WCM_SELECTION_EQUALITY_NOT_EQUAL = 0x2
};

struct _WCM_SELECTION_FILTERS_V1 {
	/*0000*/ ULONG Version;
	/*0004*/ _WCM_SELECTION_CONNECTED_FILTER ConnectedFilter;
	/*000c*/ _WCM_SELECTION_MEDIATYPE_FILTER MediaTypeFilter;
	/*0014*/ _WCM_SELECTION_COSTTYPE_FILTER CostTypeFilter;
	/*001c*/ _WCM_SELECTION_DATAPLANUSAGE_STATUS_FILTER DataPlanUsageStatusFilter;
	/*0024*/ _WCM_SELECTION_DATAPLANUSAGE_BACKGROUNDRESTRICTION_FILTER DataPlanUsageBackgroundRestrictionFilter;
	/*002c*/ _WCM_SELECTION_ROAMING_FILTER RoamingFilter;
	/*0034*/ _WCM_SELECTION_SERVICEPROVIDER_FILTER ServiceProviderFilter;
	/*0048*/ _WCM_SELECTION_POLICY_CONTEXT_FILTER PolicyContextFilter;
	/*00cc*/ _WCM_SELECTION_CONNECTION_TYPE_FILTER ConnectionTypeFilter;
	/*00d4*/
};

struct _WCM_SELECTION_FILTERS_V2 {
	/*0000*/ ULONG Version;
	/*0004*/ _WCM_SELECTION_CONNECTED_FILTER ConnectedFilter;
	/*000c*/ _WCM_SELECTION_MEDIATYPE_FILTER MediaTypeFilter;
	/*0014*/ _WCM_SELECTION_COSTTYPE_FILTER CostTypeFilter;
	/*001c*/ _WCM_SELECTION_DATAPLANUSAGE_STATUS_FILTER DataPlanUsageStatusFilter;
	/*0024*/ _WCM_SELECTION_DATAPLANUSAGE_BACKGROUNDRESTRICTION_FILTER DataPlanUsageBackgroundRestrictionFilter;
	/*002c*/ _WCM_SELECTION_ROAMING_FILTER RoamingFilter;
	/*0034*/ _WCM_SELECTION_SERVICEPROVIDER_FILTER ServiceProviderFilter;
	/*0048*/ _WCM_SELECTION_POLICY_CONTEXT_FILTER PolicyContextFilter;
	/*00cc*/ _WCM_SELECTION_CONNECTION_TYPE_FILTER ConnectionTypeFilter;
	/*00d4*/ _WCM_SELECTION_PURPOSE_FILTER PurposeFilter;
	/*00e8*/
};

struct _WCM_SELECTION_MEDIATYPE_FILTER {
	/*0000*/ _WCM_SELECTION_EQUALITY Operator;
	/*0004*/ _WCM_MEDIA_TYPE Value;
	/*0008*/
};

struct _WCM_SELECTION_POLICY_CONTEXT_FILTER {
	/*0000*/ _WCM_SELECTION_EQUALITY Operator;
	/*0004*/ WCHAR PolicyContext[0x40];
	/*0084*/
};

struct _WCM_SELECTION_PURPOSE_FILTER {
	/*0000*/ _WCM_SELECTION_EQUALITY Operator;
	/*0004*/ _GUID Value;
	/*0014*/
};

struct _WCM_SELECTION_ROAMING_FILTER {
	/*0000*/ _WCM_SELECTION_EQUALITY Operator;
	/*0004*/ INT Value;
	/*0008*/
};

struct _WCM_SELECTION_SERVICEPROVIDER_FILTER {
	/*0000*/ _WCM_SELECTION_EQUALITY Operator;
	/*0004*/ _GUID Value;
	/*0014*/
};

struct _WCM_TETHERING_CONNECTION_INFO {
	/*0000*/ _DOT11_SSID ssid;
	/*0028*/ _WCM_TETHERING_PASSPHRASE passphrase;
	/*0078*/
};

struct _WCM_TETHERING_DISPLAY_CONNECTION_INFO {
	/*0000*/ WCHAR szSsid[0x21];
	/*0042*/ WCHAR szPassphrase[0x41];
	/*00c4*/
};

struct _WCM_TETHERING_ENTITLEMENT_INFO {
	/*0000*/ UINT nEntitlementSessionID;
	/*0004*/ INT fAllow;
	/*0008*/ WCHAR reasonString[0x100];
	/*0208*/
};

struct _WCM_TETHERING_INFORMATION {
	/*0000*/ ULONG dwMaxStationConnections;
	/*0004*/
};

enum _WCM_TETHERING_MODE {
	WCM_TETHERING_MODE_UNKNOWN = 0x0,
	WCM_TETHERING_MODE_ON = 0x1,
	WCM_TETHERING_MODE_OFF = 0x2,
	WCM_TETHERING_MODE_INPROGRESS = 0x3,
	WCM_TETHERING_MODE_NOTALLOWED_GP = 0x4,
	WCM_TETHERING_MODE_NOTALLOWED_NO_WFD_SUPPORT = 0x5,
	WCM_TETHERING_MODE_NOTALLOWED_OPERATOR = 0x6,
	WCM_TETHERING_MODE_NOTALLOWED_SKU = 0x7,
	WCM_TETHERING_MODE_NOTALLOWED_MISSING_APP = 0x8,
	WCM_TETHERING_MODE_MAX = 0x9
};

struct _WCM_TETHERING_MODE_DATA {
	/*0000*/ _WCM_TETHERING_MODE tetheringMode;
	/*0004*/
};

struct _WCM_TETHERING_OPERATOR_ERROR {
	/*0000*/ WCHAR szOperatorReasonString[0x100];
	/*0200*/
};

struct _WCM_TETHERING_PASSPHRASE {
	/*0000*/ ULONGLONG cbPassphrase;
	/*0008*/ UCHAR bPassphrase[0x41];
	/*0050*/
};

struct _WCM_TETHERING_STATIONS_INFO {
	/*0000*/ ULONG cCurrentConnectedStations;
	/*0004*/ ULONG cMaxAllowedStations;
	/*0008*/
};

struct _WCM_TIME_INTERVAL {
	/*0000*/ USHORT wYear;
	/*0002*/ USHORT wMonth;
	/*0004*/ USHORT wDay;
	/*0006*/ USHORT wHour;
	/*0008*/ USHORT wMinute;
	/*000a*/ USHORT wSecond;
	/*000c*/ USHORT wMilliseconds;
	/*000e*/
};

enum _WCM_TRI_STATE {
	wcm_tri_state_false = 0x0,
	wcm_tri_state_true = 0x1,
	wcm_tri_state_unknown = 0x2
};

struct _WCM_USAGE_DATA {
	/*0000*/ ULONG UsageInMegabytes;
	/*0004*/ _FILETIME LastSyncTime;
	/*000c*/
};

struct _WCM_WNF_INTERFACE_CONNECTIVITY {
	/*0000*/ _WCM_TRI_STATE Connected;
	/*0004*/ _WCM_TRI_STATE Internetv4Connectivity;
	/*0008*/ _WCM_TRI_STATE Internetv6Connectivity;
	/*000c*/ _WCM_TRI_STATE DomainConnectivity;
	/*0010*/
};

struct _WCM_WNF_INTERFACE_EVENT_INFO {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ _WNF_STATE_NAME InterfaceStateName;
	/*0018*/
};

struct _WCM_WNF_INTERFACE_LIST {
	/*0000*/ _GUID PreferredInterfaceGuid;
	/*0010*/ _WCM_WNF_INTERFACE_CONNECTIVITY MachineConnectivity;
	/*0020*/ ULONG dwNumberOfItems;
	/*0024*/ _WCM_WNF_INTERFACE_EVENT_INFO InterfaceEventInfo[0x1];
	/*003c*/
};

struct _WCM_WNF_INTERFACE_STATE {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ _WCM_MEDIA_TYPE MediaType;
	/*0014*/ _WCM_TRI_STATE PredictedInternetv4Connectivity;
	/*0018*/ _WCM_TRI_STATE PredictedInternetv6Connectivity;
	/*001c*/ _WCM_TRI_STATE PredictedDomainConnectivity;
	/*0020*/ _WCM_TRI_STATE PredictedMediaConnectivity;
	/*0024*/ _WCM_TRI_STATE Internetv4Connectivity;
	/*0028*/ _WCM_TRI_STATE Internetv6Connectivity;
	/*002c*/ _WCM_TRI_STATE DomainConnectivity;
	/*0030*/ _WCM_TRI_STATE Connected;
	/*0034*/ _WCM_TRI_STATE Roaming;
	/*0038*/ _WCM_TRI_STATE Internetv4AuthProxyDetected;
	/*003c*/ _WCM_TRI_STATE Internetv6AuthProxyDetected;
	/*0040*/ _WCM_TRI_STATE Identifying;
	/*0044*/ _WCM_TRI_STATE HasAvailableNetworks;
	/*0048*/ _WCM_TRI_STATE IsExternalInterface;
	/*004c*/ WCHAR NetworkName[0x104];
	/*0254*/ _WNF_STATE_NAME SignalQualityStateName;
	/*025c*/
};

struct _WFDSVC_CONNECTION_CAPABILITY {
	/*0000*/ UCHAR bNew;
	/*0001*/ UCHAR bClient;
	/*0002*/ UCHAR bGO;
	/*0003*/
};

struct _WFD_GROUP_ID {
	/*0000*/ UCHAR DeviceAddress[0x6];
	/*0008*/ _DOT11_SSID GroupSSID;
	/*002c*/
};

enum _WFD_NOTIFICATION_SOURCE {
	wfd_notification_source_none = 0x0,
	wfd_notification_source_wfd = 0x400,
	wfd_notification_source_all = 0x400
};

enum _WFD_OOB_BLOB_TYPE {
	WfdOobBlobTypeUnidirectionalProvisioningData = 0x0,
	WfdOobBlobTypeProvisioningListenerData = 0x1,
	WfdOobBlobTypeProvisioningConnectorData = 0x2,
	WfdOobBlobTypeWfaP2P = 0x3,
	WfdOobBlobTypeServicesOutPairData = 0x4,
	WfdOobBlobTypeServicesInPairData = 0x5,
	WfdOobBlobTypeDeviceOutPairData = 0x6,
	WfdOobBlobTypeDeviceInPairData = 0x7,
	WfdOobBlobTypeVendorExtension = 0xdd,
	WfdOobBlobTypeMax = 0xdd
};

enum _WFD_ROLE_TYPE {
	WFD_ROLE_TYPE_NONE = 0x0,
	WFD_ROLE_TYPE_DEVICE = 0x1,
	WFD_ROLE_TYPE_GROUP_OWNER = 0x2,
	WFD_ROLE_TYPE_CLIENT = 0x4,
	WFD_ROLE_TYPE_MAX = 0x5
};

struct _WFD_WCN_CONFIG_PARAMS {
	/*0000*/ UCHAR PeerDeviceAddress[0x6];
	/*0006*/ UCHAR PeerInterfaceAddress[0x6];
	/*0010*/ void * hLocalInterface;
	/*0018*/ UCHAR LocalInterfaceAddress[0x6];
	/*0020*/
};

struct _WGLSWAP {
	/*0000*/ HDC__ * hdc;
	/*0008*/ UINT uiFlags;
	/*0010*/
};

struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
	/*0000*/ ULONG WimType;
	/*0004*/ ULONG WimIndex;
	/*0008*/ ULONG WimFileNameOffset;
	/*000c*/ ULONG WimFileNameLength;
	/*0010*/
};

struct _WIM_PROVIDER_CONTROL_INTEGRITY {
	/*0000*/ ULONG ControlCode;
	/*0004*/
};

struct _WIM_PROVIDER_EXTERNAL_INFO {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Flags;
	/*0008*/ _LARGE_INTEGER DataSourceId;
	/*0010*/ UCHAR ResourceHash[0x14];
	/*0028*/
};

struct _WIM_PROVIDER_INTEGRITY_STATUS {
	/*0000*/ UCHAR IntegrityComplete;
	/*0001*/ UCHAR IntegrityRunning;
	/*0008*/ ULONGLONG IntegrityAvailable;
	/*0010*/ ULONGLONG IntegrityRequired;
	/*0018*/
};

struct _WIM_PROVIDER_OVERLAY_ENTRY {
	/*0000*/ ULONG NextEntryOffset;
	/*0008*/ _LARGE_INTEGER DataSourceId;
	/*0010*/ _GUID WimGuid;
	/*0020*/ ULONG WimFileNameOffset;
	/*0024*/ ULONG WimType;
	/*0028*/ ULONG WimIndex;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
	/*0000*/ _LARGE_INTEGER DataSourceId;
	/*0008*/
};

struct _WIM_PROVIDER_START_INTEGRITY {
	/*0000*/ _LARGE_INTEGER DataSourceId;
	/*0008*/
};

struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
	/*0000*/ _LARGE_INTEGER DataSourceId;
	/*0008*/
};

struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
	/*0000*/ _LARGE_INTEGER DataSourceId;
	/*0008*/ ULONG WimFileNameOffset;
	/*000c*/ ULONG WimFileNameLength;
	/*0010*/
};

struct _WIN32K_SYSCALL_FILTER {
	/*0000*/ ULONG FilterState;
	/*0004*/ ULONG FilterSet;
	/*0008*/
};

struct _WIN32_FILE_ATTRIBUTE_DATA {
	/*0000*/ ULONG dwFileAttributes;
	/*0004*/ _FILETIME ftCreationTime;
	/*000c*/ _FILETIME ftLastAccessTime;
	/*0014*/ _FILETIME ftLastWriteTime;
	/*001c*/ ULONG nFileSizeHigh;
	/*0020*/ ULONG nFileSizeLow;
	/*0024*/
};

struct _WIN32_FIND_DATAA {
	/*0000*/ ULONG dwFileAttributes;
	/*0004*/ _FILETIME ftCreationTime;
	/*000c*/ _FILETIME ftLastAccessTime;
	/*0014*/ _FILETIME ftLastWriteTime;
	/*001c*/ ULONG nFileSizeHigh;
	/*0020*/ ULONG nFileSizeLow;
	/*0024*/ ULONG dwReserved0;
	/*0028*/ ULONG dwReserved1;
	/*002c*/ CHAR cFileName[0x104];
	/*0130*/ CHAR cAlternateFileName[0xe];
	/*0140*/
};

struct _WIN32_FIND_DATAW {
	/*0000*/ ULONG dwFileAttributes;
	/*0004*/ _FILETIME ftCreationTime;
	/*000c*/ _FILETIME ftLastAccessTime;
	/*0014*/ _FILETIME ftLastWriteTime;
	/*001c*/ ULONG nFileSizeHigh;
	/*0020*/ ULONG nFileSizeLow;
	/*0024*/ ULONG dwReserved0;
	/*0028*/ ULONG dwReserved1;
	/*002c*/ WCHAR cFileName[0x104];
	/*0234*/ WCHAR cAlternateFileName[0xe];
	/*0250*/
};

struct _WIN32_FIND_STREAM_DATA {
	/*0000*/ _LARGE_INTEGER StreamSize;
	/*0008*/ WCHAR cStreamName[0x128];
	/*0258*/
};

struct _WIN32_MEMORY_RANGE_ENTRY {
	/*0000*/ void * VirtualAddress;
	/*0008*/ ULONGLONG NumberOfBytes;
	/*0010*/
};

struct _WIN32_STREAM_ID {
	/*0000*/ ULONG dwStreamId;
	/*0004*/ ULONG dwStreamAttributes;
	/*0008*/ _LARGE_INTEGER Size;
	/*0010*/ ULONG dwStreamNameSize;
	/*0014*/ WCHAR cStreamName[0x1];
	/*0018*/
};

struct _WINDOWS_OS_OPTIONS {
	/*0000*/ UCHAR Signature[0x8];
	/*0008*/ ULONG Version;
	/*000c*/ ULONG Length;
	/*0010*/ ULONG OsLoadPathOffset;
	/*0014*/ WCHAR OsLoadOptions[0x1];
	/*0018*/
};

struct _WINDOW_BUFFER_SIZE_RECORD {
	/*0000*/ _COORD dwSize;
	/*0004*/
};

struct _WINHTTP_CONNECTION_NAME {
	/*0000*/ WCHAR wszName[0x41];
	/*0082*/
};

struct _WINHTTP_CONNECTION_NAME_LIST {
	/*0000*/ ULONG cNames;
	/*0008*/ _WINHTTP_CONNECTION_NAME * pNames;
	/*0010*/
};

struct _WINHTTP_CONNECTION_PROXY_ELEMENT {
	/*0000*/ _WINHTTP_CONNECTION_PROXY_TYPE Type;
	/*0008*/ _WINHTTP_CONNECTION_PROXY_INFO Info;
	/*0050*/
};

struct _WINHTTP_CONNECTION_PROXY_INFO {
	
	/*0000*/ ULONG Version;
	/*0008*/ WCHAR * pwszFriendlyName;
	/*0010*/ ULONG Flags;
	/*0014*/ _WINHTTP_CONNECTION_PROXY_INFO_SWITCH Switch;
	/*0018*/ _WINHTTP_CONNECTION_PROXY_INFO_CONFIG Config;
	/*0018*/ _WINHTTP_CONNECTION_PROXY_INFO_SCRIPT Script;
	/*0048*/
};

enum _WINHTTP_CONNECTION_PROXY_INFO_SWITCH {
	WINHTTP_CONNECTION_PROXY_INFO_SWITCH_CONFIG = 0x0,
	WINHTTP_CONNECTION_PROXY_INFO_SWITCH_SCRIPT = 0x1,
	WINHTTP_CONNECTION_PROXY_INFO_SWITCH_WPAD = 0x2
};

struct _WINHTTP_CONNECTION_PROXY_LIST {
	/*0000*/ ULONG cProxies;
	/*0008*/ _WINHTTP_CONNECTION_PROXY_ELEMENT * pProxies;
	/*0010*/
};

enum _WINHTTP_CONNECTION_PROXY_TYPE {
	WINHTTP_CONNECTION_PROXY_TYPE_NULL = 0x0,
	WINHTTP_CONNECTION_PROXY_TYPE_HTTP = 0x1,
	WINHTTP_CONNECTION_PROXY_TYPE_WAP = 0x2,
	WINHTTP_CONNECTION_PROXY_TYPE_SOCKS4 = 0x4,
	WINHTTP_CONNECTION_PROXY_TYPE_SOCKS5 = 0x5
};

struct _WININET_PROXY_INFO {
	/*0000*/ INT fProxy;
	/*0004*/ INT fBypass;
	/*0008*/ INTERNET_SCHEME ProxyScheme;
	/*0010*/ WCHAR * pwszProxy;
	/*0018*/ USHORT ProxyPort;
	/*0020*/
};

struct _WININET_PROXY_INFO_LIST {
	/*0000*/ ULONG dwProxyInfoCount;
	/*0008*/ _WININET_PROXY_INFO * pProxyInfo;
	/*0010*/
};

struct _WINRT_ATTRIBUTED_NETWORK_USAGES {
	/*0000*/ ULONG Count;
	/*0008*/ _WINRT_ATTRIBUTED_NETWORK_USAGE_ENTRY AttributedNetworkUsages[0x1];
	/*0638*/
};

struct _WINRT_ATTRIBUTED_NETWORK_USAGE_ENTRY {
	/*0000*/ _DPU_NETWORK_USAGE NetworkUsage;
	/*0010*/ WCHAR AttributionId[0x104];
	/*0218*/ WCHAR AttributionName[0x104];
	/*0420*/ _WINRT_ATTRIBUTION_THUMBNAIL_TYPE AttributionThumbnailType;
	/*0424*/ WCHAR AttributionThumbnailResource[0x104];
	/*0424*/ WCHAR AttributionThumbnailToken[0x104];
	/*0630*/
};

enum _WINRT_ATTRIBUTION_THUMBNAIL_TYPE {
	WINRT_ATTRIBUTION_THUMBNAIL_UNKNOWN = 0x0,
	WINRT_ATTRIBUTION_THUMBNAIL_RESOURCE = 0x1,
	WINRT_ATTRIBUTION_THUMBNAIL_TOKEN = 0x2
};

enum _WIRELESS_SIGNAL_STRENGTH {
	WSS_NONE = 0x0,
	WSS_POOR = 0x1,
	WSS_BAD = 0x2,
	WSS_FAIR = 0x3,
	WSS_GOOD = 0x4,
	WSS_EXCELLENT = 0x5
};

struct _WLAN_11AD_PAIRED_CONFIG {
	/*0000*/ _WLAN_11AD_PAIRING_MODE PairingMode;
	/*0004*/ _GUID acGuid;
	/*0014*/ _GUID adGuid;
	/*0024*/ UCHAR acMacAddress[0x6];
	/*002a*/ UCHAR adMacAddress[0x6];
	/*0030*/ INT bUXPairingEnabled;
	/*0034*/ INT bPairingComplete;
	/*0038*/ INT bSaveStaticPairing;
	/*003c*/
};

enum _WLAN_11AD_PAIRING_MODE {
	WLAN_11AD_PAIRING_MODE_NO_PAIRING = 0x0,
	WLAN_11AD_PAIRING_MODE_STATIC_PAIRING = 0x1,
	WLAN_11AD_PAIRING_MODE_DYNAMIC_PAIRING = 0x2,
	WLAN_11AD_PAIRING_MODE_MAX = 0x3
};

enum _WLAN_ADHOC_NETWORK_STATE {
	wlan_adhoc_network_state_formed = 0x0,
	wlan_adhoc_network_state_connected = 0x1
};

struct _WLAN_ANQP_OSU_PROVIDER_INFO {
	/*0000*/ ULONG length;
	/*0004*/ WCHAR strOSUFriendlyName[0x104];
	/*020c*/ WCHAR strOSUServerUri[0x104];
	/*0414*/ ULONG dwOSUSupportedMethods;
	/*0418*/ ULONG uIconWidth;
	/*041c*/ ULONG uIconHeigh;
	/*0420*/ WCHAR strIconType[0x104];
	/*0628*/ ULONG uIconAddess;
	/*062c*/ ULONG uIconDataLength;
	/*0630*/
};

struct _WLAN_ANQP_OSU_PROVIDR_LIST {
	/*0000*/ ULONG uTotalLength;
	/*0004*/ ULONG uNumberOfItems;
	/*0008*/ _DOT11_SSID dot11OsuSSID;
	/*002c*/ ULONG osuProviderAddress;
	/*0030*/
};

struct _WLAN_ASSOCIATION_ATTRIBUTES {
	/*0000*/ _DOT11_SSID dot11Ssid;
	/*0024*/ _DOT11_BSS_TYPE dot11BssType;
	/*0028*/ UCHAR dot11Bssid[0x6];
	/*0030*/ _DOT11_PHY_TYPE dot11PhyType;
	/*0034*/ ULONG uDot11PhyIndex;
	/*0038*/ ULONG wlanSignalQuality;
	/*003c*/ ULONG ulRxRate;
	/*0040*/ ULONG ulTxRate;
	/*0044*/
};

struct _WLAN_AUTH_CIPHER_PAIR_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ DOT11_AUTH_CIPHER_PAIR pAuthCipherPairList[0x1];
	/*000c*/
};

enum _WLAN_AUTOCONF_OPCODE {
	wlan_autoconf_opcode_start = 0x0,
	wlan_autoconf_opcode_show_denied_networks = 0x1,
	wlan_autoconf_opcode_power_setting = 0x2,
	wlan_autoconf_opcode_only_use_gp_profiles_for_allowed_networks = 0x3,
	wlan_autoconf_opcode_allow_explicit_creds = 0x4,
	wlan_autoconf_opcode_block_period = 0x5,
	wlan_autoconf_opcode_allow_virtual_station_extensibility = 0x6,
	wlan_autoconf_opcode_end = 0x7
};

struct _WLAN_AVAILABLE_NETWORK {
	/*0000*/ WCHAR strProfileName[0x100];
	/*0200*/ _DOT11_SSID dot11Ssid;
	/*0224*/ _DOT11_BSS_TYPE dot11BssType;
	/*0228*/ ULONG uNumberOfBssids;
	/*022c*/ INT bNetworkConnectable;
	/*0230*/ ULONG wlanNotConnectableReason;
	/*0234*/ ULONG uNumberOfPhyTypes;
	/*0238*/ _DOT11_PHY_TYPE dot11PhyTypes[0x8];
	/*0258*/ INT bMorePhyTypes;
	/*025c*/ ULONG wlanSignalQuality;
	/*0260*/ INT bSecurityEnabled;
	/*0264*/ _DOT11_AUTH_ALGORITHM dot11DefaultAuthAlgorithm;
	/*0268*/ _DOT11_CIPHER_ALGORITHM dot11DefaultCipherAlgorithm;
	/*026c*/ ULONG dwFlags;
	/*0270*/ ULONG dwReserved;
	/*0274*/
};

struct _WLAN_AVAILABLE_NETWORK_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ ULONG dwIndex;
	/*0008*/ _WLAN_AVAILABLE_NETWORK Network[0x1];
	/*027c*/
};

struct _WLAN_AVAILABLE_NETWORK_LIST_V2 {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ ULONG dwIndex;
	/*0008*/ _WLAN_AVAILABLE_NETWORK_V2 Network[0x1];
	/*028c*/
};

struct _WLAN_AVAILABLE_NETWORK_V2 {
	/*0000*/ WCHAR strProfileName[0x100];
	/*0200*/ _DOT11_SSID dot11Ssid;
	/*0224*/ _DOT11_BSS_TYPE dot11BssType;
	/*0228*/ ULONG uNumberOfBssids;
	/*022c*/ INT bNetworkConnectable;
	/*0230*/ ULONG wlanNotConnectableReason;
	/*0234*/ ULONG uNumberOfPhyTypes;
	/*0238*/ _DOT11_PHY_TYPE dot11PhyTypes[0x8];
	/*0258*/ INT bMorePhyTypes;
	/*025c*/ ULONG wlanSignalQuality;
	/*0260*/ INT bSecurityEnabled;
	/*0264*/ _DOT11_AUTH_ALGORITHM dot11DefaultAuthAlgorithm;
	/*0268*/ _DOT11_CIPHER_ALGORITHM dot11DefaultCipherAlgorithm;
	/*026c*/ ULONG dwFlags;
	/*0270*/ DOT11_ACCESSNETWORKOPTIONS AccessNetworkOptions;
	/*0275*/ UCHAR dot11HESSID[0x6];
	/*027b*/ DOT11_VENUEINFO VenueInfo;
	/*0280*/ ULONG dwReserved;
	/*0284*/
};

struct _WLAN_BSS_ENTRY {
	/*0000*/ _DOT11_SSID dot11Ssid;
	/*0024*/ ULONG uPhyId;
	/*0028*/ UCHAR dot11Bssid[0x6];
	/*0030*/ _DOT11_BSS_TYPE dot11BssType;
	/*0034*/ _DOT11_PHY_TYPE dot11BssPhyType;
	/*0038*/ LONG lRssi;
	/*003c*/ ULONG uLinkQuality;
	/*0040*/ UCHAR bInRegDomain;
	/*0042*/ USHORT usBeaconPeriod;
	/*0048*/ ULONGLONG ullTimestamp;
	/*0050*/ ULONGLONG ullHostTimestamp;
	/*0058*/ USHORT usCapabilityInformation;
	/*005c*/ ULONG ulChCenterFrequency;
	/*0060*/ _WLAN_RATE_SET wlanRateSet;
	/*0160*/ ULONG ulIeOffset;
	/*0164*/ ULONG ulIeSize;
	/*0168*/
};

struct _WLAN_BSS_LIST {
	/*0000*/ ULONG dwTotalSize;
	/*0004*/ ULONG dwNumberOfItems;
	/*0008*/ _WLAN_BSS_ENTRY wlanBssEntries[0x1];
	/*0170*/
};

struct _WLAN_CLIENT_CONTEXT {
	/*0000*/ void * hRpcHandle;
	/*0008*/ void * hContext;
	/*0010*/ ULONG dwClientVersion;
	/*0018*/ void (* funcCallback)( _L2_NOTIFICATION_DATA * , void * );
	/*0020*/ void * pCallbackContext;
	/*0028*/ _RPC_ASYNC_STATE ArpcState;
	/*0098*/ INT bWaitForNotification;
	/*009c*/ INT bDeregistering;
	/*00a0*/ _L2_NOTIFICATION_DATA * pNotifData;
	/*00a8*/ _RTL_CRITICAL_SECTION csClientContext;
	/*00d0*/ void * hEventTerminateCallbackThread;
	/*00d8*/ void * hCallbackThread;
	/*00e0*/ _TP_CALLBACK_ENVIRON_V3 tpCallbackEnviron;
	/*0128*/ _TP_CLEANUP_GROUP * ptpCleanupGroup;
	/*0130*/
};

struct _WLAN_CONNECTION_ATTRIBUTES {
	/*0000*/ _WLAN_INTERFACE_STATE isState;
	/*0004*/ _WLAN_CONNECTION_MODE wlanConnectionMode;
	/*0008*/ WCHAR strProfileName[0x100];
	/*0208*/ _WLAN_ASSOCIATION_ATTRIBUTES wlanAssociationAttributes;
	/*024c*/ _WLAN_SECURITY_ATTRIBUTES wlanSecurityAttributes;
	/*025c*/
};

enum _WLAN_CONNECTION_MODE {
	wlan_connection_mode_profile = 0x0,
	wlan_connection_mode_temporary_profile = 0x1,
	wlan_connection_mode_discovery_secure = 0x2,
	wlan_connection_mode_discovery_unsecure = 0x3,
	wlan_connection_mode_auto = 0x4,
	wlan_connection_mode_invalid = 0x5
};

struct _WLAN_CONNECTION_NOTIFICATION_DATA {
	/*0000*/ _WLAN_CONNECTION_MODE wlanConnectionMode;
	/*0004*/ WCHAR strProfileName[0x100];
	/*0204*/ _DOT11_SSID dot11Ssid;
	/*0228*/ _DOT11_BSS_TYPE dot11BssType;
	/*022c*/ INT bSecurityEnabled;
	/*0230*/ ULONG wlanReasonCode;
	/*0234*/ ULONG dwFlags;
	/*0238*/ WCHAR strProfileXml[0x1];
	/*023c*/
};

struct _WLAN_CONNECTION_PARAMETERS {
	/*0000*/ _WLAN_CONNECTION_MODE wlanConnectionMode;
	/*0008*/ WCHAR const * strProfile;
	/*0010*/ _DOT11_SSID * pDot11Ssid;
	/*0018*/ DOT11_BSSID_LIST * pDesiredBssidList;
	/*0020*/ _DOT11_BSS_TYPE dot11BssType;
	/*0024*/ ULONG dwFlags;
	/*0028*/
};

struct _WLAN_CONNECTION_PARAMETERS_V2 {
	/*0000*/ _WLAN_CONNECTION_MODE wlanConnectionMode;
	/*0008*/ WCHAR const * strProfile;
	/*0010*/ _DOT11_SSID * pDot11Ssid;
	/*0018*/ UCHAR (* pDot11Hessid)[0x6];
	/*0020*/ DOT11_BSSID_LIST * pDesiredBssidList;
	/*0028*/ _DOT11_BSS_TYPE dot11BssType;
	/*002c*/ ULONG dwFlags;
	/*0030*/ DOT11_ACCESSNETWORKOPTIONS * pDot11AccessNetworkOptions;
	/*0038*/
};

enum _WLAN_CONNECTION_PHASE {
	wlan_connection_phase_any = 0x0,
	wlan_connection_phase_initial_connection = 0x1,
	wlan_connection_phase_post_l3_connection = 0x2
};

struct _WLAN_COUNTRY_OR_REGION_STRING_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ UCHAR pCountryOrRegionStringList[0x1][0x3];
	/*0008*/
};

struct _WLAN_DEVICE_SERVICE_GUID_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ ULONG dwIndex;
	/*0008*/ _GUID DeviceService[0x1];
	/*0018*/
};

struct _WLAN_DEVICE_SERVICE_NOTIFICATION_DATA {
	/*0000*/ _GUID DeviceService;
	/*0010*/ ULONG dwOpCode;
	/*0014*/ ULONG dwDataSize;
	/*0018*/ UCHAR DataBlob[0x1];
	/*001c*/
};

enum _WLAN_FILTER_LIST_TYPE {
	wlan_filter_list_type_gp_permit = 0x0,
	wlan_filter_list_type_gp_deny = 0x1,
	wlan_filter_list_type_user_permit = 0x2,
	wlan_filter_list_type_user_deny = 0x3
};

enum _WLAN_FTM_BSS_PROPERTIES {
	WLAN_FTM_BSS_PROPERTIES_CONNECTED_AP = 0x1,
	WLAN_FTM_BSS_PROPERTIES_SAME_CHANNEL_AS_CONNECTED_AP = 0x2
};

struct _WLAN_HOSTED_NETWORK_CONNECTION_SETTINGS {
	/*0000*/ _DOT11_SSID hostedNetworkSSID;
	/*0024*/ ULONG dwMaxNumberOfPeers;
	/*0028*/
};

struct _WLAN_HOSTED_NETWORK_DATA_PEER_STATE_CHANGE {
	/*0000*/ _WLAN_HOSTED_NETWORK_PEER_STATE OldState;
	/*000c*/ _WLAN_HOSTED_NETWORK_PEER_STATE NewState;
	/*0018*/ _WLAN_HOSTED_NETWORK_REASON PeerStateChangeReason;
	/*001c*/
};

struct _WLAN_HOSTED_NETWORK_KEY_DATA {
	/*0000*/ ULONG dwKeyLength;
	/*0008*/ UCHAR * pucKeyData;
	/*0010*/ INT bIsPassPhrase;
	/*0014*/ INT bPersistent;
	/*0018*/
};

enum _WLAN_HOSTED_NETWORK_NOTIFICATION_CODE {
	wlan_hosted_network_state_change = 0x1000,
	wlan_hosted_network_peer_state_change = 0x1001,
	wlan_hosted_network_radio_state_change = 0x1002
};

enum _WLAN_HOSTED_NETWORK_OPCODE {
	wlan_hosted_network_opcode_connection_settings = 0x0,
	wlan_hosted_network_opcode_security_settings = 0x1,
	wlan_hosted_network_opcode_station_profile = 0x2,
	wlan_hosted_network_opcode_enable = 0x3
};

enum _WLAN_HOSTED_NETWORK_PEER_AUTH_STATE {
	wlan_hosted_network_peer_state_invalid = 0x0,
	wlan_hosted_network_peer_state_authenticated = 0x1
};

struct _WLAN_HOSTED_NETWORK_PEER_STATE {
	/*0000*/ UCHAR PeerMacAddress[0x6];
	/*0008*/ _WLAN_HOSTED_NETWORK_PEER_AUTH_STATE PeerAuthState;
	/*000c*/
};

struct _WLAN_HOSTED_NETWORK_RADIO_STATE {
	/*0000*/ _DOT11_RADIO_STATE dot11SoftwareRadioState;
	/*0004*/ _DOT11_RADIO_STATE dot11HardwareRadioState;
	/*0008*/
};

enum _WLAN_HOSTED_NETWORK_REASON {
	wlan_hosted_network_reason_success = 0x0,
	wlan_hosted_network_reason_unspecified = 0x1,
	wlan_hosted_network_reason_bad_parameters = 0x2,
	wlan_hosted_network_reason_service_shutting_down = 0x3,
	wlan_hosted_network_reason_insufficient_resources = 0x4,
	wlan_hosted_network_reason_elevation_required = 0x5,
	wlan_hosted_network_reason_read_only = 0x6,
	wlan_hosted_network_reason_persistence_failed = 0x7,
	wlan_hosted_network_reason_crypt_error = 0x8,
	wlan_hosted_network_reason_impersonation = 0x9,
	wlan_hosted_network_reason_stop_before_start = 0xa,
	wlan_hosted_network_reason_interface_available = 0xb,
	wlan_hosted_network_reason_interface_unavailable = 0xc,
	wlan_hosted_network_reason_miniport_stopped = 0xd,
	wlan_hosted_network_reason_miniport_started = 0xe,
	wlan_hosted_network_reason_incompatible_connection_started = 0xf,
	wlan_hosted_network_reason_incompatible_connection_stopped = 0x10,
	wlan_hosted_network_reason_user_action = 0x11,
	wlan_hosted_network_reason_client_abort = 0x12,
	wlan_hosted_network_reason_ap_start_failed = 0x13,
	wlan_hosted_network_reason_peer_arrived = 0x14,
	wlan_hosted_network_reason_peer_departed = 0x15,
	wlan_hosted_network_reason_peer_timeout = 0x16,
	wlan_hosted_network_reason_gp_denied = 0x17,
	wlan_hosted_network_reason_service_unavailable = 0x18,
	wlan_hosted_network_reason_device_change = 0x19,
	wlan_hosted_network_reason_properties_change = 0x1a,
	wlan_hosted_network_reason_virtual_station_blocking_use = 0x1b,
	wlan_hosted_network_reason_service_available_on_virtual_station = 0x1c
};

struct _WLAN_HOSTED_NETWORK_SECURITY_SETTINGS {
	/*0000*/ _DOT11_AUTH_ALGORITHM dot11AuthAlgo;
	/*0004*/ _DOT11_CIPHER_ALGORITHM dot11CipherAlgo;
	/*0008*/
};

enum _WLAN_HOSTED_NETWORK_STATE {
	wlan_hosted_network_unavailable = 0x0,
	wlan_hosted_network_idle = 0x1,
	wlan_hosted_network_active = 0x2
};

struct _WLAN_HOSTED_NETWORK_STATE_CHANGE {
	/*0000*/ _WLAN_HOSTED_NETWORK_STATE OldState;
	/*0004*/ _WLAN_HOSTED_NETWORK_STATE NewState;
	/*0008*/ _WLAN_HOSTED_NETWORK_REASON StateChangeReason;
	/*000c*/
};

struct _WLAN_HOSTED_NETWORK_STATUS {
	/*0000*/ _WLAN_HOSTED_NETWORK_STATE HostedNetworkState;
	/*0004*/ _GUID IPDeviceID;
	/*0014*/ UCHAR wlanHostedNetworkBSSID[0x6];
	/*001c*/ _DOT11_PHY_TYPE dot11PhyType;
	/*0020*/ ULONG ulChannelFrequency;
	/*0024*/ ULONG dwNumberOfPeers;
	/*0028*/ _WLAN_HOSTED_NETWORK_PEER_STATE PeerList[0x1];
	/*0034*/
};

struct _WLAN_HOSTED_NETWORK_WCN_DATA {
	/*0000*/ INT bWCNEnabled;
	/*0004*/ ULONG dwWCNBeaconIELength;
	/*0008*/ UCHAR * pucWCNBeaconIEData;
	/*0010*/ ULONG dwWCNProbeResponseIELength;
	/*0018*/ UCHAR * pucWCNProbeResponseIEData;
	/*0020*/
};

struct _WLAN_HOTSPOT2_REGISTRATION_PARAMS {
	/*0000*/ ULONG length;
	/*0004*/ _DOT11_SSID dot11HotspotSecureSsid;
	/*0028*/ _DOT11_SSID dot11HotspotRegistrationSsid;
	/*004c*/ _WLAN_ANQP_OSU_PROVIDER_INFO osuProviderInfo;
	/*067c*/
};

enum _WLAN_IHV_CONTROL_TYPE {
	wlan_ihv_control_type_service = 0x0,
	wlan_ihv_control_type_driver = 0x1
};

struct _WLAN_INTERFACE_CAPABILITY {
	/*0000*/ _WLAN_INTERFACE_TYPE interfaceType;
	/*0004*/ INT bDot11DSupported;
	/*0008*/ ULONG dwMaxDesiredSsidListSize;
	/*000c*/ ULONG dwMaxDesiredBssidListSize;
	/*0010*/ ULONG dwNumberOfSupportedPhys;
	/*0014*/ _DOT11_PHY_TYPE dot11PhyTypes[0x40];
	/*0114*/
};

struct _WLAN_INTERFACE_INFO {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ WCHAR strInterfaceDescription[0x100];
	/*0210*/ _WLAN_INTERFACE_STATE isState;
	/*0214*/
};

struct _WLAN_INTERFACE_INFO_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ ULONG dwIndex;
	/*0008*/ _WLAN_INTERFACE_INFO InterfaceInfo[0x1];
	/*021c*/
};

enum _WLAN_INTERFACE_STATE {
	wlan_interface_state_not_ready = 0x0,
	wlan_interface_state_connected = 0x1,
	wlan_interface_state_ad_hoc_network_formed = 0x2,
	wlan_interface_state_disconnecting = 0x3,
	wlan_interface_state_disconnected = 0x4,
	wlan_interface_state_associating = 0x5,
	wlan_interface_state_discovering = 0x6,
	wlan_interface_state_authenticating = 0x7
};

enum _WLAN_INTERFACE_TYPE {
	wlan_interface_type_emulated_802_11 = 0x0,
	wlan_interface_type_native_802_11 = 0x1,
	wlan_interface_type_invalid = 0x2
};

struct _WLAN_INTERNAL_BSS_LIST_FOR_FTM {
	/*0000*/ ULONG dwNumberOfItems;
	/*0008*/ _WLAN_INTERNAL_FTM_BSS_ENTRY wlanFtmBssEntries[0x1];
	/*0058*/
};

struct _WLAN_INTERNAL_FTM_BSS_ENTRY {
	/*0000*/ _DOT11_SSID dot11Ssid;
	/*0024*/ UCHAR dot11Bssid[0x6];
	/*002c*/ LONG lRssi;
	/*0030*/ ULONG uLinkQuality;
	/*0038*/ ULONGLONG ullHostTimestamp;
	/*0040*/ ULONG ulChCenterFrequency;
	/*0044*/ INT bFtmAsResponderSupported;
	/*0048*/ INT bLCIConfigured;
	/*004c*/ ULONG dwFtmEntryProperties;
	/*0050*/
};

enum _WLAN_INTF_OPCODE {
	wlan_intf_opcode_autoconf_start = 0x0,
	wlan_intf_opcode_autoconf_enabled = 0x1,
	wlan_intf_opcode_background_scan_enabled = 0x2,
	wlan_intf_opcode_media_streaming_mode = 0x3,
	wlan_intf_opcode_radio_state = 0x4,
	wlan_intf_opcode_bss_type = 0x5,
	wlan_intf_opcode_interface_state = 0x6,
	wlan_intf_opcode_current_connection = 0x7,
	wlan_intf_opcode_channel_number = 0x8,
	wlan_intf_opcode_supported_infrastructure_auth_cipher_pairs = 0x9,
	wlan_intf_opcode_supported_adhoc_auth_cipher_pairs = 0xa,
	wlan_intf_opcode_supported_country_or_region_string_list = 0xb,
	wlan_intf_opcode_current_operation_mode = 0xc,
	wlan_intf_opcode_supported_safe_mode = 0xd,
	wlan_intf_opcode_certified_safe_mode = 0xe,
	wlan_intf_opcode_hosted_network_capable = 0xf,
	wlan_intf_opcode_management_frame_protection_capable = 0x10,
	wlan_intf_opcode_autoconf_end = 0xfffffff,
	wlan_intf_opcode_msm_start = 0x10000100,
	wlan_intf_opcode_statistics = 0x10000101,
	wlan_intf_opcode_rssi = 0x10000102,
	wlan_intf_opcode_msm_end = 0x1fffffff,
	wlan_intf_opcode_security_start = 0x20010000,
	wlan_intf_opcode_security_end = 0x2fffffff,
	wlan_intf_opcode_ihv_start = 0x30000000,
	wlan_intf_opcode_ihv_end = 0x3fffffff
};

enum _WLAN_INTF_PRIVATE_OPCODE {
	wlan_intf_private_opcode_invalid = 0x0,
	wlan_intf_private_opcode_ResetRecover = 0x1,
	wlan_intf_private_opcode_adapter_capabilities = 0x2,
	wlan_intf_private_opcode_band_capabilities = 0x3,
	wlan_intf_private_opcode_vwifi_attributes = 0x4,
	wlan_intf_private_opcode_mac_randomization_status = 0x5,
	wlan_intf_private_opcode_system_capabilities = 0x6,
	wlan_intf_private_opcode_operational_state = 0x7,
	wlan_intf_private_opcode_station_mode_enabled = 0x8,
	wlan_intf_private_opcode_ResetRecover_recommended = 0x9,
	wlan_intf_private_opcode_roam_request = 0xa,
	wlan_intf_private_opcode_update_nla_capability = 0xb,
	wlan_intf_private_opcode_temporary_disconnect_request = 0xc,
	wlan_intf_private_opcode_max = 0xd
};

struct _WLAN_MSM_NOTIFICATION_DATA {
	/*0000*/ _WLAN_CONNECTION_MODE wlanConnectionMode;
	/*0004*/ WCHAR strProfileName[0x100];
	/*0204*/ _DOT11_SSID dot11Ssid;
	/*0228*/ _DOT11_BSS_TYPE dot11BssType;
	/*022c*/ UCHAR dot11MacAddr[0x6];
	/*0234*/ INT bSecurityEnabled;
	/*0238*/ INT bFirstPeer;
	/*023c*/ INT bLastPeer;
	/*0240*/ ULONG wlanReasonCode;
	/*0244*/
};

enum _WLAN_NOTIFICATION_ACM {
	wlan_notification_acm_start = 0x0,
	wlan_notification_acm_autoconf_enabled = 0x1,
	wlan_notification_acm_autoconf_disabled = 0x2,
	wlan_notification_acm_background_scan_enabled = 0x3,
	wlan_notification_acm_background_scan_disabled = 0x4,
	wlan_notification_acm_bss_type_change = 0x5,
	wlan_notification_acm_power_setting_change = 0x6,
	wlan_notification_acm_scan_complete = 0x7,
	wlan_notification_acm_scan_fail = 0x8,
	wlan_notification_acm_connection_start = 0x9,
	wlan_notification_acm_connection_complete = 0xa,
	wlan_notification_acm_connection_attempt_fail = 0xb,
	wlan_notification_acm_filter_list_change = 0xc,
	wlan_notification_acm_interface_arrival = 0xd,
	wlan_notification_acm_interface_removal = 0xe,
	wlan_notification_acm_profile_change = 0xf,
	wlan_notification_acm_profile_name_change = 0x10,
	wlan_notification_acm_profiles_exhausted = 0x11,
	wlan_notification_acm_network_not_available = 0x12,
	wlan_notification_acm_network_available = 0x13,
	wlan_notification_acm_disconnecting = 0x14,
	wlan_notification_acm_disconnected = 0x15,
	wlan_notification_acm_adhoc_network_state_change = 0x16,
	wlan_notification_acm_profile_unblocked = 0x17,
	wlan_notification_acm_screen_power_change = 0x18,
	wlan_notification_acm_profile_blocked = 0x19,
	wlan_notification_acm_scan_list_refresh = 0x1a,
	wlan_notification_acm_operational_state_change = 0x1b,
	wlan_notification_acm_end = 0x1c
};

enum _WLAN_NOTIFICATION_MSM {
	wlan_notification_msm_start = 0x0,
	wlan_notification_msm_associating = 0x1,
	wlan_notification_msm_associated = 0x2,
	wlan_notification_msm_authenticating = 0x3,
	wlan_notification_msm_connected = 0x4,
	wlan_notification_msm_roaming_start = 0x5,
	wlan_notification_msm_roaming_end = 0x6,
	wlan_notification_msm_radio_state_change = 0x7,
	wlan_notification_msm_signal_quality_change = 0x8,
	wlan_notification_msm_disassociating = 0x9,
	wlan_notification_msm_disconnected = 0xa,
	wlan_notification_msm_peer_join = 0xb,
	wlan_notification_msm_peer_leave = 0xc,
	wlan_notification_msm_adapter_removal = 0xd,
	wlan_notification_msm_adapter_operation_mode_change = 0xe,
	wlan_notification_msm_link_degraded = 0xf,
	wlan_notification_msm_link_improved = 0x10,
	wlan_notification_msm_end = 0x11
};

enum _WLAN_NOTIFICATION_SECURITY {
	wlan_notification_security_start = 0x0,
	wlan_notification_security_end = 0x1
};

enum _WLAN_OPCODE_VALUE_TYPE {
	wlan_opcode_value_type_query_only = 0x0,
	wlan_opcode_value_type_set_by_group_policy = 0x1,
	wlan_opcode_value_type_set_by_user = 0x2,
	wlan_opcode_value_type_invalid = 0x3
};

enum _WLAN_OPERATIONAL_STATE {
	wlan_operational_state_unknown = 0x0,
	wlan_operational_state_off = 0x1,
	wlan_operational_state_on = 0x2,
	wlan_operational_state_going_off = 0x3,
	wlan_operational_state_going_on = 0x4
};

struct _WLAN_PHY_RADIO_STATE {
	/*0000*/ ULONG dwPhyIndex;
	/*0004*/ _DOT11_RADIO_STATE dot11SoftwareRadioState;
	/*0008*/ _DOT11_RADIO_STATE dot11HardwareRadioState;
	/*000c*/
};

enum _WLAN_POWER_SETTING {
	wlan_power_setting_no_saving = 0x0,
	wlan_power_setting_low_saving = 0x1,
	wlan_power_setting_medium_saving = 0x2,
	wlan_power_setting_maximum_saving = 0x3,
	wlan_power_setting_invalid = 0x4
};

struct _WLAN_PRECONNECT_INPUT_REQUEST {
	/*0000*/ _WLAN_PRECONNECT_INPUT_TYPE Type;
	/*0004*/ ULONG dwPlapFields;
	/*0008*/ void * pPlapData;
	/*0010*/
};

struct _WLAN_PRECONNECT_INPUT_RESPONSE {
	/*0000*/ _WLAN_PRECONNECT_INPUT_TYPE Type;
	/*0004*/ ULONG dwDataSize;
	/*0008*/ LONGLONG Padding;
	/*0010*/ UCHAR DataBlob[0x1];
	/*0018*/
};

enum _WLAN_PRECONNECT_INPUT_TYPE {
	WLAN_NO_INPUT = 0x0,
	WLAN_INPUT_WEP_KEY = 0x1,
	WLAN_INPUT_PSK = 0x2,
	WLAN_INPUT_KEY = 0x3,
	WLAN_INPUT_SCARD_KEY = 0x4,
	WLAN_INPUT_USER_PWD = 0x5
};

struct _WLAN_PROFILE_INFO {
	/*0000*/ WCHAR strProfileName[0x100];
	/*0200*/ ULONG dwFlags;
	/*0204*/
};

struct _WLAN_PROFILE_INFO_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ ULONG dwIndex;
	/*0008*/ _WLAN_PROFILE_INFO ProfileInfo[0x1];
	/*020c*/
};

enum _WLAN_PROTECTED_SCENARIO_TYPE {
	WLAN_PROTECTED_SCENARIO_TYPE_NONE = 0x0,
	WLAN_PROTECTED_SCENARIO_TYPE_HIGH_PERFORMANCE_REQUIRED = 0x1,
	WLAN_PROTECTED_SCENARIO_TYPE_CRITICAL_CONNECTION_SEQUENCE = 0x2
};

struct _WLAN_RADIO_STATE {
	/*0000*/ ULONG dwNumberOfPhys;
	/*0004*/ _WLAN_PHY_RADIO_STATE PhyRadioState[0x40];
	/*0304*/
};

struct _WLAN_RATE_SET {
	/*0000*/ ULONG uRateSetLength;
	/*0004*/ USHORT usRateSet[0x7e];
	/*0100*/
};

struct _WLAN_RAW_DATA {
	/*0000*/ ULONG dwDataSize;
	/*0004*/ UCHAR DataBlob[0x1];
	/*0008*/
};

struct _WLAN_RAW_DATA_LIST {
	
	/*0000*/ ULONG dwTotalSize;
	/*0004*/ ULONG dwNumberOfItems;
	/*0008*/ <unnamed-type-DataList> DataList[0x1];
	/*0010*/
};

struct _WLAN_RESET_RECOVER_PAYLOAD {
	/*0000*/ ULONG dwChangeReason;
	/*0004*/ ULONG dwIpFamily;
	/*0008*/
};

enum _WLAN_ROAM_REQUEST_ATTEMPT_RESULT {
	WLAN_ROAM_REQUEST_NOT_CONSIDERED = 0x0,
	WLAN_ROAM_REQUEST_NO_FAILURE = 0x1,
	WLAN_ROAM_REQUEST_GENERIC_FAILURE = 0x2,
	WLAN_ROAM_REQUEST_SKIPPED_DISABLED_IN_REGISTRY = 0x3,
	WLAN_ROAM_REQUEST_SKIPPED_NON_WDI_DRIVER = 0x4,
	WLAN_ROAM_REQUEST_THROTTLED_FREQUENT_TRIES = 0x5,
	WLAN_ROAM_REQUEST_FAILED_BY_DRIVER = 0x6,
	WLAN_ROAM_REQUEST_SKIPPED_SCREEN_OFF = 0x7,
	WLAN_ROAM_REQUEST_SKIPPED_NOT_CONNECTED = 0x8,
	WLAN_ROAM_REQUEST_SKIPPED_NOT_STABILIZED = 0x9
};

enum _WLAN_SECURABLE_OBJECT {
	wlan_secure_permit_list = 0x0,
	wlan_secure_deny_list = 0x1,
	wlan_secure_ac_enabled = 0x2,
	wlan_secure_bc_scan_enabled = 0x3,
	wlan_secure_bss_type = 0x4,
	wlan_secure_show_denied = 0x5,
	wlan_secure_interface_properties = 0x6,
	wlan_secure_ihv_control = 0x7,
	wlan_secure_all_user_profiles_order = 0x8,
	wlan_secure_add_new_all_user_profiles = 0x9,
	wlan_secure_add_new_per_user_profiles = 0xa,
	wlan_secure_media_streaming_mode_enabled = 0xb,
	wlan_secure_current_operation_mode = 0xc,
	wlan_secure_get_plaintext_key = 0xd,
	wlan_secure_hosted_network_elevated_access = 0xe,
	wlan_secure_virtual_station_extensibility = 0xf,
	wlan_secure_wfd_elevated_access = 0x10,
	WLAN_SECURABLE_OBJECT_COUNT = 0x11
};

struct _WLAN_SECURITY_ATTRIBUTES {
	/*0000*/ INT bSecurityEnabled;
	/*0004*/ INT bOneXEnabled;
	/*0008*/ _DOT11_AUTH_ALGORITHM dot11AuthAlgorithm;
	/*000c*/ _DOT11_CIPHER_ALGORITHM dot11CipherAlgorithm;
	/*0010*/
};

struct _WLAN_TEMPORARY_DISCONNECT_REQUEST_PAYLOAD {
	/*0000*/ _WLAN_CONNECTION_MODE ConnectionMode;
	/*0004*/ _DOT11_SSID SSID;
	/*0028*/
};

enum _WLAN_TEMPORARY_DISCONNECT_REQUEST_RESULT {
	WLAN_TEMPORARY_DISCONNECT_NOT_CONSIDERED = 0x0,
	WLAN_TEMPORARY_DISCONNECT_NO_FAILURE = 0x1,
	WLAN_TEMPORARY_DISCONNECT_GENERIC_FAILURE = 0x2,
	WLAN_TEMPORARY_DISCONNECT_SKIPPED_DISABLED_IN_REGISTRY = 0x3
};

struct _WLAN_UI_REQUEST {
	/*0000*/ WCHAR strProfileName[0x100];
	/*0200*/ _DOT11_SSID Dot11Ssid;
	/*0224*/ _DOT11_BSS_TYPE BssType;
	/*0228*/ INT bSecured;
	/*022c*/ _WLAN_UI_REQUEST_TYPE Type;
	/*0230*/ ULONG dwFlags;
	/*0234*/ ULONG dwDataSize;
	/*0238*/ LONGLONG Padding;
	/*0240*/ UCHAR DataBlob[0x1];
	/*0248*/
};

enum _WLAN_UI_REQUEST_TYPE {
	wlan_ui_request_type_autoconfig = 0x0,
	wlan_ui_request_type_msm = 0x1,
	wlan_ui_request_type_security = 0x2,
	wlan_ui_request_type_ihv = 0x3,
	wlan_ui_request_type_verifynet = 0x4,
	wlan_ui_request_type_cancelled = 0x5,
	wlan_ui_request_type_invalid = 0x6
};

struct _WLAN_UI_RESPONSE {
	/*0000*/ _WLAN_UI_REQUEST_TYPE Type;
	/*0004*/ ULONG dwDataSize;
	/*0008*/ ULONG dwFlags;
	/*0010*/ LONGLONG Padding;
	/*0018*/ UCHAR DataBlob[0x1];
	/*0020*/
};

struct _WLAN_UI_SECURITY_RESPONSE {
	/*0000*/ _MSMSEC_UI_RESPONSE_TYPE Type;
	/*0004*/ ULONG dwDataSize;
	/*0008*/ LONGLONG Padding;
	/*0010*/ UCHAR DataBlob[0x1];
	/*0018*/
};

enum _WLAN_VIRTUAL_INTERFACE_TYPE {
	wlan_virtual_interface_type_primary = 0x0,
	wlan_virtual_interface_type_hosted_network = 0x1,
	wlan_virtual_interface_type_virtual_station = 0x2,
	wlan_virtual_interface_type_wfd_device = 0x3,
	wlan_virtual_interface_type_wfd_role = 0x4,
	wlan_virtual_interface_type_invalid = 0x5
};

enum _WL_DISPLAY_PAGES {
	WLConnectionPage = 0x0,
	WLSecurityPage = 0x1,
	WLAdvPage = 0x2
};

enum _WNF_DATA_SCOPE {
	WnfDataScopeSystem = 0x0,
	WnfDataScopeSession = 0x1,
	WnfDataScopeUser = 0x2,
	WnfDataScopeProcess = 0x3,
	WnfDataScopeMachine = 0x4,
	WnfDataScopePhysicalMachine = 0x5
};

struct _WNF_DELIVERY_DESCRIPTOR {
	/*0000*/ ULONGLONG SubscriptionId;
	/*0008*/ _WNF_STATE_NAME StateName;
	/*0010*/ ULONG ChangeStamp;
	/*0014*/ ULONG StateDataSize;
	/*0018*/ ULONG EventMask;
	/*001c*/ _WNF_TYPE_ID TypeId;
	/*002c*/ ULONG StateDataOffset;
	/*0030*/
};

struct _WNF_SCREENONSTUDY_SESSION_DATA {
	/*0000*/ UCHAR Start;
	/*0004*/ _GUID ScreenOnSessionGuid;
	/*0014*/
};

struct _WNF_STATE_NAME {
	/*0000*/ ULONG Data[0x2];
	/*0008*/
};

enum _WNF_STATE_NAME_INFORMATION {
	WnfInfoStateNameExist = 0x0,
	WnfInfoSubscribersPresent = 0x1,
	WnfInfoIsQuiescent = 0x2
};

enum _WNF_STATE_NAME_LIFETIME {
	WnfWellKnownStateName = 0x0,
	WnfPermanentStateName = 0x1,
	WnfPersistentStateName = 0x2,
	WnfTemporaryStateName = 0x3
};

struct _WNF_TYPE_ID {
	/*0000*/ _GUID TypeId;
	/*0010*/
};

struct _WNF_USER_SUBSCRIPTION;

struct _WNF_WIFI_PROTECTED_SCENARIO_DATA {
	/*0000*/ _WLAN_PROTECTED_SCENARIO_TYPE ProtectedScenarioType;
	/*0004*/
};

struct _WNODE_HEADER {
	/*0000*/ ULONG BufferSize;
	/*0004*/ ULONG ProviderId;
	/*0008*/ ULONGLONG HistoricalContext;
	/*0008*/ ULONG Version;
	/*000c*/ ULONG Linkage;
	/*0010*/ ULONG CountLost;
	/*0010*/ void * KernelHandle;
	/*0010*/ _LARGE_INTEGER TimeStamp;
	/*0018*/ _GUID Guid;
	/*0028*/ ULONG ClientContext;
	/*002c*/ ULONG Flags;
	/*0030*/
};

struct _WOF_EXTERNAL_FILE_ID {
	/*0000*/ _FILE_ID_128 FileId;
	/*0010*/
};

struct _WOF_EXTERNAL_INFO {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Provider;
	/*0008*/
};

struct _WOF_VERSION_INFO {
	/*0000*/ ULONG WofVersion;
	/*0004*/
};

struct _WORD_BLOB {
	/*0000*/ ULONG clSize;
	/*0004*/ USHORT asData[0x1];
	/*0008*/
};

enum _WORKERFACTORYINFOCLASS {
	WorkerFactoryTimeout = 0x0,
	WorkerFactoryRetryTimeout = 0x1,
	WorkerFactoryIdleTimeout = 0x2,
	WorkerFactoryBindingCount = 0x3,
	WorkerFactoryThreadMinimum = 0x4,
	WorkerFactoryThreadMaximum = 0x5,
	WorkerFactoryPaused = 0x6,
	WorkerFactoryBasicInformation = 0x7,
	WorkerFactoryAdjustThreadGoal = 0x8,
	WorkerFactoryCallbackType = 0x9,
	WorkerFactoryStackInformation = 0xa,
	WorkerFactoryThreadBasePriority = 0xb,
	WorkerFactoryTimeoutWaiters = 0xc,
	WorkerFactoryFlags = 0xd,
	WorkerFactoryThreadSoftMaximum = 0xe,
	WorkerFactoryThreadCpuSets = 0xf,
	MaxWorkerFactoryInfoClass = 0x10
};

struct _WORKER_FACTORY_BASIC_INFORMATION {
	/*0000*/ _LARGE_INTEGER Timeout;
	/*0008*/ _LARGE_INTEGER RetryTimeout;
	/*0010*/ _LARGE_INTEGER IdleTimeout;
	/*0018*/ UCHAR Paused;
	/*0019*/ UCHAR TimerSet;
	/*001a*/ UCHAR QueuedToExWorker;
	/*001b*/ UCHAR MayCreate;
	/*001c*/ UCHAR CreateInProgress;
	/*001d*/ UCHAR InsertedIntoQueue;
	/*001e*/ UCHAR Shutdown;
	/*0020*/ ULONG BindingCount;
	/*0024*/ ULONG ThreadMinimum;
	/*0028*/ ULONG ThreadMaximum;
	/*002c*/ ULONG PendingWorkerCount;
	/*0030*/ ULONG WaitingWorkerCount;
	/*0034*/ ULONG TotalWorkerCount;
	/*0038*/ ULONG ReleaseCount;
	/*0040*/ LONGLONG InfiniteWaitGoal;
	/*0048*/ LONG (* StartRoutine)( void * );
	/*0050*/ void * StartParameter;
	/*0058*/ void * ProcessId;
	/*0060*/ ULONGLONG StackReserve;
	/*0068*/ ULONGLONG StackCommit;
	/*0070*/ LONG LastThreadCreationStatus;
	/*0078*/
};

enum _WORKER_FACTORY_CALLBACK_CLASS {
	WorkerFactoryCallbackNormal = 0x0,
	WorkerFactoryCallbackLongRunning = 0x1,
	WorkerFactoryCallbackIndependent = 0x2,
	WorkerFactoryCallbackDetectedUnrecoverableError = 0x3
};

struct _WORKER_FACTORY_DEFERRED_WORK {
	/*0000*/ _PORT_MESSAGE * AlpcSendMessage;
	/*0008*/ void * AlpcSendMessagePort;
	/*0010*/ ULONG AlpcSendMessageFlags;
	/*0014*/ ULONG Flags;
	/*0018*/
};

struct _WOW64_ARCHITECTURE_INFORMATION {
	/*0000*/ ULONG Machine : 16; // 0x0000ffff;
	/*0000*/ ULONG KernelMode : 01; // 0x00010000;
	/*0000*/ ULONG UserMode : 01; // 0x00020000;
	/*0000*/ ULONG Native : 01; // 0x00040000;
	/*0000*/ ULONG Process : 01; // 0x00080000;
	/*0000*/ ULONG ReservedZero0 : 12; // 0xfff00000;
	/*0004*/
};

struct _WOW64_CONTEXT {
	/*0000*/ ULONG ContextFlags;
	/*0004*/ ULONG Dr0;
	/*0008*/ ULONG Dr1;
	/*000c*/ ULONG Dr2;
	/*0010*/ ULONG Dr3;
	/*0014*/ ULONG Dr6;
	/*0018*/ ULONG Dr7;
	/*001c*/ _WOW64_FLOATING_SAVE_AREA FloatSave;
	/*008c*/ ULONG SegGs;
	/*0090*/ ULONG SegFs;
	/*0094*/ ULONG SegEs;
	/*0098*/ ULONG SegDs;
	/*009c*/ ULONG Edi;
	/*00a0*/ ULONG Esi;
	/*00a4*/ ULONG Ebx;
	/*00a8*/ ULONG Edx;
	/*00ac*/ ULONG Ecx;
	/*00b0*/ ULONG Eax;
	/*00b4*/ ULONG Ebp;
	/*00b8*/ ULONG Eip;
	/*00bc*/ ULONG SegCs;
	/*00c0*/ ULONG EFlags;
	/*00c4*/ ULONG Esp;
	/*00c8*/ ULONG SegSs;
	/*00cc*/ UCHAR ExtendedRegisters[0x200];
	/*02cc*/
};

struct _WOW64_CPUAREA_INFO {
	/*0000*/ void * Context;
	/*0000*/ _X86_NT5_CONTEXT * ContextX86;
	/*0000*/ _AMD64_CONTEXT * ContextAmd64;
	/*0000*/ _ARM_CONTEXT * ContextArm;
	/*0000*/ _ARM64_CONTEXT * ContextArm64;
	/*0008*/ void * * PerThreadDataLocation;
	/*0010*/ ULONG * ContextFlagsLocation;
	/*0018*/ ULONG * CpuAreaFlagsLocation;
	/*0020*/ ULONG ArchContextFlag;
	/*0024*/ USHORT Machine;
	/*0026*/ USHORT Pad1;
	/*0028*/ LONG volatile * KernelWriteToExecutableSignaledLocation;
	/*0030*/
};

struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
	/*0000*/ ULONG Selector;
	/*0004*/ _WOW64_LDT_ENTRY Descriptor;
	/*000c*/
};

struct _WOW64_FLOATING_SAVE_AREA {
	/*0000*/ ULONG ControlWord;
	/*0004*/ ULONG StatusWord;
	/*0008*/ ULONG TagWord;
	/*000c*/ ULONG ErrorOffset;
	/*0010*/ ULONG ErrorSelector;
	/*0014*/ ULONG DataOffset;
	/*0018*/ ULONG DataSelector;
	/*001c*/ UCHAR RegisterArea[0x50];
	/*006c*/ ULONG Cr0NpxState;
	/*0070*/
};

enum _WOW64_FUNCTION_CODE64 {
	WOW64_FUNCTION_NOP = 0x0,
	WOW64_FUNCTION_QUERY_PROCESS_DEBUG_INFO = 0x1,
	WOW64_FUNCTION_CPU_TURBO_THUNK_CONTROL = 0x2,
	WOW64_FUNCTION_CPU_CFG_DISPATCH_CONTROL = 0x3,
	WOW64_FUNCTION_CPU_OPTIMIZE_CHPE_IMPORT_THUNKS = 0x4,
	WOW64_FUNCTION_MAXIMUM = 0x5
};

struct _WOW64_LDT_ENTRY {
	
	/*0000*/ USHORT LimitLow;
	/*0002*/ USHORT BaseLow;
	/*0004*/ <unnamed-type-HighWord> HighWord;
	/*0008*/
};

enum _WPP_FLAG_LEN_ENUM {
	WPP_FLAG_LEN = 0x1
};

enum _WPP_FLAG_LEN_ENUM_MAX {
	WPP_MAX_FLAG_LEN_CHECK = 0x1
};

struct _WPP_TRACE_CONTROL_BLOCK {
	/*0000*/ _WPP_TRACE_CONTROL_BLOCK * Next;
	/*0008*/ ULONGLONG UmRegistrationHandle;
	/*0010*/ ULONGLONG Logger;
	/*0010*/ _WPP_WIN2K_CONTROL_BLOCK * Win2kCb;
	/*0010*/ void * Ptr;
	/*0010*/ _WPP_TRACE_CONTROL_BLOCK * Cb;
	/*0018*/ UCHAR FlagsLen;
	/*0019*/ UCHAR Level;
	/*001a*/ USHORT Options;
	/*001c*/ ULONG Flags[0x1];
	/*0020*/ _GUID const * ControlGuid;
	/*0028*/
};

struct _WPP_WIN2K_CONTROL_BLOCK {
	/*0000*/ ULONGLONG Logger;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG Level;
	/*0010*/ _GUID const * ControlGuid;
	/*0018*/
};

struct _WRITE_USN_REASON_INPUT {
	/*0000*/ ULONG Flags;
	/*0004*/ ULONG UsnReasonToWrite;
	/*0008*/
};

struct _WSABUF {
	/*0000*/ ULONG len;
	/*0008*/ CHAR * buf;
	/*0010*/
};

struct _WSACOMPLETION {
	
	/*0000*/ _WSACOMPLETIONTYPE Type;
	/*0008*/ <unnamed-type-Parameters> Parameters;
	/*0020*/
};

enum _WSACOMPLETIONTYPE {
	NSP_NOTIFY_IMMEDIATELY = 0x0,
	NSP_NOTIFY_HWND = 0x1,
	NSP_NOTIFY_EVENT = 0x2,
	NSP_NOTIFY_PORT = 0x3,
	NSP_NOTIFY_APC = 0x4
};

enum _WSAESETSERVICEOP {
	RNRSERVICE_REGISTER = 0x0,
	RNRSERVICE_DEREGISTER = 0x1,
	RNRSERVICE_DELETE = 0x2
};

enum _WSAEcomparator {
	COMP_EQUAL = 0x0,
	COMP_NOTLESS = 0x1
};

struct _WSAMSG {
	/*0000*/ sockaddr * name;
	/*0008*/ INT namelen;
	/*0010*/ _WSABUF * lpBuffers;
	/*0018*/ ULONG dwBufferCount;
	/*0020*/ _WSABUF Control;
	/*0030*/ ULONG dwFlags;
	/*0038*/
};

struct _WSANAMESPACE_INFOA {
	/*0000*/ _GUID NSProviderId;
	/*0010*/ ULONG dwNameSpace;
	/*0014*/ INT fActive;
	/*0018*/ ULONG dwVersion;
	/*0020*/ CHAR * lpszIdentifier;
	/*0028*/
};

struct _WSANAMESPACE_INFOEXA {
	/*0000*/ _GUID NSProviderId;
	/*0010*/ ULONG dwNameSpace;
	/*0014*/ INT fActive;
	/*0018*/ ULONG dwVersion;
	/*0020*/ CHAR * lpszIdentifier;
	/*0028*/ tagBLOB ProviderSpecific;
	/*0038*/
};

struct _WSANAMESPACE_INFOEXW {
	/*0000*/ _GUID NSProviderId;
	/*0010*/ ULONG dwNameSpace;
	/*0014*/ INT fActive;
	/*0018*/ ULONG dwVersion;
	/*0020*/ WCHAR * lpszIdentifier;
	/*0028*/ tagBLOB ProviderSpecific;
	/*0038*/
};

struct _WSANAMESPACE_INFOW {
	/*0000*/ _GUID NSProviderId;
	/*0010*/ ULONG dwNameSpace;
	/*0014*/ INT fActive;
	/*0018*/ ULONG dwVersion;
	/*0020*/ WCHAR * lpszIdentifier;
	/*0028*/
};

struct _WSANETWORKEVENTS {
	/*0000*/ LONG lNetworkEvents;
	/*0004*/ INT iErrorCode[0xa];
	/*002c*/
};

struct _WSANSClassInfoA {
	/*0000*/ CHAR * lpszName;
	/*0008*/ ULONG dwNameSpace;
	/*000c*/ ULONG dwValueType;
	/*0010*/ ULONG dwValueSize;
	/*0018*/ void * lpValue;
	/*0020*/
};

struct _WSANSClassInfoW {
	/*0000*/ WCHAR * lpszName;
	/*0008*/ ULONG dwNameSpace;
	/*000c*/ ULONG dwValueType;
	/*0010*/ ULONG dwValueSize;
	/*0018*/ void * lpValue;
	/*0020*/
};

struct _WSAPROTOCOLCHAIN {
	/*0000*/ INT ChainLen;
	/*0004*/ ULONG ChainEntries[0x7];
	/*0020*/
};

struct _WSAPROTOCOL_INFOA {
	/*0000*/ ULONG dwServiceFlags1;
	/*0004*/ ULONG dwServiceFlags2;
	/*0008*/ ULONG dwServiceFlags3;
	/*000c*/ ULONG dwServiceFlags4;
	/*0010*/ ULONG dwProviderFlags;
	/*0014*/ _GUID ProviderId;
	/*0024*/ ULONG dwCatalogEntryId;
	/*0028*/ _WSAPROTOCOLCHAIN ProtocolChain;
	/*0048*/ INT iVersion;
	/*004c*/ INT iAddressFamily;
	/*0050*/ INT iMaxSockAddr;
	/*0054*/ INT iMinSockAddr;
	/*0058*/ INT iSocketType;
	/*005c*/ INT iProtocol;
	/*0060*/ INT iProtocolMaxOffset;
	/*0064*/ INT iNetworkByteOrder;
	/*0068*/ INT iSecurityScheme;
	/*006c*/ ULONG dwMessageSize;
	/*0070*/ ULONG dwProviderReserved;
	/*0074*/ CHAR szProtocol[0x100];
	/*0174*/
};

struct _WSAPROTOCOL_INFOW {
	/*0000*/ ULONG dwServiceFlags1;
	/*0004*/ ULONG dwServiceFlags2;
	/*0008*/ ULONG dwServiceFlags3;
	/*000c*/ ULONG dwServiceFlags4;
	/*0010*/ ULONG dwProviderFlags;
	/*0014*/ _GUID ProviderId;
	/*0024*/ ULONG dwCatalogEntryId;
	/*0028*/ _WSAPROTOCOLCHAIN ProtocolChain;
	/*0048*/ INT iVersion;
	/*004c*/ INT iAddressFamily;
	/*0050*/ INT iMaxSockAddr;
	/*0054*/ INT iMinSockAddr;
	/*0058*/ INT iSocketType;
	/*005c*/ INT iProtocol;
	/*0060*/ INT iProtocolMaxOffset;
	/*0064*/ INT iNetworkByteOrder;
	/*0068*/ INT iSecurityScheme;
	/*006c*/ ULONG dwMessageSize;
	/*0070*/ ULONG dwProviderReserved;
	/*0074*/ WCHAR szProtocol[0x100];
	/*0274*/
};

struct _WSAQuerySet2A {
	/*0000*/ ULONG dwSize;
	/*0008*/ CHAR * lpszServiceInstanceName;
	/*0010*/ _WSAVersion * lpVersion;
	/*0018*/ CHAR * lpszComment;
	/*0020*/ ULONG dwNameSpace;
	/*0028*/ _GUID * lpNSProviderId;
	/*0030*/ CHAR * lpszContext;
	/*0038*/ ULONG dwNumberOfProtocols;
	/*0040*/ _AFPROTOCOLS * lpafpProtocols;
	/*0048*/ CHAR * lpszQueryString;
	/*0050*/ ULONG dwNumberOfCsAddrs;
	/*0058*/ _CSADDR_INFO * lpcsaBuffer;
	/*0060*/ ULONG dwOutputFlags;
	/*0068*/ tagBLOB * lpBlob;
	/*0070*/
};

struct _WSAQuerySet2W {
	/*0000*/ ULONG dwSize;
	/*0008*/ WCHAR * lpszServiceInstanceName;
	/*0010*/ _WSAVersion * lpVersion;
	/*0018*/ WCHAR * lpszComment;
	/*0020*/ ULONG dwNameSpace;
	/*0028*/ _GUID * lpNSProviderId;
	/*0030*/ WCHAR * lpszContext;
	/*0038*/ ULONG dwNumberOfProtocols;
	/*0040*/ _AFPROTOCOLS * lpafpProtocols;
	/*0048*/ WCHAR * lpszQueryString;
	/*0050*/ ULONG dwNumberOfCsAddrs;
	/*0058*/ _CSADDR_INFO * lpcsaBuffer;
	/*0060*/ ULONG dwOutputFlags;
	/*0068*/ tagBLOB * lpBlob;
	/*0070*/
};

struct _WSAQuerySetA {
	/*0000*/ ULONG dwSize;
	/*0008*/ CHAR * lpszServiceInstanceName;
	/*0010*/ _GUID * lpServiceClassId;
	/*0018*/ _WSAVersion * lpVersion;
	/*0020*/ CHAR * lpszComment;
	/*0028*/ ULONG dwNameSpace;
	/*0030*/ _GUID * lpNSProviderId;
	/*0038*/ CHAR * lpszContext;
	/*0040*/ ULONG dwNumberOfProtocols;
	/*0048*/ _AFPROTOCOLS * lpafpProtocols;
	/*0050*/ CHAR * lpszQueryString;
	/*0058*/ ULONG dwNumberOfCsAddrs;
	/*0060*/ _CSADDR_INFO * lpcsaBuffer;
	/*0068*/ ULONG dwOutputFlags;
	/*0070*/ tagBLOB * lpBlob;
	/*0078*/
};

struct _WSAQuerySetW {
	/*0000*/ ULONG dwSize;
	/*0008*/ WCHAR * lpszServiceInstanceName;
	/*0010*/ _GUID * lpServiceClassId;
	/*0018*/ _WSAVersion * lpVersion;
	/*0020*/ WCHAR * lpszComment;
	/*0028*/ ULONG dwNameSpace;
	/*0030*/ _GUID * lpNSProviderId;
	/*0038*/ WCHAR * lpszContext;
	/*0040*/ ULONG dwNumberOfProtocols;
	/*0048*/ _AFPROTOCOLS * lpafpProtocols;
	/*0050*/ WCHAR * lpszQueryString;
	/*0058*/ ULONG dwNumberOfCsAddrs;
	/*0060*/ _CSADDR_INFO * lpcsaBuffer;
	/*0068*/ ULONG dwOutputFlags;
	/*0070*/ tagBLOB * lpBlob;
	/*0078*/
};

struct _WSAServiceClassInfoA {
	/*0000*/ _GUID * lpServiceClassId;
	/*0008*/ CHAR * lpszServiceClassName;
	/*0010*/ ULONG dwCount;
	/*0018*/ _WSANSClassInfoA * lpClassInfos;
	/*0020*/
};

struct _WSAServiceClassInfoW {
	/*0000*/ _GUID * lpServiceClassId;
	/*0008*/ WCHAR * lpszServiceClassName;
	/*0010*/ ULONG dwCount;
	/*0018*/ _WSANSClassInfoW * lpClassInfos;
	/*0020*/
};

struct _WSAVersion {
	/*0000*/ ULONG dwVersion;
	/*0004*/ _WSAEcomparator ecHow;
	/*0008*/
};

enum _WWAN_5G_FREQUENCY_RANGE {
	Wwan5GFrequencyRangeUnknown = 0x0,
	Wwan5GFrequencyRange1 = 0x1,
	Wwan5GFrequencyRange2 = 0x2,
	Wwan5GFrequencyRange1AndRange2 = 0x3
};

enum _WWAN_ACE_STATE {
	WwanAutoOff = 0x0,
	WwanAutoOn = 0x1,
	WwanManualOff = 0x2,
	WwanManualOn = 0x3
};

enum _WWAN_ACTIVATION_COMMAND {
	WwanActivationCommandDeactivate = 0x0,
	WwanActivationCommandActivate = 0x1,
	WwanActivationCommandCancel = 0x2,
	WwanActivationCommandMax = 0x3
};

enum _WWAN_ACTIVATION_STATE {
	WwanActivationStateUnknown = 0x0,
	WwanActivationStateActivated = 0x1,
	WwanActivationStateActivating = 0x2,
	WwanActivationStateDeactivated = 0x3,
	WwanActivationStateDeactivating = 0x4,
	WwanActivationStateMax = 0x5
};

enum _WWAN_ASYNC_GETSET_TYPE {
	WwanAsyncGetDeviceCaps = 0x0,
	WwanAsyncGetReadyInfo = 0x1,
	WwanAsyncGetRadioState = 0x2,
	WwanAsyncSetRadioState = 0x3,
	WwanAsyncGetPin = 0x4,
	WwanAsyncSetPin = 0x5,
	WwanAsyncGetPinList = 0x6,
	WwanAsyncGetHomeProvider = 0x7,
	WwanAsyncSetHomeProvider = 0x8,
	WwanAsyncGetPreferredProviders = 0x9,
	WwanAsyncSetPreferredProviders = 0xa,
	WwanAsyncGetVisibleProviders = 0xb,
	WwanAsyncGetRegisterState = 0xc,
	WwanAsyncSetRegisterState = 0xd,
	WwanAsyncGetPacketService = 0xe,
	WwanAsyncSetPacketService = 0xf,
	WwanAsyncGetSignalState = 0x10,
	WwanAsyncSetSignalState = 0x11,
	WwanAsyncGetConnect = 0x12,
	WwanAsyncSetConnect = 0x13,
	WwanAsyncGetProvisionedContexts = 0x14,
	WwanAsyncSetProvisionedContext = 0x15,
	WwanAsyncSetServiceActivation = 0x16,
	WwanAsyncGetSmsConfiguration = 0x17,
	WwanAsyncSetSmsConfiguration = 0x18,
	WwanAsyncSmsRead = 0x19,
	WwanAsyncSmsSend = 0x1a,
	WwanAsyncSmsDelete = 0x1b,
	WwanAsyncSmsStatus = 0x1c,
	WwanAsyncSetVendorSpecific = 0x1d,
	WwanAsyncSetProfileIndex = 0x1e,
	WwanAsyncGetDeviceServices = 0x1f,
	WwanAsyncSubscribeDeviceServiceEvents = 0x20,
	WwanAsyncAuthChallenge = 0x21,
	WwanAsyncUssdRequest = 0x22,
	WwanAsyncSetPinEx = 0x23,
	WwanAsyncGetPinEx = 0x24,
	WwanAsyncGetDeviceServiceCommand = 0x25,
	WwanAsyncSetDeviceServiceCommand = 0x26,
	WwanAsyncQueryDeviceServiceSupportedCommands = 0x27,
	WwanAsyncGetPreferredMultiCarrierProviders = 0x28,
	WwanAsyncSetPreferredMultiCarrierProviders = 0x29,
	WwanAsyncSetDeviceServiceSession = 0x2a,
	WwanAsyncWriteDeviceServiceSession = 0x2b,
	WwanAsyncSetNetworkIdleHint = 0x2c,
	WwanAsyncSetPreshutdown = 0x2d,
	WwanAsyncGetAtr = 0x2e,
	WwanAsyncUiccOpenChannel = 0x2f,
	WwanAsyncUiccCloseChannel = 0x30,
	WwanAsyncUiccSendApdu = 0x31,
	WwanAsyncUiccGetTerminalCapability = 0x32,
	WwanAsyncUiccSetTerminalCapability = 0x33,
	WwanAsyncGetPsMediaConfig = 0x34,
	WwanAsyncSetPsMediaConfig = 0x35,
	WwanAsyncGetSarConfig = 0x36,
	WwanAsyncSetSarConfig = 0x37,
	WwanAsyncGetSarTransmissionStatus = 0x38,
	WwanAsyncSetSarTransmissionStatus = 0x39,
	WwanAsyncGetNetworkBlacklist = 0x3a,
	WwanAsyncSetNetworkBlacklist = 0x3b,
	WwanAsyncGetLteAttachConfig = 0x3c,
	WwanAsyncSetLteAttachConfig = 0x3d,
	WwanAsyncGetLteAttachStatus = 0x3e,
	WwanAsyncSetLteAttachStatus = 0x3f,
	WwanAsyncGetProvisionedContextsV2 = 0x40,
	WwanAsyncSetProvisionedContextV2 = 0x41,
	WwanAsyncGetSysCap = 0x42,
	WwanAsyncGetDeviceCapsEx = 0x43,
	WwanAsyncGetUiccSlotMapping = 0x44,
	WwanAsyncSetUiccSlotMapping = 0x45,
	WwanAsyncGetUiccSlotInfo = 0x46,
	WwanAsyncGetModemConfigInfo = 0x47,
	WwanAsyncGetPcoStatus = 0x48,
	WwanAsyncUiccGetReset = 0x49,
	WwanAsyncUiccSetReset = 0x4a,
	WwanAsyncSetDeviceReset = 0x4b,
	WwanAsyncGetCellInfo = 0x4c,
	WwanAsyncGetMPDP = 0x4d,
	WwanAsyncSetMPDP = 0x4e,
	WwanAsyncGetNitzInfo = 0x4f,
	WwanAsyncGetModemLoggingConfig = 0x50,
	WwanAsyncSetModemLoggingConfig = 0x51,
	WwanAsyncGetUiccAppList = 0x52,
	WwanAsyncGetUiccFileStatus = 0x53,
	WwanAsyncGetUiccBinary = 0x54,
	WwanAsyncSetUiccBinary = 0x55,
	WwanAsyncGetUiccRecord = 0x56,
	WwanAsyncSetUiccRecord = 0x57,
	WwanAsyncGetPinEx2 = 0x58,
	WwanAsyncSetPinEx2 = 0x59,
	WwanAsyncGetRegisterParams = 0x5a,
	WwanAsyncSetRegisterParams = 0x5b,
	WwanAsyncGetNetworkParams = 0x5c,
	WWAN_ASYNC_GETSET_TYPE_MAX = 0x5d
};

struct _WWAN_ATR_INFO {
	/*0000*/ ULONG AtrLength;
	/*0004*/ UCHAR Atr[0x24];
	/*0028*/
};

struct _WWAN_AUTH_AKAP_CHALLENGE {
	/*0000*/ UCHAR Rand[0x10];
	/*0010*/ UCHAR Autn[0x10];
	/*0020*/ UCHAR NetworkName[0x100];
	/*0120*/ ULONG NetworkNameLength;
	/*0124*/
};

struct _WWAN_AUTH_AKAP_RESPONSE {
	/*0000*/ UCHAR Res[0x10];
	/*0010*/ ULONG ResLength;
	/*0014*/ UCHAR IKP[0x10];
	/*0024*/ UCHAR CKP[0x10];
	/*0034*/ UCHAR Auts[0xe];
	/*0044*/
};

struct _WWAN_AUTH_AKA_CHALLENGE {
	/*0000*/ UCHAR Rand[0x10];
	/*0010*/ UCHAR Autn[0x10];
	/*0020*/
};

struct _WWAN_AUTH_AKA_RESPONSE {
	/*0000*/ UCHAR Res[0x10];
	/*0010*/ ULONG ResLength;
	/*0014*/ UCHAR IK[0x10];
	/*0024*/ UCHAR CK[0x10];
	/*0034*/ UCHAR Auts[0xe];
	/*0044*/
};

struct _WWAN_AUTH_CHALLENGE {
	
	/*0000*/ _WWAN_AUTH_METHOD AuthMethod;
	/*0004*/ <unnamed-type-u> u;
	/*0128*/
};

enum _WWAN_AUTH_METHOD {
	WwanAuthSim = 0x0,
	WwanAuthAka = 0x1,
	WwanAuthAkaPrime = 0x2,
	WwanAuthMethodMax = 0x3
};

enum _WWAN_AUTH_PROTOCOL {
	WwanAuthProtocolNone = 0x0,
	WwanAuthProtocolPap = 0x1,
	WwanAuthProtocolChap = 0x2,
	WwanAuthProtocolMsChapV2 = 0x3,
	WwanAuthProtocolAuto = 0x4,
	WwanAuthProtocolMax = 0x5
};

struct _WWAN_AUTH_RESPONSE {
	
	/*0000*/ _WWAN_AUTH_METHOD AuthMethod;
	/*0004*/ <unnamed-type-u> u;
	/*0048*/
};

struct _WWAN_AUTH_SIM_CHALLENGE {
	/*0000*/ UCHAR Rand1[0x10];
	/*0010*/ UCHAR Rand2[0x10];
	/*0020*/ UCHAR Rand3[0x10];
	/*0030*/ ULONG n;
	/*0034*/
};

struct _WWAN_AUTH_SIM_RESPONSE {
	/*0000*/ UCHAR Sres1[0x4];
	/*0004*/ UCHAR Kc1[0x8];
	/*000c*/ UCHAR Sres2[0x4];
	/*0010*/ UCHAR Kc2[0x8];
	/*0018*/ UCHAR Sres3[0x4];
	/*001c*/ UCHAR Kc3[0x8];
	/*0024*/ ULONG n;
	/*0028*/
};

struct _WWAN_BASE_STATIONS_INFO {
	/*0000*/ ULONG SystemType;
	/*0004*/ ULONG GSMServingCellOffset;
	/*0008*/ ULONG GSMServingCellSize;
	/*000c*/ ULONG UMTSServingCellOffset;
	/*0010*/ ULONG UMTSServingCellSize;
	/*0014*/ ULONG TDSCDMAServingCellOffset;
	/*0018*/ ULONG TDSCDMAServingCellSize;
	/*001c*/ ULONG LTEServingCellOffset;
	/*0020*/ ULONG LTEServingCellSize;
	/*0024*/ ULONG GSMNmrOffset;
	/*0028*/ ULONG GSMNmrSize;
	/*002c*/ ULONG UMTSMrlOffset;
	/*0030*/ ULONG UMTSMrlSize;
	/*0034*/ ULONG TDSCDMAMrlOffset;
	/*0038*/ ULONG TDSCDMAMrlSize;
	/*003c*/ ULONG LTEMrlOffset;
	/*0040*/ ULONG LTEMrlSize;
	/*0044*/ ULONG CDMAMrlOffset;
	/*0048*/ ULONG CDMAMrlSize;
	/*004c*/ UCHAR BaseStationsData[0x1];
	/*0050*/
};

struct _WWAN_BASE_STATIONS_INFO_REQ {
	/*0000*/ ULONG MaxGSMCount;
	/*0004*/ ULONG MaxUMTSCount;
	/*0008*/ ULONG MaxTDSCDMACount;
	/*000c*/ ULONG MaxLTECount;
	/*0010*/ ULONG MaxCDMACount;
	/*0014*/
};

struct _WWAN_CDMA_MRL {
	/*0000*/ ULONG ElementCount;
	/*0004*/ UCHAR CDMAMrl[0x1];
	/*0008*/
};

struct _WWAN_CDMA_MRL_INFO {
	/*0000*/ ULONG ServingCellFlag;
	/*0004*/ ULONG NID;
	/*0008*/ ULONG SID;
	/*000c*/ ULONG BaseStationId;
	/*0010*/ ULONG BaseLatitude;
	/*0014*/ ULONG BaseLongitude;
	/*0018*/ ULONG RefPn;
	/*001c*/ ULONG GPSSeconds;
	/*0020*/ ULONG PilotStrength;
	/*0024*/
};

enum _WWAN_CELLULAR_CLASS {
	WwanCellularClassUnknown = 0x0,
	WwanCellularClassGsm = 0x1,
	WwanCellularClassCdma = 0x2,
	WwanCellularClassMax = 0x3
};

struct _WWAN_CELL_INFO {
	/*0000*/ ULONG dwParam;
	/*0004*/ WWAN_SYSTEM_TYPE systemType;
	/*0008*/ INT fServing;
	/*000c*/ ULONG dwSystemId;
	/*0010*/ ULONG dwNetworkId;
	/*0014*/ ULONG dwAreaCode;
	/*0018*/ ULONG dwCellId;
	/*001c*/ ULONG dwTimingAdvance;
	/*0020*/ ULONG dwChannelNumber;
	/*0024*/ ULONG dwBaseStationId;
	/*0028*/ LONG lRxSignalStrength;
	/*002c*/ ULONG dwFrequencyInfoUL;
	/*0030*/ ULONG dwFrequencyInfoDL;
	/*0034*/ ULONG dwFrequencyInfoNT;
	/*0038*/ ULONG dwPrimaryScramblingCode;
	/*003c*/ LONG lRSRQ;
	/*0040*/ LONG lSNR;
	/*0044*/ ULONG dwPathLoss;
	/*0048*/ ULONG dwPhysicalCellId;
	/*004c*/ ULONG dwCellParameterId;
	/*0050*/ ULONG dwBaseLatitude;
	/*0054*/ ULONG dwBaseLongitude;
	/*0058*/ ULONG dwGPSSeconds;
	/*005c*/ WCHAR szProviderId[0x7];
	/*006c*/
};

struct _WWAN_CELL_INFO_LIST {
	/*0000*/ ULONG dwNumberOfItems;
	/*0004*/ _WWAN_CELL_INFO pCellInfo[0x1];
	/*0070*/
};

enum _WWAN_COMPRESSION {
	WwanCompressionNone = 0x0,
	WwanCompressionEnable = 0x1,
	WwanCompressionMax = 0x2
};

enum _WWAN_CONFIGURATION_SOURCE {
	WwanUserProvisioned = 0x0,
	WwanAdminProvisioned = 0x1,
	WwanOperatorProvisioned = 0x2,
	WwanDeviceProvisioned = 0x3,
	WwanModemProvisioned = 0x4,
	WwanModemOperatorProvisioned = 0x5,
	WwanMaxProvisionSource = 0x6
};

struct _WWAN_CONNECTION_ISTREAM_DATA {
	/*0000*/ ULONG Size;
	/*0004*/ WWAN_CONTEXT_OBJECT ContextObject;
	/*0108*/ WWAN_API_INFO ApiInfo;
	/*0130*/ ULONG ReadyState;
	/*0134*/ ULONG RegisterState;
	/*0138*/ _WWAN_UCM_AUTOCONNECT_TYPE acType;
	/*013c*/ WCHAR ProfileGuid[0x28];
	/*018c*/ WCHAR ProfileName[0x100];
	/*038c*/ WCHAR InterfaceGuid[0x28];
	/*03dc*/ WCHAR ConnectedProfile[0x100];
	/*05dc*/ ULONG dwFlags;
	/*05e0*/ _GUID PhysicalInterfaceGuid;
	/*05f0*/
};

enum _WWAN_CONNECTION_MEDIA {
	WwanConnectionMediaUnknown = 0x0,
	WwanConnectionMediaCellular = 0x1,
	WwanConnectionMediaWiFi = 0x2,
	WwanConnectionMediaCellularPreferred = 0x3,
	WwanConnectionMediaWiFiPreferred = 0x4,
	WwanConnectionMediaMax = 0x5
};

struct _WWAN_CONTEXT {
	/*0000*/ ULONG ContextId;
	/*0004*/ _WWAN_CONTEXT_TYPE ContextType;
	/*0008*/ WCHAR AccessString[0x65];
	/*00d2*/ WCHAR UserName[0x100];
	/*02d2*/ WCHAR Password[0x100];
	/*04d4*/ _WWAN_COMPRESSION Compression;
	/*04d8*/ _WWAN_AUTH_PROTOCOL AuthType;
	/*04dc*/
};

enum _WWAN_CONTEXT_ENABLE {
	WwanContextDisabled = 0x0,
	WwanContextEnabled = 0x1,
	WwanContextEnableMaximum = 0x2
};

enum _WWAN_CONTEXT_LTE_ATTACH_ROAMING_CONTROL {
	WwanContextLteAttachRoamingControlHome = 0x0,
	WwanContextLteAttachRoamingControlPartner = 0x1,
	WwanContextLteAttachRoamingControlNonPartner = 0x2,
	WwanContextLteAttachRoamingControlMaximum = 0x3
};

enum _WWAN_CONTEXT_LTE_ATTACH_STATE {
	WwanContextLteAttachStateDetached = 0x0,
	WwanContextLteAttachStateAttached = 0x1,
	WwanContextLteAttachStateMaximum = 0x2
};

enum _WWAN_CONTEXT_MEDIA_TYPE {
	WwanContextMediaTypeCellularOnly = 0x0,
	WwanContextMediaTypeWifiOnly = 0x1,
	WwanContextMediaTypeAll = 0x2,
	WwanContextMediaTypeMaximum = 0x3
};

enum _WWAN_CONTEXT_OPERATIONS {
	WwanContextOperationDefault = 0x0,
	WwanContextOperationDelete = 0x1,
	WwanContextOperationRestoreFactory = 0x2,
	WwanContextOperationMaximum = 0x3
};

enum _WWAN_CONTEXT_ROAMING_CONTROL {
	WwanContextRoamingControlHomeOnly = 0x0,
	WwanContextRoamingControlPartnerOnly = 0x1,
	WwanContextRoamingControlNonPartnerOnly = 0x2,
	WwanContextRoamingControlHomeAndPartner = 0x3,
	WwanContextRoamingControlHomeAndNonPartner = 0x4,
	WwanContextRoamingControlPartnerAndNonPartner = 0x5,
	WwanContextRoamingControlAllowAll = 0x6,
	WwanContextRoamingControlMaximum = 0x7
};

struct _WWAN_CONTEXT_STATE {
	/*0000*/ ULONG uNwError;
	/*0004*/ ULONG ConnectionId;
	/*0008*/ _WWAN_ACTIVATION_STATE ActivationState;
	/*000c*/ _WWAN_VOICE_CALL_STATE VoiceCallState;
	/*0010*/ _WWAN_IP_TYPE IPType;
	/*0014*/ _WWAN_CONNECTION_MEDIA ConnectionMedia;
	/*0018*/ WCHAR AccessString[0x65];
	/*00e4*/ _WWAN_SINGLE_NSSAI NSSAI;
	/*00f4*/ WWAN_SSC_MODE SSCMode;
	/*00f8*/ UINT MinimumBackoffTime;
	/*00fc*/ UINT AdditionalRejectionInfo;
	/*0100*/
};

enum _WWAN_CONTEXT_TYPE {
	WwanContextTypeNone = 0x0,
	WwanContextTypeInternet = 0x1,
	WwanContextTypeVpn = 0x2,
	WwanContextTypeVoice = 0x3,
	WwanContextTypeVideoShare = 0x4,
	WwanContextTypeCustom = 0x5,
	WwanContextTypePurchase = 0x6,
	WwanContextTypeMms = 0x7,
	WwanContextTypeIms = 0x8,
	WwanContextTypeAdmin = 0x9,
	WwanContextTypeApp = 0xa,
	WwanContextTypeXcap = 0xb,
	WwanContextTypeTethering = 0xc,
	WwanContextTypeEmergencyCall = 0xd,
	WwanContextTypeLteAttach = 0xe,
	WwanContextTypeMax = 0xf
};

struct _WWAN_CONTEXT_V2 {
	/*0000*/ _WWAN_CONTEXT basicInfo;
	/*04dc*/ _WWAN_IP_TYPE IPType;
	/*04e0*/ _WWAN_CONTEXT_ENABLE Enable;
	/*04e4*/ _WWAN_CONTEXT_ROAMING_CONTROL Roaming;
	/*04e8*/ _WWAN_CONTEXT_MEDIA_TYPE MediaType;
	/*04ec*/ _WWAN_CONFIGURATION_SOURCE Source;
	/*04f0*/ INT Reserved;
	/*04f4*/
};

struct _WWAN_DATA_ENABLEMENT_OBJECT {
	/*0000*/ _GUID guidProfileSet;
	/*0010*/ INT fEnabled;
	/*0014*/
};

struct _WWAN_DATA_ROAM_CONTROL_OBJECT {
	/*0000*/ _GUID guidProfileSet;
	/*0010*/ WWAN_DATA_ROAM_CONTROL_TYPE roamControlState;
	/*0014*/
};

struct _WWAN_DATA_SERVICE_STATE_INFO {
	/*0000*/ ULONG uNwError;
	/*0004*/ _WWAN_PACKET_SERVICE_STATE PacketServiceState;
	/*0008*/ ULONG AvailableDataClass;
	/*000c*/ ULONG CurrentDataClass;
	/*0010*/ _WWAN_5G_FREQUENCY_RANGE FrequencyRange;
	/*0014*/ ULONG Sub5GCDataClass;
	/*0018*/ _WWAN_SINGLE_TAI CurrentTai;
	/*0020*/
};

enum _WWAN_DEFAULT_PDU_SESSION_HINT {
	WwanDefaultPDUSessionNotSupported = 0x0,
	WwanDefaultPDUSessionSupported = 0x1,
	WwanDefaultPDUSessionHintMax = 0x2
};

struct _WWAN_DEVICE_BINDINGS_INFO {
	/*0000*/ _WWAN_LIST_HEADER ApplicationListHeader;
	/*0008*/
};

struct _WWAN_DEVICE_CAPS {
	/*0000*/ _WWAN_DEVICE_TYPE WwanDeviceType;
	/*0004*/ _WWAN_CELLULAR_CLASS WwanCellularClass;
	/*0008*/ _WWAN_VOICE_CLASS WwanVoiceClass;
	/*000c*/ _WWAN_SIM_CLASS WwanSimClass;
	/*0010*/ ULONG WwanDataClass;
	/*0014*/ WCHAR CustomDataClass[0xc];
	/*002c*/ ULONG WwanGsmBandClass;
	/*0030*/ ULONG WwanCdmaBandClass;
	/*0034*/ WCHAR CustomBandClass[0x14];
	/*005c*/ ULONG WwanSmsCaps;
	/*0060*/ ULONG WwanControlCaps;
	/*0064*/ WCHAR DeviceId[0x12];
	/*0088*/ WCHAR Manufacturer[0x20];
	/*00c8*/ WCHAR Model[0x20];
	/*0108*/ WCHAR FirmwareInfo[0x20];
	/*0148*/ ULONG MaxActivatedContexts;
	/*014c*/ ULONG WwanAuthAlgoCaps;
	/*0150*/ _WWAN_LIST_HEADER CellularClassListHeader;
	/*0158*/
};

struct _WWAN_DEVICE_CAPS_EX {
	/*0000*/ _WWAN_DEVICE_TYPE WwanDeviceType;
	/*0004*/ _WWAN_CELLULAR_CLASS WwanCellularClass;
	/*0008*/ _WWAN_VOICE_CLASS WwanVoiceClass;
	/*000c*/ _WWAN_SIM_CLASS WwanSimClass;
	/*0010*/ ULONG WwanDataClass;
	/*0014*/ WCHAR CustomDataClass[0xc];
	/*002c*/ ULONG WwanGsmBandClass;
	/*0030*/ ULONG WwanCdmaBandClass;
	/*0034*/ WCHAR CustomBandClass[0x14];
	/*005c*/ ULONG WwanSmsCaps;
	/*0060*/ ULONG WwanControlCaps;
	/*0064*/ WCHAR DeviceId[0x12];
	/*0088*/ WCHAR Manufacturer[0x20];
	/*00c8*/ WCHAR Model[0x20];
	/*0108*/ WCHAR FirmwareInfo[0x20];
	/*0148*/ ULONG MaxActivatedContexts;
	/*014c*/ ULONG WwanAuthAlgoCaps;
	/*0150*/ ULONG ExecutorIndex;
	/*0154*/ ULONG WwanOptionalServiceCaps;
	/*0158*/ ULONG WwanSimClassBitMasks;
	/*015c*/ ULONG WwanWCDMABandClass;
	/*0160*/ USHORT WwanLTEBandClass[0x14];
	/*0188*/ USHORT WwanNRBandClass[0x14];
	/*01b0*/ ULONGLONG WwanMiscCaps;
	/*01b8*/ _WWAN_LIST_HEADER CellularClassListHeader;
	/*01c0*/
};

struct _WWAN_DEVICE_CAPS_EX_REV1 {
	/*0000*/ _WWAN_DEVICE_TYPE WwanDeviceType;
	/*0004*/ _WWAN_CELLULAR_CLASS WwanCellularClass;
	/*0008*/ _WWAN_VOICE_CLASS WwanVoiceClass;
	/*000c*/ _WWAN_SIM_CLASS WwanSimClass;
	/*0010*/ ULONG WwanDataClass;
	/*0014*/ WCHAR CustomDataClass[0xc];
	/*002c*/ ULONG WwanGsmBandClass;
	/*0030*/ ULONG WwanCdmaBandClass;
	/*0034*/ WCHAR CustomBandClass[0x14];
	/*005c*/ ULONG WwanSmsCaps;
	/*0060*/ ULONG WwanControlCaps;
	/*0064*/ WCHAR DeviceId[0x12];
	/*0088*/ WCHAR Manufacturer[0x20];
	/*00c8*/ WCHAR Model[0x20];
	/*0108*/ WCHAR FirmwareInfo[0x20];
	/*0148*/ ULONG MaxActivatedContexts;
	/*014c*/ ULONG WwanAuthAlgoCaps;
	/*0150*/ ULONG ExecutorIndex;
	/*0154*/ ULONG WwanOptionalServiceCaps;
	/*0158*/ _WWAN_LIST_HEADER CellularClassListHeader;
	/*0160*/
};

struct _WWAN_DEVICE_RESET_STATUS {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG WwanStatus;
	/*0008*/
};

struct _WWAN_DEVICE_SERVICE_COMMAND {
	/*0000*/ _GUID DeviceServiceGuid;
	/*0010*/ ULONG CommandID;
	/*0014*/ ULONG uDataSize;
	/*0018*/
};

struct _WWAN_DEVICE_SERVICE_COMMAND_NOTIFICATION {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG Status;
	/*0008*/ _GUID DeviceServiceGuid;
	/*0018*/ ULONG InformationOffset;
	/*001c*/ ULONG InformationLength;
	/*0020*/ WWAN_POINTER_64 sourceHandle;
	/*0028*/
};

struct _WWAN_DEVICE_SERVICE_DATA_NOTIFICATION {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG SessionId;
	/*0008*/ ULONG Status;
	/*000c*/ ULONG InformationOffset;
	/*0010*/ ULONG InformationLength;
	/*0014*/
};

struct _WWAN_DEVICE_SERVICE_ENTRY {
	/*0000*/ _GUID DeviceServiceGuid;
	/*0010*/ _WWAN_DEVICE_SERVICE_SESSION_CAPABILITY SessionCapability;
	/*0014*/ ULONG uMaxSessionInstances;
	/*0018*/
};

struct _WWAN_DEVICE_SERVICE_EVENT {
	/*0000*/ _GUID DeviceServiceGuid;
	/*0010*/ ULONG EventID;
	/*0014*/ ULONG uDataSize;
	/*0018*/
};

struct _WWAN_DEVICE_SERVICE_GENERIC_NOTIFICATION {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG Status;
	/*0008*/ ULONG InformationOffset;
	/*000c*/ ULONG InformationLength;
	/*0010*/ WWAN_POINTER_64 sourceHandle;
	/*0018*/
};

struct _WWAN_DEVICE_SERVICE_INFO {
	/*0000*/ _GUID DeviceServiceGuid;
	/*0010*/ INT DataWriteSupported;
	/*0014*/ INT DataReadSupported;
	/*0018*/ ULONG MaxDataSessionInstances;
	/*001c*/
};

struct _WWAN_DEVICE_SERVICE_RESPONSE {
	/*0000*/ _GUID DeviceServiceGuid;
	/*0010*/ ULONG ResponseID;
	/*0014*/ ULONG uDataSize;
	/*0018*/
};

struct _WWAN_DEVICE_SERVICE_SESSION {
	/*0000*/ _GUID DeviceServiceGuid;
	/*0010*/ _WWAN_DEVICE_SERVICE_SESSION_STATE State;
	/*0014*/ ULONG uSessionID;
	/*0018*/
};

enum _WWAN_DEVICE_SERVICE_SESSION_CAPABILITY {
	WwanDeviceServiceSessionNotSupported = 0x0,
	WwanDeviceServiceSessionWriteSupported = 0x1,
	WwanDeviceServiceSessionReadSupported = 0x2
};

struct _WWAN_DEVICE_SERVICE_SESSION_READ {
	/*0000*/ ULONG uSessionID;
	/*0004*/ ULONG uDataSize;
	/*0008*/
};

enum _WWAN_DEVICE_SERVICE_SESSION_STATE {
	WwanDeviceServiceSessionOpen = 0x1,
	WwanDeviceServiceSessionClosed = 0x2
};

struct _WWAN_DEVICE_SERVICE_SESSION_WRITE {
	/*0000*/ ULONG uSessionID;
	/*0004*/ ULONG uDataSize;
	/*0008*/
};

struct _WWAN_DEVICE_SERVICE_SUPPORTED_COMMANDS {
	/*0000*/ _GUID DeviceServiceGuid;
	/*0010*/ _WWAN_LIST_HEADER ListHeader;
	/*0018*/
};

struct _WWAN_DEVICE_SLOT_MAPPING_INFO {
	/*0000*/ _WWAN_LIST_HEADER SlotMapListHeader;
	/*0008*/
};

enum _WWAN_DEVICE_TYPE {
	WwanDeviceTypeUnknown = 0x0,
	WwanDeviceTypeEmbedded = 0x1,
	WwanDeviceTypeRemovable = 0x2,
	WwanDeviceTypeRemote = 0x3,
	WwanDeviceTypeMax = 0x4
};

struct _WWAN_DRIVER_CAPS {
	/*0000*/ ULONG ulMajorVersion;
	/*0004*/ ULONG ulMinorVersion;
	/*0008*/ ULONG ulDriverCaps;
	/*000c*/
};

enum _WWAN_DRX_PARAMS {
	WwanDRXUnspecified = 0x0,
	WwanDRXCycle32 = 0x1,
	WwanDRXCycle64 = 0x2,
	WwanDRXCycle128 = 0x3,
	WwanDRXCycle256 = 0x4,
	WwanDRXCycleMax = 0x5
};

struct _WWAN_DS_EXCEPTION_LIST {
	/*0000*/ ULONG dwNumDs;
	/*0004*/ _GUID DsGuid[0x1];
	/*0014*/
};

enum _WWAN_EMERGENCY_MODE {
	WwanEmergencyModeOff = 0x0,
	WwanEmergencyModeOn = 0x1,
	WwanEmergencyModeMax = 0x2
};

struct _WWAN_ENTERPRISEAPN_PARAMS_PAYLOAD {
	/*0000*/ WWAN_ENTERPRISEAPN_PARAMS_SETTING_CHOICE allowEndUserControlEnterpriseAPN;
	/*0004*/ WWAN_ENTERPRISEAPN_PARAMS_SETTING_CHOICE allowEndUserViewEnterpriseAPN;
	/*0008*/ WWAN_ENTERPRISEAPN_PARAMS_PROFILE_ACTION currentActionOnEnterpriseAPN;
	/*000c*/
};

struct _WWAN_GET_SLOT_INFO {
	/*0000*/ ULONG SlotIndex;
	/*0004*/
};

struct _WWAN_GET_VISIBLE_PROVIDERS {
	/*0000*/ ULONG Action;
	/*0004*/
};

struct _WWAN_GSM_NMR {
	/*0000*/ ULONG ElementCount;
	/*0004*/ UCHAR GSMNmr[0x1];
	/*0008*/
};

struct _WWAN_GSM_NMR_INFO {
	/*0000*/ ULONG ProviderIdOffset;
	/*0004*/ ULONG ProviderIdSize;
	/*0008*/ ULONG LocationAreaCode;
	/*000c*/ ULONG CellId;
	/*0010*/ ULONG ARFCN;
	/*0014*/ ULONG BaseStationId;
	/*0018*/ ULONG RxLevel;
	/*001c*/ UCHAR Data[0x1];
	/*0020*/
};

struct _WWAN_GSM_SERVING_CELL_INFO {
	/*0000*/ ULONG ProviderIdOffset;
	/*0004*/ ULONG ProviderIdSize;
	/*0008*/ ULONG LocationAreaCode;
	/*000c*/ ULONG CellId;
	/*0010*/ ULONG TimingAdvance;
	/*0014*/ ULONG ARFCN;
	/*0018*/ ULONG BaseStationId;
	/*001c*/ ULONG RxLevel;
	/*0020*/ UCHAR Data[0x1];
	/*0024*/
};

enum _WWAN_IMS_CAPABILITIES {
	WwanImsCapabilitiesNone = 0x0,
	WwanImsCapabilitiesVoice = 0x1,
	WwanImsCapabilitiesVideo = 0x2,
	WwanImsCapabilitiesEnhancedAddressBook = 0x4
};

struct _WWAN_IMS_VOICE_STATE {
	/*0000*/ _WWAN_IMS_VOICE_STATUS ImsVoiceStatus;
	/*0004*/
};

enum _WWAN_IMS_VOICE_STATUS {
	WwanImsVoiceStatusUnknown = 0x0,
	WwanImsVoiceStatusUnregistered = 0x1,
	WwanImsVoiceStatusRegistered = 0x2,
	WwanImsVoiceStatusMax = 0x3
};

struct _WWAN_INTERFACE_DEVICE_SERVICES_INFO {
	/*0000*/ ULONG SupportedDeviceServicesCount;
	/*0004*/ ULONG MaxCommandSize;
	/*0008*/ ULONG MaxDataSize;
	/*000c*/ ULONG MaxDataSessionCount;
	/*0010*/
};

struct _WWAN_IPADDRESS_ENTRY {
	/*0000*/ ULONG IsIpv6 : 01; // 0x00000001;
	/*0000*/ ULONG IsReported : 01; // 0x00000002;
	/*0004*/ _WWAN_IPV4_ADDRESS Ipv4;
	/*0004*/ _WWAN_IPV6_ADDRESS Ipv6;
	/*0018*/
};

struct _WWAN_IPV4_ADDRESS {
	/*0000*/ ULONG OnLinkPrefixLength;
	/*0004*/ UCHAR IPV4Address[0x4];
	/*0008*/
};

struct _WWAN_IPV6_ADDRESS {
	/*0000*/ ULONG OnLinkPrefixLength;
	/*0004*/ UCHAR IPV6Address[0x10];
	/*0014*/
};

struct _WWAN_IPV6_EHRPD_INFO {
	/*0000*/ ULONG reqId;
	/*0004*/ ULONG ResponseErrorCode;
	/*0008*/ INT fIpv6Enable;
	/*000c*/ WCHAR APNString[0x65];
	/*00d8*/
};

struct _WWAN_IP_ADDRESS_STATE {
	/*0000*/ WWAN_IP_CONFIGURATION_FLAGS IPv4Flags;
	/*0004*/ WWAN_IP_CONFIGURATION_FLAGS IPv6Flags;
	/*0008*/ ULONG IPv4MTU;
	/*000c*/ ULONG IPv6MTU;
	/*0010*/ _WWAN_IPADDRESS_ENTRY * IpTable;
	/*0018*/ ULONG IpCount;
	/*0020*/ _WWAN_IPADDRESS_ENTRY * GatewayTable;
	/*0028*/ ULONG GatewayCount;
	/*0030*/ _WWAN_IPADDRESS_ENTRY * DnsTable;
	/*0038*/ ULONG DnsCount;
	/*0040*/
};

enum _WWAN_IP_TYPE {
	WwanIPTypeDefault = 0x0,
	WwanIPTypeIPv4 = 0x1,
	WwanIPTypeIPv6 = 0x2,
	WwanIPTypeIpv4v6 = 0x3,
	WwanIPTypeXlat = 0x4,
	WwanSessionTypeEthernet = 0x5,
	WwanSessionTypeUnstructured = 0x6,
	WwanSessionTypeMax = 0x7
};

enum _WWAN_LADN_IND_REQUEST {
	WwanLADNInfoNotRequested = 0x0,
	WwanLADNInfoRequested = 0x1,
	WwanLADNInfoRequestMax = 0x2
};

struct _WWAN_LIST_HEADER {
	/*0000*/ _WWAN_STRUCT_TYPE ElementType;
	/*0004*/ ULONG ElementCount;
	/*0008*/
};

struct _WWAN_LOCATION_STATE_INFO {
	/*0000*/ _WWAN_LOCATION_TRIGGER_MODE Trigger;
	/*0004*/ ULONG DataClass;
	/*0008*/ ULONG AreaCode;
	/*000c*/ ULONG CellId;
	/*0010*/
};

enum _WWAN_LOCATION_TRIGGER_MODE {
	WwanLocationTriggerNone = 0x0,
	WwanLocationTriggerAreaCode = 0x1,
	WwanLocationTriggerAreaCellId = 0x2,
	WwanLocationTriggerMax = 0x3
};

struct _WWAN_LTE_ATTACH_CONFIG {
	/*0000*/ ULONG ElementCount;
	/*0004*/ _WWAN_CONTEXT_V2 LteContextArray[0x3];
	/*0ee0*/
};

struct _WWAN_LTE_ATTACH_STATUS {
	/*0000*/ _WWAN_CONTEXT_LTE_ATTACH_STATE LteAttachState;
	/*0004*/ _WWAN_IP_TYPE IPType;
	/*0008*/ _WWAN_CONTEXT basicInfo;
	/*04e4*/
};

struct _WWAN_LTE_MRL {
	/*0000*/ ULONG ElementCount;
	/*0004*/ UCHAR LTEMrl[0x1];
	/*0008*/
};

struct _WWAN_LTE_MRL_INFO {
	/*0000*/ ULONG ProviderIdOffset;
	/*0004*/ ULONG ProviderIdSize;
	/*0008*/ ULONG CellId;
	/*000c*/ ULONG EARFCN;
	/*0010*/ ULONG PhysicalCellId;
	/*0014*/ ULONG TAC;
	/*0018*/ ULONG RSRP;
	/*001c*/ ULONG RSRQ;
	/*0020*/ UCHAR Data[0x1];
	/*0024*/
};

struct _WWAN_LTE_SERVING_CELL_INFO {
	/*0000*/ ULONG ProviderIdOffset;
	/*0004*/ ULONG ProviderIdSize;
	/*0008*/ ULONG CellId;
	/*000c*/ ULONG EARFCN;
	/*0010*/ ULONG PhysicalCellId;
	/*0014*/ ULONG TAC;
	/*0018*/ ULONG RSRP;
	/*001c*/ ULONG RSRQ;
	/*0020*/ ULONG TimingAdvance;
	/*0024*/ UCHAR Data[0x1];
	/*0028*/
};

struct _WWAN_MANUAL_CONNECT_SESSION_INFO {
	/*0000*/ ULONG state;
	/*0004*/ ULONG requestId;
	/*0008*/ ULONG connectionId;
	/*000c*/
};

struct _WWAN_MBIM_VERSION {
	/*0000*/ USHORT MbimVersion;
	/*0002*/ USHORT MbimExtendedVersion;
	/*0004*/
};

enum _WWAN_MICO_IND {
	WwanRaaiTypeRaNotAllocated = 0x0,
	WwanRaaiTypeRaAllocated = 0x1,
	WwanRaaiTypeNotAvailable = 0xffffffff
};

enum _WWAN_MICO_MODE {
	WwanMicoModeDisabled = 0x0,
	WwanMicoModeEnabled = 0x1,
	WwanMicoModeMax = 0x2
};

struct _WWAN_MODEM_CONFIG_ID {
	/*0000*/ ULONG ConfigIdLen;
	/*0004*/ UCHAR ConfigId[0x20];
	/*0024*/
};

struct _WWAN_MODEM_CONFIG_INFO {
	/*0000*/ _WWAN_MODEM_CONFIG_MODE ConfigMode;
	/*0004*/ _WWAN_MODEM_CONFIG_STATE ConfigState;
	/*0008*/ _WWAN_MODEM_CONFIG_REASON ConfigReason;
	/*000c*/ _WWAN_MODEM_CONFIG_ID PreviousConfigID;
	/*0030*/ _WWAN_MODEM_CONFIG_ID CurrentConfigID;
	/*0054*/ ULONG IsCurrentConfigDefault;
	/*0058*/ _WWAN_LIST_HEADER NSSAIListHeader;
	/*0060*/
};

enum _WWAN_MODEM_CONFIG_MODE {
	WwanModemConfigModeUnknown = 0x0,
	WwanModemConfigModeModemCentric = 0x1,
	WwanModemConfigModeHostCentric = 0x2,
	WwanModemConfigModeMax = 0x3
};

enum _WWAN_MODEM_CONFIG_REASON {
	WwanModemConfigReasonNone = 0x0,
	WwanModemConfigReasonSIMDetected = 0x1,
	WwanModemConfigReasonNOSIM = 0x2,
	WwanModemConfigReasonIMSIReset = 0x3,
	WwanModemConfigReasonActivationFailure = 0x4,
	WwanModemConfigReasonConfigFileUpdate = 0x5,
	WwanModemConfigReasonModemReset = 0x6,
	WwanModemConfigReasonModemRecovery = 0x7,
	WwanModemConfigReasonMax = 0x8
};

enum _WWAN_MODEM_CONFIG_STATE {
	WwanModemConfigStateUnknown = 0x0,
	WwanModemConfigStatePending = 0x1,
	WwanModemConfigStateCompleted = 0x2,
	WwanModemConfigStateMax = 0x3
};

struct _WWAN_MODEM_LOGGING_CONFIG {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG MaxSegmentSize;
	/*0008*/ ULONG MaxFlushTime;
	/*000c*/ _WWAN_MODEM_LOGGING_LEVEL_CONFIG LevelConfig;
	/*0010*/
};

enum _WWAN_MODEM_LOGGING_LEVEL_CONFIG {
	WwanModemLoggingLevelProd = 0x0,
	WwanModemLoggingLevelLabVerbose = 0x1,
	WwanModemLoggingLevelLabMedium = 0x2,
	WwanModemLoggingLevelLabLow = 0x3,
	WwanModemLoggingLevelOem = 0x4,
	WwanModemLoggingLevelMax = 0x5
};

enum _WWAN_MODEM_RESET_STATE {
	WwanModemResetStateRecovered = 0x0,
	WwanModemResetStateFailed = 0x1
};

enum _WWAN_MODEM_RESET_TYPE {
	WwanModemResetTypeNormal = 0x0,
	WwanModemResetTypeAbrupt = 0x1
};

enum _WWAN_MSG_STATUS {
	WwanMsgStatusNew = 0x0,
	WwanMsgStatusOld = 0x1,
	WwanMsgStatusDraft = 0x2,
	WwanMsgStatusSent = 0x3,
	WwanMsgStatusMax = 0x4
};

struct _WWAN_MULTICARRIER_DS_CAPABILITIES {
	/*0000*/ ULONG dwCapabilities;
	/*0004*/
};

struct _WWAN_MULTICARRIER_LOCATION_INFO {
	/*0000*/ ULONG CountryCode;
	/*0004*/
};

enum _WWAN_MULTIVARIANT_RUNNING_STATE {
	WwanMvNotStarted = 0x0,
	WwanMvRunning = 0x1,
	WwanMvComplete = 0x2,
	WwanMvRunningStateMax = 0x3
};

struct _WWAN_MULTI_SIM_INFO {
	/*0000*/ ULONG dwNumberOfSIMSlots;
	/*0004*/ _WWAN_UICCSLOT_STATE uiccSlotState[0x1];
	/*0008*/
};

struct _WWAN_MULTI_SIM_SLOT_MAPPING_STATUS {
	/*0000*/ ULONG status;
	/*0004*/ ULONG requestID;
	/*0008*/ ULONG uiccSlotID;
	/*000c*/
};

struct _WWAN_NETWORK_BLACKLIST_INFO {
	/*0000*/ _WWAN_NETWORK_BLACKLIST_STATE BlacklistState;
	/*0004*/ _WWAN_LIST_HEADER BlacklistProviderList;
	/*000c*/
};

struct _WWAN_NETWORK_BLACKLIST_PROVIDER {
	/*0000*/ ULONG MCC;
	/*0004*/ ULONG MNC;
	/*0008*/ _WWAN_NETWORK_BLACKLIST_TYPE NetworkBlacklistType;
	/*000c*/
};

enum _WWAN_NETWORK_BLACKLIST_STATE {
	WwanNetworkBlacklistStateNotActuated = 0x0,
	WwanNetworkBlacklistSIMProviderActuated = 0x1,
	WwanNetworkBlacklistNetworkProviderActuated = 0x2,
	WwanNetworkBlacklistStateMaximum = 0x3
};

enum _WWAN_NETWORK_BLACKLIST_TYPE {
	WwanNetworkBlacklistTypeSIM = 0x0,
	WwanNetworkBlacklistTypeNetwork = 0x1,
	WwanNetworkBlacklistTypeMaximum = 0x2
};

struct _WWAN_NETWORK_IDLE_HINT {
	/*0000*/ ULONG IsEnabled;
	/*0004*/
};

struct _WWAN_NETWORK_ISOLATION {
	/*0000*/ WCHAR RuleGroupId[0x66];
	/*00cc*/ _WWAN_NETWORK_ISOLATION_STATE IsolationSettingState;
	/*00d0*/ ULONG DataSizeInBytes;
	/*00d4*/ ULONG Ipv4AllowedRangeCount;
	/*00d8*/ ULONG Ipv6AllowedRangeCount;
	/*00dc*/ ULONG AllowedServicesCount;
	/*00e0*/ ULONG AllowedProcessesCount;
	/*00e4*/ ULONG AllowedApplicationsCount;
	/*00e8*/ UCHAR Data[0x1];
	/*00ec*/
};

enum _WWAN_NETWORK_ISOLATION_STATE {
	WwanNetworkIsolationSettingStateDisabled = 0x0,
	WwanNetworkIsolationSettingStateEnabled = 0x1
};

struct _WWAN_NETWORK_LTE_ATTACH_INFO {
	/*0000*/ ULONG version;
	/*0004*/ INT fLTEAttached;
	/*0008*/ INT fNetworkLTEAttachInfo;
	/*000c*/ WCHAR APNString[0x65];
	/*00d8*/ _WWAN_IP_TYPE IpType;
	/*00dc*/
};

struct _WWAN_NETWORK_PARAMS_INFO {
	/*0000*/ _WWAN_MICO_IND CurrentMicoIndication;
	/*0004*/ _WWAN_DRX_PARAMS CurrentDRXParams;
	/*0008*/
};

struct _WWAN_NITZ_INFO {
	/*0000*/ ULONG Year;
	/*0004*/ ULONG Month;
	/*0008*/ ULONG Day;
	/*000c*/ ULONG Hour;
	/*0010*/ ULONG Minute;
	/*0014*/ ULONG Second;
	/*0018*/ ULONG TimeZoneOffsetMinutes;
	/*001c*/ ULONG DaylightSavingTimeOffsetMinutes;
	/*0020*/ ULONG DataClasses;
	/*0024*/
};

struct _WWAN_OPERATOR_SERVICE_ENABLEMENT {
	/*0000*/ _GUID guidService;
	/*0010*/ ULONG enablement;
	/*0014*/
};

struct _WWAN_PACKET_SERVICE {
	/*0000*/ ULONG uNwError;
	/*0004*/ _WWAN_PACKET_SERVICE_STATE PacketServiceState;
	/*0008*/ ULONG AvailableDataClass;
	/*000c*/ ULONG CurrentDataClass;
	/*0010*/ _WWAN_5G_FREQUENCY_RANGE FrequencyRange;
	/*0014*/ ULONG Sub5GCDataClass;
	/*0018*/ _WWAN_SINGLE_TAI CurrentTai;
	/*0020*/
};

enum _WWAN_PACKET_SERVICE_ACTION {
	WwanPacketServiceActionAttach = 0x0,
	WwanPacketServiceActionDetach = 0x1
};

enum _WWAN_PACKET_SERVICE_STATE {
	WwanPacketServiceStateUnknown = 0x0,
	WwanPacketServiceStateAttaching = 0x1,
	WwanPacketServiceStateAttached = 0x2,
	WwanPacketServiceStateDetaching = 0x3,
	WwanPacketServiceStateDetached = 0x4
};

enum _WWAN_PCO_TYPE {
	WwanPcoTypeComplete = 0x0,
	WwanPcoTypePartial = 0x1,
	WwanPcoTypeMax = 0x2
};

struct _WWAN_PCO_VALUE {
	/*0000*/ ULONG Size;
	/*0004*/ _WWAN_PCO_TYPE Type;
	/*0008*/ UCHAR PcoData[0x100];
	/*0108*/
};

struct _WWAN_PIN_ACTION {
	/*0000*/ _WWAN_PIN_TYPE PinType;
	/*0004*/ _WWAN_PIN_OPERATION PinOperation;
	/*0008*/ WCHAR Pin[0x11];
	/*002a*/ WCHAR NewPin[0x11];
	/*004c*/ UCHAR RequestPinOperationPrompt;
	/*0050*/
};

struct _WWAN_PIN_ACTION_EX2 {
	/*0000*/ _WWAN_PIN_TYPE PinType;
	/*0004*/ _WWAN_PIN_OPERATION PinOperation;
	/*0008*/ WCHAR Pin[0x11];
	/*002a*/ WCHAR NewPin[0x11];
	/*004c*/ UCHAR AppIdLength;
	/*004d*/ UCHAR AppId[0x20];
	/*0070*/
};

struct _WWAN_PIN_ACTION_RESULT {
	/*0000*/ ULONG status;
	/*0004*/ ULONG executorId;
	/*0008*/ _WWAN_PIN_OPERATION pinOperation;
	/*000c*/ _WWAN_PIN_INFO pinInfo;
	/*0018*/
};

struct _WWAN_PIN_APP {
	/*0000*/ ULONG Version;
	/*0004*/ UCHAR AppIdLength;
	/*0005*/ UCHAR AppId[0x20];
	/*0028*/
};

struct _WWAN_PIN_DESC {
	/*0000*/ _WWAN_PIN_MODE PinMode;
	/*0004*/ _WWAN_PIN_FORMAT PinFormat;
	/*0008*/ ULONG PinLengthMin;
	/*000c*/ ULONG PinLengthMax;
	/*0010*/
};

enum _WWAN_PIN_FORMAT {
	WwanPinFormatUnknown = 0x0,
	WwanPinFormatNumeric = 0x1,
	WwanPinFormatAlphaNumeric = 0x2,
	WwanPinFormatMax = 0x3
};

struct _WWAN_PIN_INFO {
	/*0000*/ _WWAN_PIN_TYPE PinType;
	/*0004*/ _WWAN_PIN_STATE PinState;
	/*0008*/ ULONG AttemptsRemaining;
	/*000c*/
};

struct _WWAN_PIN_INFO_RESULT {
	/*0000*/ ULONG executorId;
	/*0004*/ _WWAN_PIN_INFO pinInfo;
	/*0010*/ ULONG uStatus;
	/*0014*/
};

struct _WWAN_PIN_LIST {
	/*0000*/ _WWAN_PIN_DESC WwanPinDescPin1;
	/*0010*/ _WWAN_PIN_DESC WwanPinDescPin2;
	/*0020*/ _WWAN_PIN_DESC WwanPinDescDeviceSimPin;
	/*0030*/ _WWAN_PIN_DESC WwanPinDescDeviceFirstSimPin;
	/*0040*/ _WWAN_PIN_DESC WwanPinDescNetworkPin;
	/*0050*/ _WWAN_PIN_DESC WwanPinDescNetworkSubsetPin;
	/*0060*/ _WWAN_PIN_DESC WwanPinDescSvcProviderPin;
	/*0070*/ _WWAN_PIN_DESC WwanPinDescCorporatePin;
	/*0080*/ _WWAN_PIN_DESC WwanPinDescSubsidyLock;
	/*0090*/ _WWAN_PIN_DESC WwanPinDescCustom;
	/*00a0*/
};

enum _WWAN_PIN_MODE {
	WwanPinModeNotSupported = 0x0,
	WwanPinModeEnabled = 0x1,
	WwanPinModeDisabled = 0x2,
	WwanPinModeMax = 0x3
};

enum _WWAN_PIN_OPERATION {
	WwanPinOperationEnter = 0x0,
	WwanPinOperationEnable = 0x1,
	WwanPinOperationDisable = 0x2,
	WwanPinOperationChange = 0x3,
	WwanPinOperationMax = 0x4
};

enum _WWAN_PIN_STATE {
	WwanPinStateNone = 0x0,
	WwanPinStateEnter = 0x1,
	WwanPinStateMax = 0x2
};

enum _WWAN_PIN_TYPE {
	WwanPinTypeNone = 0x0,
	WwanPinTypeCustom = 0x1,
	WwanPinTypePin1 = 0x2,
	WwanPinTypePin2 = 0x3,
	WwanPinTypeDeviceSimPin = 0x4,
	WwanPinTypeDeviceFirstSimPin = 0x5,
	WwanPinTypeNetworkPin = 0x6,
	WwanPinTypeNetworkSubsetPin = 0x7,
	WwanPinTypeSvcProviderPin = 0x8,
	WwanPinTypeCorporatePin = 0x9,
	WwanPinTypeSubsidyLock = 0xa,
	WwanPinTypePuk1 = 0xb,
	WwanPinTypePuk2 = 0xc,
	WwanPinTypeDeviceFirstSimPuk = 0xd,
	WwanPinTypeNetworkPuk = 0xe,
	WwanPinTypeNetworkSubsetPuk = 0xf,
	WwanPinTypeSvcProviderPuk = 0x10,
	WwanPinTypeCorporatePuk = 0x11,
	WwanPinTypeNev = 0x12,
	WwanPinTypeAdm = 0x13,
	WwanPinTypeMax = 0x14
};

struct _WWAN_PIN_USERINPUT {
	/*0000*/ _WWAN_PIN_TYPE PinType;
	/*0004*/ _WWAN_PIN_FORMAT PinFormat;
	/*0008*/ WCHAR Pin[0x11];
	/*002c*/
};

struct _WWAN_PROFILE_DATA {
	/*0000*/ WCHAR oldName[0x100];
	/*0200*/ WWAN_PROFILE profile;
	/*1a58*/ WCHAR ConnectionProfileID[0x28];
	/*1aa8*/ WWAN_API_INFO apiInfo;
	/*1ad0*/
};

struct _WWAN_PROVIDER {
	/*0000*/ WCHAR ProviderId[0x7];
	/*0010*/ ULONG ProviderState;
	/*0014*/ WCHAR ProviderName[0x15];
	/*0040*/ ULONG WwanDataClass;
	/*0044*/
};

struct _WWAN_PROVIDER2 {
	/*0000*/ _WWAN_PROVIDER Provider;
	/*0044*/ _WWAN_CELLULAR_CLASS WwanCellularClass;
	/*0048*/ ULONG Rssi;
	/*004c*/ ULONG ErrorRate;
	/*0050*/
};

enum _WWAN_PSMEDIA_PREFERENCE {
	WwanPsMediaPreferenceNone = 0x0,
	WwanPsMediaPreferenceCellularOnly = 0x1,
	WwanPsMediaPreferenceCellularPreferred = 0x2,
	WwanPsMediaPreferenceWiFiOnly = 0x3,
	WwanPsMediaPreferenceWiFiPreferred = 0x4,
	WwanPsMediaPreferenceMax = 0x5
};

struct _WWAN_PS_MEDIA_CONFIG {
	/*0000*/ ULONG ServicesBitMap;
	/*0004*/ _WWAN_PSMEDIA_PREFERENCE MediaPreference;
	/*0008*/ _WWAN_CONFIGURATION_SOURCE MediaPreferenceSource;
	/*000c*/
};

struct _WWAN_PS_MEDIA_PREF {
	/*0000*/ ULONG totalSize;
	/*0004*/ ULONG cItems;
	/*0008*/ _WWAN_PS_MEDIA_CONFIG items[0x1];
	/*0014*/
};

struct _WWAN_PS_MEDIA_PREF_INFO {
	/*0000*/ ULONG dwErrCode;
	/*0004*/ ULONG requestID;
	/*0008*/ ULONG cItems;
	/*000c*/ _WWAN_PS_MEDIA_CONFIG items[0x1];
	/*0018*/
};

struct _WWAN_PS_MEDIA_PREF_SET_RESPONSE_INFO {
	/*0000*/ ULONG dwErrCode;
	/*0004*/ ULONG requestID;
	/*0008*/
};

enum _WWAN_PS_SERVICE_BIT {
	WWAN_PS_SERVICE_IMS_SMS = 0x1,
	WWAN_PS_SERVICE_IMS_VOICE = 0x2,
	WWAN_PS_SERVICE_IMS_VIDEO = 0x4,
	WWAN_PS_SERVICE_IMS_CUSTOM = 0x8,
	WWAN_PS_SERVICE_IMS_SUPSVC = 0x10,
	WWAN_PS_SERVICE_IMS_RCS = 0x20,
	WWAN_PS_SERVICE_IMS_USSD = 0x40,
	WWAN_PS_SERVICE_IMS_E_VOICE = 0x80,
	WWAN_PS_SERVICE_MMS = 0x10000,
	WWAN_PS_SERVICE_SUPL = 0x20000,
	WWAN_PS_SERVICE_BIP = 0x40000
};

struct _WWAN_QUERY_NETWORK_PARAMS {
	/*0000*/ USHORT NetworkConfigurationsNeeded;
	/*0002*/ USHORT UEPoliciesNeeded;
	/*0004*/
};

enum _WWAN_RADIO {
	WwanRadioOff = 0x0,
	WwanRadioOn = 0x1
};

struct _WWAN_RADIO_INFO {
	/*0000*/ _WWAN_RADIO_MODE mode;
	/*0004*/
};

struct _WWAN_RADIO_INFO_LIST {
	/*0000*/ ULONG dwTotalInstances;
	/*0004*/ ULONG dwAvailableInstances;
	/*0008*/ _WWAN_RADIO_INFO * pInstanceList;
	/*0010*/
};

enum _WWAN_RADIO_MODE {
	WWAN_RADIO_MODE_UNKNOWN = 0x0,
	WWAN_RADIO_MODE_SINGLE = 0x1,
	WWAN_RADIO_MODE_XOR = 0x2,
	WWAN_RADIO_MODE_SCANWHILE = 0x4
};

struct _WWAN_RADIO_STATE {
	/*0000*/ _WWAN_RADIO HwRadioState;
	/*0004*/ _WWAN_RADIO SwRadioState;
	/*0008*/
};

struct _WWAN_READY_INFO {
	/*0000*/ _WWAN_READY_STATE ReadyState;
	/*0004*/ _WWAN_EMERGENCY_MODE EmergencyMode;
	/*0008*/ WCHAR SubscriberId[0x10];
	/*0028*/ WCHAR SimIccId[0x15];
	/*0052*/ UCHAR CdmaShortMsgSize;
	/*0054*/ ULONG StatusFlags;
	/*0058*/ _WWAN_LIST_HEADER TNListHeader;
	/*0060*/
};

struct _WWAN_READY_INFO_REV1 {
	/*0000*/ _WWAN_READY_STATE ReadyState;
	/*0004*/ _WWAN_EMERGENCY_MODE EmergencyMode;
	/*0008*/ WCHAR SubscriberId[0x10];
	/*0028*/ WCHAR SimIccId[0x15];
	/*0052*/ UCHAR CdmaShortMsgSize;
	/*0054*/ _WWAN_LIST_HEADER TNListHeader;
	/*005c*/
};

enum _WWAN_READY_STATE {
	WwanReadyStateOff = 0x0,
	WwanReadyStateInitialized = 0x1,
	WwanReadyStateSimNotInserted = 0x2,
	WwanReadyStateBadSim = 0x3,
	WwanReadyStateFailure = 0x4,
	WwanReadyStateNotActivated = 0x5,
	WwanReadyStateDeviceLocked = 0x6,
	WwanReadyStateNoEsimProfile = 0x7,
	WwanReadyStateMax = 0x8
};

enum _WWAN_REGISTER_ACTION {
	WwanRegisterActionAutomatic = 0x0,
	WwanRegisterActionManual = 0x1,
	WwanRegisterActionMax = 0x2
};

enum _WWAN_REGISTER_MODE {
	WwanRegisterModeUnknown = 0x0,
	WwanRegisterModeAutomatic = 0x1,
	WwanRegisterModeManual = 0x2,
	WwanRegisterModeMax = 0x3
};

struct _WWAN_REGISTER_PARAMS_INFO {
	/*0000*/ _WWAN_MICO_MODE MicoMode;
	/*0004*/ _WWAN_DRX_PARAMS DRXParam;
	/*0008*/ _WWAN_LADN_IND_REQUEST LADNInfo;
	/*000c*/ _WWAN_LIST_HEADER PreConfiguredNSSAIListHeader;
	/*0014*/
};

enum _WWAN_REGISTER_STATE {
	WwanRegisterStateUnknown = 0x0,
	WwanRegisterStateDeregistered = 0x1,
	WwanRegisterStateSearching = 0x2,
	WwanRegisterStateHome = 0x3,
	WwanRegisterStateRoaming = 0x4,
	WwanRegisterStatePartner = 0x5,
	WwanRegisterStateDenied = 0x6,
	WwanRegisterStateMax = 0x7
};

enum _WWAN_REGISTRATION_CDMA_ROAM_MODE {
	WwanRegistrationCdmaRoamModeAutomatic = 0x0,
	WwanRegistrationCdmaRoamModeHomeOnly = 0x1
};

struct _WWAN_REGISTRATION_STATE {
	/*0000*/ ULONG uNwError;
	/*0004*/ _WWAN_REGISTER_STATE RegisterState;
	/*0008*/ _WWAN_REGISTER_MODE RegisterMode;
	/*000c*/ WCHAR ProviderId[0x7];
	/*001a*/ WCHAR ProviderName[0x15];
	/*0044*/ WCHAR RoamingText[0x40];
	/*00c4*/ ULONG WwanRegFlags;
	/*00c8*/ _WWAN_CELLULAR_CLASS CurrentCellularClass;
	/*00cc*/ ULONG PreferredDataClasses;
	/*00d0*/
};

struct _WWAN_REGISTRATION_STATE_EX {
	/*0000*/ ULONG uNwError;
	/*0004*/ _WWAN_REGISTER_STATE RegisterState;
	/*0008*/ _WWAN_REGISTER_MODE RegisterMode;
	/*000c*/ WCHAR ProviderId[0x7];
	/*001a*/ WCHAR ProviderName[0x15];
	/*0044*/ WCHAR RoamingText[0x40];
	/*00c4*/ ULONG WwanRegFlags;
	/*00c8*/ _WWAN_CELLULAR_CLASS CurrentCellularClass;
	/*00cc*/ ULONG AvailableDataClasses;
	/*00d0*/ ULONG VoiceSupport;
	/*00d4*/ ULONG CurrentRATClass;
	/*00d8*/
};

struct _WWAN_REGISTRATION_STATE_INFOS {
	/*0000*/ _WWAN_LIST_HEADER RegistrationStateListHeader;
	/*0008*/
};

enum _WWAN_REGISTRATION_VOICE_CLASS {
	WwanRegistrationVoiceClassVoiceCentric = 0x0,
	WwanRegistrationVoiceClassDataCentric = 0x1
};

enum _WWAN_REGISTRATION_VOICE_DOMAIN_PREFERENCE {
	WwanRegistrationVoiceDomainPreferenceCsOnly = 0x0,
	WwanRegistrationVoiceDomainPreferenceCsPreferred = 0x1,
	WwanRegistrationVoiceDomainPreferenceImsPreferred = 0x2,
	WwanRegistrationVoiceDomainPreferenceImsOnly = 0x3
};

struct _WWAN_REJECTED_SNSSAI {
	/*0000*/ USHORT CauseCode;
	/*0002*/ USHORT SliceServiceType;
	/*0004*/ UINT SliceDifferentiator;
	/*0008*/
};

enum _WWAN_ROUTE_SELECTION_PURPOSE {
	WwanRouteSelectionPurposeDefault = 0x0,
	WwanRouteSelectionPurposePurchase = 0x1,
	WwanRouteSelectionPurposeMax = 0x2
};

enum _WWAN_SAR_BACKOFF_STATE {
	WwanSarBackoffStatusDisabled = 0x0,
	WwanSarBackoffStatusEnabled = 0x1
};

struct _WWAN_SAR_CONFIG_INDICES {
	/*0000*/ ULONG SarAntennaIndex;
	/*0004*/ ULONG SarBackoffIndex;
	/*0008*/
};

struct _WWAN_SAR_CONFIG_INFO {
	/*0000*/ _WWAN_SAR_CONTROL_MODE SarMode;
	/*0004*/ _WWAN_SAR_BACKOFF_STATE SarBackoffStatus;
	/*0008*/ _WWAN_SAR_WIFI_HARDWARE_INTEGRATION SarWifiIntegration;
	/*000c*/ _WWAN_LIST_HEADER SarConfigIndexListHeader;
	/*0014*/
};

struct _WWAN_SAR_CONFIG_RESPONSE_INFO {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG WwanStatus;
	/*0008*/ _WWAN_SAR_CONFIG_INFO SarConfigInfo;
	/*001c*/
};

enum _WWAN_SAR_CONTROL_MODE {
	WwanSarControlModeDevice = 0x0,
	WwanSarControlModeOS = 0x1
};

enum _WWAN_SAR_TRANSMISSION_STATUS {
	WwanTransmissionStateInactive = 0x0,
	WwanTransmissionStateActive = 0x1
};

struct _WWAN_SAR_TRANSMISSION_STATUS_INFO {
	/*0000*/ _WWAN_SAR_TRANSMISSION_STATUS_NOTIFICATION_STATE ChannelNotification;
	/*0004*/ _WWAN_SAR_TRANSMISSION_STATUS TransmissionStatus;
	/*0008*/ ULONG HysteresisTimer;
	/*000c*/
};

enum _WWAN_SAR_TRANSMISSION_STATUS_NOTIFICATION_STATE {
	WwanTransmissionNotificationDisabled = 0x0,
	WwanTransmissionNotificationEnabled = 0x1
};

struct _WWAN_SAR_TRANSMISSION_STATUS_RESPONSE_INFO {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG WwanStatus;
	/*0008*/ _WWAN_SAR_TRANSMISSION_STATUS_INFO SarTransmissionStatusInfo;
	/*0014*/
};

enum _WWAN_SAR_WIFI_HARDWARE_INTEGRATION {
	WwanSarWifiHardwareNotIntegrated = 0x0,
	WwanSarWifiHardwareIntegrated = 0x1
};

enum _WWAN_SECURABLE_OBJECT {
	wwan_puk = 0x0,
	wwan_security = 0x1,
	wwan_secobj_max = 0x2
};

struct _WWAN_SERVICE_ACTIVATION {
	/*0000*/ ULONG uVendorSpecificBufferSize;
	/*0004*/
};

struct _WWAN_SERVICE_ACTIVATION_STATUS {
	/*0000*/ ULONG uNwError;
	/*0004*/ ULONG uVendorSpecificBufferSize;
	/*0008*/
};

struct _WWAN_SET_CONTEXT {
	/*0000*/ ULONG ContextId;
	/*0004*/ _WWAN_CONTEXT_TYPE ContextType;
	/*0008*/ WCHAR AccessString[0x65];
	/*00d2*/ WCHAR UserName[0x100];
	/*02d2*/ WCHAR Password[0x100];
	/*04d4*/ _WWAN_COMPRESSION Compression;
	/*04d8*/ _WWAN_AUTH_PROTOCOL AuthType;
	/*04dc*/ WCHAR ProviderId[0x7];
	/*04ec*/
};

struct _WWAN_SET_CONTEXT_STATE {
	/*0000*/ ULONG ConnectionId;
	/*0004*/ _WWAN_ACTIVATION_COMMAND ActivationCommand;
	/*0008*/ WCHAR AccessString[0x65];
	/*00d2*/ WCHAR UserName[0x100];
	/*02d2*/ WCHAR Password[0x100];
	/*04d4*/ _WWAN_COMPRESSION Compression;
	/*04d8*/ _WWAN_AUTH_PROTOCOL AuthType;
	/*04dc*/ _WWAN_IP_TYPE IPType;
	/*04e0*/ _WWAN_PSMEDIA_PREFERENCE MediaPreference;
	/*04e4*/ _WWAN_CONFIGURATION_SOURCE ConnectionMediaSource;
	/*04e8*/
};

struct _WWAN_SET_CONTEXT_V2 {
	/*0000*/ _WWAN_SET_CONTEXT basicInfo;
	/*04ec*/ _WWAN_CONTEXT_OPERATIONS Operation;
	/*04f0*/ _WWAN_IP_TYPE IPType;
	/*04f4*/ _WWAN_CONTEXT_ENABLE Enable;
	/*04f8*/ _WWAN_CONTEXT_ROAMING_CONTROL Roaming;
	/*04fc*/ _WWAN_CONTEXT_MEDIA_TYPE MediaType;
	/*0500*/ _WWAN_CONFIGURATION_SOURCE Source;
	/*0504*/ INT Reserved;
	/*0508*/
};

struct _WWAN_SET_IMS_VOICE_STATE {
	/*0000*/ _WWAN_IMS_VOICE_STATUS ImsVoiceStatus;
	/*0004*/
};

struct _WWAN_SET_LOCATION_STATE {
	/*0000*/ _WWAN_LOCATION_TRIGGER_MODE Trigger;
	/*0004*/
};

struct _WWAN_SET_LTE_ATTACH {
	/*0000*/ _WWAN_SET_CONTEXT_V2 SetContextArray[0x3];
	/*0f18*/
};

struct _WWAN_SET_REGISTER_PARAMS {
	/*0000*/ _WWAN_MICO_MODE MicoMode;
	/*0004*/ _WWAN_DRX_PARAMS DRXParam;
	/*0008*/ _WWAN_LADN_IND_REQUEST LADNInfo;
	/*000c*/ _WWAN_DEFAULT_PDU_SESSION_HINT DefaultPDUSessionHint;
	/*0010*/ UINT ReRegisterIfNeeded;
	/*0014*/ _WWAN_LIST_HEADER PreConfiguredNSSAIListHeader;
	/*001c*/
};

struct _WWAN_SET_REGISTER_STATE {
	/*0000*/ WCHAR ProviderId[0x7];
	/*0010*/ _WWAN_REGISTER_ACTION RegisterAction;
	/*0014*/ ULONG WwanDataClass;
	/*0018*/
};

struct _WWAN_SET_REGISTER_STATE_EX {
	/*0000*/ WCHAR ProviderId[0x7];
	/*0010*/ _WWAN_REGISTER_ACTION RegisterAction;
	/*0014*/ ULONG WwanDataClass;
	/*0018*/ _WWAN_REGISTRATION_VOICE_CLASS WwanVoiceClass;
	/*001c*/ _WWAN_REGISTRATION_VOICE_DOMAIN_PREFERENCE WwanVoiceDomain;
	/*0020*/ _WWAN_REGISTRATION_CDMA_ROAM_MODE WwanCdmaRoamMode;
	/*0024*/ _WWAN_LIST_HEADER AcquisitionOrderListHeader;
	/*002c*/
};

struct _WWAN_SET_SAR_CONFIG {
	/*0000*/ _WWAN_SAR_CONTROL_MODE SarMode;
	/*0004*/ _WWAN_SAR_BACKOFF_STATE SarBackoffStatus;
	/*0008*/ _WWAN_LIST_HEADER SarConfigIndexListHeader;
	/*0010*/
};

struct _WWAN_SET_SAR_TRANSMISSION_STATUS {
	/*0000*/ _WWAN_SAR_TRANSMISSION_STATUS_NOTIFICATION_STATE ChannelNotification;
	/*0004*/ ULONG HysteresisTimer;
	/*0008*/
};

struct _WWAN_SET_SIGNAL_INDICATION {
	/*0000*/ ULONG RssiInterval;
	/*0004*/ ULONG RssiThreshold;
	/*0008*/
};

struct _WWAN_SET_SIGNAL_INDICATION_EX {
	/*0000*/ ULONG RssiInterval;
	/*0004*/ ULONG RssiThreshold;
	/*0008*/ ULONG ErrorRateThreshold;
	/*000c*/ ULONG SnrThreshold;
	/*0010*/
};

struct _WWAN_SET_SMS_CONFIGURATION {
	/*0000*/ CHAR ScAddress[0x10];
	/*0010*/ _WWAN_SMS_FORMAT SmsFormat;
	/*0014*/
};

struct _WWAN_SET_UICC_APDU {
	/*0000*/ ULONG Channel;
	/*0004*/ _WWAN_UICC_SECURE_MESSAGING SecureMessaging;
	/*0008*/ _WWAN_UICC_CLASS_BYTE_TYPE Type;
	/*000c*/ ULONG CommandLength;
	/*0010*/ UCHAR Command[0x1];
	/*0014*/
};

struct _WWAN_SET_UICC_CLOSE_CHANNEL {
	/*0000*/ ULONG Channel;
	/*0004*/ ULONG ChannelGroup;
	/*0008*/ ULONG SelectP2Arg;
	/*000c*/
};

struct _WWAN_SET_UICC_OPEN_CHANNEL {
	/*0000*/ ULONG AppIdLength;
	/*0004*/ UCHAR AppId[0x20];
	/*0024*/ ULONG SelectP2Arg;
	/*0028*/ ULONG ChannelGroup;
	/*002c*/
};

struct _WWAN_SET_UICC_RESET {
	/*0000*/ _WWAN_UICC_PASSTHROUGH_ACTION PassThroughAction;
	/*0004*/
};

struct _WWAN_SIGNAL_STATE {
	/*0000*/ ULONG Rssi;
	/*0004*/ ULONG ErrorRate;
	/*0008*/ ULONG RssiInterval;
	/*000c*/ ULONG RssiThreshold;
	/*0010*/ _WWAN_LIST_HEADER SignalStateListHeader;
	/*0018*/
};

struct _WWAN_SIGNAL_STATE_EX {
	/*0000*/ ULONG Rssi;
	/*0004*/ ULONG ErrorRate;
	/*0008*/ ULONG RssiInterval;
	/*000c*/ ULONG RssiThreshold;
	/*0010*/ ULONG ErrorRateThreshold;
	/*0014*/ ULONG Snr;
	/*0018*/ ULONG SnrThreshold;
	/*001c*/ ULONG DataClass;
	/*0020*/
};

struct _WWAN_SIGNAL_STATE_EXT {
	/*0000*/ ULONG RSRP;
	/*0004*/ ULONG RSRPThreshold;
	/*0008*/ ULONG SNR;
	/*000c*/ ULONG SNRThreshold;
	/*0010*/ ULONG DataClass;
	/*0014*/
};

struct _WWAN_SIGNAL_STATE_INFOS {
	/*0000*/ _WWAN_LIST_HEADER SignalStateListHeader;
	/*0008*/
};

enum _WWAN_SIM_CLASS {
	WwanSimClassUnknown = 0x0,
	WwanSimClassSimLogical = 0x1,
	WwanSimClassSimRemovable = 0x2,
	WwanSimClassSimRemote = 0x3,
	WwanSimClassMax = 0x4
};

struct _WWAN_SINGLE_NSSAI {
	/*0000*/ UINT Bitmasks;
	/*0004*/ USHORT SliceServiceType;
	/*0006*/ USHORT MappedSliceServiceType;
	/*0008*/ UINT SliceDifferentiator;
	/*000c*/ UINT MappedSliceDifferentiator;
	/*0010*/
};

struct _WWAN_SINGLE_TAI {
	/*0000*/ USHORT Mcc;
	/*0002*/ USHORT Mnc;
	/*0004*/ UINT Tac;
	/*0008*/
};

struct _WWAN_SLOT_INFO {
	/*0000*/ ULONG SlotIndex;
	/*0004*/ _WWAN_UICCSLOT_STATE State;
	/*0008*/
};

enum _WWAN_SMS_CDMA_ENCODING {
	WwanSmsCdmaEncodingOctet = 0x0,
	WwanSmsCdmaEncodingEpm = 0x1,
	WwanSmsCdmaEncoding7BitAscii = 0x2,
	WwanSmsCdmaEncodingIa5 = 0x3,
	WwanSmsCdmaEncodingUnicode = 0x4,
	WwanSmsCdmaEncodingShiftJis = 0x5,
	WwanSmsCdmaEncodingKorean = 0x6,
	WwanSmsCdmaEncodingLatinHebrew = 0x7,
	WwanSmsCdmaEncodingLatin = 0x8,
	WwanSmsCdmaEncodingGsm7Bit = 0x9,
	WwanSmsCdmaEncodingMax = 0xa
};

enum _WWAN_SMS_CDMA_LANG {
	WwanSmsCdmaLangUnknown = 0x0,
	WwanSmsCdmaLangEnglish = 0x1,
	WwanSmsCdmaLangFrench = 0x2,
	WwanSmsCdmaLangSpanish = 0x3,
	WwanSmsCdmaLangJapanese = 0x4,
	WwanSmsCdmaLangKorean = 0x5,
	WwanSmsCdmaLangChinese = 0x6,
	WwanSmsCdmaLangHebrew = 0x7,
	WwanSmsCdmaLangMax = 0x8
};

struct _WWAN_SMS_CDMA_RECORD {
	/*0000*/ ULONG MessageIndex;
	/*0004*/ _WWAN_MSG_STATUS MsgStatus;
	/*0008*/ CHAR Address[0x32];
	/*003a*/ CHAR ScTimeStamp[0x14];
	/*0050*/ _WWAN_SMS_CDMA_ENCODING EncodingId;
	/*0054*/ _WWAN_SMS_CDMA_LANG LanguageId;
	/*0058*/ USHORT SizeInBytes;
	/*005a*/ UCHAR SizeInCharacters;
	/*005b*/ UCHAR EncodedMsg[0xa0];
	/*00fc*/
};

struct _WWAN_SMS_CONFIGURATION {
	/*0000*/ CHAR ScAddress[0x10];
	/*0010*/ _WWAN_SMS_FORMAT SmsFormat;
	/*0014*/ ULONG ulMaxMessageIndex;
	/*0018*/
};

struct _WWAN_SMS_FILTER {
	/*0000*/ _WWAN_SMS_FLAG Flag;
	/*0004*/ ULONG MessageIndex;
	/*0008*/
};

enum _WWAN_SMS_FLAG {
	WwanSmsFlagAll = 0x0,
	WwanSmsFlagIndex = 0x1,
	WwanSmsFlagNew = 0x2,
	WwanSmsFlagOld = 0x3,
	WwanSmsFlagSent = 0x4,
	WwanSmsFlagDraft = 0x5,
	WwanSmsFlagMax = 0x6
};

enum _WWAN_SMS_FORMAT {
	WwanSmsFormatPdu = 0x0,
	WwanSmsFormatReserved0 = 0x1,
	WwanSmsFormatReserved1 = 0x2,
	WwanSmsFormatReserved2 = 0x3,
	WwanSmsFormatCdma = 0x4,
	WwanSmsFormatMax = 0x5
};

struct _WWAN_SMS_PDU_RECORD {
	/*0000*/ ULONG MessageIndex;
	/*0004*/ _WWAN_MSG_STATUS MsgStatus;
	/*0008*/ UCHAR Size;
	/*0009*/ CHAR PduData[0x16e];
	/*0178*/
};

struct _WWAN_SMS_READ {
	/*0000*/ _WWAN_SMS_FORMAT SmsFormat;
	/*0004*/ _WWAN_SMS_FILTER ReadFilter;
	/*000c*/
};

struct _WWAN_SMS_SEND {
	
	/*0000*/ _WWAN_SMS_FORMAT SmsFormat;
	/*0004*/ <unnamed-type-u> u;
	/*0174*/
};

struct _WWAN_SMS_SEND_CDMA {
	/*0000*/ _WWAN_SMS_CDMA_ENCODING EncodingId;
	/*0004*/ _WWAN_SMS_CDMA_LANG LanguageId;
	/*0008*/ CHAR Address[0x32];
	/*003a*/ USHORT SizeInBytes;
	/*003c*/ UCHAR SizeInCharacters;
	/*003d*/ UCHAR EncodedMsg[0xa0];
	/*00e0*/
};

struct _WWAN_SMS_SEND_PDU {
	/*0000*/ UCHAR Size;
	/*0001*/ CHAR PduData[0x16e];
	/*016f*/
};

struct _WWAN_SMS_STATUS {
	/*0000*/ ULONG uFlag;
	/*0004*/ ULONG MessageIndex;
	/*0008*/
};

enum _WWAN_STRUCT_TYPE {
	WwanStructTN = 0x0,
	WwanStructContext = 0x1,
	WwanStructProvider = 0x2,
	WwanStructSmsPdu = 0x3,
	WwanStructReserved0 = 0x4,
	WwanStructReserved1 = 0x5,
	WwanStructReserved2 = 0x6,
	WwanStructSmsCdma = 0x7,
	WwanStructReserved3 = 0x8,
	WwanStructDeviceServiceEntry = 0x9,
	WwanStructProvider2 = 0xa,
	WwanStructDeviceServiceGuid = 0xb,
	WwanStructDeviceServiceCommandId = 0xc,
	WwanStructCellularClass = 0xd,
	WwanStructDeviceSlotMap = 0xe,
	WwanStructUiccApplication = 0xf,
	WwanStructRegisterAcquisitionOrder = 0x10,
	WwanStructRegistrationState = 0x11,
	WwanStructSignalState = 0x12,
	WwanStructUiccTerminalCapability = 0x13,
	WwanStructSarConfig = 0x14,
	WwanStructContextV2 = 0x15,
	WwanStructNetworkBlacklistProvider = 0x16,
	WwanStructMPDPChildInterface = 0x17,
	WwantStructSNSSAI = 0x18,
	WwantStructTAI = 0x19,
	WwanStructMax = 0x1a
};

struct _WWAN_SUPPORTED_DEVICE_SERVICES {
	/*0000*/ ULONG uMaxCommandDataSize;
	/*0004*/ ULONG uMaxSessionDataSize;
	/*0008*/ ULONG uMaxSessionCount;
	/*000c*/ _WWAN_LIST_HEADER ListHeader;
	/*0014*/
};

struct _WWAN_SYS_CAPS_INFO {
	/*0000*/ ULONG NumberOfExecutors;
	/*0004*/ ULONG NumberOfSlots;
	/*0008*/ ULONG Concurrency;
	/*0010*/ ULONGLONG ModemID;
	/*0018*/
};

struct _WWAN_TDSCDMA_MRL {
	/*0000*/ ULONG ElementCount;
	/*0004*/ UCHAR TDSCDMAMrl[0x1];
	/*0008*/
};

struct _WWAN_TDSCDMA_MRL_INFO {
	/*0000*/ ULONG ProviderIdOffset;
	/*0004*/ ULONG ProviderIdSize;
	/*0008*/ ULONG LocationAreaCode;
	/*000c*/ ULONG CellId;
	/*0010*/ ULONG UARFCN;
	/*0014*/ ULONG CellParameterId;
	/*0018*/ ULONG TimingAdvance;
	/*001c*/ ULONG RSCP;
	/*0020*/ ULONG PathLoss;
	/*0024*/ UCHAR Data[0x1];
	/*0028*/
};

struct _WWAN_TDSCDMA_SERVING_CELL_INFO {
	/*0000*/ ULONG ProviderIdOffset;
	/*0004*/ ULONG ProviderIdSize;
	/*0008*/ ULONG LocationAreaCode;
	/*000c*/ ULONG CellId;
	/*0010*/ ULONG UARFCN;
	/*0014*/ ULONG CellParameterId;
	/*0018*/ ULONG TimingAdvance;
	/*001c*/ ULONG RSCP;
	/*0020*/ ULONG PathLoss;
	/*0024*/ UCHAR Data[0x1];
	/*0028*/
};

struct _WWAN_TLV_IE {
	/*0000*/ USHORT Type;
	/*0002*/ UCHAR Reserved;
	/*0003*/ UCHAR PaddingLength;
	/*0004*/ ULONG DataLength;
	/*0008*/
};

enum _WWAN_UCM_AUTOCONNECT_TYPE {
	WwanUcmAutoConnectTypeNone = 0x0,
	WwanUcmAutoConnectTypeAlways = 0x1,
	WwanUcmAutoConnectTypeNotRoaming = 0x2,
	WwanUcmAutoConnectTypeUnknown = 0x3
};

struct _WWAN_UICCCARD_ADDITIONAL_INFO {
	/*0000*/ ULONG version;
	/*0004*/ ULONG cbSize;
	/*0008*/ ULONG dwParams;
	/*000c*/ ULONG numLanguages;
	/*0010*/ ULONG numLines;
	/*0014*/
};

struct _WWAN_UICCLINE_INFO {
	/*0000*/ ULONG version;
	/*0004*/ ULONG cbSize;
	/*0008*/ ULONG dwParams;
	/*000c*/ WCHAR imsi[0x10];
	/*002c*/ ULONG mncLen;
	/*0030*/ WCHAR spn[0x15];
	/*005c*/ ULONG lenGID1;
	/*0060*/ ULONG lenPNN;
	/*0064*/
};

enum _WWAN_UICCSLOT_STATE {
	WwanUiccSlotStateUnknown = 0x0,
	WwanUiccSlotStateOffEmpty = 0x1,
	WwanUiccSlotStateOff = 0x2,
	WwanUiccSlotStateEmpty = 0x3,
	WwanUiccSlotStateNotReady = 0x4,
	WwanUiccSlotStateActive = 0x5,
	WwanUiccSlotStateError = 0x6,
	WwanUiccSlotStateActiveEsim = 0x7,
	WwanUiccSlotStateActiveEsimNoProfile = 0x8,
	WwanUiccSlotStateMax = 0x9
};

struct _WWAN_UICC_ACCESS_BINARY {
	/*0000*/ ULONG Version;
	/*0004*/ UCHAR AppId[0x20];
	/*0024*/ _WWAN_UICC_FILE_PATH UiccFilePath;
	/*0054*/ ULONG FileOffset;
	/*0058*/ ULONG NumberOfBytes;
	/*005c*/ UCHAR LocalPinSize;
	/*005d*/ UCHAR LocalPin[0x11];
	/*006e*/ USHORT BinaryDataSize;
	/*0070*/ UCHAR BinaryData[0x1];
	/*0074*/
};

struct _WWAN_UICC_ACCESS_RECORD {
	/*0000*/ ULONG Version;
	/*0004*/ UCHAR AppId[0x20];
	/*0024*/ _WWAN_UICC_FILE_PATH UiccFilePath;
	/*0054*/ ULONG RecordNumber;
	/*0058*/ UCHAR LocalPinSize;
	/*0059*/ UCHAR LocalPin[0x11];
	/*006a*/ UCHAR RecordDataSize;
	/*006b*/ UCHAR RecordData[0x100];
	/*016c*/
};

struct _WWAN_UICC_APDU_INFO {
	/*0000*/ UCHAR Status[0x2];
	/*0004*/ ULONG ResponseLength;
	/*0008*/ UCHAR Response[0x1];
	/*000c*/
};

struct _WWAN_UICC_APP_INFO {
	/*0000*/ _WWAN_UICC_APP_TYPE AppType;
	/*0004*/ ULONG AppIdSize;
	/*0008*/ UCHAR AppId[0x20];
	/*0028*/ ULONG AppNameLength;
	/*002c*/ UCHAR AppName[0x100];
	/*012c*/ ULONG NumPins;
	/*0130*/ UCHAR PinRef[0x8];
	/*0138*/
};

struct _WWAN_UICC_APP_LIST {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG AppCount;
	/*0008*/ ULONG ActiveAppIndex;
	/*000c*/ ULONG AppListSize;
	/*0010*/ UCHAR Response[0x1];
	/*0014*/
};

enum _WWAN_UICC_APP_TYPE {
	WwanUiccAppTypeUnknown = 0x0,
	WwanUiccAppTypeMf = 0x1,
	WwanUiccAppTypeMfSIM = 0x2,
	WwanUiccAppTypeMfRUIM = 0x3,
	WwanUiccAppTypeUSIM = 0x4,
	WwanUiccAppTypeCSIM = 0x5,
	WwanUiccAppTypeISIM = 0x6,
	WwanUiccAppTypeMax = 0x7
};

enum _WWAN_UICC_CLASS_BYTE_TYPE {
	WwanUiccClassByteTypeInterindustry = 0x0,
	WwanUiccClassByteTypeExtended = 0x1,
	WwanUiccClassByteTypeMaximum = 0x2
};

struct _WWAN_UICC_CLOSE_CHANNEL_INFO {
	/*0000*/ UCHAR Status[0x2];
	/*0002*/
};

enum _WWAN_UICC_FILE_ACCESSIBILITY {
	WwanUiccFileAccessibilityUnknown = 0x0,
	WwanUiccFileAccessibilityNotShareable = 0x1,
	WwanUiccFileAccessibilityShareable = 0x2,
	WwanUiccFileAccessibilityMax = 0x3
};

struct _WWAN_UICC_FILE_PATH {
	/*0000*/ ULONG Version;
	/*0004*/ UCHAR AppIdLength;
	/*0005*/ UCHAR AppId[0x20];
	/*0025*/ UCHAR FilePathLength;
	/*0026*/ UCHAR FilePath[0x8];
	/*0030*/
};

struct _WWAN_UICC_FILE_STATUS {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG StatusWord1;
	/*0008*/ ULONG StatusWord2;
	/*000c*/ _WWAN_UICC_FILE_ACCESSIBILITY FileAccessibility;
	/*0010*/ _WWAN_UICC_FILE_TYPE FileType;
	/*0014*/ _WWAN_UICC_FILE_STRUCTURE FileStructure;
	/*0018*/ ULONG ItemCount;
	/*001c*/ ULONG ItemSize;
	/*0020*/ _WWAN_PIN_TYPE FileLockStatus[0x4];
	/*0030*/
};

enum _WWAN_UICC_FILE_STRUCTURE {
	WwanUiccFileStructureUnknown = 0x0,
	WwanUiccFileStructureTransparent = 0x1,
	WwanUiccFileStructureCyclic = 0x2,
	WwanUiccFileStructureLinear = 0x3,
	WwanUiccFileStructureBerTLV = 0x4,
	WwanUiccFileStructureMax = 0x5
};

enum _WWAN_UICC_FILE_TYPE {
	WwanUiccFileTypeUnknown = 0x0,
	WwanUiccFileTypeWorkingEf = 0x1,
	WwanUiccFileTypeInternalEf = 0x2,
	WwanUiccFileTypeDfOrAdf = 0x3,
	WwanUiccFileTypeMax = 0x4
};

struct _WWAN_UICC_OPEN_CHANNEL_INFO {
	/*0000*/ UCHAR Status[0x2];
	/*0004*/ ULONG Channel;
	/*0008*/ ULONG ResponseLength;
	/*000c*/ UCHAR Response[0x1];
	/*0010*/
};

enum _WWAN_UICC_PASSTHROUGH_ACTION {
	WwanUiccPassThroughDisable = 0x0,
	WwanUiccPassThroughEnable = 0x1,
	WwanUiccPassThroughActionMaximum = 0x2
};

enum _WWAN_UICC_PASSTHROUGH_STATUS {
	WwanUiccPassThroughDisabled = 0x0,
	WwanUiccPassThroughEnabled = 0x1,
	WwanUiccPassThroughStatusMaximum = 0x2
};

struct _WWAN_UICC_RESET_COMPLETE_INFO {
	/*0000*/ ULONG RequestId;
	/*0004*/ ULONG WwanStatus;
	/*0008*/ _WWAN_UICC_RESET_INFO ResetInfo;
	/*000c*/
};

struct _WWAN_UICC_RESET_INFO {
	/*0000*/ _WWAN_UICC_PASSTHROUGH_STATUS PassThroughStatus;
	/*0004*/
};

struct _WWAN_UICC_RESPONSE {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG StatusWord1;
	/*0008*/ ULONG StatusWord2;
	/*000c*/ USHORT ResponseDataSize;
	/*000e*/ UCHAR ResponseData[0x1];
	/*0010*/
};

enum _WWAN_UICC_SECURE_MESSAGING {
	WwanUiccSecureMessagingNone = 0x0,
	WwanUiccSecureMessagingNoHdrAuth = 0x1,
	WwanUiccSecureMessagingMaximum = 0x2
};

struct _WWAN_UICC_TERMINAL_CAPABILITY_TLV {
	/*0000*/ UCHAR Data[0x3];
	/*0003*/
};

struct _WWAN_UMTS_MRL {
	/*0000*/ ULONG ElementCount;
	/*0004*/ UCHAR UMTSMrl[0x1];
	/*0008*/
};

struct _WWAN_UMTS_MRL_INFO {
	/*0000*/ ULONG ProviderIdOffset;
	/*0004*/ ULONG ProviderIdSize;
	/*0008*/ ULONG LocationAreaCode;
	/*000c*/ ULONG CellId;
	/*0010*/ ULONG UARFCN;
	/*0014*/ ULONG PrimaryScramblingCode;
	/*0018*/ ULONG RSCP;
	/*001c*/ ULONG ECNO;
	/*0020*/ ULONG PathLoss;
	/*0024*/ UCHAR Data[0x1];
	/*0028*/
};

struct _WWAN_UMTS_SERVING_CELL_INFO {
	/*0000*/ ULONG ProviderIdOffset;
	/*0004*/ ULONG ProviderIdSize;
	/*0008*/ ULONG LocationAreaCode;
	/*000c*/ ULONG CellId;
	/*0010*/ ULONG FrequencyInfoUL;
	/*0014*/ ULONG FrequencyInfoDL;
	/*0018*/ ULONG FrequencyInfoNT;
	/*001c*/ ULONG UARFCN;
	/*0020*/ ULONG PrimaryScramblingCode;
	/*0024*/ ULONG RSCP;
	/*0028*/ ULONG ECNO;
	/*002c*/ ULONG PathLoss;
	/*0030*/ UCHAR Data[0x1];
	/*0034*/
};

struct _WWAN_USSD_EVENT {
	/*0000*/ _WWAN_USSD_EVENT_TYPE EventType;
	/*0004*/ _WWAN_USSD_SESSION_STATE SessionState;
	/*0008*/ _WWAN_USSD_STRING UssdString;
	/*00ac*/
};

enum _WWAN_USSD_EVENT_TYPE {
	WwanUssdEventNoActionRequired = 0x0,
	WwanUssdEventActionRequired = 0x1,
	WwanUssdEventTerminated = 0x2,
	WwanUssdEventOtherLocalClient = 0x3,
	WwanUssdEventOperationNotSupported = 0x4,
	WwanUssdEventNetworkTimeOut = 0x5
};

struct _WWAN_USSD_REQUEST {
	/*0000*/ _WWAN_USSD_REQUEST_TYPE RequestType;
	/*0004*/ _WWAN_USSD_STRING UssdString;
	/*00a8*/
};

enum _WWAN_USSD_REQUEST_TYPE {
	WwanUssdRequestInitiate = 0x0,
	WwanUssdRequestContinue = 0x1,
	WwanUssdRequestCancel = 0x2
};

enum _WWAN_USSD_SESSION_STATE {
	WwanUssdSessionStateNew = 0x0,
	WwanUssdSessionStateExisting = 0x1
};

struct _WWAN_USSD_STRING {
	/*0000*/ UCHAR DataCodingScheme;
	/*0001*/ UCHAR StringLength;
	/*0002*/ UCHAR String[0xa0];
	/*00a2*/
};

struct _WWAN_VENDOR_EVENT {
	/*0000*/ ULONG dwDataSize;
	/*0008*/ void * pData;
	/*0010*/
};

struct _WWAN_VENDOR_SPECIFIC {
	/*0000*/ ULONG uVendorSpecificBufferSize;
	/*0004*/
};

struct _WWAN_VENDOR_TASK_INFO {
	/*0000*/ WWAN_ERROR_CODE ErrorCode;
	/*0008*/ _WWAN_VENDOR_EVENT EventData;
	/*0018*/
};

enum _WWAN_VOICE_CALL_STATE {
	WwanVoiceCallStateNone = 0x0,
	WwanVoiceCallStateInProgress = 0x1,
	WwanVoiceCallStateHangUp = 0x2,
	WwanVoiceCallStateMaximum = 0x3
};

enum _WWAN_VOICE_CLASS {
	WwanVoiceClassUnknown = 0x0,
	WwanVoiceClassNoVoice = 0x1,
	WwanVoiceClassSeparateVoiceData = 0x2,
	WwanVoiceClassSimultaneousVoiceData = 0x3,
	WwanVoiceClassMax = 0x4
};

enum _WWAN_VOICE_DOMAIN {
	WwanVoiceDomainNone = 0x0,
	WwanVoiceDomain3gpp = 0x1,
	WwanVoiceDomain3gpp2 = 0x2,
	WwanVoiceDomainIms = 0x3,
	WwanVoiceDomainMax = 0x4
};

struct _WinrtTypeSerializationInfo___FIVectorView_1_Windows__CNetworking__CConnectivity__CAttributedNetworkUsage_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x15];
	/*0018*/
};

struct _WinrtTypeSerializationInfo___FIVectorView_1_Windows__CNetworking__CConnectivity__CConnectionProfile_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x15];
	/*0018*/
};

struct _WinrtTypeSerializationInfo___FIVectorView_1_Windows__CNetworking__CConnectivity__CConnectivityInterval_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x15];
	/*0018*/
};

struct _WinrtTypeSerializationInfo___FIVectorView_1_Windows__CNetworking__CConnectivity__CNetworkUsage_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x15];
	/*0018*/
};

struct _WinrtTypeSerializationInfo___FIVectorView_1_Windows__CNetworking__CConnectivity__CProviderNetworkUsage_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x15];
	/*0018*/
};

struct _WinrtTypeSerializationInfo___x_Windows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x4];
	/*0006*/
};

struct _WinrtTypeSerializationInfo___x_Windows_CNetworking_CConnectivity_CIConnectionProfile_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x15];
	/*0018*/
};

struct _WinrtTypeSerializationInfo___x_Windows_CNetworking_CConnectivity_CIConnectionSession_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x15];
	/*0018*/
};

struct _WinrtTypeSerializationInfo___x_Windows_CNetworking_CConnectivity_CIProxyConfiguration_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x15];
	/*0018*/
};

struct _Wx86TIB {
	/*0000*/ ULONG Size;
	/*0004*/ ULONG InitialPc;
	/*0008*/ void * StackBase;
	/*000c*/ void * StackLimit;
	/*0010*/ void * DeallocationStack;
	/*0014*/ ULONG LogFlags;
	/*0018*/ ULONG InitialSp;
	/*001c*/ UCHAR SimulationCount;
	/*001d*/ UCHAR InCpuSimulation;
	/*001e*/ UCHAR EmulateInitialPc;
	/*001f*/ UCHAR Initialized;
	/*0020*/ _EXCEPTION_REGISTRATION_RECORD * ExceptionList;
	/*0024*/ void * CpuContext;
	/*0028*/ _CONTEXT * InitialExceptionContext;
	/*002c*/ void * pCallersRIID;
	/*0030*/ void * pCallersUnknown;
	/*0034*/ ULONG Flags;
	/*0038*/ void * SelfRegDllName;
	/*003c*/ void * SelfRegDllHandle;
	/*0040*/
};

struct _Wx86ThreadState {
	/*0000*/ ULONG * CallBx86Eip;
	/*0008*/ void * DeallocationCpu;
	/*0010*/ UCHAR UseKnownWx86Dll;
	/*0011*/ CHAR OleStubInvoked;
	/*0018*/
};

struct _X86_CALL_FRAME {
	/*0000*/ ULONG ReturnAddress;
	/*0004*/ ULONG Param1;
	/*0008*/ ULONG Param2;
	/*000c*/ ULONG CompatibilityArea;
	/*0010*/
};

struct _X86_NT5_CONTEXT;

enum _XHR_AUTH {
	XHR_AUTH_ALL = 0x0,
	XHR_AUTH_NONE = 0x1,
	XHR_AUTH_PROXY = 0x2
};

enum _XHR_CERT_ERROR_FLAG {
	XHR_CERT_ERROR_REVOCATION_FAILED = 0x800000,
	XHR_CERT_ERROR_UNKNOWN_CA = 0x1000000,
	XHR_CERT_ERROR_CERT_CN_INVALID = 0x2000000,
	XHR_CERT_ERROR_CERT_DATE_INVALID = 0x4000000,
	XHR_CERT_ERROR_ALL_SERVER_ERRORS = 0x7800000
};

enum _XHR_CERT_IGNORE_FLAG {
	XHR_CERT_IGNORE_REVOCATION_FAILED = 0x80,
	XHR_CERT_IGNORE_UNKNOWN_CA = 0x100,
	XHR_CERT_IGNORE_CERT_CN_INVALID = 0x1000,
	XHR_CERT_IGNORE_CERT_DATE_INVALID = 0x2000,
	XHR_CERT_IGNORE_ALL_SERVER_ERRORS = 0x3180
};

enum _XHR_COOKIE_FLAG {
	XHR_COOKIE_IS_SECURE = 0x1,
	XHR_COOKIE_IS_SESSION = 0x2,
	XHR_COOKIE_THIRD_PARTY = 0x10,
	XHR_COOKIE_PROMPT_REQUIRED = 0x20,
	XHR_COOKIE_EVALUATE_P3P = 0x40,
	XHR_COOKIE_APPLY_P3P = 0x80,
	XHR_COOKIE_P3P_ENABLED = 0x100,
	XHR_COOKIE_IS_RESTRICTED = 0x200,
	XHR_COOKIE_IE6 = 0x400,
	XHR_COOKIE_IS_LEGACY = 0x800,
	XHR_COOKIE_NON_SCRIPT = 0x1000,
	XHR_COOKIE_HTTPONLY = 0x2000
};

enum _XHR_COOKIE_STATE {
	XHR_COOKIE_STATE_UNKNOWN = 0x0,
	XHR_COOKIE_STATE_ACCEPT = 0x1,
	XHR_COOKIE_STATE_PROMPT = 0x2,
	XHR_COOKIE_STATE_LEASH = 0x3,
	XHR_COOKIE_STATE_DOWNGRADE = 0x4,
	XHR_COOKIE_STATE_REJECT = 0x5
};

enum _XHR_CRED_PROMPT {
	XHR_CRED_PROMPT_ALL = 0x0,
	XHR_CRED_PROMPT_NONE = 0x1,
	XHR_CRED_PROMPT_PROXY = 0x2
};

enum _XHR_PROPERTY {
	XHR_PROP_NO_CRED_PROMPT = 0x0,
	XHR_PROP_NO_AUTH = 0x1,
	XHR_PROP_TIMEOUT = 0x2,
	XHR_PROP_NO_DEFAULT_HEADERS = 0x3,
	XHR_PROP_REPORT_REDIRECT_STATUS = 0x4,
	XHR_PROP_NO_CACHE = 0x5,
	XHR_PROP_EXTENDED_ERROR = 0x6,
	XHR_PROP_QUERY_STRING_UTF8 = 0x7,
	XHR_PROP_IGNORE_CERT_ERRORS = 0x8,
	XHR_PROP_ONDATA_THRESHOLD = 0x9,
	XHR_PROP_SET_ENTERPRISEID = 0xa,
	XHR_PROP_MAX_CONNECTIONS = 0xb
};

struct _XMIT_ROUTINE_QUINTUPLE {
	/*0000*/ void (* pfnTranslateToXmit)( _MIDL_STUB_MESSAGE * );
	/*0008*/ void (* pfnTranslateFromXmit)( _MIDL_STUB_MESSAGE * );
	/*0010*/ void (* pfnFreeXmit)( _MIDL_STUB_MESSAGE * );
	/*0018*/ void (* pfnFreeInst)( _MIDL_STUB_MESSAGE * );
	/*0020*/
};

struct _XSAVE_AREA {
	/*0000*/ _XSAVE_FORMAT LegacyState;
	/*0200*/ _XSAVE_AREA_HEADER Header;
	/*0240*/
};

struct _XSAVE_AREA_HEADER {
	/*0000*/ ULONGLONG Mask;
	/*0008*/ ULONGLONG CompactionMask;
	/*0010*/ ULONGLONG Reserved2[0x6];
	/*0040*/
};

struct _XSAVE_CET_U_FORMAT {
	/*0000*/ ULONGLONG Ia32CetUMsr;
	/*0008*/ ULONGLONG Ia32Pl3SspMsr;
	/*0010*/
};

struct _XSAVE_FEATURE {
	/*0000*/ ULONG FeatureId;
	/*0008*/ _XSAVE_VENDORS * Vendors;
	/*0008*/ ULONGLONG Unused;
	/*0010*/
};

struct _XSAVE_FORMAT {
	/*0000*/ USHORT ControlWord;
	/*0002*/ USHORT StatusWord;
	/*0004*/ UCHAR TagWord;
	/*0005*/ UCHAR Reserved1;
	/*0006*/ USHORT ErrorOpcode;
	/*0008*/ ULONG ErrorOffset;
	/*000c*/ USHORT ErrorSelector;
	/*000e*/ USHORT Reserved2;
	/*0010*/ ULONG DataOffset;
	/*0014*/ USHORT DataSelector;
	/*0016*/ USHORT Reserved3;
	/*0018*/ ULONG MxCsr;
	/*001c*/ ULONG MxCsr_Mask;
	/*0020*/ _M128A FloatRegisters[0x8];
	/*00a0*/ _M128A XmmRegisters[0x10];
	/*01a0*/ UCHAR Reserved4[0x60];
	/*0200*/
};

struct _XSAVE_POLICY {
	/*0000*/ ULONG Version;
	/*0004*/ ULONG Size;
	/*0008*/ ULONG Flags;
	/*000c*/ ULONG MaxSaveAreaLength;
	/*0010*/ ULONGLONG FeatureBitmask;
	/*0018*/ ULONG NumberOfFeatures;
	/*0020*/ _XSAVE_FEATURE Features[0x1];
	/*0030*/
};

struct _XSAVE_SUPPORTED_CPU {
	/*0000*/ XSAVE_CPU_INFO CpuInfo;
	/*0020*/ XSAVE_CPU_ERRATA * CpuErrata;
	/*0020*/ ULONGLONG Unused;
	/*0028*/
};

struct _XSAVE_VENDOR {
	/*0000*/ ULONG VendorId[0x3];
	/*0010*/ _XSAVE_SUPPORTED_CPU SupportedCpu;
	/*0038*/
};

struct _XSAVE_VENDORS {
	/*0000*/ ULONG NumberOfVendors;
	/*0008*/ _XSAVE_VENDOR Vendor[0x1];
	/*0040*/
};

struct _XSTATE_CONFIGURATION {
	/*0000*/ ULONGLONG EnabledFeatures;
	/*0008*/ ULONGLONG EnabledVolatileFeatures;
	/*0010*/ ULONG Size;
	/*0014*/ ULONG ControlFlags;
	/*0014*/ ULONG OptimizedSave : 01; // 0x00000001;
	/*0014*/ ULONG CompactionEnabled : 01; // 0x00000002;
	/*0018*/ _XSTATE_FEATURE Features[0x40];
	/*0218*/ ULONGLONG EnabledSupervisorFeatures;
	/*0220*/ ULONGLONG AlignedFeatures;
	/*0228*/ ULONG AllFeatureSize;
	/*022c*/ ULONG AllFeatures[0x40];
	/*0330*/ ULONGLONG EnabledUserVisibleSupervisorFeatures;
	/*0338*/
};

struct _XSTATE_CONTEXT {
	/*0000*/ ULONGLONG Mask;
	/*0008*/ ULONG Length;
	/*000c*/ ULONG Reserved1;
	/*0010*/ _XSAVE_AREA * Area;
	/*0018*/ void * Buffer;
	/*0020*/
};

struct _XSTATE_FEATURE {
	/*0000*/ ULONG Offset;
	/*0004*/ ULONG Size;
	/*0008*/
};

struct _ZONEATTRIBUTES {
	/*0000*/ ULONG cbSize;
	/*0004*/ WCHAR szDisplayName[0x104];
	/*020c*/ WCHAR szDescription[0xc8];
	/*039c*/ WCHAR szIconPath[0x104];
	/*05a4*/ ULONG dwTemplateMinLevel;
	/*05a8*/ ULONG dwTemplateRecommended;
	/*05ac*/ ULONG dwTemplateCurrentLevel;
	/*05b0*/ ULONG dwFlags;
	/*05b4*/
};

struct __GENERIC_BINDING_INFO {
	/*0000*/ void * pObj;
	/*0008*/ UINT Size;
	/*0010*/ void * (* pfnBind)( void * );
	/*0018*/ void (* pfnUnbind)( void * , UCHAR * );
	/*0020*/
};

enum __MIDL_IAuthenticateEx_0001 {
	AUTHENTICATEF_PROXY = 0x1,
	AUTHENTICATEF_BASIC = 0x2,
	AUTHENTICATEF_HTTP = 0x4
};

enum __MIDL_IBindStatusCallbackEx_0001 {
	BINDF2_DISABLEBASICOVERHTTP = 0x1,
	BINDF2_DISABLEAUTOCOOKIEHANDLING = 0x2,
	BINDF2_READ_DATA_GREATER_THAN_4GB = 0x4,
	BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x8,
	BINDF2_SETDOWNLOADMODE = 0x20,
	BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 0x40,
	BINDF2_KEEP_CALLBACK_MODULE_LOADED = 0x80,
	BINDF2_ALLOW_PROXY_CRED_PROMPT = 0x100,
	BINDF2_RESERVED_17 = 0x200,
	BINDF2_RESERVED_16 = 0x400,
	BINDF2_RESERVED_15 = 0x800,
	BINDF2_RESERVED_14 = 0x1000,
	BINDF2_RESERVED_13 = 0x2000,
	BINDF2_RESERVED_12 = 0x4000,
	BINDF2_RESERVED_11 = 0x8000,
	BINDF2_RESERVED_10 = 0x10000,
	BINDF2_RESERVED_F = 0x20000,
	BINDF2_RESERVED_E = 0x40000,
	BINDF2_RESERVED_D = 0x80000,
	BINDF2_RESERVED_C = 0x100000,
	BINDF2_RESERVED_B = 0x200000,
	BINDF2_RESERVED_A = 0x400000,
	BINDF2_RESERVED_9 = 0x800000,
	BINDF2_RESERVED_8 = 0x1000000,
	BINDF2_RESERVED_7 = 0x2000000,
	BINDF2_RESERVED_6 = 0x4000000,
	BINDF2_RESERVED_5 = 0x8000000,
	BINDF2_RESERVED_4 = 0x10000000,
	BINDF2_RESERVED_3 = 0x20000000,
	BINDF2_RESERVED_2 = 0x40000000,
	BINDF2_RESERVED_1 = 0x80000000
};

enum __MIDL_IBindStatusCallback_0001 {
	BINDVERB_GET = 0x0,
	BINDVERB_POST = 0x1,
	BINDVERB_PUT = 0x2,
	BINDVERB_CUSTOM = 0x3,
	BINDVERB_RESERVED1 = 0x4
};

enum __MIDL_IBindStatusCallback_0002 {
	BINDINFOF_URLENCODESTGMEDDATA = 0x1,
	BINDINFOF_URLENCODEDEXTRAINFO = 0x2
};

enum __MIDL_IBindStatusCallback_0003 {
	BINDF_ASYNCHRONOUS = 0x1,
	BINDF_ASYNCSTORAGE = 0x2,
	BINDF_NOPROGRESSIVERENDERING = 0x4,
	BINDF_OFFLINEOPERATION = 0x8,
	BINDF_GETNEWESTVERSION = 0x10,
	BINDF_NOWRITECACHE = 0x20,
	BINDF_NEEDFILE = 0x40,
	BINDF_PULLDATA = 0x80,
	BINDF_IGNORESECURITYPROBLEM = 0x100,
	BINDF_RESYNCHRONIZE = 0x200,
	BINDF_HYPERLINK = 0x400,
	BINDF_NO_UI = 0x800,
	BINDF_SILENTOPERATION = 0x1000,
	BINDF_PRAGMA_NO_CACHE = 0x2000,
	BINDF_GETCLASSOBJECT = 0x4000,
	BINDF_RESERVED_1 = 0x8000,
	BINDF_FREE_THREADED = 0x10000,
	BINDF_DIRECT_READ = 0x20000,
	BINDF_FORMS_SUBMIT = 0x40000,
	BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
	BINDF_FROMURLMON = 0x100000,
	BINDF_FWD_BACK = 0x200000,
	BINDF_PREFERDEFAULTHANDLER = 0x400000,
	BINDF_ENFORCERESTRICTED = 0x800000,
	BINDF_RESERVED_2 = 0x80000000,
	BINDF_RESERVED_3 = 0x1000000,
	BINDF_RESERVED_4 = 0x2000000,
	BINDF_RESERVED_5 = 0x4000000,
	BINDF_RESERVED_6 = 0x8000000,
	BINDF_RESERVED_7 = 0x40000000,
	BINDF_RESERVED_8 = 0x20000000
};

enum __MIDL_IBindStatusCallback_0004 {
	URL_ENCODING_NONE = 0x0,
	URL_ENCODING_ENABLE_UTF8 = 0x10000000,
	URL_ENCODING_DISABLE_UTF8 = 0x20000000
};

enum __MIDL_IBindStatusCallback_0005 {
	BINDINFO_OPTIONS_WININETFLAG = 0x10000,
	BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
	BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
	BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
	BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
	BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
	BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
	BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
	BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
	BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
	BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
	BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
	BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
	BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
	BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = 0x80000000
};

enum __MIDL_IBindStatusCallback_0006 {
	BSCF_FIRSTDATANOTIFICATION = 0x1,
	BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,
	BSCF_LASTDATANOTIFICATION = 0x4,
	BSCF_DATAFULLYAVAILABLE = 0x8,
	BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,
	BSCF_SKIPDRAINDATAFORFILEURLS = 0x20,
	BSCF_64BITLENGTHDOWNLOAD = 0x40
};

enum __MIDL_ICodeInstall_0001 {
	CIP_DISK_FULL = 0x0,
	CIP_ACCESS_DENIED = 0x1,
	CIP_NEWER_VERSION_EXISTS = 0x2,
	CIP_OLDER_VERSION_EXISTS = 0x3,
	CIP_NAME_CONFLICT = 0x4,
	CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x5,
	CIP_EXE_SELF_REGISTERATION_TIMEOUT = 0x6,
	CIP_UNSAFE_TO_ABORT = 0x7,
	CIP_NEED_REBOOT = 0x8,
	CIP_NEED_REBOOT_UI_PERMISSION = 0x9
};

enum __MIDL_IGetBindHandle_0001 {
	BINDHANDLETYPES_APPCACHE = 0x0,
	BINDHANDLETYPES_DEPENDENCY = 0x1,
	BINDHANDLETYPES_COUNT = 0x2
};

enum __MIDL_IInternetSecurityManager_0001 {
	PUAF_DEFAULT = 0x0,
	PUAF_NOUI = 0x1,
	PUAF_ISFILE = 0x2,
	PUAF_WARN_IF_DENIED = 0x4,
	PUAF_FORCEUI_FOREGROUND = 0x8,
	PUAF_CHECK_TIFS = 0x10,
	PUAF_DONTCHECKBOXINDIALOG = 0x20,
	PUAF_TRUSTED = 0x40,
	PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,
	PUAF_ENFORCERESTRICTED = 0x100,
	PUAF_NOSAVEDFILECHECK = 0x200,
	PUAF_REQUIRESAVEDFILECHECK = 0x400,
	PUAF_DONT_USE_CACHE = 0x1000,
	PUAF_RESERVED1 = 0x2000,
	PUAF_RESERVED2 = 0x4000,
	PUAF_LMZ_UNLOCKED = 0x10000,
	PUAF_LMZ_LOCKED = 0x20000,
	PUAF_DEFAULTZONEPOL = 0x40000,
	PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
	PUAF_NOUIIFLOCKED = 0x100000,
	PUAF_DRAGPROTOCOLCHECK = 0x200000
};

enum __MIDL_IInternetSecurityManager_0002 {
	PUAFOUT_DEFAULT = 0x0,
	PUAFOUT_ISLOCKZONEPOLICY = 0x1
};

enum __MIDL_IInternetSecurityManager_0003 {
	SZM_CREATE = 0x0,
	SZM_DELETE = 0x1
};

enum __MIDL_IInternetZoneManager_0001 {
	MAX_ZONE_PATH = 0x104,
	MAX_ZONE_DESCRIPTION = 0xc8
};

enum __MIDL_IInternetZoneManager_0002 {
	ZAFLAGS_CUSTOM_EDIT = 0x1,
	ZAFLAGS_ADD_SITES = 0x2,
	ZAFLAGS_REQUIRE_VERIFICATION = 0x4,
	ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,
	ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,
	ZAFLAGS_NO_UI = 0x20,
	ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,
	ZAFLAGS_UNC_AS_INTRANET = 0x80,
	ZAFLAGS_DETECT_INTRANET = 0x100,
	ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
	ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
	ZAFLAGS_NO_CACHE = 0x40000
};

enum __MIDL_IMonikerProp_0001 {
	MIMETYPEPROP = 0x0,
	USE_SRC_URL = 0x1,
	CLASSIDPROP = 0x2,
	TRUSTEDDOWNLOADPROP = 0x3,
	POPUPLEVELPROP = 0x4
};

enum __MIDL_IUri_0001 {
	Uri_PROPERTY_ABSOLUTE_URI = 0x0,
	Uri_PROPERTY_STRING_START = 0x0,
	Uri_PROPERTY_AUTHORITY = 0x1,
	Uri_PROPERTY_DISPLAY_URI = 0x2,
	Uri_PROPERTY_DOMAIN = 0x3,
	Uri_PROPERTY_EXTENSION = 0x4,
	Uri_PROPERTY_FRAGMENT = 0x5,
	Uri_PROPERTY_HOST = 0x6,
	Uri_PROPERTY_PASSWORD = 0x7,
	Uri_PROPERTY_PATH = 0x8,
	Uri_PROPERTY_PATH_AND_QUERY = 0x9,
	Uri_PROPERTY_QUERY = 0xa,
	Uri_PROPERTY_RAW_URI = 0xb,
	Uri_PROPERTY_SCHEME_NAME = 0xc,
	Uri_PROPERTY_USER_INFO = 0xd,
	Uri_PROPERTY_USER_NAME = 0xe,
	Uri_PROPERTY_STRING_LAST = 0xe,
	Uri_PROPERTY_HOST_TYPE = 0xf,
	Uri_PROPERTY_DWORD_START = 0xf,
	Uri_PROPERTY_PORT = 0x10,
	Uri_PROPERTY_SCHEME = 0x11,
	Uri_PROPERTY_ZONE = 0x12,
	Uri_PROPERTY_DWORD_LAST = 0x12
};

enum __MIDL_IUri_0002 {
	Uri_HOST_UNKNOWN = 0x0,
	Uri_HOST_DNS = 0x1,
	Uri_HOST_IPV4 = 0x2,
	Uri_HOST_IPV6 = 0x3,
	Uri_HOST_IDN = 0x4
};

enum __MIDL___MIDL_itf_shpriv_core_0000_0321_0001 {
	GVS_NORMAL = 0x0,
	GVS_USE_SPLASHSCREEN_VISUAL = 0x1,
	GVS_USE_SPLASHSCREEN_VISUAL_ONCE = 0x2
};

enum __MIDL___MIDL_itf_shpriv_core_0000_0321_0002 {
	MCF_FORCE = 0x0,
	MCF_IF_NOT_VISIBLE = 0x1
};

enum __MIDL___MIDL_itf_shpriv_core_0000_0321_0003 {
	IABF_NONE = 0x0,
	IABF_INVALID_AUTOGLOM_DESTINATION = 0x1,
	IABF_AVOID_VIEW_FOR_SWITCH = 0x2,
	IABF_EXEMPT_FROM_BACKSTACK_TRIM = 0x4,
	IABF_FORCE_TERMINATE_ON_CLOSE = 0x80000000
};

enum __MIDL___MIDL_itf_shpriv_core_0000_0321_0004 {
	GSF_LOCKSCREENACTIVATION = 0x1,
	GSF_ACTIVATION = 0x2
};

enum __MIDL___MIDL_itf_shpriv_core_0000_0321_0005 {
	IAQ_WIN8_WINDOWING_BEHAVIOR = 0x0,
	IAQ_REQUIRES_1366_PORTRAIT_MIN_HEIGHT = 0x1,
	IAQ_SHOW_ACTIONS_MENU = 0x2,
	IAQ_USE_WIN8X_COMPATIBILITY_SCALING = 0x3,
	IAQ_FULLSCREEN_8X_LEGACY_APP = 0x4,
	IAQ_WIN81_WINDOWING_BEHAVIOR = 0x5,
	IAQ_DONT_CACHE_TITLE_BAR_SETTINGS = 0x6,
	IAQ_USE_PREFERRED_STANDALONE_SIZE = 0x7
};

enum __MIDL___MIDL_itf_winrtfileapi_0000_0037_0001 {
	PIL_MANAGED_BY_APPLICATION = 0x0,
	PIL_MOST_RECENTLY_USED = 0x1,
	PIL_SYSTEM = 0x2,
	PIL_CURRENT_WORKING_DIRECTORY = 0x3
};

struct __MIDL___MIDL_itf_wtypes_0000_0001_0001 {

	union __MIDL___MIDL_itf_wtypes_0000_0001_0005 {
		
		
		/*0000*/ _GUID clsid;
		/*0000*/ WCHAR * pFileExt;
		/*0000*/ WCHAR * pMimeType;
		/*0000*/ WCHAR * pProgId;
		/*0000*/ WCHAR * pFileName;
		/*0000*/ <unnamed-type-ByName> ByName;
		/*0000*/ <unnamed-type-ByObjectId> ByObjectId;
		/*0020*/
	};

	/*0000*/ ULONG tyspec;
	/*0008*/ __MIDL___MIDL_itf_wtypes_0000_0001_0005 tagged_union;
	/*0028*/
};

struct __PUBLIC_OBJECT_TYPE_INFORMATION {
	/*0000*/ _UNICODE_STRING TypeName;
	/*0010*/ ULONG Reserved[0x16];
	/*0068*/
};

struct __crt_locale_data;

struct __crt_locale_data_public {
	/*0000*/ USHORT const * _locale_pctype;
	/*0008*/ INT _locale_mb_cur_max;
	/*000c*/ UINT _locale_lc_codepage;
	/*0010*/
};

struct __crt_locale_pointers {
	/*0000*/ __crt_locale_data * locinfo;
	/*0008*/ __crt_multibyte_data * mbcinfo;
	/*0010*/
};

struct __crt_multibyte_data;

struct __lc_time_data;

union __m128 {
	/*0000*/ float m128_f32[0x4];
	/*0000*/ ULONGLONG m128_u64[0x2];
	/*0000*/ CHAR m128_i8[0x10];
	/*0000*/ SHORT m128_i16[0x8];
	/*0000*/ INT m128_i32[0x4];
	/*0000*/ LONGLONG m128_i64[0x2];
	/*0000*/ UCHAR m128_u8[0x10];
	/*0000*/ USHORT m128_u16[0x8];
	/*0000*/ UINT m128_u32[0x4];
	/*0010*/
};

struct __m128d {
	/*0000*/ double m128d_f64[0x2];
	/*0010*/
};

union __m128i {
	/*0000*/ CHAR m128i_i8[0x10];
	/*0000*/ SHORT m128i_i16[0x8];
	/*0000*/ INT m128i_i32[0x4];
	/*0000*/ LONGLONG m128i_i64[0x2];
	/*0000*/ UCHAR m128i_u8[0x10];
	/*0000*/ USHORT m128i_u16[0x8];
	/*0000*/ UINT m128i_u32[0x4];
	/*0000*/ ULONGLONG m128i_u64[0x2];
	/*0010*/
};

union __m256 {
	/*0000*/ float m256_f32[0x8];
	/*0020*/
};

struct __m256d {
	/*0000*/ double m256d_f64[0x4];
	/*0020*/
};

union __m256i {
	/*0000*/ CHAR m256i_i8[0x20];
	/*0000*/ SHORT m256i_i16[0x10];
	/*0000*/ INT m256i_i32[0x8];
	/*0000*/ LONGLONG m256i_i64[0x4];
	/*0000*/ UCHAR m256i_u8[0x20];
	/*0000*/ USHORT m256i_u16[0x10];
	/*0000*/ UINT m256i_u32[0x8];
	/*0000*/ ULONGLONG m256i_u64[0x4];
	/*0020*/
};

union __m512 {
	/*0000*/ float m512_f32[0x10];
	/*0040*/
};

struct __m512d {
	/*0000*/ double m512d_f64[0x8];
	/*0040*/
};

union __m512i {
	/*0000*/ CHAR m512i_i8[0x40];
	/*0000*/ SHORT m512i_i16[0x20];
	/*0000*/ INT m512i_i32[0x10];
	/*0000*/ LONGLONG m512i_i64[0x8];
	/*0000*/ UCHAR m512i_u8[0x40];
	/*0000*/ USHORT m512i_u16[0x20];
	/*0000*/ UINT m512i_u32[0x10];
	/*0000*/ ULONGLONG m512i_u64[0x8];
	/*0040*/
};

union __m64 {
	/*0000*/ ULONGLONG m64_u64;
	/*0000*/ float m64_f32[0x2];
	/*0000*/ CHAR m64_i8[0x8];
	/*0000*/ SHORT m64_i16[0x4];
	/*0000*/ INT m64_i32[0x2];
	/*0000*/ LONGLONG m64_i64;
	/*0000*/ UCHAR m64_u8[0x8];
	/*0000*/ USHORT m64_u16[0x4];
	/*0000*/ UINT m64_u32[0x2];
	/*0008*/
};

struct __midl_frag1000_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag1003_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag1011_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1046_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1061_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag1074_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1082_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1090_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag1094_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag1102_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1105_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0010*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0020*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0028*/ _NDR64_POINTER_FORMAT frag2;
			/*0038*/
		} frag2;
		/*0038*/ UCHAR frag3;
		/*0040*/
	} frag2;
	/*0040*/ _NDR64_ARRAY_ELEMENT_INFO frag3;
	/*0050*/
};

struct __midl_frag1111_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1124_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag1127_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag1129_t {
	/*0000*/ UINT frag1;
	/*0004*/ _NDR64_EXPR_OPERATOR frag2;
	/*0008*/ _NDR64_EXPR_VAR frag3;
	/*0010*/
};

struct __midl_frag1135_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag116_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1170_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1185_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag1198_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1206_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1212_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/
};

struct __midl_frag1214_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag1218_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag1219_t {
	/*0000*/ UINT frag1;
	/*0004*/ _NDR64_EXPR_VAR frag2;
	/*000c*/
};

struct __midl_frag1220_t {
	/*0000*/ UINT frag1;
	/*0004*/ _NDR64_EXPR_OPERATOR frag2;
	/*0008*/ _NDR64_EXPR_VAR frag3;
	/*0010*/
};

struct __midl_frag1221_t {
	/*0000*/ UINT frag1;
	/*0004*/ _NDR64_EXPR_NOOP frag2;
	/*0008*/ _NDR64_EXPR_CONST64 frag3;
	/*0018*/
};

struct __midl_frag1226_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1229_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0010*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0020*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0028*/ _NDR64_POINTER_FORMAT frag2;
			/*0038*/
		} frag2;
		/*0038*/ UCHAR frag3;
		/*0040*/
	} frag2;
	/*0040*/ _NDR64_ARRAY_ELEMENT_INFO frag3;
	/*0050*/
};

struct __midl_frag122_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1230_t {
	/*0000*/ UINT frag1;
	/*0004*/ _NDR64_EXPR_VAR frag2;
	/*000c*/
};

struct __midl_frag1251_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1266_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1271_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1276_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag12_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1318_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1323_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1328_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1338_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag1343_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag1349_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1376_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1401_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1422_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1440_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1445_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1449_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1454_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1459_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1464_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1468_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1473_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1486_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1491_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1510_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/ _NDR64_PARAM_FORMAT frag7;
	/*0078*/
};

struct __midl_frag1512_t {
	/*0000*/ _NDR64_STRUCTURE_HEADER_FORMAT frag1;
	/*0008*/
};

struct __midl_frag1517_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag1522_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1527_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1531_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1536_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1541_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag1546_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1551_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1555_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1560_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1565_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag1570_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1575_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1579_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1592_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag15_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag1601_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1611_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1618_t {
	/*0000*/ _NDR64_STRUCTURE_HEADER_FORMAT frag1;
	/*0008*/
};

struct __midl_frag1620_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1624_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1629_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1633_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1638_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1653_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1658_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag165_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/ _NDR64_PARAM_FORMAT frag7;
	/*0078*/
};

struct __midl_frag1663_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1670_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag1678_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1682_t {
	/*0000*/ _NDR64_STRUCTURE_HEADER_FORMAT frag1;
	/*0008*/
};

struct __midl_frag1684_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1741_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1745_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1750_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1755_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1759_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1764_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1769_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1773_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1778_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1783_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1797_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag17_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag1802_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1806_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1820_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1828_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1833_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1836_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1841_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1846_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1851_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1865_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1870_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1879_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag18_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag191_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag1929_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1932_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1936_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1939_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1944_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1948_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag194_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag1953_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1957_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1962_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag1967_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag1978_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag19_t {
	/*0000*/ _NDR64_STRUCTURE_HEADER_FORMAT frag1;
	/*0008*/
};

struct __midl_frag2010_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag202_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag237_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag252_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag265_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag26_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag273_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag281_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag285_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag293_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag296_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0010*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0020*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0028*/ _NDR64_POINTER_FORMAT frag2;
			/*0038*/
		} frag2;
		/*0038*/ UCHAR frag3;
		/*0040*/
	} frag2;
	/*0040*/ _NDR64_ARRAY_ELEMENT_INFO frag3;
	/*0050*/
};

struct __midl_frag2_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_BIND_AND_NOTIFY_EXTENSION frag2;
	/*0020*/ _NDR64_PARAM_FORMAT frag3;
	/*0030*/ _NDR64_PARAM_FORMAT frag4;
	/*0040*/ _NDR64_PARAM_FORMAT frag5;
	/*0050*/
};

struct __midl_frag315_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag318_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag326_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag34_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag361_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag376_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag389_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag397_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag405_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag409_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag417_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag41_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag420_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0010*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0020*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0028*/ _NDR64_POINTER_FORMAT frag2;
			/*0038*/
		} frag2;
		/*0038*/ UCHAR frag3;
		/*0040*/
	} frag2;
	/*0040*/ _NDR64_ARRAY_ELEMENT_INFO frag3;
	/*0050*/
};

struct __midl_frag426_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag436_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag441_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag454_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag45_t {
	/*0000*/ _NDR64_CONF_STRUCTURE_HEADER_FORMAT frag1;
	/*0010*/
};

struct __midl_frag462_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag46_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	/*0010*/ _NDR64_ARRAY_ELEMENT_INFO frag2;
	/*0020*/
};

struct __midl_frag470_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag474_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag47_t {
	/*0000*/ UINT frag1;
	/*0004*/ _NDR64_EXPR_VAR frag2;
	/*000c*/
};

struct __midl_frag482_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag485_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0010*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0020*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0028*/ _NDR64_POINTER_FORMAT frag2;
			/*0038*/
		} frag2;
		/*0038*/ UCHAR frag3;
		/*0040*/
	} frag2;
	/*0040*/ _NDR64_ARRAY_ELEMENT_INFO frag3;
	/*0050*/
};

struct __midl_frag491_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag504_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag507_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag515_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag54_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag550_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag565_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag578_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag586_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag594_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag598_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag5_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_BIND_AND_NOTIFY_EXTENSION frag2;
	/*0020*/ _NDR64_PARAM_FORMAT frag3;
	/*0030*/
};

struct __midl_frag606_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag609_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0010*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0020*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0028*/ _NDR64_POINTER_FORMAT frag2;
			/*0038*/
		} frag2;
		/*0038*/ UCHAR frag3;
		/*0040*/
	} frag2;
	/*0040*/ _NDR64_ARRAY_ELEMENT_INFO frag3;
	/*0050*/
};

struct __midl_frag60_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag615_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag61_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag628_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag631_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag639_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag66_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag674_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag684_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag689_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag702_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag70_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag710_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag718_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag722_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag730_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag733_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0010*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0020*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0028*/ _NDR64_POINTER_FORMAT frag2;
			/*0038*/
		} frag2;
		/*0038*/ UCHAR frag3;
		/*0040*/
	} frag2;
	/*0040*/ _NDR64_ARRAY_ELEMENT_INFO frag3;
	/*0050*/
};

struct __midl_frag739_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag752_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag755_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag763_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag798_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag7_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag80_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag813_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag826_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag834_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag83_t {
	/*0000*/ _NDR64_CONF_STRUCTURE_HEADER_FORMAT frag1;
	/*0010*/
};

struct __midl_frag842_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag846_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag84_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	/*0010*/ _NDR64_ARRAY_ELEMENT_INFO frag2;
	/*0020*/
};

struct __midl_frag854_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag857_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0010*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0020*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0028*/ _NDR64_POINTER_FORMAT frag2;
			/*0038*/
		} frag2;
		/*0038*/ UCHAR frag3;
		/*0040*/
	} frag2;
	/*0040*/ _NDR64_ARRAY_ELEMENT_INFO frag3;
	/*0050*/
};

struct __midl_frag85_t {
	/*0000*/ UINT frag1;
	/*0004*/ _NDR64_EXPR_VAR frag2;
	/*000c*/
};

struct __midl_frag863_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag876_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag879_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag887_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag8_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_BIND_AND_NOTIFY_EXTENSION frag2;
	/*0020*/ _NDR64_PARAM_FORMAT frag3;
	/*0030*/ _NDR64_PARAM_FORMAT frag4;
	/*0040*/
};

struct __midl_frag922_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag92_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag937_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/
};

struct __midl_frag950_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag958_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __midl_frag966_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/ _NDR64_PARAM_FORMAT frag5;
	/*0058*/ _NDR64_PARAM_FORMAT frag6;
	/*0068*/
};

struct __midl_frag970_t {
	/*0000*/ _NDR64_CONF_VAR_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0018*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0028*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0030*/ _NDR64_POINTER_FORMAT frag2;
			/*0040*/
		} frag2;
		/*0040*/ UCHAR frag3;
		/*0048*/
	} frag2;
	/*0048*/
};

struct __midl_frag978_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/ _NDR64_PARAM_FORMAT frag4;
	/*0048*/
};

struct __midl_frag981_t {
	/*0000*/ _NDR64_CONF_ARRAY_HEADER_FORMAT frag1;
	struct {
		/*0010*/ _NDR64_REPEAT_FORMAT frag1;
		struct {
			/*0020*/ _NDR64_POINTER_INSTANCE_HEADER_FORMAT frag1;
			/*0028*/ _NDR64_POINTER_FORMAT frag2;
			/*0038*/
		} frag2;
		/*0038*/ UCHAR frag3;
		/*0040*/
	} frag2;
	/*0040*/ _NDR64_ARRAY_ELEMENT_INFO frag3;
	/*0050*/
};

struct __midl_frag987_t {
	/*0000*/ _NDR64_PROC_FORMAT frag1;
	/*0018*/ _NDR64_PARAM_FORMAT frag2;
	/*0028*/ _NDR64_PARAM_FORMAT frag3;
	/*0038*/
};

struct __msxml6_ReferenceRemainingTypes__ {
	/*0000*/ tagDOMNodeType __tagDomNodeType__;
	/*0004*/ tagDOMNodeType __domNodeType__;
	/*0008*/ _SERVERXMLHTTP_OPTION __serverXmlHttpOptionEnum__;
	/*000c*/ _SERVERXMLHTTP_OPTION __serverXmlHttpOption__;
	/*0010*/ _SXH_SERVER_CERT_OPTION __serverCertOptionEnum__;
	/*0014*/ _SXH_SERVER_CERT_OPTION __serverCertOption__;
	/*0018*/ _SXH_PROXY_SETTING __proxySettingEnum__;
	/*001c*/ _SXH_PROXY_SETTING __proxySetting__;
	/*0020*/ _SOMITEMTYPE __somItemTypeEnum__;
	/*0024*/ _SOMITEMTYPE __somItemType__;
	/*0028*/ _SCHEMAUSE __schemaUseEnum__;
	/*002c*/ _SCHEMAUSE __schemaUse__;
	/*0030*/ _SCHEMADERIVATIONMETHOD __schemaDerivationMethodEnum__;
	/*0034*/ _SCHEMADERIVATIONMETHOD __schemaDerivationMethod__;
	/*0038*/ _SCHEMACONTENTTYPE __schemaContentTypeEnum__;
	/*003c*/ _SCHEMACONTENTTYPE __schemaContentType__;
	/*0040*/ _SCHEMAPROCESSCONTENTS __schemaProcessContentsEnum__;
	/*0044*/ _SCHEMAPROCESSCONTENTS __schemaProcessContents__;
	/*0048*/ _SCHEMAWHITESPACE __schemaWhitespaceEnum__;
	/*004c*/ _SCHEMAWHITESPACE __schemaWhitespace__;
	/*0050*/ _SCHEMATYPEVARIETY __schemaTypeVarietyEnum__;
	/*0054*/ _SCHEMATYPEVARIETY __schemaTypeVariety__;
	/*0058*/
};

struct __s_GUID {
	/*0000*/ ULONG Data1;
	/*0004*/ USHORT Data2;
	/*0006*/ USHORT Data3;
	/*0008*/ UCHAR Data4[0x8];
	/*0010*/
};

enum __scrt_module_type {
	dll = 0x0,
	exe = 0x1
};

struct __scrt_narrow_argv_policy {
	static INT configure_argv();
	/*0001*/
};

struct __scrt_narrow_environment_policy {
	static INT initialize_environment();
	/*0001*/
};

enum __scrt_native_startup_state {
	uninitialized = 0x0,
	initializing = 0x1,
	initialized = 0x2
};

struct __std_exception_data {
	/*0000*/ CHAR const * _What;
	/*0008*/ BOOLEAN _DoFree;
	/*0010*/
};

struct __std_type_info_data {
	/*0000*/ CHAR const * _UndecoratedName;
	/*0008*/ CHAR const _DecoratedName[0x1];
	void __std_type_info_data( __std_type_info_data && );
	void __std_type_info_data( __std_type_info_data const & );
	void __std_type_info_data();
	__std_type_info_data & operator=( __std_type_info_data && );
	__std_type_info_data & operator=( __std_type_info_data const & );
	/*0010*/
};

struct __type_info_node {
	/*0000*/ _SLIST_HEADER _Header;
	/*0010*/
};

struct __vcrt_assert_va_start_is_not_reference<__crt_locale_pointers * const> {
	/*0001*/
};

struct __vcrt_assert_va_start_is_not_reference<char const *> {
	/*0001*/
};

struct __vcrt_assert_va_start_is_not_reference<unsigned int> {
	/*0001*/
};

struct __vcrt_assert_va_start_is_not_reference<unsigned short const * const> {
	/*0001*/
};

struct __vcrt_assert_va_start_is_not_reference<unsigned short const *> {
	/*0001*/
};

struct __vcrt_va_list_is_reference<__crt_locale_pointers * const> {
	
	/*0001*/
};

struct __vcrt_va_list_is_reference<char const *> {
	
	/*0001*/
};

struct __vcrt_va_list_is_reference<unsigned int> {
	
	/*0001*/
};

struct __vcrt_va_list_is_reference<unsigned short const * const> {
	
	/*0001*/
};

struct __vcrt_va_list_is_reference<unsigned short const *> {
	
	/*0001*/
};

enum __x_Windows_CNetworking_CConnectivity_CCellularApnAuthenticationType {
	CellularApnAuthenticationType_None = 0x0,
	CellularApnAuthenticationType_Pap = 0x1,
	CellularApnAuthenticationType_Chap = 0x2,
	CellularApnAuthenticationType_Mschapv2 = 0x3
};

enum __x_Windows_CNetworking_CConnectivity_CConnectionProfileDeleteStatus {
	ConnectionProfileDeleteStatus_Success = 0x0,
	ConnectionProfileDeleteStatus_DeniedByUser = 0x1,
	ConnectionProfileDeleteStatus_DeniedBySystem = 0x2,
	ConnectionProfileDeleteStatus_UnknownError = 0x3
};

enum __x_Windows_CNetworking_CConnectivity_CDataUsageGranularity {
	DataUsageGranularity_PerMinute = 0x0,
	DataUsageGranularity_PerHour = 0x1,
	DataUsageGranularity_PerDay = 0x2,
	DataUsageGranularity_Total = 0x3
};

enum __x_Windows_CNetworking_CConnectivity_CDomainConnectivityLevel {
	DomainConnectivityLevel_None = 0x0,
	DomainConnectivityLevel_Unauthenticated = 0x1,
	DomainConnectivityLevel_Authenticated = 0x2
};

enum __x_Windows_CNetworking_CConnectivity_CNetworkAuthenticationType {
	NetworkAuthenticationType_None = 0x0,
	NetworkAuthenticationType_Unknown = 0x1,
	NetworkAuthenticationType_Open80211 = 0x2,
	NetworkAuthenticationType_SharedKey80211 = 0x3,
	NetworkAuthenticationType_Wpa = 0x4,
	NetworkAuthenticationType_WpaPsk = 0x5,
	NetworkAuthenticationType_WpaNone = 0x6,
	NetworkAuthenticationType_Rsna = 0x7,
	NetworkAuthenticationType_RsnaPsk = 0x8,
	NetworkAuthenticationType_Ihv = 0x9,
	NetworkAuthenticationType_Wpa3 = 0xa,
	NetworkAuthenticationType_Wpa3Sae = 0xb,
	NetworkAuthenticationType_Owe = 0xc
};

enum __x_Windows_CNetworking_CConnectivity_CNetworkConnectivityLevel {
	NetworkConnectivityLevel_None = 0x0,
	NetworkConnectivityLevel_LocalAccess = 0x1,
	NetworkConnectivityLevel_ConstrainedInternetAccess = 0x2,
	NetworkConnectivityLevel_InternetAccess = 0x3
};

enum __x_Windows_CNetworking_CConnectivity_CNetworkCostType {
	NetworkCostType_Unknown = 0x0,
	NetworkCostType_Unrestricted = 0x1,
	NetworkCostType_Fixed = 0x2,
	NetworkCostType_Variable = 0x3
};

enum __x_Windows_CNetworking_CConnectivity_CNetworkEncryptionType {
	NetworkEncryptionType_None = 0x0,
	NetworkEncryptionType_Unknown = 0x1,
	NetworkEncryptionType_Wep = 0x2,
	NetworkEncryptionType_Wep40 = 0x3,
	NetworkEncryptionType_Wep104 = 0x4,
	NetworkEncryptionType_Tkip = 0x5,
	NetworkEncryptionType_Ccmp = 0x6,
	NetworkEncryptionType_WpaUseGroup = 0x7,
	NetworkEncryptionType_RsnUseGroup = 0x8,
	NetworkEncryptionType_Ihv = 0x9
};

enum __x_Windows_CNetworking_CConnectivity_CTriStates {
	TriStates_DoNotCare = 0x0,
	TriStates_No = 0x1,
	TriStates_Yes = 0x2
};

enum __x_Windows_CNetworking_CConnectivity_CWwanNetworkIPKind {
	WwanNetworkIPKind_None = 0x0,
	WwanNetworkIPKind_Ipv4 = 0x1,
	WwanNetworkIPKind_Ipv6 = 0x2,
	WwanNetworkIPKind_Ipv4v6 = 0x3,
	WwanNetworkIPKind_Ipv4v6v4Xlat = 0x4
};

enum __x_Windows_CNetworking_CConnectivity_CWwanNetworkRegistrationState {
	WwanNetworkRegistrationState_None = 0x0,
	WwanNetworkRegistrationState_Deregistered = 0x1,
	WwanNetworkRegistrationState_Searching = 0x2,
	WwanNetworkRegistrationState_Home = 0x3,
	WwanNetworkRegistrationState_Roaming = 0x4,
	WwanNetworkRegistrationState_Partner = 0x5,
	WwanNetworkRegistrationState_Denied = 0x6
};

enum __x_Windows_CNetworking_CDomainNameType {
	DomainNameType_Suffix = 0x0,
	DomainNameType_FullyQualified = 0x1
};

struct _browseinfoW;

struct _complex {
	/*0000*/ double x;
	/*0008*/ double y;
	/*0010*/
};

struct _cpinfo {
	/*0000*/ UINT MaxCharSize;
	/*0004*/ UCHAR DefaultChar[0x2];
	/*0006*/ UCHAR LeadByte[0xc];
	/*0014*/
};

struct _cpinfoexA {
	/*0000*/ UINT MaxCharSize;
	/*0004*/ UCHAR DefaultChar[0x2];
	/*0006*/ UCHAR LeadByte[0xc];
	/*0012*/ WCHAR UnicodeDefaultChar;
	/*0014*/ UINT CodePage;
	/*0018*/ CHAR CodePageName[0x104];
	/*011c*/
};

struct _cpinfoexW {
	/*0000*/ UINT MaxCharSize;
	/*0004*/ UCHAR DefaultChar[0x2];
	/*0006*/ UCHAR LeadByte[0xc];
	/*0012*/ WCHAR UnicodeDefaultChar;
	/*0014*/ UINT CodePage;
	/*0018*/ WCHAR CodePageName[0x104];
	/*0220*/
};

enum _crt_app_type {
	_crt_unknown_app = 0x0,
	_crt_console_app = 0x1,
	_crt_gui_app = 0x2
};

enum _crt_argv_mode {
	_crt_argv_no_arguments = 0x0,
	_crt_argv_unexpanded_arguments = 0x1,
	_crt_argv_expanded_arguments = 0x2
};

enum _crt_exit_cleanup_mode {
	_crt_exit_full_cleanup = 0x0,
	_crt_exit_quick_cleanup = 0x1,
	_crt_exit_no_cleanup = 0x2
};

enum _crt_exit_return_mode {
	_crt_exit_terminate_process = 0x0,
	_crt_exit_return_to_caller = 0x1
};

struct _currencyfmtA {
	/*0000*/ UINT NumDigits;
	/*0004*/ UINT LeadingZero;
	/*0008*/ UINT Grouping;
	/*0010*/ CHAR * lpDecimalSep;
	/*0018*/ CHAR * lpThousandSep;
	/*0020*/ UINT NegativeOrder;
	/*0024*/ UINT PositiveOrder;
	/*0028*/ CHAR * lpCurrencySymbol;
	/*0030*/
};

struct _currencyfmtW {
	/*0000*/ UINT NumDigits;
	/*0004*/ UINT LeadingZero;
	/*0008*/ UINT Grouping;
	/*0010*/ WCHAR * lpDecimalSep;
	/*0018*/ WCHAR * lpThousandSep;
	/*0020*/ UINT NegativeOrder;
	/*0024*/ UINT PositiveOrder;
	/*0028*/ WCHAR * lpCurrencySymbol;
	/*0030*/
};

struct _devicemodeA {
	/*0000*/ UCHAR dmDeviceName[0x20];
	/*0020*/ USHORT dmSpecVersion;
	/*0022*/ USHORT dmDriverVersion;
	/*0024*/ USHORT dmSize;
	/*0026*/ USHORT dmDriverExtra;
	/*0028*/ ULONG dmFields;
	/*002c*/ SHORT dmOrientation;
	/*002e*/ SHORT dmPaperSize;
	/*0030*/ SHORT dmPaperLength;
	/*0032*/ SHORT dmPaperWidth;
	/*0034*/ SHORT dmScale;
	/*0036*/ SHORT dmCopies;
	/*0038*/ SHORT dmDefaultSource;
	/*003a*/ SHORT dmPrintQuality;
	/*002c*/ _POINTL dmPosition;
	/*0034*/ ULONG dmDisplayOrientation;
	/*0038*/ ULONG dmDisplayFixedOutput;
	/*003c*/ SHORT dmColor;
	/*003e*/ SHORT dmDuplex;
	/*0040*/ SHORT dmYResolution;
	/*0042*/ SHORT dmTTOption;
	/*0044*/ SHORT dmCollate;
	/*0046*/ UCHAR dmFormName[0x20];
	/*0066*/ USHORT dmLogPixels;
	/*0068*/ ULONG dmBitsPerPel;
	/*006c*/ ULONG dmPelsWidth;
	/*0070*/ ULONG dmPelsHeight;
	/*0074*/ ULONG dmDisplayFlags;
	/*0074*/ ULONG dmNup;
	/*0078*/ ULONG dmDisplayFrequency;
	/*007c*/ ULONG dmICMMethod;
	/*0080*/ ULONG dmICMIntent;
	/*0084*/ ULONG dmMediaType;
	/*0088*/ ULONG dmDitherType;
	/*008c*/ ULONG dmReserved1;
	/*0090*/ ULONG dmReserved2;
	/*0094*/ ULONG dmPanningWidth;
	/*0098*/ ULONG dmPanningHeight;
	/*009c*/
};

struct _devicemodeW {
	/*0000*/ WCHAR dmDeviceName[0x20];
	/*0040*/ USHORT dmSpecVersion;
	/*0042*/ USHORT dmDriverVersion;
	/*0044*/ USHORT dmSize;
	/*0046*/ USHORT dmDriverExtra;
	/*0048*/ ULONG dmFields;
	/*004c*/ SHORT dmOrientation;
	/*004e*/ SHORT dmPaperSize;
	/*0050*/ SHORT dmPaperLength;
	/*0052*/ SHORT dmPaperWidth;
	/*0054*/ SHORT dmScale;
	/*0056*/ SHORT dmCopies;
	/*0058*/ SHORT dmDefaultSource;
	/*005a*/ SHORT dmPrintQuality;
	/*004c*/ _POINTL dmPosition;
	/*0054*/ ULONG dmDisplayOrientation;
	/*0058*/ ULONG dmDisplayFixedOutput;
	/*005c*/ SHORT dmColor;
	/*005e*/ SHORT dmDuplex;
	/*0060*/ SHORT dmYResolution;
	/*0062*/ SHORT dmTTOption;
	/*0064*/ SHORT dmCollate;
	/*0066*/ WCHAR dmFormName[0x20];
	/*00a6*/ USHORT dmLogPixels;
	/*00a8*/ ULONG dmBitsPerPel;
	/*00ac*/ ULONG dmPelsWidth;
	/*00b0*/ ULONG dmPelsHeight;
	/*00b4*/ ULONG dmDisplayFlags;
	/*00b4*/ ULONG dmNup;
	/*00b8*/ ULONG dmDisplayFrequency;
	/*00bc*/ ULONG dmICMMethod;
	/*00c0*/ ULONG dmICMIntent;
	/*00c4*/ ULONG dmMediaType;
	/*00c8*/ ULONG dmDitherType;
	/*00cc*/ ULONG dmReserved1;
	/*00d0*/ ULONG dmReserved2;
	/*00d4*/ ULONG dmPanningWidth;
	/*00d8*/ ULONG dmPanningHeight;
	/*00dc*/
};

struct _div_t {
	/*0000*/ INT quot;
	/*0004*/ INT rem;
	/*0008*/
};

union _double_val {
	/*0000*/ USHORT _Sh[0x4];
	/*0000*/ double _Val;
	/*0008*/
};

struct _exception {
	/*0000*/ INT type;
	/*0008*/ CHAR * name;
	/*0010*/ double arg1;
	/*0018*/ double arg2;
	/*0020*/ double retval;
	/*0028*/
};

struct _flaglist {
	/*0000*/ ULONG cFlags;
	/*0004*/ ULONG ulFlag[0x1];
	/*0008*/
};

union _float_const {
	/*0000*/ USHORT _Word[0x4];
	/*0000*/ float _Float;
	/*0000*/ double _Double;
	/*0000*/ double _Long_double;
	/*0008*/
};

union _float_val {
	/*0000*/ USHORT _Sh[0x2];
	/*0000*/ float _Val;
	/*0004*/
};

struct _flowspec {
	/*0000*/ ULONG TokenRate;
	/*0004*/ ULONG TokenBucketSize;
	/*0008*/ ULONG PeakBandwidth;
	/*000c*/ ULONG Latency;
	/*0010*/ ULONG DelayVariation;
	/*0014*/ ULONG ServiceType;
	/*0018*/ ULONG MaxSduSize;
	/*001c*/ ULONG MinimumPolicedSize;
	/*0020*/
};

struct _heapinfo {
	/*0000*/ INT * _pentry;
	/*0008*/ ULONGLONG _size;
	/*0010*/ INT _useflag;
	/*0018*/
};

struct _iobuf {
	/*0000*/ void * _Placeholder;
	/*0008*/
};

struct _ldiv_t {
	/*0000*/ LONG quot;
	/*0004*/ LONG rem;
	/*0008*/
};

union _ldouble_val {
	/*0000*/ USHORT _Sh[0x4];
	/*0000*/ double _Val;
	/*0008*/
};

struct _lldiv_t {
	/*0000*/ LONGLONG quot;
	/*0008*/ LONGLONG rem;
	/*0010*/
};

struct _nlsversioninfo {
	/*0000*/ ULONG dwNLSVersionInfoSize;
	/*0004*/ ULONG dwNLSVersion;
	/*0008*/ ULONG dwDefinedVersion;
	/*000c*/ ULONG dwEffectiveId;
	/*0010*/ _GUID guidCustomVersion;
	/*0020*/
};

struct _nlsversioninfoex {
	/*0000*/ ULONG dwNLSVersionInfoSize;
	/*0004*/ ULONG dwNLSVersion;
	/*0008*/ ULONG dwDefinedVersion;
	/*000c*/ ULONG dwEffectiveId;
	/*0010*/ _GUID guidCustomVersion;
	/*0020*/
};

struct _numberfmtA {
	/*0000*/ UINT NumDigits;
	/*0004*/ UINT LeadingZero;
	/*0008*/ UINT Grouping;
	/*0010*/ CHAR * lpDecimalSep;
	/*0018*/ CHAR * lpThousandSep;
	/*0020*/ UINT NegativeOrder;
	/*0028*/
};

struct _numberfmtW {
	/*0000*/ UINT NumDigits;
	/*0004*/ UINT LeadingZero;
	/*0008*/ UINT Grouping;
	/*0010*/ WCHAR * lpDecimalSep;
	/*0018*/ WCHAR * lpThousandSep;
	/*0020*/ UINT NegativeOrder;
	/*0028*/
};

struct _onexit_table_t {
	/*0000*/ void (* * _first)();
	/*0008*/ void (* * _last)();
	/*0010*/ void (* * _end)();
	/*0018*/
};

struct _remoteMETAFILEPICT {
	/*0000*/ LONG mm;
	/*0004*/ LONG xExt;
	/*0008*/ LONG yExt;
	/*0010*/ _userHMETAFILE * hMF;
	/*0018*/
};

struct _s_ThrowInfo {
	/*0000*/ UINT attributes;
	/*0004*/ INT pmfnUnwind;
	/*0008*/ INT pForwardCompat;
	/*000c*/ INT pCatchableTypeArray;
	/*0010*/
};

struct _s__CatchableType {
	/*0000*/ UINT properties;
	/*0004*/ _TypeDescriptor * pType;
	/*000c*/ _PMD thisDisplacement;
	/*0018*/ INT sizeOrOffset;
	/*001c*/ void (* copyFunction)( void * );
	/*0024*/
};

struct _s__CatchableTypeArray {
	/*0000*/ INT nCatchableTypes;
	/*0004*/ _s__CatchableType const * arrayOfCatchableTypes[];
	/*0004*/
};

struct _s__RTTIBaseClassArray {
	/*0000*/ _s__RTTIBaseClassDescriptor const * arrayOfBaseClassDescriptors[];
	/*0004*/
};

struct _s__RTTIBaseClassDescriptor {
	/*0000*/ _TypeDescriptor * pTypeDescriptor;
	/*0008*/ ULONG numContainedBases;
	/*000c*/ _PMD where;
	/*0018*/ ULONG attributes;
	/*001c*/ _s__RTTIClassHierarchyDescriptor const * pClassDescriptor;
	/*0024*/
};

struct _s__RTTIClassHierarchyDescriptor {
	/*0000*/ ULONG signature;
	/*0004*/ ULONG attributes;
	/*0008*/ ULONG numBaseClasses;
	/*000c*/ _s__RTTIBaseClassArray const * pBaseClassArray;
	/*0014*/
};

struct _s__RTTICompleteObjectLocator2 {
	/*0000*/ ULONG signature;
	/*0004*/ ULONG offset;
	/*0008*/ ULONG cdOffset;
	/*000c*/ _TypeDescriptor * pTypeDescriptor;
	/*0014*/ _s__RTTIClassHierarchyDescriptor const * pClassDescriptor;
	/*001c*/ _s__RTTICompleteObjectLocator2 const * pSelf;
	/*0024*/
};

struct _s__ThrowInfo {
	/*0000*/ UINT attributes;
	/*0004*/ void (* pmfnUnwind)( void * );
	/*000c*/ INT (* pForwardCompat)( ... );
	/*0014*/ _s__CatchableTypeArray const * pCatchableTypeArray;
	/*001c*/
};

struct _shmapheader {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwSig;
	/*0008*/ ULONG dwSrcId;
	/*000c*/ ULONG dwDstId;
	/*0010*/
};

struct _sockaddr_in6_pair {
	/*0000*/ sockaddr_in6 * SourceAddress;
	/*0008*/ sockaddr_in6 * DestinationAddress;
	/*0010*/
};

struct _stat {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0014*/ LONG st_size;
	/*0018*/ LONGLONG st_atime;
	/*0020*/ LONGLONG st_mtime;
	/*0028*/ LONGLONG st_ctime;
	/*0030*/
};

struct _stat32 {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0014*/ LONG st_size;
	/*0018*/ LONG st_atime;
	/*001c*/ LONG st_mtime;
	/*0020*/ LONG st_ctime;
	/*0024*/
};

struct _stat32i64 {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0018*/ LONGLONG st_size;
	/*0020*/ LONG st_atime;
	/*0024*/ LONG st_mtime;
	/*0028*/ LONG st_ctime;
	/*0030*/
};

struct _stat64 {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0018*/ LONGLONG st_size;
	/*0020*/ LONGLONG st_atime;
	/*0028*/ LONGLONG st_mtime;
	/*0030*/ LONGLONG st_ctime;
	/*0038*/
};

struct _stat64i32 {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0014*/ LONG st_size;
	/*0018*/ LONGLONG st_atime;
	/*0020*/ LONGLONG st_mtime;
	/*0028*/ LONGLONG st_ctime;
	/*0030*/
};

struct _stati64 {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0018*/ LONGLONG st_size;
	/*0020*/ LONGLONG st_atime;
	/*0028*/ LONGLONG st_mtime;
	/*0030*/ LONGLONG st_ctime;
	/*0038*/
};

enum _system_handle_t {
	SYSTEM_HANDLE_FILE = 0x0,
	SYSTEM_HANDLE_SEMAPHORE = 0x1,
	SYSTEM_HANDLE_EVENT = 0x2,
	SYSTEM_HANDLE_MUTEX = 0x3,
	SYSTEM_HANDLE_PROCESS = 0x4,
	SYSTEM_HANDLE_TOKEN = 0x5,
	SYSTEM_HANDLE_SECTION = 0x6,
	SYSTEM_HANDLE_REG_KEY = 0x7,
	SYSTEM_HANDLE_THREAD = 0x8,
	SYSTEM_HANDLE_COMPOSITION_OBJECT = 0x9,
	SYSTEM_HANDLE_SOCKET = 0xa,
	SYSTEM_HANDLE_JOB = 0xb,
	SYSTEM_HANDLE_PIPE = 0xc,
	SYSTEM_HANDLE_MAX = 0xc,
	SYSTEM_HANDLE_INVALID = 0xff
};

struct _tagAUTHENTICATEINFO {
	/*0000*/ ULONG dwFlags;
	/*0004*/ ULONG dwReserved;
	/*0008*/
};

struct _tagBINDINFO {
	/*0000*/ ULONG cbSize;
	/*0008*/ WCHAR * szExtraInfo;
	/*0010*/ tagSTGMEDIUM stgmedData;
	/*0028*/ ULONG grfBindInfoF;
	/*002c*/ ULONG dwBindVerb;
	/*0030*/ WCHAR * szCustomVerb;
	/*0038*/ ULONG cbstgmedData;
	/*003c*/ ULONG dwOptions;
	/*0040*/ ULONG dwOptionsFlags;
	/*0044*/ ULONG dwCodePage;
	/*0048*/ _SECURITY_ATTRIBUTES securityAttributes;
	/*0060*/ _GUID iid;
	/*0070*/ IUnknown * pUnk;
	/*0078*/ ULONG dwReserved;
	/*0080*/
};

struct _tagCODEBASEHOLD {
	/*0000*/ ULONG cbSize;
	/*0008*/ WCHAR * szDistUnit;
	/*0010*/ WCHAR * szCodeBase;
	/*0018*/ ULONG dwVersionMS;
	/*001c*/ ULONG dwVersionLS;
	/*0020*/ ULONG dwStyle;
	/*0028*/
};

struct _tagDATAINFO {
	/*0000*/ ULONG ulTotalSize;
	/*0004*/ ULONG ulavrPacketSize;
	/*0008*/ ULONG ulConnectSpeed;
	/*000c*/ ULONG ulProcessorSpeed;
	/*0010*/
};

struct _tagEDITBALLOONTIP {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR const * pszTitle;
	/*0010*/ WCHAR const * pszText;
	/*0018*/ INT ttiIcon;
	/*0020*/
};

enum _tagEXPR_TOKEN {
	FC_EXPR_START = 0x0,
	FC_EXPR_ILLEGAL = 0x0,
	FC_EXPR_CONST32 = 0x1,
	FC_EXPR_CONST64 = 0x2,
	FC_EXPR_VAR = 0x3,
	FC_EXPR_OPER = 0x4,
	FC_EXPR_NOOP = 0x5,
	FC_EXPR_END = 0x6
};

struct _tagHIT_LOGGING_INFO {
	/*0000*/ ULONG dwStructSize;
	/*0008*/ CHAR * lpszLoggedUrlName;
	/*0010*/ _SYSTEMTIME StartTime;
	/*0020*/ _SYSTEMTIME EndTime;
	/*0030*/ CHAR * lpszExtendedInfo;
	/*0038*/
};

enum _tagINTERNETFEATURELIST {
	FEATURE_OBJECT_CACHING = 0x0,
	FEATURE_ZONE_ELEVATION = 0x1,
	FEATURE_MIME_HANDLING = 0x2,
	FEATURE_MIME_SNIFFING = 0x3,
	FEATURE_WINDOW_RESTRICTIONS = 0x4,
	FEATURE_WEBOC_POPUPMANAGEMENT = 0x5,
	FEATURE_BEHAVIORS = 0x6,
	FEATURE_DISABLE_MK_PROTOCOL = 0x7,
	FEATURE_LOCALMACHINE_LOCKDOWN = 0x8,
	FEATURE_SECURITYBAND = 0x9,
	FEATURE_RESTRICT_ACTIVEXINSTALL = 0xa,
	FEATURE_VALIDATE_NAVIGATE_URL = 0xb,
	FEATURE_RESTRICT_FILEDOWNLOAD = 0xc,
	FEATURE_ADDON_MANAGEMENT = 0xd,
	FEATURE_PROTOCOL_LOCKDOWN = 0xe,
	FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 0xf,
	FEATURE_SAFE_BINDTOOBJECT = 0x10,
	FEATURE_UNC_SAVEDFILECHECK = 0x11,
	FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 0x12,
	FEATURE_TABBED_BROWSING = 0x13,
	FEATURE_SSLUX = 0x14,
	FEATURE_DISABLE_NAVIGATION_SOUNDS = 0x15,
	FEATURE_DISABLE_LEGACY_COMPRESSION = 0x16,
	FEATURE_FORCE_ADDR_AND_STATUS = 0x17,
	FEATURE_XMLHTTP = 0x18,
	FEATURE_DISABLE_TELNET_PROTOCOL = 0x19,
	FEATURE_FEEDS = 0x1a,
	FEATURE_BLOCK_INPUT_PROMPTS = 0x1b,
	FEATURE_ENTRY_COUNT = 0x1c
};

enum _tagOIBDG_FLAGS {
	OIBDG_APARTMENTTHREADED = 0x100,
	OIBDG_DATAONLY = 0x1000
};

enum _tagPARSEACTION {
	PARSE_CANONICALIZE = 0x1,
	PARSE_FRIENDLY = 0x2,
	PARSE_SECURITY_URL = 0x3,
	PARSE_ROOTDOCUMENT = 0x4,
	PARSE_DOCUMENT = 0x5,
	PARSE_ANCHOR = 0x6,
	PARSE_ENCODE_IS_UNESCAPE = 0x7,
	PARSE_DECODE_IS_ESCAPE = 0x8,
	PARSE_PATH_FROM_URL = 0x9,
	PARSE_URL_FROM_PATH = 0xa,
	PARSE_MIME = 0xb,
	PARSE_SERVER = 0xc,
	PARSE_SCHEMA = 0xd,
	PARSE_SITE = 0xe,
	PARSE_DOMAIN = 0xf,
	PARSE_LOCATION = 0x10,
	PARSE_SECURITY_DOMAIN = 0x11,
	PARSE_ESCAPE = 0x12,
	PARSE_UNESCAPE = 0x13
};

enum _tagPI_FLAGS {
	PI_PARSE_URL = 0x1,
	PI_FILTER_MODE = 0x2,
	PI_FORCE_ASYNC = 0x4,
	PI_USE_WORKERTHREAD = 0x8,
	PI_MIMEVERIFICATION = 0x10,
	PI_CLSIDLOOKUP = 0x20,
	PI_DATAPROGRESS = 0x40,
	PI_SYNCHRONOUS = 0x80,
	PI_APARTMENTTHREADED = 0x100,
	PI_CLASSINSTALL = 0x200,
	PI_PASSONBINDCTX = 0x2000,
	PI_NOMIMEHANDLER = 0x8000,
	PI_LOADAPPDIRECT = 0x4000,
	PD_FORCE_SWITCH = 0x10000,
	PI_PREFERDEFAULTHANDLER = 0x20000
};

struct _tagPROTOCOLDATA {
	/*0000*/ ULONG grfFlags;
	/*0004*/ ULONG dwState;
	/*0008*/ void * pData;
	/*0010*/ ULONG cbData;
	/*0018*/
};

struct _tagPROTOCOLFILTERDATA {
	/*0000*/ ULONG cbSize;
	/*0008*/ IInternetProtocolSink * pProtocolSink;
	/*0010*/ IInternetProtocol * pProtocol;
	/*0018*/ IUnknown * pUnk;
	/*0020*/ ULONG dwFilterFlags;
	/*0028*/
};

struct _tagPROTOCOL_ARGUMENT {
	/*0000*/ WCHAR const * szMethod;
	/*0008*/ WCHAR const * szTargetUrl;
	/*0010*/
};

enum _tagPSUACTION {
	PSU_DEFAULT = 0x1,
	PSU_SECURITY_URL_ONLY = 0x2
};

enum _tagQUERYOPTION {
	QUERY_EXPIRATION_DATE = 0x1,
	QUERY_TIME_OF_LAST_CHANGE = 0x2,
	QUERY_CONTENT_ENCODING = 0x3,
	QUERY_CONTENT_TYPE = 0x4,
	QUERY_REFRESH = 0x5,
	QUERY_RECOMBINE = 0x6,
	QUERY_CAN_NAVIGATE = 0x7,
	QUERY_USES_NETWORK = 0x8,
	QUERY_IS_CACHED = 0x9,
	QUERY_IS_INSTALLEDENTRY = 0xa,
	QUERY_IS_CACHED_OR_MAPPED = 0xb,
	QUERY_USES_CACHE = 0xc,
	QUERY_IS_SECURE = 0xd,
	QUERY_IS_SAFE = 0xe,
	QUERY_USES_HISTORYFOLDER = 0xf,
	QUERY_IS_CACHED_AND_USABLE_OFFLINE = 0x10
};

struct _tagRemBINDINFO {
	/*0000*/ ULONG cbSize;
	/*0008*/ WCHAR * szExtraInfo;
	/*0010*/ ULONG grfBindInfoF;
	/*0014*/ ULONG dwBindVerb;
	/*0018*/ WCHAR * szCustomVerb;
	/*0020*/ ULONG cbstgmedData;
	/*0024*/ ULONG dwOptions;
	/*0028*/ ULONG dwOptionsFlags;
	/*002c*/ ULONG dwCodePage;
	/*0030*/ _REMSECURITY_ATTRIBUTES securityAttributes;
	/*003c*/ _GUID iid;
	/*0050*/ IUnknown * pUnk;
	/*0058*/ ULONG dwReserved;
	/*0060*/
};

enum _tagSHARE_EVENT {
	SHARE_EVT_ITEM_SHARED = 0x0,
	SHARE_EVT_ITEM_UNSHARED = 0x1,
	SHARE_EVT_ERR_ITEM_LOCATION = 0x2,
	SHARE_EVT_ERR_NO_WRITE_DAC = 0x3,
	SHARE_EVT_ERR_INHERITED_PERM = 0x4,
	SHARE_EVT_ERR_CORRUPTED_LIBRARY = 0x5,
	SHARE_EVT_ERR_EXCLUSION_FAILED = 0x6,
	SHARE_EVT_ERR_ROOTDRIVE = 0x7,
	SHARE_EVT_ERR_SYSTEM_LOCATION = 0x8,
	SHARE_EVT_ERR_FOLDER_UNAVAILABLE_SCOPE = 0x9,
	SHARE_EVT_WARN_PUBLISH_FAILED = 0xa,
	SHARE_EVT_WARN_UNPUBLISH_FAILED = 0xb,
	SHARE_EVT_WARN_UPDATE_FAILED = 0xc,
	SHARE_EVT_WARN_NOT_SUPPORTED_SCOPE = 0xd,
	SHARE_EVT_WARN_FILESYSTEM_ACLS_NOT_SUPPORTED = 0xe,
	SHARE_EVT_WARN_ITEM_FILTERED = 0xf
};

enum _tagSLDATATYPE {
	SL_DATA_NONE = 0x0,
	SL_DATA_SZ = 0x1,
	SL_DATA_DWORD = 0x4,
	SL_DATA_BINARY = 0x3,
	SL_DATA_MULTI_SZ = 0x7,
	SL_DATA_SUM = 0x64
};

struct _tagSOFTDISTINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG dwAdState;
	/*0010*/ WCHAR * szTitle;
	/*0018*/ WCHAR * szAbstract;
	/*0020*/ WCHAR * szHREF;
	/*0028*/ ULONG dwInstalledVersionMS;
	/*002c*/ ULONG dwInstalledVersionLS;
	/*0030*/ ULONG dwUpdateVersionMS;
	/*0034*/ ULONG dwUpdateVersionLS;
	/*0038*/ ULONG dwAdvertisedVersionMS;
	/*003c*/ ULONG dwAdvertisedVersionLS;
	/*0040*/ ULONG dwReserved;
	/*0048*/
};

enum _tagSPCALL_FILE_INTEGRITY_STATE {
	SPCALL_FILE_INTEGRITY_STATE_NOT_FOUND = 0x0,
	SPCALL_FILE_INTEGRITY_STATE_INVALID = 0x1,
	SPCALL_FILE_INTEGRITY_STATE_PARTIAL_TRUST = 0x2,
	SPCALL_FILE_INTEGRITY_STATE_FULL_TRUST = 0x3
};

struct _tagSP_FILE_USN_DATA {
	/*0000*/ ULONGLONG ullJournalId;
	/*0008*/ LONGLONG usnFileUSN;
	/*0010*/
};

struct _tagStartParam {
	/*0000*/ _GUID iid;
	/*0010*/ IBindCtx * pIBindCtx;
	/*0018*/ IUnknown * pItf;
	/*0020*/
};

struct _tagpropertykey {
	/*0000*/ _GUID fmtid;
	/*0010*/ ULONG pid;
	/*0014*/
};

struct _teredoctrl_MIDL_PROC_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x5b];
	/*005e*/
};

struct _teredoctrl_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x2b];
	/*002e*/
};

struct _teredodiag_MIDL_PROC_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x4f];
	/*0052*/
};

struct _teredodiag_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x3];
	/*0006*/
};

struct _timespec32 {
	/*0000*/ LONG tv_sec;
	/*0004*/ LONG tv_nsec;
	/*0008*/
};

struct _timespec64 {
	/*0000*/ LONGLONG tv_sec;
	/*0008*/ LONG tv_nsec;
	/*0010*/
};

struct _tlgCharTraits<char16_t> {
	static CHAR16 const * empty();
	static ULONGLONG length( CHAR16 const * );
	/*0001*/
};

struct _tlgCharTraits<char> {
	static CHAR const * empty();
	static ULONGLONG length( CHAR const * );
	/*0001*/
};

struct _tlgCharTraits<unsigned short> {
	static WCHAR const * empty();
	static ULONGLONG length( WCHAR const * );
	/*0001*/
};

struct _tlgDataDescInit<_tlgIndexSequence<0> > {
	/*0001*/
};

struct _tlgDataDescInit<_tlgIndexSequence<1,0> > {
	/*0001*/
};

struct _tlgDataDescInit<_tlgIndexSequence<12,0,1,2,3,4,5,6,7,8,9,10,11> > {
	/*0001*/
};

struct _tlgDataDescInit<_tlgIndexSequence<4,0,1,2,3> > {
	/*0001*/
};

struct _tlgDataDescInit<_tlgIndexSequence<7,0,1,2,3,4,5,6> > {
	/*0001*/
};

struct _tlgDataDescInit<_tlgIndexSequence<9,0,1,2,3,4,5,6,7,8> > {
	/*0001*/
};

struct _tlgEventMetadata_t {
	/*0000*/ UCHAR Type;
	/*0001*/ UCHAR Channel;
	/*0002*/ UCHAR Level;
	/*0003*/ UCHAR Opcode;
	/*0004*/ ULONGLONG Keyword;
	/*000c*/ USHORT RemainingSize;
	/*000e*/
};

struct _tlgIndexSequence<0> {
	static UINT const size;
	/*0001*/
};

struct _tlgIndexSequence<1,0> {
	static UINT const size;
	/*0001*/
};

struct _tlgIndexSequence<12,0,1,2,3,4,5,6,7,8,9,10,11> {
	static UINT const size;
	/*0001*/
};

struct _tlgIndexSequence<4,0,1,2,3> {
	static UINT const size;
	/*0001*/
};

struct _tlgIndexSequence<7,0,1,2,3,4,5,6> {
	static UINT const size;
	/*0001*/
};

struct _tlgIndexSequence<9,0,1,2,3,4,5,6,7,8> {
	static UINT const size;
	/*0001*/
};

struct _tlgIntegralConstant<unsigned __int64,70368744177664> {
	static ULONGLONG const value;
	/*0001*/
};

struct _tlgIntegralConstant<unsigned char,1> {
	static UCHAR const value;
	/*0001*/
};

struct _tlgIntegralConstant<unsigned char,2> {
	static UCHAR const value;
	/*0001*/
};

struct _tlgIntegralConstant<unsigned char,5> {
	static UCHAR const value;
	/*0001*/
};

struct _tlgProviderMetadata_t {
	/*0000*/ UCHAR Type;
	/*0001*/ _GUID ProviderId;
	/*0011*/ USHORT RemainingSize;
	/*0013*/
};

struct _tlgProvider_t {
	/*0000*/ UINT LevelPlus1;
	/*0008*/ USHORT const __unaligned * ProviderMetadataPtr;
	/*0010*/ ULONGLONG KeywordAny;
	/*0018*/ ULONGLONG KeywordAll;
	/*0020*/ ULONGLONG RegHandle;
	/*0028*/ void (* EnableCallback)( _GUID const * , ULONG , UCHAR , ULONGLONG , ULONGLONG , _EVENT_FILTER_DESCRIPTOR * , void * );
	/*0030*/ void * CallbackContext;
	/*0038*/
};

struct _tlgStorageTypeForSize<1> {
	/*0001*/
};

struct _tlgStorageTypeForSize<2> {
	/*0001*/
};

struct _tlgStorageTypeForSize<4> {
	/*0001*/
};

struct _tlgStorageTypeForSize<8> {
	/*0001*/
};

struct _tlgTagEnc<0,1> {
	static UCHAR const value;
	/*0001*/
};

struct _tlgTypeMapBase<_FILETIME> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<_GUID> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<_SID *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<_SID const *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<_SYSTEMTIME> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<__int64> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<bool> {
	static BOOLEAN const _tlgIsSimple;
	static USHORT const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<char *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<char const *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<char16_t *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<char16_t const *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<char16_t> {
	static BOOLEAN const _tlgIsSimple;
	static USHORT const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<char> {
	static BOOLEAN const _tlgIsSimple;
	static USHORT const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<double> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<float> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<int> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<long> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<short> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<signed char> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<unsigned __int64> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<unsigned char> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<unsigned int> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<unsigned long> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<unsigned short *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<unsigned short const *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<unsigned short> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<void *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<void const *> {
	static BOOLEAN const _tlgIsSimple;
	static UCHAR const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgTypeMapBase<wchar_t> {
	static BOOLEAN const _tlgIsSimple;
	static USHORT const _tlgType0;
	static USHORT const _tlgType1;
	/*0001*/
};

struct _tlgWrapSid<_SID> {
	static UINT const DataDescCount;
	/*0000*/ _SID const * const Sid;
	void _tlgWrapSid<_SID>( _SID const * );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0008*/
};

struct _tlgWrapSz<char16_t> {
	static UINT const DataDescCount;
	/*0000*/ CHAR16 const * const Psz;
	void _tlgWrapSz<char16_t>( CHAR16 const * );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0008*/
};

struct _tlgWrapSz<char> {
	static UINT const DataDescCount;
	/*0000*/ CHAR const * const Psz;
	void _tlgWrapSz<char>( CHAR const * );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0008*/
};

struct _tlgWrapSz<unsigned short> {
	static UINT const DataDescCount;
	/*0000*/ WCHAR const * const Psz;
	void _tlgWrapSz<unsigned short>( WCHAR const * );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0008*/
};

struct _tlgWrapperBinary {
	static UINT const DataDescCount;
	/*0000*/ void const * const Ptr;
	/*0008*/ USHORT const Size;
	void _tlgWrapperBinary( void const * , USHORT );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0010*/
};

struct _tlgWrapperByRef<16> {
	static UINT const DataDescCount;
	/*0000*/ void const * const Ptr;
	void _tlgWrapperByRef<16>( void const * );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0008*/
};

struct _tlgWrapperByVal<1> {
	static UINT const DataDescCount;
	/*0000*/ UCHAR const Value;
	void _tlgWrapperByVal<1>( void const * );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0001*/
};

struct _tlgWrapperByVal<4> {
	static UINT const DataDescCount;
	/*0000*/ UINT const Value;
	void _tlgWrapperByVal<4>( void const * );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0004*/
};

struct _tlgWrapperByVal<8> {
	static UINT const DataDescCount;
	/*0000*/ ULONGLONG const Value;
	void _tlgWrapperByVal<8>( void const * );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0008*/
};

struct _tlgWrapperPtrSize {
	static UINT const DataDescCount;
	/*0000*/ void const * const Ptr;
	/*0008*/ ULONG const Size;
	void _tlgWrapperPtrSize( void const * , ULONG );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0010*/
};

struct _tlgWrapperPtrSizeType {
	static UINT const DataDescCount;
	/*0000*/ void const * const Ptr;
	/*0008*/ ULONG const Size;
	/*000c*/ ULONG const Reserved;
	void _tlgWrapperPtrSizeType( void const * , ULONG , ULONG );
	void * Fill( _EVENT_DATA_DESCRIPTOR * ) const;
	/*0010*/
};

struct _tlgWriteTemplate<long __cdecl(_tlgProvider_t const *,void const *,_GUID const *,_GUID const *,unsigned int,_EVENT_DATA_DESCRIPTOR *),&_tlgWriteTransfer_EtwEventWriteTransfer,_GUID const *,_GUID const *> {
	/*0001*/
};

struct _tlgWriteTemplate<long __cdecl(_tlgProvider_t const *,void const *,_GUID const *,_GUID const *,unsigned int,_EVENT_DATA_DESCRIPTOR *),&_tlgWriteTransfer_EventWriteTransfer,_GUID const *,_GUID const *> {
	/*0001*/
};

struct _tlgWriteTemplate<long __cdecl(_tlgProvider_t const *,void const *,void const *,unsigned int,_EVENT_DATA_DESCRIPTOR *),&_tlgWriteAgg,void const *> {
	/*0001*/
};

struct _userBITMAP {
	/*0000*/ LONG bmType;
	/*0004*/ LONG bmWidth;
	/*0008*/ LONG bmHeight;
	/*000c*/ LONG bmWidthBytes;
	/*0010*/ USHORT bmPlanes;
	/*0012*/ USHORT bmBitsPixel;
	/*0014*/ ULONG cbSize;
	/*0018*/ UCHAR pBuffer[0x1];
	/*001c*/
};

struct _userCLIPFORMAT {

	union __MIDL_IWinTypes_0001 {
		/*0000*/ ULONG dwValue;
		/*0000*/ WCHAR * pwszName;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0001 u;
	/*0010*/
};

struct _userFLAG_STGMEDIUM {
	/*0000*/ LONG ContextFlags;
	/*0004*/ LONG fPassOwnership;
	/*0008*/ _userSTGMEDIUM Stgmed;
	/*0010*/
};

struct _userHBITMAP {

	union __MIDL_IWinTypes_0007 {
		/*0000*/ LONG hInproc;
		/*0000*/ _userBITMAP * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0007 u;
	/*0010*/
};

struct _userHENHMETAFILE {

	union __MIDL_IWinTypes_0006 {
		/*0000*/ LONG hInproc;
		/*0000*/ _BYTE_BLOB * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0006 u;
	/*0010*/
};

struct _userHGLOBAL {

	union __MIDL_IWinTypes_0003 {
		/*0000*/ LONG hInproc;
		/*0000*/ _FLAGGED_BYTE_BLOB * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0003 u;
	/*0010*/
};

struct _userHMETAFILE {

	union __MIDL_IWinTypes_0004 {
		/*0000*/ LONG hInproc;
		/*0000*/ _BYTE_BLOB * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0004 u;
	/*0010*/
};

struct _userHMETAFILEPICT {

	union __MIDL_IWinTypes_0005 {
		/*0000*/ LONG hInproc;
		/*0000*/ _remoteMETAFILEPICT * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0005 u;
	/*0010*/
};

struct _userHPALETTE {

	union __MIDL_IWinTypes_0008 {
		/*0000*/ LONG hInproc;
		/*0000*/ tagLOGPALETTE * hRemote;
		/*0000*/ LONGLONG hInproc64;
		/*0008*/
	};

	/*0000*/ LONG fContext;
	/*0008*/ __MIDL_IWinTypes_0008 u;
	/*0010*/
};

struct _userSTGMEDIUM {

	struct _STGMEDIUM_UNION {
	
		union __MIDL_IAdviseSink_0003 {
			/*0000*/ _userHMETAFILEPICT * hMetaFilePict;
			/*0000*/ _userHENHMETAFILE * hHEnhMetaFile;
			/*0000*/ _GDI_OBJECT * hGdiHandle;
			/*0000*/ _userHGLOBAL * hGlobal;
			/*0000*/ WCHAR * lpszFileName;
			/*0000*/ _BYTE_BLOB * pstm;
			/*0000*/ _BYTE_BLOB * pstg;
			/*0008*/
		};

		/*0000*/ ULONG tymed;
		/*0008*/ __MIDL_IAdviseSink_0003 u;
		/*0010*/
	};

	/*0000*/ IUnknown * pUnkForRelease;
	/*0008*/
};

struct _wfinddata32_t {
	/*0000*/ UINT attrib;
	/*0004*/ LONG time_create;
	/*0008*/ LONG time_access;
	/*000c*/ LONG time_write;
	/*0010*/ ULONG size;
	/*0014*/ WCHAR name[0x104];
	/*021c*/
};

struct _wfinddata32i64_t {
	/*0000*/ UINT attrib;
	/*0004*/ LONG time_create;
	/*0008*/ LONG time_access;
	/*000c*/ LONG time_write;
	/*0010*/ LONGLONG size;
	/*0018*/ WCHAR name[0x104];
	/*0220*/
};

struct _wfinddata64_t {
	/*0000*/ UINT attrib;
	/*0008*/ LONGLONG time_create;
	/*0010*/ LONGLONG time_access;
	/*0018*/ LONGLONG time_write;
	/*0020*/ LONGLONG size;
	/*0028*/ WCHAR name[0x104];
	/*0230*/
};

struct _wfinddata64i32_t {
	/*0000*/ UINT attrib;
	/*0008*/ LONGLONG time_create;
	/*0010*/ LONGLONG time_access;
	/*0018*/ LONGLONG time_write;
	/*0020*/ ULONG size;
	/*0024*/ WCHAR name[0x104];
	/*0230*/
};

struct _wfinddata_t {
	/*0000*/ UINT attrib;
	/*0008*/ LONGLONG time_create;
	/*0010*/ LONGLONG time_access;
	/*0018*/ LONGLONG time_write;
	/*0020*/ ULONG size;
	/*0024*/ WCHAR name[0x104];
	/*0230*/
};

struct _wfinddatai64_t {
	/*0000*/ UINT attrib;
	/*0008*/ LONGLONG time_create;
	/*0010*/ LONGLONG time_access;
	/*0018*/ LONGLONG time_write;
	/*0020*/ LONGLONG size;
	/*0028*/ WCHAR name[0x104];
	/*0230*/
};

struct _windows2Enetworking2Eprivate_MIDL_PROC_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x199];
	/*019c*/
};

struct _windows2Enetworking2Eprivate_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0xe5];
	/*00e8*/
};

struct _windows2Enetworking_MIDL_PROC_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0x2c7d];
	/*2c80*/
};

struct _windows2Enetworking_MIDL_TYPE_FORMAT_STRING {
	/*0000*/ SHORT Pad;
	/*0002*/ UCHAR Format[0xc09];
	/*0c0c*/
};

struct _wireBRECORD {
	/*0000*/ ULONG fFlags;
	/*0004*/ ULONG clSize;
	/*0008*/ IRecordInfo * pRecInfo;
	/*0010*/ UCHAR * pRecord;
	/*0018*/
};

struct _wireSAFEARRAY {
	/*0000*/ USHORT cDims;
	/*0002*/ USHORT fFeatures;
	/*0004*/ ULONG cbElements;
	/*0008*/ ULONG cLocks;
	/*0010*/ _wireSAFEARRAY_UNION uArrayStructs;
	/*0038*/ tagSAFEARRAYBOUND rgsabound[0x1];
	/*0040*/
};

struct _wireSAFEARRAY_UNION {

	union __MIDL_IOleAutomationTypes_0001 {
		/*0000*/ _wireSAFEARR_BSTR BstrStr;
		/*0000*/ _wireSAFEARR_UNKNOWN UnknownStr;
		/*0000*/ _wireSAFEARR_DISPATCH DispatchStr;
		/*0000*/ _wireSAFEARR_VARIANT VariantStr;
		/*0000*/ _wireSAFEARR_BRECORD RecordStr;
		/*0000*/ _wireSAFEARR_HAVEIID HaveIidStr;
		/*0000*/ _BYTE_SIZEDARR ByteStr;
		/*0000*/ _SHORT_SIZEDARR WordStr;
		/*0000*/ _LONG_SIZEDARR LongStr;
		/*0000*/ _HYPER_SIZEDARR HyperStr;
		/*0020*/
	};

	/*0000*/ ULONG sfType;
	/*0008*/ __MIDL_IOleAutomationTypes_0001 u;
	/*0028*/
};

struct _wireSAFEARR_BRECORD {
	/*0000*/ ULONG Size;
	/*0008*/ _wireBRECORD * * aRecord;
	/*0010*/
};

struct _wireSAFEARR_BSTR {
	/*0000*/ ULONG Size;
	/*0008*/ _FLAGGED_WORD_BLOB * * aBstr;
	/*0010*/
};

struct _wireSAFEARR_DISPATCH {
	/*0000*/ ULONG Size;
	/*0008*/ IDispatch * * apDispatch;
	/*0010*/
};

struct _wireSAFEARR_HAVEIID {
	/*0000*/ ULONG Size;
	/*0008*/ IUnknown * * apUnknown;
	/*0010*/ _GUID iid;
	/*0020*/
};

struct _wireSAFEARR_UNKNOWN {
	/*0000*/ ULONG Size;
	/*0008*/ IUnknown * * apUnknown;
	/*0010*/
};

struct _wireSAFEARR_VARIANT {
	/*0000*/ ULONG Size;
	/*0008*/ _wireVARIANT * * aVariant;
	/*0010*/
};

struct _wireVARIANT {
	/*0000*/ ULONG clSize;
	/*0004*/ ULONG rpcReserved;
	/*0008*/ USHORT vt;
	/*000a*/ USHORT wReserved1;
	/*000c*/ USHORT wReserved2;
	/*000e*/ USHORT wReserved3;
	/*0010*/ LONGLONG llVal;
	/*0010*/ LONG lVal;
	/*0010*/ UCHAR bVal;
	/*0010*/ SHORT iVal;
	/*0010*/ float fltVal;
	/*0010*/ double dblVal;
	/*0010*/ SHORT boolVal;
	/*0010*/ LONG scode;
	/*0010*/ tagCY cyVal;
	/*0010*/ double date;
	/*0010*/ _FLAGGED_WORD_BLOB * bstrVal;
	/*0010*/ IUnknown * punkVal;
	/*0010*/ IDispatch * pdispVal;
	/*0010*/ _wireSAFEARRAY * * parray;
	/*0010*/ _wireBRECORD * brecVal;
	/*0010*/ UCHAR * pbVal;
	/*0010*/ SHORT * piVal;
	/*0010*/ LONG * plVal;
	/*0010*/ LONGLONG * pllVal;
	/*0010*/ float * pfltVal;
	/*0010*/ double * pdblVal;
	/*0010*/ SHORT * pboolVal;
	/*0010*/ LONG * pscode;
	/*0010*/ tagCY * pcyVal;
	/*0010*/ double * pdate;
	/*0010*/ _FLAGGED_WORD_BLOB * * pbstrVal;
	/*0010*/ IUnknown * * ppunkVal;
	/*0010*/ IDispatch * * ppdispVal;
	/*0010*/ _wireSAFEARRAY * * * pparray;
	/*0010*/ _wireVARIANT * * pvarVal;
	/*0010*/ CHAR cVal;
	/*0010*/ USHORT uiVal;
	/*0010*/ ULONG ulVal;
	/*0010*/ ULONGLONG ullVal;
	/*0010*/ INT intVal;
	/*0010*/ UINT uintVal;
	/*0010*/ tagDEC decVal;
	/*0010*/ tagDEC * pdecVal;
	/*0010*/ CHAR * pcVal;
	/*0010*/ WCHAR * puiVal;
	/*0010*/ ULONG * pulVal;
	/*0010*/ ULONGLONG * pullVal;
	/*0010*/ INT * pintVal;
	/*0010*/ UINT * puintVal;
	/*0020*/
};

struct _xml_error {
	/*0000*/ UINT _nLine;
	/*0008*/ WCHAR * _pchBuf;
	/*0010*/ UINT _cchBuf;
	/*0014*/ UINT _ich;
	/*0018*/ WCHAR * _pszFound;
	/*0020*/ WCHAR * _pszExpected;
	/*0028*/ ULONG _reserved1;
	/*002c*/ ULONG _reserved2;
	/*0030*/
};

struct addrinfo {
	/*0000*/ INT ai_flags;
	/*0004*/ INT ai_family;
	/*0008*/ INT ai_socktype;
	/*000c*/ INT ai_protocol;
	/*0010*/ ULONGLONG ai_addrlen;
	/*0018*/ CHAR * ai_canonname;
	/*0020*/ sockaddr * ai_addr;
	/*0028*/ addrinfo * ai_next;
	/*0030*/
};

struct addrinfoW {
	/*0000*/ INT ai_flags;
	/*0004*/ INT ai_family;
	/*0008*/ INT ai_socktype;
	/*000c*/ INT ai_protocol;
	/*0010*/ ULONGLONG ai_addrlen;
	/*0018*/ WCHAR * ai_canonname;
	/*0020*/ sockaddr * ai_addr;
	/*0028*/ addrinfoW * ai_next;
	/*0030*/
};

struct addrinfoex2A {
	/*0000*/ INT ai_flags;
	/*0004*/ INT ai_family;
	/*0008*/ INT ai_socktype;
	/*000c*/ INT ai_protocol;
	/*0010*/ ULONGLONG ai_addrlen;
	/*0018*/ CHAR * ai_canonname;
	/*0020*/ sockaddr * ai_addr;
	/*0028*/ void * ai_blob;
	/*0030*/ ULONGLONG ai_bloblen;
	/*0038*/ _GUID * ai_provider;
	/*0040*/ addrinfoex2A * ai_next;
	/*0048*/ INT ai_version;
	/*0050*/ CHAR * ai_fqdn;
	/*0058*/
};

struct addrinfoex2W {
	/*0000*/ INT ai_flags;
	/*0004*/ INT ai_family;
	/*0008*/ INT ai_socktype;
	/*000c*/ INT ai_protocol;
	/*0010*/ ULONGLONG ai_addrlen;
	/*0018*/ WCHAR * ai_canonname;
	/*0020*/ sockaddr * ai_addr;
	/*0028*/ void * ai_blob;
	/*0030*/ ULONGLONG ai_bloblen;
	/*0038*/ _GUID * ai_provider;
	/*0040*/ addrinfoex2W * ai_next;
	/*0048*/ INT ai_version;
	/*0050*/ WCHAR * ai_fqdn;
	/*0058*/
};

struct addrinfoex3 {
	/*0000*/ INT ai_flags;
	/*0004*/ INT ai_family;
	/*0008*/ INT ai_socktype;
	/*000c*/ INT ai_protocol;
	/*0010*/ ULONGLONG ai_addrlen;
	/*0018*/ WCHAR * ai_canonname;
	/*0020*/ sockaddr * ai_addr;
	/*0028*/ void * ai_blob;
	/*0030*/ ULONGLONG ai_bloblen;
	/*0038*/ _GUID * ai_provider;
	/*0040*/ addrinfoex3 * ai_next;
	/*0048*/ INT ai_version;
	/*0050*/ WCHAR * ai_fqdn;
	/*0058*/ INT ai_interfaceindex;
	/*0060*/
};

struct addrinfoex4 {
	/*0000*/ INT ai_flags;
	/*0004*/ INT ai_family;
	/*0008*/ INT ai_socktype;
	/*000c*/ INT ai_protocol;
	/*0010*/ ULONGLONG ai_addrlen;
	/*0018*/ WCHAR * ai_canonname;
	/*0020*/ sockaddr * ai_addr;
	/*0028*/ void * ai_blob;
	/*0030*/ ULONGLONG ai_bloblen;
	/*0038*/ _GUID * ai_provider;
	/*0040*/ addrinfoex4 * ai_next;
	/*0048*/ INT ai_version;
	/*0050*/ WCHAR * ai_fqdn;
	/*0058*/ INT ai_interfaceindex;
	/*0060*/ void * ai_resolutionhandle;
	/*0068*/
};

struct addrinfoexA {
	/*0000*/ INT ai_flags;
	/*0004*/ INT ai_family;
	/*0008*/ INT ai_socktype;
	/*000c*/ INT ai_protocol;
	/*0010*/ ULONGLONG ai_addrlen;
	/*0018*/ CHAR * ai_canonname;
	/*0020*/ sockaddr * ai_addr;
	/*0028*/ void * ai_blob;
	/*0030*/ ULONGLONG ai_bloblen;
	/*0038*/ _GUID * ai_provider;
	/*0040*/ addrinfoexA * ai_next;
	/*0048*/
};

struct addrinfoexW {
	/*0000*/ INT ai_flags;
	/*0004*/ INT ai_family;
	/*0008*/ INT ai_socktype;
	/*000c*/ INT ai_protocol;
	/*0010*/ ULONGLONG ai_addrlen;
	/*0018*/ WCHAR * ai_canonname;
	/*0020*/ sockaddr * ai_addr;
	/*0028*/ void * ai_blob;
	/*0030*/ ULONGLONG ai_bloblen;
	/*0038*/ _GUID * ai_provider;
	/*0040*/ addrinfoexW * ai_next;
	/*0048*/
};

struct arp_send_reply {
	/*0000*/ ULONG DestAddress;
	/*0004*/ ULONG SrcAddress;
	/*0008*/
};

struct cmsghdr {
	/*0000*/ ULONGLONG cmsg_len;
	/*0008*/ INT cmsg_level;
	/*000c*/ INT cmsg_type;
	/*0010*/
};

class exception {
public:
	void exception( exception const & );
	void exception( CHAR const * const & , INT );
	void exception( CHAR const * const & );
	void exception();
	exception & operator=( exception const & );
	/*0000*/ virtual void ~exception();
	/*0008*/ virtual CHAR const * what() const;
private:
	/*0008*/ CHAR const * _m_what;
	/*0010*/ INT _m_doFree;
public:
	void __local_vftable_ctor_closure();
	/*0000*/ virtual void * __vecDelDtor( UINT );
	/*0018*/
};

struct fd_set {
	/*0000*/ UINT fd_count;
	/*0008*/ ULONGLONG fd_array[0x40];
	/*0208*/
};

struct group_filter {
	/*0000*/ ULONG gf_interface;
	/*0008*/ sockaddr_storage gf_group;
	/*0088*/ MULTICAST_MODE_TYPE gf_fmode;
	/*008c*/ ULONG gf_numsrc;
	/*0090*/ sockaddr_storage gf_slist[0x1];
	/*0110*/
};

struct group_req {
	/*0000*/ ULONG gr_interface;
	/*0008*/ sockaddr_storage gr_group;
	/*0088*/
};

struct group_source_req {
	/*0000*/ ULONG gsr_interface;
	/*0008*/ sockaddr_storage gsr_group;
	/*0088*/ sockaddr_storage gsr_source;
	/*0108*/
};

struct hostent {
	/*0000*/ CHAR * h_name;
	/*0008*/ CHAR * * h_aliases;
	/*0010*/ SHORT h_addrtype;
	/*0012*/ SHORT h_length;
	/*0018*/ CHAR * * h_addr_list;
	/*0020*/
};

struct icmp_echo_reply {
	/*0000*/ ULONG Address;
	/*0004*/ ULONG Status;
	/*0008*/ ULONG RoundTripTime;
	/*000c*/ USHORT DataSize;
	/*000e*/ USHORT Reserved;
	/*0010*/ void * Data;
	/*0018*/ ip_option_information Options;
	/*0028*/
};

struct icmp_echo_reply32 {
	/*0000*/ ULONG Address;
	/*0004*/ ULONG Status;
	/*0008*/ ULONG RoundTripTime;
	/*000c*/ USHORT DataSize;
	/*000e*/ USHORT Reserved;
	/*0010*/ void * Data;
	/*0014*/ ip_option_information32 Options;
	/*001c*/
};

struct icmp_error_info {
	/*0000*/ _SOCKADDR_INET srcaddress;
	/*001c*/ IPPROTO protocol;
	/*0020*/ UCHAR type;
	/*0021*/ UCHAR code;
	/*0024*/
};

struct icmpv6_echo_reply_lh {
	/*0000*/ _IPV6_ADDRESS_EX Address;
	/*001c*/ ULONG Status;
	/*0020*/ UINT RoundTripTime;
	/*0024*/
};

struct in6_addr {
	
	/*0000*/ <unnamed-type-u> u;
	/*0010*/
};

struct in6_pktinfo {
	/*0000*/ in6_addr ipi6_addr;
	/*0010*/ ULONG ipi6_ifindex;
	/*0014*/
};

struct in6_pktinfo_ex {
	/*0000*/ in6_pktinfo pkt_info;
	/*0014*/ SCOPE_ID scope_id;
	/*0018*/
};

struct in_addr {
	
	/*0000*/ <unnamed-type-S_un> S_un;
	/*0004*/
};

struct in_pktinfo {
	/*0000*/ in_addr ipi_addr;
	/*0004*/ ULONG ipi_ifindex;
	/*0008*/
};

struct in_pktinfo_ex {
	/*0000*/ in_pktinfo pkt_info;
	/*0008*/ SCOPE_ID scope_id;
	/*000c*/
};

struct in_recverr {
	/*0000*/ IPPROTO protocol;
	/*0004*/ ULONG info;
	/*0008*/ UCHAR type;
	/*0009*/ UCHAR code;
	/*000c*/
};

struct ip_interface_name_info_w2ksp1 {
	/*0000*/ ULONG Index;
	/*0004*/ ULONG MediaType;
	/*0008*/ UCHAR ConnectionType;
	/*0009*/ UCHAR AccessType;
	/*000c*/ _GUID DeviceGuid;
	/*001c*/ _GUID InterfaceGuid;
	/*002c*/
};

struct ip_mreq {
	/*0000*/ in_addr imr_multiaddr;
	/*0004*/ in_addr imr_interface;
	/*0008*/
};

struct ip_mreq_source {
	/*0000*/ in_addr imr_multiaddr;
	/*0004*/ in_addr imr_sourceaddr;
	/*0008*/ in_addr imr_interface;
	/*000c*/
};

struct ip_msfilter {
	/*0000*/ in_addr imsf_multiaddr;
	/*0004*/ in_addr imsf_interface;
	/*0008*/ MULTICAST_MODE_TYPE imsf_fmode;
	/*000c*/ ULONG imsf_numsrc;
	/*0010*/ in_addr imsf_slist[0x1];
	/*0014*/
};

struct ip_option_information {
	/*0000*/ UCHAR Ttl;
	/*0001*/ UCHAR Tos;
	/*0002*/ UCHAR Flags;
	/*0003*/ UCHAR OptionsSize;
	/*0008*/ UCHAR * OptionsData;
	/*0010*/
};

struct ip_option_information32 {
	/*0000*/ UCHAR Ttl;
	/*0001*/ UCHAR Tos;
	/*0002*/ UCHAR Flags;
	/*0003*/ UCHAR OptionsSize;
	/*0004*/ UCHAR * OptionsData;
	/*0008*/
};

struct ipv6_mreq {
	/*0000*/ in6_addr ipv6mr_multiaddr;
	/*0010*/ ULONG ipv6mr_interface;
	/*0014*/
};

struct lconv {
	/*0000*/ CHAR * decimal_point;
	/*0008*/ CHAR * thousands_sep;
	/*0010*/ CHAR * grouping;
	/*0018*/ CHAR * int_curr_symbol;
	/*0020*/ CHAR * currency_symbol;
	/*0028*/ CHAR * mon_decimal_point;
	/*0030*/ CHAR * mon_thousands_sep;
	/*0038*/ CHAR * mon_grouping;
	/*0040*/ CHAR * positive_sign;
	/*0048*/ CHAR * negative_sign;
	/*0050*/ CHAR int_frac_digits;
	/*0051*/ CHAR frac_digits;
	/*0052*/ CHAR p_cs_precedes;
	/*0053*/ CHAR p_sep_by_space;
	/*0054*/ CHAR n_cs_precedes;
	/*0055*/ CHAR n_sep_by_space;
	/*0056*/ CHAR p_sign_posn;
	/*0057*/ CHAR n_sign_posn;
	/*0058*/ WCHAR * _W_decimal_point;
	/*0060*/ WCHAR * _W_thousands_sep;
	/*0068*/ WCHAR * _W_int_curr_symbol;
	/*0070*/ WCHAR * _W_currency_symbol;
	/*0078*/ WCHAR * _W_mon_decimal_point;
	/*0080*/ WCHAR * _W_mon_thousands_sep;
	/*0088*/ WCHAR * _W_positive_sign;
	/*0090*/ WCHAR * _W_negative_sign;
	/*0098*/
};

struct linger {
	/*0000*/ USHORT l_onoff;
	/*0002*/ USHORT l_linger;
	/*0004*/
};

struct localeinfo_struct {
	/*0000*/ threadlocaleinfostruct * locinfo;
	/*0008*/ threadmbcinfostruct * mbcinfo;
	/*0010*/
};

struct netent {
	/*0000*/ CHAR * n_name;
	/*0008*/ CHAR * * n_aliases;
	/*0010*/ SHORT n_addrtype;
	/*0014*/ ULONG n_net;
	/*0018*/
};

enum octd {
	OCTD_DOWN = 0x1,
	OCTD_DOWNBROADCAST = 0x2,
	OCTD_UP = 0xffffffff
};

struct pollfd {
	/*0000*/ ULONGLONG fd;
	/*0008*/ SHORT events;
	/*000a*/ SHORT revents;
	/*0010*/
};

struct protoent {
	/*0000*/ CHAR * p_name;
	/*0008*/ CHAR * * p_aliases;
	/*0010*/ SHORT p_proto;
	/*0018*/
};

struct provider_info {
	/*0000*/ ULONG (* pi_R0_1val)( void * , val_context * , ULONG , void * , ULONG * , ULONG );
	/*0008*/ ULONG (* pi_R0_allvals)( void * , val_context * , ULONG , void * , ULONG * , ULONG );
	/*0010*/ ULONG (* pi_R3_1val)( void * , val_context * , ULONG , void * , ULONG * , ULONG );
	/*0018*/ ULONG (* pi_R3_allvals)( void * , val_context * , ULONG , void * , ULONG * , ULONG );
	/*0020*/ ULONG pi_flags;
	/*0028*/ void * pi_key_context;
	/*0030*/
};

struct pvalueA {
	/*0000*/ CHAR * pv_valuename;
	/*0008*/ INT pv_valuelen;
	/*0010*/ void * pv_value_context;
	/*0018*/ ULONG pv_type;
	/*0020*/
};

struct pvalueW {
	/*0000*/ WCHAR * pv_valuename;
	/*0008*/ INT pv_valuelen;
	/*0010*/ void * pv_value_context;
	/*0018*/ ULONG pv_type;
	/*0020*/
};

struct servent {
	/*0000*/ CHAR * s_name;
	/*0008*/ CHAR * * s_aliases;
	/*0010*/ CHAR * s_proto;
	/*0018*/ SHORT s_port;
	/*0020*/
};

struct sockaddr {
	/*0000*/ USHORT sa_family;
	/*0002*/ CHAR sa_data[0xe];
	/*0010*/
};

struct sockaddr_dl {
	/*0000*/ USHORT sdl_family;
	/*0002*/ UCHAR sdl_data[0x8];
	/*000a*/ UCHAR sdl_zero[0x4];
	/*000e*/
};

union sockaddr_gen {
	/*0000*/ sockaddr Address;
	/*0000*/ sockaddr_in AddressIn;
	/*0000*/ sockaddr_in6_old AddressIn6;
	/*0018*/
};

struct sockaddr_in {
	/*0000*/ USHORT sin_family;
	/*0002*/ USHORT sin_port;
	/*0004*/ in_addr sin_addr;
	/*0008*/ CHAR sin_zero[0x8];
	/*0010*/
};

struct sockaddr_in6 {
	/*0000*/ USHORT sin6_family;
	/*0002*/ USHORT sin6_port;
	/*0004*/ ULONG sin6_flowinfo;
	/*0008*/ in6_addr sin6_addr;
	/*0018*/ ULONG sin6_scope_id;
	/*0018*/ SCOPE_ID sin6_scope_struct;
	/*001c*/
};

struct sockaddr_in6_old {
	/*0000*/ SHORT sin6_family;
	/*0002*/ USHORT sin6_port;
	/*0004*/ ULONG sin6_flowinfo;
	/*0008*/ in6_addr sin6_addr;
	/*0018*/
};

struct sockaddr_in6_w2ksp1 {
	/*0000*/ SHORT sin6_family;
	/*0002*/ USHORT sin6_port;
	/*0004*/ ULONG sin6_flowinfo;
	/*0008*/ in6_addr sin6_addr;
	/*0018*/ ULONG sin6_scope_id;
	/*001c*/
};

struct sockaddr_storage {
	/*0000*/ USHORT ss_family;
	/*0002*/ CHAR __ss_pad1[0x6];
	/*0008*/ LONGLONG __ss_align;
	/*0010*/ CHAR __ss_pad2[0x70];
	/*0080*/
};

struct sockaddr_storage_xp {
	/*0000*/ SHORT ss_family;
	/*0002*/ CHAR __ss_pad1[0x6];
	/*0008*/ LONGLONG __ss_align;
	/*0010*/ CHAR __ss_pad2[0x70];
	/*0080*/
};

struct sockproto {
	/*0000*/ USHORT sp_family;
	/*0002*/ USHORT sp_protocol;
	/*0004*/
};

struct stat {
	/*0000*/ UINT st_dev;
	/*0004*/ USHORT st_ino;
	/*0006*/ USHORT st_mode;
	/*0008*/ SHORT st_nlink;
	/*000a*/ SHORT st_uid;
	/*000c*/ SHORT st_gid;
	/*0010*/ UINT st_rdev;
	/*0014*/ LONG st_size;
	/*0018*/ LONGLONG st_atime;
	/*0020*/ LONGLONG st_mtime;
	/*0028*/ LONGLONG st_ctime;
	/*0030*/
};

struct tagABORTPATH {
	/*0000*/ tagEMR emr;
	/*0008*/
};

struct tagACCEL {
	/*0000*/ UCHAR fVirt;
	/*0002*/ USHORT key;
	/*0004*/ USHORT cmd;
	/*0006*/
};

struct tagACCESSTIMEOUT {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iTimeOutMSec;
	/*000c*/
};

struct tagACTCTXA {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ CHAR const * lpSource;
	/*0010*/ USHORT wProcessorArchitecture;
	/*0012*/ USHORT wLangId;
	/*0018*/ CHAR const * lpAssemblyDirectory;
	/*0020*/ CHAR const * lpResourceName;
	/*0028*/ CHAR const * lpApplicationName;
	/*0030*/ HINSTANCE__ * hModule;
	/*0038*/
};

struct tagACTCTXW {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ WCHAR const * lpSource;
	/*0010*/ USHORT wProcessorArchitecture;
	/*0012*/ USHORT wLangId;
	/*0018*/ WCHAR const * lpAssemblyDirectory;
	/*0020*/ WCHAR const * lpResourceName;
	/*0028*/ WCHAR const * lpApplicationName;
	/*0030*/ HINSTANCE__ * hModule;
	/*0038*/
};

struct tagACTCTX_SECTION_KEYED_DATA {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG ulDataFormatVersion;
	/*0008*/ void * lpData;
	/*0010*/ ULONG ulLength;
	/*0018*/ void * lpSectionGlobalData;
	/*0020*/ ULONG ulSectionGlobalDataLength;
	/*0028*/ void * lpSectionBase;
	/*0030*/ ULONG ulSectionTotalLength;
	/*0038*/ void * hActCtx;
	/*0040*/ ULONG ulAssemblyRosterIndex;
	/*0044*/ ULONG ulFlags;
	/*0048*/ tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
	/*0070*/
};

struct tagACTCTX_SECTION_KEYED_DATA_2600 {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG ulDataFormatVersion;
	/*0008*/ void * lpData;
	/*0010*/ ULONG ulLength;
	/*0018*/ void * lpSectionGlobalData;
	/*0020*/ ULONG ulSectionGlobalDataLength;
	/*0028*/ void * lpSectionBase;
	/*0030*/ ULONG ulSectionTotalLength;
	/*0038*/ void * hActCtx;
	/*0040*/ ULONG ulAssemblyRosterIndex;
	/*0048*/
};

struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
	/*0000*/ void * lpInformation;
	/*0008*/ void * lpSectionBase;
	/*0010*/ ULONG ulSectionLength;
	/*0018*/ void * lpSectionGlobalDataBase;
	/*0020*/ ULONG ulSectionGlobalDataLength;
	/*0028*/
};

enum tagACTIVATEFLAGS {
	ACTIVATE_WINDOWLESS = 0x1
};

enum tagACTIVATIONTYPE {
	ACTIVATIONTYPE_UNCATEGORIZED = 0x0,
	ACTIVATIONTYPE_FROM_MONIKER = 0x1,
	ACTIVATIONTYPE_FROM_DATA = 0x2,
	ACTIVATIONTYPE_FROM_STORAGE = 0x4,
	ACTIVATIONTYPE_FROM_STREAM = 0x8,
	ACTIVATIONTYPE_FROM_FILE = 0x10
};

enum tagADVF {
	ADVF_NODATA = 0x1,
	ADVF_PRIMEFIRST = 0x2,
	ADVF_ONLYONCE = 0x4,
	ADVF_DATAONSTOP = 0x40,
	ADVFCACHE_NOHANDLER = 0x8,
	ADVFCACHE_FORCEBUILTIN = 0x10,
	ADVFCACHE_ONSAVE = 0x20
};

struct tagALTTABINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ INT cItems;
	/*0008*/ INT cColumns;
	/*000c*/ INT cRows;
	/*0010*/ INT iColFocus;
	/*0014*/ INT iRowFocus;
	/*0018*/ INT cxItem;
	/*001c*/ INT cyItem;
	/*0020*/ tagPOINT ptStart;
	/*0028*/
};

struct tagANIMATIONINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iMinAnimate;
	/*0008*/
};

enum tagAPP_RESOLVER_ITEM_FILTER_FLAGS {
	ARIFF_NONE = 0x0,
	ARIFF_REQUIRE_PREVENT_PINNING_NOT_SET = 0x1,
	ARIFF_REQUIRE_PINNABLE = 0x2
};

struct tagARRAYDESC {
	/*0000*/ tagTYPEDESC tdescElem;
	/*0010*/ USHORT cDims;
	/*0014*/ tagSAFEARRAYBOUND rgbounds[0x1];
	/*0020*/
};

enum tagAR_STATE {
	AR_ENABLED = 0x0,
	AR_DISABLED = 0x1,
	AR_SUPPRESSED = 0x2,
	AR_REMOTESESSION = 0x4,
	AR_MULTIMON = 0x8,
	AR_NOSENSOR = 0x10,
	AR_NOT_SUPPORTED = 0x20,
	AR_DOCKED = 0x40,
	AR_LAPTOP = 0x80
};

struct tagAUDIODESCRIPTION {
	/*0000*/ UINT cbSize;
	/*0004*/ INT Enabled;
	/*0008*/ ULONG Locale;
	/*000c*/
};

struct tagAXESLISTA {
	/*0000*/ ULONG axlReserved;
	/*0004*/ ULONG axlNumAxes;
	/*0008*/ tagAXISINFOA axlAxisInfo[0x10];
	/*0188*/
};

struct tagAXESLISTW {
	/*0000*/ ULONG axlReserved;
	/*0004*/ ULONG axlNumAxes;
	/*0008*/ tagAXISINFOW axlAxisInfo[0x10];
	/*0288*/
};

struct tagAXISINFOA {
	/*0000*/ LONG axMinValue;
	/*0004*/ LONG axMaxValue;
	/*0008*/ UCHAR axAxisName[0x10];
	/*0018*/
};

struct tagAXISINFOW {
	/*0000*/ LONG axMinValue;
	/*0004*/ LONG axMaxValue;
	/*0008*/ WCHAR axAxisName[0x10];
	/*0028*/
};

enum tagApplicationType {
	ServerApplication = 0x0,
	LibraryApplication = 0x1
};

struct tagAspectInfo {
	/*0000*/ ULONG cb;
	/*0004*/ ULONG dwFlags;
	/*0008*/
};

enum tagAspectInfoFlag {
	DVASPECTINFOFLAG_CANOPTIMIZE = 0x1
};

struct tagAssocApp {
	/*0000*/ ULONG cbSize;
	/*0008*/ WCHAR const * pszFriendlyAppName;
	/*0010*/ tagAssocShell * pShellKey;
	/*0018*/
};

struct tagAssocDDEExec {
	/*0000*/ WCHAR const * pszDDEExec;
	/*0008*/ WCHAR const * pszApplication;
	/*0010*/ WCHAR const * pszTopic;
	/*0018*/ INT fNoActivateHandler;
	/*0020*/
};

struct tagAssocProgid {
	/*0000*/ ULONG cbSize;
	/*0008*/ WCHAR const * pszProgid;
	/*0010*/ WCHAR const * pszFriendlyDocName;
	/*0018*/ WCHAR const * pszDefaultIcon;
	/*0020*/ tagAssocShell * pShellKey;
	/*0028*/ WCHAR const * pszExtensions;
	/*0030*/
};

struct tagAssocShell {
	/*0000*/ tagAssocVerb * rgVerbs;
	/*0008*/ ULONG cVerbs;
	/*000c*/ ULONG iDefaultVerb;
	/*0010*/
};

struct tagAssocVerb {
	/*0000*/ WCHAR const * pszVerb;
	/*0008*/ WCHAR const * pszTitle;
	/*0010*/ WCHAR const * pszFriendlyAppName;
	/*0018*/ WCHAR const * pszApplication;
	/*0020*/ WCHAR const * pszParams;
	/*0028*/ tagAssocDDEExec * pDDEExec;
	/*0030*/
};

enum tagBANDSITECID {
	BSID_BANDADDED = 0x0,
	BSID_BANDREMOVED = 0x1
};

struct tagBANDSITEINFO {
	/*0000*/ ULONG dwMask;
	/*0004*/ ULONG dwState;
	/*0008*/ ULONG dwStyle;
	/*000c*/
};

struct tagBANDWIDTH_DATA {
	/*0000*/ sockaddr_storage SourceIP;
	/*0080*/ sockaddr_storage DestinationIP;
	/*0100*/ ULONG InboundBandwidthEstimate;
	/*0104*/ ULONG OutboundBandwidthEstimate;
	/*0108*/ ULONG InboundBandwidthInstability;
	/*010c*/ ULONG OutboundBandwidthInstability;
	/*0110*/ INT InboundBandwidthPeaked;
	/*0114*/ INT OutboundBandwidthPeaked;
	/*0118*/
};

struct tagBANDWIDTH_PARAMS {
	/*0000*/ sockaddr_storage SourceIP;
	/*0080*/ sockaddr_storage DestinationIP;
	/*0100*/
};

union tagBINDPTR {
	/*0000*/ tagFUNCDESC * lpfuncdesc;
	/*0000*/ tagVARDESC * lpvardesc;
	/*0000*/ ITypeComp * lptcomp;
	/*0008*/
};

enum tagBINDSPEED {
	BINDSPEED_INDEFINITE = 0x1,
	BINDSPEED_MODERATE = 0x2,
	BINDSPEED_IMMEDIATE = 0x3
};

enum tagBINDSTATUS {
	BINDSTATUS_FINDINGRESOURCE = 0x1,
	BINDSTATUS_CONNECTING = 0x2,
	BINDSTATUS_REDIRECTING = 0x3,
	BINDSTATUS_BEGINDOWNLOADDATA = 0x4,
	BINDSTATUS_DOWNLOADINGDATA = 0x5,
	BINDSTATUS_ENDDOWNLOADDATA = 0x6,
	BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 0x7,
	BINDSTATUS_INSTALLINGCOMPONENTS = 0x8,
	BINDSTATUS_ENDDOWNLOADCOMPONENTS = 0x9,
	BINDSTATUS_USINGCACHEDCOPY = 0xa,
	BINDSTATUS_SENDINGREQUEST = 0xb,
	BINDSTATUS_CLASSIDAVAILABLE = 0xc,
	BINDSTATUS_MIMETYPEAVAILABLE = 0xd,
	BINDSTATUS_CACHEFILENAMEAVAILABLE = 0xe,
	BINDSTATUS_BEGINSYNCOPERATION = 0xf,
	BINDSTATUS_ENDSYNCOPERATION = 0x10,
	BINDSTATUS_BEGINUPLOADDATA = 0x11,
	BINDSTATUS_UPLOADINGDATA = 0x12,
	BINDSTATUS_ENDUPLOADDATA = 0x13,
	BINDSTATUS_PROTOCOLCLASSID = 0x14,
	BINDSTATUS_ENCODING = 0x15,
	BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 0x16,
	BINDSTATUS_CLASSINSTALLLOCATION = 0x17,
	BINDSTATUS_DECODING = 0x18,
	BINDSTATUS_LOADINGMIMEHANDLER = 0x19,
	BINDSTATUS_CONTENTDISPOSITIONATTACH = 0x1a,
	BINDSTATUS_FILTERREPORTMIMETYPE = 0x1b,
	BINDSTATUS_CLSIDCANINSTANTIATE = 0x1c,
	BINDSTATUS_IUNKNOWNAVAILABLE = 0x1d,
	BINDSTATUS_DIRECTBIND = 0x1e,
	BINDSTATUS_RAWMIMETYPE = 0x1f,
	BINDSTATUS_PROXYDETECTING = 0x20,
	BINDSTATUS_ACCEPTRANGES = 0x21,
	BINDSTATUS_COOKIE_SENT = 0x22,
	BINDSTATUS_COMPACT_POLICY_RECEIVED = 0x23,
	BINDSTATUS_COOKIE_SUPPRESSED = 0x24,
	BINDSTATUS_COOKIE_STATE_UNKNOWN = 0x25,
	BINDSTATUS_COOKIE_STATE_ACCEPT = 0x26,
	BINDSTATUS_COOKIE_STATE_REJECT = 0x27,
	BINDSTATUS_COOKIE_STATE_PROMPT = 0x28,
	BINDSTATUS_COOKIE_STATE_LEASH = 0x29,
	BINDSTATUS_COOKIE_STATE_DOWNGRADE = 0x2a,
	BINDSTATUS_POLICY_HREF = 0x2b,
	BINDSTATUS_P3P_HEADER = 0x2c,
	BINDSTATUS_SESSION_COOKIE_RECEIVED = 0x2d,
	BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 0x2e,
	BINDSTATUS_SESSION_COOKIES_ALLOWED = 0x2f,
	BINDSTATUS_CACHECONTROL = 0x30,
	BINDSTATUS_CONTENTDISPOSITIONFILENAME = 0x31,
	BINDSTATUS_MIMETEXTPLAINMISMATCH = 0x32,
	BINDSTATUS_PUBLISHERAVAILABLE = 0x33,
	BINDSTATUS_DISPLAYNAMEAVAILABLE = 0x34,
	BINDSTATUS_SSLUX_NAVBLOCKED = 0x35,
	BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 0x36,
	BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 0x37,
	BINDSTATUS_64BIT_PROGRESS = 0x38,
	BINDSTATUS_LAST = 0x38,
	BINDSTATUS_RESERVED_0 = 0x39,
	BINDSTATUS_RESERVED_1 = 0x3a,
	BINDSTATUS_RESERVED_2 = 0x3b,
	BINDSTATUS_RESERVED_3 = 0x3c,
	BINDSTATUS_RESERVED_4 = 0x3d,
	BINDSTATUS_RESERVED_5 = 0x3e,
	BINDSTATUS_RESERVED_6 = 0x3f,
	BINDSTATUS_RESERVED_7 = 0x40,
	BINDSTATUS_RESERVED_8 = 0x41,
	BINDSTATUS_RESERVED_9 = 0x42,
	BINDSTATUS_RESERVED_A = 0x43,
	BINDSTATUS_RESERVED_B = 0x44,
	BINDSTATUS_RESERVED_C = 0x45,
	BINDSTATUS_RESERVED_D = 0x46,
	BINDSTATUS_RESERVED_E = 0x47,
	BINDSTATUS_RESERVED_F = 0x48,
	BINDSTATUS_RESERVED_10 = 0x49,
	BINDSTATUS_RESERVED_11 = 0x4a,
	BINDSTATUS_RESERVED_12 = 0x4b,
	BINDSTATUS_RESERVED_13 = 0x4c,
	BINDSTATUS_LAST_PRIVATE = 0x4c
};

enum tagBINDSTRING {
	BINDSTRING_HEADERS = 0x1,
	BINDSTRING_ACCEPT_MIMES = 0x2,
	BINDSTRING_EXTRA_URL = 0x3,
	BINDSTRING_LANGUAGE = 0x4,
	BINDSTRING_USERNAME = 0x5,
	BINDSTRING_PASSWORD = 0x6,
	BINDSTRING_UA_PIXELS = 0x7,
	BINDSTRING_UA_COLOR = 0x8,
	BINDSTRING_OS = 0x9,
	BINDSTRING_USER_AGENT = 0xa,
	BINDSTRING_ACCEPT_ENCODINGS = 0xb,
	BINDSTRING_POST_COOKIE = 0xc,
	BINDSTRING_POST_DATA_MIME = 0xd,
	BINDSTRING_URL = 0xe,
	BINDSTRING_IID = 0xf,
	BINDSTRING_FLAG_BIND_TO_OBJECT = 0x10,
	BINDSTRING_PTR_BIND_CONTEXT = 0x11,
	BINDSTRING_XDR_ORIGIN = 0x12,
	BINDSTRING_DOWNLOADPATH = 0x13,
	BINDSTRING_ROOTDOC_URL = 0x14,
	BINDSTRING_INITIAL_FILENAME = 0x15,
	BINDSTRING_PROXY_USERNAME = 0x16,
	BINDSTRING_PROXY_PASSWORD = 0x17,
	BINDSTRING_ENTERPRISE_ID = 0x18,
	BINDSTRING_DOC_URL = 0x19,
	BINDSTRING_SAMESITE_COOKIE_LEVEL = 0x1a
};

enum tagBIND_FLAGS {
	BIND_MAYBOTHERUSER = 0x1,
	BIND_JUSTTESTEXISTENCE = 0x2
};

struct tagBIND_OPTS {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG grfFlags;
	/*0008*/ ULONG grfMode;
	/*000c*/ ULONG dwTickCountDeadline;
	/*0010*/
};

struct tagBIND_OPTS2 : tagBIND_OPTS {
	/*0010*/ ULONG dwTrackFlags;
	/*0014*/ ULONG dwClassContext;
	/*0018*/ ULONG locale;
	/*0020*/ _COSERVERINFO * pServerInfo;
	/*0028*/
};

struct tagBIND_OPTS3 : tagBIND_OPTS2 {
	/*0028*/ HWND__ * hwnd;
	/*0030*/
};

struct tagBITMAP {
	/*0000*/ LONG bmType;
	/*0004*/ LONG bmWidth;
	/*0008*/ LONG bmHeight;
	/*000c*/ LONG bmWidthBytes;
	/*0010*/ USHORT bmPlanes;
	/*0012*/ USHORT bmBitsPixel;
	/*0018*/ void * bmBits;
	/*0020*/
};

struct tagBITMAPCOREHEADER {
	/*0000*/ ULONG bcSize;
	/*0004*/ USHORT bcWidth;
	/*0006*/ USHORT bcHeight;
	/*0008*/ USHORT bcPlanes;
	/*000a*/ USHORT bcBitCount;
	/*000c*/
};

struct tagBITMAPCOREINFO {
	/*0000*/ tagBITMAPCOREHEADER bmciHeader;
	/*000c*/ tagRGBTRIPLE bmciColors[0x1];
	/*0010*/
};

struct tagBITMAPFILEHEADER {
	/*0000*/ USHORT bfType;
	/*0002*/ ULONG bfSize;
	/*0006*/ USHORT bfReserved1;
	/*0008*/ USHORT bfReserved2;
	/*000a*/ ULONG bfOffBits;
	/*000e*/
};

struct tagBITMAPINFO {
	/*0000*/ tagBITMAPINFOHEADER bmiHeader;
	/*0028*/ tagRGBQUAD bmiColors[0x1];
	/*002c*/
};

struct tagBITMAPINFOHEADER {
	/*0000*/ ULONG biSize;
	/*0004*/ LONG biWidth;
	/*0008*/ LONG biHeight;
	/*000c*/ USHORT biPlanes;
	/*000e*/ USHORT biBitCount;
	/*0010*/ ULONG biCompression;
	/*0014*/ ULONG biSizeImage;
	/*0018*/ LONG biXPelsPerMeter;
	/*001c*/ LONG biYPelsPerMeter;
	/*0020*/ ULONG biClrUsed;
	/*0024*/ ULONG biClrImportant;
	/*0028*/
};

struct tagBLOB {
	/*0000*/ ULONG cbSize;
	/*0008*/ UCHAR * pBlobData;
	/*0010*/
};

enum tagBPASCODE {
	BPAS_START = 0x0,
	BPAS_INDETERMINATE = 0x1,
	BPAS_STOP = 0x2
};

struct tagBSTRBLOB {
	/*0000*/ ULONG cbSize;
	/*0008*/ UCHAR * pData;
	/*0010*/
};

struct tagBUTTON_SPLITINFO {
	/*0000*/ UINT mask;
	/*0008*/ _IMAGELIST * himlGlyph;
	/*0010*/ UINT uSplitStyle;
	/*0014*/ tagSIZE size;
	/*0020*/
};

struct tagBinaryParam {
	/*0000*/ void * Buffer;
	/*0008*/ SHORT Size;
	/*0010*/
};

struct tagCABOOL {
	/*0000*/ ULONG cElems;
	/*0008*/ SHORT * pElems;
	/*0010*/
};

struct tagCABSTR {
	/*0000*/ ULONG cElems;
	/*0008*/ WCHAR * * pElems;
	/*0010*/
};

struct tagCABSTRBLOB {
	/*0000*/ ULONG cElems;
	/*0008*/ tagBSTRBLOB * pElems;
	/*0010*/
};

struct tagCAC {
	/*0000*/ ULONG cElems;
	/*0008*/ CHAR * pElems;
	/*0010*/
};

struct tagCACLIPDATA {
	/*0000*/ ULONG cElems;
	/*0008*/ tagCLIPDATA * pElems;
	/*0010*/
};

struct tagCACLSID {
	/*0000*/ ULONG cElems;
	/*0008*/ _GUID * pElems;
	/*0010*/
};

struct tagCACY {
	/*0000*/ ULONG cElems;
	/*0008*/ tagCY * pElems;
	/*0010*/
};

struct tagCADATE {
	/*0000*/ ULONG cElems;
	/*0008*/ double * pElems;
	/*0010*/
};

struct tagCADBL {
	/*0000*/ ULONG cElems;
	/*0008*/ double * pElems;
	/*0010*/
};

struct tagCADWORD {
	/*0000*/ ULONG cElems;
	/*0008*/ ULONG * pElems;
	/*0010*/
};

struct tagCAFILETIME {
	/*0000*/ ULONG cElems;
	/*0008*/ _FILETIME * pElems;
	/*0010*/
};

struct tagCAFLT {
	/*0000*/ ULONG cElems;
	/*0008*/ float * pElems;
	/*0010*/
};

struct tagCAH {
	/*0000*/ ULONG cElems;
	/*0008*/ _LARGE_INTEGER * pElems;
	/*0010*/
};

struct tagCAI {
	/*0000*/ ULONG cElems;
	/*0008*/ SHORT * pElems;
	/*0010*/
};

struct tagCAL {
	/*0000*/ ULONG cElems;
	/*0008*/ LONG * pElems;
	/*0010*/
};

enum tagCALLCONV {
	CC_FASTCALL = 0x0,
	CC_CDECL = 0x1,
	CC_MSCPASCAL = 0x2,
	CC_PASCAL = 0x2,
	CC_MACPASCAL = 0x3,
	CC_STDCALL = 0x4,
	CC_FPFASTCALL = 0x5,
	CC_SYSCALL = 0x6,
	CC_MPWCDECL = 0x7,
	CC_MPWPASCAL = 0x8,
	CC_MAX = 0x9
};

enum tagCALLTYPE {
	CALLTYPE_TOPLEVEL = 0x1,
	CALLTYPE_NESTED = 0x2,
	CALLTYPE_ASYNC = 0x3,
	CALLTYPE_TOPLEVEL_CALLPENDING = 0x4,
	CALLTYPE_ASYNC_CALLPENDING = 0x5
};

struct tagCALPOLESTR {
	/*0000*/ ULONG cElems;
	/*0008*/ WCHAR * * pElems;
	/*0010*/
};

struct tagCALPSTR {
	/*0000*/ ULONG cElems;
	/*0008*/ CHAR * * pElems;
	/*0010*/
};

struct tagCALPWSTR {
	/*0000*/ ULONG cElems;
	/*0008*/ WCHAR * * pElems;
	/*0010*/
};

struct tagCANDIDATEFORM {
	/*0000*/ ULONG dwIndex;
	/*0004*/ ULONG dwStyle;
	/*0008*/ tagPOINT ptCurrentPos;
	/*0010*/ tagRECT rcArea;
	/*0020*/
};

struct tagCANDIDATELIST {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwStyle;
	/*0008*/ ULONG dwCount;
	/*000c*/ ULONG dwSelection;
	/*0010*/ ULONG dwPageStart;
	/*0014*/ ULONG dwPageSize;
	/*0018*/ ULONG dwOffset[0x1];
	/*001c*/
};

struct tagCAPROPVARIANT {
	/*0000*/ ULONG cElems;
	/*0008*/ tagPROPVARIANT * pElems;
	/*0010*/
};

struct tagCASCODE {
	/*0000*/ ULONG cElems;
	/*0008*/ LONG * pElems;
	/*0010*/
};

struct tagCATEGORYINFO {
	/*0000*/ _GUID catid;
	/*0010*/ ULONG lcid;
	/*0014*/ WCHAR szDescription[0x80];
	/*0114*/
};

struct tagCAUB {
	/*0000*/ ULONG cElems;
	/*0008*/ UCHAR * pElems;
	/*0010*/
};

struct tagCAUH {
	/*0000*/ ULONG cElems;
	/*0008*/ _ULARGE_INTEGER * pElems;
	/*0010*/
};

struct tagCAUI {
	/*0000*/ ULONG cElems;
	/*0008*/ WCHAR * pElems;
	/*0010*/
};

struct tagCAUL {
	/*0000*/ ULONG cElems;
	/*0008*/ ULONG * pElems;
	/*0010*/
};

struct tagCAUUID {
	/*0000*/ ULONG cElems;
	/*0008*/ _GUID * pElems;
	/*0010*/
};

struct tagCBTACTIVATESTRUCT {
	/*0000*/ INT fMouse;
	/*0008*/ HWND__ * hWndActive;
	/*0010*/
};

struct tagCBT_CREATEWNDA {
	/*0000*/ tagCREATESTRUCTA * lpcs;
	/*0008*/ HWND__ * hwndInsertAfter;
	/*0010*/
};

struct tagCBT_CREATEWNDW {
	/*0000*/ tagCREATESTRUCTW * lpcs;
	/*0008*/ HWND__ * hwndInsertAfter;
	/*0010*/
};

struct tagCHANGEFILTERSTRUCT {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG ExtStatus;
	/*0008*/
};

enum tagCHANGEKIND {
	CHANGEKIND_ADDMEMBER = 0x0,
	CHANGEKIND_DELETEMEMBER = 0x1,
	CHANGEKIND_SETNAMES = 0x2,
	CHANGEKIND_SETDOCUMENTATION = 0x3,
	CHANGEKIND_GENERAL = 0x4,
	CHANGEKIND_INVALIDATE = 0x5,
	CHANGEKIND_CHANGEFAILED = 0x6,
	CHANGEKIND_MAX = 0x7
};

struct tagCHARSETINFO {
	/*0000*/ UINT ciCharset;
	/*0004*/ UINT ciACP;
	/*0008*/ tagFONTSIGNATURE fs;
	/*0020*/
};

struct tagCIEXYZ {
	/*0000*/ LONG ciexyzX;
	/*0004*/ LONG ciexyzY;
	/*0008*/ LONG ciexyzZ;
	/*000c*/
};

enum tagCI_FILTER_COMPONENT {
	FC_LAN = 0x0,
	FC_RASSRV = 0x1,
	FC_RASCLI = 0x2
};

struct tagCI_FILTER_INFO {
	/*0000*/ tagCI_FILTER_COMPONENT eFilter;
	/*0008*/ INetCfgComponent * pIComp;
	/*0010*/ void * pvReserved;
	/*0018*/
};

struct tagCInterfaceProxyHeader {
	/*0000*/ void const * pStublessProxyInfo;
	/*0008*/ _GUID const * piid;
	/*0010*/
};

struct tagCInterfaceProxyVtbl {
	/*0000*/ tagCInterfaceProxyHeader header;
	/*0010*/ void * Vtbl[];
	/*0010*/
};

struct tagCInterfaceStubHeader {
	/*0000*/ _GUID const * piid;
	/*0008*/ _MIDL_SERVER_INFO_ const * pServerInfo;
	/*0010*/ ULONG DispatchTableCount;
	/*0018*/ void (* const * pDispatchTable)( IRpcStubBuffer * , IRpcChannelBuffer * , _RPC_MESSAGE * , ULONG * );
	/*0020*/
};

struct tagCInterfaceStubVtbl {
	/*0000*/ tagCInterfaceStubHeader header;
	/*0020*/ IRpcStubBufferVtbl Vtbl;
	/*0070*/
};

struct tagCLEANLOCALSTORAGE {
	/*0000*/ IUnknown * pInterface;
	/*0008*/ void * pStorage;
	/*0010*/ ULONG flags;
	/*0018*/
};

struct tagCLIENTCREATESTRUCT {
	/*0000*/ void * hWindowMenu;
	/*0008*/ UINT idFirstChild;
	/*0010*/
};

struct tagCLIPDATA {
	/*0000*/ ULONG cbSize;
	/*0004*/ LONG ulClipFmt;
	/*0008*/ UCHAR * pClipData;
	/*0010*/
};

enum tagCLSCTX {
	CLSCTX_INPROC_SERVER = 0x1,
	CLSCTX_INPROC_HANDLER = 0x2,
	CLSCTX_LOCAL_SERVER = 0x4,
	CLSCTX_INPROC_SERVER16 = 0x8,
	CLSCTX_REMOTE_SERVER = 0x10,
	CLSCTX_INPROC_HANDLER16 = 0x20,
	CLSCTX_RESERVED1 = 0x40,
	CLSCTX_RESERVED2 = 0x80,
	CLSCTX_RESERVED3 = 0x100,
	CLSCTX_RESERVED4 = 0x200,
	CLSCTX_NO_CODE_DOWNLOAD = 0x400,
	CLSCTX_RESERVED5 = 0x800,
	CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,
	CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,
	CLSCTX_NO_FAILURE_LOG = 0x4000,
	CLSCTX_DISABLE_AAA = 0x8000,
	CLSCTX_ENABLE_AAA = 0x10000,
	CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
	CLSCTX_ACTIVATE_X86_SERVER = 0x40000,
	CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
	CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
	CLSCTX_ENABLE_CLOAKING = 0x100000,
	CLSCTX_APPCONTAINER = 0x400000,
	CLSCTX_ACTIVATE_AAA_AS_IU = 0x800000,
	CLSCTX_RESERVED6 = 0x1000000,
	CLSCTX_ACTIVATE_ARM32_SERVER = 0x2000000,
	CLSCTX_PS_DLL = 0x80000000
};

enum tagCOINIT {
	COINIT_APARTMENTTHREADED = 0x2,
	COINIT_MULTITHREADED = 0x0,
	COINIT_DISABLE_OLE1DDE = 0x4,
	COINIT_SPEED_OVER_MEMORY = 0x8
};

enum tagCOINITBASE {
	COINITBASE_MULTITHREADED = 0x0
};

struct tagCOLORADJUSTMENT {
	/*0000*/ USHORT caSize;
	/*0002*/ USHORT caFlags;
	/*0004*/ USHORT caIlluminantIndex;
	/*0006*/ USHORT caRedGamma;
	/*0008*/ USHORT caGreenGamma;
	/*000a*/ USHORT caBlueGamma;
	/*000c*/ USHORT caReferenceBlack;
	/*000e*/ USHORT caReferenceWhite;
	/*0010*/ SHORT caContrast;
	/*0012*/ SHORT caBrightness;
	/*0014*/ SHORT caColorfulness;
	/*0016*/ SHORT caRedGreenTint;
	/*0018*/
};

struct tagCOLORCORRECTPALETTE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPalette;
	/*000c*/ ULONG nFirstEntry;
	/*0010*/ ULONG nPalEntries;
	/*0014*/ ULONG nReserved;
	/*0018*/
};

struct tagCOLORMATCHTOTARGET {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG dwAction;
	/*000c*/ ULONG dwFlags;
	/*0010*/ ULONG cbName;
	/*0014*/ ULONG cbData;
	/*0018*/ UCHAR Data[0x1];
	/*001c*/
};

struct tagCOLORSCHEME {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG clrBtnHighlight;
	/*0008*/ ULONG clrBtnShadow;
	/*000c*/
};

struct tagCOMBOBOXEXITEMA {
	/*0000*/ UINT mask;
	/*0008*/ LONGLONG iItem;
	/*0010*/ CHAR * pszText;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT iImage;
	/*0020*/ INT iSelectedImage;
	/*0024*/ INT iOverlay;
	/*0028*/ INT iIndent;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagCOMBOBOXEXITEMW {
	/*0000*/ UINT mask;
	/*0008*/ LONGLONG iItem;
	/*0010*/ WCHAR * pszText;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT iImage;
	/*0020*/ INT iSelectedImage;
	/*0024*/ INT iOverlay;
	/*0028*/ INT iIndent;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagCOMBOBOXINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcItem;
	/*0014*/ tagRECT rcButton;
	/*0024*/ ULONG stateButton;
	/*0028*/ HWND__ * hwndCombo;
	/*0030*/ HWND__ * hwndItem;
	/*0038*/ HWND__ * hwndList;
	/*0040*/
};

struct tagCOMPAREITEMSTRUCT {
	/*0000*/ UINT CtlType;
	/*0004*/ UINT CtlID;
	/*0008*/ HWND__ * hwndItem;
	/*0010*/ UINT itemID1;
	/*0018*/ ULONGLONG itemData1;
	/*0020*/ UINT itemID2;
	/*0028*/ ULONGLONG itemData2;
	/*0030*/ ULONG dwLocaleId;
	/*0038*/
};

enum tagCOMPONENT_CHARACTERISTICS {
	NCF_VIRTUAL = 0x1,
	NCF_SOFTWARE_ENUMERATED = 0x2,
	NCF_PHYSICAL = 0x4,
	NCF_HIDDEN = 0x8,
	NCF_NO_SERVICE = 0x10,
	NCF_NOT_USER_REMOVABLE = 0x20,
	NCF_MULTIPORT_INSTANCED_ADAPTER = 0x40,
	NCF_HAS_UI = 0x80,
	NCF_SINGLE_INSTANCE = 0x100,
	NCF_FILTER = 0x400,
	NCF_DONTEXPOSELOWER = 0x1000,
	NCF_HIDE_BINDING = 0x2000,
	NCF_NDIS_PROTOCOL = 0x4000,
	NCF_FIXED_BINDING = 0x20000,
	NCF_LW_FILTER = 0x40000
};

struct tagCOMPOSITIONFORM {
	/*0000*/ ULONG dwStyle;
	/*0004*/ tagPOINT ptCurrentPos;
	/*000c*/ tagRECT rcArea;
	/*001c*/
};

enum tagCOMSD {
	SD_LAUNCHPERMISSIONS = 0x0,
	SD_ACCESSPERMISSIONS = 0x1,
	SD_LAUNCHRESTRICTIONS = 0x2,
	SD_ACCESSRESTRICTIONS = 0x3
};

enum tagCONDITION_OPERATION {
	COP_IMPLICIT = 0x0,
	COP_EQUAL = 0x1,
	COP_NOTEQUAL = 0x2,
	COP_LESSTHAN = 0x3,
	COP_GREATERTHAN = 0x4,
	COP_LESSTHANOREQUAL = 0x5,
	COP_GREATERTHANOREQUAL = 0x6,
	COP_VALUE_STARTSWITH = 0x7,
	COP_VALUE_ENDSWITH = 0x8,
	COP_VALUE_CONTAINS = 0x9,
	COP_VALUE_NOTCONTAINS = 0xa,
	COP_DOSWILDCARDS = 0xb,
	COP_WORD_EQUAL = 0xc,
	COP_WORD_STARTSWITH = 0xd,
	COP_APPLICATION_SPECIFIC = 0xe
};

enum tagCONDITION_TYPE {
	CT_AND_CONDITION = 0x0,
	CT_OR_CONDITION = 0x1,
	CT_NOT_CONDITION = 0x2,
	CT_LEAF_CONDITION = 0x3
};

struct tagCONNECTDATA {
	/*0000*/ IUnknown * pUnk;
	/*0008*/ ULONG dwCookie;
	/*0010*/
};

struct tagCONTROLINFO {
	/*0000*/ ULONG cb;
	/*0008*/ HACCEL__ * hAccel;
	/*0010*/ USHORT cAccel;
	/*0014*/ ULONG dwFlags;
	/*0018*/
};

struct tagCONVERT_A {
	/*0000*/ CHAR * szOldDll;
	/*0008*/ ULONG fFlags;
	/*0008*/ ULONG fSchemaChangesOnly : 01; // 0x00000001;
	/*0010*/
};

struct tagCONVERT_W {
	/*0000*/ WCHAR * szOldDll;
	/*0008*/ ULONG fFlags;
	/*0008*/ ULONG fSchemaChangesOnly : 01; // 0x00000001;
	/*0010*/
};

struct tagCON_BRANDING_INFO {
	/*0000*/ WCHAR * szwLargeIconPath;
	/*0008*/ WCHAR * szwSmallIconPath;
	/*0010*/
};

struct tagCOPYDATASTRUCT {
	/*0000*/ ULONGLONG dwData;
	/*0008*/ ULONG cbData;
	/*0010*/ void * lpData;
	/*0018*/
};

enum tagCOWAIT_FLAGS {
	COWAIT_DEFAULT = 0x0,
	COWAIT_WAITALL = 0x1,
	COWAIT_ALERTABLE = 0x2,
	COWAIT_INPUTAVAILABLE = 0x4,
	COWAIT_DISPATCH_CALLS = 0x8,
	COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10
};

struct tagCREATESTRUCTA {
	/*0000*/ void * lpCreateParams;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ HMENU__ * hMenu;
	/*0018*/ HWND__ * hwndParent;
	/*0020*/ INT cy;
	/*0024*/ INT cx;
	/*0028*/ INT y;
	/*002c*/ INT x;
	/*0030*/ LONG style;
	/*0038*/ CHAR const * lpszName;
	/*0040*/ CHAR const * lpszClass;
	/*0048*/ ULONG dwExStyle;
	/*0050*/
};

struct tagCREATESTRUCTW {
	/*0000*/ void * lpCreateParams;
	/*0008*/ HINSTANCE__ * hInstance;
	/*0010*/ HMENU__ * hMenu;
	/*0018*/ HWND__ * hwndParent;
	/*0020*/ INT cy;
	/*0024*/ INT cx;
	/*0028*/ INT y;
	/*002c*/ INT x;
	/*0030*/ LONG style;
	/*0038*/ WCHAR const * lpszName;
	/*0040*/ WCHAR const * lpszClass;
	/*0048*/ ULONG dwExStyle;
	/*0050*/
};

struct tagCSPLATFORM {
	/*0000*/ ULONG dwPlatformId;
	/*0004*/ ULONG dwVersionHi;
	/*0008*/ ULONG dwVersionLo;
	/*000c*/ ULONG dwProcessorArch;
	/*0010*/
};

enum tagCS_COLUMN_SET {
	COLSET_ALL = 0x0,
	COLSET_VISIBLE = 0x1,
	COLSET_COLUMNID = 0x2
};

enum tagCS_COLUMN_WIDTH_TYPE {
	COLWT_CURRENT = 0x0,
	COLWT_DEFAULT = 0x1,
	COLWT_MINIMUM = 0x2,
	COLWT_IDEAL = 0x3
};

struct tagCStdPSFactoryBuffer {
	/*0000*/ IPSFactoryBufferVtbl const * lpVtbl;
	/*0008*/ LONG RefCount;
	/*0010*/ tagProxyFileInfo const * * pProxyFileList;
	/*0018*/ LONG Filler1;
	/*0020*/
};

enum tagCTRLINFO {
	CTRLINFO_EATS_RETURN = 0x1,
	CTRLINFO_EATS_ESCAPE = 0x2
};

struct tagCURSORINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG flags;
	/*0008*/ HICON__ * hCursor;
	/*0010*/ tagPOINT ptScreenPos;
	/*0018*/
};

struct tagCURSORSHAPE {
	/*0000*/ INT xHotSpot;
	/*0004*/ INT yHotSpot;
	/*0008*/ INT cx;
	/*000c*/ INT cy;
	/*0010*/ INT cbWidth;
	/*0014*/ UCHAR Planes;
	/*0015*/ UCHAR BitsPixel;
	/*0018*/
};

struct tagCUSTDATA {
	/*0000*/ ULONG cCustData;
	/*0008*/ tagCUSTDATAITEM * prgCustData;
	/*0010*/
};

struct tagCUSTDATAITEM {
	/*0000*/ _GUID guid;
	/*0010*/ tagVARIANT varValue;
	/*0028*/
};

struct tagCWPRETSTRUCT {
	/*0000*/ LONGLONG lResult;
	/*0008*/ LONGLONG lParam;
	/*0010*/ ULONGLONG wParam;
	/*0018*/ UINT message;
	/*0020*/ HWND__ * hwnd;
	/*0028*/
};

struct tagCWPSTRUCT {
	/*0000*/ LONGLONG lParam;
	/*0008*/ ULONGLONG wParam;
	/*0010*/ UINT message;
	/*0018*/ HWND__ * hwnd;
	/*0020*/
};

union tagCY {
	/*0000*/ ULONG Lo;
	/*0004*/ LONG Hi;
	/*0000*/ LONGLONG int64;
	/*0008*/
};

struct tagDATABLOCKHEADER;

enum tagDATADIR {
	DATADIR_GET = 0x1,
	DATADIR_SET = 0x2
};

struct tagDATETIMEPICKERINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcCheck;
	/*0014*/ ULONG stateCheck;
	/*0018*/ tagRECT rcButton;
	/*0028*/ ULONG stateButton;
	/*0030*/ HWND__ * hwndEdit;
	/*0038*/ HWND__ * hwndUD;
	/*0040*/ HWND__ * hwndDropDown;
	/*0048*/
};

enum tagDCOM_CALL_STATE {
	DCOM_NONE = 0x0,
	DCOM_CALL_COMPLETE = 0x1,
	DCOM_CALL_CANCELED = 0x2
};

struct tagDEBUGHOOKINFO {
	/*0000*/ ULONG idThread;
	/*0004*/ ULONG idThreadInstaller;
	/*0008*/ LONGLONG lParam;
	/*0010*/ ULONGLONG wParam;
	/*0018*/ INT code;
	/*0020*/
};

struct tagDEC {
	/*0000*/ USHORT wReserved;
	/*0002*/ UCHAR scale;
	/*0003*/ UCHAR sign;
	/*0002*/ USHORT signscale;
	/*0004*/ ULONG Hi32;
	/*0008*/ ULONG Lo32;
	/*000c*/ ULONG Mid32;
	/*0008*/ ULONGLONG Lo64;
	/*0010*/
};

struct tagDELETEITEMSTRUCT {
	/*0000*/ UINT CtlType;
	/*0004*/ UINT CtlID;
	/*0008*/ UINT itemID;
	/*0010*/ HWND__ * hwndItem;
	/*0018*/ ULONGLONG itemData;
	/*0020*/
};

enum tagDESCKIND {
	DESCKIND_NONE = 0x0,
	DESCKIND_FUNCDESC = 0x1,
	DESCKIND_VARDESC = 0x2,
	DESCKIND_TYPECOMP = 0x3,
	DESCKIND_IMPLICITAPPOBJ = 0x4,
	DESCKIND_MAX = 0x5
};

struct tagDESIGNVECTOR {
	/*0000*/ ULONG dvReserved;
	/*0004*/ ULONG dvNumAxes;
	/*0008*/ LONG dvValues[0x10];
	/*0048*/
};

enum tagDESKBANDCID {
	DBID_BANDINFOCHANGED = 0x0,
	DBID_SHOWONLY = 0x1,
	DBID_MAXIMIZEBAND = 0x2,
	DBID_PUSHCHEVRON = 0x3,
	DBID_DELAYINIT = 0x4,
	DBID_FINISHINIT = 0x5,
	DBID_SETWINDOWTHEME = 0x6,
	DBID_PERMITAUTOHIDE = 0x7
};

enum tagDESTCATTYPE {
	DCT_CUSTOM = 0x0,
	DCT_KNOWN = 0x1,
	DCT_TASKS = 0x2
};

struct tagDIBSECTION {
	/*0000*/ tagBITMAP dsBm;
	/*0020*/ tagBITMAPINFOHEADER dsBmih;
	/*0048*/ ULONG dsBitfields[0x3];
	/*0058*/ void * dshSection;
	/*0060*/ ULONG dsOffset;
	/*0068*/
};

enum tagDISCARDCACHE {
	DISCARDCACHE_SAVEIFDIRTY = 0x0,
	DISCARDCACHE_NOSAVE = 0x1
};

struct tagDISPPARAMS {
	/*0000*/ tagVARIANT * rgvarg;
	/*0008*/ LONG * rgdispidNamedArgs;
	/*0010*/ UINT cArgs;
	/*0014*/ UINT cNamedArgs;
	/*0018*/
};

enum tagDOCHOSTUIDBLCLKDispatch {
	docHostUIDblClkDEFAULT = 0x0,
	docHostUIDblClkSHOWPROPERTIES = 0x1,
	docHostUIDblClkSHOWCODE = 0x2
};

enum tagDOMNodeType {
	NODE_INVALID = 0x0,
	NODE_ELEMENT = 0x1,
	NODE_ATTRIBUTE = 0x2,
	NODE_TEXT = 0x3,
	NODE_CDATA_SECTION = 0x4,
	NODE_ENTITY_REFERENCE = 0x5,
	NODE_ENTITY = 0x6,
	NODE_PROCESSING_INSTRUCTION = 0x7,
	NODE_COMMENT = 0x8,
	NODE_DOCUMENT = 0x9,
	NODE_DOCUMENT_TYPE = 0xa,
	NODE_DOCUMENT_FRAGMENT = 0xb,
	NODE_NOTATION = 0xc
};

struct tagDRAGLISTINFO {
	/*0000*/ UINT uNotification;
	/*0008*/ HWND__ * hWnd;
	/*0010*/ tagPOINT ptCursor;
	/*0018*/
};

struct tagDRAWITEMSTRUCT {
	/*0000*/ UINT CtlType;
	/*0004*/ UINT CtlID;
	/*0008*/ UINT itemID;
	/*000c*/ UINT itemAction;
	/*0010*/ UINT itemState;
	/*0018*/ HWND__ * hwndItem;
	/*0020*/ HDC__ * hDC;
	/*0028*/ tagRECT rcItem;
	/*0038*/ ULONGLONG itemData;
	/*0040*/
};

struct tagDRAWTEXTPARAMS {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iTabLength;
	/*0008*/ INT iLeftMargin;
	/*000c*/ INT iRightMargin;
	/*0010*/ UINT uiLengthDrawn;
	/*0014*/
};

struct tagDROPSTRUCT {
	/*0000*/ HWND__ * hwndSource;
	/*0008*/ HWND__ * hwndSink;
	/*0010*/ ULONG wFmt;
	/*0018*/ ULONGLONG dwData;
	/*0020*/ tagPOINT ptDrop;
	/*0028*/ ULONG dwControlData;
	/*0030*/
};

enum tagDVASPECT {
	DVASPECT_CONTENT = 0x1,
	DVASPECT_THUMBNAIL = 0x2,
	DVASPECT_ICON = 0x4,
	DVASPECT_DOCPRINT = 0x8
};

enum tagDVASPECT2 {
	DVASPECT_OPAQUE = 0x10,
	DVASPECT_TRANSPARENT = 0x20
};

struct tagDVTARGETDEVICE {
	/*0000*/ ULONG tdSize;
	/*0004*/ USHORT tdDriverNameOffset;
	/*0006*/ USHORT tdDeviceNameOffset;
	/*0008*/ USHORT tdPortNameOffset;
	/*000a*/ USHORT tdExtDevmodeOffset;
	/*000c*/ UCHAR tdData[0x1];
	/*0010*/
};

enum tagDocHostUIFlagDispatch {
	docHostUIFlagDIALOG = 0x1,
	docHostUIFlagDISABLE_HELP_MENU = 0x2,
	docHostUIFlagNO3DBORDER = 0x4,
	docHostUIFlagSCROLL_NO = 0x8,
	docHostUIFlagDISABLE_SCRIPT_INACTIVE = 0x10,
	docHostUIFlagOPENNEWWIN = 0x20,
	docHostUIFlagDISABLE_OFFSCREEN = 0x40,
	docHostUIFlagFLAT_SCROLLBAR = 0x80,
	docHostUIFlagDIV_BLOCKDEFAULT = 0x100,
	docHostUIFlagACTIVATE_CLIENTHIT_ONLY = 0x200
};

struct tagELEMDESC {
	/*0000*/ tagTYPEDESC tdesc;
	/*0010*/ tagIDLDESC idldesc;
	/*0010*/ tagPARAMDESC paramdesc;
	/*0020*/
};

struct tagEMR {
	/*0000*/ ULONG iType;
	/*0004*/ ULONG nSize;
	/*0008*/
};

struct tagEMRALPHABLEND {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/ LONG cxSrc;
	/*0068*/ LONG cySrc;
	/*006c*/
};

struct tagEMRANGLEARC {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlCenter;
	/*0010*/ ULONG nRadius;
	/*0014*/ float eStartAngle;
	/*0018*/ float eSweepAngle;
	/*001c*/
};

struct tagEMRARC {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBox;
	/*0018*/ _POINTL ptlStart;
	/*0020*/ _POINTL ptlEnd;
	/*0028*/
};

struct tagEMRBITBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/
};

struct tagEMRCREATEBRUSHINDIRECT {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihBrush;
	/*000c*/ tagLOGBRUSH32 lb;
	/*0018*/
};

struct tagEMRCREATECOLORSPACE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihCS;
	/*000c*/ tagLOGCOLORSPACEA lcs;
	/*0154*/
};

struct tagEMRCREATECOLORSPACEW {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihCS;
	/*000c*/ tagLOGCOLORSPACEW lcs;
	/*0258*/ ULONG dwFlags;
	/*025c*/ ULONG cbData;
	/*0260*/ UCHAR Data[0x1];
	/*0264*/
};

struct tagEMRCREATEDIBPATTERNBRUSHPT {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihBrush;
	/*000c*/ ULONG iUsage;
	/*0010*/ ULONG offBmi;
	/*0014*/ ULONG cbBmi;
	/*0018*/ ULONG offBits;
	/*001c*/ ULONG cbBits;
	/*0020*/
};

struct tagEMRCREATEMONOBRUSH {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihBrush;
	/*000c*/ ULONG iUsage;
	/*0010*/ ULONG offBmi;
	/*0014*/ ULONG cbBmi;
	/*0018*/ ULONG offBits;
	/*001c*/ ULONG cbBits;
	/*0020*/
};

struct tagEMRCREATEPALETTE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPal;
	/*000c*/ tagLOGPALETTE lgpl;
	/*0014*/
};

struct tagEMRCREATEPEN {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPen;
	/*000c*/ tagLOGPEN lopn;
	/*001c*/
};

struct tagEMRELLIPSE {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBox;
	/*0018*/
};

struct tagEMREOF {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG nPalEntries;
	/*000c*/ ULONG offPalEntries;
	/*0010*/ ULONG nSizeLast;
	/*0014*/
};

struct tagEMREXCLUDECLIPRECT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclClip;
	/*0018*/
};

struct tagEMREXTCREATEFONTINDIRECTW {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihFont;
	/*000c*/ tagEXTLOGFONTW elfw;
	/*014c*/
};

struct tagEMREXTCREATEPEN {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPen;
	/*000c*/ ULONG offBmi;
	/*0010*/ ULONG cbBmi;
	/*0014*/ ULONG offBits;
	/*0018*/ ULONG cbBits;
	/*001c*/ tagEXTLOGPEN32 elp;
	/*0038*/
};

struct tagEMREXTESCAPE {
	/*0000*/ tagEMR emr;
	/*0008*/ INT iEscape;
	/*000c*/ INT cbEscData;
	/*0010*/ UCHAR EscData[0x1];
	/*0014*/
};

struct tagEMREXTFLOODFILL {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlStart;
	/*0010*/ ULONG crColor;
	/*0014*/ ULONG iMode;
	/*0018*/
};

struct tagEMREXTSELECTCLIPRGN {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG cbRgnData;
	/*000c*/ ULONG iMode;
	/*0010*/ UCHAR RgnData[0x1];
	/*0014*/
};

struct tagEMREXTTEXTOUTA {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG iGraphicsMode;
	/*001c*/ float exScale;
	/*0020*/ float eyScale;
	/*0024*/ tagEMRTEXT emrtext;
	/*004c*/
};

struct tagEMRFILLPATH {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/
};

struct tagEMRFILLRGN {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cbRgnData;
	/*001c*/ ULONG ihBrush;
	/*0020*/ UCHAR RgnData[0x1];
	/*0024*/
};

struct tagEMRFORMAT {
	/*0000*/ ULONG dSignature;
	/*0004*/ ULONG nVersion;
	/*0008*/ ULONG cbData;
	/*000c*/ ULONG offData;
	/*0010*/
};

struct tagEMRFRAMERGN {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cbRgnData;
	/*001c*/ ULONG ihBrush;
	/*0020*/ tagSIZE szlStroke;
	/*0028*/ UCHAR RgnData[0x1];
	/*002c*/
};

struct tagEMRGDICOMMENT {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG cbData;
	/*000c*/ UCHAR Data[0x1];
	/*0010*/
};

struct tagEMRGLSBOUNDEDRECORD {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cbData;
	/*001c*/ UCHAR Data[0x1];
	/*0020*/
};

struct tagEMRGLSRECORD {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG cbData;
	/*000c*/ UCHAR Data[0x1];
	/*0010*/
};

struct tagEMRGRADIENTFILL {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG nVer;
	/*001c*/ ULONG nTri;
	/*0020*/ ULONG ulMode;
	/*0024*/ _TRIVERTEX Ver[0x1];
	/*0034*/
};

struct tagEMRINVERTRGN {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cbRgnData;
	/*001c*/ UCHAR RgnData[0x1];
	/*0020*/
};

struct tagEMRLINETO {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptl;
	/*0010*/
};

struct tagEMRMASKBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/ LONG xMask;
	/*0068*/ LONG yMask;
	/*006c*/ ULONG iUsageMask;
	/*0070*/ ULONG offBmiMask;
	/*0074*/ ULONG cbBmiMask;
	/*0078*/ ULONG offBitsMask;
	/*007c*/ ULONG cbBitsMask;
	/*0080*/
};

struct tagEMRMODIFYWORLDTRANSFORM {
	/*0000*/ tagEMR emr;
	/*0008*/ tagXFORM xform;
	/*0020*/ ULONG iMode;
	/*0024*/
};

struct tagEMRNAMEDESCAPE {
	/*0000*/ tagEMR emr;
	/*0008*/ INT iEscape;
	/*000c*/ INT cbDriver;
	/*0010*/ INT cbEscData;
	/*0014*/ UCHAR EscData[0x1];
	/*0018*/
};

struct tagEMROFFSETCLIPRGN {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlOffset;
	/*0010*/
};

struct tagEMRPIXELFORMAT {
	/*0000*/ tagEMR emr;
	/*0008*/ tagPIXELFORMATDESCRIPTOR pfd;
	/*0030*/
};

struct tagEMRPLGBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ _POINTL aptlDest[0x3];
	/*0030*/ LONG xSrc;
	/*0034*/ LONG ySrc;
	/*0038*/ LONG cxSrc;
	/*003c*/ LONG cySrc;
	/*0040*/ tagXFORM xformSrc;
	/*0058*/ ULONG crBkColorSrc;
	/*005c*/ ULONG iUsageSrc;
	/*0060*/ ULONG offBmiSrc;
	/*0064*/ ULONG cbBmiSrc;
	/*0068*/ ULONG offBitsSrc;
	/*006c*/ ULONG cbBitsSrc;
	/*0070*/ LONG xMask;
	/*0074*/ LONG yMask;
	/*0078*/ ULONG iUsageMask;
	/*007c*/ ULONG offBmiMask;
	/*0080*/ ULONG cbBmiMask;
	/*0084*/ ULONG offBitsMask;
	/*0088*/ ULONG cbBitsMask;
	/*008c*/
};

struct tagEMRPOLYDRAW {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cptl;
	/*001c*/ _POINTL aptl[0x1];
	/*0024*/ UCHAR abTypes[0x1];
	/*0028*/
};

struct tagEMRPOLYDRAW16 {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cpts;
	/*001c*/ tagPOINTS apts[0x1];
	/*0020*/ UCHAR abTypes[0x1];
	/*0024*/
};

struct tagEMRPOLYLINE {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cptl;
	/*001c*/ _POINTL aptl[0x1];
	/*0024*/
};

struct tagEMRPOLYLINE16 {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG cpts;
	/*001c*/ tagPOINTS apts[0x1];
	/*0020*/
};

struct tagEMRPOLYPOLYLINE {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG nPolys;
	/*001c*/ ULONG cptl;
	/*0020*/ ULONG aPolyCounts[0x1];
	/*0024*/ _POINTL aptl[0x1];
	/*002c*/
};

struct tagEMRPOLYPOLYLINE16 {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG nPolys;
	/*001c*/ ULONG cpts;
	/*0020*/ ULONG aPolyCounts[0x1];
	/*0024*/ tagPOINTS apts[0x1];
	/*0028*/
};

struct tagEMRPOLYTEXTOUTA {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ ULONG iGraphicsMode;
	/*001c*/ float exScale;
	/*0020*/ float eyScale;
	/*0024*/ LONG cStrings;
	/*0028*/ tagEMRTEXT aemrtext[0x1];
	/*0050*/
};

struct tagEMRRESIZEPALETTE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPal;
	/*000c*/ ULONG cEntries;
	/*0010*/
};

struct tagEMRRESTOREDC {
	/*0000*/ tagEMR emr;
	/*0008*/ LONG iRelative;
	/*000c*/
};

struct tagEMRROUNDRECT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBox;
	/*0018*/ tagSIZE szlCorner;
	/*0020*/
};

struct tagEMRSCALEVIEWPORTEXTEX {
	/*0000*/ tagEMR emr;
	/*0008*/ LONG xNum;
	/*000c*/ LONG xDenom;
	/*0010*/ LONG yNum;
	/*0014*/ LONG yDenom;
	/*0018*/
};

struct tagEMRSELECTCLIPPATH {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG iMode;
	/*000c*/
};

struct tagEMRSELECTOBJECT {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihObject;
	/*000c*/
};

struct tagEMRSELECTPALETTE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPal;
	/*000c*/
};

struct tagEMRSETARCDIRECTION {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG iArcDirection;
	/*000c*/
};

struct tagEMRSETCOLORADJUSTMENT {
	/*0000*/ tagEMR emr;
	/*0008*/ tagCOLORADJUSTMENT ColorAdjustment;
	/*0020*/
};

struct tagEMRSETCOLORSPACE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihCS;
	/*000c*/
};

struct tagEMRSETDIBITSTODEVICE {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG xSrc;
	/*0024*/ LONG ySrc;
	/*0028*/ LONG cxSrc;
	/*002c*/ LONG cySrc;
	/*0030*/ ULONG offBmiSrc;
	/*0034*/ ULONG cbBmiSrc;
	/*0038*/ ULONG offBitsSrc;
	/*003c*/ ULONG cbBitsSrc;
	/*0040*/ ULONG iUsageSrc;
	/*0044*/ ULONG iStartScan;
	/*0048*/ ULONG cScans;
	/*004c*/
};

struct tagEMRSETICMPROFILE {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG dwFlags;
	/*000c*/ ULONG cbName;
	/*0010*/ ULONG cbData;
	/*0014*/ UCHAR Data[0x1];
	/*0018*/
};

struct tagEMRSETMAPPERFLAGS {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG dwFlags;
	/*000c*/
};

struct tagEMRSETMITERLIMIT {
	/*0000*/ tagEMR emr;
	/*0008*/ float eMiterLimit;
	/*000c*/
};

struct tagEMRSETPALETTEENTRIES {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG ihPal;
	/*000c*/ ULONG iStart;
	/*0010*/ ULONG cEntries;
	/*0014*/ tagPALETTEENTRY aPalEntries[0x1];
	/*0018*/
};

struct tagEMRSETPIXELV {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlPixel;
	/*0010*/ ULONG crColor;
	/*0014*/
};

struct tagEMRSETTEXTCOLOR {
	/*0000*/ tagEMR emr;
	/*0008*/ ULONG crColor;
	/*000c*/
};

struct tagEMRSETVIEWPORTEXTEX {
	/*0000*/ tagEMR emr;
	/*0008*/ tagSIZE szlExtent;
	/*0010*/
};

struct tagEMRSETVIEWPORTORGEX {
	/*0000*/ tagEMR emr;
	/*0008*/ _POINTL ptlOrigin;
	/*0010*/
};

struct tagEMRSETWORLDTRANSFORM {
	/*0000*/ tagEMR emr;
	/*0008*/ tagXFORM xform;
	/*0020*/
};

struct tagEMRSTRETCHBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/ LONG cxSrc;
	/*0068*/ LONG cySrc;
	/*006c*/
};

struct tagEMRSTRETCHDIBITS {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG xSrc;
	/*0024*/ LONG ySrc;
	/*0028*/ LONG cxSrc;
	/*002c*/ LONG cySrc;
	/*0030*/ ULONG offBmiSrc;
	/*0034*/ ULONG cbBmiSrc;
	/*0038*/ ULONG offBitsSrc;
	/*003c*/ ULONG cbBitsSrc;
	/*0040*/ ULONG iUsageSrc;
	/*0044*/ ULONG dwRop;
	/*0048*/ LONG cxDest;
	/*004c*/ LONG cyDest;
	/*0050*/
};

struct tagEMRTEXT {
	/*0000*/ _POINTL ptlReference;
	/*0008*/ ULONG nChars;
	/*000c*/ ULONG offString;
	/*0010*/ ULONG fOptions;
	/*0014*/ _RECTL rcl;
	/*0024*/ ULONG offDx;
	/*0028*/
};

struct tagEMRTRANSPARENTBLT {
	/*0000*/ tagEMR emr;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ LONG xDest;
	/*001c*/ LONG yDest;
	/*0020*/ LONG cxDest;
	/*0024*/ LONG cyDest;
	/*0028*/ ULONG dwRop;
	/*002c*/ LONG xSrc;
	/*0030*/ LONG ySrc;
	/*0034*/ tagXFORM xformSrc;
	/*004c*/ ULONG crBkColorSrc;
	/*0050*/ ULONG iUsageSrc;
	/*0054*/ ULONG offBmiSrc;
	/*0058*/ ULONG cbBmiSrc;
	/*005c*/ ULONG offBitsSrc;
	/*0060*/ ULONG cbBitsSrc;
	/*0064*/ LONG cxSrc;
	/*0068*/ LONG cySrc;
	/*006c*/
};

struct tagENHMETAHEADER {
	/*0000*/ ULONG iType;
	/*0004*/ ULONG nSize;
	/*0008*/ _RECTL rclBounds;
	/*0018*/ _RECTL rclFrame;
	/*0028*/ ULONG dSignature;
	/*002c*/ ULONG nVersion;
	/*0030*/ ULONG nBytes;
	/*0034*/ ULONG nRecords;
	/*0038*/ USHORT nHandles;
	/*003a*/ USHORT sReserved;
	/*003c*/ ULONG nDescription;
	/*0040*/ ULONG offDescription;
	/*0044*/ ULONG nPalEntries;
	/*0048*/ tagSIZE szlDevice;
	/*0050*/ tagSIZE szlMillimeters;
	/*0058*/ ULONG cbPixelFormat;
	/*005c*/ ULONG offPixelFormat;
	/*0060*/ ULONG bOpenGL;
	/*0064*/ tagSIZE szlMicrometers;
	/*006c*/
};

struct tagENHMETARECORD {
	/*0000*/ ULONG iType;
	/*0004*/ ULONG nSize;
	/*0008*/ ULONG dParm[0x1];
	/*000c*/
};

struct tagENUMLOGFONTA {
	/*0000*/ tagLOGFONTA elfLogFont;
	/*003c*/ UCHAR elfFullName[0x40];
	/*007c*/ UCHAR elfStyle[0x20];
	/*009c*/
};

struct tagENUMLOGFONTEXA {
	/*0000*/ tagLOGFONTA elfLogFont;
	/*003c*/ UCHAR elfFullName[0x40];
	/*007c*/ UCHAR elfStyle[0x20];
	/*009c*/ UCHAR elfScript[0x20];
	/*00bc*/
};

struct tagENUMLOGFONTEXDVA {
	/*0000*/ tagENUMLOGFONTEXA elfEnumLogfontEx;
	/*00bc*/ tagDESIGNVECTOR elfDesignVector;
	/*0104*/
};

struct tagENUMLOGFONTEXDVW {
	/*0000*/ tagENUMLOGFONTEXW elfEnumLogfontEx;
	/*015c*/ tagDESIGNVECTOR elfDesignVector;
	/*01a4*/
};

struct tagENUMLOGFONTEXW {
	/*0000*/ tagLOGFONTW elfLogFont;
	/*005c*/ WCHAR elfFullName[0x40];
	/*00dc*/ WCHAR elfStyle[0x20];
	/*011c*/ WCHAR elfScript[0x20];
	/*015c*/
};

struct tagENUMLOGFONTW {
	/*0000*/ tagLOGFONTW elfLogFont;
	/*005c*/ WCHAR elfFullName[0x40];
	/*00dc*/ WCHAR elfStyle[0x20];
	/*011c*/
};

struct tagENUMTEXTMETRICA {
	/*0000*/ tagNEWTEXTMETRICEXA etmNewTextMetricEx;
	/*0060*/ tagAXESLISTA etmAxesList;
	/*01e8*/
};

struct tagENUMTEXTMETRICW {
	/*0000*/ tagNEWTEXTMETRICEXW etmNewTextMetricEx;
	/*0064*/ tagAXESLISTW etmAxesList;
	/*02ec*/
};

struct tagENUMUILANG {
	/*0000*/ ULONG NumOfEnumUILang;
	/*0004*/ ULONG SizeOfEnumUIBuffer;
	/*0008*/ WCHAR * pEnumUIBuffer;
	/*0010*/
};

enum tagENUM_BINDING_PATHS_FLAGS {
	EBP_ABOVE = 0x1,
	EBP_BELOW = 0x2
};

enum tagEOLE_AUTHENTICATION_CAPABILITIES {
	EOAC_NONE = 0x0,
	EOAC_MUTUAL_AUTH = 0x1,
	EOAC_STATIC_CLOAKING = 0x20,
	EOAC_DYNAMIC_CLOAKING = 0x40,
	EOAC_ANY_AUTHORITY = 0x80,
	EOAC_MAKE_FULLSIC = 0x100,
	EOAC_DEFAULT = 0x800,
	EOAC_SECURE_REFS = 0x2,
	EOAC_ACCESS_CONTROL = 0x4,
	EOAC_APPID = 0x8,
	EOAC_DYNAMIC = 0x10,
	EOAC_REQUIRE_FULLSIC = 0x200,
	EOAC_AUTO_IMPERSONATE = 0x400,
	EOAC_DISABLE_AAA = 0x1000,
	EOAC_NO_CUSTOM_MARSHAL = 0x2000,
	EOAC_RESERVED1 = 0x4000
};

struct tagEVENTMSG {
	/*0000*/ UINT message;
	/*0004*/ UINT paramL;
	/*0008*/ UINT paramH;
	/*000c*/ ULONG time;
	/*0010*/ HWND__ * hwnd;
	/*0018*/
};

struct tagEXCEPINFO {
	/*0000*/ USHORT wCode;
	/*0002*/ USHORT wReserved;
	/*0008*/ WCHAR * bstrSource;
	/*0010*/ WCHAR * bstrDescription;
	/*0018*/ WCHAR * bstrHelpFile;
	/*0020*/ ULONG dwHelpContext;
	/*0028*/ void * pvReserved;
	/*0030*/ HRESULT (* pfnDeferredFillIn)( tagEXCEPINFO * );
	/*0038*/ LONG scode;
	/*0040*/
};

enum tagEXTCONN {
	EXTCONN_STRONG = 0x1,
	EXTCONN_WEAK = 0x2,
	EXTCONN_CALLABLE = 0x4
};

struct tagEXTLOGFONTA {
	/*0000*/ tagLOGFONTA elfLogFont;
	/*003c*/ UCHAR elfFullName[0x40];
	/*007c*/ UCHAR elfStyle[0x20];
	/*009c*/ ULONG elfVersion;
	/*00a0*/ ULONG elfStyleSize;
	/*00a4*/ ULONG elfMatch;
	/*00a8*/ ULONG elfReserved;
	/*00ac*/ UCHAR elfVendorId[0x4];
	/*00b0*/ ULONG elfCulture;
	/*00b4*/ tagPANOSE elfPanose;
	/*00c0*/
};

struct tagEXTLOGFONTW {
	/*0000*/ tagLOGFONTW elfLogFont;
	/*005c*/ WCHAR elfFullName[0x40];
	/*00dc*/ WCHAR elfStyle[0x20];
	/*011c*/ ULONG elfVersion;
	/*0120*/ ULONG elfStyleSize;
	/*0124*/ ULONG elfMatch;
	/*0128*/ ULONG elfReserved;
	/*012c*/ UCHAR elfVendorId[0x4];
	/*0130*/ ULONG elfCulture;
	/*0134*/ tagPANOSE elfPanose;
	/*0140*/
};

struct tagEXTLOGPEN {
	/*0000*/ ULONG elpPenStyle;
	/*0004*/ ULONG elpWidth;
	/*0008*/ UINT elpBrushStyle;
	/*000c*/ ULONG elpColor;
	/*0010*/ ULONGLONG elpHatch;
	/*0018*/ ULONG elpNumEntries;
	/*001c*/ ULONG elpStyleEntry[0x1];
	/*0020*/
};

struct tagEXTLOGPEN32 {
	/*0000*/ ULONG elpPenStyle;
	/*0004*/ ULONG elpWidth;
	/*0008*/ UINT elpBrushStyle;
	/*000c*/ ULONG elpColor;
	/*0010*/ ULONG elpHatch;
	/*0014*/ ULONG elpNumEntries;
	/*0018*/ ULONG elpStyleEntry[0x1];
	/*001c*/
};

enum tagExtendedErrorParamTypes {
	eeptAnsiString = 0x1,
	eeptUnicodeString = 0x2,
	eeptLongVal = 0x3,
	eeptShortVal = 0x4,
	eeptPointerVal = 0x5,
	eeptNone = 0x6,
	eeptBinary = 0x7
};

struct tagExtentInfo {
	/*0000*/ ULONG cb;
	/*0004*/ ULONG dwExtentMode;
	/*0008*/ tagSIZE sizelProposed;
	/*0010*/
};

enum tagExtentMode {
	DVEXTENT_CONTENT = 0x0,
	DVEXTENT_INTEGRAL = 0x1
};

enum tagFEEDBACK_TYPE {
	FEEDBACK_TOUCH_CONTACTVISUALIZATION = 0x1,
	FEEDBACK_PEN_BARRELVISUALIZATION = 0x2,
	FEEDBACK_PEN_TAP = 0x3,
	FEEDBACK_PEN_DOUBLETAP = 0x4,
	FEEDBACK_PEN_PRESSANDHOLD = 0x5,
	FEEDBACK_PEN_RIGHTTAP = 0x6,
	FEEDBACK_TOUCH_TAP = 0x7,
	FEEDBACK_TOUCH_DOUBLETAP = 0x8,
	FEEDBACK_TOUCH_PRESSANDHOLD = 0x9,
	FEEDBACK_TOUCH_RIGHTTAP = 0xa,
	FEEDBACK_GESTURE_PRESSANDTAP = 0xb,
	FEEDBACK_MAX = 0xffffffff
};

struct tagFILTERKEYS {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iWaitMSec;
	/*000c*/ ULONG iDelayMSec;
	/*0010*/ ULONG iRepeatMSec;
	/*0014*/ ULONG iBounceMSec;
	/*0018*/
};

struct tagFONTDESC {
	/*0000*/ UINT cbSizeofstruct;
	/*0008*/ WCHAR * lpstrName;
	/*0010*/ tagCY cySize;
	/*0018*/ SHORT sWeight;
	/*001a*/ SHORT sCharset;
	/*001c*/ INT fItalic;
	/*0020*/ INT fUnderline;
	/*0024*/ INT fStrikethrough;
	/*0028*/
};

struct tagFONTSIGNATURE {
	/*0000*/ ULONG fsUsb[0x4];
	/*0010*/ ULONG fsCsb[0x2];
	/*0018*/
};

struct tagFORMATETC {
	/*0000*/ USHORT cfFormat;
	/*0008*/ tagDVTARGETDEVICE * ptd;
	/*0010*/ ULONG dwAspect;
	/*0014*/ LONG lindex;
	/*0018*/ ULONG tymed;
	/*0020*/
};

struct tagFUNCDESC {
	/*0000*/ LONG memid;
	/*0008*/ LONG * lprgscode;
	/*0010*/ tagELEMDESC * lprgelemdescParam;
	/*0018*/ tagFUNCKIND funckind;
	/*001c*/ tagINVOKEKIND invkind;
	/*0020*/ tagCALLCONV callconv;
	/*0024*/ SHORT cParams;
	/*0026*/ SHORT cParamsOpt;
	/*0028*/ SHORT oVft;
	/*002a*/ SHORT cScodes;
	/*0030*/ tagELEMDESC elemdescFunc;
	/*0050*/ USHORT wFuncFlags;
	/*0058*/
};

enum tagFUNCFLAGS {
	FUNCFLAG_FRESTRICTED = 0x1,
	FUNCFLAG_FSOURCE = 0x2,
	FUNCFLAG_FBINDABLE = 0x4,
	FUNCFLAG_FREQUESTEDIT = 0x8,
	FUNCFLAG_FDISPLAYBIND = 0x10,
	FUNCFLAG_FDEFAULTBIND = 0x20,
	FUNCFLAG_FHIDDEN = 0x40,
	FUNCFLAG_FUSESGETLASTERROR = 0x80,
	FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
	FUNCFLAG_FUIDEFAULT = 0x200,
	FUNCFLAG_FNONBROWSABLE = 0x400,
	FUNCFLAG_FREPLACEABLE = 0x800,
	FUNCFLAG_FIMMEDIATEBIND = 0x1000
};

enum tagFUNCKIND {
	FUNC_VIRTUAL = 0x0,
	FUNC_PUREVIRTUAL = 0x1,
	FUNC_NONVIRTUAL = 0x2,
	FUNC_STATIC = 0x3,
	FUNC_DISPATCH = 0x4
};

struct tagGCP_RESULTSA {
	/*0000*/ ULONG lStructSize;
	/*0008*/ CHAR * lpOutString;
	/*0010*/ UINT * lpOrder;
	/*0018*/ INT * lpDx;
	/*0020*/ INT * lpCaretPos;
	/*0028*/ CHAR * lpClass;
	/*0030*/ WCHAR * lpGlyphs;
	/*0038*/ UINT nGlyphs;
	/*003c*/ INT nMaxFit;
	/*0040*/
};

struct tagGCP_RESULTSW {
	/*0000*/ ULONG lStructSize;
	/*0008*/ WCHAR * lpOutString;
	/*0010*/ UINT * lpOrder;
	/*0018*/ INT * lpDx;
	/*0020*/ INT * lpCaretPos;
	/*0028*/ CHAR * lpClass;
	/*0030*/ WCHAR * lpGlyphs;
	/*0038*/ UINT nGlyphs;
	/*003c*/ INT nMaxFit;
	/*0040*/
};

struct tagGESTURECONFIG {
	/*0000*/ ULONG dwID;
	/*0004*/ ULONG dwWant;
	/*0008*/ ULONG dwBlock;
	/*000c*/
};

struct tagGESTUREINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG dwID;
	/*0010*/ HWND__ * hwndTarget;
	/*0018*/ tagPOINTS ptsLocation;
	/*001c*/ ULONG dwInstanceID;
	/*0020*/ ULONG dwSequenceID;
	/*0028*/ ULONGLONG ullArguments;
	/*0030*/ UINT cbExtraArgs;
	/*0038*/
};

struct tagGESTURENOTIFYSTRUCT {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndTarget;
	/*0010*/ tagPOINTS ptsLocation;
	/*0014*/ ULONG dwInstanceID;
	/*0018*/
};

enum tagGLOBALOPT_EH_VALUES {
	COMGLB_EXCEPTION_HANDLE = 0x0,
	COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 0x1,
	COMGLB_EXCEPTION_DONOT_HANDLE = 0x1,
	COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 0x2
};

enum tagGLOBALOPT_PROPERTIES {
	COMGLB_EXCEPTION_HANDLING = 0x1,
	COMGLB_APPID = 0x2,
	COMGLB_RPC_THREADPOOL_SETTING = 0x3,
	COMGLB_RO_SETTINGS = 0x4,
	COMGLB_UNMARSHALING_POLICY = 0x5,
	COMGLB_PROPERTIES_RESERVED1 = 0x6,
	COMGLB_PROPERTIES_RESERVED2 = 0x7,
	COMGLB_PROPERTIES_RESERVED3 = 0x8
};

enum tagGLOBALOPT_RO_FLAGS {
	COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 0x1,
	COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 0x2,
	COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x4,
	COMGLB_FAST_RUNDOWN = 0x8,
	COMGLB_RESERVED1 = 0x10,
	COMGLB_RESERVED2 = 0x20,
	COMGLB_RESERVED3 = 0x40,
	COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 0x80,
	COMGLB_RESERVED4 = 0x100,
	COMGLB_RESERVED5 = 0x200,
	COMGLB_RESERVED6 = 0x400
};

enum tagGLOBALOPT_RPCTP_VALUES {
	COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0x0,
	COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 0x1
};

enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES {
	COMGLB_UNMARSHALING_POLICY_NORMAL = 0x0,
	COMGLB_UNMARSHALING_POLICY_STRONG = 0x1,
	COMGLB_UNMARSHALING_POLICY_HYBRID = 0x2
};

struct tagGLYPHSET {
	/*0000*/ ULONG cbThis;
	/*0004*/ ULONG flAccel;
	/*0008*/ ULONG cGlyphsSupported;
	/*000c*/ ULONG cRanges;
	/*0010*/ tagWCRANGE ranges[0x1];
	/*0014*/
};

enum tagGUIDKIND {
	GUIDKIND_DEFAULT_SOURCE_DISP_IID = 0x1
};

struct tagGUITHREADINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG flags;
	/*0008*/ HWND__ * hwndActive;
	/*0010*/ HWND__ * hwndFocus;
	/*0018*/ HWND__ * hwndCapture;
	/*0020*/ HWND__ * hwndMenuOwner;
	/*0028*/ HWND__ * hwndMoveSize;
	/*0030*/ HWND__ * hwndCaret;
	/*0038*/ tagRECT rcCaret;
	/*0048*/
};

enum tagHANDEDNESS {
	HANDEDNESS_LEFT = 0x0,
	HANDEDNESS_RIGHT = 0x1
};

struct tagHANDLETABLE {
	/*0000*/ void * objectHandle[0x1];
	/*0008*/
};

struct tagHARDWAREHOOKSTRUCT {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ UINT message;
	/*0010*/ ULONGLONG wParam;
	/*0018*/ LONGLONG lParam;
	/*0020*/
};

struct tagHARDWAREINPUT {
	/*0000*/ ULONG uMsg;
	/*0004*/ USHORT wParamL;
	/*0006*/ USHORT wParamH;
	/*0008*/
};

struct tagHELPINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iContextType;
	/*0008*/ INT iCtrlId;
	/*0010*/ void * hItemHandle;
	/*0018*/ ULONGLONG dwContextId;
	/*0020*/ tagPOINT MousePos;
	/*0028*/
};

struct tagHELPWININFOA {
	/*0000*/ INT wStructSize;
	/*0004*/ INT x;
	/*0008*/ INT y;
	/*000c*/ INT dx;
	/*0010*/ INT dy;
	/*0014*/ INT wMax;
	/*0018*/ CHAR rgchMember[0x2];
	/*001c*/
};

struct tagHELPWININFOW {
	/*0000*/ INT wStructSize;
	/*0004*/ INT x;
	/*0008*/ INT y;
	/*000c*/ INT dx;
	/*0010*/ INT dy;
	/*0014*/ INT wMax;
	/*0018*/ WCHAR rgchMember[0x2];
	/*001c*/
};

struct tagHIGHCONTRASTA {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ CHAR * lpszDefaultScheme;
	/*0010*/
};

struct tagHIGHCONTRASTW {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ WCHAR * lpszDefaultScheme;
	/*0010*/
};

enum tagHITRESULT {
	HITRESULT_OUTSIDE = 0x0,
	HITRESULT_TRANSPARENT = 0x1,
	HITRESULT_CLOSE = 0x2,
	HITRESULT_HIT = 0x3
};

enum tagHNETPERM_FLAGS {
	HNETPERM_ShowSharedAccessUi = 0x32,
	HNETPERM_PersonalFirewallConfig = 0x33,
	HNETPERM_AllowNetBridge_NLA = 0x34,
	HNETPERM_ICSClientApp = 0x35
};

enum tagHRESULT_NETLUA_ELEVATION {
	E_ELEVATION_REQUIRED = 0x800702e4,
	E_ADMIN_ELEVATION_REQUIRED = 0x800402e4
};

struct tagHW_PROFILE_INFOA {
	/*0000*/ ULONG dwDockInfo;
	/*0004*/ CHAR szHwProfileGuid[0x27];
	/*002b*/ CHAR szHwProfileName[0x50];
	/*007c*/
};

struct tagHW_PROFILE_INFOW {
	/*0000*/ ULONG dwDockInfo;
	/*0004*/ WCHAR szHwProfileGuid[0x27];
	/*0052*/ WCHAR szHwProfileName[0x50];
	/*00f4*/
};

struct tagICEXYZTRIPLE {
	/*0000*/ tagCIEXYZ ciexyzRed;
	/*000c*/ tagCIEXYZ ciexyzGreen;
	/*0018*/ tagCIEXYZ ciexyzBlue;
	/*0024*/
};

struct tagICONMETRICSA {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iHorzSpacing;
	/*0008*/ INT iVertSpacing;
	/*000c*/ INT iTitleWrap;
	/*0010*/ tagLOGFONTA lfFont;
	/*004c*/
};

struct tagICONMETRICSW {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iHorzSpacing;
	/*0008*/ INT iVertSpacing;
	/*000c*/ INT iTitleWrap;
	/*0010*/ tagLOGFONTW lfFont;
	/*006c*/
};

enum tagICS_TARGETTYPE {
	ICSTT_NAME = 0x0,
	ICSTT_IPADDRESS = 0x1
};

struct tagIDLDESC {
	/*0000*/ ULONGLONG dwReserved;
	/*0008*/ USHORT wIDLFlags;
	/*0010*/
};

struct tagIMECHARPOSITION {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwCharPos;
	/*0008*/ tagPOINT pt;
	/*0010*/ UINT cLineHeight;
	/*0014*/ tagRECT rcDocument;
	/*0024*/
};

struct tagIMEMENUITEMINFOA {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fType;
	/*0008*/ UINT fState;
	/*000c*/ UINT wID;
	/*0010*/ HBITMAP__ * hbmpChecked;
	/*0018*/ HBITMAP__ * hbmpUnchecked;
	/*0020*/ ULONG dwItemData;
	/*0024*/ CHAR szString[0x50];
	/*0078*/ HBITMAP__ * hbmpItem;
	/*0080*/
};

struct tagIMEMENUITEMINFOW {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fType;
	/*0008*/ UINT fState;
	/*000c*/ UINT wID;
	/*0010*/ HBITMAP__ * hbmpChecked;
	/*0018*/ HBITMAP__ * hbmpUnchecked;
	/*0020*/ ULONG dwItemData;
	/*0024*/ WCHAR szString[0x50];
	/*00c8*/ HBITMAP__ * hbmpItem;
	/*00d0*/
};

struct tagINITCOMMONCONTROLSEX {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwICC;
	/*0008*/
};

struct tagINPUT {
	/*0000*/ ULONG type;
	/*0008*/ tagMOUSEINPUT mi;
	/*0008*/ tagKEYBDINPUT ki;
	/*0008*/ tagHARDWAREINPUT hi;
	/*0028*/
};

struct tagINPUT_INJECTION_VALUE {
	/*0000*/ USHORT page;
	/*0002*/ USHORT usage;
	/*0004*/ INT value;
	/*0008*/ USHORT index;
	/*000c*/
};

enum tagINPUT_MESSAGE_DEVICE_TYPE {
	IMDT_UNAVAILABLE = 0x0,
	IMDT_KEYBOARD = 0x1,
	IMDT_MOUSE = 0x2,
	IMDT_TOUCH = 0x4,
	IMDT_PEN = 0x8,
	IMDT_TOUCHPAD = 0x10
};

enum tagINPUT_MESSAGE_ORIGIN_ID {
	IMO_UNAVAILABLE = 0x0,
	IMO_HARDWARE = 0x1,
	IMO_INJECTED = 0x2,
	IMO_SYSTEM = 0x4
};

struct tagINPUT_MESSAGE_SOURCE {
	/*0000*/ tagINPUT_MESSAGE_DEVICE_TYPE deviceType;
	/*0004*/ tagINPUT_MESSAGE_ORIGIN_ID originId;
	/*0008*/
};

struct tagINPUT_TRANSFORM {
	/*0000*/ float _11;
	/*0004*/ float _12;
	/*0008*/ float _13;
	/*000c*/ float _14;
	/*0010*/ float _21;
	/*0014*/ float _22;
	/*0018*/ float _23;
	/*001c*/ float _24;
	/*0020*/ float _31;
	/*0024*/ float _32;
	/*0028*/ float _33;
	/*002c*/ float _34;
	/*0030*/ float _41;
	/*0034*/ float _42;
	/*0038*/ float _43;
	/*003c*/ float _44;
	/*0000*/ float m[0x4][0x4];
	/*0040*/
};

struct tagINTERFACEDATA {
	/*0000*/ tagMETHODDATA * pmethdata;
	/*0008*/ UINT cMembers;
	/*0010*/
};

struct tagINTERFACEINFO {
	/*0000*/ IUnknown * pUnk;
	/*0008*/ _GUID iid;
	/*0018*/ USHORT wMethod;
	/*0020*/
};

struct tagINTERFACE_ID {
	/*0000*/ _GUID InterfaceGuid;
	/*0010*/ tagNLM_INTERFACE_INFO InterfaceInfo;
	/*0054*/
};

enum tagINVOKEKIND {
	INVOKE_FUNC = 0x1,
	INVOKE_PROPERTYGET = 0x2,
	INVOKE_PROPERTYPUT = 0x4,
	INVOKE_PROPERTYPUTREF = 0x8
};

enum tagITEM_CHANGE_TYPE {
	ICHT_INSERT = 0x0,
	ICHT_DELETE = 0x1,
	ICHT_UPDATE = 0x2,
	ICHT_FILTER = 0x3
};

struct tagI_RpcProxyCallbackInterface {
	/*0000*/ LONG (* IsValidMachineFn)( WCHAR * , WCHAR * , ULONG );
	/*0008*/ LONG (* GetClientAddressFn)( void * , CHAR * , ULONG * );
	/*0010*/ LONG (* GetConnectionTimeoutFn)( ULONG * );
	/*0018*/ LONG (* PerformCalloutFn)( void * , _RDR_CALLOUT_STATE * , _RPC_HTTP_REDIRECTOR_STAGE );
	/*0020*/ void (* FreeCalloutStateFn)( _RDR_CALLOUT_STATE * );
	/*0028*/ LONG (* GetClientSessionAndResourceUUIDFn)( void * , INT * , _GUID * , INT * , _GUID * );
	/*0030*/ LONG (* ProxyFilterIfFn)( void * , _GUID * , USHORT , INT * );
	/*0038*/ void (* RpcProxyUpdatePerfCounterFn)( RpcProxyPerfCounters , INT , ULONG );
	/*0040*/ void (* RpcProxyUpdatePerfCounterBackendServerFn)( WCHAR * , INT );
	/*0048*/
};

struct tagInputRoutingInfo {
	/*0000*/ UINT peerId;
	/*0004*/ UINT itemId;
	/*0008*/ tagMsgRoutingInfo msgRoutingInfo;
	/*0030*/
};

struct tagJET_CONDITIONALCOLUMN_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ CHAR * szColumnName;
	/*0010*/ ULONG grbit;
	/*0018*/
};

struct tagJET_CONDITIONALCOLUMN_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR * szColumnName;
	/*0010*/ ULONG grbit;
	/*0018*/
};

struct tagJET_INDEXCREATE2_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ CHAR * szIndexName;
	/*0010*/ CHAR * szKey;
	/*0018*/ ULONG cbKey;
	/*001c*/ ULONG grbit;
	/*0020*/ ULONG ulDensity;
	/*0028*/ ULONG lcid;
	/*0028*/ tagJET_UNICODEINDEX * pidxunicode;
	/*0030*/ ULONG cbVarSegMac;
	/*0030*/ tagJET_TUPLELIMITS * ptuplelimits;
	/*0038*/ tagJET_CONDITIONALCOLUMN_A * rgconditionalcolumn;
	/*0040*/ ULONG cConditionalColumn;
	/*0044*/ LONG err;
	/*0048*/ ULONG cbKeyMost;
	/*0050*/ tagJET_SPACEHINTS * pSpacehints;
	/*0058*/
};

struct tagJET_INDEXCREATE2_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR * szIndexName;
	/*0010*/ WCHAR * szKey;
	/*0018*/ ULONG cbKey;
	/*001c*/ ULONG grbit;
	/*0020*/ ULONG ulDensity;
	/*0028*/ ULONG lcid;
	/*0028*/ tagJET_UNICODEINDEX * pidxunicode;
	/*0030*/ ULONG cbVarSegMac;
	/*0030*/ tagJET_TUPLELIMITS * ptuplelimits;
	/*0038*/ tagJET_CONDITIONALCOLUMN_W * rgconditionalcolumn;
	/*0040*/ ULONG cConditionalColumn;
	/*0044*/ LONG err;
	/*0048*/ ULONG cbKeyMost;
	/*0050*/ tagJET_SPACEHINTS * pSpacehints;
	/*0058*/
};

struct tagJET_INDEXCREATE3_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ CHAR * szIndexName;
	/*0010*/ CHAR * szKey;
	/*0018*/ ULONG cbKey;
	/*001c*/ ULONG grbit;
	/*0020*/ ULONG ulDensity;
	/*0028*/ tagJET_UNICODEINDEX2 * pidxunicode;
	/*0030*/ ULONG cbVarSegMac;
	/*0030*/ tagJET_TUPLELIMITS * ptuplelimits;
	/*0038*/ tagJET_CONDITIONALCOLUMN_A * rgconditionalcolumn;
	/*0040*/ ULONG cConditionalColumn;
	/*0044*/ LONG err;
	/*0048*/ ULONG cbKeyMost;
	/*0050*/ tagJET_SPACEHINTS * pSpacehints;
	/*0058*/
};

struct tagJET_INDEXCREATE3_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR * szIndexName;
	/*0010*/ WCHAR * szKey;
	/*0018*/ ULONG cbKey;
	/*001c*/ ULONG grbit;
	/*0020*/ ULONG ulDensity;
	/*0028*/ tagJET_UNICODEINDEX2 * pidxunicode;
	/*0030*/ ULONG cbVarSegMac;
	/*0030*/ tagJET_TUPLELIMITS * ptuplelimits;
	/*0038*/ tagJET_CONDITIONALCOLUMN_W * rgconditionalcolumn;
	/*0040*/ ULONG cConditionalColumn;
	/*0044*/ LONG err;
	/*0048*/ ULONG cbKeyMost;
	/*0050*/ tagJET_SPACEHINTS * pSpacehints;
	/*0058*/
};

struct tagJET_INDEXCREATE_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ CHAR * szIndexName;
	/*0010*/ CHAR * szKey;
	/*0018*/ ULONG cbKey;
	/*001c*/ ULONG grbit;
	/*0020*/ ULONG ulDensity;
	/*0028*/ ULONG lcid;
	/*0028*/ tagJET_UNICODEINDEX * pidxunicode;
	/*0030*/ ULONG cbVarSegMac;
	/*0030*/ tagJET_TUPLELIMITS * ptuplelimits;
	/*0038*/ tagJET_CONDITIONALCOLUMN_A * rgconditionalcolumn;
	/*0040*/ ULONG cConditionalColumn;
	/*0044*/ LONG err;
	/*0048*/ ULONG cbKeyMost;
	/*0050*/
};

struct tagJET_INDEXCREATE_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR * szIndexName;
	/*0010*/ WCHAR * szKey;
	/*0018*/ ULONG cbKey;
	/*001c*/ ULONG grbit;
	/*0020*/ ULONG ulDensity;
	/*0028*/ ULONG lcid;
	/*0028*/ tagJET_UNICODEINDEX * pidxunicode;
	/*0030*/ ULONG cbVarSegMac;
	/*0030*/ tagJET_TUPLELIMITS * ptuplelimits;
	/*0038*/ tagJET_CONDITIONALCOLUMN_W * rgconditionalcolumn;
	/*0040*/ ULONG cConditionalColumn;
	/*0044*/ LONG err;
	/*0048*/ ULONG cbKeyMost;
	/*0050*/
};

struct tagJET_INDEXID {
	/*0000*/ ULONG cbStruct;
	/*0004*/ UCHAR rgbIndexId[0x10];
	/*0014*/
};

struct tagJET_OPENTEMPORARYTABLE {
	/*0000*/ ULONG cbStruct;
	/*0008*/ JET_COLUMNDEF const * prgcolumndef;
	/*0010*/ ULONG ccolumn;
	/*0018*/ tagJET_UNICODEINDEX * pidxunicode;
	/*0020*/ ULONG grbit;
	/*0028*/ ULONG * prgcolumnid;
	/*0030*/ ULONG cbKeyMost;
	/*0034*/ ULONG cbVarSegMac;
	/*0038*/ ULONGLONG tableid;
	/*0040*/
};

struct tagJET_OPENTEMPORARYTABLE2 {
	/*0000*/ ULONG cbStruct;
	/*0008*/ JET_COLUMNDEF const * prgcolumndef;
	/*0010*/ ULONG ccolumn;
	/*0018*/ tagJET_UNICODEINDEX2 * pidxunicode;
	/*0020*/ ULONG grbit;
	/*0028*/ ULONG * prgcolumnid;
	/*0030*/ ULONG cbKeyMost;
	/*0034*/ ULONG cbVarSegMac;
	/*0038*/ ULONGLONG tableid;
	/*0040*/
};

struct tagJET_SPACEHINTS {
	/*0000*/ ULONG cbStruct;
	/*0004*/ ULONG ulInitialDensity;
	/*0008*/ ULONG cbInitial;
	/*000c*/ ULONG grbit;
	/*0010*/ ULONG ulMaintDensity;
	/*0014*/ ULONG ulGrowth;
	/*0018*/ ULONG cbMinExtent;
	/*001c*/ ULONG cbMaxExtent;
	/*0020*/
};

struct tagJET_TABLECREATE2_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ CHAR * szTableName;
	/*0010*/ CHAR * szTemplateTableName;
	/*0018*/ ULONG ulPages;
	/*001c*/ ULONG ulDensity;
	/*0020*/ tag_JET_COLUMNCREATE_A * rgcolumncreate;
	/*0028*/ ULONG cColumns;
	/*0030*/ tagJET_INDEXCREATE_A * rgindexcreate;
	/*0038*/ ULONG cIndexes;
	/*0040*/ CHAR * szCallback;
	/*0048*/ ULONG cbtyp;
	/*004c*/ ULONG grbit;
	/*0050*/ ULONGLONG tableid;
	/*0058*/ ULONG cCreated;
	/*0060*/
};

struct tagJET_TABLECREATE2_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR * szTableName;
	/*0010*/ WCHAR * szTemplateTableName;
	/*0018*/ ULONG ulPages;
	/*001c*/ ULONG ulDensity;
	/*0020*/ tag_JET_COLUMNCREATE_W * rgcolumncreate;
	/*0028*/ ULONG cColumns;
	/*0030*/ tagJET_INDEXCREATE_W * rgindexcreate;
	/*0038*/ ULONG cIndexes;
	/*0040*/ WCHAR * szCallback;
	/*0048*/ ULONG cbtyp;
	/*004c*/ ULONG grbit;
	/*0050*/ ULONGLONG tableid;
	/*0058*/ ULONG cCreated;
	/*0060*/
};

struct tagJET_TABLECREATE3_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ CHAR * szTableName;
	/*0010*/ CHAR * szTemplateTableName;
	/*0018*/ ULONG ulPages;
	/*001c*/ ULONG ulDensity;
	/*0020*/ tag_JET_COLUMNCREATE_A * rgcolumncreate;
	/*0028*/ ULONG cColumns;
	/*0030*/ tagJET_INDEXCREATE2_A * rgindexcreate;
	/*0038*/ ULONG cIndexes;
	/*0040*/ CHAR * szCallback;
	/*0048*/ ULONG cbtyp;
	/*004c*/ ULONG grbit;
	/*0050*/ tagJET_SPACEHINTS * pSeqSpacehints;
	/*0058*/ tagJET_SPACEHINTS * pLVSpacehints;
	/*0060*/ ULONG cbSeparateLV;
	/*0068*/ ULONGLONG tableid;
	/*0070*/ ULONG cCreated;
	/*0078*/
};

struct tagJET_TABLECREATE3_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR * szTableName;
	/*0010*/ WCHAR * szTemplateTableName;
	/*0018*/ ULONG ulPages;
	/*001c*/ ULONG ulDensity;
	/*0020*/ tag_JET_COLUMNCREATE_W * rgcolumncreate;
	/*0028*/ ULONG cColumns;
	/*0030*/ tagJET_INDEXCREATE2_W * rgindexcreate;
	/*0038*/ ULONG cIndexes;
	/*0040*/ WCHAR * szCallback;
	/*0048*/ ULONG cbtyp;
	/*004c*/ ULONG grbit;
	/*0050*/ tagJET_SPACEHINTS * pSeqSpacehints;
	/*0058*/ tagJET_SPACEHINTS * pLVSpacehints;
	/*0060*/ ULONG cbSeparateLV;
	/*0068*/ ULONGLONG tableid;
	/*0070*/ ULONG cCreated;
	/*0078*/
};

struct tagJET_TABLECREATE4_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ CHAR * szTableName;
	/*0010*/ CHAR * szTemplateTableName;
	/*0018*/ ULONG ulPages;
	/*001c*/ ULONG ulDensity;
	/*0020*/ tag_JET_COLUMNCREATE_A * rgcolumncreate;
	/*0028*/ ULONG cColumns;
	/*0030*/ tagJET_INDEXCREATE3_A * rgindexcreate;
	/*0038*/ ULONG cIndexes;
	/*0040*/ CHAR * szCallback;
	/*0048*/ ULONG cbtyp;
	/*004c*/ ULONG grbit;
	/*0050*/ tagJET_SPACEHINTS * pSeqSpacehints;
	/*0058*/ tagJET_SPACEHINTS * pLVSpacehints;
	/*0060*/ ULONG cbSeparateLV;
	/*0068*/ ULONGLONG tableid;
	/*0070*/ ULONG cCreated;
	/*0078*/
};

struct tagJET_TABLECREATE4_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR * szTableName;
	/*0010*/ WCHAR * szTemplateTableName;
	/*0018*/ ULONG ulPages;
	/*001c*/ ULONG ulDensity;
	/*0020*/ tag_JET_COLUMNCREATE_W * rgcolumncreate;
	/*0028*/ ULONG cColumns;
	/*0030*/ tagJET_INDEXCREATE3_W * rgindexcreate;
	/*0038*/ ULONG cIndexes;
	/*0040*/ WCHAR * szCallback;
	/*0048*/ ULONG cbtyp;
	/*004c*/ ULONG grbit;
	/*0050*/ tagJET_SPACEHINTS * pSeqSpacehints;
	/*0058*/ tagJET_SPACEHINTS * pLVSpacehints;
	/*0060*/ ULONG cbSeparateLV;
	/*0068*/ ULONGLONG tableid;
	/*0070*/ ULONG cCreated;
	/*0078*/
};

struct tagJET_TABLECREATE_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ CHAR * szTableName;
	/*0010*/ CHAR * szTemplateTableName;
	/*0018*/ ULONG ulPages;
	/*001c*/ ULONG ulDensity;
	/*0020*/ tag_JET_COLUMNCREATE_A * rgcolumncreate;
	/*0028*/ ULONG cColumns;
	/*0030*/ tagJET_INDEXCREATE_A * rgindexcreate;
	/*0038*/ ULONG cIndexes;
	/*003c*/ ULONG grbit;
	/*0040*/ ULONGLONG tableid;
	/*0048*/ ULONG cCreated;
	/*0050*/
};

struct tagJET_TABLECREATE_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR * szTableName;
	/*0010*/ WCHAR * szTemplateTableName;
	/*0018*/ ULONG ulPages;
	/*001c*/ ULONG ulDensity;
	/*0020*/ tag_JET_COLUMNCREATE_W * rgcolumncreate;
	/*0028*/ ULONG cColumns;
	/*0030*/ tagJET_INDEXCREATE_W * rgindexcreate;
	/*0038*/ ULONG cIndexes;
	/*003c*/ ULONG grbit;
	/*0040*/ ULONGLONG tableid;
	/*0048*/ ULONG cCreated;
	/*0050*/
};

struct tagJET_TUPLELIMITS {
	/*0000*/ ULONG chLengthMin;
	/*0004*/ ULONG chLengthMax;
	/*0008*/ ULONG chToIndexMax;
	/*000c*/ ULONG cchIncrement;
	/*0010*/ ULONG ichStart;
	/*0014*/
};

struct tagJET_UNICODEINDEX {
	/*0000*/ ULONG lcid;
	/*0004*/ ULONG dwMapFlags;
	/*0008*/
};

struct tagJET_UNICODEINDEX2 {
	/*0000*/ WCHAR * szLocaleName;
	/*0008*/ ULONG dwMapFlags;
	/*0010*/
};

struct tagKBDLLHOOKSTRUCT {
	/*0000*/ ULONG vkCode;
	/*0004*/ ULONG scanCode;
	/*0008*/ ULONG flags;
	/*000c*/ ULONG time;
	/*0010*/ ULONGLONG dwExtraInfo;
	/*0018*/
};

struct tagKERNINGPAIR {
	/*0000*/ USHORT wFirst;
	/*0002*/ USHORT wSecond;
	/*0004*/ INT iKernAmount;
	/*0008*/
};

struct tagKEYBDINPUT {
	/*0000*/ USHORT wVk;
	/*0002*/ USHORT wScan;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG time;
	/*0010*/ ULONGLONG dwExtraInfo;
	/*0018*/
};

struct tagLANCON_EXTENDED_INFO {
	/*0000*/ WCHAR * szwConnName;
	/*0008*/ INT fFlag;
	/*000c*/ _GUID guid;
	/*0020*/
};

struct tagLANCON_INFO {
	/*0000*/ WCHAR * szwConnName;
	/*0008*/ _GUID guid;
	/*0018*/
};

enum tagLANCON_INFO_FLAGS {
	LCIF_NAME = 0x1,
	LCIF_COMP = 0x8,
	LCIF_ALL = 0xff,
	LCIF_RESERVED1 = 0xf0000000,
	LCIF_RESERVED2 = 0x10000
};

struct tagLASTINPUTINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwTime;
	/*0008*/
};

struct tagLAYERPLANEDESCRIPTOR {
	/*0000*/ USHORT nSize;
	/*0002*/ USHORT nVersion;
	/*0004*/ ULONG dwFlags;
	/*0008*/ UCHAR iPixelType;
	/*0009*/ UCHAR cColorBits;
	/*000a*/ UCHAR cRedBits;
	/*000b*/ UCHAR cRedShift;
	/*000c*/ UCHAR cGreenBits;
	/*000d*/ UCHAR cGreenShift;
	/*000e*/ UCHAR cBlueBits;
	/*000f*/ UCHAR cBlueShift;
	/*0010*/ UCHAR cAlphaBits;
	/*0011*/ UCHAR cAlphaShift;
	/*0012*/ UCHAR cAccumBits;
	/*0013*/ UCHAR cAccumRedBits;
	/*0014*/ UCHAR cAccumGreenBits;
	/*0015*/ UCHAR cAccumBlueBits;
	/*0016*/ UCHAR cAccumAlphaBits;
	/*0017*/ UCHAR cDepthBits;
	/*0018*/ UCHAR cStencilBits;
	/*0019*/ UCHAR cAuxBuffers;
	/*001a*/ UCHAR iLayerPlane;
	/*001b*/ UCHAR bReserved;
	/*001c*/ ULONG crTransparent;
	/*0020*/
};

struct tagLC_ID {
	/*0000*/ USHORT wLanguage;
	/*0002*/ USHORT wCountry;
	/*0004*/ USHORT wCodePage;
	/*0006*/
};

struct tagLHITTESTINFO {
	/*0000*/ tagPOINT pt;
	/*0008*/ tagLITEM item;
	/*10c0*/
};

enum tagLIBFLAGS {
	LIBFLAG_FRESTRICTED = 0x1,
	LIBFLAG_FCONTROL = 0x2,
	LIBFLAG_FHIDDEN = 0x4,
	LIBFLAG_FHASDISKIMAGE = 0x8
};

struct tagLICINFO {
	/*0000*/ LONG cbLicInfo;
	/*0004*/ INT fRuntimeKeyAvail;
	/*0008*/ INT fLicVerified;
	/*000c*/
};

struct tagLITEM {
	/*0000*/ UINT mask;
	/*0004*/ INT iLink;
	/*0008*/ UINT state;
	/*000c*/ UINT stateMask;
	/*0010*/ WCHAR szID[0x30];
	/*0070*/ WCHAR szUrl[0x824];
	/*10b8*/
};

struct tagLOCALESIGNATURE {
	/*0000*/ ULONG lsUsb[0x4];
	/*0010*/ ULONG lsCsbDefault[0x2];
	/*0018*/ ULONG lsCsbSupported[0x2];
	/*0020*/
};

enum tagLOCKTYPE {
	LOCK_WRITE = 0x1,
	LOCK_EXCLUSIVE = 0x2,
	LOCK_ONLYONCE = 0x4
};

struct tagLOGBRUSH {
	/*0000*/ UINT lbStyle;
	/*0004*/ ULONG lbColor;
	/*0008*/ ULONGLONG lbHatch;
	/*0010*/
};

struct tagLOGBRUSH32 {
	/*0000*/ UINT lbStyle;
	/*0004*/ ULONG lbColor;
	/*0008*/ ULONG lbHatch;
	/*000c*/
};

struct tagLOGCOLORSPACEA {
	/*0000*/ ULONG lcsSignature;
	/*0004*/ ULONG lcsVersion;
	/*0008*/ ULONG lcsSize;
	/*000c*/ LONG lcsCSType;
	/*0010*/ LONG lcsIntent;
	/*0014*/ tagICEXYZTRIPLE lcsEndpoints;
	/*0038*/ ULONG lcsGammaRed;
	/*003c*/ ULONG lcsGammaGreen;
	/*0040*/ ULONG lcsGammaBlue;
	/*0044*/ CHAR lcsFilename[0x104];
	/*0148*/
};

struct tagLOGCOLORSPACEW {
	/*0000*/ ULONG lcsSignature;
	/*0004*/ ULONG lcsVersion;
	/*0008*/ ULONG lcsSize;
	/*000c*/ LONG lcsCSType;
	/*0010*/ LONG lcsIntent;
	/*0014*/ tagICEXYZTRIPLE lcsEndpoints;
	/*0038*/ ULONG lcsGammaRed;
	/*003c*/ ULONG lcsGammaGreen;
	/*0040*/ ULONG lcsGammaBlue;
	/*0044*/ WCHAR lcsFilename[0x104];
	/*024c*/
};

struct tagLOGFONTA {
	/*0000*/ LONG lfHeight;
	/*0004*/ LONG lfWidth;
	/*0008*/ LONG lfEscapement;
	/*000c*/ LONG lfOrientation;
	/*0010*/ LONG lfWeight;
	/*0014*/ UCHAR lfItalic;
	/*0015*/ UCHAR lfUnderline;
	/*0016*/ UCHAR lfStrikeOut;
	/*0017*/ UCHAR lfCharSet;
	/*0018*/ UCHAR lfOutPrecision;
	/*0019*/ UCHAR lfClipPrecision;
	/*001a*/ UCHAR lfQuality;
	/*001b*/ UCHAR lfPitchAndFamily;
	/*001c*/ CHAR lfFaceName[0x20];
	/*003c*/
};

struct tagLOGFONTW {
	/*0000*/ LONG lfHeight;
	/*0004*/ LONG lfWidth;
	/*0008*/ LONG lfEscapement;
	/*000c*/ LONG lfOrientation;
	/*0010*/ LONG lfWeight;
	/*0014*/ UCHAR lfItalic;
	/*0015*/ UCHAR lfUnderline;
	/*0016*/ UCHAR lfStrikeOut;
	/*0017*/ UCHAR lfCharSet;
	/*0018*/ UCHAR lfOutPrecision;
	/*0019*/ UCHAR lfClipPrecision;
	/*001a*/ UCHAR lfQuality;
	/*001b*/ UCHAR lfPitchAndFamily;
	/*001c*/ WCHAR lfFaceName[0x20];
	/*005c*/
};

struct tagLOGPALETTE {
	/*0000*/ USHORT palVersion;
	/*0002*/ USHORT palNumEntries;
	/*0004*/ tagPALETTEENTRY palPalEntry[0x1];
	/*0008*/
};

struct tagLOGPEN {
	/*0000*/ UINT lopnStyle;
	/*0004*/ tagPOINT lopnWidth;
	/*000c*/ ULONG lopnColor;
	/*0010*/
};

struct tagLVBKIMAGEA {
	/*0000*/ ULONG ulFlags;
	/*0008*/ HBITMAP__ * hbm;
	/*0010*/ CHAR * pszImage;
	/*0018*/ UINT cchImageMax;
	/*001c*/ INT xOffsetPercent;
	/*0020*/ INT yOffsetPercent;
	/*0028*/
};

struct tagLVBKIMAGEW {
	/*0000*/ ULONG ulFlags;
	/*0008*/ HBITMAP__ * hbm;
	/*0010*/ WCHAR * pszImage;
	/*0018*/ UINT cchImageMax;
	/*001c*/ INT xOffsetPercent;
	/*0020*/ INT yOffsetPercent;
	/*0028*/
};

struct tagLVCOLUMNA {
	/*0000*/ UINT mask;
	/*0004*/ INT fmt;
	/*0008*/ INT cx;
	/*0010*/ CHAR * pszText;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT iSubItem;
	/*0020*/ INT iImage;
	/*0024*/ INT iOrder;
	/*0028*/ INT cxMin;
	/*002c*/ INT cxDefault;
	/*0030*/ INT cxIdeal;
	/*0038*/
};

struct tagLVCOLUMNW {
	/*0000*/ UINT mask;
	/*0004*/ INT fmt;
	/*0008*/ INT cx;
	/*0010*/ WCHAR * pszText;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT iSubItem;
	/*0020*/ INT iImage;
	/*0024*/ INT iOrder;
	/*0028*/ INT cxMin;
	/*002c*/ INT cxDefault;
	/*0030*/ INT cxIdeal;
	/*0038*/
};

struct tagLVDISPINFO {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagLVITEMA item;
	/*0070*/
};

struct tagLVDISPINFOW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagLVITEMW item;
	/*0070*/
};

struct tagLVFINDINFOA {
	/*0000*/ UINT flags;
	/*0008*/ CHAR const * psz;
	/*0010*/ LONGLONG lParam;
	/*0018*/ tagPOINT pt;
	/*0020*/ UINT vkDirection;
	/*0028*/
};

struct tagLVFINDINFOW {
	/*0000*/ UINT flags;
	/*0008*/ WCHAR const * psz;
	/*0010*/ LONGLONG lParam;
	/*0018*/ tagPOINT pt;
	/*0020*/ UINT vkDirection;
	/*0028*/
};

struct tagLVFOOTERINFO {
	/*0000*/ UINT mask;
	/*0008*/ WCHAR * pszText;
	/*0010*/ INT cchTextMax;
	/*0014*/ UINT cItems;
	/*0018*/
};

struct tagLVFOOTERITEM {
	/*0000*/ UINT mask;
	/*0004*/ INT iItem;
	/*0008*/ WCHAR * pszText;
	/*0010*/ INT cchTextMax;
	/*0014*/ UINT state;
	/*0018*/ UINT stateMask;
	/*0020*/
};

struct tagLVGROUP {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT mask;
	/*0008*/ WCHAR * pszHeader;
	/*0010*/ INT cchHeader;
	/*0018*/ WCHAR * pszFooter;
	/*0020*/ INT cchFooter;
	/*0024*/ INT iGroupId;
	/*0028*/ UINT stateMask;
	/*002c*/ UINT state;
	/*0030*/ UINT uAlign;
	/*0038*/ WCHAR * pszSubtitle;
	/*0040*/ UINT cchSubtitle;
	/*0048*/ WCHAR * pszTask;
	/*0050*/ UINT cchTask;
	/*0058*/ WCHAR * pszDescriptionTop;
	/*0060*/ UINT cchDescriptionTop;
	/*0068*/ WCHAR * pszDescriptionBottom;
	/*0070*/ UINT cchDescriptionBottom;
	/*0074*/ INT iTitleImage;
	/*0078*/ INT iExtendedImage;
	/*007c*/ INT iFirstItem;
	/*0080*/ UINT cItems;
	/*0088*/ WCHAR * pszSubsetTitle;
	/*0090*/ UINT cchSubsetTitle;
	/*0098*/
};

struct tagLVGROUPMETRICS {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT mask;
	/*0008*/ UINT Left;
	/*000c*/ UINT Top;
	/*0010*/ UINT Right;
	/*0014*/ UINT Bottom;
	/*0018*/ ULONG crLeft;
	/*001c*/ ULONG crTop;
	/*0020*/ ULONG crRight;
	/*0024*/ ULONG crBottom;
	/*0028*/ ULONG crHeader;
	/*002c*/ ULONG crFooter;
	/*0030*/
};

struct tagLVHITTESTINFO {
	/*0000*/ tagPOINT pt;
	/*0008*/ UINT flags;
	/*000c*/ INT iItem;
	/*0010*/ INT iSubItem;
	/*0014*/ INT iGroup;
	/*0018*/
};

struct tagLVINSERTGROUPSORTED {
	/*0000*/ INT (* pfnGroupCompare)( INT , INT , void * );
	/*0008*/ void * pvData;
	/*0010*/ tagLVGROUP lvGroup;
	/*00a8*/
};

struct tagLVITEMA {
	/*0000*/ UINT mask;
	/*0004*/ INT iItem;
	/*0008*/ INT iSubItem;
	/*000c*/ UINT state;
	/*0010*/ UINT stateMask;
	/*0018*/ CHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0024*/ INT iImage;
	/*0028*/ LONGLONG lParam;
	/*0030*/ INT iIndent;
	/*0034*/ INT iGroupId;
	/*0038*/ UINT cColumns;
	/*0040*/ UINT * puColumns;
	/*0048*/ INT * piColFmt;
	/*0050*/ INT iGroup;
	/*0058*/
};

struct tagLVITEMINDEX {
	/*0000*/ INT iItem;
	/*0004*/ INT iGroup;
	/*0008*/
};

struct tagLVITEMW {
	/*0000*/ UINT mask;
	/*0004*/ INT iItem;
	/*0008*/ INT iSubItem;
	/*000c*/ UINT state;
	/*0010*/ UINT stateMask;
	/*0018*/ WCHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0024*/ INT iImage;
	/*0028*/ LONGLONG lParam;
	/*0030*/ INT iIndent;
	/*0034*/ INT iGroupId;
	/*0038*/ UINT cColumns;
	/*0040*/ UINT * puColumns;
	/*0048*/ INT * piColFmt;
	/*0050*/ INT iGroup;
	/*0058*/
};

struct tagLVKEYDOWN {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ USHORT wVKey;
	/*001a*/ UINT flags;
	/*001e*/
};

struct tagLVSETINFOTIP {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ WCHAR * pszText;
	/*0010*/ INT iItem;
	/*0014*/ INT iSubItem;
	/*0018*/
};

struct tagLVTILEINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iItem;
	/*0008*/ UINT cColumns;
	/*0010*/ UINT * puColumns;
	/*0018*/ INT * piColFmt;
	/*0020*/
};

struct tagLVTILEVIEWINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwMask;
	/*0008*/ ULONG dwFlags;
	/*000c*/ tagSIZE sizeTile;
	/*0014*/ INT cLines;
	/*0018*/ tagRECT rcLabelMargin;
	/*0028*/
};

struct tagMCGRIDINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwPart;
	/*0008*/ ULONG dwFlags;
	/*000c*/ INT iCalendar;
	/*0010*/ INT iRow;
	/*0014*/ INT iCol;
	/*0018*/ INT bSelected;
	/*001c*/ _SYSTEMTIME stStart;
	/*002c*/ _SYSTEMTIME stEnd;
	/*003c*/ tagRECT rc;
	/*0050*/ WCHAR * pszName;
	/*0058*/ ULONGLONG cchName;
	/*0060*/
};

struct tagMDICREATESTRUCTA {
	/*0000*/ CHAR const * szClass;
	/*0008*/ CHAR const * szTitle;
	/*0010*/ void * hOwner;
	/*0018*/ INT x;
	/*001c*/ INT y;
	/*0020*/ INT cx;
	/*0024*/ INT cy;
	/*0028*/ ULONG style;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagMDICREATESTRUCTW {
	/*0000*/ WCHAR const * szClass;
	/*0008*/ WCHAR const * szTitle;
	/*0010*/ void * hOwner;
	/*0018*/ INT x;
	/*001c*/ INT y;
	/*0020*/ INT cx;
	/*0024*/ INT cy;
	/*0028*/ ULONG style;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagMDINEXTMENU {
	/*0000*/ HMENU__ * hmenuIn;
	/*0008*/ HMENU__ * hmenuNext;
	/*0010*/ HWND__ * hwndNext;
	/*0018*/
};

struct tagMEASUREITEMSTRUCT {
	/*0000*/ UINT CtlType;
	/*0004*/ UINT CtlID;
	/*0008*/ UINT itemID;
	/*000c*/ UINT itemWidth;
	/*0010*/ UINT itemHeight;
	/*0018*/ ULONGLONG itemData;
	/*0020*/
};

enum tagMEMCTX {
	MEMCTX_TASK = 0x1,
	MEMCTX_SHARED = 0x2,
	MEMCTX_MACSYSTEM = 0x3,
	MEMCTX_UNKNOWN = 0xffffffff,
	MEMCTX_SAME = 0xfffffffe
};

enum tagMENUBANDHANDLERCID {
	MBHANDCID_PIDLSELECT = 0x0
};

struct tagMENUBARINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcBar;
	/*0018*/ HMENU__ * hMenu;
	/*0020*/ HWND__ * hwndMenu;
	/*0028*/ INT fBarFocused : 01; // 0x00000001;
	/*0028*/ INT fFocused : 01; // 0x00000002;
	/*0028*/ INT fUnused : 30; // 0xfffffffc;
	/*0030*/
};

struct tagMENUGETOBJECTINFO {
	/*0000*/ ULONG dwFlags;
	/*0004*/ UINT uPos;
	/*0008*/ HMENU__ * hmenu;
	/*0010*/ void * riid;
	/*0018*/ void * pvObj;
	/*0020*/
};

struct tagMENUINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG fMask;
	/*0008*/ ULONG dwStyle;
	/*000c*/ UINT cyMax;
	/*0010*/ HBRUSH__ * hbrBack;
	/*0018*/ ULONG dwContextHelpID;
	/*0020*/ ULONGLONG dwMenuData;
	/*0028*/
};

struct tagMENUITEMINFOA {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fMask;
	/*0008*/ UINT fType;
	/*000c*/ UINT fState;
	/*0010*/ UINT wID;
	/*0018*/ HMENU__ * hSubMenu;
	/*0020*/ HBITMAP__ * hbmpChecked;
	/*0028*/ HBITMAP__ * hbmpUnchecked;
	/*0030*/ ULONGLONG dwItemData;
	/*0038*/ CHAR * dwTypeData;
	/*0040*/ UINT cch;
	/*0048*/ HBITMAP__ * hbmpItem;
	/*0050*/
};

struct tagMENUITEMINFOW {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fMask;
	/*0008*/ UINT fType;
	/*000c*/ UINT fState;
	/*0010*/ UINT wID;
	/*0018*/ HMENU__ * hSubMenu;
	/*0020*/ HBITMAP__ * hbmpChecked;
	/*0028*/ HBITMAP__ * hbmpUnchecked;
	/*0030*/ ULONGLONG dwItemData;
	/*0038*/ WCHAR * dwTypeData;
	/*0040*/ UINT cch;
	/*0048*/ HBITMAP__ * hbmpItem;
	/*0050*/
};

enum tagMENUPOPUPPOPUPFLAGS {
	MPPF_SETFOCUS = 0x1,
	MPPF_INITIALSELECT = 0x2,
	MPPF_NOANIMATE = 0x4,
	MPPF_KEYBOARD = 0x10,
	MPPF_REPOSITION = 0x20,
	MPPF_FORCEZORDER = 0x40,
	MPPF_FINALSELECT = 0x80,
	MPPF_TOP = 0x20000000,
	MPPF_LEFT = 0x40000000,
	MPPF_RIGHT = 0x60000000,
	MPPF_BOTTOM = 0x80000000,
	MPPF_POS_MASK = 0xe0000000,
	MPPF_ALIGN_LEFT = 0x2000000,
	MPPF_ALIGN_RIGHT = 0x4000000
};

enum tagMENUPOPUPSELECT {
	MPOS_EXECUTE = 0x0,
	MPOS_FULLCANCEL = 0x1,
	MPOS_CANCELLEVEL = 0x2,
	MPOS_SELECTLEFT = 0x3,
	MPOS_SELECTRIGHT = 0x4,
	MPOS_CHILDTRACKING = 0x5
};

struct tagMETAFILEPICT {
	/*0000*/ LONG mm;
	/*0004*/ LONG xExt;
	/*0008*/ LONG yExt;
	/*0010*/ HMETAFILE__ * hMF;
	/*0018*/
};

struct tagMETAHEADER {
	/*0000*/ USHORT mtType;
	/*0002*/ USHORT mtHeaderSize;
	/*0004*/ USHORT mtVersion;
	/*0006*/ ULONG mtSize;
	/*000a*/ USHORT mtNoObjects;
	/*000c*/ ULONG mtMaxRecord;
	/*0010*/ USHORT mtNoParameters;
	/*0012*/
};

struct tagMETARECORD {
	/*0000*/ ULONG rdSize;
	/*0004*/ USHORT rdFunction;
	/*0006*/ USHORT rdParm[0x1];
	/*0008*/
};

struct tagMETHODDATA {
	/*0000*/ WCHAR * szName;
	/*0008*/ tagPARAMDATA * ppdata;
	/*0010*/ LONG dispid;
	/*0014*/ UINT iMeth;
	/*0018*/ tagCALLCONV cc;
	/*001c*/ UINT cArgs;
	/*0020*/ USHORT wFlags;
	/*0022*/ USHORT vtReturn;
	/*0028*/
};

struct tagMINIMIZEDMETRICS {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iWidth;
	/*0008*/ INT iHorzGap;
	/*000c*/ INT iVertGap;
	/*0010*/ INT iArrange;
	/*0014*/
};

struct tagMINMAXINFO {
	/*0000*/ tagPOINT ptReserved;
	/*0008*/ tagPOINT ptMaxSize;
	/*0010*/ tagPOINT ptMaxPosition;
	/*0018*/ tagPOINT ptMinTrackSize;
	/*0020*/ tagPOINT ptMaxTrackSize;
	/*0028*/
};

enum tagMKREDUCE {
	MKRREDUCE_ONE = 0x30000,
	MKRREDUCE_TOUSER = 0x20000,
	MKRREDUCE_THROUGHUSER = 0x10000,
	MKRREDUCE_ALL = 0x0
};

enum tagMKSYS {
	MKSYS_NONE = 0x0,
	MKSYS_GENERICCOMPOSITE = 0x1,
	MKSYS_FILEMONIKER = 0x2,
	MKSYS_ANTIMONIKER = 0x3,
	MKSYS_ITEMMONIKER = 0x4,
	MKSYS_POINTERMONIKER = 0x5,
	MKSYS_CLASSMONIKER = 0x7,
	MKSYS_OBJREFMONIKER = 0x8,
	MKSYS_SESSIONMONIKER = 0x9,
	MKSYS_LUAMONIKER = 0xa
};

struct tagMONITORINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcMonitor;
	/*0014*/ tagRECT rcWork;
	/*0024*/ ULONG dwFlags;
	/*0028*/
};

struct tagMONITORINFOEXA : tagMONITORINFO {
	/*0028*/ CHAR szDevice[0x20];
	/*0048*/
};

struct tagMONITORINFOEXW : tagMONITORINFO {
	/*0028*/ WCHAR szDevice[0x20];
	/*0068*/
};

struct tagMOUSEHOOKSTRUCT {
	/*0000*/ tagPOINT pt;
	/*0008*/ HWND__ * hwnd;
	/*0010*/ UINT wHitTestCode;
	/*0018*/ ULONGLONG dwExtraInfo;
	/*0020*/
};

struct tagMOUSEHOOKSTRUCTEX : tagMOUSEHOOKSTRUCT {
	/*0020*/ ULONG mouseData;
	/*0028*/
};

struct tagMOUSEINPUT {
	/*0000*/ LONG dx;
	/*0004*/ LONG dy;
	/*0008*/ ULONG mouseData;
	/*000c*/ ULONG dwFlags;
	/*0010*/ ULONG time;
	/*0018*/ ULONGLONG dwExtraInfo;
	/*0020*/
};

struct tagMOUSEKEYS {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iMaxSpeed;
	/*000c*/ ULONG iTimeToMaxSpeed;
	/*0010*/ ULONG iCtrlSpeed;
	/*0014*/ ULONG dwReserved1;
	/*0018*/ ULONG dwReserved2;
	/*001c*/
};

struct tagMOUSEMOVEPOINT {
	/*0000*/ INT x;
	/*0004*/ INT y;
	/*0008*/ ULONG time;
	/*0010*/ ULONGLONG dwExtraInfo;
	/*0018*/
};

struct tagMSAAMENUINFO {
	/*0000*/ ULONG dwMSAASignature;
	/*0004*/ ULONG cchWText;
	/*0008*/ WCHAR * pszWText;
	/*0010*/
};

struct tagMSG {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ UINT message;
	/*0010*/ ULONGLONG wParam;
	/*0018*/ LONGLONG lParam;
	/*0020*/ ULONG time;
	/*0024*/ tagPOINT pt;
	/*0030*/
};

struct tagMSGBOXPARAMSA {
	/*0000*/ UINT cbSize;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ HINSTANCE__ * hInstance;
	/*0018*/ CHAR const * lpszText;
	/*0020*/ CHAR const * lpszCaption;
	/*0028*/ ULONG dwStyle;
	/*0030*/ CHAR const * lpszIcon;
	/*0038*/ ULONGLONG dwContextHelpId;
	/*0040*/ void (* lpfnMsgBoxCallback)( tagHELPINFO * );
	/*0048*/ ULONG dwLanguageId;
	/*0050*/
};

struct tagMSGBOXPARAMSW {
	/*0000*/ UINT cbSize;
	/*0008*/ HWND__ * hwndOwner;
	/*0010*/ HINSTANCE__ * hInstance;
	/*0018*/ WCHAR const * lpszText;
	/*0020*/ WCHAR const * lpszCaption;
	/*0028*/ ULONG dwStyle;
	/*0030*/ WCHAR const * lpszIcon;
	/*0038*/ ULONGLONG dwContextHelpId;
	/*0040*/ void (* lpfnMsgBoxCallback)( tagHELPINFO * );
	/*0048*/ ULONG dwLanguageId;
	/*0050*/
};

enum tagMSHCTX {
	MSHCTX_LOCAL = 0x0,
	MSHCTX_NOSHAREDMEM = 0x1,
	MSHCTX_DIFFERENTMACHINE = 0x2,
	MSHCTX_INPROC = 0x3,
	MSHCTX_CROSSCTX = 0x4,
	MSHCTX_RESERVED1 = 0x5
};

enum tagMSHLFLAGS {
	MSHLFLAGS_NORMAL = 0x0,
	MSHLFLAGS_TABLESTRONG = 0x1,
	MSHLFLAGS_TABLEWEAK = 0x2,
	MSHLFLAGS_NOPING = 0x4,
	MSHLFLAGS_RESERVED1 = 0x8,
	MSHLFLAGS_RESERVED2 = 0x10,
	MSHLFLAGS_RESERVED3 = 0x20,
	MSHLFLAGS_RESERVED4 = 0x40
};

struct tagMSLLHOOKSTRUCT {
	/*0000*/ tagPOINT pt;
	/*0008*/ ULONG mouseData;
	/*000c*/ ULONG flags;
	/*0010*/ ULONG time;
	/*0018*/ ULONGLONG dwExtraInfo;
	/*0020*/
};

struct tagMULTIKEYHELPA {
	/*0000*/ ULONG mkSize;
	/*0004*/ CHAR mkKeylist;
	/*0005*/ CHAR szKeyphrase[0x1];
	/*0008*/
};

struct tagMULTIKEYHELPW {
	/*0000*/ ULONG mkSize;
	/*0004*/ WCHAR mkKeylist;
	/*0006*/ WCHAR szKeyphrase[0x1];
	/*0008*/
};

struct tagMULTI_QI {
	/*0000*/ _GUID const * pIID;
	/*0008*/ IUnknown * pItf;
	/*0010*/ HRESULT hr;
	/*0018*/
};

struct tagMsgRoutingInfo {
	/*0000*/ UINT SystemProcessID;
	/*0004*/ UINT SystemThreadID;
	/*0008*/ ULONGLONG Identity;
	/*0010*/ ULONGLONG ItemID;
	/*0018*/ _GUID ConnectionGuid;
	/*0028*/
};

struct tagNCCALCSIZE_PARAMS {
	/*0000*/ tagRECT rgrc[0x3];
	/*0030*/ tagWINDOWPOS * lppos;
	/*0038*/
};

struct tagNCEN_CHARACTERISTICS_CHANGED {
	/*0000*/ tagNOTIFYSINK_EXTENDED_NOTIFICATION_HEADER header;
	/*0004*/ ULONG dwIpCharacteristics;
	/*0008*/ tagNETCON_STATUS Status;
	/*000c*/
};

enum tagNCPERM_FLAGS {
	NCPERM_Statistics = 0x1,
	NCPERM_AddRemoveComponents = 0x2,
	NCPERM_RasConnect = 0x3,
	NCPERM_LanConnect = 0x4,
	NCPERM_DeleteConnection = 0x5,
	NCPERM_DeleteAllUserConnection = 0x6,
	NCPERM_RenameConnection = 0x7,
	NCPERM_RenameMyRasConnection = 0x8,
	NCPERM_ChangeBindState = 0x9,
	NCPERM_AdvancedSettings = 0xa,
	NCPERM_DialupPrefs = 0xb,
	NCPERM_LanChangeProperties = 0xc,
	NCPERM_RasChangeProperties = 0xd,
	NCPERM_LanProperties = 0xe,
	NCPERM_RasMyProperties = 0xf,
	NCPERM_RasAllUserProperties = 0x10,
	NCPERM_AllowAdvancedTCPIPConfig = 0x12,
	NCPERM_OpenConnectionsFolder = 0x13,
	NCPERM_EnDisComponentsAllUserRas = 0x17,
	NCPERM_EnDisComponentsMyRas = 0x18,
	NCPERM_ChangeMyRasProperties = 0x19,
	NCPERM_ChangeAllUserRasProperties = 0x1a,
	NCPERM_RenameLanConnection = 0x1b,
	NCPERM_RenameAllUserRasConnection = 0x1c,
	NCPERM_IpcfgOperation = 0x1d,
	NCPERM_Repair = 0x1e
};

enum tagNCRP_FLAGS {
	NCRP_QUERY_PROPERTY_UI = 0x1,
	NCRP_SHOW_PROPERTY_UI = 0x2
};

struct tagNETCFG_INSTALL_PARAMETERS {
	/*0000*/ ULONGLONG Size;
	/*0008*/ ULONG dwCharacteristics;
	/*0010*/ WCHAR const * pszwComponentId;
	/*0018*/ WCHAR const * pszwServiceName;
	/*0020*/ WCHAR const * pszwCoServices;
	/*0028*/ WCHAR const * pszwFriendlyName;
	/*0030*/ WCHAR const * pszwDescription;
	/*0038*/ WCHAR const * pszwUpperRange;
	/*0040*/ WCHAR const * pszwLowerRange;
	/*0048*/ UCHAR fDisableDefaultBindings;
	/*0049*/ UCHAR fNoStartAtBootHint;
	/*004c*/ _GUID UniqueName;
	/*0060*/ WCHAR const * pszwFilterClass;
	/*0068*/ UCHAR fIsMonitoring;
	/*0069*/ UCHAR fIsMandatory;
	/*006a*/ UCHAR fUnbindOnAttach;
	/*006b*/ UCHAR fUnbindOnDetach;
	/*0070*/ WCHAR const * pszwFilterMediaTypes;
	/*0078*/
};

enum tagNETCONMGR_ENUM_FLAGS {
	NCME_DEFAULT = 0x0,
	NCME_HIDDEN = 0x1
};

enum tagNETCONUI_CONNECT_FLAGS {
	NCUC_DEFAULT = 0x0,
	NCUC_NO_UI = 0x1,
	NCUC_ENABLE_DISABLE = 0x2
};

enum tagNETCON_CHARACTERISTIC_FLAGS {
	NCCF_NONE = 0x0,
	NCCF_ALL_USERS = 0x1,
	NCCF_ALLOW_DUPLICATION = 0x2,
	NCCF_ALLOW_REMOVAL = 0x4,
	NCCF_ALLOW_RENAME = 0x8,
	NCCF_INCOMING_ONLY = 0x20,
	NCCF_OUTGOING_ONLY = 0x40,
	NCCF_BRANDED = 0x80,
	NCCF_SHARED = 0x100,
	NCCF_BRIDGED = 0x200,
	NCCF_FIREWALLED = 0x400,
	NCCF_DEFAULT = 0x800,
	NCCF_HOMENET_CAPABLE = 0x1000,
	NCCF_SHARED_PRIVATE = 0x2000,
	NCCF_QUARANTINED = 0x4000,
	NCCF_RESERVED = 0x8000,
	NCCF_HOSTED_NETWORK = 0x10000,
	NCCF_VIRTUAL_STATION = 0x20000,
	NCCF_WIFI_DIRECT = 0x40000,
	NCCF_BLUETOOTH_MASK = 0xf0000,
	NCCF_LAN_MASK = 0xf00000
};

struct tagNETCON_CHOOSECONN {
	/*0000*/ ULONG lStructSize;
	/*0008*/ HWND__ * hwndParent;
	/*0010*/ ULONG dwFlags;
	/*0014*/ ULONG dwTypeMask;
	/*0018*/ WCHAR const * lpstrCaption;
	/*0020*/ WCHAR const * lpstrOkBttnText;
	/*0028*/
};

enum tagNETCON_CHOOSEFLAGS {
	NCCHF_CONNECT = 0x1,
	NCCHF_CAPTION = 0x2,
	NCCHF_OKBTTNTEXT = 0x4,
	NCCHF_AUTOSELECT = 0x10
};

enum tagNETCON_CHOOSETYPE {
	NCCHT_DIRECT_CONNECT = 0x1,
	NCCHT_LAN = 0x2,
	NCCHT_PHONE = 0x4,
	NCCHT_TUNNEL = 0x8,
	NCCHT_ISDN = 0x10,
	NCCHT_ALL = 0x1f
};

enum tagNETCON_MEDIATYPE {
	NCM_NONE = 0x0,
	NCM_DIRECT = 0x1,
	NCM_ISDN = 0x2,
	NCM_LAN = 0x3,
	NCM_PHONE = 0x4,
	NCM_TUNNEL = 0x5,
	NCM_PPPOE = 0x6,
	NCM_BRIDGE = 0x7,
	NCM_SHAREDACCESSHOST_LAN = 0x8,
	NCM_SHAREDACCESSHOST_RAS = 0x9
};

struct tagNETCON_PROPERTIES {
	/*0000*/ _GUID guidId;
	/*0010*/ WCHAR * pszwName;
	/*0018*/ WCHAR * pszwDeviceName;
	/*0020*/ tagNETCON_STATUS Status;
	/*0024*/ tagNETCON_MEDIATYPE MediaType;
	/*0028*/ ULONG dwCharacter;
	/*002c*/ _GUID clsidThisObject;
	/*003c*/ _GUID clsidUiObject;
	/*0050*/
};

struct tagNETCON_PROPERTIES_EX {
	/*0000*/ ULONG dwSize;
	/*0004*/ _GUID guidId;
	/*0018*/ WCHAR * bstrName;
	/*0020*/ WCHAR * bstrDeviceName;
	/*0028*/ tagNETCON_STATUS ncStatus;
	/*002c*/ tagNETCON_MEDIATYPE ncMediaType;
	/*0030*/ tagNETCON_SUBMEDIATYPE ncSubMediaType;
	/*0034*/ ULONG dwCharacter;
	/*0038*/ _GUID clsidThisObject;
	/*0048*/ _GUID clsidUiObject;
	/*0058*/ WCHAR * bstrPhoneOrHostAddress;
	/*0060*/ WCHAR * bstrPersistData;
	/*0068*/
};

enum tagNETCON_STATUS {
	NCS_DISCONNECTED = 0x0,
	NCS_CONNECTING = 0x1,
	NCS_CONNECTED = 0x2,
	NCS_DISCONNECTING = 0x3,
	NCS_HARDWARE_NOT_PRESENT = 0x4,
	NCS_HARDWARE_DISABLED = 0x5,
	NCS_HARDWARE_MALFUNCTION = 0x6,
	NCS_MEDIA_DISCONNECTED = 0x7,
	NCS_AUTHENTICATING = 0x8,
	NCS_AUTHENTICATION_SUCCEEDED = 0x9,
	NCS_AUTHENTICATION_FAILED = 0xa,
	NCS_INVALID_ADDRESS = 0xb,
	NCS_CREDENTIALS_REQUIRED = 0xc,
	NCS_ACTION_REQUIRED = 0xd,
	NCS_ACTION_REQUIRED_RETRY = 0xe,
	NCS_CONNECT_FAILED = 0xf
};

enum tagNETCON_SUBMEDIATYPE {
	NCSM_NONE = 0x0,
	NCSM_LAN = 0x1,
	NCSM_WIRELESS = 0x2,
	NCSM_1394 = 0x3,
	NCSM_DIRECT = 0x4,
	NCSM_IRDA = 0x5,
	NCSM_CM = 0x6,
	NCSM_BLUETOOTH = 0x7,
	NCSM_TVC = 0x8,
	NCSM_WWAN = 0x9,
	NCSM_LBFO_MEMBER = 0xa,
	NCSM_LBFO_TNIC = 0xb
};

enum tagNETCON_TYPE {
	NCT_DIRECT_CONNECT = 0x0,
	NCT_INBOUND = 0x1,
	NCT_INTERNET = 0x2,
	NCT_LAN = 0x3,
	NCT_PHONE = 0x4,
	NCT_TUNNEL = 0x5,
	NCT_BRIDGE = 0x6
};

enum tagNET_LUA_ELEVATION_LEVEL {
	NET_LUA_ELEVATION_LEVEL_INVOKER = 0xa,
	NET_LUA_ELEVATION_LEVEL_HYBRID = 0x14,
	NET_LUA_ELEVATION_LEVEL_ADMINISTRATOR = 0x1e
};

struct tagNEWTEXTMETRICA {
	/*0000*/ LONG tmHeight;
	/*0004*/ LONG tmAscent;
	/*0008*/ LONG tmDescent;
	/*000c*/ LONG tmInternalLeading;
	/*0010*/ LONG tmExternalLeading;
	/*0014*/ LONG tmAveCharWidth;
	/*0018*/ LONG tmMaxCharWidth;
	/*001c*/ LONG tmWeight;
	/*0020*/ LONG tmOverhang;
	/*0024*/ LONG tmDigitizedAspectX;
	/*0028*/ LONG tmDigitizedAspectY;
	/*002c*/ UCHAR tmFirstChar;
	/*002d*/ UCHAR tmLastChar;
	/*002e*/ UCHAR tmDefaultChar;
	/*002f*/ UCHAR tmBreakChar;
	/*0030*/ UCHAR tmItalic;
	/*0031*/ UCHAR tmUnderlined;
	/*0032*/ UCHAR tmStruckOut;
	/*0033*/ UCHAR tmPitchAndFamily;
	/*0034*/ UCHAR tmCharSet;
	/*0038*/ ULONG ntmFlags;
	/*003c*/ UINT ntmSizeEM;
	/*0040*/ UINT ntmCellHeight;
	/*0044*/ UINT ntmAvgWidth;
	/*0048*/
};

struct tagNEWTEXTMETRICEXA {
	/*0000*/ tagNEWTEXTMETRICA ntmTm;
	/*0048*/ tagFONTSIGNATURE ntmFontSig;
	/*0060*/
};

struct tagNEWTEXTMETRICEXW {
	/*0000*/ tagNEWTEXTMETRICW ntmTm;
	/*004c*/ tagFONTSIGNATURE ntmFontSig;
	/*0064*/
};

struct tagNEWTEXTMETRICW {
	/*0000*/ LONG tmHeight;
	/*0004*/ LONG tmAscent;
	/*0008*/ LONG tmDescent;
	/*000c*/ LONG tmInternalLeading;
	/*0010*/ LONG tmExternalLeading;
	/*0014*/ LONG tmAveCharWidth;
	/*0018*/ LONG tmMaxCharWidth;
	/*001c*/ LONG tmWeight;
	/*0020*/ LONG tmOverhang;
	/*0024*/ LONG tmDigitizedAspectX;
	/*0028*/ LONG tmDigitizedAspectY;
	/*002c*/ WCHAR tmFirstChar;
	/*002e*/ WCHAR tmLastChar;
	/*0030*/ WCHAR tmDefaultChar;
	/*0032*/ WCHAR tmBreakChar;
	/*0034*/ UCHAR tmItalic;
	/*0035*/ UCHAR tmUnderlined;
	/*0036*/ UCHAR tmStruckOut;
	/*0037*/ UCHAR tmPitchAndFamily;
	/*0038*/ UCHAR tmCharSet;
	/*003c*/ ULONG ntmFlags;
	/*0040*/ UINT ntmSizeEM;
	/*0044*/ UINT ntmCellHeight;
	/*0048*/ UINT ntmAvgWidth;
	/*004c*/
};

struct tagNLA_SIGNATURE {
	/*0000*/ UCHAR Signature[0x30];
	/*0030*/ INT fUnmanaged;
	/*0034*/
};

struct tagNLM_INTERFACE_INFO {
	/*0000*/ _GUID ProfileId;
	/*0010*/ tagNLA_SIGNATURE nlaSignature;
	/*0044*/
};

struct tagNMBCDROPDOWN {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagRECT rcButton;
	/*0028*/
};

struct tagNMBCHOTITEM {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwFlags;
	/*0020*/
};

struct tagNMCHAR {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ UINT ch;
	/*001c*/ ULONG dwItemPrev;
	/*0020*/ ULONG dwItemNext;
	/*0028*/
};

struct tagNMCUSTOMDRAWINFO {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwDrawStage;
	/*0020*/ HDC__ * hdc;
	/*0028*/ tagRECT rc;
	/*0038*/ ULONGLONG dwItemSpec;
	/*0040*/ UINT uItemState;
	/*0048*/ LONGLONG lItemlParam;
	/*0050*/
};

struct tagNMCUSTOMSPLITRECTINFO {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagRECT rcClient;
	/*0028*/ tagRECT rcButton;
	/*0038*/ tagRECT rcSplit;
	/*0048*/
};

struct tagNMCUSTOMTEXT {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ HDC__ * hDC;
	/*0020*/ WCHAR const * lpString;
	/*0028*/ INT nCount;
	/*0030*/ tagRECT * lpRect;
	/*0038*/ UINT uFormat;
	/*003c*/ INT fLink;
	/*0040*/
};

struct tagNMDATETIMECHANGE {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ ULONG dwFlags;
	/*001c*/ _SYSTEMTIME st;
	/*0030*/
};

struct tagNMDATETIMEFORMATA {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ CHAR const * pszFormat;
	/*0020*/ _SYSTEMTIME st;
	/*0030*/ CHAR const * pszDisplay;
	/*0038*/ CHAR szDisplay[0x40];
	/*0078*/
};

struct tagNMDATETIMEFORMATQUERYA {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ CHAR const * pszFormat;
	/*0020*/ tagSIZE szMax;
	/*0028*/
};

struct tagNMDATETIMEFORMATQUERYW {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ WCHAR const * pszFormat;
	/*0020*/ tagSIZE szMax;
	/*0028*/
};

struct tagNMDATETIMEFORMATW {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ WCHAR const * pszFormat;
	/*0020*/ _SYSTEMTIME st;
	/*0030*/ WCHAR const * pszDisplay;
	/*0038*/ WCHAR szDisplay[0x40];
	/*00b8*/
};

struct tagNMDATETIMESTRINGA {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ CHAR const * pszUserString;
	/*0020*/ _SYSTEMTIME st;
	/*0030*/ ULONG dwFlags;
	/*0038*/
};

struct tagNMDATETIMESTRINGW {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ WCHAR const * pszUserString;
	/*0020*/ _SYSTEMTIME st;
	/*0030*/ ULONG dwFlags;
	/*0038*/
};

struct tagNMDATETIMEWMKEYDOWNA {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ INT nVirtKey;
	/*0020*/ CHAR const * pszFormat;
	/*0028*/ _SYSTEMTIME st;
	/*0038*/
};

struct tagNMDATETIMEWMKEYDOWNW {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ INT nVirtKey;
	/*0020*/ WCHAR const * pszFormat;
	/*0028*/ _SYSTEMTIME st;
	/*0038*/
};

struct tagNMDAYSTATE {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ _SYSTEMTIME stStart;
	/*0028*/ INT cDayState;
	/*0030*/ ULONG * prgDayState;
	/*0038*/
};

struct tagNMHDDISPINFOA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*001c*/ UINT mask;
	/*0020*/ CHAR * pszText;
	/*0028*/ INT cchTextMax;
	/*002c*/ INT iImage;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagNMHDDISPINFOW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*001c*/ UINT mask;
	/*0020*/ WCHAR * pszText;
	/*0028*/ INT cchTextMax;
	/*002c*/ INT iImage;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagNMHDFILTERBTNCLICK {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*001c*/ tagRECT rc;
	/*0030*/
};

struct tagNMHDR {
	/*0000*/ HWND__ * hwndFrom;
	/*0008*/ ULONGLONG idFrom;
	/*0010*/ UINT code;
	/*0018*/
};

struct tagNMHEADERA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*001c*/ INT iButton;
	/*0020*/ _HD_ITEMA * pitem;
	/*0028*/
};

struct tagNMHEADERW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*001c*/ INT iButton;
	/*0020*/ _HD_ITEMW * pitem;
	/*0028*/
};

struct tagNMIPADDRESS {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iField;
	/*001c*/ INT iValue;
	/*0020*/
};

struct tagNMITEMACTIVATE {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*001c*/ INT iSubItem;
	/*0020*/ UINT uNewState;
	/*0024*/ UINT uOldState;
	/*0028*/ UINT uChanged;
	/*002c*/ tagPOINT ptAction;
	/*0038*/ LONGLONG lParam;
	/*0040*/ UINT uKeyFlags;
	/*0048*/
};

struct tagNMKEY {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ UINT nVKey;
	/*001c*/ UINT uFlags;
	/*0020*/
};

struct tagNMLINK {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagLITEM item;
	/*10d0*/
};

struct tagNMLISTVIEW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*001c*/ INT iSubItem;
	/*0020*/ UINT uNewState;
	/*0024*/ UINT uOldState;
	/*0028*/ UINT uChanged;
	/*002c*/ tagPOINT ptAction;
	/*0038*/ LONGLONG lParam;
	/*0040*/
};

struct tagNMLVCACHEHINT {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iFrom;
	/*001c*/ INT iTo;
	/*0020*/
};

struct tagNMLVCUSTOMDRAW {
	/*0000*/ tagNMCUSTOMDRAWINFO nmcd;
	/*0050*/ ULONG clrText;
	/*0054*/ ULONG clrTextBk;
	/*0058*/ INT iSubItem;
	/*005c*/ ULONG dwItemType;
	/*0060*/ ULONG clrFace;
	/*0064*/ INT iIconEffect;
	/*0068*/ INT iIconPhase;
	/*006c*/ INT iPartId;
	/*0070*/ INT iStateId;
	/*0074*/ tagRECT rcText;
	/*0084*/ UINT uAlign;
	/*0088*/
};

struct tagNMLVEMPTYMARKUP {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwFlags;
	/*001c*/ WCHAR szMarkup[0x824];
	/*1068*/
};

struct tagNMLVFINDITEMA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iStart;
	/*0020*/ tagLVFINDINFOA lvfi;
	/*0048*/
};

struct tagNMLVFINDITEMW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iStart;
	/*0020*/ tagLVFINDINFOW lvfi;
	/*0048*/
};

struct tagNMLVGETINFOTIPA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwFlags;
	/*0020*/ CHAR * pszText;
	/*0028*/ INT cchTextMax;
	/*002c*/ INT iItem;
	/*0030*/ INT iSubItem;
	/*0038*/ LONGLONG lParam;
	/*0040*/
};

struct tagNMLVGETINFOTIPW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwFlags;
	/*0020*/ WCHAR * pszText;
	/*0028*/ INT cchTextMax;
	/*002c*/ INT iItem;
	/*0030*/ INT iSubItem;
	/*0038*/ LONGLONG lParam;
	/*0040*/
};

struct tagNMLVLINK {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagLITEM link;
	/*10d0*/ INT iItem;
	/*10d4*/ INT iSubItem;
	/*10d8*/
};

struct tagNMLVODSTATECHANGE {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iFrom;
	/*001c*/ INT iTo;
	/*0020*/ UINT uNewState;
	/*0024*/ UINT uOldState;
	/*0028*/
};

struct tagNMLVSCROLL {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT dx;
	/*001c*/ INT dy;
	/*0020*/
};

struct tagNMMOUSE {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONGLONG dwItemSpec;
	/*0020*/ ULONGLONG dwItemData;
	/*0028*/ tagPOINT pt;
	/*0030*/ LONGLONG dwHitInfo;
	/*0038*/
};

struct tagNMOBJECTNOTIFY {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*0020*/ _GUID const * piid;
	/*0028*/ void * pObject;
	/*0030*/ HRESULT hResult;
	/*0034*/ ULONG dwFlags;
	/*0038*/
};

struct tagNMPGHOTITEM {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT idOld;
	/*001c*/ INT idNew;
	/*0020*/ ULONG dwFlags;
	/*0028*/
};

struct tagNMRBAUTOSIZE {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT fChanged;
	/*001c*/ tagRECT rcTarget;
	/*002c*/ tagRECT rcActual;
	/*0040*/
};

struct tagNMREBAR {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwMask;
	/*001c*/ UINT uBand;
	/*0020*/ UINT fStyle;
	/*0024*/ UINT wID;
	/*0028*/ LONGLONG lParam;
	/*0030*/
};

struct tagNMREBARAUTOBREAK {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ UINT uBand;
	/*001c*/ UINT wID;
	/*0020*/ LONGLONG lParam;
	/*0028*/ UINT uMsg;
	/*002c*/ UINT fStyleCurrent;
	/*0030*/ INT fAutoBreak;
	/*0038*/
};

struct tagNMREBARCHEVRON {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ UINT uBand;
	/*001c*/ UINT wID;
	/*0020*/ LONGLONG lParam;
	/*0028*/ tagRECT rc;
	/*0038*/ LONGLONG lParamNM;
	/*0040*/
};

struct tagNMREBARCHILDSIZE {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ UINT uBand;
	/*001c*/ UINT wID;
	/*0020*/ tagRECT rcChild;
	/*0030*/ tagRECT rcBand;
	/*0040*/
};

struct tagNMREBARSPLITTER {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagRECT rcSizing;
	/*0028*/
};

struct tagNMSELCHANGE {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ _SYSTEMTIME stSelStart;
	/*0028*/ _SYSTEMTIME stSelEnd;
	/*0038*/
};

struct tagNMTBGETINFOTIPA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ CHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0024*/ INT iItem;
	/*0028*/ LONGLONG lParam;
	/*0030*/
};

struct tagNMTBGETINFOTIPW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ WCHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0024*/ INT iItem;
	/*0028*/ LONGLONG lParam;
	/*0030*/
};

struct tagNMTBHOTITEM {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT idOld;
	/*001c*/ INT idNew;
	/*0020*/ ULONG dwFlags;
	/*0028*/
};

struct tagNMTBRESTORE {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG * pData;
	/*0020*/ ULONG * pCurrent;
	/*0028*/ UINT cbData;
	/*002c*/ INT iItem;
	/*0030*/ INT cButtons;
	/*0034*/ INT cbBytesPerRecord;
	/*0038*/ _TBBUTTON tbButton;
	/*0058*/
};

struct tagNMTBSAVE {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG * pData;
	/*0020*/ ULONG * pCurrent;
	/*0028*/ UINT cbData;
	/*002c*/ INT iItem;
	/*0030*/ INT cButtons;
	/*0038*/ _TBBUTTON tbButton;
	/*0058*/
};

struct tagNMTOOLBARA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*0020*/ _TBBUTTON tbButton;
	/*0040*/ INT cchText;
	/*0048*/ CHAR * pszText;
	/*0050*/ tagRECT rcButton;
	/*0060*/
};

struct tagNMTOOLBARW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ INT iItem;
	/*0020*/ _TBBUTTON tbButton;
	/*0040*/ INT cchText;
	/*0048*/ WCHAR * pszText;
	/*0050*/ tagRECT rcButton;
	/*0060*/
};

struct tagNMTOOLTIPSCREATED {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ HWND__ * hwndToolTips;
	/*0020*/
};

struct tagNMTREEVIEWA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ UINT action;
	/*0020*/ tagTVITEMA itemOld;
	/*0058*/ tagTVITEMA itemNew;
	/*0090*/ tagPOINT ptDrag;
	/*0098*/
};

struct tagNMTREEVIEWW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ UINT action;
	/*0020*/ tagTVITEMW itemOld;
	/*0058*/ tagTVITEMW itemNew;
	/*0090*/ tagPOINT ptDrag;
	/*0098*/
};

struct tagNMTTCUSTOMDRAW {
	/*0000*/ tagNMCUSTOMDRAWINFO nmcd;
	/*0050*/ UINT uDrawFlags;
	/*0058*/
};

struct tagNMTTDISPINFOA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ CHAR * lpszText;
	/*0020*/ CHAR szText[0x50];
	/*0070*/ HINSTANCE__ * hinst;
	/*0078*/ UINT uFlags;
	/*0080*/ LONGLONG lParam;
	/*0088*/
};

struct tagNMTTDISPINFOW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ WCHAR * lpszText;
	/*0020*/ WCHAR szText[0x50];
	/*00c0*/ HINSTANCE__ * hinst;
	/*00c8*/ UINT uFlags;
	/*00d0*/ LONGLONG lParam;
	/*00d8*/
};

struct tagNMTVASYNCDRAW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ _IMAGELISTDRAWPARAMS * pimldp;
	/*0020*/ HRESULT hr;
	/*0028*/ _TREEITEM * hItem;
	/*0030*/ LONGLONG lParam;
	/*0038*/ ULONG dwRetFlags;
	/*003c*/ INT iRetImageIndex;
	/*0040*/
};

struct tagNMTVCUSTOMDRAW {
	/*0000*/ tagNMCUSTOMDRAWINFO nmcd;
	/*0050*/ ULONG clrText;
	/*0054*/ ULONG clrTextBk;
	/*0058*/ INT iLevel;
	/*0060*/
};

struct tagNMTVGETINFOTIPA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ CHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0028*/ _TREEITEM * hItem;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagNMTVGETINFOTIPW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ WCHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0028*/ _TREEITEM * hItem;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagNMTVSTATEIMAGECHANGING {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ _TREEITEM * hti;
	/*0020*/ INT iOldStateImageIndex;
	/*0024*/ INT iNewStateImageIndex;
	/*0028*/
};

struct tagNMVIEWCHANGE {
	/*0000*/ tagNMHDR nmhdr;
	/*0018*/ ULONG dwOldView;
	/*001c*/ ULONG dwNewView;
	/*0020*/
};

struct tagNONCLIENTMETRICSA {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iBorderWidth;
	/*0008*/ INT iScrollWidth;
	/*000c*/ INT iScrollHeight;
	/*0010*/ INT iCaptionWidth;
	/*0014*/ INT iCaptionHeight;
	/*0018*/ tagLOGFONTA lfCaptionFont;
	/*0054*/ INT iSmCaptionWidth;
	/*0058*/ INT iSmCaptionHeight;
	/*005c*/ tagLOGFONTA lfSmCaptionFont;
	/*0098*/ INT iMenuWidth;
	/*009c*/ INT iMenuHeight;
	/*00a0*/ tagLOGFONTA lfMenuFont;
	/*00dc*/ tagLOGFONTA lfStatusFont;
	/*0118*/ tagLOGFONTA lfMessageFont;
	/*0154*/ INT iPaddedBorderWidth;
	/*0158*/
};

struct tagNONCLIENTMETRICSW {
	/*0000*/ UINT cbSize;
	/*0004*/ INT iBorderWidth;
	/*0008*/ INT iScrollWidth;
	/*000c*/ INT iScrollHeight;
	/*0010*/ INT iCaptionWidth;
	/*0014*/ INT iCaptionHeight;
	/*0018*/ tagLOGFONTW lfCaptionFont;
	/*0074*/ INT iSmCaptionWidth;
	/*0078*/ INT iSmCaptionHeight;
	/*007c*/ tagLOGFONTW lfSmCaptionFont;
	/*00d8*/ INT iMenuWidth;
	/*00dc*/ INT iMenuHeight;
	/*00e0*/ tagLOGFONTW lfMenuFont;
	/*013c*/ tagLOGFONTW lfStatusFont;
	/*0198*/ tagLOGFONTW lfMessageFont;
	/*01f4*/ INT iPaddedBorderWidth;
	/*01f8*/
};

struct tagNOTIFYSINK_EXTENDED_NOTIFICATION_HEADER {
	/*0000*/ tagNOTIFYSINK_EXTENDED_NOTIFICATION_ID ncNotificationId;
	/*0004*/
};

enum tagNOTIFYSINK_EXTENDED_NOTIFICATION_ID {
	NCEN_IP_CHARACTERISTICS_CHANGED = 0x0
};

enum tagNP_ENUM_NETWORK {
	NP_ENUM_NETWORK_CONNECTED = 0x1,
	NP_ENUM_NETWORK_DISCONNECTED = 0x2,
	NP_ENUM_NETWORK_ALL = 0x3,
	NP_ENUM_NETWORK_INCLUDE_HIDDEN = 0x4,
	NP_ENUM_NETWORK_MAX = 0x7
};

enum tagNP_ENUM_NETWORK_CONNECTION_PROFILE {
	NP_ENUM_NETWORK_CONNECTION_PROFILE_CONNECTED = 0x1,
	NP_ENUM_NETWORK_CONNECTION_PROFILE_DISCONNECTED = 0x2,
	NP_ENUM_NETWORK_CONNECTION_PROFILE_ALL = 0x3
};

enum tagNP_ENUM_NETWORK_INTERFACE {
	NP_ENUM_NETWORK_INTERFACE_ALL = 0x0,
	NP_ENUM_NETWORK_INTERFACE_INCLUDE_HIDDEN = 0x1
};

enum tagNP_ENUM_NETWORK_SIGNATURE {
	NP_ENUM_NETWORK_SIGNATURE_CONNECTED = 0x1,
	NP_ENUM_NETWORK_SIGNATURE_DISCONNECTED = 0x2,
	NP_ENUM_NETWORK_SIGNATURE_ALL = 0x3
};

enum tagNP_ICON_SIZE {
	NP_ICON_16X16 = 0x10,
	NP_ICON_24X24 = 0x18,
	NP_ICON_32X32 = 0x20,
	NP_ICON_48X48 = 0x30
};

struct tagNP_INTERFACE_INFO {
	/*0000*/ _GUID interfaceGuid;
	/*0010*/ _GUID primaryInterfaceGuid;
	/*0020*/ ULONGLONG interfaceLuid;
	/*0028*/ ULONG interfaceIndex;
	/*002c*/ tagNP_MEDIA_TYPE mediaType;
	/*0030*/ UCHAR isOnDemand;
	/*0038*/
};

enum tagNP_INTERFACE_PROPERTY_CHANGE {
	NP_INTERFACE_CONNECTIVITY = 0x1,
	NP_INTERFACE_AUTHENTICATION = 0x2,
	NP_INTERFACE_COST = 0x4,
	NP_INTERFACE_DATAPLAN_STATUS = 0x8
};

enum tagNP_INTERFACE_STATE {
	NP_INTERFACE_CONNECTED = 0x1,
	NP_INTERFACE_DISCONNECTED = 0x2,
	NP_INTERFACE_CONNECTIVITY_V4_LOCAL = 0x4,
	NP_INTERFACE_CONNECTIVITY_V4_INTERNET = 0x8,
	NP_INTERFACE_CONNECTIVITY_V6_LOCAL = 0x10,
	NP_INTERFACE_CONNECTIVITY_V6_INTERNET = 0x20,
	NP_INTERFACE_CONNECTIVITY_V4_WEBHIJACK = 0x40,
	NP_INTERFACE_CONNECTIVITY_V6_WEBHIJACK = 0x80,
	NP_INTERFACE_CONNECTIVITY_V4_AUTHPROXY = 0x100,
	NP_INTERFACE_CONNECTIVITY_V6_AUTHPROXY = 0x200
};

enum tagNP_MEDIA_TYPE {
	NP_MEDIA_TYPE_UNKNOWN = 0x0,
	NP_MEDIA_TYPE_ETHERNET = 0x1,
	NP_MEDIA_TYPE_WLAN = 0x2,
	NP_MEDIA_TYPE_WWAN = 0x3,
	NP_MEDIA_TYPE_TUNNEL = 0x4,
	NP_MEDIA_TYPE_PPP = 0x5
};

enum tagNP_NETWORK_CATEGORY {
	NP_NETWORK_PUBLIC = 0x0,
	NP_NETWORK_PRIVATE = 0x1,
	NP_NETWORK_DOMAIN_AUTHENTICATED = 0x2
};

enum tagNP_NETWORK_CLASS {
	NP_NETWORK_IDENTIFYING = 0x1,
	NP_NETWORK_IDENTIFIED = 0x2,
	NP_NETWORK_UNIDENTIFIED = 0x3
};

enum tagNP_NETWORK_INTERFACE_TYPE {
	NP_NETWORK_INTERFACE_UNMANAGED = 0x0,
	NP_NETWORK_INTERFACE_MANAGED = 0x1,
	NP_NETWORK_INTERFACE_DOMAIN_AUTHENTICATED = 0x2
};

enum tagNP_NETWORK_PROPERTY_CHANGE {
	NP_NETWORK_INTERFACE = 0x1,
	NP_NETWORK_DESCRIPTION = 0x2,
	NP_NETWORK_NAME = 0x4,
	NP_NETWORK_ICON = 0x8,
	NP_NETWORK_CATEGORY_VALUE = 0x10,
	NP_NETWORK_CONNECTIVITY = 0x20
};

enum tagNP_NETWORK_SIGNATURE_PROPERTY_CHANGE {
	NP_NETWORK_SIGNATURE_DESCRIPTION = 0x1,
	NP_NETWORK_SIGNATURE_AUTHENTICATION = 0x2
};

enum tagNP_NETWORK_SIGNATURE_STATE {
	NP_NETWORK_SIGNATURE_CONNECTED = 0x1,
	NP_NETWORK_SIGNATURE_DISCONNECTED = 0x2
};

enum tagNP_NETWORK_SIGNATURE_TYPE {
	NP_NETWORK_SIGNATURE_UNMANAGED = 0x0,
	NP_NETWORK_SIGNATURE_MANAGED = 0x1,
	NP_NETWORK_SIGNATURE_DOMAIN_AUTHENTICATED = 0x2
};

enum tagNP_NETWORK_STATE {
	NP_NETWORK_UNKNOWN = 0x0,
	NP_NETWORK_CONNECTED = 0x1,
	NP_NETWORK_DISCONNECTED = 0x2,
	NP_NETWORK_CONNECTIVITY_V4_LOCAL = 0x4,
	NP_NETWORK_CONNECTIVITY_V4_INTERNET = 0x8,
	NP_NETWORK_CONNECTIVITY_V6_LOCAL = 0x10,
	NP_NETWORK_CONNECTIVITY_V6_INTERNET = 0x20,
	NP_NETWORK_CONNECTIVITY_V4_WEBHIJACK = 0x40,
	NP_NETWORK_CONNECTIVITY_V6_WEBHIJACK = 0x80,
	NP_NETWORK_CONNECTIVITY_V4_AUTHPROXY = 0x100,
	NP_NETWORK_CONNECTIVITY_V6_AUTHPROXY = 0x200
};

enum tagNP_NETWORK_TYPE {
	NP_NETWORK_UNMANAGED = 0x0,
	NP_NETWORK_MANAGED = 0x1
};

enum tagNP_PROFILE_STATE {
	NP_PROFILE_STATE_UNKNOWN = 0x0,
	NP_PROFILE_CONNECTED = 0x1,
	NP_PROFILE_DISCONNECTED = 0x2
};

enum tagNP_PUBLISH_NETWORK_CONNECTIVITY_CHANGE_FLAGS {
	NP_PUBLISH_UNKNOWN = 0x0,
	NP_PUBLISH_PROXYAUTHCREDSCHANGED = 0x1,
	NP_PUBLISH_CONNECTIVITYLEVELCHANGED = 0x2,
	NP_PUBLISH_WWANREGISTRATIONSTATECHANGED = 0x4,
	NP_PUBLISH_TETHERINGOPERATIONALSTATECHANGED = 0x8,
	NP_PUBLISH_TETHERINGCLIENTCOUNTCHANGED = 0x10
};

struct tagOBJECTDESCRIPTOR {
	/*0000*/ ULONG cbSize;
	/*0004*/ _GUID clsid;
	/*0014*/ ULONG dwDrawAspect;
	/*0018*/ tagSIZE sizel;
	/*0020*/ _POINTL pointl;
	/*0028*/ ULONG dwStatus;
	/*002c*/ ULONG dwFullUserTypeName;
	/*0030*/ ULONG dwSrcOfCopy;
	/*0034*/
};

struct tagOBO_TOKEN {
	/*0000*/ tagOBO_TOKEN_TYPE Type;
	/*0008*/ INetCfgComponent * pncc;
	/*0010*/ WCHAR const * pszwManufacturer;
	/*0018*/ WCHAR const * pszwProduct;
	/*0020*/ WCHAR const * pszwDisplayName;
	/*0028*/ INT fRegistered;
	/*0030*/
};

enum tagOBO_TOKEN_TYPE {
	OBO_USER = 0x1,
	OBO_COMPONENT = 0x2,
	OBO_SOFTWARE = 0x3
};

struct tagOCPFIPARAMS {
	/*0000*/ ULONG cbStructSize;
	/*0008*/ HWND__ * hWndOwner;
	/*0010*/ INT x;
	/*0014*/ INT y;
	/*0018*/ WCHAR const * lpszCaption;
	/*0020*/ ULONG cObjects;
	/*0028*/ IUnknown * * lplpUnk;
	/*0030*/ ULONG cPages;
	/*0038*/ _GUID * lpPages;
	/*0040*/ ULONG lcid;
	/*0044*/ LONG dispidInitialProperty;
	/*0048*/
};

struct tagOIFI {
	/*0000*/ UINT cb;
	/*0004*/ INT fMDIApp;
	/*0008*/ HWND__ * hwndFrame;
	/*0010*/ HACCEL__ * haccel;
	/*0018*/ UINT cAccelEntries;
	/*0020*/
};

enum tagOLECLOSE {
	OLECLOSE_SAVEIFDIRTY = 0x0,
	OLECLOSE_NOSAVE = 0x1,
	OLECLOSE_PROMPTSAVE = 0x2
};

enum tagOLECONTF {
	OLECONTF_EMBEDDINGS = 0x1,
	OLECONTF_LINKS = 0x2,
	OLECONTF_OTHERS = 0x4,
	OLECONTF_ONLYUSER = 0x8,
	OLECONTF_ONLYIFRUNNING = 0x10
};

enum tagOLEDCFLAGS {
	OLEDC_NODRAW = 0x1,
	OLEDC_PAINTBKGND = 0x2,
	OLEDC_OFFSCREEN = 0x4
};

enum tagOLEGETMONIKER {
	OLEGETMONIKER_ONLYIFTHERE = 0x1,
	OLEGETMONIKER_FORCEASSIGN = 0x2,
	OLEGETMONIKER_UNASSIGN = 0x3,
	OLEGETMONIKER_TEMPFORUSER = 0x4
};

enum tagOLELINKBIND {
	OLELINKBIND_EVENIFCLASSDIFF = 0x1
};

enum tagOLEMISC {
	OLEMISC_RECOMPOSEONRESIZE = 0x1,
	OLEMISC_ONLYICONIC = 0x2,
	OLEMISC_INSERTNOTREPLACE = 0x4,
	OLEMISC_STATIC = 0x8,
	OLEMISC_CANTLINKINSIDE = 0x10,
	OLEMISC_CANLINKBYOLE1 = 0x20,
	OLEMISC_ISLINKOBJECT = 0x40,
	OLEMISC_INSIDEOUT = 0x80,
	OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
	OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
	OLEMISC_INVISIBLEATRUNTIME = 0x400,
	OLEMISC_ALWAYSRUN = 0x800,
	OLEMISC_ACTSLIKEBUTTON = 0x1000,
	OLEMISC_ACTSLIKELABEL = 0x2000,
	OLEMISC_NOUIACTIVATE = 0x4000,
	OLEMISC_ALIGNABLE = 0x8000,
	OLEMISC_SIMPLEFRAME = 0x10000,
	OLEMISC_SETCLIENTSITEFIRST = 0x20000,
	OLEMISC_IMEMODE = 0x40000,
	OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
	OLEMISC_WANTSTOMENUMERGE = 0x100000,
	OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
};

enum tagOLERENDER {
	OLERENDER_NONE = 0x0,
	OLERENDER_DRAW = 0x1,
	OLERENDER_FORMAT = 0x2,
	OLERENDER_ASIS = 0x3
};

enum tagOLEUPDATE {
	OLEUPDATE_ALWAYS = 0x1,
	OLEUPDATE_ONCALL = 0x3
};

struct tagOLEVERB {
	/*0000*/ LONG lVerb;
	/*0008*/ WCHAR * lpszVerbName;
	/*0010*/ ULONG fuFlags;
	/*0014*/ ULONG grfAttribs;
	/*0018*/
};

enum tagOLEVERBATTRIB {
	OLEVERBATTRIB_NEVERDIRTIES = 0x1,
	OLEVERBATTRIB_ONCONTAINERMENU = 0x2
};

enum tagOLEWHICHMK {
	OLEWHICHMK_CONTAINER = 0x1,
	OLEWHICHMK_OBJREL = 0x2,
	OLEWHICHMK_OBJFULL = 0x3
};

struct tagOleMenuGroupWidths {
	/*0000*/ LONG width[0x6];
	/*0018*/
};

struct tagPAINTSTRUCT {
	/*0000*/ HDC__ * hdc;
	/*0008*/ INT fErase;
	/*000c*/ tagRECT rcPaint;
	/*001c*/ INT fRestore;
	/*0020*/ INT fIncUpdate;
	/*0024*/ UCHAR rgbReserved[0x20];
	/*0048*/
};

struct tagPALETTEENTRY {
	/*0000*/ UCHAR peRed;
	/*0001*/ UCHAR peGreen;
	/*0002*/ UCHAR peBlue;
	/*0003*/ UCHAR peFlags;
	/*0004*/
};

struct tagPANOSE {
	/*0000*/ UCHAR bFamilyType;
	/*0001*/ UCHAR bSerifStyle;
	/*0002*/ UCHAR bWeight;
	/*0003*/ UCHAR bProportion;
	/*0004*/ UCHAR bContrast;
	/*0005*/ UCHAR bStrokeVariation;
	/*0006*/ UCHAR bArmStyle;
	/*0007*/ UCHAR bLetterform;
	/*0008*/ UCHAR bMidline;
	/*0009*/ UCHAR bXHeight;
	/*000a*/
};

struct tagPARAMDATA {
	/*0000*/ WCHAR * szName;
	/*0008*/ USHORT vt;
	/*0010*/
};

struct tagPARAMDESC {
	/*0000*/ tagPARAMDESCEX * pparamdescex;
	/*0008*/ USHORT wParamFlags;
	/*0010*/
};

struct tagPARAMDESCEX {
	/*0000*/ ULONG cBytes;
	/*0008*/ tagVARIANT varDefaultValue;
	/*0020*/
};

struct tagPARSEDURLA {
	/*0000*/ ULONG cbSize;
	/*0008*/ CHAR const * pszProtocol;
	/*0010*/ UINT cchProtocol;
	/*0018*/ CHAR const * pszSuffix;
	/*0020*/ UINT cchSuffix;
	/*0024*/ UINT nScheme;
	/*0028*/
};

struct tagPARSEDURLW {
	/*0000*/ ULONG cbSize;
	/*0008*/ WCHAR const * pszProtocol;
	/*0010*/ UINT cchProtocol;
	/*0018*/ WCHAR const * pszSuffix;
	/*0020*/ UINT cchSuffix;
	/*0024*/ UINT nScheme;
	/*0028*/
};

struct tagPELARRAY {
	/*0000*/ LONG paXCount;
	/*0004*/ LONG paYCount;
	/*0008*/ LONG paXExt;
	/*000c*/ LONG paYExt;
	/*0010*/ UCHAR paRGBs;
	/*0014*/
};

enum tagPENDINGMSG {
	PENDINGMSG_CANCELCALL = 0x0,
	PENDINGMSG_WAITNOPROCESS = 0x1,
	PENDINGMSG_WAITDEFPROCESS = 0x2
};

enum tagPENDINGTYPE {
	PENDINGTYPE_TOPLEVEL = 0x1,
	PENDINGTYPE_NESTED = 0x2
};

enum tagPERCEIVED {
	PERCEIVED_TYPE_FIRST = 0xfffffffd,
	PERCEIVED_TYPE_CUSTOM = 0xfffffffd,
	PERCEIVED_TYPE_UNSPECIFIED = 0xfffffffe,
	PERCEIVED_TYPE_FOLDER = 0xffffffff,
	PERCEIVED_TYPE_UNKNOWN = 0x0,
	PERCEIVED_TYPE_TEXT = 0x1,
	PERCEIVED_TYPE_IMAGE = 0x2,
	PERCEIVED_TYPE_AUDIO = 0x3,
	PERCEIVED_TYPE_VIDEO = 0x4,
	PERCEIVED_TYPE_COMPRESSED = 0x5,
	PERCEIVED_TYPE_DOCUMENT = 0x6,
	PERCEIVED_TYPE_SYSTEM = 0x7,
	PERCEIVED_TYPE_APPLICATION = 0x8,
	PERCEIVED_TYPE_GAMEMEDIA = 0x9,
	PERCEIVED_TYPE_CONTACTS = 0xa,
	PERCEIVED_TYPE_LAST = 0xa
};

struct tagPICTDESC {
	
	/*0000*/ UINT cbSizeofstruct;
	/*0004*/ UINT picType;
	/*0008*/ <unnamed-type-bmp> bmp;
	/*0008*/ <unnamed-type-wmf> wmf;
	/*0008*/ <unnamed-type-icon> icon;
	/*0008*/ <unnamed-type-emf> emf;
	/*0018*/
};

struct tagPIXELFORMATDESCRIPTOR {
	/*0000*/ USHORT nSize;
	/*0002*/ USHORT nVersion;
	/*0004*/ ULONG dwFlags;
	/*0008*/ UCHAR iPixelType;
	/*0009*/ UCHAR cColorBits;
	/*000a*/ UCHAR cRedBits;
	/*000b*/ UCHAR cRedShift;
	/*000c*/ UCHAR cGreenBits;
	/*000d*/ UCHAR cGreenShift;
	/*000e*/ UCHAR cBlueBits;
	/*000f*/ UCHAR cBlueShift;
	/*0010*/ UCHAR cAlphaBits;
	/*0011*/ UCHAR cAlphaShift;
	/*0012*/ UCHAR cAccumBits;
	/*0013*/ UCHAR cAccumRedBits;
	/*0014*/ UCHAR cAccumGreenBits;
	/*0015*/ UCHAR cAccumBlueBits;
	/*0016*/ UCHAR cAccumAlphaBits;
	/*0017*/ UCHAR cDepthBits;
	/*0018*/ UCHAR cStencilBits;
	/*0019*/ UCHAR cAuxBuffers;
	/*001a*/ UCHAR iLayerType;
	/*001b*/ UCHAR bReserved;
	/*001c*/ ULONG dwLayerMask;
	/*0020*/ ULONG dwVisibleMask;
	/*0024*/ ULONG dwDamageMask;
	/*0028*/
};

struct tagPOINT {
	/*0000*/ LONG x;
	/*0004*/ LONG y;
	/*0008*/
};

enum tagPOINTERINACTIVE {
	POINTERINACTIVE_ACTIVATEONENTRY = 0x1,
	POINTERINACTIVE_DEACTIVATEONLEAVE = 0x2,
	POINTERINACTIVE_ACTIVATEONDRAG = 0x4
};

enum tagPOINTER_BUTTON_CHANGE_TYPE {
	POINTER_CHANGE_NONE = 0x0,
	POINTER_CHANGE_FIRSTBUTTON_DOWN = 0x1,
	POINTER_CHANGE_FIRSTBUTTON_UP = 0x2,
	POINTER_CHANGE_SECONDBUTTON_DOWN = 0x3,
	POINTER_CHANGE_SECONDBUTTON_UP = 0x4,
	POINTER_CHANGE_THIRDBUTTON_DOWN = 0x5,
	POINTER_CHANGE_THIRDBUTTON_UP = 0x6,
	POINTER_CHANGE_FOURTHBUTTON_DOWN = 0x7,
	POINTER_CHANGE_FOURTHBUTTON_UP = 0x8,
	POINTER_CHANGE_FIFTHBUTTON_DOWN = 0x9,
	POINTER_CHANGE_FIFTHBUTTON_UP = 0xa
};

struct tagPOINTER_DEVICE_CURSOR_INFO {
	/*0000*/ UINT cursorId;
	/*0004*/ tagPOINTER_DEVICE_CURSOR_TYPE cursor;
	/*0008*/
};

enum tagPOINTER_DEVICE_CURSOR_TYPE {
	POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x0,
	POINTER_DEVICE_CURSOR_TYPE_TIP = 0x1,
	POINTER_DEVICE_CURSOR_TYPE_ERASER = 0x2,
	POINTER_DEVICE_CURSOR_TYPE_MAX = 0xffffffff
};

struct tagPOINTER_DEVICE_INFO {
	/*0000*/ ULONG displayOrientation;
	/*0008*/ void * device;
	/*0010*/ tagPOINTER_DEVICE_TYPE pointerDeviceType;
	/*0018*/ HMONITOR__ * monitor;
	/*0020*/ ULONG startingCursorId;
	/*0024*/ USHORT maxActiveContacts;
	/*0026*/ WCHAR productString[0x208];
	/*0438*/
};

struct tagPOINTER_DEVICE_PROPERTY {
	/*0000*/ INT logicalMin;
	/*0004*/ INT logicalMax;
	/*0008*/ INT physicalMin;
	/*000c*/ INT physicalMax;
	/*0010*/ UINT unit;
	/*0014*/ UINT unitExponent;
	/*0018*/ USHORT usagePageId;
	/*001a*/ USHORT usageId;
	/*001c*/
};

enum tagPOINTER_DEVICE_TYPE {
	POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x1,
	POINTER_DEVICE_TYPE_EXTERNAL_PEN = 0x2,
	POINTER_DEVICE_TYPE_TOUCH = 0x3,
	POINTER_DEVICE_TYPE_TOUCH_PAD = 0x4,
	POINTER_DEVICE_TYPE_MAX = 0xffffffff
};

struct tagPOINTER_INFO {
	/*0000*/ ULONG pointerType;
	/*0004*/ UINT pointerId;
	/*0008*/ UINT frameId;
	/*000c*/ UINT pointerFlags;
	/*0010*/ void * sourceDevice;
	/*0018*/ HWND__ * hwndTarget;
	/*0020*/ tagPOINT ptPixelLocation;
	/*0028*/ tagPOINT ptHimetricLocation;
	/*0030*/ tagPOINT ptPixelLocationRaw;
	/*0038*/ tagPOINT ptHimetricLocationRaw;
	/*0040*/ ULONG dwTime;
	/*0044*/ UINT historyCount;
	/*0048*/ INT InputData;
	/*004c*/ ULONG dwKeyStates;
	/*0050*/ ULONGLONG PerformanceCount;
	/*0058*/ tagPOINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
	/*0060*/
};

enum tagPOINTER_INPUT_TYPE {
	PT_POINTER = 0x1,
	PT_TOUCH = 0x2,
	PT_PEN = 0x3,
	PT_MOUSE = 0x4,
	PT_TOUCHPAD = 0x5
};

struct tagPOINTER_PEN_INFO {
	/*0000*/ tagPOINTER_INFO pointerInfo;
	/*0060*/ UINT penFlags;
	/*0064*/ UINT penMask;
	/*0068*/ UINT pressure;
	/*006c*/ UINT rotation;
	/*0070*/ INT tiltX;
	/*0074*/ INT tiltY;
	/*0078*/
};

struct tagPOINTER_TOUCH_INFO {
	/*0000*/ tagPOINTER_INFO pointerInfo;
	/*0060*/ UINT touchFlags;
	/*0064*/ UINT touchMask;
	/*0068*/ tagRECT rcContact;
	/*0078*/ tagRECT rcContactRaw;
	/*0088*/ UINT orientation;
	/*008c*/ UINT pressure;
	/*0090*/
};

struct tagPOINTER_TYPE_INFO {
	/*0000*/ ULONG type;
	/*0008*/ tagPOINTER_TOUCH_INFO touchInfo;
	/*0008*/ tagPOINTER_PEN_INFO penInfo;
	/*0098*/
};

struct tagPOINTF {
	/*0000*/ float x;
	/*0004*/ float y;
	/*0008*/
};

struct tagPOINTFX {
	/*0000*/ _FIXED x;
	/*0004*/ _FIXED y;
	/*0008*/
};

struct tagPOINTS {
	/*0000*/ SHORT x;
	/*0002*/ SHORT y;
	/*0004*/
};

struct tagPOLYTEXTA {
	/*0000*/ INT x;
	/*0004*/ INT y;
	/*0008*/ UINT n;
	/*0010*/ CHAR const * lpstr;
	/*0018*/ UINT uiFlags;
	/*001c*/ tagRECT rcl;
	/*0030*/ INT * pdx;
	/*0038*/
};

struct tagPOLYTEXTW {
	/*0000*/ INT x;
	/*0004*/ INT y;
	/*0008*/ UINT n;
	/*0010*/ WCHAR const * lpstr;
	/*0018*/ UINT uiFlags;
	/*001c*/ tagRECT rcl;
	/*0030*/ INT * pdx;
	/*0038*/
};

struct tagPROPBAG2 {
	/*0000*/ ULONG dwType;
	/*0004*/ USHORT vt;
	/*0006*/ USHORT cfType;
	/*0008*/ ULONG dwHint;
	/*0010*/ WCHAR * pstrName;
	/*0018*/ _GUID clsid;
	/*0028*/
};

enum tagPROPBAG2_TYPE {
	PROPBAG2_TYPE_UNDEFINED = 0x0,
	PROPBAG2_TYPE_DATA = 0x1,
	PROPBAG2_TYPE_URL = 0x2,
	PROPBAG2_TYPE_OBJECT = 0x3,
	PROPBAG2_TYPE_STREAM = 0x4,
	PROPBAG2_TYPE_STORAGE = 0x5,
	PROPBAG2_TYPE_MONIKER = 0x6
};

enum tagPROPCTL_FLAGS {
	PCF_NONE = 0x0,
	PCF_VISIBLE = 0x1,
	PCF_READONLY = 0x2,
	PCF_USEACTIVEBORDERS = 0x4,
	PCF_USEEDITINVITATION = 0x8,
	PCF_VERTPOS_TOP = 0x0,
	PCF_VERTPOS_CENTER = 0x10,
	PCF_VERTPOS_BOTTOM = 0x20,
	PCF_VERTPOS_MASK = 0x30,
	PCF_HORZPOS_LEFT = 0x0,
	PCF_HORZPOS_CENTER = 0x40,
	PCF_HORZPOS_RIGHT = 0x80,
	PCF_HORZPOS_MASK = 0xc0,
	PCF_RTLREADING = 0x200,
	PCF_CAN_WRAP_TEXT = 0x400,
	PCF_POS_MASK = 0x6f0,
	PCF_NORMAL_TEXT = 0x0,
	PCF_SHADOW_TEXT = 0x100,
	PCF_FONT_MASK = 0x100,
	PCF_FLAGS_MASK = 0x7ff
};

struct tagPROPPAGEINFO {
	/*0000*/ ULONG cb;
	/*0008*/ WCHAR * pszTitle;
	/*0010*/ tagSIZE size;
	/*0018*/ WCHAR * pszDocString;
	/*0020*/ WCHAR * pszHelpFile;
	/*0028*/ ULONG dwHelpContext;
	/*0030*/
};

enum tagPROPPAGESTATUS {
	PROPPAGESTATUS_DIRTY = 0x1,
	PROPPAGESTATUS_VALIDATE = 0x2,
	PROPPAGESTATUS_CLEAN = 0x4
};

struct tagPROPSPEC {
	/*0000*/ ULONG ulKind;
	/*0008*/ ULONG propid;
	/*0008*/ WCHAR * lpwstr;
	/*0010*/
};

struct tagPROPVARIANT {
	/*0000*/ USHORT vt;
	/*0002*/ USHORT wReserved1;
	/*0004*/ USHORT wReserved2;
	/*0006*/ USHORT wReserved3;
	/*0008*/ CHAR cVal;
	/*0008*/ UCHAR bVal;
	/*0008*/ SHORT iVal;
	/*0008*/ USHORT uiVal;
	/*0008*/ LONG lVal;
	/*0008*/ ULONG ulVal;
	/*0008*/ INT intVal;
	/*0008*/ UINT uintVal;
	/*0008*/ _LARGE_INTEGER hVal;
	/*0008*/ _ULARGE_INTEGER uhVal;
	/*0008*/ float fltVal;
	/*0008*/ double dblVal;
	/*0008*/ SHORT boolVal;
	/*0008*/ SHORT __OBSOLETE__VARIANT_BOOL;
	/*0008*/ LONG scode;
	/*0008*/ tagCY cyVal;
	/*0008*/ double date;
	/*0008*/ _FILETIME filetime;
	/*0008*/ _GUID * puuid;
	/*0008*/ tagCLIPDATA * pclipdata;
	/*0008*/ WCHAR * bstrVal;
	/*0008*/ tagBSTRBLOB bstrblobVal;
	/*0008*/ tagBLOB blob;
	/*0008*/ CHAR * pszVal;
	/*0008*/ WCHAR * pwszVal;
	/*0008*/ IUnknown * punkVal;
	/*0008*/ IDispatch * pdispVal;
	/*0008*/ IStream * pStream;
	/*0008*/ IStorage * pStorage;
	/*0008*/ tagVersionedStream * pVersionedStream;
	/*0008*/ tagSAFEARRAY * parray;
	/*0008*/ tagCAC cac;
	/*0008*/ tagCAUB caub;
	/*0008*/ tagCAI cai;
	/*0008*/ tagCAUI caui;
	/*0008*/ tagCAL cal;
	/*0008*/ tagCAUL caul;
	/*0008*/ tagCAH cah;
	/*0008*/ tagCAUH cauh;
	/*0008*/ tagCAFLT caflt;
	/*0008*/ tagCADBL cadbl;
	/*0008*/ tagCABOOL cabool;
	/*0008*/ tagCASCODE cascode;
	/*0008*/ tagCACY cacy;
	/*0008*/ tagCADATE cadate;
	/*0008*/ tagCAFILETIME cafiletime;
	/*0008*/ tagCACLSID cauuid;
	/*0008*/ tagCACLIPDATA caclipdata;
	/*0008*/ tagCABSTR cabstr;
	/*0008*/ tagCABSTRBLOB cabstrblob;
	/*0008*/ tagCALPSTR calpstr;
	/*0008*/ tagCALPWSTR calpwstr;
	/*0008*/ tagCAPROPVARIANT capropvar;
	/*0008*/ CHAR * pcVal;
	/*0008*/ UCHAR * pbVal;
	/*0008*/ SHORT * piVal;
	/*0008*/ WCHAR * puiVal;
	/*0008*/ LONG * plVal;
	/*0008*/ ULONG * pulVal;
	/*0008*/ INT * pintVal;
	/*0008*/ UINT * puintVal;
	/*0008*/ float * pfltVal;
	/*0008*/ double * pdblVal;
	/*0008*/ SHORT * pboolVal;
	/*0008*/ tagDEC * pdecVal;
	/*0008*/ LONG * pscode;
	/*0008*/ tagCY * pcyVal;
	/*0008*/ double * pdate;
	/*0008*/ WCHAR * * pbstrVal;
	/*0008*/ IUnknown * * ppunkVal;
	/*0008*/ IDispatch * * ppdispVal;
	/*0008*/ tagSAFEARRAY * * pparray;
	/*0008*/ tagPROPVARIANT * pvarVal;
	/*0000*/ tagDEC decVal;
	/*0018*/
};

enum tagPictureAttributes {
	PICTURE_SCALABLE = 0x1,
	PICTURE_TRANSPARENT = 0x2
};

struct tagProxyFileInfo {
	/*0000*/ tagCInterfaceProxyVtbl * const * pProxyVtblList;
	/*0008*/ tagCInterfaceStubVtbl * const * pStubVtblList;
	/*0010*/ CHAR const * const * pNamesArray;
	/*0018*/ _GUID const * * pDelegatedIIDs;
	/*0020*/ INT (* const pIIDLookupRtn)( _GUID const * , INT * );
	/*0028*/ USHORT TableSize;
	/*002a*/ USHORT TableVersion;
	/*0030*/ _GUID const * * pAsyncIIDLookup;
	/*0038*/ LONGLONG Filler2;
	/*0040*/ LONGLONG Filler3;
	/*0048*/ LONGLONG Filler4;
	/*0050*/
};

struct tagQACONTAINER {
	/*0000*/ ULONG cbSize;
	/*0008*/ IOleClientSite * pClientSite;
	/*0010*/ IAdviseSinkEx * pAdviseSink;
	/*0018*/ IPropertyNotifySink * pPropertyNotifySink;
	/*0020*/ IUnknown * pUnkEventSink;
	/*0028*/ ULONG dwAmbientFlags;
	/*002c*/ ULONG colorFore;
	/*0030*/ ULONG colorBack;
	/*0038*/ IFont * pFont;
	/*0040*/ IOleUndoManager * pUndoMgr;
	/*0048*/ ULONG dwAppearance;
	/*004c*/ LONG lcid;
	/*0050*/ HPALETTE__ * hpal;
	/*0058*/ IBindHost * pBindHost;
	/*0060*/ IOleControlSite * pOleControlSite;
	/*0068*/ IServiceProvider * pServiceProvider;
	/*0070*/
};

enum tagQACONTAINERFLAGS {
	QACONTAINER_SHOWHATCHING = 0x1,
	QACONTAINER_SHOWGRABHANDLES = 0x2,
	QACONTAINER_USERMODE = 0x4,
	QACONTAINER_DISPLAYASDEFAULT = 0x8,
	QACONTAINER_UIDEAD = 0x10,
	QACONTAINER_AUTOCLIP = 0x20,
	QACONTAINER_MESSAGEREFLECT = 0x40,
	QACONTAINER_SUPPORTSMNEMONICS = 0x80
};

struct tagQACONTROL {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwMiscStatus;
	/*0008*/ ULONG dwViewStatus;
	/*000c*/ ULONG dwEventCookie;
	/*0010*/ ULONG dwPropNotifyCookie;
	/*0014*/ ULONG dwPointerActivationPolicy;
	/*0018*/
};

struct tagQUERYCONTEXT {
	/*0000*/ ULONG dwContext;
	/*0004*/ tagCSPLATFORM Platform;
	/*0014*/ ULONG Locale;
	/*0018*/ ULONG dwVersionHi;
	/*001c*/ ULONG dwVersionLo;
	/*0020*/
};

enum tagQUERY_USER_FOR_REBOOT_FLAGS {
	QUFR_PROMPT = 0x1,
	QUFR_REBOOT = 0x2
};

struct tagRASCON_INFO {
	/*0000*/ WCHAR * pszwPbkFile;
	/*0008*/ WCHAR * pszwEntryName;
	/*0010*/ _GUID guidId;
	/*0020*/
};

struct tagRAWHID {
	/*0000*/ ULONG dwSizeHid;
	/*0004*/ ULONG dwCount;
	/*0008*/ UCHAR bRawData[0x1];
	/*000c*/
};

struct tagRAWINPUT {
	
	/*0000*/ tagRAWINPUTHEADER header;
	/*0018*/ <unnamed-type-data> data;
	/*0030*/
};

struct tagRAWINPUTDEVICE {
	/*0000*/ USHORT usUsagePage;
	/*0002*/ USHORT usUsage;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndTarget;
	/*0010*/
};

struct tagRAWINPUTDEVICELIST {
	/*0000*/ void * hDevice;
	/*0008*/ ULONG dwType;
	/*0010*/
};

struct tagRAWINPUTHEADER {
	/*0000*/ ULONG dwType;
	/*0004*/ ULONG dwSize;
	/*0008*/ void * hDevice;
	/*0010*/ ULONGLONG wParam;
	/*0018*/
};

struct tagRAWKEYBOARD {
	/*0000*/ USHORT MakeCode;
	/*0002*/ USHORT Flags;
	/*0004*/ USHORT Reserved;
	/*0006*/ USHORT VKey;
	/*0008*/ UINT Message;
	/*000c*/ ULONG ExtraInformation;
	/*0010*/
};

struct tagRAWMOUSE {
	/*0000*/ USHORT usFlags;
	/*0004*/ ULONG ulButtons;
	/*0004*/ USHORT usButtonFlags;
	/*0006*/ USHORT usButtonData;
	/*0008*/ ULONG ulRawButtons;
	/*000c*/ LONG lLastX;
	/*0010*/ LONG lLastY;
	/*0014*/ ULONG ulExtraInformation;
	/*0018*/
};

enum tagREADYSTATE {
	READYSTATE_UNINITIALIZED = 0x0,
	READYSTATE_LOADING = 0x1,
	READYSTATE_LOADED = 0x2,
	READYSTATE_INTERACTIVE = 0x3,
	READYSTATE_COMPLETE = 0x4
};

struct tagREBARBANDINFOA {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fMask;
	/*0008*/ UINT fStyle;
	/*000c*/ ULONG clrFore;
	/*0010*/ ULONG clrBack;
	/*0018*/ CHAR * lpText;
	/*0020*/ UINT cch;
	/*0024*/ INT iImage;
	/*0028*/ HWND__ * hwndChild;
	/*0030*/ UINT cxMinChild;
	/*0034*/ UINT cyMinChild;
	/*0038*/ UINT cx;
	/*0040*/ HBITMAP__ * hbmBack;
	/*0048*/ UINT wID;
	/*004c*/ UINT cyChild;
	/*0050*/ UINT cyMaxChild;
	/*0054*/ UINT cyIntegral;
	/*0058*/ UINT cxIdeal;
	/*0060*/ LONGLONG lParam;
	/*0068*/ UINT cxHeader;
	/*006c*/ tagRECT rcChevronLocation;
	/*007c*/ UINT uChevronState;
	/*0080*/
};

struct tagREBARBANDINFOW {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fMask;
	/*0008*/ UINT fStyle;
	/*000c*/ ULONG clrFore;
	/*0010*/ ULONG clrBack;
	/*0018*/ WCHAR * lpText;
	/*0020*/ UINT cch;
	/*0024*/ INT iImage;
	/*0028*/ HWND__ * hwndChild;
	/*0030*/ UINT cxMinChild;
	/*0034*/ UINT cyMinChild;
	/*0038*/ UINT cx;
	/*0040*/ HBITMAP__ * hbmBack;
	/*0048*/ UINT wID;
	/*004c*/ UINT cyChild;
	/*0050*/ UINT cyMaxChild;
	/*0054*/ UINT cyIntegral;
	/*0058*/ UINT cxIdeal;
	/*0060*/ LONGLONG lParam;
	/*0068*/ UINT cxHeader;
	/*006c*/ tagRECT rcChevronLocation;
	/*007c*/ UINT uChevronState;
	/*0080*/
};

struct tagREBARINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fMask;
	/*0008*/ _IMAGELIST * himl;
	/*0010*/
};

struct tagRECONVERTSTRING {
	/*0000*/ ULONG dwSize;
	/*0004*/ ULONG dwVersion;
	/*0008*/ ULONG dwStrLen;
	/*000c*/ ULONG dwStrOffset;
	/*0010*/ ULONG dwCompStrLen;
	/*0014*/ ULONG dwCompStrOffset;
	/*0018*/ ULONG dwTargetStrLen;
	/*001c*/ ULONG dwTargetStrOffset;
	/*0020*/
};

struct tagRECT {
	/*0000*/ LONG left;
	/*0004*/ LONG top;
	/*0008*/ LONG right;
	/*000c*/ LONG bottom;
	/*0010*/
};

enum tagRECYCLEBIN_TYPE {
	RBT_VOLUME = 0x0,
	RBT_KNOWNFOLDER = 0x1
};

enum tagREGCLS {
	REGCLS_SINGLEUSE = 0x0,
	REGCLS_MULTIPLEUSE = 0x1,
	REGCLS_MULTI_SEPARATE = 0x2,
	REGCLS_SUSPENDED = 0x4,
	REGCLS_SURROGATE = 0x8,
	REGCLS_AGILE = 0x10
};

struct tagREGISTERWORDA {
	/*0000*/ CHAR * lpReading;
	/*0008*/ CHAR * lpWord;
	/*0010*/
};

struct tagREGISTERWORDW {
	/*0000*/ WCHAR * lpReading;
	/*0008*/ WCHAR * lpWord;
	/*0010*/
};

enum tagREGKIND {
	REGKIND_DEFAULT = 0x0,
	REGKIND_REGISTER = 0x1,
	REGKIND_NONE = 0x2
};

struct tagRGBQUAD {
	/*0000*/ UCHAR rgbBlue;
	/*0001*/ UCHAR rgbGreen;
	/*0002*/ UCHAR rgbRed;
	/*0003*/ UCHAR rgbReserved;
	/*0004*/
};

struct tagRGBTRIPLE {
	/*0000*/ UCHAR rgbtBlue;
	/*0001*/ UCHAR rgbtGreen;
	/*0002*/ UCHAR rgbtRed;
	/*0003*/
};

struct tagRID_DEVICE_INFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwType;
	/*0008*/ tagRID_DEVICE_INFO_MOUSE mouse;
	/*0008*/ tagRID_DEVICE_INFO_KEYBOARD keyboard;
	/*0008*/ tagRID_DEVICE_INFO_HID hid;
	/*0020*/
};

struct tagRID_DEVICE_INFO_HID {
	/*0000*/ ULONG dwVendorId;
	/*0004*/ ULONG dwProductId;
	/*0008*/ ULONG dwVersionNumber;
	/*000c*/ USHORT usUsagePage;
	/*000e*/ USHORT usUsage;
	/*0010*/
};

struct tagRID_DEVICE_INFO_KEYBOARD {
	/*0000*/ ULONG dwType;
	/*0004*/ ULONG dwSubType;
	/*0008*/ ULONG dwKeyboardMode;
	/*000c*/ ULONG dwNumberOfFunctionKeys;
	/*0010*/ ULONG dwNumberOfIndicators;
	/*0014*/ ULONG dwNumberOfKeysTotal;
	/*0018*/
};

struct tagRID_DEVICE_INFO_MOUSE {
	/*0000*/ ULONG dwId;
	/*0004*/ ULONG dwNumberOfButtons;
	/*0008*/ ULONG dwSampleRate;
	/*000c*/ INT fHasHorizontalWheel;
	/*0010*/
};

struct tagRPCOLEMESSAGE {
	/*0000*/ void * reserved1;
	/*0008*/ ULONG dataRepresentation;
	/*0010*/ void * Buffer;
	/*0018*/ ULONG cbBuffer;
	/*001c*/ ULONG iMethod;
	/*0020*/ void * reserved2[0x5];
	/*0048*/ ULONG rpcFlags;
	/*0050*/
};

enum tagRPCOPT_PROPERTIES {
	COMBND_RPCTIMEOUT = 0x1,
	COMBND_SERVER_LOCALITY = 0x2,
	COMBND_RESERVED1 = 0x4,
	COMBND_RESERVED2 = 0x5,
	COMBND_RESERVED3 = 0x8,
	COMBND_RESERVED4 = 0x10
};

enum tagRPCOPT_SERVER_LOCALITY_VALUES {
	SERVER_LOCALITY_PROCESS_LOCAL = 0x0,
	SERVER_LOCALITY_MACHINE_LOCAL = 0x1,
	SERVER_LOCALITY_REMOTE = 0x2
};

struct tagRPC_CALL_ATTRIBUTES_V1_A {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ UCHAR * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ UCHAR * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0038*/
};

struct tagRPC_CALL_ATTRIBUTES_V1_W {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ WCHAR * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ WCHAR * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0038*/
};

struct tagRPC_CALL_ATTRIBUTES_V2_A {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ UCHAR * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ UCHAR * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0034*/ INT KernelModeCaller;
	/*0038*/ ULONG ProtocolSequence;
	/*003c*/ ULONG IsClientLocal;
	/*0040*/ void * ClientPID;
	/*0048*/ ULONG CallStatus;
	/*004c*/ tagRpcCallType CallType;
	/*0050*/ _RPC_CALL_LOCAL_ADDRESS_V1 * CallLocalAddress;
	/*0058*/ USHORT OpNum;
	/*005c*/ _GUID InterfaceUuid;
	/*0070*/
};

struct tagRPC_CALL_ATTRIBUTES_V2_W {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ WCHAR * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ WCHAR * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0034*/ INT KernelModeCaller;
	/*0038*/ ULONG ProtocolSequence;
	/*003c*/ tagRpcCallClientLocality IsClientLocal;
	/*0040*/ void * ClientPID;
	/*0048*/ ULONG CallStatus;
	/*004c*/ tagRpcCallType CallType;
	/*0050*/ _RPC_CALL_LOCAL_ADDRESS_V1 * CallLocalAddress;
	/*0058*/ USHORT OpNum;
	/*005c*/ _GUID InterfaceUuid;
	/*0070*/
};

struct tagRPC_CALL_ATTRIBUTES_V3_A {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ UCHAR * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ UCHAR * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0034*/ INT KernelModeCaller;
	/*0038*/ ULONG ProtocolSequence;
	/*003c*/ ULONG IsClientLocal;
	/*0040*/ void * ClientPID;
	/*0048*/ ULONG CallStatus;
	/*004c*/ tagRpcCallType CallType;
	/*0050*/ _RPC_CALL_LOCAL_ADDRESS_V1 * CallLocalAddress;
	/*0058*/ USHORT OpNum;
	/*005c*/ _GUID InterfaceUuid;
	/*006c*/ ULONG ClientIdentifierBufferLength;
	/*0070*/ UCHAR * ClientIdentifier;
	/*0078*/
};

struct tagRPC_CALL_ATTRIBUTES_V3_W {
	/*0000*/ UINT Version;
	/*0004*/ ULONG Flags;
	/*0008*/ ULONG ServerPrincipalNameBufferLength;
	/*0010*/ WCHAR * ServerPrincipalName;
	/*0018*/ ULONG ClientPrincipalNameBufferLength;
	/*0020*/ WCHAR * ClientPrincipalName;
	/*0028*/ ULONG AuthenticationLevel;
	/*002c*/ ULONG AuthenticationService;
	/*0030*/ INT NullSession;
	/*0034*/ INT KernelModeCaller;
	/*0038*/ ULONG ProtocolSequence;
	/*003c*/ tagRpcCallClientLocality IsClientLocal;
	/*0040*/ void * ClientPID;
	/*0048*/ ULONG CallStatus;
	/*004c*/ tagRpcCallType CallType;
	/*0050*/ _RPC_CALL_LOCAL_ADDRESS_V1 * CallLocalAddress;
	/*0058*/ USHORT OpNum;
	/*005c*/ _GUID InterfaceUuid;
	/*006c*/ ULONG ClientIdentifierBufferLength;
	/*0070*/ UCHAR * ClientIdentifier;
	/*0078*/
};

struct tagRPC_EE_INFO_PARAM {
	
	/*0000*/ tagExtendedErrorParamTypes ParameterType;
	/*0008*/ <unnamed-type-u> u;
	/*0018*/
};

struct tagRPC_ERROR_ENUM_HANDLE {
	/*0000*/ ULONG Signature;
	/*0008*/ void * CurrentPos;
	/*0010*/ void * Head;
	/*0018*/
};

struct tagRPC_EXTENDED_ERROR_INFO {
	
	/*0000*/ ULONG Version;
	/*0008*/ WCHAR * ComputerName;
	/*0010*/ ULONG ProcessID;
	/*0014*/ <unnamed-type-u> u;
	/*0024*/ ULONG GeneratingComponent;
	/*0028*/ ULONG Status;
	/*002c*/ USHORT DetectionLocation;
	/*002e*/ USHORT Flags;
	/*0030*/ INT NumberOfParameters;
	/*0038*/ tagRPC_EE_INFO_PARAM Parameters[0x4];
	/*0098*/
};

struct tagRemBRUSH {
	/*0000*/ ULONG cbData;
	/*0004*/ UCHAR data[0x1];
	/*0008*/
};

struct tagRemFORMATETC {
	/*0000*/ ULONG cfFormat;
	/*0004*/ ULONG ptd;
	/*0008*/ ULONG dwAspect;
	/*000c*/ LONG lindex;
	/*0010*/ ULONG tymed;
	/*0014*/
};

struct tagRemHBITMAP {
	/*0000*/ ULONG cbData;
	/*0004*/ UCHAR data[0x1];
	/*0008*/
};

struct tagRemHENHMETAFILE {
	/*0000*/ ULONG cbData;
	/*0004*/ UCHAR data[0x1];
	/*0008*/
};

struct tagRemHGLOBAL {
	/*0000*/ LONG fNullHGlobal;
	/*0004*/ ULONG cbData;
	/*0008*/ UCHAR data[0x1];
	/*000c*/
};

struct tagRemHMETAFILEPICT {
	/*0000*/ LONG mm;
	/*0004*/ LONG xExt;
	/*0008*/ LONG yExt;
	/*000c*/ ULONG cbData;
	/*0010*/ UCHAR data[0x1];
	/*0014*/
};

struct tagRemHPALETTE {
	/*0000*/ ULONG cbData;
	/*0004*/ UCHAR data[0x1];
	/*0008*/
};

struct tagRemSNB {
	/*0000*/ ULONG ulCntStr;
	/*0004*/ ULONG ulCntChar;
	/*0008*/ WCHAR rgString[0x1];
	/*000c*/
};

struct tagRemSTGMEDIUM {
	/*0000*/ ULONG tymed;
	/*0004*/ ULONG dwHandleType;
	/*0008*/ ULONG pData;
	/*000c*/ ULONG pUnkForRelease;
	/*0010*/ ULONG cbData;
	/*0014*/ UCHAR data[0x1];
	/*0018*/
};

enum tagRpcCallClientLocality {
	rcclInvalid = 0x0,
	rcclLocal = 0x1,
	rcclRemote = 0x2,
	rcclClientUnknownLocality = 0x3
};

enum tagRpcCallType {
	rctInvalid = 0x0,
	rctNormal = 0x1,
	rctTraining = 0x2,
	rctGuaranteed = 0x3
};

enum tagRpcLocalAddressFormat {
	rlafInvalid = 0x0,
	rlafIPv4 = 0x1,
	rlafIPv6 = 0x2
};

struct tagSAFEARRAY {
	/*0000*/ USHORT cDims;
	/*0002*/ USHORT fFeatures;
	/*0004*/ ULONG cbElements;
	/*0008*/ ULONG cLocks;
	/*0010*/ void * pvData;
	/*0018*/ tagSAFEARRAYBOUND rgsabound[0x1];
	/*0020*/
};

struct tagSAFEARRAYBOUND {
	/*0000*/ ULONG cElements;
	/*0004*/ LONG lLbound;
	/*0008*/
};

enum tagSAHOST_SERVICES {
	SAHOST_SERVICE_OSINFO = 0x0,
	SAHOST_SERVICE_WANCOMMONINTERFACECONFIG = 0x1,
	SAHOST_SERVICE_WANIPCONNECTION = 0x2,
	SAHOST_SERVICE_WANPPPCONNECTION = 0x3,
	SAHOST_SERVICE_NATSTATICPORTMAPPING = 0x4,
	SAHOST_SERVICE_MAX = 0x5
};

struct tagSCROLLBARINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcScrollBar;
	/*0014*/ INT dxyLineButton;
	/*0018*/ INT xyThumbTop;
	/*001c*/ INT xyThumbBottom;
	/*0020*/ INT reserved;
	/*0024*/ ULONG rgstate[0x6];
	/*003c*/
};

struct tagSCROLLINFO {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT fMask;
	/*0008*/ INT nMin;
	/*000c*/ INT nMax;
	/*0010*/ UINT nPage;
	/*0014*/ INT nPos;
	/*0018*/ INT nTrackPos;
	/*001c*/
};

struct tagSERIALIZEDPROPERTYVALUE {
	/*0000*/ ULONG dwType;
	/*0004*/ UCHAR rgb[0x1];
	/*0008*/
};

struct tagSERIALIZEDPROPSTORAGE;

struct tagSERIALKEYSA {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ CHAR * lpszActivePort;
	/*0010*/ CHAR * lpszPort;
	/*0018*/ UINT iBaudRate;
	/*001c*/ UINT iPortState;
	/*0020*/ UINT iActive;
	/*0028*/
};

struct tagSERIALKEYSW {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ WCHAR * lpszActivePort;
	/*0010*/ WCHAR * lpszPort;
	/*0018*/ UINT iBaudRate;
	/*001c*/ UINT iPortState;
	/*0020*/ UINT iActive;
	/*0028*/
};

enum tagSERVERCALL {
	SERVERCALL_ISHANDLED = 0x0,
	SERVERCALL_REJECTED = 0x1,
	SERVERCALL_RETRYLATER = 0x2
};

enum tagSET_COLUMNS_NOTIFY_OPTIONS {
	SCNO_DEFAULT = 0x0,
	SCNO_REORDERONLY = 0x1
};

enum tagSFBS_FLAGS {
	SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT = 0x1,
	SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = 0x2
};

enum tagSF_TYPE {
	SF_ERROR = 0xa,
	SF_I1 = 0x10,
	SF_I2 = 0x2,
	SF_I4 = 0x3,
	SF_I8 = 0x14,
	SF_BSTR = 0x8,
	SF_UNKNOWN = 0xd,
	SF_DISPATCH = 0x9,
	SF_VARIANT = 0xc,
	SF_RECORD = 0x24,
	SF_HAVEIID = 0x800d
};

struct tagSHAREDACCESS_HOST_INFO {
	/*0000*/ WCHAR * WANAccessType;
	/*0008*/ IUPnPService * pOSInfo;
	/*0010*/ IUPnPService * pWANCommonInterfaceConfig;
	/*0018*/ IUPnPService * pWANConnection;
	/*0020*/ _GUID LocalAdapterGuid;
	/*0030*/
};

enum tagSHARINGCONNECTIONTYPE {
	ICSSHARINGTYPE_PUBLIC = 0x0,
	ICSSHARINGTYPE_PRIVATE = 0x1
};

enum tagSHARINGCONNECTION_ENUM_FLAGS {
	ICSSC_DEFAULT = 0x0,
	ICSSC_ENABLED = 0x1
};

enum tagSHCOLSTATE {
	SHCOLSTATE_DEFAULT = 0x0,
	SHCOLSTATE_TYPE_STR = 0x1,
	SHCOLSTATE_TYPE_INT = 0x2,
	SHCOLSTATE_TYPE_DATE = 0x3,
	SHCOLSTATE_TYPEMASK = 0xf,
	SHCOLSTATE_ONBYDEFAULT = 0x10,
	SHCOLSTATE_SLOW = 0x20,
	SHCOLSTATE_EXTENDED = 0x40,
	SHCOLSTATE_SECONDARYUI = 0x80,
	SHCOLSTATE_HIDDEN = 0x100,
	SHCOLSTATE_PREFER_VARCMP = 0x200,
	SHCOLSTATE_PREFER_FMTCMP = 0x400,
	SHCOLSTATE_NOSORTBYFOLDERNESS = 0x800,
	SHCOLSTATE_VIEWONLY = 0x10000,
	SHCOLSTATE_BATCHREAD = 0x20000,
	SHCOLSTATE_NO_GROUPBY = 0x40000,
	SHCOLSTATE_FIXED_WIDTH = 0x1000,
	SHCOLSTATE_NODPISCALE = 0x2000,
	SHCOLSTATE_FIXED_RATIO = 0x4000,
	SHCOLSTATE_DISPLAYMASK = 0xf000
};

struct tagSIZE {
	/*0000*/ LONG cx;
	/*0004*/ LONG cy;
	/*0008*/
};

struct tagSMDATA {
	/*0000*/ ULONG dwMask;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HMENU__ * hmenu;
	/*0010*/ HWND__ * hwnd;
	/*0018*/ UINT uId;
	/*001c*/ UINT uIdParent;
	/*0020*/ UINT uIdAncestor;
	/*0028*/ IUnknown * punk;
	/*0030*/ _ITEMIDLIST __unaligned * pidlFolder;
	/*0038*/ _ITEMIDLIST __unaligned * pidlItem;
	/*0040*/ IShellFolder * psf;
	/*0048*/ void * pvUserData;
	/*0050*/
};

struct tagSMINFO {
	/*0000*/ ULONG dwMask;
	/*0004*/ ULONG dwType;
	/*0008*/ ULONG dwFlags;
	/*000c*/ INT iIcon;
	/*0010*/
};

enum tagSMINFOFLAGS {
	SMIF_ICON = 0x1,
	SMIF_ACCELERATOR = 0x2,
	SMIF_DROPTARGET = 0x4,
	SMIF_SUBMENU = 0x8,
	SMIF_CHECKED = 0x20,
	SMIF_DROPCASCADE = 0x40,
	SMIF_HIDDEN = 0x80,
	SMIF_DISABLED = 0x100,
	SMIF_TRACKPOPUP = 0x200,
	SMIF_DEMOTED = 0x400,
	SMIF_ALTSTATE = 0x800,
	SMIF_DRAGNDROP = 0x1000,
	SMIF_NEW = 0x2000
};

enum tagSMINFOMASK {
	SMIM_TYPE = 0x1,
	SMIM_FLAGS = 0x2,
	SMIM_ICON = 0x4
};

enum tagSMINFOTYPE {
	SMIT_SEPARATOR = 0x1,
	SMIT_STRING = 0x2
};

struct tagSOLE_AUTHENTICATION_INFO {
	/*0000*/ ULONG dwAuthnSvc;
	/*0004*/ ULONG dwAuthzSvc;
	/*0008*/ void * pAuthInfo;
	/*0010*/
};

struct tagSOLE_AUTHENTICATION_LIST {
	/*0000*/ ULONG cAuthInfo;
	/*0008*/ tagSOLE_AUTHENTICATION_INFO * aAuthInfo;
	/*0010*/
};

struct tagSOLE_AUTHENTICATION_SERVICE {
	/*0000*/ ULONG dwAuthnSvc;
	/*0004*/ ULONG dwAuthzSvc;
	/*0008*/ WCHAR * pPrincipalName;
	/*0010*/ HRESULT hr;
	/*0018*/
};

enum tagSORTDIRECTION {
	SORT_DESCENDING = 0xffffffff,
	SORT_ASCENDING = 0x1
};

struct tagSOUNDSENTRYA {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iFSTextEffect;
	/*000c*/ ULONG iFSTextEffectMSec;
	/*0010*/ ULONG iFSTextEffectColorBits;
	/*0014*/ ULONG iFSGrafEffect;
	/*0018*/ ULONG iFSGrafEffectMSec;
	/*001c*/ ULONG iFSGrafEffectColor;
	/*0020*/ ULONG iWindowsEffect;
	/*0024*/ ULONG iWindowsEffectMSec;
	/*0028*/ CHAR * lpszWindowsEffectDLL;
	/*0030*/ ULONG iWindowsEffectOrdinal;
	/*0038*/
};

struct tagSOUNDSENTRYW {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ ULONG iFSTextEffect;
	/*000c*/ ULONG iFSTextEffectMSec;
	/*0010*/ ULONG iFSTextEffectColorBits;
	/*0014*/ ULONG iFSGrafEffect;
	/*0018*/ ULONG iFSGrafEffectMSec;
	/*001c*/ ULONG iFSGrafEffectColor;
	/*0020*/ ULONG iWindowsEffect;
	/*0024*/ ULONG iWindowsEffectMSec;
	/*0028*/ WCHAR * lpszWindowsEffectDLL;
	/*0030*/ ULONG iWindowsEffectOrdinal;
	/*0038*/
};

struct tagSTATDATA {
	/*0000*/ tagFORMATETC formatetc;
	/*0020*/ ULONG advf;
	/*0028*/ IAdviseSink * pAdvSink;
	/*0030*/ ULONG dwConnection;
	/*0038*/
};

enum tagSTATFLAG {
	STATFLAG_DEFAULT = 0x0,
	STATFLAG_NONAME = 0x1,
	STATFLAG_NOOPEN = 0x2
};

struct tagSTATPROPSETSTG {
	/*0000*/ _GUID fmtid;
	/*0010*/ _GUID clsid;
	/*0020*/ ULONG grfFlags;
	/*0024*/ _FILETIME mtime;
	/*002c*/ _FILETIME ctime;
	/*0034*/ _FILETIME atime;
	/*003c*/ ULONG dwOSVersion;
	/*0040*/
};

struct tagSTATPROPSTG {
	/*0000*/ WCHAR * lpwstrName;
	/*0008*/ ULONG propid;
	/*000c*/ USHORT vt;
	/*0010*/
};

struct tagSTATSTG {
	/*0000*/ WCHAR * pwcsName;
	/*0008*/ ULONG type;
	/*0010*/ _ULARGE_INTEGER cbSize;
	/*0018*/ _FILETIME mtime;
	/*0020*/ _FILETIME ctime;
	/*0028*/ _FILETIME atime;
	/*0030*/ ULONG grfMode;
	/*0034*/ ULONG grfLocksSupported;
	/*0038*/ _GUID clsid;
	/*0048*/ ULONG grfStateBits;
	/*004c*/ ULONG reserved;
	/*0050*/
};

enum tagSTDMSHLFLAGS {
	SMEXF_SERVER = 0x1,
	SMEXF_HANDLER = 0x2
};

enum tagSTGC {
	STGC_DEFAULT = 0x0,
	STGC_OVERWRITE = 0x1,
	STGC_ONLYIFCURRENT = 0x2,
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 0x4,
	STGC_CONSOLIDATE = 0x8
};

struct tagSTGMEDIUM {
	/*0000*/ ULONG tymed;
	/*0008*/ HBITMAP__ * hBitmap;
	/*0008*/ void * hMetaFilePict;
	/*0008*/ HENHMETAFILE__ * hEnhMetaFile;
	/*0008*/ void * hGlobal;
	/*0008*/ WCHAR * lpszFileName;
	/*0008*/ IStream * pstm;
	/*0008*/ IStorage * pstg;
	/*0010*/ IUnknown * pUnkForRelease;
	/*0018*/
};

enum tagSTGMOVE {
	STGMOVE_MOVE = 0x0,
	STGMOVE_COPY = 0x1,
	STGMOVE_SHALLOWCOPY = 0x2
};

struct tagSTGOPTIONS {
	/*0000*/ USHORT usVersion;
	/*0002*/ USHORT reserved;
	/*0004*/ ULONG ulSectorSize;
	/*0008*/ WCHAR const * pwcsTemplateFile;
	/*0010*/
};

enum tagSTGTY {
	STGTY_STORAGE = 0x1,
	STGTY_STREAM = 0x2,
	STGTY_LOCKBYTES = 0x3,
	STGTY_PROPERTY = 0x4
};

struct tagSTICKYKEYS {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/
};

enum tagSTREAM_SEEK {
	STREAM_SEEK_SET = 0x0,
	STREAM_SEEK_CUR = 0x1,
	STREAM_SEEK_END = 0x2
};

enum tagSTRRET_TYPE {
	STRRET_WSTR = 0x0,
	STRRET_OFFSET = 0x1,
	STRRET_CSTR = 0x2
};

struct tagSTYLEBUFA {
	/*0000*/ ULONG dwStyle;
	/*0004*/ CHAR szDescription[0x20];
	/*0024*/
};

struct tagSTYLEBUFW {
	/*0000*/ ULONG dwStyle;
	/*0004*/ WCHAR szDescription[0x20];
	/*0044*/
};

struct tagSTYLESTRUCT {
	/*0000*/ ULONG styleOld;
	/*0004*/ ULONG styleNew;
	/*0008*/
};

enum tagSUPPORTS_BINDING_INTERFACE_FLAGS {
	NCF_LOWER = 0x1,
	NCF_UPPER = 0x2
};

enum tagSYSKIND {
	SYS_WIN16 = 0x0,
	SYS_WIN32 = 0x1,
	SYS_MAC = 0x2,
	SYS_WIN64 = 0x3
};

struct tagServerInformation {
	/*0000*/ ULONG dwServerPid;
	/*0004*/ ULONG dwServerTid;
	/*0008*/ ULONGLONG ui64ServerAddress;
	/*0010*/
};

enum tagShutdownType {
	IdleShutdown = 0x0,
	ForcedShutdown = 0x1
};

struct tagStorageLayout {
	/*0000*/ ULONG LayoutType;
	/*0008*/ WCHAR * pwcsElementName;
	/*0010*/ _LARGE_INTEGER cOffset;
	/*0018*/ _LARGE_INTEGER cBytes;
	/*0020*/
};

enum tagTASKTYPE {
	NOTASKS = 0x0,
	SPECIALPICTURETASKS = 0x1,
	SPECIALMUSICTASKS = 0x2,
	SPECIALDOCUMENTTASKS = 0x3,
	SPECIALVIDEOTASKS = 0x4,
	SPECIALGENERICTASKS = 0x5,
	VIEWCONTROLTASKS = 0x6,
	COMMONFILEDIALOGTASKS = 0x7
};

struct tagTBADDBITMAP {
	/*0000*/ HINSTANCE__ * hInst;
	/*0008*/ ULONGLONG nID;
	/*0010*/
};

struct tagTBSAVEPARAMSA {
	/*0000*/ HKEY__ * hkr;
	/*0008*/ CHAR const * pszSubKey;
	/*0010*/ CHAR const * pszValueName;
	/*0018*/
};

struct tagTBSAVEPARAMSW {
	/*0000*/ HKEY__ * hkr;
	/*0008*/ WCHAR const * pszSubKey;
	/*0010*/ WCHAR const * pszValueName;
	/*0018*/
};

struct tagTCHITTESTINFO {
	/*0000*/ tagPOINT pt;
	/*0008*/ UINT flags;
	/*000c*/
};

struct tagTCITEMA {
	/*0000*/ UINT mask;
	/*0004*/ ULONG dwState;
	/*0008*/ ULONG dwStateMask;
	/*0010*/ CHAR * pszText;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT iImage;
	/*0020*/ LONGLONG lParam;
	/*0028*/
};

struct tagTCITEMHEADERA {
	/*0000*/ UINT mask;
	/*0004*/ UINT lpReserved1;
	/*0008*/ UINT lpReserved2;
	/*0010*/ CHAR * pszText;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT iImage;
	/*0020*/
};

struct tagTCITEMHEADERW {
	/*0000*/ UINT mask;
	/*0004*/ UINT lpReserved1;
	/*0008*/ UINT lpReserved2;
	/*0010*/ WCHAR * pszText;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT iImage;
	/*0020*/
};

struct tagTCITEMW {
	/*0000*/ UINT mask;
	/*0004*/ ULONG dwState;
	/*0008*/ ULONG dwStateMask;
	/*0010*/ WCHAR * pszText;
	/*0018*/ INT cchTextMax;
	/*001c*/ INT iImage;
	/*0020*/ LONGLONG lParam;
	/*0028*/
};

struct tagTCKEYDOWN {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ USHORT wVKey;
	/*001a*/ UINT flags;
	/*001e*/
};

struct tagTEXTMETRICA {
	/*0000*/ LONG tmHeight;
	/*0004*/ LONG tmAscent;
	/*0008*/ LONG tmDescent;
	/*000c*/ LONG tmInternalLeading;
	/*0010*/ LONG tmExternalLeading;
	/*0014*/ LONG tmAveCharWidth;
	/*0018*/ LONG tmMaxCharWidth;
	/*001c*/ LONG tmWeight;
	/*0020*/ LONG tmOverhang;
	/*0024*/ LONG tmDigitizedAspectX;
	/*0028*/ LONG tmDigitizedAspectY;
	/*002c*/ UCHAR tmFirstChar;
	/*002d*/ UCHAR tmLastChar;
	/*002e*/ UCHAR tmDefaultChar;
	/*002f*/ UCHAR tmBreakChar;
	/*0030*/ UCHAR tmItalic;
	/*0031*/ UCHAR tmUnderlined;
	/*0032*/ UCHAR tmStruckOut;
	/*0033*/ UCHAR tmPitchAndFamily;
	/*0034*/ UCHAR tmCharSet;
	/*0038*/
};

struct tagTEXTMETRICW {
	/*0000*/ LONG tmHeight;
	/*0004*/ LONG tmAscent;
	/*0008*/ LONG tmDescent;
	/*000c*/ LONG tmInternalLeading;
	/*0010*/ LONG tmExternalLeading;
	/*0014*/ LONG tmAveCharWidth;
	/*0018*/ LONG tmMaxCharWidth;
	/*001c*/ LONG tmWeight;
	/*0020*/ LONG tmOverhang;
	/*0024*/ LONG tmDigitizedAspectX;
	/*0028*/ LONG tmDigitizedAspectY;
	/*002c*/ WCHAR tmFirstChar;
	/*002e*/ WCHAR tmLastChar;
	/*0030*/ WCHAR tmDefaultChar;
	/*0032*/ WCHAR tmBreakChar;
	/*0034*/ UCHAR tmItalic;
	/*0035*/ UCHAR tmUnderlined;
	/*0036*/ UCHAR tmStruckOut;
	/*0037*/ UCHAR tmPitchAndFamily;
	/*0038*/ UCHAR tmCharSet;
	/*003c*/
};

struct tagTITLEBARINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcTitleBar;
	/*0014*/ ULONG rgstate[0x6];
	/*002c*/
};

struct tagTITLEBARINFOEX {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcTitleBar;
	/*0014*/ ULONG rgstate[0x6];
	/*002c*/ tagRECT rgrect[0x6];
	/*008c*/
};

enum tagTLG_AGGREGATE_OPTIONS {
	TlgAggregateOptionFlushNone = 0x0,
	TlgAggregateOptionFlushNormal = 0x1,
	TlgAggregateOptionFlushHigh = 0x2,
	TlgAggregateOptionFlushInvalid = 0x3,
	TlgAggregateOptionFlushMask = 0xf,
	TlgAggregateOptionPaged = 0x8000
};

struct tagTLIBATTR {
	/*0000*/ _GUID guid;
	/*0010*/ ULONG lcid;
	/*0014*/ tagSYSKIND syskind;
	/*0018*/ USHORT wMajorVerNum;
	/*001a*/ USHORT wMinorVerNum;
	/*001c*/ USHORT wLibFlags;
	/*0020*/
};

struct tagTOGGLEKEYS {
	/*0000*/ UINT cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/
};

struct tagTOOLINFOA {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT uFlags;
	/*0008*/ HWND__ * hwnd;
	/*0010*/ ULONGLONG uId;
	/*0018*/ tagRECT rect;
	/*0028*/ HINSTANCE__ * hinst;
	/*0030*/ CHAR * lpszText;
	/*0038*/ LONGLONG lParam;
	/*0040*/ void * lpReserved;
	/*0048*/
};

struct tagTOOLINFOW {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT uFlags;
	/*0008*/ HWND__ * hwnd;
	/*0010*/ ULONGLONG uId;
	/*0018*/ tagRECT rect;
	/*0028*/ HINSTANCE__ * hinst;
	/*0030*/ WCHAR * lpszText;
	/*0038*/ LONGLONG lParam;
	/*0040*/ void * lpReserved;
	/*0048*/
};

struct tagTOUCHINPUT {
	/*0000*/ LONG x;
	/*0004*/ LONG y;
	/*0008*/ void * hSource;
	/*0010*/ ULONG dwID;
	/*0014*/ ULONG dwFlags;
	/*0018*/ ULONG dwMask;
	/*001c*/ ULONG dwTime;
	/*0020*/ ULONGLONG dwExtraInfo;
	/*0028*/ ULONG cxContact;
	/*002c*/ ULONG cyContact;
	/*0030*/
};

struct tagTOUCH_HIT_TESTING_INPUT {
	/*0000*/ UINT pointerId;
	/*0004*/ tagPOINT point;
	/*000c*/ tagRECT boundingBox;
	/*001c*/ tagRECT nonOccludedBoundingBox;
	/*002c*/ UINT orientation;
	/*0030*/
};

struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION {
	/*0000*/ USHORT score;
	/*0004*/ tagPOINT adjustedPoint;
	/*000c*/
};

struct tagTPMPARAMS {
	/*0000*/ UINT cbSize;
	/*0004*/ tagRECT rcExclude;
	/*0014*/
};

struct tagTRACKMOUSEEVENT {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwFlags;
	/*0008*/ HWND__ * hwndTrack;
	/*0010*/ ULONG dwHoverTime;
	/*0018*/
};

struct tagTRBTHUMBPOSCHANGING {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ ULONG dwPos;
	/*001c*/ INT nReason;
	/*0020*/
};

struct tagTTPOLYCURVE {
	/*0000*/ USHORT wType;
	/*0002*/ USHORT cpfx;
	/*0004*/ tagPOINTFX apfx[0x1];
	/*000c*/
};

struct tagTTPOLYGONHEADER {
	/*0000*/ ULONG cb;
	/*0004*/ ULONG dwType;
	/*0008*/ tagPOINTFX pfxStart;
	/*0010*/
};

struct tagTVDISPINFOA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagTVITEMA item;
	/*0050*/
};

struct tagTVDISPINFOEXA {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagTVITEMEXA item;
	/*0068*/
};

struct tagTVDISPINFOEXW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagTVITEMEXW item;
	/*0068*/
};

struct tagTVDISPINFOW {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ tagTVITEMW item;
	/*0050*/
};

struct tagTVGETITEMPARTRECTINFO {
	/*0000*/ _TREEITEM * hti;
	/*0008*/ tagRECT * prc;
	/*0010*/ _TVITEMPART partID;
	/*0018*/
};

struct tagTVHITTESTINFO {
	/*0000*/ tagPOINT pt;
	/*0008*/ UINT flags;
	/*0010*/ _TREEITEM * hItem;
	/*0018*/
};

struct tagTVINSERTSTRUCTA {
	/*0000*/ _TREEITEM * hParent;
	/*0008*/ _TREEITEM * hInsertAfter;
	/*0010*/ tagTVITEMEXA itemex;
	/*0010*/ tagTVITEMA item;
	/*0060*/
};

struct tagTVINSERTSTRUCTW {
	/*0000*/ _TREEITEM * hParent;
	/*0008*/ _TREEITEM * hInsertAfter;
	/*0010*/ tagTVITEMEXW itemex;
	/*0010*/ tagTVITEMW item;
	/*0060*/
};

struct tagTVITEMA {
	/*0000*/ UINT mask;
	/*0008*/ _TREEITEM * hItem;
	/*0010*/ UINT state;
	/*0014*/ UINT stateMask;
	/*0018*/ CHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0024*/ INT iImage;
	/*0028*/ INT iSelectedImage;
	/*002c*/ INT cChildren;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagTVITEMCHANGE {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ UINT uChanged;
	/*0020*/ _TREEITEM * hItem;
	/*0028*/ UINT uStateNew;
	/*002c*/ UINT uStateOld;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagTVITEMEXA {
	/*0000*/ UINT mask;
	/*0008*/ _TREEITEM * hItem;
	/*0010*/ UINT state;
	/*0014*/ UINT stateMask;
	/*0018*/ CHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0024*/ INT iImage;
	/*0028*/ INT iSelectedImage;
	/*002c*/ INT cChildren;
	/*0030*/ LONGLONG lParam;
	/*0038*/ INT iIntegral;
	/*003c*/ UINT uStateEx;
	/*0040*/ HWND__ * hwnd;
	/*0048*/ INT iExpandedImage;
	/*004c*/ INT iReserved;
	/*0050*/
};

struct tagTVITEMEXW {
	/*0000*/ UINT mask;
	/*0008*/ _TREEITEM * hItem;
	/*0010*/ UINT state;
	/*0014*/ UINT stateMask;
	/*0018*/ WCHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0024*/ INT iImage;
	/*0028*/ INT iSelectedImage;
	/*002c*/ INT cChildren;
	/*0030*/ LONGLONG lParam;
	/*0038*/ INT iIntegral;
	/*003c*/ UINT uStateEx;
	/*0040*/ HWND__ * hwnd;
	/*0048*/ INT iExpandedImage;
	/*004c*/ INT iReserved;
	/*0050*/
};

struct tagTVITEMW {
	/*0000*/ UINT mask;
	/*0008*/ _TREEITEM * hItem;
	/*0010*/ UINT state;
	/*0014*/ UINT stateMask;
	/*0018*/ WCHAR * pszText;
	/*0020*/ INT cchTextMax;
	/*0024*/ INT iImage;
	/*0028*/ INT iSelectedImage;
	/*002c*/ INT cChildren;
	/*0030*/ LONGLONG lParam;
	/*0038*/
};

struct tagTVKEYDOWN {
	/*0000*/ tagNMHDR hdr;
	/*0018*/ USHORT wVKey;
	/*001a*/ UINT flags;
	/*001e*/
};

struct tagTVSORTCB {
	/*0000*/ _TREEITEM * hParent;
	/*0008*/ INT (* lpfnCompare)( LONGLONG , LONGLONG , LONGLONG );
	/*0010*/ LONGLONG lParam;
	/*0018*/
};

enum tagTYMED {
	TYMED_HGLOBAL = 0x1,
	TYMED_FILE = 0x2,
	TYMED_ISTREAM = 0x4,
	TYMED_ISTORAGE = 0x8,
	TYMED_GDI = 0x10,
	TYMED_MFPICT = 0x20,
	TYMED_ENHMF = 0x40,
	TYMED_NULL = 0x0
};

struct tagTYPEATTR {
	/*0000*/ _GUID guid;
	/*0010*/ ULONG lcid;
	/*0014*/ ULONG dwReserved;
	/*0018*/ LONG memidConstructor;
	/*001c*/ LONG memidDestructor;
	/*0020*/ WCHAR * lpstrSchema;
	/*0028*/ ULONG cbSizeInstance;
	/*002c*/ tagTYPEKIND typekind;
	/*0030*/ USHORT cFuncs;
	/*0032*/ USHORT cVars;
	/*0034*/ USHORT cImplTypes;
	/*0036*/ USHORT cbSizeVft;
	/*0038*/ USHORT cbAlignment;
	/*003a*/ USHORT wTypeFlags;
	/*003c*/ USHORT wMajorVerNum;
	/*003e*/ USHORT wMinorVerNum;
	/*0040*/ tagTYPEDESC tdescAlias;
	/*0050*/ tagIDLDESC idldescType;
	/*0060*/
};

struct tagTYPEDESC {
	/*0000*/ tagTYPEDESC * lptdesc;
	/*0000*/ tagARRAYDESC * lpadesc;
	/*0000*/ ULONG hreftype;
	/*0008*/ USHORT vt;
	/*0010*/
};

enum tagTYPEFLAGS {
	TYPEFLAG_FAPPOBJECT = 0x1,
	TYPEFLAG_FCANCREATE = 0x2,
	TYPEFLAG_FLICENSED = 0x4,
	TYPEFLAG_FPREDECLID = 0x8,
	TYPEFLAG_FHIDDEN = 0x10,
	TYPEFLAG_FCONTROL = 0x20,
	TYPEFLAG_FDUAL = 0x40,
	TYPEFLAG_FNONEXTENSIBLE = 0x80,
	TYPEFLAG_FOLEAUTOMATION = 0x100,
	TYPEFLAG_FRESTRICTED = 0x200,
	TYPEFLAG_FAGGREGATABLE = 0x400,
	TYPEFLAG_FREPLACEABLE = 0x800,
	TYPEFLAG_FDISPATCHABLE = 0x1000,
	TYPEFLAG_FREVERSEBIND = 0x2000,
	TYPEFLAG_FPROXY = 0x4000
};

enum tagTYPEKIND {
	TKIND_ENUM = 0x0,
	TKIND_RECORD = 0x1,
	TKIND_MODULE = 0x2,
	TKIND_INTERFACE = 0x3,
	TKIND_DISPATCH = 0x4,
	TKIND_COCLASS = 0x5,
	TKIND_ALIAS = 0x6,
	TKIND_UNION = 0x7,
	TKIND_MAX = 0x8
};

enum tagTYSPEC {
	TYSPEC_CLSID = 0x0,
	TYSPEC_FILEEXT = 0x1,
	TYSPEC_MIMETYPE = 0x2,
	TYSPEC_FILENAME = 0x3,
	TYSPEC_PROGID = 0x4,
	TYSPEC_PACKAGENAME = 0x5,
	TYSPEC_OBJECTID = 0x6
};

struct tagTouchPredictionParameters {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT dwLatency;
	/*0008*/ UINT dwSampleTime;
	/*000c*/ UINT bUseHWTimeStamp;
	/*0010*/
};

enum tagUAEVENT {
	UAE_LAUNCH = 0x0,
	UAE_SWITCH = 0x1,
	UAE_TIME = 0x2,
	UAE_SESSION = 0x3,
	UAE_EXCLUDEAPP = 0x4
};

enum tagUASFLAGS {
	UAS_NORMAL = 0x0,
	UAS_BLOCKED = 0x1,
	UAS_NOPARENTENABLE = 0x2,
	UAS_MASK = 0x3
};

struct tagUPDATELAYEREDWINDOWINFO {
	/*0000*/ ULONG cbSize;
	/*0008*/ HDC__ * hdcDst;
	/*0010*/ tagPOINT const * pptDst;
	/*0018*/ tagSIZE const * psize;
	/*0020*/ HDC__ * hdcSrc;
	/*0028*/ tagPOINT const * pptSrc;
	/*0030*/ ULONG crKey;
	/*0038*/ _BLENDFUNCTION const * pblend;
	/*0040*/ ULONG dwFlags;
	/*0048*/ tagRECT const * prcDirty;
	/*0050*/
};

enum tagURLTEMPLATE {
	URLTEMPLATE_CUSTOM = 0x0,
	URLTEMPLATE_PREDEFINED_MIN = 0x10000,
	URLTEMPLATE_LOW = 0x10000,
	URLTEMPLATE_MEDLOW = 0x10500,
	URLTEMPLATE_MEDIUM = 0x11000,
	URLTEMPLATE_MEDHIGH = 0x11500,
	URLTEMPLATE_HIGH = 0x12000,
	URLTEMPLATE_PREDEFINED_MAX = 0x20000
};

enum tagURLZONE {
	URLZONE_INVALID = 0xffffffff,
	URLZONE_PREDEFINED_MIN = 0x0,
	URLZONE_LOCAL_MACHINE = 0x0,
	URLZONE_INTRANET = 0x1,
	URLZONE_TRUSTED = 0x2,
	URLZONE_INTERNET = 0x3,
	URLZONE_UNTRUSTED = 0x4,
	URLZONE_PREDEFINED_MAX = 0x3e7,
	URLZONE_USER_MIN = 0x3e8,
	URLZONE_USER_MAX = 0x2710
};

struct tagUSAGE_PROPERTIES {
	/*0000*/ USHORT level;
	/*0002*/ USHORT page;
	/*0004*/ USHORT usage;
	/*0008*/ INT logicalMinimum;
	/*000c*/ INT logicalMaximum;
	/*0010*/ USHORT unit;
	/*0012*/ USHORT exponent;
	/*0014*/ UCHAR count;
	/*0018*/ INT physicalMinimum;
	/*001c*/ INT physicalMaximum;
	/*0020*/
};

enum tagUSERCLASSTYPE {
	USERCLASSTYPE_FULL = 0x1,
	USERCLASSTYPE_SHORT = 0x2,
	USERCLASSTYPE_APPNAME = 0x3
};

struct tagUSEROBJECTFLAGS {
	/*0000*/ INT fInherit;
	/*0004*/ INT fReserved;
	/*0008*/ ULONG dwFlags;
	/*000c*/
};

struct tagVARDESC {
	/*0000*/ LONG memid;
	/*0008*/ WCHAR * lpstrSchema;
	/*0010*/ ULONG oInst;
	/*0010*/ tagVARIANT * lpvarValue;
	/*0018*/ tagELEMDESC elemdescVar;
	/*0038*/ USHORT wVarFlags;
	/*003c*/ tagVARKIND varkind;
	/*0040*/
};

enum tagVARFLAGS {
	VARFLAG_FREADONLY = 0x1,
	VARFLAG_FSOURCE = 0x2,
	VARFLAG_FBINDABLE = 0x4,
	VARFLAG_FREQUESTEDIT = 0x8,
	VARFLAG_FDISPLAYBIND = 0x10,
	VARFLAG_FDEFAULTBIND = 0x20,
	VARFLAG_FHIDDEN = 0x40,
	VARFLAG_FRESTRICTED = 0x80,
	VARFLAG_FDEFAULTCOLLELEM = 0x100,
	VARFLAG_FUIDEFAULT = 0x200,
	VARFLAG_FNONBROWSABLE = 0x400,
	VARFLAG_FREPLACEABLE = 0x800,
	VARFLAG_FIMMEDIATEBIND = 0x1000
};

struct tagVARIANT {
	/*0000*/ USHORT vt;
	/*0002*/ USHORT wReserved1;
	/*0004*/ USHORT wReserved2;
	/*0006*/ USHORT wReserved3;
	/*0008*/ LONGLONG llVal;
	/*0008*/ LONG lVal;
	/*0008*/ UCHAR bVal;
	/*0008*/ SHORT iVal;
	/*0008*/ float fltVal;
	/*0008*/ double dblVal;
	/*0008*/ SHORT boolVal;
	/*0008*/ SHORT __OBSOLETE__VARIANT_BOOL;
	/*0008*/ LONG scode;
	/*0008*/ tagCY cyVal;
	/*0008*/ double date;
	/*0008*/ WCHAR * bstrVal;
	/*0008*/ IUnknown * punkVal;
	/*0008*/ IDispatch * pdispVal;
	/*0008*/ tagSAFEARRAY * parray;
	/*0008*/ UCHAR * pbVal;
	/*0008*/ SHORT * piVal;
	/*0008*/ LONG * plVal;
	/*0008*/ LONGLONG * pllVal;
	/*0008*/ float * pfltVal;
	/*0008*/ double * pdblVal;
	/*0008*/ SHORT * pboolVal;
	/*0008*/ SHORT * __OBSOLETE__VARIANT_PBOOL;
	/*0008*/ LONG * pscode;
	/*0008*/ tagCY * pcyVal;
	/*0008*/ double * pdate;
	/*0008*/ WCHAR * * pbstrVal;
	/*0008*/ IUnknown * * ppunkVal;
	/*0008*/ IDispatch * * ppdispVal;
	/*0008*/ tagSAFEARRAY * * pparray;
	/*0008*/ tagVARIANT * pvarVal;
	/*0008*/ void * byref;
	/*0008*/ CHAR cVal;
	/*0008*/ USHORT uiVal;
	/*0008*/ ULONG ulVal;
	/*0008*/ ULONGLONG ullVal;
	/*0008*/ INT intVal;
	/*0008*/ UINT uintVal;
	/*0008*/ tagDEC * pdecVal;
	/*0008*/ CHAR * pcVal;
	/*0008*/ WCHAR * puiVal;
	/*0008*/ ULONG * pulVal;
	/*0008*/ ULONGLONG * pullVal;
	/*0008*/ INT * pintVal;
	/*0008*/ UINT * puintVal;
	/*0008*/ void * pvRecord;
	/*0010*/ IRecordInfo * pRecInfo;
	/*0000*/ tagDEC decVal;
	/*0018*/
};

enum tagVARKIND {
	VAR_PERINSTANCE = 0x0,
	VAR_STATIC = 0x1,
	VAR_CONST = 0x2,
	VAR_DISPATCH = 0x3
};

enum tagVIEWSTATUS {
	VIEWSTATUS_OPAQUE = 0x1,
	VIEWSTATUS_SOLIDBKGND = 0x2,
	VIEWSTATUS_DVASPECTOPAQUE = 0x4,
	VIEWSTATUS_DVASPECTTRANSPARENT = 0x8,
	VIEWSTATUS_SURFACE = 0x10,
	VIEWSTATUS_3DSURFACE = 0x20
};

struct tagVS_FIXEDFILEINFO {
	/*0000*/ ULONG dwSignature;
	/*0004*/ ULONG dwStrucVersion;
	/*0008*/ ULONG dwFileVersionMS;
	/*000c*/ ULONG dwFileVersionLS;
	/*0010*/ ULONG dwProductVersionMS;
	/*0014*/ ULONG dwProductVersionLS;
	/*0018*/ ULONG dwFileFlagsMask;
	/*001c*/ ULONG dwFileFlags;
	/*0020*/ ULONG dwFileOS;
	/*0024*/ ULONG dwFileType;
	/*0028*/ ULONG dwFileSubtype;
	/*002c*/ ULONG dwFileDateMS;
	/*0030*/ ULONG dwFileDateLS;
	/*0034*/
};

struct tagVersionedStream {
	/*0000*/ _GUID guidVersion;
	/*0010*/ IStream * pStream;
	/*0018*/
};

struct tagWCRANGE {
	/*0000*/ WCHAR wcLow;
	/*0002*/ USHORT cGlyphs;
	/*0004*/
};

struct tagWINDOWINFO {
	/*0000*/ ULONG cbSize;
	/*0004*/ tagRECT rcWindow;
	/*0014*/ tagRECT rcClient;
	/*0024*/ ULONG dwStyle;
	/*0028*/ ULONG dwExStyle;
	/*002c*/ ULONG dwWindowStatus;
	/*0030*/ UINT cxWindowBorders;
	/*0034*/ UINT cyWindowBorders;
	/*0038*/ USHORT atomWindowType;
	/*003a*/ USHORT wCreatorVersion;
	/*003c*/
};

struct tagWINDOWPLACEMENT {
	/*0000*/ UINT length;
	/*0004*/ UINT flags;
	/*0008*/ UINT showCmd;
	/*000c*/ tagPOINT ptMinPosition;
	/*0014*/ tagPOINT ptMaxPosition;
	/*001c*/ tagRECT rcNormalPosition;
	/*002c*/
};

struct tagWINDOWPOS {
	/*0000*/ HWND__ * hwnd;
	/*0008*/ HWND__ * hwndInsertAfter;
	/*0010*/ INT x;
	/*0014*/ INT y;
	/*0018*/ INT cx;
	/*001c*/ INT cy;
	/*0020*/ UINT flags;
	/*0028*/
};

struct tagWNDCLASSA {
	/*0000*/ UINT style;
	/*0008*/ LONGLONG (* lpfnWndProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0010*/ INT cbClsExtra;
	/*0014*/ INT cbWndExtra;
	/*0018*/ HINSTANCE__ * hInstance;
	/*0020*/ HICON__ * hIcon;
	/*0028*/ HICON__ * hCursor;
	/*0030*/ HBRUSH__ * hbrBackground;
	/*0038*/ CHAR const * lpszMenuName;
	/*0040*/ CHAR const * lpszClassName;
	/*0048*/
};

struct tagWNDCLASSEXA {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT style;
	/*0008*/ LONGLONG (* lpfnWndProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0010*/ INT cbClsExtra;
	/*0014*/ INT cbWndExtra;
	/*0018*/ HINSTANCE__ * hInstance;
	/*0020*/ HICON__ * hIcon;
	/*0028*/ HICON__ * hCursor;
	/*0030*/ HBRUSH__ * hbrBackground;
	/*0038*/ CHAR const * lpszMenuName;
	/*0040*/ CHAR const * lpszClassName;
	/*0048*/ HICON__ * hIconSm;
	/*0050*/
};

struct tagWNDCLASSEXW {
	/*0000*/ UINT cbSize;
	/*0004*/ UINT style;
	/*0008*/ LONGLONG (* lpfnWndProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0010*/ INT cbClsExtra;
	/*0014*/ INT cbWndExtra;
	/*0018*/ HINSTANCE__ * hInstance;
	/*0020*/ HICON__ * hIcon;
	/*0028*/ HICON__ * hCursor;
	/*0030*/ HBRUSH__ * hbrBackground;
	/*0038*/ WCHAR const * lpszMenuName;
	/*0040*/ WCHAR const * lpszClassName;
	/*0048*/ HICON__ * hIconSm;
	/*0050*/
};

struct tagWNDCLASSW {
	/*0000*/ UINT style;
	/*0008*/ LONGLONG (* lpfnWndProc)( HWND__ * , UINT , ULONGLONG , LONGLONG );
	/*0010*/ INT cbClsExtra;
	/*0014*/ INT cbWndExtra;
	/*0018*/ HINSTANCE__ * hInstance;
	/*0020*/ HICON__ * hIcon;
	/*0028*/ HICON__ * hCursor;
	/*0030*/ HBRUSH__ * hbrBackground;
	/*0038*/ WCHAR const * lpszMenuName;
	/*0040*/ WCHAR const * lpszClassName;
	/*0048*/
};

struct tagWNODE_ALL_DATA {
	/*0000*/ _WNODE_HEADER WnodeHeader;
	/*0030*/ ULONG DataBlockOffset;
	/*0034*/ ULONG InstanceCount;
	/*0038*/ ULONG OffsetInstanceNameOffsets;
	/*003c*/ ULONG FixedInstanceSize;
	/*003c*/ OFFSETINSTANCEDATAANDLENGTH OffsetInstanceDataAndLength[];
	/*0048*/
};

struct tagWNODE_EVENT_ITEM {
	/*0000*/ _WNODE_HEADER WnodeHeader;
	/*0030*/
};

struct tagWNODE_EVENT_REFERENCE {
	/*0000*/ _WNODE_HEADER WnodeHeader;
	/*0030*/ _GUID TargetGuid;
	/*0040*/ ULONG TargetDataBlockSize;
	/*0044*/ ULONG TargetInstanceIndex;
	/*0044*/ WCHAR TargetInstanceName[];
	/*0048*/
};

struct tagWNODE_METHOD_ITEM {
	/*0000*/ _WNODE_HEADER WnodeHeader;
	/*0030*/ ULONG OffsetInstanceName;
	/*0034*/ ULONG InstanceIndex;
	/*0038*/ ULONG MethodId;
	/*003c*/ ULONG DataBlockOffset;
	/*0040*/ ULONG SizeDataBlock;
	/*0044*/ UCHAR VariableData[];
	/*0048*/
};

struct tagWNODE_SINGLE_INSTANCE {
	/*0000*/ _WNODE_HEADER WnodeHeader;
	/*0030*/ ULONG OffsetInstanceName;
	/*0034*/ ULONG InstanceIndex;
	/*0038*/ ULONG DataBlockOffset;
	/*003c*/ ULONG SizeDataBlock;
	/*0040*/ UCHAR VariableData[];
	/*0040*/
};

struct tagWNODE_SINGLE_ITEM {
	/*0000*/ _WNODE_HEADER WnodeHeader;
	/*0030*/ ULONG OffsetInstanceName;
	/*0034*/ ULONG InstanceIndex;
	/*0038*/ ULONG ItemId;
	/*003c*/ ULONG DataBlockOffset;
	/*0040*/ ULONG SizeDataItem;
	/*0044*/ UCHAR VariableData[];
	/*0048*/
};

struct tagWNODE_TOO_SMALL {
	/*0000*/ _WNODE_HEADER WnodeHeader;
	/*0030*/ ULONG SizeNeeded;
	/*0038*/
};

struct tagWPP_BINARY {
	/*0000*/ void const * Buffer;
	/*0008*/ USHORT Length;
	/*0010*/
};

struct tagWTSSESSION_NOTIFICATION {
	/*0000*/ ULONG cbSize;
	/*0004*/ ULONG dwSessionId;
	/*0008*/
};

struct tagXFORM {
	/*0000*/ float eM11;
	/*0004*/ float eM12;
	/*0008*/ float eM21;
	/*000c*/ float eM22;
	/*0010*/ float eDx;
	/*0014*/ float eDy;
	/*0018*/
};

enum tagXFORMCOORDS {
	XFORMCOORDS_POSITION = 0x1,
	XFORMCOORDS_SIZE = 0x2,
	XFORMCOORDS_HIMETRICTOCONTAINER = 0x4,
	XFORMCOORDS_CONTAINERTOHIMETRIC = 0x8,
	XFORMCOORDS_EVENTCOMPAT = 0x10
};

struct tagXHR_CERT {
	/*0000*/ ULONG cbCert;
	/*0008*/ UCHAR * pbCert;
	/*0010*/
};

struct tagXHR_COOKIE {
	/*0000*/ WCHAR * pwszUrl;
	/*0008*/ WCHAR * pwszName;
	/*0010*/ WCHAR * pwszValue;
	/*0018*/ WCHAR * pwszP3PPolicy;
	/*0020*/ _FILETIME ftExpires;
	/*0028*/ ULONG dwFlags;
	/*0030*/
};

enum tagXMLEMEM_TYPE {
	XMLELEMTYPE_ELEMENT = 0x0,
	XMLELEMTYPE_TEXT = 0x1,
	XMLELEMTYPE_COMMENT = 0x2,
	XMLELEMTYPE_DOCUMENT = 0x3,
	XMLELEMTYPE_DTD = 0x4,
	XMLELEMTYPE_PI = 0x5,
	XMLELEMTYPE_OTHER = 0x6
};

struct tag_BSSIDData {
	/*0000*/ _DOT11_BSS_TYPE dot11BssType;
	/*0004*/ UCHAR dot11Bssid[0x6];
	/*000c*/
};

struct tag_JET_COLUMNCREATE_A {
	/*0000*/ ULONG cbStruct;
	/*0008*/ CHAR * szColumnName;
	/*0010*/ ULONG coltyp;
	/*0014*/ ULONG cbMax;
	/*0018*/ ULONG grbit;
	/*0020*/ void * pvDefault;
	/*0028*/ ULONG cbDefault;
	/*002c*/ ULONG cp;
	/*0030*/ ULONG columnid;
	/*0034*/ LONG err;
	/*0038*/
};

struct tag_JET_COLUMNCREATE_W {
	/*0000*/ ULONG cbStruct;
	/*0008*/ WCHAR * szColumnName;
	/*0010*/ ULONG coltyp;
	/*0014*/ ULONG cbMax;
	/*0018*/ ULONG grbit;
	/*0020*/ void * pvDefault;
	/*0028*/ ULONG cbDefault;
	/*002c*/ ULONG cp;
	/*0030*/ ULONG columnid;
	/*0034*/ LONG err;
	/*0038*/
};

struct tag_JET_USERDEFINEDDEFAULT_A {
	/*0000*/ CHAR * szCallback;
	/*0008*/ UCHAR * pbUserData;
	/*0010*/ ULONG cbUserData;
	/*0018*/ CHAR * szDependantColumns;
	/*0020*/
};

struct tag_JET_USERDEFINEDDEFAULT_W {
	/*0000*/ WCHAR * szCallback;
	/*0008*/ UCHAR * pbUserData;
	/*0010*/ ULONG cbUserData;
	/*0018*/ WCHAR * szDependantColumns;
	/*0020*/
};

struct tag_LANId {
	/*0000*/ ULONG dwSize;
	/*0004*/ _GUID NetworkAdapterId;
	/*0014*/ tag_LANIdDataType Type;
	/*0018*/ tag_BSSIDData BSSIdData;
	/*0018*/ tag_LLDPData LLDPData;
	/*0428*/
};

struct tag_LANIdCollection {
	/*0000*/ ULONG NumEntries;
	/*0004*/ tag_LANId LanIds[0x1];
	/*042c*/
};

enum tag_LANIdDataType {
	LANId_Type_Unknown = 0x0,
	LANId_Type_BSSIDData = 0x1,
	LANId_Type_LLDPData = 0x2
};

struct tag_LLDPData {
	/*0000*/ tag_TLV ChassisId;
	/*0208*/ tag_TLV PortId;
	/*0410*/
};

struct tag_TLV {
	/*0000*/ ULONG type;
	/*0004*/ ULONG length;
	/*0008*/ UCHAR value[0x1fe];
	/*0208*/
};

struct tcp_reserve_port_range {
	/*0000*/ USHORT UpperRange;
	/*0002*/ USHORT LowerRange;
	/*0004*/
};

struct threadlocaleinfostruct {
	
	/*0000*/ INT refcount;
	/*0004*/ UINT lc_codepage;
	/*0008*/ UINT lc_collate_cp;
	/*000c*/ ULONG lc_handle[0x6];
	/*0024*/ tagLC_ID lc_id[0x6];
	/*0048*/ <unnamed-type-lc_category> lc_category[0x6];
	/*0108*/ INT lc_clike;
	/*010c*/ INT mb_cur_max;
	/*0110*/ INT * lconv_intl_refcount;
	/*0118*/ INT * lconv_num_refcount;
	/*0120*/ INT * lconv_mon_refcount;
	/*0128*/ lconv * lconv;
	/*0130*/ INT * ctype1_refcount;
	/*0138*/ WCHAR * ctype1;
	/*0140*/ USHORT const * pctype;
	/*0148*/ UCHAR const * pclmap;
	/*0150*/ UCHAR const * pcumap;
	/*0158*/ __lc_time_data * lc_time_curr;
	/*0160*/
};

struct threadmbcinfostruct;

struct timespec {
	/*0000*/ LONGLONG tv_sec;
	/*0008*/ LONG tv_nsec;
	/*0010*/
};

struct timeval {
	/*0000*/ LONG tv_sec;
	/*0004*/ LONG tv_usec;
	/*0008*/
};

struct tm {
	/*0000*/ INT tm_sec;
	/*0004*/ INT tm_min;
	/*0008*/ INT tm_hour;
	/*000c*/ INT tm_mday;
	/*0010*/ INT tm_mon;
	/*0014*/ INT tm_year;
	/*0018*/ INT tm_wday;
	/*001c*/ INT tm_yday;
	/*0020*/ INT tm_isdst;
	/*0024*/
};

class type_info {
public:
	void type_info( type_info const & );
	type_info & operator=( type_info const & );
	ULONGLONG hash_code() const;
	BOOLEAN operator==( type_info const & ) const;
	BOOLEAN operator!=( type_info const & ) const;
	BOOLEAN before( type_info const & ) const;
	CHAR const * name() const;
	CHAR const * raw_name() const;
	/*0000*/ virtual void ~type_info();
private:
	/*0008*/ __std_type_info_data _Data;
public:
	/*0000*/ virtual void * __vecDelDtor( UINT );
	/*0018*/
};

struct val_context {
	/*0000*/ INT valuelen;
	/*0008*/ void * value_context;
	/*0010*/ void * val_buff_ptr;
	/*0018*/
};

struct value_entA {
	/*0000*/ CHAR * ve_valuename;
	/*0008*/ ULONG ve_valuelen;
	/*0010*/ ULONGLONG ve_valueptr;
	/*0018*/ ULONG ve_type;
	/*0020*/
};

struct value_entW {
	/*0000*/ WCHAR * ve_valuename;
	/*0008*/ ULONG ve_valuelen;
	/*0010*/ ULONGLONG ve_valueptr;
	/*0018*/ ULONG ve_type;
	/*0020*/
};
