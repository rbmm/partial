; Listing generated by Microsoft (R) Optimizing Compiler Version 19.25.28508.3 

	TITLE	o:\vc\wobj\wobj.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?guz@NT@@3EC					; NT::guz
PUBLIC	??_C@_1BC@CAFEKLEP@?$AA?1?$AA?1?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@ ; `string'
PUBLIC	??_C@_1M@OAIMIKLP@?$AAn?$AAt?$AAd?$AAl?$AAl@	; `string'
PUBLIC	??_C@_1BM@POPPCGII@?$AAS?$AAy?$AAs?$AAT?$AAr?$AAe?$AAe?$AAV?$AAi?$AAe?$AAw?$AA3?$AA2@ ; `string'
PUBLIC	??_C@_1BM@FEGPDFAG@?$AAS?$AAy?$AAs?$AAL?$AAi?$AAs?$AAt?$AAV?$AAi?$AAe?$AAw?$AA3?$AA2@ ; `string'
PUBLIC	??_C@_1BC@PKEHKAEB@?$AAE?$AAx?$AAp?$AAl?$AAo?$AAr?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_1O@LHLCHBPN@?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_1O@ICFKJBIG@?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw@ ; `string'
PUBLIC	??_C@_17JJNMJOBL@?$AA?$CF?$AAw?$AAZ@		; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1BE@LAECKHMF@?$AAA?$AAl?$AAl?$AA?5?$AAT?$AAy?$AAp?$AAe?$AAs@ ; `string'
PUBLIC	??_C@_1BE@NFNOIDKJ@?$AA?5?$AAR?$AAe?$AAf?$AAr?$AAe?$AAs?$AAh?$AA?5@ ; `string'
PUBLIC	??_C@_1CK@NOFILHFD@?$AA?5?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt?$AAy?$AA?5?$AAD?$AAe?$AAs?$AAc?$AAr@ ; `string'
PUBLIC	??_C@_1BO@OJIPFLDM@?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAG?$AAr?$AAi?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1BI@FAMGBLFE@?$AA?5?$AAC?$AAo?$AAp?$AAy?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?5@ ; `string'
PUBLIC	??_C@_1CG@HAPCLPFI@?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAp@ ; `string'
PUBLIC	??_C@_19HNCGHLOK@?$AAC?$AAo?$AAp?$AAy@		; `string'
PUBLIC	??_C@_1GA@DNJFFCGD@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AA?$HL?$AA9?$AA4?$AA9?$AA3?$AAD@ ; `string'
PUBLIC	??_C@_1O@PHENOMEI@?$AAW?$AAi?$AAn?$AAO?$AAb?$AAj@ ; `string'
PUBLIC	??_C@_0FA@OPDBMAFF@?$DPgetContext?$EA?$DP$RTL_FRAME?$EAU_ZGLOB@ ; `string'
PUBLIC	?s@?1??getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@3@XZ@4U43@B ; `NT::RTL_FRAME<NT::_ZGLOBALS>::getContext'::`2'::s
PUBLIC	___security_cookie
PUBLIC	??_7ZMainWnd@NT@@6BZIdle@1@@			; NT::ZMainWnd::`vftable'
PUBLIC	??_7ZMainWnd@NT@@6BZFrameMultiWnd@1@@		; NT::ZMainWnd::`vftable'
PUBLIC	?g_btns@?1??CreateTB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z@4PAU_TBBUTTON@@A ; `NT::ZMainWnd::CreateTB'::`2'::g_btns
PUBLIC	?MainWnd@?1??getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@3@XZ@4U43@B ; `NT::ZMainWnd::getPosName'::`2'::MainWnd
PUBLIC	?__945@?1??getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@3@XZ@4QB_WB ; `NT::ZMainWnd::getPosName'::`2'::__945
PUBLIC	?id@?1???0MySplit@NT@@QAE@H@Z@4PAGA		; `NT::MySplit::MySplit'::`2'::id
PUBLIC	?Directory@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@B ; `NT::MySplit::Refresh'::`2'::Directory
PUBLIC	?oaRoot@?1??Refresh@MySplit@NT@@QAEXXZ@4U_OBJECT_ATTRIBUTES@3@A ; `NT::MySplit::Refresh'::`2'::oaRoot
PUBLIC	?m887@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@B ; `NT::MySplit::Refresh'::`2'::m887
PUBLIC	?__887@?1??Refresh@MySplit@NT@@QAEXXZ@4QB_WB	; `NT::MySplit::Refresh'::`2'::__887
PUBLIC	?__886@?1??Refresh@MySplit@NT@@QAEXXZ@4QB_WB	; `NT::MySplit::Refresh'::`2'::__886
PUBLIC	??_7MySplit@NT@@6B@				; NT::MySplit::`vftable'
PUBLIC	_g__onexit
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__RtlImageRvaToSection@12:PROC
EXTRN	__imp__RtlImageNtHeader@4:PROC
EXTRN	__imp__DestroyMenu@4:PROC
EXTRN	__imp__TrackPopupMenu@28:PROC
EXTRN	__imp__InsertMenuItemW@16:PROC
EXTRN	__imp__CreatePopupMenu@0:PROC
EXTRN	__imp__ClientToScreen@8:PROC
EXTRN	__imp__GetSystemMetrics@4:PROC
EXTRN	___ImageBase:BYTE
EXTRN	__imp__ZwOpenKeyedEvent@12:PROC
EXTRN	__imp__ZwOpenIoCompletion@12:PROC
EXTRN	__imp__ZwOpenTimer@12:PROC
EXTRN	__imp__ZwOpenMutant@12:PROC
EXTRN	__imp__ZwOpenSemaphore@12:PROC
EXTRN	__imp__ZwOpenSection@12:PROC
EXTRN	__imp__ZwOpenEvent@12:PROC
EXTRN	__imp__CloseClipboard@0:PROC
EXTRN	__imp__GlobalFree@4:PROC
EXTRN	__imp__SetClipboardData@8:PROC
EXTRN	__imp__GlobalUnlock@4:PROC
EXTRN	__imp__GlobalLock@4:PROC
EXTRN	__imp__GlobalAlloc@8:PROC
EXTRN	__imp__EmptyClipboard@0:PROC
EXTRN	__imp__OpenClipboard@4:PROC
EXTRN	__imp__ZwQuerySymbolicLinkObject@12:PROC
EXTRN	__imp__RtlInitUnicodeString@8:PROC
EXTRN	__imp__ZwOpenSymbolicLinkObject@12:PROC
EXTRN	__imp___snwprintf:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__CreateFontIndirectW@4:PROC
EXTRN	__imp__SystemParametersInfoW@16:PROC
EXTRN	__imp__RtlGetNtVersionNumbers@12:PROC
EXTRN	__imp__ImageList_Destroy@4:PROC
EXTRN	__imp__DestroyIcon@4:PROC
EXTRN	__imp__PostMessageW@16:PROC
EXTRN	__imp__SetWindowTheme@12:PROC
EXTRN	__imp__RtlEqualUnicodeString@12:PROC
EXTRN	__imp__ZwClose@4:PROC
EXTRN	__imp__ZwQueryDirectoryObject@28:PROC
EXTRN	__imp__ZwOpenDirectoryObject@12:PROC
EXTRN	__imp__RtlDuplicateUnicodeString@12:PROC
EXTRN	__imp__RtlHashUnicodeString@16:PROC
EXTRN	__imp__RtlCompareUnicodeString@12:PROC
EXTRN	__imp__ImageList_ReplaceIcon@12:PROC
EXTRN	__imp__LoadImageW@24:PROC
EXTRN	__imp__ImageList_Create@20:PROC
EXTRN	__imp__OpenWindowStationW@12:PROC
EXTRN	__imp__wcsrchr:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	__imp__GetModuleHandleW@4:PROC
EXTRN	__imp__FormatMessageW@28:PROC
EXTRN	__imp___swprintf:PROC
EXTRN	__imp__NtOpenFile@24:PROC
EXTRN	__imp__RtlGetFrame@0:PROC
EXTRN	__imp__RtlPopFrame@4:PROC
EXTRN	__imp__RtlPushFrame@4:PROC
EXTRN	__imp__RtlInterlockedPopEntrySList@4:PROC
EXTRN	__imp__RtlInterlockedPushEntrySList@8:PROC
?guz@NT@@3EC DB	01H DUP (?)				; NT::guz
	ALIGN	4

___security_cookie DD 01H DUP (?)
_g__onexit DQ	01H DUP (?)
_BSS	ENDS
CRT$XCZ	SEGMENT
___xc_z	DD	00H
CRT$XCZ	ENDS
CRT$XCA	SEGMENT
___xc_a	DD	00H
CRT$XCA	ENDS
CRT$XIA	SEGMENT
___xi_a	DD	00H
CRT$XIA	ENDS
CRT$XIZ	SEGMENT
___xi_z	DD	00H
CRT$XIZ	ENDS
;	COMDAT ??_7MySplit@NT@@6B@
CONST	SEGMENT
??_7MySplit@NT@@6B@ DD FLAT:??_EMySplit@NT@@EAEPAXI@Z	; NT::MySplit::`vftable'
	DD	FLAT:?QI@ZSplitWndV@NT@@UAEJABU_GUID@@PAPAX@Z
	DD	FLAT:?WindowProc@MySplit@NT@@EAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?DefWinProc@ZWnd@NT@@MAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?getView@ZWnd@NT@@UAEPAVZView@2@XZ
	DD	FLAT:?CanCloseFrame@ZWnd@NT@@UAEHXZ
	DD	FLAT:?CreateChild@MySplit@NT@@EAEPAUHWND__@@HPAU3@HHHH@Z
	DD	FLAT:?CreateChilds@ZSplitWndV@NT@@EAEHPAUHWND__@@@Z
	DD	FLAT:?PointInSplit@ZSplitWndV@NT@@EAEHUtagPOINT@@@Z
	DD	FLAT:?MoveChilds@ZSplitWndV@NT@@EAEXXZ
	DD	FLAT:?DrawSplit@ZSplitWndV@NT@@EAEXPAUHDC__@@@Z
	DD	FLAT:?DrawMovingSplit@ZSplitWndV@NT@@EAEXXZ
	DD	FLAT:?GetT@ZSplitWndV@NT@@EAEHJ@Z
	DD	FLAT:?GetT@ZSplitWndV@NT@@EAEHUtagPOINT@@@Z
	DD	FLAT:?GetHitCode@ZSplitWndV@NT@@EAEHXZ
CONST	ENDS
;	COMDAT ?__886@?1??Refresh@MySplit@NT@@QAEXXZ@4QB_WB
CONST	SEGMENT
?__886@?1??Refresh@MySplit@NT@@QAEXXZ@4QB_WB DB 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H
	DB	00H						; `NT::MySplit::Refresh'::`2'::__886
CONST	ENDS
;	COMDAT ?__887@?1??Refresh@MySplit@NT@@QAEXXZ@4QB_WB
CONST	SEGMENT
?__887@?1??Refresh@MySplit@NT@@QAEXXZ@4QB_WB DB '\', 00H, 00H, 00H ; `NT::MySplit::Refresh'::`2'::__887
CONST	ENDS
;	COMDAT ?m887@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@B
CONST	SEGMENT
?m887@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@B DW 02H ; `NT::MySplit::Refresh'::`2'::m887
	DW	04H
	DD	FLAT:?__887@?1??Refresh@MySplit@NT@@QAEXXZ@4QB_WB
CONST	ENDS
;	COMDAT ?oaRoot@?1??Refresh@MySplit@NT@@QAEXXZ@4U_OBJECT_ATTRIBUTES@3@A
_DATA	SEGMENT
?oaRoot@?1??Refresh@MySplit@NT@@QAEXXZ@4U_OBJECT_ATTRIBUTES@3@A DD 018H ; `NT::MySplit::Refresh'::`2'::oaRoot
	DD	00H
	DD	FLAT:?m887@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@B
	DD	040H
	ORG $+8
_DATA	ENDS
;	COMDAT ?Directory@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@B
CONST	SEGMENT
?Directory@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@B DW 012H ; `NT::MySplit::Refresh'::`2'::Directory
	DW	014H
	DD	FLAT:?__886@?1??Refresh@MySplit@NT@@QAEXXZ@4QB_WB
CONST	ENDS
;	COMDAT ?id@?1???0MySplit@NT@@QAE@H@Z@4PAGA
_DATA	SEGMENT
?id@?1???0MySplit@NT@@QAE@H@Z@4PAGA DW 012dH		; `NT::MySplit::MySplit'::`2'::id
	DW	012eH
	DW	012fH
	DW	0131H
	DW	0132H
	DW	0133H
	DW	0134H
	DW	0135H
	DW	0136H
	DW	0137H
	DW	0138H
	DW	0139H
	DW	013aH
	DW	013bH
	DW	013dH
	DW	013eH
	DW	013fH
	DW	0140H
	DW	0142H
	DW	0145H
	DW	014aH
	DW	016eH
	DW	016fH
	DW	0141H
_DATA	ENDS
;	COMDAT ?__945@?1??getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@3@XZ@4QB_WB
CONST	SEGMENT
?__945@?1??getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@3@XZ@4QB_WB DB 'M'
	DB	00H, 'a', 00H, 'i', 00H, 'n', 00H, 'W', 00H, 'n', 00H, 'd', 00H
	DB	00H, 00H					; `NT::ZMainWnd::getPosName'::`2'::__945
CONST	ENDS
;	COMDAT ?MainWnd@?1??getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@3@XZ@4U43@B
CONST	SEGMENT
?MainWnd@?1??getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@3@XZ@4U43@B DW 0eH ; `NT::ZMainWnd::getPosName'::`2'::MainWnd
	DW	010H
	DD	FLAT:?__945@?1??getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@3@XZ@4QB_WB
CONST	ENDS
;	COMDAT ?g_btns@?1??CreateTB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z@4PAU_TBBUTTON@@A
_DATA	SEGMENT
?g_btns@?1??CreateTB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z@4PAU_TBBUTTON@@A DD 01H ; `NT::ZMainWnd::CreateTB'::`2'::g_btns
	DD	066H
	DB	04H
	DB	010H
	ORG $+2
	DD	FLAT:??_C@_1BE@NFNOIDKJ@?$AA?5?$AAR?$AAe?$AAf?$AAr?$AAe?$AAs?$AAh?$AA?5@
	DD	0ffffffffH
	DD	01H
	DD	06aH
	DB	00H
	DB	010H
	ORG $+2
	DD	FLAT:??_C@_1CK@NOFILHFD@?$AA?5?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt?$AAy?$AA?5?$AAD?$AAe?$AAs?$AAc?$AAr@
	DD	0ffffffffH
	DD	01H
	DD	068H
	DB	04H
	DB	010H
	ORG $+2
	DD	FLAT:??_C@_1BO@OJIPFLDM@?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAG?$AAr?$AAi?$AAd?$AA?5@
	DD	0ffffffffH
	DD	01H
	DD	069H
	DB	00H
	DB	010H
	ORG $+2
	DD	FLAT:??_C@_1BI@FAMGBLFE@?$AA?5?$AAC?$AAo?$AAp?$AAy?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?5@
	DD	0ffffffffH
	DD	01H
	DD	067H
	DB	00H
	DB	010H
	ORG $+2
	DD	FLAT:??_C@_1CG@HAPCLPFI@?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAp@
	DD	0ffffffffH
_DATA	ENDS
;	COMDAT ??_7ZMainWnd@NT@@6BZFrameMultiWnd@1@@
CONST	SEGMENT
??_7ZMainWnd@NT@@6BZFrameMultiWnd@1@@ DD FLAT:??_EZMainWnd@NT@@UAEPAXI@Z ; NT::ZMainWnd::`vftable'
	DD	FLAT:?QI@ZSDIFrameWnd@NT@@UAEJABU_GUID@@PAPAX@Z
	DD	FLAT:?WindowProc@ZMainWnd@NT@@EAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?DefWinProc@ZWnd@NT@@MAEJPAUHWND__@@IIJ@Z
	DD	FLAT:?getView@ZFrameWnd@NT@@UAEPAVZView@2@XZ
	DD	FLAT:?CanCloseFrame@ZWnd@NT@@UAEHXZ
	DD	FLAT:?CreateView@ZFrameMultiWnd@NT@@MAEPAUHWND__@@PAU3@HHPAX@Z
	DD	FLAT:?DoResize@ZFrameMultiWnd@NT@@MAEXIJ@Z
	DD	FLAT:?getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@2@XZ
	DD	FLAT:?CanClose@ZFrameWnd@NT@@MAEHXZ
	DD	FLAT:?CreateClient@ZSDIFrameWnd@NT@@EAEHPAUHWND__@@HHPAX@Z
	DD	FLAT:?CreateClient@ZMainWnd@NT@@EAEHPAUHWND__@@HHHH@Z
	DD	FLAT:?OnNotify@ZSDIFrameWnd@NT@@MAEJPAUtagNMHDR@@@Z
	DD	FLAT:?CreateSB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z
	DD	FLAT:?CreateTB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z
	DD	FLAT:?getDocumentCmdId@ZSDIFrameWnd@NT@@MAEKPAPBG@Z
CONST	ENDS
;	COMDAT ??_7ZMainWnd@NT@@6BZIdle@1@@
CONST	SEGMENT
??_7ZMainWnd@NT@@6BZIdle@1@@ DD FLAT:?OnIdle@ZSDIFrameWnd@NT@@MAEXXZ ; NT::ZMainWnd::`vftable'
CONST	ENDS
;	COMDAT ?s@?1??getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@3@XZ@4U43@B
CONST	SEGMENT
?s@?1??getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@3@XZ@4U43@B DD 00H ; `NT::RTL_FRAME<NT::_ZGLOBALS>::getContext'::`2'::s
	DD	FLAT:??_C@_0FA@OPDBMAFF@?$DPgetContext?$EA?$DP$RTL_FRAME?$EAU_ZGLOB@
CONST	ENDS
;	COMDAT ??_C@_0FA@OPDBMAFF@?$DPgetContext?$EA?$DP$RTL_FRAME?$EAU_ZGLOB@
CONST	SEGMENT
??_C@_0FA@OPDBMAFF@?$DPgetContext?$EA?$DP$RTL_FRAME?$EAU_ZGLOB@ DB '?getC'
	DB	'ontext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME'
	DB	'_CONTEXT@2@XZ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@PHENOMEI@?$AAW?$AAi?$AAn?$AAO?$AAb?$AAj@
CONST	SEGMENT
??_C@_1O@PHENOMEI@?$AAW?$AAi?$AAn?$AAO?$AAb?$AAj@ DB 'W', 00H, 'i', 00H, 'n'
	DB	00H, 'O', 00H, 'b', 00H, 'j', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@DNJFFCGD@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AA?$HL?$AA9?$AA4?$AA9?$AA3?$AAD@
CONST	SEGMENT
??_C@_1GA@DNJFFCGD@?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AA?2?$AA?$HL?$AA9?$AA4?$AA9?$AA3?$AAD@ DB 'S'
	DB	00H, 'o', 00H, 'f', 00H, 't', 00H, 'w', 00H, 'a', 00H, 'r', 00H
	DB	'e', 00H, '\', 00H, '{', 00H, '9', 00H, '4', 00H, '9', 00H, '3'
	DB	00H, 'D', 00H, '1', 00H, '0', 00H, '8', 00H, '-', 00H, '6', 00H
	DB	'D', 00H, '2', 00H, 'D', 00H, '-', 00H, '4', 00H, 'e', 00H, '2'
	DB	00H, '9', 00H, '-', 00H, '9', 00H, '7', 00H, '0', 00H, '1', 00H
	DB	'-', 00H, '0', 00H, 'A', 00H, '6', 00H, 'E', 00H, '3', 00H, '5'
	DB	00H, '1', 00H, '2', 00H, '5', 00H, 'D', 00H, 'A', 00H, 'C', 00H
	DB	'}', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19HNCGHLOK@?$AAC?$AAo?$AAp?$AAy@
CONST	SEGMENT
??_C@_19HNCGHLOK@?$AAC?$AAo?$AAp?$AAy@ DB 'C', 00H, 'o', 00H, 'p', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@HAPCLPFI@?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAp@
CONST	SEGMENT
??_C@_1CG@HAPCLPFI@?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAF?$AAu?$AAl?$AAl?$AA?5?$AAp@ DB ' '
	DB	00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'F', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' '
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@FAMGBLFE@?$AA?5?$AAC?$AAo?$AAp?$AAy?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1BI@FAMGBLFE@?$AA?5?$AAC?$AAo?$AAp?$AAy?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?5@ DB ' '
	DB	00H, 'C', 00H, 'o', 00H, 'p', 00H, 'y', 00H, ' ', 00H, 'N', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@OJIPFLDM@?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAG?$AAr?$AAi?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1BO@OJIPFLDM@?$AA?5?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAG?$AAr?$AAi?$AAd?$AA?5@ DB ' '
	DB	00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, ' ', 00H, 'G', 00H, 'r', 00H, 'i', 00H, 'd', 00H, ' '
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NOFILHFD@?$AA?5?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt?$AAy?$AA?5?$AAD?$AAe?$AAs?$AAc?$AAr@
CONST	SEGMENT
??_C@_1CK@NOFILHFD@?$AA?5?$AAS?$AAe?$AAc?$AAu?$AAr?$AAi?$AAt?$AAy?$AA?5?$AAD?$AAe?$AAs?$AAc?$AAr@ DB ' '
	DB	00H, 'S', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, ' ', 00H, 'D', 00H, 'e', 00H, 's', 00H, 'c'
	DB	00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@NFNOIDKJ@?$AA?5?$AAR?$AAe?$AAf?$AAr?$AAe?$AAs?$AAh?$AA?5@
CONST	SEGMENT
??_C@_1BE@NFNOIDKJ@?$AA?5?$AAR?$AAe?$AAf?$AAr?$AAe?$AAs?$AAh?$AA?5@ DB ' '
	DB	00H, 'R', 00H, 'e', 00H, 'f', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'h', 00H, ' ', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@LAECKHMF@?$AAA?$AAl?$AAl?$AA?5?$AAT?$AAy?$AAp?$AAe?$AAs@
CONST	SEGMENT
??_C@_1BE@LAECKHMF@?$AAA?$AAl?$AAl?$AA?5?$AAT?$AAy?$AAp?$AAe?$AAs@ DB 'A', 00H
	DB	'l', 00H, 'l', 00H, ' ', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17JJNMJOBL@?$AA?$CF?$AAw?$AAZ@
CONST	SEGMENT
??_C@_17JJNMJOBL@?$AA?$CF?$AAw?$AAZ@ DB '%', 00H, 'w', 00H, 'Z', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw@
CONST	SEGMENT
??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@ICFKJBIG@?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1O@ICFKJBIG@?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?5@ DB ' ', 00H, 'T', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LHLCHBPN@?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1O@LHLCHBPN@?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?5@ DB ' ', 00H, 'N', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@PKEHKAEB@?$AAE?$AAx?$AAp?$AAl?$AAo?$AAr?$AAe?$AAr@
CONST	SEGMENT
??_C@_1BC@PKEHKAEB@?$AAE?$AAx?$AAp?$AAl?$AAo?$AAr?$AAe?$AAr@ DB 'E', 00H, 'x'
	DB	00H, 'p', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@FEGPDFAG@?$AAS?$AAy?$AAs?$AAL?$AAi?$AAs?$AAt?$AAV?$AAi?$AAe?$AAw?$AA3?$AA2@
CONST	SEGMENT
??_C@_1BM@FEGPDFAG@?$AAS?$AAy?$AAs?$AAL?$AAi?$AAs?$AAt?$AAV?$AAi?$AAe?$AAw?$AA3?$AA2@ DB 'S'
	DB	00H, 'y', 00H, 's', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, '3', 00H, '2', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@POPPCGII@?$AAS?$AAy?$AAs?$AAT?$AAr?$AAe?$AAe?$AAV?$AAi?$AAe?$AAw?$AA3?$AA2@
CONST	SEGMENT
??_C@_1BM@POPPCGII@?$AAS?$AAy?$AAs?$AAT?$AAr?$AAe?$AAe?$AAV?$AAi?$AAe?$AAw?$AA3?$AA2@ DB 'S'
	DB	00H, 'y', 00H, 's', 00H, 'T', 00H, 'r', 00H, 'e', 00H, 'e', 00H
	DB	'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, '3', 00H, '2', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@OAIMIKLP@?$AAn?$AAt?$AAd?$AAl?$AAl@
CONST	SEGMENT
??_C@_1M@OAIMIKLP@?$AAn?$AAt?$AAd?$AAl?$AAl@ DB 'n', 00H, 't', 00H, 'd', 00H
	DB	'l', 00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@CAFEKLEP@?$AA?1?$AA?1?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@
CONST	SEGMENT
??_C@_1BC@CAFEKLEP@?$AA?1?$AA?1?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@ DB '/'
	DB	00H, '/', 00H, '%', 00H, '0', 00H, '8', 00H, 'x', 00H, 0dH, 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
PUBLIC	??0CObjectAttributes@NT@@QAE@PBU_UNICODE_STRING@1@PAXK11@Z ; NT::CObjectAttributes::CObjectAttributes
PUBLIC	??0CObjectAttributes@NT@@QAE@PB_WPAXK11@Z	; NT::CObjectAttributes::CObjectAttributes
PUBLIC	?getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@2@XZ ; NT::RTL_FRAME<NT::_ZGLOBALS>::getContext
PUBLIC	??0?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@QAE@XZ	; NT::RTL_FRAME<NT::_ZGLOBALS>::RTL_FRAME<NT::_ZGLOBALS>
PUBLIC	?get@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPAU12@XZ	; NT::RTL_FRAME<NT::_ZGLOBALS>::get
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?ep@NT@@YGXPAX@Z				; NT::ep
PUBLIC	__FindPESection
PUBLIC	__ValidateImageBase
PUBLIC	@__security_check_cookie@4
PUBLIC	??1?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@QAE@XZ	; NT::RTL_FRAME<NT::_ZGLOBALS>::~RTL_FRAME<NT::_ZGLOBALS>
PUBLIC	?zmain@NT@@YGXXZ				; NT::zmain
PUBLIC	??1ZMainWnd@NT@@UAE@XZ				; NT::ZMainWnd::~ZMainWnd
PUBLIC	??_GZMainWnd@NT@@UAEPAXI@Z			; NT::ZMainWnd::`scalar deleting destructor'
PUBLIC	??0ZMainWnd@NT@@QAE@XZ				; NT::ZMainWnd::ZMainWnd
PUBLIC	?WindowProc@ZMainWnd@NT@@EAEJPAUHWND__@@IIJ@Z	; NT::ZMainWnd::WindowProc
PUBLIC	?CreateTB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z	; NT::ZMainWnd::CreateTB
PUBLIC	?CreateSB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z	; NT::ZMainWnd::CreateSB
PUBLIC	?CreateClient@ZMainWnd@NT@@EAEHPAUHWND__@@HHHH@Z ; NT::ZMainWnd::CreateClient
PUBLIC	?getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@2@XZ ; NT::ZMainWnd::getPosName
PUBLIC	??_GMySplit@NT@@EAEPAXI@Z			; NT::MySplit::`scalar deleting destructor'
PUBLIC	??0MySplit@NT@@QAE@H@Z				; NT::MySplit::MySplit
PUBLIC	?Refresh@MySplit@NT@@QAEXXZ			; NT::MySplit::Refresh
PUBLIC	?WindowProc@MySplit@NT@@EAEJPAUHWND__@@IIJ@Z	; NT::MySplit::WindowProc
PUBLIC	?DeleteContents@MySplit@NT@@AAEXXZ		; NT::MySplit::DeleteContents
PUBLIC	??1MySplit@NT@@EAE@XZ				; NT::MySplit::~MySplit
PUBLIC	?CreateChild@MySplit@NT@@EAEPAUHWND__@@HPAU3@HHHH@Z ; NT::MySplit::CreateChild
PUBLIC	?DisplayNode@MySplit@NT@@AAEXPAUOBJ_NODE@2@@Z	; NT::MySplit::DisplayNode
PUBLIC	?DisplayNode@MySplit@NT@@AAEXPAU_UNICODE_STRING@2@@Z ; NT::MySplit::DisplayNode
PUBLIC	?InsertTypeName@MySplit@NT@@AAEPAU_UNICODE_STRING@2@PBU32@@Z ; NT::MySplit::InsertTypeName
PUBLIC	?AddDirectory@MySplit@NT@@AAEXPAUOBJ_NODE@2@PAUHWND__@@PAUtagTVINSERTSTRUCTW@@PAU_OBJECT_ATTRIBUTES@2@@Z ; NT::MySplit::AddDirectory
PUBLIC	?AddNode@MySplit@NT@@AAEPAUOBJ_NODE@2@PAU32@PBU_UNICODE_STRING@2@1@Z ; NT::MySplit::AddNode
PUBLIC	?CompareFunc@NT@@YGHPAUOBJ_NODE@1@0H@Z		; NT::CompareFunc
PUBLIC	?_AddNode@NT@@YGXPAUHWND__@@PAUtagLVITEMW@@KPAUOBJ_NODE@1@@Z ; NT::_AddNode
PUBLIC	??_GOBJ_NODE@NT@@QAEPAXI@Z			; NT::OBJ_NODE::`scalar deleting destructor'
PUBLIC	?DeleteNode@NT@@YGXPAUOBJ_NODE@1@@Z		; NT::DeleteNode
PUBLIC	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z		; NT::OBJ_NODE::get_FullName
PUBLIC	?QueryName@OBJ_NODE@NT@@AAEJAAPA_WAAJ@Z		; NT::OBJ_NODE::QueryName
PUBLIC	?GetImageIndexByHash@NT@@YGHK@Z			; NT::GetImageIndexByHash
PUBLIC	??1OBJ_NODE@NT@@QAE@XZ				; NT::OBJ_NODE::~OBJ_NODE
PUBLIC	??0OBJ_NODE@NT@@QAE@XZ				; NT::OBJ_NODE::OBJ_NODE
PUBLIC	?CreateIL@NT@@YGPAU_IMAGELIST@@PAUHINSTANCE__@@HHIKQAGPAPAUHICON__@@@Z ; NT::CreateIL
PUBLIC	?ZwOpenWindowStation@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z ; NT::ZwOpenWindowStation
PUBLIC	?ShowNTStatus@NT@@YGXPAUHWND__@@JPB_W@Z		; NT::ShowNTStatus
PUBLIC	?MyOpenDevice@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z ; NT::MyOpenDevice
PUBLIC	??1ZSplitWndV@NT@@UAE@XZ			; NT::ZSplitWndV::~ZSplitWndV
PUBLIC	??0ZSplitWndV@NT@@QAE@H@Z			; NT::ZSplitWndV::ZSplitWndV
PUBLIC	?getHWND@ZStatusBar@NT@@QAEPAUHWND__@@XZ	; NT::ZStatusBar::getHWND
PUBLIC	??2ZWnd@NT@@SGPAXI@Z				; NT::ZWnd::operator new
PUBLIC	??3ZWnd@NT@@SGXPAX@Z				; NT::ZWnd::operator delete
PUBLIC	?Release@ZObject@NT@@QAEKXZ			; NT::ZObject::Release
PUBLIC	?get@_RTL_FRAME@NT@@SGPAU_TEB_ACTIVE_FRAME@2@PBU_TEB_ACTIVE_FRAME_CONTEXT@2@@Z ; NT::_RTL_FRAME::get
PUBLIC	??1_RTL_FRAME@NT@@QAE@XZ			; NT::_RTL_FRAME::~_RTL_FRAME
PUBLIC	??0_RTL_FRAME@NT@@QAE@PBU_TEB_ACTIVE_FRAME_CONTEXT@1@@Z ; NT::_RTL_FRAME::_RTL_FRAME
PUBLIC	_destroyterm@0
PUBLIC	_atexit
PUBLIC	_initterm@0
PUBLIC	__initterm@8
PUBLIC	?root@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@A ; `NT::MySplit::Refresh'::`2'::root
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_EMySplit@NT@@EAEPAXI@Z:PROC			; NT::MySplit::`vector deleting destructor'
EXTRN	??_EZMainWnd@NT@@UAEPAXI@Z:PROC			; NT::ZMainWnd::`vector deleting destructor'
;	COMDAT ?root@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@A
_BSS	SEGMENT
?root@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@A DQ 01H DUP (?) ; `NT::MySplit::Refresh'::`2'::root
_BSS	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\initterm.h
;	COMDAT __initterm@8
_TEXT	SEGMENT
__initterm@8 PROC					; COMDAT
; _ppfn$ = ecx
; _end$ = edx

; 24   :   {

	push	esi
	push	edi
	mov	edi, edx
	mov	esi, ecx
$LL4@initterm:

; 25   : 	  do 
; 26   : 	  {
; 27   : 		  if (_PVFV pfn = *ppfn++)

	mov	eax, DWORD PTR [esi]
	add	esi, 4
	test	eax, eax
	je	SHORT $LN2@initterm

; 28   : 		  {
; 29   : 			  pfn();

	call	eax
$LN2@initterm:

; 30   : 		  }
; 31   : 	  } while (ppfn < end);

	cmp	esi, edi
	jb	SHORT $LL4@initterm

; 32   :   }

	pop	edi
	pop	esi
	ret	0
__initterm@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\initterm.h
;	COMDAT _initterm@0
_TEXT	SEGMENT
_initterm@0 PROC					; COMDAT

; 35   :   {

	push	esi

; 36   : 	  _initterm(&__xi_a, &__xi_z);

	mov	esi, OFFSET ___xi_a
$LL6@initterm:

; 27   : 		  if (_PVFV pfn = *ppfn++)

	mov	eax, DWORD PTR [esi]
	add	esi, 4
	test	eax, eax
	je	SHORT $LN4@initterm

; 28   : 		  {
; 29   : 			  pfn();

	call	eax
$LN4@initterm:

; 30   : 		  }
; 31   : 	  } while (ppfn < end);

	cmp	esi, OFFSET ___xi_z
	jb	SHORT $LL6@initterm

; 37   : 	  _initterm(&__xc_a, &__xc_z);

	mov	esi, OFFSET ___xc_a
$LL12@initterm:

; 27   : 		  if (_PVFV pfn = *ppfn++)

	mov	eax, DWORD PTR [esi]
	add	esi, 4
	test	eax, eax
	je	SHORT $LN10@initterm

; 28   : 		  {
; 29   : 			  pfn();

	call	eax
$LN10@initterm:

; 30   : 		  }
; 31   : 	  } while (ppfn < end);

	cmp	esi, OFFSET ___xc_z
	jb	SHORT $LL12@initterm

; 38   :   }

	pop	esi
	ret	0
_initterm@0 ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\initterm.h
;	COMDAT _atexit
_TEXT	SEGMENT
_atexit	PROC						; COMDAT
; _func$ = ecx

; 59   :   {

	push	esi
	mov	esi, ecx

; 60   : 	  if (ONEXIT* p = new ONEXIT)

	push	8
	pop	ecx
	call	??2@YAPAXI@Z				; operator new
	test	eax, eax
	je	SHORT $LN2@atexit

; 61   : 	  {
; 62   : 		  p->func = func;
; 63   : 		  InterlockedPushEntrySList(&g__onexit, p);

	push	eax
	push	OFFSET _g__onexit
	mov	DWORD PTR [eax+4], esi
	call	DWORD PTR __imp__RtlInterlockedPushEntrySList@8

; 64   : 		  return 0;

	xor	eax, eax
	pop	esi

; 69   :   }

	ret	0
$LN2@atexit:

; 65   : 	  }
; 66   :       
; 67   : 	  __debugbreak();

	int	3

; 68   : 	  return -1;

	or	eax, -1
	pop	esi

; 69   :   }

	ret	0
_atexit	ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\initterm.h
; File o:\vc\winZ\stdafx.cpp
; File o:\vc\inc\initterm.h
;	COMDAT _destroyterm@0
_TEXT	SEGMENT
_destroyterm@0 PROC					; COMDAT

; 71   :   {

	push	ebx
	push	esi

; 72   : 	  while (ONEXIT* p = static_cast<ONEXIT*>(InterlockedPopEntrySList(&g__onexit)))

	mov	ebx, OFFSET _g__onexit
	jmp	SHORT $LN12@destroyter
$LL2@destroyter:

; 73   : 	  {
; 74   : 		  p->func();

	call	DWORD PTR [esi+4]
; File o:\vc\winZ\stdafx.cpp

; 26   : 	HeapFree(GetProcessHeap(), 0, Buffer);

	push	esi
	push	0
	call	DWORD PTR __imp__GetProcessHeap@0
	push	eax
	call	DWORD PTR __imp__HeapFree@12
$LN12@destroyter:
; File o:\vc\inc\initterm.h

; 72   : 	  while (ONEXIT* p = static_cast<ONEXIT*>(InterlockedPopEntrySList(&g__onexit)))

	push	ebx
	call	DWORD PTR __imp__RtlInterlockedPopEntrySList@4
	mov	esi, eax
	test	esi, esi
	jne	SHORT $LL2@destroyter

; 75   : 		  delete p;
; 76   : 	  }
; 77   :   }

	pop	esi
	pop	ebx
	ret	0
_destroyterm@0 ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\rtlframe.h
;	COMDAT ??0_RTL_FRAME@NT@@QAE@PBU_TEB_ACTIVE_FRAME_CONTEXT@1@@Z
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
??0_RTL_FRAME@NT@@QAE@PBU_TEB_ACTIVE_FRAME_CONTEXT@1@@Z PROC ; NT::_RTL_FRAME::_RTL_FRAME, COMDAT
; _this$ = ecx

; 6    : 	{
; 7    : 		Context = ctx;

	mov	eax, DWORD PTR _ctx$[esp-4]
	push	esi
	mov	esi, ecx

; 8    : 		Flags = 0;
; 9    : 		RtlPushFrame(this);

	push	esi
	and	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp__RtlPushFrame@4

; 10   : 	}

	mov	eax, esi
	pop	esi
	ret	4
??0_RTL_FRAME@NT@@QAE@PBU_TEB_ACTIVE_FRAME_CONTEXT@1@@Z ENDP ; NT::_RTL_FRAME::_RTL_FRAME
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\rtlframe.h
;	COMDAT ??1_RTL_FRAME@NT@@QAE@XZ
_TEXT	SEGMENT
??1_RTL_FRAME@NT@@QAE@XZ PROC				; NT::_RTL_FRAME::~_RTL_FRAME, COMDAT
; _this$ = ecx

; 14   : 		RtlPopFrame(this);

	push	ecx
	call	DWORD PTR __imp__RtlPopFrame@4

; 15   : 	}

	ret	0
??1_RTL_FRAME@NT@@QAE@XZ ENDP				; NT::_RTL_FRAME::~_RTL_FRAME
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\rtlframe.h
;	COMDAT ?get@_RTL_FRAME@NT@@SGPAU_TEB_ACTIVE_FRAME@2@PBU_TEB_ACTIVE_FRAME_CONTEXT@2@@Z
_TEXT	SEGMENT
?get@_RTL_FRAME@NT@@SGPAU_TEB_ACTIVE_FRAME@2@PBU_TEB_ACTIVE_FRAME_CONTEXT@2@@Z PROC ; NT::_RTL_FRAME::get, COMDAT
; _ctx$ = ecx

; 18   : 	{

	push	esi
	mov	esi, ecx

; 19   : 		if (TEB_ACTIVE_FRAME* prf = RtlGetFrame())

	call	DWORD PTR __imp__RtlGetFrame@0
	jmp	SHORT $LN12@get
$LL4@get:

; 20   : 		{
; 21   : 			do 
; 22   : 			{
; 23   : 				if (prf->Context == ctx) return prf;

	cmp	DWORD PTR [eax+8], esi
	je	SHORT $LN1@get

; 24   : 			} while (prf = prf->Previous);

	mov	eax, DWORD PTR [eax+4]
$LN12@get:
	test	eax, eax
	jne	SHORT $LL4@get
$LN1@get:
	pop	esi

; 25   : 		}
; 26   : 
; 27   : 		return 0;
; 28   : 	}

	ret	0
?get@_RTL_FRAME@NT@@SGPAU_TEB_ACTIVE_FRAME@2@PBU_TEB_ACTIVE_FRAME_CONTEXT@2@@Z ENDP ; NT::_RTL_FRAME::get
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\winz\object.h
;	COMDAT ?Release@ZObject@NT@@QAEKXZ
_TEXT	SEGMENT
?Release@ZObject@NT@@QAEKXZ PROC			; NT::ZObject::Release, COMDAT
; _this$ = ecx

; 45   : 	{

	push	esi

; 46   : 		ULONG dwRef = InterlockedDecrement(&_dwRef);

	or	esi, -1
	lock	 xadd	 DWORD PTR [ecx+4], esi
	dec	esi

; 47   : 		if (!dwRef) delete this;

	jne	SHORT $LN4@Release
	test	ecx, ecx
	je	SHORT $LN4@Release
	mov	edx, DWORD PTR [ecx]
	push	1
	call	DWORD PTR [edx]
$LN4@Release:

; 48   : 		return dwRef;

	mov	eax, esi
	pop	esi

; 49   : 	}

	ret	0
?Release@ZObject@NT@@QAEKXZ ENDP			; NT::ZObject::Release
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\winz\window.h
; File o:\vc\winZ\window.cpp
; File o:\vc\winz\window.h
;	COMDAT ??3ZWnd@NT@@SGXPAX@Z
_TEXT	SEGMENT
??3ZWnd@NT@@SGXPAX@Z PROC				; NT::ZWnd::operator delete, COMDAT
; _p$ = ecx
; File o:\vc\winZ\window.cpp

; 22   : 	::operator delete(p);

	call	??3@YAXPAX@Z				; operator delete

; 23   : 	gGUIrp.Release();

	jmp	?Release@RUNDOWN_REF@NT@@QAEXXZ		; NT::RUNDOWN_REF::Release
??3ZWnd@NT@@SGXPAX@Z ENDP				; NT::ZWnd::operator delete
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\winz\window.h
;	COMDAT ??2ZWnd@NT@@SGPAXI@Z
_TEXT	SEGMENT
??2ZWnd@NT@@SGPAXI@Z PROC				; NT::ZWnd::operator new, COMDAT
; _cb$ = ecx

; 70   : 		return gui_new(cb);

	jmp	?gui_new@NT@@YGPAXI@Z			; NT::gui_new
??2ZWnd@NT@@SGPAXI@Z ENDP				; NT::ZWnd::operator new
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\winz\ctrl.h
;	COMDAT ?getHWND@ZStatusBar@NT@@QAEPAUHWND__@@XZ
_TEXT	SEGMENT
?getHWND@ZStatusBar@NT@@QAEPAUHWND__@@XZ PROC		; NT::ZStatusBar::getHWND, COMDAT
; _this$ = ecx

; 43   : 	HWND getHWND(){ return _hwnd; }

	mov	eax, DWORD PTR [ecx]
	ret	0
?getHWND@ZStatusBar@NT@@QAEPAUHWND__@@XZ ENDP		; NT::ZStatusBar::getHWND
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\winz\split.h
;	COMDAT ??0ZSplitWndV@NT@@QAE@H@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
??0ZSplitWndV@NT@@QAE@H@Z PROC				; NT::ZSplitWndV::ZSplitWndV, COMDAT
; _this$ = ecx

; 56   : 	ZSplitWndV(int t) : ZSplitWnd(t)

	push	DWORD PTR _t$[esp-4]
	call	??0ZSplitWnd@NT@@QAE@H@Z		; NT::ZSplitWnd::ZSplitWnd

; 58   : 	}

	mov	eax, ecx
	ret	4
??0ZSplitWndV@NT@@QAE@H@Z ENDP				; NT::ZSplitWndV::ZSplitWndV
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??1ZSplitWndV@NT@@UAE@XZ
_TEXT	SEGMENT
??1ZSplitWndV@NT@@UAE@XZ PROC				; NT::ZSplitWndV::~ZSplitWndV, COMDAT
; _this$dead$ = ecx
	ret	0
??1ZSplitWndV@NT@@UAE@XZ ENDP				; NT::ZSplitWndV::~ZSplitWndV
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?MyOpenDevice@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z
_TEXT	SEGMENT
_iosb$ = -8						; size = 8
_Handle$ = 8						; size = 4
_DesiredAccess$ = 12					; size = 4
_ObjectAttributes$ = 16					; size = 4
?MyOpenDevice@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z PROC ; NT::MyOpenDevice, COMDAT

; 19   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx

; 20   : 	IO_STATUS_BLOCK iosb;
; 21   : 	return NtOpenFile(Handle, DesiredAccess, ObjectAttributes, &iosb, FILE_SHARE_VALID_FLAGS, 0);

	push	0
	push	7
	lea	eax, DWORD PTR _iosb$[ebp]
	push	eax
	push	DWORD PTR _ObjectAttributes$[ebp]
	push	DWORD PTR _DesiredAccess$[ebp]
	push	DWORD PTR _Handle$[ebp]
	call	DWORD PTR __imp__NtOpenFile@24

; 22   : }

	leave
	ret	12					; 0000000cH
?MyOpenDevice@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z ENDP ; NT::MyOpenDevice
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?ShowNTStatus@NT@@YGXPAUHWND__@@JPB_W@Z
_TEXT	SEGMENT
_buf$ = -512						; size = 512
_caption$ = 8						; size = 4
?ShowNTStatus@NT@@YGXPAUHWND__@@JPB_W@Z PROC		; NT::ShowNTStatus, COMDAT
; _hwnd$ = ecx
; _status$ = edx

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 512				; 00000200H

; 26   : 	WCHAR buf[256], *sz = buf;
; 27   : 
; 28   : 	sz += swprintf(sz, L"//%08x\r\n", status);

	lea	eax, DWORD PTR _buf$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	esi, edx
	mov	ebx, ecx
	push	esi
	push	OFFSET ??_C@_1BC@CAFEKLEP@?$AA?1?$AA?1?$AA?$CF?$AA0?$AA8?$AAx?$AA?$AN?$AA?6@
	push	eax
	call	DWORD PTR __imp___swprintf
	add	esp, 12					; 0000000cH
	lea	edx, DWORD PTR _buf$[ebp]
	add	eax, eax

; 29   : 
; 30   : 	FormatMessage(FORMAT_MESSAGE_IGNORE_INSERTS|FORMAT_MESSAGE_FROM_HMODULE,

	xor	edi, edi
	add	edx, eax
	mov	ecx, 256				; 00000100H
	sar	eax, 1
	push	edi
	sub	ecx, eax
	push	ecx
	push	edx
	push	edi
	push	esi
	push	OFFSET ??_C@_1M@OAIMIKLP@?$AAn?$AAt?$AAd?$AAl?$AAl@
	call	DWORD PTR __imp__GetModuleHandleW@4
	push	eax
	push	2560					; 00000a00H
	call	DWORD PTR __imp__FormatMessageW@28

; 31   : 		GetModuleHandleW(L"ntdll"), status, 0, sz, RTL_NUMBER_OF(buf) - (DWORD)(sz - buf), 0);
; 32   : 
; 33   : 	switch ((DWORD)status >> 30)

	shr	esi, 30					; 0000001eH
	sub	esi, edi
	je	SHORT $LN4@ShowNTStat
	sub	esi, 1
	je	SHORT $LN5@ShowNTStat
	sub	esi, 1
	je	SHORT $LN6@ShowNTStat

; 44   : 	case 3:
; 45   : 		status = MB_OK|MB_ICONHAND;

	push	16					; 00000010H

; 46   : 		break;

	jmp	SHORT $LN10@ShowNTStat
$LN6@ShowNTStat:

; 40   : 		break;
; 41   : 	case 2:
; 42   : 		status = MB_OK|MB_ICONWARNING;

	push	48					; 00000030H

; 43   : 		break;

	jmp	SHORT $LN10@ShowNTStat
$LN5@ShowNTStat:

; 34   : 	{
; 35   : 	case 0:
; 36   : 		status = MB_OK;
; 37   : 		break;
; 38   : 	case 1:
; 39   : 		status = MB_OK|MB_ICONINFORMATION;

	push	64					; 00000040H
$LN10@ShowNTStat:

; 47   : 	default:__assume(false);
; 48   : 	}
; 49   : 
; 50   : 	MessageBox(hwnd, buf, caption, status);

	pop	edi
$LN4@ShowNTStat:
	push	edi
	push	DWORD PTR _caption$[ebp]
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	ebx
	call	DWORD PTR __imp__MessageBoxW@16
	pop	edi
	pop	esi
	pop	ebx

; 51   : }

	leave
	ret	4
?ShowNTStatus@NT@@YGXPAUHWND__@@JPB_W@Z ENDP		; NT::ShowNTStatus
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?ZwOpenWindowStation@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z
_TEXT	SEGMENT
_Handle$ = 8						; size = 4
_DesiredAccess$ = 12					; size = 4
_ObjectAttributes$ = 16					; size = 4
?ZwOpenWindowStation@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z PROC ; NT::ZwOpenWindowStation, COMDAT

; 55   : 	if (PWSTR sz = ObjectAttributes->ObjectName->Buffer)

	mov	eax, DWORD PTR _ObjectAttributes$[esp-4]
	mov	eax, DWORD PTR [eax+8]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@ZwOpenWind

; 56   : 	{
; 57   : 		if (sz = wcsrchr(sz, '\\'))

	push	92					; 0000005cH
	push	DWORD PTR [eax+4]
	call	DWORD PTR __imp__wcsrchr
	pop	ecx
	pop	ecx
	test	eax, eax
	je	SHORT $LN4@ZwOpenWind

; 58   : 		{
; 59   : 			if (HWINSTA h = OpenWindowStationW(sz + 1, FALSE, DesiredAccess))

	push	DWORD PTR _DesiredAccess$[esp-4]
	add	eax, 2
	push	0
	push	eax
	call	DWORD PTR __imp__OpenWindowStationW@12
	test	eax, eax
	je	SHORT $LN4@ZwOpenWind

; 60   : 			{
; 61   : 				*Handle = h;

	mov	ecx, DWORD PTR _Handle$[esp-4]
	mov	DWORD PTR [ecx], eax

; 62   : 				return STATUS_SUCCESS;

	xor	eax, eax
	jmp	SHORT $LN1@ZwOpenWind
$LN4@ZwOpenWind:

; 63   : 			}
; 64   : 		}
; 65   : 	}
; 66   : 	
; 67   : 	return STATUS_UNSUCCESSFUL;

	mov	eax, -1073741823			; c0000001H
$LN1@ZwOpenWind:

; 68   : }

	ret	12					; 0000000cH
?ZwOpenWindowStation@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z ENDP ; NT::ZwOpenWindowStation
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?CreateIL@NT@@YGPAU_IMAGELIST@@PAUHINSTANCE__@@HHIKQAGPAPAUHICON__@@@Z
_TEXT	SEGMENT
_cy$dead$ = 8						; size = 4
_flags$dead$ = 12					; size = 4
_n$dead$ = 16						; size = 4
_pID$dead$ = 20						; size = 4
_phi$ = 24						; size = 4
?CreateIL@NT@@YGPAU_IMAGELIST@@PAUHINSTANCE__@@HHIKQAGPAPAUHICON__@@@Z PROC ; NT::CreateIL, COMDAT
; _hInstance$dead$ = ecx
; _cx$dead$ = edx

; 115  : {

	push	ebx
	push	ebp
	push	esi
	push	24					; 00000018H
	pop	ebx

; 116  : 	HIMAGELIST himl = ImageList_Create(cx, cy, flags, n, 0);

	push	0
	push	ebx
	push	32					; 00000020H
	push	16					; 00000010H
	push	16					; 00000010H
	mov	ebp, OFFSET ?id@?1???0MySplit@NT@@QAE@H@Z@4PAGA ; `NT::MySplit::MySplit'::`2'::id
	call	DWORD PTR __imp__ImageList_Create@20
	mov	esi, eax

; 117  : 
; 118  : 	if (himl)

	test	esi, esi
	je	SHORT $LN3@CreateIL
	push	edi
	mov	edi, DWORD PTR _phi$[esp+12]
$LL4@CreateIL:

; 119  : 	{
; 120  : 		do 
; 121  : 		{
; 122  : 			if (HICON hi = (HICON)LoadImage(hInstance, MAKEINTRESOURCE(*pID++), IMAGE_ICON, 0, 0, 0))

	movzx	eax, WORD PTR [ebp]
	xor	ecx, ecx
	push	ecx
	push	ecx
	push	ecx
	push	1
	push	eax
	push	OFFSET ___ImageBase
	lea	ebp, DWORD PTR [ebp+2]
	call	DWORD PTR __imp__LoadImageW@24
	test	eax, eax
	je	SHORT $LN2@CreateIL

; 123  : 			{
; 124  : 				*phi = hi;
; 125  : 				ImageList_ReplaceIcon(himl, -1, hi);

	push	eax
	push	-1
	push	esi
	mov	DWORD PTR [edi], eax
	call	DWORD PTR __imp__ImageList_ReplaceIcon@12
$LN2@CreateIL:

; 126  : 			}
; 127  : 		} while (++phi, --n);

	add	edi, 4
	sub	ebx, 1
	jne	SHORT $LL4@CreateIL
	pop	edi
$LN3@CreateIL:

; 128  : 	}
; 129  : 
; 130  : 	return himl;

	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx

; 131  : }

	ret	20					; 00000014H
?CreateIL@NT@@YGPAU_IMAGELIST@@PAUHINSTANCE__@@HHIKQAGPAPAUHICON__@@@Z ENDP ; NT::CreateIL
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ??0OBJ_NODE@NT@@QAE@XZ
_TEXT	SEGMENT
??0OBJ_NODE@NT@@QAE@XZ PROC				; NT::OBJ_NODE::OBJ_NODE, COMDAT
; _this$ = ecx

; 187  : 	OBJ_NODE()

	push	edi
	mov	edx, ecx

; 188  : 	{
; 189  : 		RtlZeroMemory(this, sizeof OBJ_NODE);

	xor	eax, eax
	push	7
	pop	ecx
	mov	edi, edx
	rep stosd

; 190  : 	}

	mov	eax, edx
	pop	edi
	ret	0
??0OBJ_NODE@NT@@QAE@XZ ENDP				; NT::OBJ_NODE::OBJ_NODE
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ??1OBJ_NODE@NT@@QAE@XZ
_TEXT	SEGMENT
??1OBJ_NODE@NT@@QAE@XZ PROC				; NT::OBJ_NODE::~OBJ_NODE, COMDAT
; _this$ = ecx

; 194  : 		RtlFreeUnicodeString(this);

	push	ecx
	call	DWORD PTR __imp__RtlFreeUnicodeString@4

; 195  : 	}

	ret	0
??1OBJ_NODE@NT@@QAE@XZ ENDP				; NT::OBJ_NODE::~OBJ_NODE
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?GetImageIndexByHash@NT@@YGHK@Z
_TEXT	SEGMENT
?GetImageIndexByHash@NT@@YGHK@Z PROC			; NT::GetImageIndexByHash, COMDAT
; _hash$ = ecx

; 204  : 	switch (hash)

	mov	eax, 2139285420				; 7f82e7acH
	cmp	ecx, eax
	ja	$LN28@GetImageIn
	je	$LN9@GetImageIn
	mov	eax, 1378288970				; 5227054aH
	cmp	ecx, eax
	ja	SHORT $LN29@GetImageIn
	je	SHORT $LN22@GetImageIn
	cmp	ecx, 72977399				; 04598bf7H
	je	SHORT $LN24@GetImageIn
	cmp	ecx, 357674468				; 1551ade4H
	je	SHORT $LN16@GetImageIn
	cmp	ecx, 618632957				; 24df96fdH
	je	SHORT $LN12@GetImageIn
	cmp	ecx, 626238495				; 2553a41fH
	je	SHORT $LN10@GetImageIn
	cmp	ecx, 867521508				; 33b553e4H
	jne	$LN26@GetImageIn

; 235  : 	case OBJ_NODE::t_Semaphore:
; 236  : 		return 16;

	push	16					; 00000010H

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN10@GetImageIn:

; 219  : 	case OBJ_NODE::t_Key:
; 220  : 		return 8;

	push	8

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN12@GetImageIn:

; 223  : 	case OBJ_NODE::t_Job:
; 224  : 		return 10;

	push	10					; 0000000aH

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN16@GetImageIn:

; 231  : 	case OBJ_NODE::t_WindowStation:
; 232  : 		return 14;

	push	14					; 0000000eH

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN24@GetImageIn:

; 247  : 	case OBJ_NODE::t_FilterConnectionPort:
; 248  : 		return 22;

	push	22					; 00000016H

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN22@GetImageIn:

; 243  : 	case OBJ_NODE::t_Partition:
; 244  : 		return 20;

	push	20					; 00000014H

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN29@GetImageIn:

; 204  : 	switch (hash)

	cmp	ecx, 1447492822				; 5646fcd6H
	je	SHORT $LN5@GetImageIn
	cmp	ecx, 1725872880				; 66debaf0H
	je	SHORT $LN19@GetImageIn
	cmp	ecx, 1815741532				; 6c3a045cH
	je	SHORT $LN14@GetImageIn
	cmp	ecx, 1926758472				; 72d80048H
	je	SHORT $LN6@GetImageIn
	cmp	ecx, 2018056543				; 7849195fH
	jne	$LN26@GetImageIn

; 245  : 	case OBJ_NODE::t_FilterCommunicationPort:
; 246  : 		return 21;

	push	21					; 00000015H

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN6@GetImageIn:

; 210  : 	case OBJ_NODE::t_Driver:
; 211  : 		return 4;

	push	4

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN14@GetImageIn:

; 227  : 	case OBJ_NODE::t_KeyedEvent:
; 228  : 		return 12;

	push	12					; 0000000cH

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN19@GetImageIn:

; 237  : 	case OBJ_NODE::t_WaitablePort:
; 238  : 		return 17;

	push	17					; 00000011H

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN5@GetImageIn:

; 208  : 	case OBJ_NODE::t_Device:
; 209  : 		return 3;

	push	3

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN9@GetImageIn:

; 217  : 	case OBJ_NODE::t_SymbolicLink:
; 218  : 		return 7;

	push	7

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN28@GetImageIn:

; 204  : 	switch (hash)

	mov	eax, -1053028063			; c13c1121H
	cmp	ecx, eax
	ja	SHORT $LN30@GetImageIn
	je	SHORT $LN8@GetImageIn
	cmp	ecx, -2143162726			; 8041ee9aH
	je	SHORT $LN15@GetImageIn
	cmp	ecx, -1796440603			; 94ec7de5H
	je	SHORT $LN25@GetImageIn
	cmp	ecx, -1753003884			; 97834894H
	je	SHORT $LN21@GetImageIn
	cmp	ecx, -1538057139			; a4531c4dH
	je	SHORT $LN4@GetImageIn
	cmp	ecx, -1122992827			; bd107d45H
	jne	SHORT $LN26@GetImageIn

; 212  : 	case OBJ_NODE::t_Section:
; 213  : 		return 5;

	push	5

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN4@GetImageIn:

; 205  : 	{
; 206  : 	case OBJ_NODE::t_Directory:
; 207  : 		return 1;

	xor	eax, eax
	inc	eax

; 253  : 	}
; 254  : }

	ret	0
$LN21@GetImageIn:

; 241  : 	case OBJ_NODE::t_EventPair:
; 242  : 		return 19;

	push	19					; 00000013H

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN25@GetImageIn:

; 249  : 	case OBJ_NODE::t_Timer:
; 250  : 		return 23;

	push	23					; 00000017H

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN15@GetImageIn:

; 229  : 	case OBJ_NODE::t_Type:
; 230  : 		return 13;

	push	13					; 0000000dH

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN30@GetImageIn:

; 204  : 	switch (hash)

	cmp	ecx, -850420586				; cd4f9c96H
	je	SHORT $LN20@GetImageIn
	cmp	ecx, -702947163				; d619e0a5H
	je	SHORT $LN17@GetImageIn
	cmp	ecx, -217838406				; f3040cbaH
	je	SHORT $LN11@GetImageIn
	cmp	ecx, -72794789				; fba93d5bH
	je	SHORT $LN13@GetImageIn
	cmp	ecx, -57020413				; fc99f003H
	je	SHORT $LN8@GetImageIn
$LN26@GetImageIn:

; 251  : 	default:
; 252  : 		return I_IMAGENONE;

	push	-2					; fffffffeH

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN8@GetImageIn:

; 214  : 	case OBJ_NODE::t_Port:
; 215  : 	case OBJ_NODE::t_ALPC_Port:
; 216  : 		return 6;

	push	6

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN13@GetImageIn:

; 225  : 	case OBJ_NODE::t_Mutant:
; 226  : 		return 11;

	push	11					; 0000000bH

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN11@GetImageIn:

; 221  : 	case OBJ_NODE::t_Event:
; 222  : 		return 9;

	push	9

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN17@GetImageIn:

; 233  : 	case OBJ_NODE::t_Callback:
; 234  : 		return 15;

	push	15					; 0000000fH

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
$LN20@GetImageIn:

; 239  : 	case OBJ_NODE::t_Session:
; 240  : 		return 18;

	push	18					; 00000012H

; 253  : 	}
; 254  : }

	pop	eax
	ret	0
?GetImageIndexByHash@NT@@YGHK@Z ENDP			; NT::GetImageIndexByHash
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?QueryName@OBJ_NODE@NT@@AAEJAAPA_WAAJ@Z
_TEXT	SEGMENT
_Buf$ = 8						; size = 4
_NameLen$1$ = 12					; size = 4
_Len$ = 12						; size = 4
?QueryName@OBJ_NODE@NT@@AAEJAAPA_WAAJ@Z PROC		; NT::OBJ_NODE::QueryName, COMDAT
; _this$ = ecx

; 257  : {

	push	ebx
	push	ebp
	mov	ebp, ecx

; 258  : 	LONG NameLen = 0, _NameLen = Length;

	xor	edx, edx

; 259  : 	if (Parent) 

	mov	ecx, DWORD PTR [ebp+8]
	movzx	ebx, WORD PTR [ebp]
	test	ecx, ecx
	je	SHORT $LN2@QueryName

; 260  : 	{
; 261  : 		NameLen = sizeof(WCHAR) + Parent->QueryName(Buf, Len);

	push	esi
	mov	esi, DWORD PTR _Buf$[esp+8]
	push	edi
	mov	edi, DWORD PTR _Len$[esp+12]
	push	edi
	push	esi
	call	?QueryName@OBJ_NODE@NT@@AAEJAAPA_WAAJ@Z	; NT::OBJ_NODE::QueryName

; 262  : 		if ((LONG)sizeof(WCHAR) <= Len) *Buf = L'\\';

	cmp	DWORD PTR [edi], 2
	lea	edx, DWORD PTR [eax+2]
	mov	DWORD PTR _NameLen$1$[esp+12], edx
	jl	SHORT $LN3@QueryName
	mov	ecx, DWORD PTR [esi]
	push	92					; 0000005cH
	pop	eax
	mov	WORD PTR [ecx], ax
$LN3@QueryName:

; 263  : 		Buf++, Len -= sizeof(WCHAR);

	add	DWORD PTR [esi], 2
	add	DWORD PTR [edi], -2			; fffffffeH

; 264  : 		if (_NameLen <= Len) memcpy(Buf, Buffer, Length);

	cmp	ebx, DWORD PTR [edi]
	jg	SHORT $LN4@QueryName
	movzx	eax, WORD PTR [ebp]
	push	eax
	push	DWORD PTR [ebp+4]
	push	DWORD PTR [esi]
	call	_memcpy
	mov	edx, DWORD PTR _NameLen$1$[esp+24]
	add	esp, 12					; 0000000cH
$LN4@QueryName:

; 265  : 		Buf += _NameLen >> 1, Len -= _NameLen;

	mov	eax, ebx
	and	eax, -2					; fffffffeH
	add	DWORD PTR [esi], eax
	sub	DWORD PTR [edi], ebx
	pop	edi
	pop	esi
$LN2@QueryName:

; 266  : 	}
; 267  : 	return NameLen + _NameLen;

	pop	ebp
	lea	eax, DWORD PTR [ebx+edx]
	pop	ebx

; 268  : }

	ret	8
?QueryName@OBJ_NODE@NT@@AAEJAAPA_WAAJ@Z ENDP		; NT::OBJ_NODE::QueryName
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z
_TEXT	SEGMENT
_lpsz$ = 8						; size = 4
_cb$ = 12						; size = 4
?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z PROC		; NT::OBJ_NODE::get_FullName, COMDAT
; _this$ = ecx

; 271  : {

	push	ebp
	mov	ebp, esp

; 272  : 	if (!Parent)

	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@get_FullNa

; 273  : 	{
; 274  : 		if (cb >= 2 * sizeof(WCHAR))

	push	4
	pop	eax
	cmp	DWORD PTR _cb$[ebp], eax
	jb	SHORT $LN1@get_FullNa

; 275  : 		{
; 276  : 			*lpsz++ = L'\\', *lpsz = 0;

	mov	ecx, DWORD PTR _lpsz$[ebp]
	push	92					; 0000005cH
	pop	edx
	mov	WORD PTR [ecx], dx
	xor	edx, edx
	mov	ecx, DWORD PTR _lpsz$[ebp]
	mov	WORD PTR [ecx+2], dx

; 277  : 		}
; 278  : 		return 2 * sizeof(WCHAR);

	jmp	SHORT $LN1@get_FullNa
$LN2@get_FullNa:

; 279  : 	}
; 280  : 	LONG NameLength = QueryName(lpsz, cb);

	lea	eax, DWORD PTR _cb$[ebp]
	push	eax
	lea	eax, DWORD PTR _lpsz$[ebp]
	push	eax
	call	?QueryName@OBJ_NODE@NT@@AAEJAAPA_WAAJ@Z	; NT::OBJ_NODE::QueryName

; 281  : 	if ((LONG)sizeof(WCHAR) <= cb) *lpsz = 0;

	cmp	DWORD PTR _cb$[ebp], 2
	jl	SHORT $LN4@get_FullNa
	mov	ecx, DWORD PTR _lpsz$[ebp]
	xor	edx, edx
	mov	WORD PTR [ecx], dx
$LN4@get_FullNa:

; 282  : 	return NameLength + sizeof(WCHAR);

	add	eax, 2
$LN1@get_FullNa:

; 283  : }

	pop	ebp
	ret	8
?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z ENDP		; NT::OBJ_NODE::get_FullName
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\stdafx.cpp
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?DeleteNode@NT@@YGXPAUOBJ_NODE@1@@Z
_TEXT	SEGMENT
?DeleteNode@NT@@YGXPAUOBJ_NODE@1@@Z PROC		; NT::DeleteNode, COMDAT
; _item$ = ecx

; 286  : {

	push	esi
	push	edi
	mov	edi, ecx

; 287  : 	OBJ_NODE* Next = item->Child, *_item;

	mov	esi, DWORD PTR [edi+16]
	jmp	SHORT $LN18@DeleteNode
$LL2@DeleteNode:

; 289  : 	{
; 290  : 		_item = Next;

	mov	ecx, esi

; 291  : 		Next = Next->Next;

	mov	esi, DWORD PTR [esi+12]

; 292  : 		DeleteNode(_item);

	call	?DeleteNode@NT@@YGXPAUOBJ_NODE@1@@Z	; NT::DeleteNode
$LN18@DeleteNode:

; 288  : 	while(Next)

	test	esi, esi
	jne	SHORT $LL2@DeleteNode

; 194  : 		RtlFreeUnicodeString(this);

	push	edi
	call	DWORD PTR __imp__RtlFreeUnicodeString@4
; File o:\vc\winZ\stdafx.cpp

; 26   : 	HeapFree(GetProcessHeap(), 0, Buffer);

	push	edi
	push	esi
	call	DWORD PTR __imp__GetProcessHeap@0
	push	eax
	call	DWORD PTR __imp__HeapFree@12
	pop	edi
	pop	esi
; File o:\vc\Wobj\Wobj.cpp

; 295  : }

	ret	0
?DeleteNode@NT@@YGXPAUOBJ_NODE@1@@Z ENDP		; NT::DeleteNode
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\stdafx.cpp
;	COMDAT ??_GOBJ_NODE@NT@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_GOBJ_NODE@NT@@QAEPAXI@Z PROC				; NT::OBJ_NODE::`scalar deleting destructor', COMDAT
; _this$ = ecx
; File o:\vc\Wobj\Wobj.cpp

; 194  : 		RtlFreeUnicodeString(this);

	push	esi
	mov	esi, ecx
	push	esi
	call	DWORD PTR __imp__RtlFreeUnicodeString@4
; File o:\vc\winZ\stdafx.cpp

; 26   : 	HeapFree(GetProcessHeap(), 0, Buffer);

	push	esi
	push	0
	call	DWORD PTR __imp__GetProcessHeap@0
	push	eax
	call	DWORD PTR __imp__HeapFree@12
	mov	eax, esi
	pop	esi
	ret	4
??_GOBJ_NODE@NT@@QAEPAXI@Z ENDP				; NT::OBJ_NODE::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?_AddNode@NT@@YGXPAUHWND__@@PAUtagLVITEMW@@KPAUOBJ_NODE@1@@Z
_TEXT	SEGMENT
_hash$ = 8						; size = 4
_item$ = 12						; size = 4
?_AddNode@NT@@YGXPAUHWND__@@PAUtagLVITEMW@@KPAUOBJ_NODE@1@@Z PROC ; NT::_AddNode, COMDAT
; _hwnd$ = ecx
; _plv$ = edx

; 298  : {

	push	ebx
	push	ebp

; 299  : 	if (item->hash == hash)

	mov	ebp, DWORD PTR _hash$[esp+4]
	mov	ebx, ecx
	push	esi
	mov	esi, DWORD PTR _item$[esp+8]
	push	edi
	mov	edi, edx
	cmp	DWORD PTR [esi+24], ebp
	jne	SHORT $LN5@AddNode

; 300  : 	{
; 301  : 		plv->lParam = MINLONG_PTR|(LPARAM)item;//
; 302  : 		ListView_InsertItem(hwnd, plv);

	push	edi
	push	0
	mov	eax, esi
	push	4173					; 0000104dH
	or	eax, -2147483648			; 80000000H
	push	ebx
	mov	DWORD PTR [edi+32], eax
	call	DWORD PTR __imp__SendMessageW@16
$LN5@AddNode:

; 303  : 	}
; 304  : 
; 305  : 	if (item = item->Child)

	mov	esi, DWORD PTR [esi+16]
	jmp	SHORT $LN11@AddNode
$LL4@AddNode:

; 306  : 	{
; 307  : 		do 
; 308  : 		{
; 309  : 			_AddNode(hwnd, plv, hash, item);

	push	esi
	push	ebp
	mov	edx, edi
	mov	ecx, ebx
	call	?_AddNode@NT@@YGXPAUHWND__@@PAUtagLVITEMW@@KPAUOBJ_NODE@1@@Z ; NT::_AddNode

; 310  : 		} while (item = item->Next);

	mov	esi, DWORD PTR [esi+12]
$LN11@AddNode:
	test	esi, esi
	jne	SHORT $LL4@AddNode

; 311  : 	}
; 312  : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	8
?_AddNode@NT@@YGXPAUHWND__@@PAUtagLVITEMW@@KPAUOBJ_NODE@1@@Z ENDP ; NT::_AddNode
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?CompareFunc@NT@@YGHPAUOBJ_NODE@1@0H@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_q$ = 12						; size = 4
_iSubItem$ = 16						; size = 4
?CompareFunc@NT@@YGHPAUOBJ_NODE@1@0H@Z PROC		; NT::CompareFunc, COMDAT

; 316  : 	p = (OBJ_NODE*)((LPARAM)p & MAXLONG_PTR);

	mov	eax, DWORD PTR _p$[esp-4]
	mov	edx, 2147483647				; 7fffffffH

; 317  : 	q = (OBJ_NODE*)((LPARAM)q & MAXLONG_PTR);

	mov	ecx, DWORD PTR _q$[esp-4]
	and	eax, edx
	and	ecx, edx

; 318  : 	PCUNICODE_STRING pus1, pus2;
; 319  : 	switch(iSubItem)

	sub	DWORD PTR _iSubItem$[esp-4], 0
	je	SHORT $LN2@CompareFun

; 320  : 	{
; 321  : 	case 0:
; 322  : 		pus1 = p, pus2 = q;
; 323  : 		break;
; 324  : 	case 1:
; 325  : 		pus1 = p->TypeName, pus2 = q->TypeName;

	mov	eax, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR [ecx+20]
$LN2@CompareFun:

; 326  : 		break;
; 327  : 	default:__assume(0);
; 328  : 	}
; 329  : 
; 330  : 	return RtlCompareUnicodeString(pus1, pus2, FALSE);

	push	0
	push	ecx
	push	eax
	call	DWORD PTR __imp__RtlCompareUnicodeString@12

; 331  : }

	ret	12					; 0000000cH
?CompareFunc@NT@@YGHPAUOBJ_NODE@1@0H@Z ENDP		; NT::CompareFunc
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\stdafx.cpp
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?AddNode@MySplit@NT@@AAEPAUOBJ_NODE@2@PAU32@PBU_UNICODE_STRING@2@1@Z
_TEXT	SEGMENT
_Parent$ = 8						; size = 4
_TypeName$ = 12						; size = 4
_ObjectName$ = 16					; size = 4
?AddNode@MySplit@NT@@AAEPAUOBJ_NODE@2@PAU32@PBU_UNICODE_STRING@2@1@Z PROC ; NT::MySplit::AddNode, COMDAT
; _this$ = ecx

; 347  : 	{

	push	ebx
	push	esi
	mov	ebx, ecx

; 348  : 		OBJ_NODE* item = new OBJ_NODE;

	push	28					; 0000001cH
	pop	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	esi, eax
	xor	eax, eax
	test	esi, esi
	je	SHORT $LN1@AddNode

; 189  : 		RtlZeroMemory(this, sizeof OBJ_NODE);

	push	edi
	push	7
	pop	ecx
	mov	edi, esi
	rep stosd

; 349  : 
; 350  : 		if (!item) return 0;
; 351  : 
; 352  : 		RtlHashUnicodeString(TypeName, FALSE, HASH_STRING_ALGORITHM_X65599, &item->hash);

	lea	ecx, DWORD PTR [esi+24]
	push	ecx
	push	1
	push	eax
	push	DWORD PTR _TypeName$[esp+20]
	call	DWORD PTR __imp__RtlHashUnicodeString@16

; 353  : 
; 354  : 		if ((0 > RtlDuplicateUnicodeString(RTL_DUPLICATE_UNICODE_STRING_NULL_TERMINATE, ObjectName, item)) ||

	push	esi
	push	DWORD PTR _ObjectName$[esp+12]
	push	1
	call	DWORD PTR __imp__RtlDuplicateUnicodeString@12
	pop	edi
	test	eax, eax
	js	SHORT $LN4@AddNode
	push	DWORD PTR _TypeName$[esp+4]
	mov	ecx, ebx
	call	?InsertTypeName@MySplit@NT@@AAEPAU_UNICODE_STRING@2@PBU32@@Z ; NT::MySplit::InsertTypeName
	mov	DWORD PTR [esi+20], eax
	test	eax, eax
	je	SHORT $LN4@AddNode

; 359  : 		}
; 360  : 
; 361  : 		if (Parent)

	mov	ecx, DWORD PTR _Parent$[esp+4]
	test	ecx, ecx
	je	SHORT $LN5@AddNode

; 362  : 		{
; 363  : 			item->Next = Parent->Child;

	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [esi+12], eax

; 364  : 			Parent->Child = item;

	mov	DWORD PTR [ecx+16], esi

; 365  : 			item->Parent = Parent;

	mov	DWORD PTR [esi+8], ecx
	jmp	SHORT $LN6@AddNode
$LN5@AddNode:

; 366  : 		} else m_Root = item;

	mov	DWORD PTR [ebx+680], esi
$LN6@AddNode:

; 367  : 
; 368  : 		return item;

	mov	eax, esi
	jmp	SHORT $LN1@AddNode
$LN4@AddNode:

; 194  : 		RtlFreeUnicodeString(this);

	push	esi
	call	DWORD PTR __imp__RtlFreeUnicodeString@4
; File o:\vc\winZ\stdafx.cpp

; 26   : 	HeapFree(GetProcessHeap(), 0, Buffer);

	push	esi
	push	0
	call	DWORD PTR __imp__GetProcessHeap@0
	push	eax
	call	DWORD PTR __imp__HeapFree@12
; File o:\vc\Wobj\Wobj.cpp

; 358  : 			return 0;

	xor	eax, eax
$LN1@AddNode:

; 369  : 	}

	pop	esi
	pop	ebx
	ret	12					; 0000000cH
?AddNode@MySplit@NT@@AAEPAUOBJ_NODE@2@PAU32@PBU_UNICODE_STRING@2@1@Z ENDP ; NT::MySplit::AddNode
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\inc\misc.h
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\inc\misc.h
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\inc\misc.h
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?AddDirectory@MySplit@NT@@AAEXPAUOBJ_NODE@2@PAUHWND__@@PAUtagTVINSERTSTRUCTW@@PAU_OBJECT_ATTRIBUTES@2@@Z
_TEXT	SEGMENT
$T1 = -48						; size = 32
_rcb$ = -16						; size = 4
_hParent$1$ = -12					; size = 4
_Context$ = -8						; size = 4
_this$1$ = -4						; size = 4
_hDirectory$ = 8					; size = 4
_Parent$ = 8						; size = 4
_hwndTv$ = 12						; size = 4
_buffer$1$ = 16						; size = 4
_lpis$ = 16						; size = 4
_status$1$ = 20						; size = 4
_poa$ = 20						; size = 4
?AddDirectory@MySplit@NT@@AAEXPAUOBJ_NODE@2@PAUHWND__@@PAUtagTVINSERTSTRUCTW@@PAU_OBJECT_ATTRIBUTES@2@@Z PROC ; NT::MySplit::AddDirectory, COMDAT
; _this$ = ecx

; 372  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	ebx

; 373  : 		lpis->item.lParam = (LPARAM)Parent;

	mov	ebx, DWORD PTR _Parent$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR _lpis$[ebp]

; 374  : 		HTREEITEM hParent = TreeView_InsertItem(hwndTv, lpis);

	xor	esi, esi
	push	edi
	push	esi
	push	4402					; 00001132H
	push	DWORD PTR _hwndTv$[ebp]
	mov	DWORD PTR _this$1$[ebp], ecx
	mov	DWORD PTR [edi+44], ebx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _hParent$1$[ebp], eax

; 375  : 		if (!hParent) return;

	test	eax, eax
	je	$LN1@AddDirecto

; 376  : 
; 377  : 		HANDLE hDirectory;
; 378  : 		NTSTATUS status;
; 379  : 		if (0 > ZwOpenDirectoryObject(&hDirectory, DIRECTORY_QUERY, poa)) return;

	push	DWORD PTR _poa$[ebp]
	lea	eax, DWORD PTR _hDirectory$[ebp]
	push	1
	push	eax
	call	DWORD PTR __imp__ZwOpenDirectoryObject@12
	test	eax, eax
	js	$LN1@AddDirecto

; 380  : 
; 381  : 		DWORD Context = 0, rcb;
; 382  : 		LPVOID buffer = alloca(PAGE_SIZE);

	mov	eax, 4096				; 00001000H
	mov	DWORD PTR _Context$[ebp], esi
	call	__alloca_probe_16
	mov	eax, esp
	mov	DWORD PTR _buffer$1$[ebp], eax

; 383  : 
; 384  : 		if (Parent) do 

	test	ebx, ebx
	je	$LN3@AddDirecto
$LL4@AddDirecto:

; 385  : 		{
; 386  : 			status = ZwQueryDirectoryObject(hDirectory, buffer, PAGE_SIZE, FALSE, FALSE, &Context, &rcb);

	lea	ecx, DWORD PTR _rcb$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _Context$[ebp]
	push	ecx
	push	esi
	push	esi
	push	4096					; 00001000H
	push	eax
	push	DWORD PTR _hDirectory$[ebp]
	call	DWORD PTR __imp__ZwQueryDirectoryObject@28
	mov	DWORD PTR _status$1$[ebp], eax

; 387  : 			if (0 > status) break;

	test	eax, eax
	js	SHORT $LN3@AddDirecto

; 388  : 			DIRECTORY_BASIC_INFORMATION* pdbi = (DIRECTORY_BASIC_INFORMATION*)buffer;

	mov	eax, DWORD PTR _buffer$1$[ebp]

; 389  : 
; 390  : 			while (pdbi->ObjectName.Length)

	xor	ecx, ecx
	mov	esi, eax
	cmp	WORD PTR [eax], cx
	je	SHORT $LN2@AddDirecto
$LL5@AddDirecto:

; 391  : 			{
; 392  : 				lpis->hParent = hParent;

	mov	eax, DWORD PTR _hParent$1$[ebp]

; 393  : 				OBJ_NODE* item = AddNode(Parent, &pdbi->ObjectTypeName, &pdbi->ObjectName);

	mov	ecx, DWORD PTR _this$1$[ebp]
	mov	DWORD PTR [edi], eax
	lea	eax, DWORD PTR [esi+8]
	push	esi
	push	eax
	push	ebx
	call	?AddNode@MySplit@NT@@AAEPAUOBJ_NODE@2@PAU32@PBU_UNICODE_STRING@2@1@Z ; NT::MySplit::AddNode
	mov	ecx, eax

; 394  : 
; 395  : 				if (!item) 

	test	ecx, ecx
	je	SHORT $LN3@AddDirecto

; 396  : 				{
; 397  : 					status = STATUS_INSUFFICIENT_RESOURCES;
; 398  : 					break;
; 399  : 				}
; 400  : 
; 401  : 				if (item->hash == OBJ_NODE::t_Directory)

	cmp	DWORD PTR [ecx+24], -1538057139		; a4531c4dH
	jne	SHORT $LN12@AddDirecto
; File o:\vc\inc\misc.h

; 149  : 		RootDirectory = _RootDirectory;

	mov	eax, DWORD PTR _hDirectory$[ebp]
	mov	DWORD PTR $T1[ebp+4], eax

; 151  : 		SecurityDescriptor = _SecurityDescriptor;

	xor	eax, eax
	mov	DWORD PTR $T1[ebp+16], eax

; 152  : 		SecurityQualityOfService = _SecurityQualityOfService;

	mov	DWORD PTR $T1[ebp+20], eax
; File o:\vc\Wobj\Wobj.cpp

; 403  : 					AddDirectory(item, hwndTv, lpis, &CObjectAttributes(&pdbi->ObjectName, hDirectory));

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	push	edi
	push	DWORD PTR _hwndTv$[ebp]
; File o:\vc\inc\misc.h

; 147  : 		Length = sizeof OBJECT_ATTRIBUTES;

	mov	DWORD PTR $T1[ebp], 24			; 00000018H
; File o:\vc\Wobj\Wobj.cpp

; 403  : 					AddDirectory(item, hwndTv, lpis, &CObjectAttributes(&pdbi->ObjectName, hDirectory));

	push	ecx
	mov	ecx, DWORD PTR _this$1$[ebp]
; File o:\vc\inc\misc.h

; 148  : 		ObjectName = (PUNICODE_STRING)_ObjectName;

	mov	DWORD PTR $T1[ebp+8], esi

; 150  : 		Attributes = _Attributes;

	mov	DWORD PTR $T1[ebp+12], 64		; 00000040H
; File o:\vc\Wobj\Wobj.cpp

; 403  : 					AddDirectory(item, hwndTv, lpis, &CObjectAttributes(&pdbi->ObjectName, hDirectory));

	call	?AddDirectory@MySplit@NT@@AAEXPAUOBJ_NODE@2@PAUHWND__@@PAUtagTVINSERTSTRUCTW@@PAU_OBJECT_ATTRIBUTES@2@@Z ; NT::MySplit::AddDirectory
$LN12@AddDirecto:

; 404  : 				}
; 405  : 
; 406  : 				pdbi++;

	add	esi, 16					; 00000010H
	xor	eax, eax
	cmp	WORD PTR [esi], ax
	jne	SHORT $LL5@AddDirecto
	mov	eax, DWORD PTR _buffer$1$[ebp]
$LN2@AddDirecto:

; 407  : 			}
; 408  : 
; 409  : 		} while(status == STATUS_MORE_ENTRIES);

	cmp	DWORD PTR _status$1$[ebp], 261		; 00000105H
	push	0
	pop	esi
	je	$LL4@AddDirecto
$LN3@AddDirecto:

; 410  : 
; 411  : 
; 412  : 		ZwClose(hDirectory);

	push	DWORD PTR _hDirectory$[ebp]
	call	DWORD PTR __imp__ZwClose@4
$LN1@AddDirecto:

; 413  : 	}

	lea	esp, DWORD PTR [ebp-60]
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	16					; 00000010H
?AddDirectory@MySplit@NT@@AAEXPAUOBJ_NODE@2@PAUHWND__@@PAUtagTVINSERTSTRUCTW@@PAU_OBJECT_ATTRIBUTES@2@@Z ENDP ; NT::MySplit::AddDirectory
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?InsertTypeName@MySplit@NT@@AAEPAU_UNICODE_STRING@2@PBU32@@Z
_TEXT	SEGMENT
_TypeName$ = 8						; size = 4
?InsertTypeName@MySplit@NT@@AAEPAU_UNICODE_STRING@2@PBU32@@Z PROC ; NT::MySplit::InsertTypeName, COMDAT
; _this$ = ecx

; 416  : 	{

	push	esi
	push	edi

; 417  : 		int i = RTL_NUMBER_OF(m_TypeNames);

	push	64					; 00000040H
	pop	edi

; 418  : 		PUNICODE_STRING pus = m_TypeNames;

	lea	esi, DWORD PTR [ecx+40]
$LL4@InsertType:

; 419  : 		do 
; 420  : 		{
; 421  : 			if (!pus->Length)

	cmp	WORD PTR [esi], 0
	je	SHORT $LN9@InsertType

; 424  : 			}
; 425  : 
; 426  : 			if (RtlEqualUnicodeString(pus, TypeName, TRUE)) return pus;

	push	1
	push	DWORD PTR _TypeName$[esp+8]
	push	esi
	call	DWORD PTR __imp__RtlEqualUnicodeString@12
	test	al, al
	jne	SHORT $LN11@InsertType

; 427  : 
; 428  : 		} while (++pus, --i);

	add	esi, 8
	sub	edi, 1
	jne	SHORT $LL4@InsertType

; 429  : 
; 430  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN1@InsertType
$LN11@InsertType:

; 424  : 			}
; 425  : 
; 426  : 			if (RtlEqualUnicodeString(pus, TypeName, TRUE)) return pus;

	mov	eax, esi
	jmp	SHORT $LN1@InsertType
$LN9@InsertType:

; 422  : 			{
; 423  : 				return 0 <= RtlDuplicateUnicodeString(RTL_DUPLICATE_UNICODE_STRING_NULL_TERMINATE, TypeName, pus) ? pus : 0;

	push	esi
	push	DWORD PTR _TypeName$[esp+8]
	push	1
	call	DWORD PTR __imp__RtlDuplicateUnicodeString@12
	xor	ecx, ecx
	test	eax, eax
	cmovns	ecx, esi
	mov	eax, ecx
$LN1@InsertType:

; 431  : 	}

	pop	edi
	pop	esi
	ret	4
?InsertTypeName@MySplit@NT@@AAEPAU_UNICODE_STRING@2@PBU32@@Z ENDP ; NT::MySplit::InsertTypeName
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?DisplayNode@MySplit@NT@@AAEXPAU_UNICODE_STRING@2@@Z
_TEXT	SEGMENT
_lv$ = -64						; size = 60
_hash$ = -4						; size = 4
_TypeName$ = 8						; size = 4
?DisplayNode@MySplit@NT@@AAEXPAU_UNICODE_STRING@2@@Z PROC ; NT::MySplit::DisplayNode, COMDAT
; _this$ = ecx

; 434  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	esi
	push	edi

; 435  : 		ULONG hash;
; 436  : 		RtlHashUnicodeString(TypeName, FALSE, HASH_STRING_ALGORITHM_X65599, &hash);

	lea	eax, DWORD PTR _hash$[ebp]
	xor	edi, edi
	push	eax
	push	1
	push	edi
	push	DWORD PTR _TypeName$[ebp]
	mov	esi, ecx
	call	DWORD PTR __imp__RtlHashUnicodeString@16

; 437  : 		
; 438  : 		m_nSelColum = -1;

	or	DWORD PTR [esi+716], -1

; 439  : 		ListView_DeleteAllItems(_hwndLV);

	push	edi
	push	edi
	push	4105					; 00001009H
	push	DWORD PTR [esi+688]
	call	DWORD PTR __imp__SendMessageW@16

; 440  : 		LV_ITEM lv = { LVIF_TEXT|LVIF_PARAM|LVIF_IMAGE };

	push	56					; 00000038H
	lea	eax, DWORD PTR _lv$[ebp+4]
	mov	DWORD PTR _lv$[ebp], 7
	push	edi
	push	eax
	call	_memset

; 441  : 		lv.pszText = LPSTR_TEXTCALLBACK;

	or	DWORD PTR _lv$[ebp+20], -1
	add	esp, 12					; 0000000cH

; 442  : 		lv.iItem = MAXLONG;
; 443  : 		lv.iImage = GetImageIndexByHash(hash);

	mov	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _lv$[ebp+4], 2147483647	; 7fffffffH
	call	?GetImageIndexByHash@NT@@YGHK@Z		; NT::GetImageIndexByHash

; 444  : 
; 445  : 		_AddNode(_hwndLV, &lv, hash, m_Root);

	push	DWORD PTR [esi+680]
	lea	edx, DWORD PTR _lv$[ebp]
	mov	DWORD PTR _lv$[ebp+28], eax
	push	ecx
	mov	ecx, DWORD PTR [esi+688]
	call	?_AddNode@NT@@YGXPAUHWND__@@PAUtagLVITEMW@@KPAUOBJ_NODE@1@@Z ; NT::_AddNode
	pop	edi
	pop	esi

; 446  : 	}

	leave
	ret	4
?DisplayNode@MySplit@NT@@AAEXPAU_UNICODE_STRING@2@@Z ENDP ; NT::MySplit::DisplayNode
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?DisplayNode@MySplit@NT@@AAEXPAUOBJ_NODE@2@@Z
_TEXT	SEGMENT
_lv$1 = -60						; size = 60
_item$ = 8						; size = 4
?DisplayNode@MySplit@NT@@AAEXPAUOBJ_NODE@2@@Z PROC	; NT::MySplit::DisplayNode, COMDAT
; _this$ = ecx

; 450  : 		HWND hwnd = _hwndLV;
; 451  : 		m_nSelColum = -1;

	or	DWORD PTR [ecx+716], -1
	sub	esp, 60					; 0000003cH
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+688]

; 452  : 		ListView_DeleteAllItems(hwnd);

	xor	ebp, ebp
	push	ebp
	push	ebp
	push	4105					; 00001009H
	push	edi
	call	DWORD PTR __imp__SendMessageW@16

; 453  : 		if (item)

	mov	esi, DWORD PTR _item$[esp+68]
	test	esi, esi
	je	SHORT $LN3@DisplayNod

; 454  : 		{
; 455  : 			LV_ITEM lv = { LVIF_TEXT|LVIF_PARAM|LVIF_IMAGE };

	push	56					; 00000038H
	lea	eax, DWORD PTR _lv$1[esp+80]
	mov	DWORD PTR _lv$1[esp+76], 7
	push	ebp
	push	eax
	call	_memset

; 456  : 			lv.pszText = LPSTR_TEXTCALLBACK;

	or	DWORD PTR _lv$1[esp+104], -1
	add	esp, 12					; 0000000cH

; 457  : 			lv.iItem = MAXLONG;
; 458  : 			lv.iImage = I_IMAGECALLBACK;

	or	DWORD PTR _lv$1[esp+100], -1

; 459  : 
; 460  : 			if (item = item->Child) do 

	mov	esi, DWORD PTR [esi+16]
	mov	DWORD PTR _lv$1[esp+76], 2147483647	; 7fffffffH
	jmp	SHORT $LN11@DisplayNod
$LL4@DisplayNod:

; 461  : 			{
; 462  : 				//if (item->hash != OBJ_NODE::t_Directory)
; 463  : 				{
; 464  : 					lv.lParam = (LPARAM)item;
; 465  : 					ListView_InsertItem(hwnd, &lv); 

	lea	eax, DWORD PTR _lv$1[esp+72]
	mov	DWORD PTR _lv$1[esp+104], esi
	push	eax
	push	ebp
	push	4173					; 0000104dH
	push	edi
	call	DWORD PTR __imp__SendMessageW@16

; 466  : 				}
; 467  : 			} while (item = item->Next);

	mov	esi, DWORD PTR [esi+12]
$LN11@DisplayNod:
	test	esi, esi
	jne	SHORT $LL4@DisplayNod
$LN3@DisplayNod:
	pop	edi

; 468  : 		}
; 469  : 	}

	pop	esi
	pop	ebp
	add	esp, 60					; 0000003cH
	ret	4
?DisplayNode@MySplit@NT@@AAEXPAUOBJ_NODE@2@@Z ENDP	; NT::MySplit::DisplayNode
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?CreateChild@MySplit@NT@@EAEPAUHWND__@@HPAU3@HHHH@Z
_TEXT	SEGMENT
_this$1$ = -48						; size = 4
_lvclmn$1 = -44						; size = 44
_lt$ = 8						; size = 4
_hwndParent$ = 12					; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_nWidth$ = 24						; size = 4
_nHeight$ = 28						; size = 4
?CreateChild@MySplit@NT@@EAEPAUHWND__@@HPAU3@HHHH@Z PROC ; NT::MySplit::CreateChild, COMDAT
; _this$ = ecx

; 472  : 	{

	sub	esp, 48					; 00000030H

; 473  : 		HWND hwnd = 0;
; 474  : 
; 475  : 		if (lt)

	cmp	DWORD PTR _lt$[esp+44], 0
	push	ebx
	push	ebp
	mov	ebp, DWORD PTR __imp__SendMessageW@16
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR _this$1$[esp+64], edi
	je	SHORT $LN2@CreateChil

; 476  : 		{
; 477  : 			if (hwnd = CreateWindowExW(0, WC_TREEVIEW, 0, WS_CHILD|WS_VISIBLE|

	xor	esi, esi
	push	esi
	push	esi
	push	1
	push	DWORD PTR _hwndParent$[esp+72]
	push	DWORD PTR _nHeight$[esp+76]
	push	DWORD PTR _nWidth$[esp+80]
	push	DWORD PTR _y$[esp+84]
	push	DWORD PTR _x$[esp+88]
	push	1342177823				; 5000021fH
	push	esi
	push	OFFSET ??_C@_1BM@POPPCGII@?$AAS?$AAy?$AAs?$AAT?$AAr?$AAe?$AAe?$AAV?$AAi?$AAe?$AAw?$AA3?$AA2@
	push	esi
	call	DWORD PTR __imp__CreateWindowExW@48
	mov	ebx, eax
	test	ebx, ebx
	je	$LN8@CreateChil

; 478  : 				TVS_LINESATROOT|TVS_HASLINES|TVS_HASBUTTONS|TVS_DISABLEDRAGDROP|
; 479  : 				TVS_TRACKSELECT|TVS_EDITLABELS, x, y, nWidth, nHeight, hwndParent, (HMENU)1, 0, 0))
; 480  : 			{
; 481  : 				_hwndTV = hwnd;
; 482  : 
; 483  : 				if (_himl)

	mov	eax, DWORD PTR [edi+696]
	mov	DWORD PTR [edi+692], ebx
	test	eax, eax
	je	$LN6@CreateChil

; 484  : 				{
; 485  : 					 TreeView_SetImageList(hwnd, _himl, TVSIL_NORMAL);

	push	eax
	push	esi
	push	4361					; 00001109H
	push	ebx
	call	ebp

; 486  : 				}
; 487  : 			}
; 488  : 		}

	jmp	$LN6@CreateChil
$LN2@CreateChil:

; 489  : 		else
; 490  : 		{
; 491  : 			if (hwnd = CreateWindowExW(0, WC_LISTVIEW, 0, 

	xor	esi, esi
	push	esi
	push	esi
	push	2
	push	DWORD PTR _hwndParent$[esp+72]
	push	DWORD PTR _nHeight$[esp+76]
	push	DWORD PTR _nWidth$[esp+80]
	push	DWORD PTR _y$[esp+84]
	push	DWORD PTR _x$[esp+88]
	push	1345323085				; 5030004dH
	push	esi
	push	OFFSET ??_C@_1BM@FEGPDFAG@?$AAS?$AAy?$AAs?$AAL?$AAi?$AAs?$AAt?$AAV?$AAi?$AAe?$AAw?$AA3?$AA2@
	push	esi
	call	DWORD PTR __imp__CreateWindowExW@48
	mov	ebx, eax
	test	ebx, ebx
	je	$LN8@CreateChil

; 492  : 				WS_VISIBLE|WS_CHILD|LVS_REPORT|LVS_SHOWSELALWAYS|LVS_SHAREIMAGELISTS|LVS_SINGLESEL|WS_HSCROLL|WS_VSCROLL,
; 493  : 				x, y, nWidth, nHeight, hwndParent, (HMENU)2, 0, 0))
; 494  : 			{
; 495  : 				SetWindowTheme(hwnd, L"Explorer", 0);

	push	esi
	push	OFFSET ??_C@_1BC@PKEHKAEB@?$AAE?$AAx?$AAp?$AAl?$AAo?$AAr?$AAe?$AAr@
	push	ebx
	call	DWORD PTR __imp__SetWindowTheme@12

; 496  : 
; 497  : 
; 498  : 				_hwndLV = hwnd;
; 499  : 
; 500  : 				LV_COLUMN lvclmn = { LVCF_TEXT | LVCF_WIDTH };

	push	10					; 0000000aH
	pop	ecx
	mov	DWORD PTR [edi+688], ebx
	xor	eax, eax
	mov	DWORD PTR _lvclmn$1[esp+64], 6
	lea	edi, DWORD PTR _lvclmn$1[esp+68]
	rep stosd

; 501  : 				lvclmn.cx = nWidth >> 1;

	mov	eax, DWORD PTR _nWidth$[esp+60]

; 502  : 				lvclmn.pszText = L" Name ";
; 503  : 				ListView_InsertColumn(hwnd, lvclmn.iSubItem = 0, &lvclmn);

	mov	edi, 4193				; 00001061H
	sar	eax, 1
	mov	DWORD PTR _lvclmn$1[esp+72], eax
	lea	eax, DWORD PTR _lvclmn$1[esp+64]
	push	eax
	push	esi
	push	edi
	push	ebx
	mov	DWORD PTR _lvclmn$1[esp+92], OFFSET ??_C@_1O@LHLCHBPN@?$AA?5?$AAN?$AAa?$AAm?$AAe?$AA?5@
	mov	DWORD PTR _lvclmn$1[esp+100], esi
	call	ebp

; 504  : 				lvclmn.pszText = L" Type ";
; 505  : 				ListView_InsertColumn(hwnd, lvclmn.iSubItem = 1, &lvclmn);

	xor	ecx, ecx
	mov	DWORD PTR _lvclmn$1[esp+76], OFFSET ??_C@_1O@ICFKJBIG@?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?5@
	lea	eax, DWORD PTR _lvclmn$1[esp+64]
	inc	ecx
	push	eax
	push	ecx
	push	edi
	push	ebx
	mov	DWORD PTR _lvclmn$1[esp+100], ecx
	call	ebp

; 506  : 
; 507  : 				ListView_SetExtendedListViewStyle(hwnd, LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP|LVS_EX_LABELTIP|LVS_EX_DOUBLEBUFFER|LVS_EX_INFOTIP);

	push	82992					; 00014430H
	push	esi
	push	4150					; 00001036H
	push	ebx
	call	ebp

; 508  : 
; 509  : 				if (_himl)

	mov	edi, DWORD PTR _this$1$[esp+64]
	mov	eax, DWORD PTR [edi+696]
	test	eax, eax
	je	SHORT $LN7@CreateChil

; 510  : 				{
; 511  : 					ListView_SetImageList(hwnd, _himl, LVSIL_SMALL);

	push	eax
	push	1
	push	4099					; 00001003H
	push	ebx
	call	ebp
$LN7@CreateChil:

; 512  : 				}
; 513  : 
; 514  : 				PostMessage(hwndParent, WM_COMMAND, ID_REFRESH, 0);

	push	esi
	push	102					; 00000066H
	push	273					; 00000111H
	push	DWORD PTR _hwndParent$[esp+72]
	call	DWORD PTR __imp__PostMessageW@16
$LN6@CreateChil:

; 515  : 			}
; 516  : 		}
; 517  : 
; 518  : 		if (hwnd && _hFont)

	mov	eax, DWORD PTR [edi+700]
	test	eax, eax
	je	SHORT $LN8@CreateChil

; 519  : 		{
; 520  : 			SendMessage(hwnd, WM_SETFONT, (WPARAM)_hFont, 0);

	push	esi
	push	eax
	push	48					; 00000030H
	push	ebx
	call	ebp
$LN8@CreateChil:

; 521  : 		}
; 522  : 		return hwnd;

	pop	edi
	pop	esi
	pop	ebp
	mov	eax, ebx
	pop	ebx

; 523  : 	}

	add	esp, 48					; 00000030H
	ret	24					; 00000018H
?CreateChild@MySplit@NT@@EAEPAUHWND__@@HPAU3@HHHH@Z ENDP ; NT::MySplit::CreateChild
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ??1MySplit@NT@@EAE@XZ
_TEXT	SEGMENT
??1MySplit@NT@@EAE@XZ PROC				; NT::MySplit::~MySplit, COMDAT
; _this$ = ecx

; 526  : 	{

	push	ebx
	push	esi
	push	edi
	mov	esi, ecx

; 527  : 		int i = RTL_NUMBER_OF(m_TypeNames);

	push	64					; 00000040H
	pop	ebx
	mov	DWORD PTR [esi], OFFSET ??_7MySplit@NT@@6B@

; 528  : 		PUNICODE_STRING pus = m_TypeNames;

	lea	edi, DWORD PTR [esi+40]
$LL4@MySplit:

; 529  : 		do RtlFreeUnicodeString(pus++); while (--i);

	push	edi
	add	edi, 8
	call	DWORD PTR __imp__RtlFreeUnicodeString@4
	sub	ebx, 1
	jne	SHORT $LL4@MySplit

; 530  : 
; 531  : 		i = RTL_NUMBER_OF(m_hi);

	push	32					; 00000020H
	pop	edi
	lea	ebx, DWORD PTR [esi+680]
$LL7@MySplit:

; 532  : 		do 
; 533  : 		{
; 534  : 			if (m_hi[--i]) DestroyIcon(m_hi[i]);

	lea	ebx, DWORD PTR [ebx-4]
	dec	edi
	cmp	DWORD PTR [ebx], 0
	je	SHORT $LN5@MySplit
	push	DWORD PTR [ebx]
	call	DWORD PTR __imp__DestroyIcon@4
$LN5@MySplit:

; 535  : 		} while (i);

	test	edi, edi
	jne	SHORT $LL7@MySplit

; 536  : 
; 537  : 		if (_himl)

	mov	eax, DWORD PTR [esi+696]
	pop	edi
	pop	esi
	pop	ebx
	test	eax, eax
	je	SHORT $LN9@MySplit

; 538  : 		{
; 539  : 			ImageList_Destroy(_himl);

	push	eax
	call	DWORD PTR __imp__ImageList_Destroy@4
$LN9@MySplit:

; 540  : 		}
; 541  : 	}

	ret	0
??1MySplit@NT@@EAE@XZ ENDP				; NT::MySplit::~MySplit
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\ctrl.cpp
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?DeleteContents@MySplit@NT@@AAEXXZ
_TEXT	SEGMENT
?DeleteContents@MySplit@NT@@AAEXXZ PROC			; NT::MySplit::DeleteContents, COMDAT
; _this$ = ecx

; 544  : 	{

	push	ebx
	push	esi
	mov	esi, ecx

; 545  : 		if (m_Root)

	xor	ebx, ebx
	cmp	DWORD PTR [esi+680], ebx
	je	SHORT $LN2@DeleteCont

; 546  : 		{
; 547  : 			TreeView_DeleteAllItems(_hwndTV);

	push	-65536					; ffff0000H
	push	ebx
	push	4353					; 00001101H
	push	DWORD PTR [esi+692]
	call	DWORD PTR __imp__SendMessageW@16

; 548  : 			DeleteNode(m_Root);

	mov	ecx, DWORD PTR [esi+680]
	call	?DeleteNode@NT@@YGXPAUOBJ_NODE@1@@Z	; NT::DeleteNode

; 549  : 			m_Root = 0;

	mov	DWORD PTR [esi+680], ebx
$LN2@DeleteCont:

; 550  : 		}
; 551  : 		m_item = 0;

	mov	DWORD PTR [esi+684], ebx

; 552  : 		m_pTypeName = 0;

	mov	DWORD PTR [esi+708], ebx

; 553  : 		ZGLOBALS::getMainFrame()->EnableCmd(ID_COPY, FALSE);

	call	?getMainFrame@_ZGLOBALS@NT@@SGPAVZSDIFrameWnd@2@XZ ; NT::_ZGLOBALS::getMainFrame
; File o:\vc\winZ\ctrl.cpp

; 40   : 	SendMessage(_hwnd, TB_ENABLEBUTTON, cmd, bEnable);  

	push	ebx
	push	105					; 00000069H
	push	1025					; 00000401H
	push	DWORD PTR [eax+40]
	call	DWORD PTR __imp__SendMessageW@16
; File o:\vc\Wobj\Wobj.cpp

; 554  : 		m_hash = 0;

	mov	DWORD PTR [esi+712], ebx
	pop	esi
	pop	ebx

; 555  : 	}

	ret	0
?DeleteContents@MySplit@NT@@AAEXXZ ENDP			; NT::MySplit::DeleteContents
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\ctrl.cpp
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\ctrl.cpp
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\ctrl.cpp
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\ctrl.cpp
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?WindowProc@MySplit@NT@@EAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_ncm$1 = -596						; size = 504
_lv$2 = -92						; size = 60
$T3 = -64						; size = 32
_oa$4 = -56						; size = 24
_stack$1$ = -32						; size = 4
_lpsz$1$ = -28						; size = 4
_hSymLink$5 = -24					; size = 4
_hObject$6 = -20					; size = 4
_rcb$7 = -20						; size = 4
_ObjectName$8 = -16					; size = 8
_us$9 = -16						; size = 8
_lParam$1$ = -8						; size = 4
_lpsz$1$ = -8						; size = 4
_cchTextMax$1$ = -8					; size = 4
_m$10 = -8						; size = 4
_cb$1$ = -4						; size = 4
_this$1$ = -4						; size = 4
_item$2$ = -4						; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_item$3$ = 20						; size = 4
_pszText$1$ = 20					; size = 4
_pWnd$1$ = 20						; size = 4
_lParam$ = 20						; size = 4
?WindowProc@MySplit@NT@@EAEJPAUHWND__@@IIJ@Z PROC	; NT::MySplit::WindowProc, COMDAT
; _this$ = ecx

; 558  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 596				; 00000254H

; 559  : 		int i;
; 560  : 		PWSTR pszText;
; 561  : 		int cchTextMax;
; 562  : 		OBJ_NODE* item;
; 563  : 		UINT mask;
; 564  : 		ZSDIFrameWnd* pWnd;
; 565  : 
; 566  : 		switch (uMsg)

	mov	eax, DWORD PTR _uMsg$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	DWORD PTR _this$1$[ebp], edi
	sub	eax, 1
	je	$LN17@WindowProc
	sub	eax, 1
	je	$LN19@WindowProc
	sub	eax, 76					; 0000004cH
	je	$LN22@WindowProc
	sub	eax, 195				; 000000c3H
	jne	$LN96@WindowProc

; 767  : 		case WM_COMMAND:
; 768  : 			switch (wParam)

	mov	eax, DWORD PTR _wParam$[ebp]
	sub	eax, 102				; 00000066H
	je	$LN56@WindowProc
	sub	eax, 1
	je	$LN57@WindowProc
	sub	eax, 1
	je	$LN59@WindowProc
	sub	eax, 1
	je	$LN60@WindowProc
	sub	eax, 1
	jne	$LN96@WindowProc

; 803  : 			case ID_SECURITY:
; 804  : 				if (m_item)

	mov	ecx, DWORD PTR [edi+684]
	test	ecx, ecx
	je	$LN96@WindowProc

; 805  : 				{
; 806  : 					UNICODE_STRING ObjectName;
; 807  : 					ObjectName.Buffer = (PWSTR)alloca(ObjectName.MaximumLength = (USHORT)m_item->get_FullName(0, 0));

	xor	ebx, ebx
	push	ebx
	push	ebx
	call	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z	; NT::OBJ_NODE::get_FullName
	movzx	eax, ax
	mov	WORD PTR _ObjectName$8[ebp+2], ax
	mov	esi, eax
	call	__alloca_probe_16

; 808  : 					m_item->get_FullName(ObjectName.Buffer, ObjectName.MaximumLength);

	mov	ecx, DWORD PTR [edi+684]
	mov	eax, esp
	push	esi
	push	eax
	mov	DWORD PTR _ObjectName$8[ebp+4], eax
	call	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z	; NT::OBJ_NODE::get_FullName

; 809  : 					ObjectName.Length = ObjectName.MaximumLength - sizeof(WCHAR);

	mov	eax, DWORD PTR _ObjectName$8[ebp+2]

; 810  : 
; 811  : 					OBJECT_ATTRIBUTES oa = { sizeof(oa), 0, &ObjectName };

	lea	edi, DWORD PTR _oa$4[ebp+12]
	add	eax, -2					; fffffffeH
	mov	DWORD PTR _oa$4[ebp], 24		; 00000018H
	mov	WORD PTR _ObjectName$8[ebp], ax

; 812  : 					HANDLE hObject;
; 813  : 
; 814  : 					NTSTATUS (* Open)(PHANDLE , ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES );
; 815  : 					switch (m_hash)

	mov	ecx, -1796440603			; 94ec7de5H
	lea	eax, DWORD PTR _ObjectName$8[ebp]
	mov	DWORD PTR _oa$4[ebp+4], ebx
	mov	DWORD PTR _oa$4[ebp+8], eax
	xor	eax, eax
	stosd
	stosd
	stosd
	mov	edi, DWORD PTR _this$1$[ebp]
	mov	eax, DWORD PTR [edi+712]
	cmp	eax, ecx
	ja	SHORT $LN83@WindowProc
	je	SHORT $LN73@WindowProc
	cmp	eax, 357674468				; 1551ade4H
	je	SHORT $LN75@WindowProc
	cmp	eax, 867521508				; 33b553e4H
	je	SHORT $LN70@WindowProc
	cmp	eax, 1447492822				; 5646fcd6H
	je	SHORT $LN77@WindowProc
	cmp	eax, 1815741532				; 6c3a045cH
	je	SHORT $LN76@WindowProc
	cmp	eax, 2139285420				; 7f82e7acH
	jne	SHORT $LN78@WindowProc

; 829  : 					case OBJ_NODE::t_SymbolicLink:
; 830  : 						Open = ZwOpenSymbolicLinkObject;

	mov	eax, DWORD PTR __imp__ZwOpenSymbolicLinkObject@12

; 831  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN76@WindowProc:

; 844  : 					case OBJ_NODE::t_KeyedEvent:
; 845  : 						Open = ZwOpenKeyedEvent;

	mov	eax, DWORD PTR __imp__ZwOpenKeyedEvent@12

; 846  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN77@WindowProc:

; 847  : 					case OBJ_NODE::t_Device:
; 848  : 						Open = MyOpenDevice;

	mov	eax, OFFSET ?MyOpenDevice@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z ; NT::MyOpenDevice

; 849  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN70@WindowProc:

; 826  : 					case OBJ_NODE::t_Semaphore:
; 827  : 						Open = ZwOpenSemaphore;

	mov	eax, DWORD PTR __imp__ZwOpenSemaphore@12

; 828  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN75@WindowProc:

; 841  : 					case OBJ_NODE::t_WindowStation:
; 842  : 						Open = ZwOpenWindowStation;

	mov	eax, OFFSET ?ZwOpenWindowStation@NT@@YGJPAPAXKPAU_OBJECT_ATTRIBUTES@1@@Z ; NT::ZwOpenWindowStation

; 843  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN73@WindowProc:

; 835  : 					case OBJ_NODE::t_Timer:
; 836  : 						Open = ZwOpenTimer;

	mov	eax, DWORD PTR __imp__ZwOpenTimer@12

; 837  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN83@WindowProc:

; 812  : 					HANDLE hObject;
; 813  : 
; 814  : 					NTSTATUS (* Open)(PHANDLE , ACCESS_MASK DesiredAccess, POBJECT_ATTRIBUTES );
; 815  : 					switch (m_hash)

	cmp	eax, -1538057139			; a4531c4dH
	je	SHORT $LN67@WindowProc
	cmp	eax, -1132346558			; bc81c342H
	je	SHORT $LN74@WindowProc
	cmp	eax, -1122992827			; bd107d45H
	je	SHORT $LN69@WindowProc
	cmp	eax, -217838406				; f3040cbaH
	je	SHORT $LN68@WindowProc
	cmp	eax, -72794789				; fba93d5bH
	je	SHORT $LN72@WindowProc
$LN78@WindowProc:

; 850  : 					default: return 0;

	xor	eax, eax
	jmp	$LN1@WindowProc
$LN72@WindowProc:

; 832  : 					case OBJ_NODE::t_Mutant:
; 833  : 						Open = ZwOpenMutant;

	mov	eax, DWORD PTR __imp__ZwOpenMutant@12

; 834  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN68@WindowProc:

; 819  : 						break;
; 820  : 					case OBJ_NODE::t_Event:
; 821  : 						Open = ZwOpenEvent;

	mov	eax, DWORD PTR __imp__ZwOpenEvent@12

; 822  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN69@WindowProc:

; 823  : 					case OBJ_NODE::t_Section:
; 824  : 						Open = ZwOpenSection;

	mov	eax, DWORD PTR __imp__ZwOpenSection@12

; 825  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN74@WindowProc:

; 838  : 					case OBJ_NODE::t_IoCompletion:
; 839  : 						Open = ZwOpenIoCompletion;

	mov	eax, DWORD PTR __imp__ZwOpenIoCompletion@12

; 840  : 						break;

	jmp	SHORT $LN15@WindowProc
$LN67@WindowProc:

; 816  : 					{
; 817  : 					case OBJ_NODE::t_Directory:
; 818  : 						Open = ZwOpenDirectoryObject;

	mov	eax, DWORD PTR __imp__ZwOpenDirectoryObject@12
$LN15@WindowProc:

; 851  : 					}
; 852  : 
; 853  : 					NTSTATUS status = Open(&hObject, READ_CONTROL, &oa);

	lea	ecx, DWORD PTR _oa$4[ebp]
	push	ecx
	push	131072					; 00020000H
	lea	ecx, DWORD PTR _hObject$6[ebp]
	push	ecx
	call	eax
	mov	esi, eax

; 854  : 					if (0 > status)

	test	esi, esi
	jns	SHORT $LN79@WindowProc

; 855  : 					{
; 856  : 						ShowNTStatus(ZGLOBALS::getMainHWND(), status, ObjectName.Buffer);

	push	DWORD PTR _ObjectName$8[ebp+4]
	call	?getMainHWND@_ZGLOBALS@NT@@SGPAUHWND__@@XZ ; NT::_ZGLOBALS::getMainHWND
	mov	edx, esi
	mov	ecx, eax
	call	?ShowNTStatus@NT@@YGXPAUHWND__@@JPB_W@Z	; NT::ShowNTStatus

; 857  : 					}

	jmp	$LN96@WindowProc
$LN79@WindowProc:

; 858  : 					else
; 859  : 					{
; 860  : 						ShowSD(hObject, ObjectName.Buffer, ZGLOBALS::get()->hwndMain, _hFont2);

	mov	esi, DWORD PTR [edi+704]
	call	?get@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPAU12@XZ ; NT::RTL_FRAME<NT::_ZGLOBALS>::get
	mov	edx, DWORD PTR _ObjectName$8[ebp+4]
	mov	ecx, DWORD PTR _hObject$6[ebp]
	push	esi
	mov	eax, DWORD PTR [eax+44]
	push	eax
	call	?ShowSD@NT@@YGXPAXPB_WPAUHWND__@@PAUHFONT__@@@Z ; NT::ShowSD

; 861  : 						ZwClose(hObject);

	push	DWORD PTR _hObject$6[ebp]
	call	DWORD PTR __imp__ZwClose@4
	jmp	$LN96@WindowProc
$LN60@WindowProc:

; 785  : 			case ID_COPY:
; 786  : 				if (m_item)

	xor	ebx, ebx
	cmp	DWORD PTR [edi+684], ebx
	je	$LN96@WindowProc

; 787  : 				{
; 788  : 					if (OpenClipboard(hwnd))

	push	DWORD PTR _hwnd$[ebp]
	call	DWORD PTR __imp__OpenClipboard@4
	test	eax, eax
	je	$LN96@WindowProc

; 789  : 					{
; 790  : 						EmptyClipboard();

	call	DWORD PTR __imp__EmptyClipboard@0

; 791  : 						DWORD cb = m_item->get_FullName(0, 0);

	mov	ecx, DWORD PTR [edi+684]
	push	ebx
	push	ebx
	call	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z	; NT::OBJ_NODE::get_FullName
	mov	ebx, eax

; 792  : 						if (HGLOBAL hg = GlobalAlloc(GMEM_MOVEABLE, cb))

	push	ebx
	push	2
	call	DWORD PTR __imp__GlobalAlloc@8
	mov	esi, eax
	test	esi, esi
	je	SHORT $LN64@WindowProc

; 793  : 						{
; 794  : 							PWSTR sz = (PWSTR)GlobalLock(hg);

	push	esi
	call	DWORD PTR __imp__GlobalLock@4

; 795  : 							m_item->get_FullName(sz, cb);

	mov	ecx, DWORD PTR [edi+684]
	push	ebx
	push	eax
	call	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z	; NT::OBJ_NODE::get_FullName

; 796  : 							GlobalUnlock(hg);

	push	esi
	call	DWORD PTR __imp__GlobalUnlock@4

; 797  : 							if (!SetClipboardData(CF_UNICODETEXT, hg)) GlobalFree(hg);

	push	esi
	push	13					; 0000000dH
	call	DWORD PTR __imp__SetClipboardData@8
	test	eax, eax
	jne	SHORT $LN64@WindowProc
	push	esi
	call	DWORD PTR __imp__GlobalFree@4
$LN64@WindowProc:

; 798  : 						}
; 799  : 						CloseClipboard();

	call	DWORD PTR __imp__CloseClipboard@0

; 800  : 					}
; 801  : 				}
; 802  : 				break;

	jmp	$LN96@WindowProc
$LN59@WindowProc:

; 780  : 			case ID_GRID:
; 781  : 				ListView_SetExtendedListViewStyle(_hwndLV, (m_bGrid = !m_bGrid) ? 

	mov	cl, BYTE PTR [edi+721]
	test	cl, cl
	sete	al
	mov	BYTE PTR [edi+721], al
	xor	eax, eax
	test	cl, cl
	sete	al
	add	eax, 82992				; 00014430H
	push	eax
	push	0
	push	4150					; 00001036H
	push	DWORD PTR [edi+688]
	call	DWORD PTR __imp__SendMessageW@16

; 782  : 					LVS_EX_GRIDLINES|LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP|LVS_EX_LABELTIP|LVS_EX_DOUBLEBUFFER|LVS_EX_INFOTIP
; 783  : 					: LVS_EX_FULLROWSELECT|LVS_EX_HEADERDRAGDROP|LVS_EX_LABELTIP|LVS_EX_DOUBLEBUFFER|LVS_EX_INFOTIP);
; 784  : 				break;

	jmp	$LN96@WindowProc
$LN57@WindowProc:

; 773  : 			case ID_TOGGLE:
; 774  : 				m_bFullName = !m_bFullName;

	cmp	BYTE PTR [edi+720], 0
	sete	al
	mov	BYTE PTR [edi+720], al

; 775  : 				if (m_pTypeName)

	mov	eax, DWORD PTR [edi+708]
	test	eax, eax
	je	$LN96@WindowProc

; 776  : 				{
; 777  : 					DisplayNode(m_pTypeName);

	push	eax
	call	?DisplayNode@MySplit@NT@@AAEXPAU_UNICODE_STRING@2@@Z ; NT::MySplit::DisplayNode

; 778  : 				}
; 779  : 				break;

	jmp	$LN96@WindowProc
$LN56@WindowProc:

; 769  : 			{
; 770  : 			case ID_REFRESH:
; 771  : 				Refresh();

	call	?Refresh@MySplit@NT@@QAEXXZ		; NT::MySplit::Refresh

; 772  : 				break;

	jmp	$LN96@WindowProc
$LN22@WindowProc:

; 592  : 		case WM_NOTIFY:
; 593  : 			switch (((NMHDR*)lParam)->code)

	mov	ebx, DWORD PTR _lParam$[ebp]
	mov	eax, DWORD PTR [ebx+8]
	cmp	eax, -452				; fffffe3cH
	je	$LN23@WindowProc
	cmp	eax, -451				; fffffe3dH
	je	$LN28@WindowProc
	cmp	eax, -177				; ffffff4fH
	je	$LN33@WindowProc
	cmp	eax, -158				; ffffff62H
	je	SHORT $LN47@WindowProc
	cmp	eax, -108				; ffffff94H
	je	SHORT $LN45@WindowProc
	cmp	eax, -101				; ffffff9bH
	jne	$LN18@WindowProc

; 722  : 
; 723  : 			case LVN_ITEMCHANGED:
; 724  : 				if ((((LPNMLISTVIEW)lParam)->uNewState & LVIS_SELECTED) && !(((LPNMLISTVIEW)lParam)->uOldState & LVIS_SELECTED))

	test	BYTE PTR [ebx+20], 2
	je	$LN18@WindowProc
	test	BYTE PTR [ebx+24], 2
	jne	$LN18@WindowProc

; 725  : 				{
; 726  : 					item = (OBJ_NODE*)(((LPNMLISTVIEW)lParam)->lParam & MAXLONG_PTR);

	mov	eax, DWORD PTR [ebx+40]
	and	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _item$3$[ebp], eax

; 727  : __setitem:

	jmp	$__setitem$103
$LN45@WindowProc:

; 701  : 			case LVN_COLUMNCLICK:
; 702  : 				i = ((LPNMLISTVIEW)lParam)->iSubItem;

	mov	eax, DWORD PTR [ebx+16]

; 703  : 				if (m_nSelColum != i)

	cmp	DWORD PTR [edi+716], eax
	je	$LN18@WindowProc

; 704  : 				{
; 705  : 					m_nSelColum = i;
; 706  : 					ListView_SortItems(((NMHDR*)lParam)->hwndFrom, CompareFunc, i);

	push	OFFSET ?CompareFunc@NT@@YGHPAUOBJ_NODE@1@0H@Z ; NT::CompareFunc
	push	eax
	push	4144					; 00001030H
	mov	DWORD PTR [edi+716], eax
	push	DWORD PTR [ebx]
	call	DWORD PTR __imp__SendMessageW@16

; 707  : 				}
; 708  : 				break;

	jmp	$LN18@WindowProc
$LN47@WindowProc:

; 709  : 
; 710  : 			case LVN_GETINFOTIP:
; 711  : 				{
; 712  : 					LVITEM lv = { LVIF_PARAM, ((LPNMLVGETINFOTIP)lParam)->iItem };

	mov	eax, DWORD PTR [ebx+24]
	push	52					; 00000034H
	mov	DWORD PTR _lv$2[ebp+4], eax
	lea	eax, DWORD PTR _lv$2[ebp+8]
	push	0
	push	eax
	mov	DWORD PTR _lv$2[ebp], 4
	call	_memset
	add	esp, 12					; 0000000cH

; 713  : 					if (ListView_GetItem(_hwndLV, &lv))

	lea	eax, DWORD PTR _lv$2[ebp]
	push	eax
	push	0
	push	4171					; 0000104bH
	push	DWORD PTR [edi+688]
	call	DWORD PTR __imp__SendMessageW@16
	test	eax, eax
	je	$LN18@WindowProc

; 714  : 					{
; 715  : 						if (item = (OBJ_NODE*)(lv.lParam& MAXLONG_PTR))

	mov	ecx, DWORD PTR _lv$2[ebp+32]
	and	ecx, 2147483647				; 7fffffffH
	je	$LN18@WindowProc

; 716  : 						{
; 717  : 							item->get_FullName(((LPNMLVGETINFOTIP)lParam)->pszText, ((LPNMLVGETINFOTIP)lParam)->cchTextMax << 1);

	mov	eax, DWORD PTR [ebx+20]
	add	eax, eax
	push	eax
	push	DWORD PTR [ebx+16]

; 718  : 						}
; 719  : 					}
; 720  : 				}
; 721  : 				break;

	jmp	$LN100@WindowProc
$LN33@WindowProc:

; 639  : 			case LVN_GETDISPINFO:
; 640  : 				wParam = ((NMLVDISPINFO*)lParam)->item.lParam;

	mov	ecx, DWORD PTR [ebx+44]
	mov	DWORD PTR _wParam$[ebp], ecx

; 641  : 				item = (OBJ_NODE*)(wParam & MAXLONG_PTR);

	and	ecx, 2147483647				; 7fffffffH

; 642  : 				mask = ((NMLVDISPINFO*)lParam)->item.mask;
; 643  : 
; 644  : 				if (mask & LVIF_IMAGE)

	test	BYTE PTR [ebx+12], 2
	mov	DWORD PTR _item$2$[ebp], ecx
	je	SHORT $LN34@WindowProc

; 645  : 				{
; 646  : 					((NMLVDISPINFO*)lParam)->item.iImage = GetImageIndexByHash(item->hash);

	mov	ecx, DWORD PTR [ecx+24]
	call	?GetImageIndexByHash@NT@@YGHK@Z		; NT::GetImageIndexByHash
	mov	ecx, DWORD PTR _item$2$[ebp]
	mov	DWORD PTR [ebx+40], eax
$LN34@WindowProc:

; 647  : 				}
; 648  : 
; 649  : 				if ((mask & LVIF_TEXT) && (DWORD)((NMLVDISPINFO*)lParam)->item.iSubItem < 2)

	test	BYTE PTR [ebx+12], 1
	je	$LN18@WindowProc
	cmp	DWORD PTR [ebx+20], 2
	jae	$LN18@WindowProc

; 650  : 				{
; 651  : 					pszText = ((NMLVDISPINFO*)lParam)->item.pszText;
; 652  : 					cchTextMax = ((NMLVDISPINFO*)lParam)->item.cchTextMax - 1;

	mov	edx, DWORD PTR [ebx+36]

; 653  : 					pszText[cchTextMax - 1] = 0;

	xor	esi, esi
	mov	eax, DWORD PTR [ebx+32]
	dec	edx
	mov	DWORD PTR _pszText$1$[ebp], eax
	mov	DWORD PTR _cchTextMax$1$[ebp], edx
	mov	WORD PTR [eax+edx*2-2], si

; 654  : 
; 655  : 					switch(((NMLVDISPINFO*)lParam)->item.iSubItem)

	mov	eax, DWORD PTR [ebx+20]
	sub	eax, esi
	je	$LN36@WindowProc

; 665  : 						}
; 666  : 						break;
; 667  : 
; 668  : 					case 1:
; 669  : 						_snwprintf(pszText, cchTextMax, L"%wZ", item->TypeName);

	push	DWORD PTR [ecx+20]
	push	OFFSET ??_C@_17JJNMJOBL@?$AA?$CF?$AAw?$AAZ@
	push	edx
	push	DWORD PTR _pszText$1$[ebp]
	call	DWORD PTR __imp___snwprintf

; 670  : 						if (item->hash == OBJ_NODE::t_SymbolicLink)

	mov	eax, DWORD PTR _item$2$[ebp]
	add	esp, 16					; 00000010H
	cmp	DWORD PTR [eax+24], 2139285420		; 7f82e7acH
	jne	$LN18@WindowProc

; 671  : 						{
; 672  : 							PVOID stack = alloca(guz);

	movzx	eax, BYTE PTR ?guz@NT@@3EC		; NT::guz
	call	__alloca_probe_16
	mov	DWORD PTR _stack$1$[ebp], esp

; 673  : 							DWORD cb = item->get_FullName(0, 0), rcb = 0x100;

	push	esi
	push	esi
	mov	esi, DWORD PTR _item$2$[ebp]
	mov	ecx, esi
	call	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z	; NT::OBJ_NODE::get_FullName
	mov	DWORD PTR _cb$1$[ebp], eax
	mov	DWORD PTR _rcb$7[ebp], 256		; 00000100H

; 674  : 							PWSTR lpsz = (PWSTR)alloca(cb);

	call	__alloca_probe_16
	mov	eax, esp

; 675  : 							item->get_FullName(lpsz, cb);

	mov	ecx, esi
	push	DWORD PTR _cb$1$[ebp]
	mov	DWORD PTR _lpsz$1$[ebp], eax
	push	eax
	call	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z	; NT::OBJ_NODE::get_FullName

; 676  : 							HANDLE hSymLink;
; 677  : 							NTSTATUS status;
; 678  : 							if (0 <= ZwOpenSymbolicLinkObject(&hSymLink, SYMBOLIC_LINK_QUERY, &CObjectAttributes(lpsz)))

	mov	esi, DWORD PTR _lpsz$1$[ebp]
	lea	ecx, DWORD PTR $T3[ebp]
	sub	esp, 16					; 00000010H
	push	esi
	call	??0CObjectAttributes@NT@@QAE@PB_WPAXK11@Z ; NT::CObjectAttributes::CObjectAttributes
	push	eax
	push	1
	lea	eax, DWORD PTR _hSymLink$5[ebp]
	push	eax
	call	DWORD PTR __imp__ZwOpenSymbolicLinkObject@12
	test	eax, eax
	js	$LN18@WindowProc

; 679  : 							{
; 680  : 								UNICODE_STRING us = {0, (WORD)cb, lpsz};

	mov	edx, DWORD PTR _cb$1$[ebp]
	xor	eax, eax
	mov	WORD PTR _us$9[ebp], ax
	mov	ax, dx
	mov	DWORD PTR _us$9[ebp+4], esi
	mov	esi, DWORD PTR _stack$1$[ebp]
	mov	WORD PTR _us$9[ebp+2], ax
$LL10@WindowProc:

; 681  : 								do 
; 682  : 								{
; 683  : 									if (us.MaximumLength < rcb)

	movzx	ecx, ax
	mov	eax, DWORD PTR _rcb$7[ebp]
	cmp	ecx, eax
	jae	SHORT $LN42@WindowProc

; 684  : 									{
; 685  : 										us.MaximumLength = (WORD)RtlPointerToOffset(us.Buffer = (PWSTR)alloca(rcb - cb), stack);

	sub	eax, edx
	call	__alloca_probe_16
	mov	ecx, esp
	mov	eax, esi
	sub	eax, ecx
	mov	DWORD PTR _us$9[ebp+4], ecx
	mov	WORD PTR _us$9[ebp+2], ax
$LN42@WindowProc:

; 686  : 									}
; 687  : 									if (0 <= (status = ZwQuerySymbolicLinkObject(hSymLink, &us, &rcb)))

	lea	eax, DWORD PTR _rcb$7[ebp]
	push	eax
	lea	eax, DWORD PTR _us$9[ebp]
	push	eax
	push	DWORD PTR _hSymLink$5[ebp]
	call	DWORD PTR __imp__ZwQuerySymbolicLinkObject@12
	test	eax, eax
	jns	SHORT $LN94@WindowProc

; 690  : 									}
; 691  : 								} while(status == STATUS_BUFFER_TOO_SMALL);

	cmp	eax, -1073741789			; c0000023H
	jne	SHORT $LN93@WindowProc
	mov	ax, WORD PTR _us$9[ebp+2]
	mov	edx, DWORD PTR _cb$1$[ebp]
	jmp	SHORT $LL10@WindowProc
$LN94@WindowProc:

; 688  : 									{
; 689  : 										_snwprintf(pszText, cchTextMax, L"%wZ", &us);

	lea	eax, DWORD PTR _us$9[ebp]
	push	eax
	push	OFFSET ??_C@_17JJNMJOBL@?$AA?$CF?$AAw?$AAZ@
	push	DWORD PTR _cchTextMax$1$[ebp]
	push	DWORD PTR _pszText$1$[ebp]
	call	DWORD PTR __imp___snwprintf
	add	esp, 16					; 00000010H
$LN93@WindowProc:

; 692  : 
; 693  : 								ZwClose(hSymLink);

	push	DWORD PTR _hSymLink$5[ebp]
	call	DWORD PTR __imp__ZwClose@4

; 694  : 							}
; 695  : 						}
; 696  : 						break;

	jmp	$LN18@WindowProc
$LN36@WindowProc:

; 656  : 					{
; 657  : 					case 0:
; 658  : 						if (0 > (LPARAM)wParam && m_bFullName)

	cmp	DWORD PTR _wParam$[ebp], esi
	jge	SHORT $LN37@WindowProc
	cmp	BYTE PTR [edi+720], 0
	je	SHORT $LN37@WindowProc

; 659  : 						{
; 660  : 							item->get_FullName(pszText, (cchTextMax-1)<<1);

	lea	eax, DWORD PTR [edx*2-2]
	push	eax
	push	DWORD PTR _pszText$1$[ebp]
$LN100@WindowProc:

; 862  : 					}
; 863  : 				}
; 864  : 				break;
; 865  : 			}
; 866  : 			break;
; 867  : 		}
; 868  : 		return ZSplitWndV::WindowProc(hwnd, uMsg, wParam, lParam);

	call	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z	; NT::OBJ_NODE::get_FullName
	jmp	$LN18@WindowProc
$LN37@WindowProc:

; 661  : 						}
; 662  : 						else
; 663  : 						{
; 664  : 							_snwprintf(pszText, cchTextMax - 1, L"%wZ", (PCUNICODE_STRING)item);

	push	ecx
	push	OFFSET ??_C@_17JJNMJOBL@?$AA?$CF?$AAw?$AAZ@
	lea	eax, DWORD PTR [edx-1]
	push	eax
	push	DWORD PTR _pszText$1$[ebp]

; 697  : 					default: __assume(0) ;
; 698  : 					}
; 699  : 				}
; 700  : 				break;

	jmp	$LN101@WindowProc
$LN28@WindowProc:

; 610  : 						}
; 611  : 					}
; 612  : 				}
; 613  : 				break;
; 614  : 			case TVN_SELCHANGED:
; 615  : 				lParam = ((LPNMTREEVIEW)lParam)->itemNew.lParam;

	mov	ebx, DWORD PTR [ebx+92]

; 616  : 				if ((ULONG_PTR)lParam - (ULONG_PTR)m_TypeNames < sizeof(m_TypeNames))

	mov	eax, ebx
	sub	eax, edi
	mov	DWORD PTR _lParam$1$[ebp], ebx
	sub	eax, 40					; 00000028H
	push	ebx
	cmp	eax, 512				; 00000200H
	jae	SHORT $LN29@WindowProc

; 617  : 				{
; 618  : 					DisplayNode((PUNICODE_STRING)lParam);

	call	?DisplayNode@MySplit@NT@@AAEXPAU_UNICODE_STRING@2@@Z ; NT::MySplit::DisplayNode

; 619  : 					m_pTypeName = (PUNICODE_STRING)lParam;

	mov	DWORD PTR [edi+708], ebx
$LN31@WindowProc:

; 626  : 					{
; 627  : 						goto __setitem;
; 628  : 					}
; 629  : 				}
; 630  : 
; 631  : 				m_item = 0;

	and	DWORD PTR [edi+684], 0

; 632  : 				pWnd = ZGLOBALS::getMainFrame();

	call	?getMainFrame@_ZGLOBALS@NT@@SGPAVZSDIFrameWnd@2@XZ ; NT::_ZGLOBALS::getMainFrame
; File o:\vc\winZ\ctrl.cpp

; 40   : 	SendMessage(_hwnd, TB_ENABLEBUTTON, cmd, bEnable);  

	mov	edi, DWORD PTR __imp__SendMessageW@16
; File o:\vc\Wobj\Wobj.cpp

; 632  : 				pWnd = ZGLOBALS::getMainFrame();

	mov	ebx, eax
; File o:\vc\winZ\ctrl.cpp

; 40   : 	SendMessage(_hwnd, TB_ENABLEBUTTON, cmd, bEnable);  

	push	0
	push	105					; 00000069H
	push	1025					; 00000401H
	push	DWORD PTR [ebx+40]
	call	edi
; File o:\vc\Wobj\Wobj.cpp

; 634  : 				pWnd->EnableCmd(ID_TOGGLE, m_pTypeName != 0);

	mov	eax, DWORD PTR _this$1$[ebp]
	lea	ecx, DWORD PTR [ebx+40]
	xor	edx, edx
	cmp	DWORD PTR [eax+708], edx
	setne	dl
	push	edx
	push	103					; 00000067H
	call	?EnableCmd@ZToolBar@NT@@QAEXIH@Z	; NT::ZToolBar::EnableCmd

; 635  : 				SendMessage(pWnd->ZStatusBar::getHWND(), SB_SETICON, (WPARAM)-1, 0);

	push	0
	push	-1
	push	1039					; 0000040fH
	push	DWORD PTR [ebx+52]
	call	edi

; 636  : 				pWnd->SetStatusText(SB_SIMPLEID, L"");

	push	OFFSET ??_C@_11LOCGONAA@@
	push	ecx
	mov	ecx, ebx
	call	?SetStatusText@ZSDIFrameWnd@NT@@QAEXHPB_W@Z ; NT::ZSDIFrameWnd::SetStatusText

; 637  : 				m_hash = 0;

	mov	edi, DWORD PTR _this$1$[ebp]

; 638  : 				break;

	mov	ebx, DWORD PTR _lParam$1$[ebp]
	and	DWORD PTR [edi+712], 0
	jmp	$LN18@WindowProc
$LN29@WindowProc:

; 620  : 				}
; 621  : 				else
; 622  : 				{
; 623  : 					DisplayNode((OBJ_NODE*)lParam);

	call	?DisplayNode@MySplit@NT@@AAEXPAUOBJ_NODE@2@@Z ; NT::MySplit::DisplayNode

; 624  : 					m_pTypeName = 0;

	and	DWORD PTR [edi+708], 0

; 625  : 					if (item = (OBJ_NODE*)lParam)

	mov	eax, ebx
	mov	DWORD PTR _item$3$[ebp], eax
	test	ebx, ebx
	je	SHORT $LN31@WindowProc
$__setitem$103:

; 728  : 					DWORD cb = item->get_FullName(0, 0);

	push	0
	push	0
	mov	ecx, eax
	call	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z	; NT::OBJ_NODE::get_FullName
	mov	esi, eax

; 729  : 					PWSTR lpsz = (PWSTR)alloca(cb);

	call	__alloca_probe_16
	mov	eax, esp

; 730  : 					item->get_FullName(lpsz, cb);

	push	esi
	mov	esi, DWORD PTR _item$3$[ebp]
	mov	ecx, esi
	push	eax
	mov	DWORD PTR _lpsz$1$[ebp], eax
	call	?get_FullName@OBJ_NODE@NT@@QAEJPA_WJ@Z	; NT::OBJ_NODE::get_FullName

; 731  : 					pWnd = ZGLOBALS::getMainFrame();

	call	?getMainFrame@_ZGLOBALS@NT@@SGPAVZSDIFrameWnd@2@XZ ; NT::_ZGLOBALS::getMainFrame

; 732  : 					if (!m_item)

	cmp	DWORD PTR [edi+684], 0
	mov	edx, eax
	mov	DWORD PTR _pWnd$1$[ebp], edx
	jne	SHORT $LN52@WindowProc
; File o:\vc\winZ\ctrl.cpp

; 40   : 	SendMessage(_hwnd, TB_ENABLEBUTTON, cmd, bEnable);  

	push	1
	push	105					; 00000069H
	push	1025					; 00000401H
	push	DWORD PTR [edx+40]
	call	DWORD PTR __imp__SendMessageW@16
	mov	edx, DWORD PTR _pWnd$1$[ebp]
$LN52@WindowProc:
; File o:\vc\Wobj\Wobj.cpp

; 737  : 					if (m_hash != item->hash)

	mov	ecx, DWORD PTR [esi+24]
	cmp	DWORD PTR [edi+712], ecx
	je	$LN53@WindowProc

; 738  : 					{
; 739  : 						SendMessage(pWnd->ZStatusBar::getHWND(), SB_SETICON, (WPARAM)-1, (LPARAM)m_hi[GetImageIndexByHash(m_hash = item->hash)]);

	mov	DWORD PTR [edi+712], ecx
	call	?GetImageIndexByHash@NT@@YGHK@Z		; NT::GetImageIndexByHash
	push	DWORD PTR [edi+eax*4+552]
	push	-1
	push	1039					; 0000040fH
	push	DWORD PTR [edx+52]
	call	DWORD PTR __imp__SendMessageW@16

; 740  : 						
; 741  : 						BOOL bEnableSec = FALSE;
; 742  : 						switch (m_hash)

	mov	eax, DWORD PTR [edi+712]
	mov	ecx, -1796440603			; 94ec7de5H
	xor	edx, edx
	cmp	eax, ecx
	ja	SHORT $LN82@WindowProc
	je	SHORT $LN54@WindowProc
	cmp	eax, 357674468				; 1551ade4H
	je	SHORT $LN54@WindowProc
	cmp	eax, 867521508				; 33b553e4H
	je	SHORT $LN54@WindowProc
	cmp	eax, 1447492822				; 5646fcd6H
	je	SHORT $LN54@WindowProc
	cmp	eax, 1815741532				; 6c3a045cH
	je	SHORT $LN54@WindowProc
	cmp	eax, 2139285420				; 7f82e7acH
	je	SHORT $LN54@WindowProc
	jmp	SHORT $LN11@WindowProc
$LN82@WindowProc:
	cmp	eax, -1538057139			; a4531c4dH
	je	SHORT $LN54@WindowProc
	cmp	eax, -1132346558			; bc81c342H
	je	SHORT $LN54@WindowProc
	cmp	eax, -1122992827			; bd107d45H
	je	SHORT $LN54@WindowProc
	cmp	eax, -217838406				; f3040cbaH
	je	SHORT $LN54@WindowProc
	cmp	eax, -72794789				; fba93d5bH
	jne	SHORT $LN11@WindowProc
$LN54@WindowProc:

; 743  : 						{
; 744  : 						case OBJ_NODE::t_Directory:
; 745  : 						case OBJ_NODE::t_Event:
; 746  : 						case OBJ_NODE::t_Section:
; 747  : 						case OBJ_NODE::t_Semaphore:
; 748  : 						case OBJ_NODE::t_SymbolicLink:
; 749  : 						case OBJ_NODE::t_Mutant:
; 750  : 						case OBJ_NODE::t_Timer:
; 751  : 						case OBJ_NODE::t_IoCompletion:
; 752  : 						case OBJ_NODE::t_WindowStation:
; 753  : 						case OBJ_NODE::t_KeyedEvent:
; 754  : 						case OBJ_NODE::t_Device:
; 755  : 							bEnableSec = TRUE;

	xor	edx, edx
	inc	edx
$LN11@WindowProc:

; 756  : 							break;
; 757  : 						}
; 758  : 						pWnd->EnableCmd(ID_SECURITY, bEnableSec);

	mov	ecx, DWORD PTR _pWnd$1$[ebp]
	push	edx
	push	106					; 0000006aH
	add	ecx, 40					; 00000028H
	call	?EnableCmd@ZToolBar@NT@@QAEXIH@Z	; NT::ZToolBar::EnableCmd
$LN53@WindowProc:

; 759  : 					}
; 760  : 					pWnd->SetStatusText(SB_SIMPLEID, lpsz);

	push	DWORD PTR _lpsz$1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pWnd$1$[ebp]
	call	?SetStatusText@ZSDIFrameWnd@NT@@QAEXHPB_W@Z ; NT::ZSDIFrameWnd::SetStatusText
; File o:\vc\winZ\ctrl.cpp

; 40   : 	SendMessage(_hwnd, TB_ENABLEBUTTON, cmd, bEnable);  

	mov	eax, DWORD PTR _pWnd$1$[ebp]
	push	0
	push	103					; 00000067H
	push	1025					; 00000401H
	push	DWORD PTR [eax+40]
	call	DWORD PTR __imp__SendMessageW@16
; File o:\vc\Wobj\Wobj.cpp

; 762  : 					m_item = item;

	mov	DWORD PTR [edi+684], esi
	jmp	$LN18@WindowProc
$LN23@WindowProc:

; 594  : 			{
; 595  : 			case TVN_GETDISPINFOW:
; 596  : 				if (((LPNMTVDISPINFO)lParam)->item.mask & TVIF_TEXT)

	test	BYTE PTR [ebx+12], 1
	je	$LN18@WindowProc

; 597  : 				{
; 598  : 					item = (OBJ_NODE*)((LPNMTVDISPINFO)lParam)->item.lParam;
; 599  : 					pszText = ((LPNMTVDISPINFO)lParam)->item.pszText;
; 600  : 					if (cchTextMax = ((LPNMTVDISPINFO)lParam)->item.cchTextMax - 1)

	mov	eax, DWORD PTR [ebx+32]
	mov	edx, DWORD PTR [ebx+48]
	mov	ecx, DWORD PTR [ebx+28]
	sub	eax, 1
	je	$LN18@WindowProc

; 601  : 					{
; 602  : 						pszText[cchTextMax - 1] = 0;

	xor	esi, esi
	mov	WORD PTR [ecx+eax*2-2], si

; 603  : 						if (item->Parent)

	cmp	DWORD PTR [edx+8], esi
	je	SHORT $LN26@WindowProc

; 604  : 						{
; 605  : 							_snwprintf(pszText, cchTextMax - 1, L"%wZ", (PCUNICODE_STRING)item);

	push	edx
	push	OFFSET ??_C@_17JJNMJOBL@?$AA?$CF?$AAw?$AAZ@
	dec	eax
	push	eax
	push	ecx
$LN101@WindowProc:

; 862  : 					}
; 863  : 				}
; 864  : 				break;
; 865  : 			}
; 866  : 			break;
; 867  : 		}
; 868  : 		return ZSplitWndV::WindowProc(hwnd, uMsg, wParam, lParam);

	call	DWORD PTR __imp___snwprintf
	add	esp, 16					; 00000010H
	jmp	$LN18@WindowProc
$LN26@WindowProc:

; 606  : 						}
; 607  : 						else
; 608  : 						{
; 609  : 							*pszText = L'\\';

	push	92					; 0000005cH
	pop	eax
	mov	WORD PTR [ecx], ax

; 763  : 				}
; 764  : 				break;
; 765  : 			}
; 766  : 			break;

	jmp	$LN18@WindowProc
$LN19@WindowProc:

; 584  : 				}
; 585  : 			}
; 586  : 			break;
; 587  : 		case WM_DESTROY:
; 588  : 			DeleteContents();

	call	?DeleteContents@MySplit@NT@@AAEXXZ	; NT::MySplit::DeleteContents

; 589  : 			if (_hFont2)DeleteObject(_hFont2);

	mov	eax, DWORD PTR [edi+704]
	mov	esi, DWORD PTR __imp__DeleteObject@4
	test	eax, eax
	je	SHORT $LN20@WindowProc
	push	eax
	call	esi
$LN20@WindowProc:

; 590  : 			if (_hFont)DeleteObject(_hFont);

	mov	eax, DWORD PTR [edi+700]
	test	eax, eax
	je	$LN96@WindowProc
	push	eax
	call	esi

; 591  : 			break;

	jmp	$LN96@WindowProc
$LN17@WindowProc:

; 567  : 		{
; 568  : 		case WM_CREATE:
; 569  : 			{
; 570  : 				ULONG m;
; 571  : 				RtlGetNtVersionNumbers(&m, 0, 0);

	xor	ebx, ebx
	lea	eax, DWORD PTR _m$10[ebp]
	push	ebx
	push	ebx
	push	eax
	call	DWORD PTR __imp__RtlGetNtVersionNumbers@12

; 572  : 
; 573  : 				NONCLIENTMETRICS ncm = { m < 6 ? sizeof(NONCLIENTMETRICS) - 4 : sizeof(NONCLIENTMETRICS) };

	cmp	DWORD PTR _m$10[ebp], 6
	mov	esi, 504				; 000001f8H
	push	500					; 000001f4H
	sbb	eax, eax
	and	eax, -4					; fffffffcH
	add	eax, esi
	mov	DWORD PTR _ncm$1[ebp], eax
	lea	eax, DWORD PTR _ncm$1[ebp+4]
	push	ebx
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 574  : 				if (SystemParametersInfo(SPI_GETNONCLIENTMETRICS, sizeof(ncm), &ncm, 0))

	lea	eax, DWORD PTR _ncm$1[ebp]
	push	ebx
	push	eax
	push	esi
	push	41					; 00000029H
	call	DWORD PTR __imp__SystemParametersInfoW@16
	test	eax, eax
	je	SHORT $LN96@WindowProc

; 575  : 				{
; 576  : 					ncm.lfCaptionFont.lfHeight = -ncm.iMenuHeight;

	mov	eax, DWORD PTR _ncm$1[ebp+220]

; 577  : 					ncm.lfCaptionFont.lfWeight = FW_NORMAL;
; 578  : 					ncm.lfCaptionFont.lfQuality = CLEARTYPE_QUALITY;
; 579  : 					ncm.lfCaptionFont.lfPitchAndFamily = FIXED_PITCH|FF_MODERN;
; 580  : 					wcscpy(ncm.lfCaptionFont.lfFaceName, L"Courier New");

	lea	edi, DWORD PTR _ncm$1[ebp+52]
	neg	eax
	mov	DWORD PTR _ncm$1[ebp+40], 400		; 00000190H
	push	6
	mov	DWORD PTR _ncm$1[ebp+24], eax
	mov	esi, OFFSET ??_C@_1BI@GNONBDFP@?$AAC?$AAo?$AAu?$AAr?$AAi?$AAe?$AAr?$AA?5?$AAN?$AAe?$AAw@
	pop	ecx
	mov	WORD PTR _ncm$1[ebp+50], 12549		; 00003105H

; 581  : 					
; 582  : 					_hFont = CreateFontIndirect(&ncm.lfStatusFont);

	lea	eax, DWORD PTR _ncm$1[ebp+316]
	rep movsd
	mov	esi, DWORD PTR __imp__CreateFontIndirectW@4
	push	eax
	call	esi
	mov	edi, DWORD PTR _this$1$[ebp]
	mov	DWORD PTR [edi+700], eax

; 583  : 					_hFont2 = CreateFontIndirect(&ncm.lfCaptionFont);

	lea	eax, DWORD PTR _ncm$1[ebp+24]
	push	eax
	call	esi
	mov	DWORD PTR [edi+704], eax
$LN96@WindowProc:

; 862  : 					}
; 863  : 				}
; 864  : 				break;
; 865  : 			}
; 866  : 			break;
; 867  : 		}
; 868  : 		return ZSplitWndV::WindowProc(hwnd, uMsg, wParam, lParam);

	mov	ebx, DWORD PTR _lParam$[ebp]
$LN18@WindowProc:
	push	ebx
	push	DWORD PTR _wParam$[ebp]
	mov	ecx, edi
	push	DWORD PTR _uMsg$[ebp]
	push	DWORD PTR _hwnd$[ebp]
	call	?WindowProc@ZSplitWnd@NT@@UAEJPAUHWND__@@IIJ@Z ; NT::ZSplitWnd::WindowProc
$LN1@WindowProc:

; 869  : 	}

	lea	esp, DWORD PTR [ebp-608]
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	16					; 00000010H
?WindowProc@MySplit@NT@@EAEJPAUHWND__@@IIJ@Z ENDP	; NT::MySplit::WindowProc
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\ctrl.cpp
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?Refresh@MySplit@NT@@QAEXXZ
_TEXT	SEGMENT
_hash$1 = -72						; size = 4
_tv$ = -68						; size = 68
?Refresh@MySplit@NT@@QAEXXZ PROC			; NT::MySplit::Refresh, COMDAT
; _this$ = ecx

; 874  : 	{

	sub	esp, 72					; 00000048H
	push	ebx
	push	ebp
	push	esi
	push	edi
	mov	edi, ecx

; 875  : 		DeleteContents();

	call	?DeleteContents@MySplit@NT@@AAEXXZ	; NT::MySplit::DeleteContents

; 876  : 		TVINSERTSTRUCT tv;
; 877  : 		tv.hParent = TVI_ROOT;
; 878  : 		tv.hInsertAfter = TVI_FIRST;
; 879  : 		tv.item.mask = TVIF_PARAM|TVIF_TEXT|TVIF_IMAGE|TVIF_SELECTEDIMAGE;
; 880  : 		tv.item.pszText = LPSTR_TEXTCALLBACK;

	or	DWORD PTR _tv$[esp+112], -1

; 881  : 		tv.item.iImage = 1;
; 882  : 		tv.item.iSelectedImage = 2;
; 883  : 
; 884  : 		static UNICODE_STRING root;
; 885  : 		//STATIC_UNICODE_STRING(root, "\\");
; 886  : 		STATIC_UNICODE_STRING_(Directory);
; 887  : 		STATIC_OBJECT_ATTRIBUTES(oaRoot, "\\");
; 888  : 		AddDirectory(AddNode(0, &Directory, &root), _hwndTV, &tv, &oaRoot);

	xor	eax, eax
	mov	esi, DWORD PTR [edi+692]
	mov	ebx, -65536				; ffff0000H
	push	2
	pop	ebp
	push	OFFSET ?root@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@A ; `NT::MySplit::Refresh'::`2'::root
	push	OFFSET ?Directory@?1??Refresh@MySplit@NT@@QAEXXZ@4U_UNICODE_STRING@3@B ; `NT::MySplit::Refresh'::`2'::Directory
	push	eax
	mov	ecx, edi
	mov	DWORD PTR _tv$[esp+100], ebx
	mov	DWORD PTR _tv$[esp+104], -65535		; ffff0001H
	mov	DWORD PTR _tv$[esp+108], 39		; 00000027H
	mov	DWORD PTR _tv$[esp+132], 1
	mov	DWORD PTR _tv$[esp+136], ebp
	call	?AddNode@MySplit@NT@@AAEPAUOBJ_NODE@2@PAU32@PBU_UNICODE_STRING@2@1@Z ; NT::MySplit::AddNode
	push	OFFSET ?oaRoot@?1??Refresh@MySplit@NT@@QAEXXZ@4U_OBJECT_ATTRIBUTES@3@A ; `NT::MySplit::Refresh'::`2'::oaRoot
	lea	ecx, DWORD PTR _tv$[esp+92]
	push	ecx
	push	esi
	push	eax
	mov	ecx, edi
	call	?AddDirectory@MySplit@NT@@AAEXPAUOBJ_NODE@2@PAUHWND__@@PAUtagTVINSERTSTRUCTW@@PAU_OBJECT_ATTRIBUTES@2@@Z ; NT::MySplit::AddDirectory

; 889  : 		DisplayNode(m_Root);

	push	DWORD PTR [edi+680]
	mov	ecx, edi
	call	?DisplayNode@MySplit@NT@@AAEXPAUOBJ_NODE@2@@Z ; NT::MySplit::DisplayNode

; 890  : 		HTREEITEM hitem = TreeView_GetChild(_hwndTV, TVI_ROOT);

	push	ebx
	mov	ebx, DWORD PTR __imp__SendMessageW@16
	push	4
	push	4362					; 0000110aH
	push	DWORD PTR [edi+692]
	call	ebx
	mov	esi, eax

; 891  : 		TreeView_Expand(_hwndTV, hitem, TVE_EXPAND);

	push	esi
	push	ebp
	push	4354					; 00001102H
	push	DWORD PTR [edi+692]
	call	ebx

; 892  : 		TreeView_SelectItem(_hwndTV, hitem);

	push	esi
	push	9
	push	4363					; 0000110bH
	push	DWORD PTR [edi+692]
	call	ebx

; 893  : 
; 894  : 		tv.item.iImage = 0;

	xor	ebp, ebp

; 895  : 		tv.item.iSelectedImage = 0;
; 896  : 		tv.item.pszText = L"All Types";

	mov	DWORD PTR _tv$[esp+112], OFFSET ??_C@_1BE@LAECKHMF@?$AAA?$AAl?$AAl?$AA?5?$AAT?$AAy?$AAp?$AAe?$AAs@

; 897  : 		tv.item.lParam = 0;
; 898  : 		tv.hParent = TVI_ROOT;
; 899  : 		tv.hParent = TreeView_InsertItem(_hwndTV, &tv);

	lea	eax, DWORD PTR _tv$[esp+88]
	mov	DWORD PTR _tv$[esp+120], ebp
	push	eax
	push	ebp
	push	4402					; 00001132H
	push	DWORD PTR [edi+692]
	mov	DWORD PTR _tv$[esp+140], ebp
	mov	DWORD PTR _tv$[esp+148], ebp
	mov	DWORD PTR _tv$[esp+104], -65536		; ffff0000H
	call	ebx
	mov	DWORD PTR _tv$[esp+88], eax

; 900  : 		PUNICODE_STRING pus = m_TypeNames;

	lea	esi, DWORD PTR [edi+40]

; 901  : 		tv.hInsertAfter = TVI_LAST;

	mov	DWORD PTR _tv$[esp+92], -65534		; ffff0002H
	jmp	SHORT $LN13@Refresh
$LL2@Refresh:

; 903  : 		{
; 904  : 			ULONG hash;
; 905  : 			RtlHashUnicodeString(pus, FALSE, HASH_STRING_ALGORITHM_X65599, &hash);

	lea	eax, DWORD PTR _hash$1[esp+88]
	push	eax
	push	1
	push	ebp
	push	esi
	call	DWORD PTR __imp__RtlHashUnicodeString@16

; 906  : 			tv.item.iSelectedImage = tv.item.iImage = GetImageIndexByHash(hash);

	mov	ecx, DWORD PTR _hash$1[esp+88]
	call	?GetImageIndexByHash@NT@@YGHK@Z		; NT::GetImageIndexByHash
	mov	DWORD PTR _tv$[esp+120], eax
	mov	DWORD PTR _tv$[esp+124], eax

; 907  : 			tv.item.pszText = pus->Buffer;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _tv$[esp+112], eax

; 908  : 			tv.item.lParam = (LPARAM)pus;
; 909  : 			TreeView_InsertItem(_hwndTV, &tv);

	lea	eax, DWORD PTR _tv$[esp+88]
	push	eax
	push	ebp
	push	4402					; 00001132H
	push	DWORD PTR [edi+692]
	mov	DWORD PTR _tv$[esp+148], esi
	call	ebx

; 910  : 			pus++;

	add	esi, 8
$LN13@Refresh:

; 902  : 		while (pus->Length)

	cmp	WORD PTR [esi], bp
	jne	SHORT $LL2@Refresh

; 911  : 		}
; 912  : 
; 913  : 		ZSDIFrameWnd* pWnd = ZGLOBALS::getMainFrame();

	call	?getMainFrame@_ZGLOBALS@NT@@SGPAVZSDIFrameWnd@2@XZ ; NT::_ZGLOBALS::getMainFrame

; 914  : 		SendMessage(pWnd->ZStatusBar::getHWND(), SB_SETICON, (WPARAM)-1, 0);

	push	ebp
	mov	esi, eax
	push	-1
	push	1039					; 0000040fH
	push	DWORD PTR [esi+52]
	call	ebx

; 915  : 		pWnd->SetStatusText(SB_SIMPLEID, L"");

	push	OFFSET ??_C@_11LOCGONAA@@
	push	ecx
	mov	ecx, esi
	call	?SetStatusText@ZSDIFrameWnd@NT@@QAEXHPB_W@Z ; NT::ZSDIFrameWnd::SetStatusText
; File o:\vc\winZ\ctrl.cpp

; 40   : 	SendMessage(_hwnd, TB_ENABLEBUTTON, cmd, bEnable);  

	push	ebp
	push	105					; 00000069H
	mov	ebp, 1025				; 00000401H
	push	ebp
	push	DWORD PTR [esi+40]
	call	ebx
	push	0
	push	106					; 0000006aH
	push	ebp
	push	DWORD PTR [esi+40]
	call	ebx
; File o:\vc\Wobj\Wobj.cpp

; 918  : 		m_hash = 0;

	and	DWORD PTR [edi+712], 0

; 919  : 		m_item = 0;

	and	DWORD PTR [edi+684], 0
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 920  : 	}

	add	esp, 72					; 00000048H
	ret	0
?Refresh@MySplit@NT@@QAEXXZ ENDP			; NT::MySplit::Refresh
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winz\split.h
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winz\split.h
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ??0MySplit@NT@@QAE@H@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_t$ = 8							; size = 4
??0MySplit@NT@@QAE@H@Z PROC				; NT::MySplit::MySplit, COMDAT
; _this$ = ecx

; 923  : 	{

	push	ecx
	push	ebx
	push	ebp
	push	esi
	push	edi
; File o:\vc\winz\split.h

; 56   : 	ZSplitWndV(int t) : ZSplitWnd(t)

	push	DWORD PTR _t$[esp+16]
; File o:\vc\Wobj\Wobj.cpp

; 923  : 	{

	mov	esi, ecx
	mov	DWORD PTR _this$1$[esp+24], esi
; File o:\vc\winz\split.h

; 56   : 	ZSplitWndV(int t) : ZSplitWnd(t)

	call	??0ZSplitWnd@NT@@QAE@H@Z		; NT::ZSplitWnd::ZSplitWnd
; File o:\vc\Wobj\Wobj.cpp

; 930  : 		m_nSelColum = -1;

	or	DWORD PTR [esi+716], -1

; 931  : 		m_item = 0;
; 932  : 		RtlZeroMemory(m_TypeNames, sizeof(m_TypeNames));

	lea	eax, DWORD PTR [esi+40]
	xor	ebx, ebx
	mov	DWORD PTR [esi], OFFSET ??_7MySplit@NT@@6B@
	push	512					; 00000200H
	push	ebx
	push	eax
	mov	DWORD PTR [esi+700], ebx
	mov	DWORD PTR [esi+704], ebx
	mov	DWORD PTR [esi+680], ebx
	mov	DWORD PTR [esi+712], ebx
	mov	WORD PTR [esi+720], 1
	mov	DWORD PTR [esi+684], ebx
	call	_memset

; 933  : 		RtlZeroMemory(m_hi, sizeof(m_hi));

	push	128					; 00000080H
	lea	edi, DWORD PTR [esi+552]
	push	ebx
	push	edi
	call	_memset
	add	esp, 24					; 00000018H

; 934  : 		static WORD id[] = { 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 325, 330, 366, 367, 321 };
; 935  : 		_himl = CreateIL((HINSTANCE)&__ImageBase, 16, 16, ILC_COLOR32, RTL_NUMBER_OF(id), id, m_hi);

	push	24					; 00000018H
	pop	ebp

; 116  : 	HIMAGELIST himl = ImageList_Create(cx, cy, flags, n, 0);

	push	ebx
	push	ebp
	push	32					; 00000020H
	push	16					; 00000010H
	push	16					; 00000010H
	call	DWORD PTR __imp__ImageList_Create@20
	mov	ebx, eax

; 117  : 
; 118  : 	if (himl)

	test	ebx, ebx
	je	SHORT $LN7@MySplit
	mov	esi, OFFSET ?id@?1???0MySplit@NT@@QAE@H@Z@4PAGA ; `NT::MySplit::MySplit'::`2'::id
$LL8@MySplit:

; 119  : 	{
; 120  : 		do 
; 121  : 		{
; 122  : 			if (HICON hi = (HICON)LoadImage(hInstance, MAKEINTRESOURCE(*pID++), IMAGE_ICON, 0, 0, 0))

	movzx	ecx, WORD PTR [esi]
	xor	eax, eax
	push	eax
	push	eax
	push	eax
	push	1
	push	ecx
	push	OFFSET ___ImageBase
	lea	esi, DWORD PTR [esi+2]
	call	DWORD PTR __imp__LoadImageW@24
	test	eax, eax
	je	SHORT $LN6@MySplit

; 123  : 			{
; 124  : 				*phi = hi;
; 125  : 				ImageList_ReplaceIcon(himl, -1, hi);

	push	eax
	push	-1
	push	ebx
	mov	DWORD PTR [edi], eax
	call	DWORD PTR __imp__ImageList_ReplaceIcon@12
$LN6@MySplit:

; 126  : 			}
; 127  : 		} while (++phi, --n);

	add	edi, 4
	sub	ebp, 1
	jne	SHORT $LL8@MySplit
	mov	esi, DWORD PTR _this$1$[esp+20]
$LN7@MySplit:

; 936  : 	}

	pop	edi
	mov	DWORD PTR [esi+696], ebx
	mov	eax, esi
	pop	esi
	pop	ebp
	pop	ebx
	pop	ecx
	ret	4
??0MySplit@NT@@QAE@H@Z ENDP				; NT::MySplit::MySplit
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winZ\window.cpp
;	COMDAT ??_GMySplit@NT@@EAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GMySplit@NT@@EAEPAXI@Z PROC				; NT::MySplit::`scalar deleting destructor', COMDAT
; _this$ = ecx
; File o:\vc\Wobj\Wobj.cpp

; 526  : 	{

	push	ebx
	push	esi
	push	edi
	mov	esi, ecx

; 527  : 		int i = RTL_NUMBER_OF(m_TypeNames);

	push	64					; 00000040H
	pop	ebx
	mov	DWORD PTR [esi], OFFSET ??_7MySplit@NT@@6B@

; 528  : 		PUNICODE_STRING pus = m_TypeNames;

	lea	edi, DWORD PTR [esi+40]
$LL10@scalar:

; 529  : 		do RtlFreeUnicodeString(pus++); while (--i);

	push	edi
	add	edi, 8
	call	DWORD PTR __imp__RtlFreeUnicodeString@4
	sub	ebx, 1
	jne	SHORT $LL10@scalar

; 530  : 
; 531  : 		i = RTL_NUMBER_OF(m_hi);

	push	32					; 00000020H
	pop	edi
	lea	ebx, DWORD PTR [esi+680]
$LL13@scalar:

; 532  : 		do 
; 533  : 		{
; 534  : 			if (m_hi[--i]) DestroyIcon(m_hi[i]);

	lea	ebx, DWORD PTR [ebx-4]
	dec	edi
	cmp	DWORD PTR [ebx], 0
	je	SHORT $LN11@scalar
	push	DWORD PTR [ebx]
	call	DWORD PTR __imp__DestroyIcon@4
$LN11@scalar:

; 535  : 		} while (i);

	test	edi, edi
	jne	SHORT $LL13@scalar

; 536  : 
; 537  : 		if (_himl)

	mov	eax, DWORD PTR [esi+696]
	test	eax, eax
	je	SHORT $LN15@scalar

; 538  : 		{
; 539  : 			ImageList_Destroy(_himl);

	push	eax
	call	DWORD PTR __imp__ImageList_Destroy@4
$LN15@scalar:
	test	BYTE PTR ___flags$[esp+8], 1
	je	SHORT $LN4@scalar
	test	BYTE PTR ___flags$[esp+8], 4
	jne	SHORT $LN3@scalar
; File o:\vc\winZ\window.cpp

; 22   : 	::operator delete(p);

	mov	ecx, esi
	call	??3@YAXPAX@Z				; operator delete

; 23   : 	gGUIrp.Release();

	call	?Release@RUNDOWN_REF@NT@@QAEXXZ		; NT::RUNDOWN_REF::Release
	jmp	SHORT $LN4@scalar
$LN3@scalar:
	push	724					; 000002d4H
	push	esi
	call	?__global_delete@@YAXPAXI@Z		; __global_delete
	pop	ecx
	pop	ecx
$LN4@scalar:
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
	ret	4
??_GMySplit@NT@@EAEPAXI@Z ENDP				; NT::MySplit::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@2@XZ
_TEXT	SEGMENT
?getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@2@XZ PROC ; NT::ZMainWnd::getPosName, COMDAT
; _this$ = ecx

; 945  : 		STATIC_UNICODE_STRING_(MainWnd);
; 946  : 		return &MainWnd;

	mov	eax, OFFSET ?MainWnd@?1??getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@3@XZ@4U43@B ; `NT::ZMainWnd::getPosName'::`2'::MainWnd

; 947  : 	}

	ret	0
?getPosName@ZMainWnd@NT@@EAEPBU_UNICODE_STRING@2@XZ ENDP ; NT::ZMainWnd::getPosName
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winz\window.h
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?CreateClient@ZMainWnd@NT@@EAEHPAUHWND__@@HHHH@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_nWidth$ = 20						; size = 4
_nHeight$ = 24						; size = 4
?CreateClient@ZMainWnd@NT@@EAEHPAUHWND__@@HHHH@Z PROC	; NT::ZMainWnd::CreateClient, COMDAT
; _this$ = ecx

; 950  : 	{

	push	ebp
	push	esi
	mov	esi, ecx
; File o:\vc\winz\window.h

; 70   : 		return gui_new(cb);

	mov	ecx, 724				; 000002d4H
	call	?gui_new@NT@@YGPAXI@Z			; NT::gui_new
; File o:\vc\Wobj\Wobj.cpp

; 951  : 		if (MySplit* p = new MySplit(nWidth>>2))

	xor	ebp, ebp
	test	eax, eax
	je	SHORT $LN2@CreateClie
	push	ebx
	mov	ebx, DWORD PTR _nWidth$[esp+8]
	mov	ecx, ebx
	sar	ecx, 2
	push	edi
	push	ecx
	mov	ecx, eax
	call	??0MySplit@NT@@QAE@H@Z			; NT::MySplit::MySplit
	mov	edi, eax
	test	edi, edi
	je	SHORT $LN8@CreateClie

; 952  : 		{
; 953  : 			_hwnd = p->Create(0, 0, WS_CHILD|WS_VISIBLE|WS_BORDER, x - 1, y, nWidth + 2, nHeight + 1, hwnd, 0, 0);

	mov	ecx, DWORD PTR _nHeight$[esp+12]
	lea	eax, DWORD PTR [ebx+2]
	push	ebp
	push	ebp
	push	DWORD PTR _hwnd$[esp+20]
	inc	ecx
	push	ecx
	push	eax
	push	DWORD PTR _y$[esp+32]
	mov	eax, DWORD PTR _x$[esp+36]
	dec	eax
	push	eax
	push	1350565888				; 50800000H
	push	ebp
	push	ecx
	mov	ecx, edi
	call	?Create@ZWnd@NT@@QAEPAUHWND__@@KPB_WKHHHHPAU3@PAUHMENU__@@PAX@Z ; NT::ZWnd::Create

; 954  : 			p->Release();

	mov	ecx, edi
	mov	DWORD PTR [esi+84], eax
	call	?Release@ZObject@NT@@QAEKXZ		; NT::ZObject::Release
$LN8@CreateClie:
	pop	edi
	pop	ebx
$LN2@CreateClie:

; 955  : 		}
; 956  : 
; 957  : 		return _hwnd != 0;

	xor	eax, eax
	cmp	DWORD PTR [esi+84], ebp
	pop	esi
	setne	al
	pop	ebp

; 958  : 	}

	ret	20					; 00000014H
?CreateClient@ZMainWnd@NT@@EAEHPAUHWND__@@HHHH@Z ENDP	; NT::ZMainWnd::CreateClient
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?CreateSB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
?CreateSB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z PROC		; NT::ZMainWnd::CreateSB, COMDAT
; _this$ = ecx

; 962  : 		if (hwnd = ZStatusBar::Create(hwnd))

	push	DWORD PTR _hwnd$[esp-4]
	add	ecx, 52					; 00000034H
	call	?Create@ZStatusBar@NT@@QAEPAUHWND__@@PAU3@@Z ; NT::ZStatusBar::Create
	test	eax, eax
	je	SHORT $LN2@CreateSB

; 963  : 		{
; 964  : 			SendMessage(hwnd, SB_SIMPLE, TRUE, 0);

	push	0
	push	1
	push	1033					; 00000409H
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 965  : 			return TRUE;

	xor	eax, eax
	inc	eax
	jmp	SHORT $LN1@CreateSB
$LN2@CreateSB:

; 966  : 		}
; 967  : 		return FALSE;

	xor	eax, eax
$LN1@CreateSB:

; 968  : 	}

	ret	4
?CreateSB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z ENDP		; NT::ZMainWnd::CreateSB
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?CreateTB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
?CreateTB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z PROC		; NT::ZMainWnd::CreateTB, COMDAT
; _this$ = ecx

; 971  : 	{

	push	esi
	push	edi

; 972  : 		static TBBUTTON g_btns[] = {
; 973  : 			{IMAGE_ICON, ID_REFRESH, TBSTATE_ENABLED, BTNS_AUTOSIZE, {}, (DWORD_PTR)L" Refresh ", -1},
; 974  : 			{IMAGE_ICON, ID_SECURITY, 0, BTNS_AUTOSIZE, {}, (DWORD_PTR)L" Security Descriptor", -1},
; 975  : 			{IMAGE_ICON, ID_GRID, TBSTATE_ENABLED, BTNS_AUTOSIZE, {}, (DWORD_PTR)L" Display Grid ", -1},
; 976  : 			{IMAGE_ICON, ID_COPY, 0, BTNS_AUTOSIZE, {}, (DWORD_PTR)L" Copy Name ", -1},
; 977  : 			{IMAGE_ICON, ID_TOGGLE, 0, BTNS_AUTOSIZE, {}, (DWORD_PTR)L" Display Full path", -1},
; 978  : 		};
; 979  : 
; 980  : 		int cxy = 32;

	push	32					; 00000020H
	pop	esi

; 981  : 		switch (GetSystemMetrics(SM_CXSMICON)>>3)

	push	49					; 00000031H
	mov	edi, ecx
	call	DWORD PTR __imp__GetSystemMetrics@4
	sar	eax, 3
	test	eax, eax
	js	SHORT $LN2@CreateTB
	cmp	eax, 2
	jle	SHORT $LN4@CreateTB
	cmp	eax, 3
	jne	SHORT $LN2@CreateTB

; 986  : 			break;
; 987  : 		case 3: cxy = 24;

	push	24					; 00000018H
	jmp	SHORT $LN7@CreateTB
$LN4@CreateTB:

; 982  : 		{
; 983  : 		case 0:
; 984  : 		case 1:
; 985  : 		case 2: cxy = 16;

	push	16					; 00000010H
$LN7@CreateTB:

; 988  : 			break;
; 989  : 		}
; 990  : 		
; 991  : 		return ZToolBar::Create(hwnd, (HINSTANCE)&__ImageBase, 0, 0, cxy, cxy, g_btns, RTL_NUMBER_OF(g_btns), TRUE) != 0;

	pop	esi
$LN2@CreateTB:
	sub	esp, 16					; 00000010H
	lea	ecx, DWORD PTR [edi+40]
	push	esi
	push	esi
	sub	esp, 12					; 0000000cH
	push	DWORD PTR _hwnd$[esp+40]
	call	?Create@ZToolBar@NT@@QAEPAUHWND__@@PAU3@PAUHINSTANCE__@@HHHHPAU_TBBUTTON@@HHI@Z ; NT::ZToolBar::Create
	neg	eax
	pop	edi
	sbb	eax, eax
	neg	eax
	pop	esi

; 992  : 	}

	ret	4
?CreateTB@ZMainWnd@NT@@EAEHPAUHWND__@@@Z ENDP		; NT::ZMainWnd::CreateTB
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?WindowProc@ZMainWnd@NT@@EAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_mii$1 = -56						; size = 48
_this$1$ = -8						; size = 4
_hmenu$1$ = -4						; size = 4
_len$2$ = 8						; size = 4
_hwnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lpsz$1$ = 20						; size = 4
_lParam$ = 20						; size = 4
?WindowProc@ZMainWnd@NT@@EAEJPAUHWND__@@IIJ@Z PROC	; NT::ZMainWnd::WindowProc, COMDAT
; _this$ = ecx

; 995  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H

; 996  : 		switch (uMsg)

	cmp	DWORD PTR _uMsg$[ebp], 78		; 0000004eH
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	edi, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _this$1$[ebp], esi
	je	SHORT $LN7@WindowProc
	mov	eax, 273				; 00000111H
	cmp	DWORD PTR _uMsg$[ebp], eax
	jne	SHORT $LN16@WindowProc

; 997  : 		{
; 998  : 		case WM_COMMAND:
; 999  : 			SendMessage(_hwnd, WM_COMMAND, wParam, 0);

	push	0
	push	DWORD PTR _wParam$[ebp]
	push	eax
	push	DWORD PTR [esi+84]
	call	DWORD PTR __imp__SendMessageW@16
$LN16@WindowProc:

; 1033 : 						}
; 1034 : 					}
; 1035 : 					break;
; 1036 : 				}
; 1037 : 			}
; 1038 : 			break;
; 1039 : 		}
; 1040 : 		return ZSDIFrameWnd::WindowProc(hwnd, uMsg, wParam, lParam);

	mov	esi, DWORD PTR _hwnd$[ebp]
$LN11@WindowProc:
	mov	ecx, DWORD PTR _this$1$[ebp]
	push	edi
	push	DWORD PTR _wParam$[ebp]
	push	DWORD PTR _uMsg$[ebp]
	push	esi
	call	?WindowProc@ZSDIFrameWnd@NT@@MAEJPAUHWND__@@IIJ@Z ; NT::ZSDIFrameWnd::WindowProc

; 1041 : 	}

	lea	esp, DWORD PTR [ebp-68]
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	16					; 00000010H
$LN7@WindowProc:

; 1000 : 			break;
; 1001 : 		case WM_NOTIFY:
; 1002 : 			if (AFX_IDW_STATUS_BAR == ((NMHDR*)lParam)->idFrom)

	cmp	DWORD PTR [edi+4], 59393		; 0000e801H
	jne	SHORT $LN16@WindowProc

; 1003 : 			{
; 1004 : 				switch (((NMHDR*)lParam)->code)

	cmp	DWORD PTR [edi+8], -5			; fffffffbH
	je	SHORT $LN9@WindowProc
	cmp	DWORD PTR [edi+8], -2			; fffffffeH
	jne	SHORT $LN16@WindowProc
$LN9@WindowProc:

; 1005 : 				{
; 1006 : 				case NM_RCLICK:
; 1007 : 				case NM_CLICK:
; 1008 : 					hwnd = ((NMHDR*)lParam)->hwndFrom;

	mov	esi, DWORD PTR [edi]

; 1009 : 
; 1010 : 					if (DWORD len = (DWORD)SendMessage(hwnd, SB_GETTEXTLENGTH, 0, 0))

	mov	ebx, DWORD PTR __imp__SendMessageW@16
	push	0
	push	0
	push	1036					; 0000040cH
	push	esi
	call	ebx
	test	eax, eax
	je	SHORT $LN11@WindowProc

; 1011 : 					{
; 1012 : 						PWSTR lpsz = (PWSTR)alloca(++len <<= 1);

	lea	eax, DWORD PTR [eax*2+2]
	mov	DWORD PTR _len$2$[ebp], eax
	call	__alloca_probe_16
	mov	eax, esp

; 1013 : 						SendMessage(hwnd, SB_GETTEXT, 0, (LPARAM)lpsz);

	push	eax
	push	0
	push	1037					; 0000040dH
	push	esi
	mov	DWORD PTR _lpsz$1$[ebp], eax
	call	ebx

; 1014 : 						ClientToScreen(hwnd, &((LPNMMOUSE)lParam)->pt);

	lea	eax, DWORD PTR [edi+20]
	push	eax
	push	esi
	call	DWORD PTR __imp__ClientToScreen@8

; 1015 : 						if (HMENU hmenu = CreatePopupMenu())

	call	DWORD PTR __imp__CreatePopupMenu@0
	mov	ebx, eax
	mov	DWORD PTR _hmenu$1$[ebp], ebx
	test	ebx, ebx
	je	SHORT $LN11@WindowProc

; 1016 : 						{
; 1017 : 							MENUITEMINFO mii = { sizeof(mii), MIIM_ID|MIIM_STRING, 0, 0, 6, 0, 0, 0, 0, L"Copy" };

	xor	ecx, ecx
	mov	DWORD PTR _mii$1[ebp], 48		; 00000030H

; 1018 : 							InsertMenuItem(hmenu, 0, TRUE, &mii);

	lea	eax, DWORD PTR _mii$1[ebp]
	mov	DWORD PTR _mii$1[ebp+4], 66		; 00000042H
	push	eax
	push	1
	push	ecx
	push	ebx
	mov	DWORD PTR _mii$1[ebp+8], ecx
	mov	DWORD PTR _mii$1[ebp+12], ecx
	mov	DWORD PTR _mii$1[ebp+16], 6
	mov	DWORD PTR _mii$1[ebp+20], ecx
	mov	DWORD PTR _mii$1[ebp+24], ecx
	mov	DWORD PTR _mii$1[ebp+28], ecx
	mov	DWORD PTR _mii$1[ebp+32], ecx
	mov	DWORD PTR _mii$1[ebp+36], OFFSET ??_C@_19HNCGHLOK@?$AAC?$AAo?$AAp?$AAy@
	mov	DWORD PTR _mii$1[ebp+40], ecx
	mov	DWORD PTR _mii$1[ebp+44], ecx
	call	DWORD PTR __imp__InsertMenuItemW@16

; 1019 : 
; 1020 : 							if ((TrackPopupMenu(hmenu, TPM_NONOTIFY|TPM_RETURNCMD, 
; 1021 : 								((LPNMMOUSE)lParam)->pt.x, ((LPNMMOUSE)lParam)->pt.y, 0, hwnd, 0) == 6) && OpenClipboard(hwnd))

	push	0
	push	esi
	push	0
	push	DWORD PTR [edi+24]
	push	DWORD PTR [edi+20]
	push	384					; 00000180H
	push	ebx
	call	DWORD PTR __imp__TrackPopupMenu@28
	cmp	eax, 6
	jne	SHORT $LN12@WindowProc
	push	esi
	call	DWORD PTR __imp__OpenClipboard@4
	test	eax, eax
	je	SHORT $LN12@WindowProc

; 1022 : 							{
; 1023 : 								EmptyClipboard();

	call	DWORD PTR __imp__EmptyClipboard@0

; 1024 : 								if (HGLOBAL hg = GlobalAlloc(GMEM_MOVEABLE, len))

	push	DWORD PTR _len$2$[ebp]
	push	2
	call	DWORD PTR __imp__GlobalAlloc@8
	mov	ebx, eax
	test	ebx, ebx
	je	SHORT $LN14@WindowProc

; 1025 : 								{
; 1026 : 									memcpy(GlobalLock(hg), lpsz, len);

	push	DWORD PTR _len$2$[ebp]
	push	DWORD PTR _lpsz$1$[ebp]
	push	ebx
	call	DWORD PTR __imp__GlobalLock@4
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1027 : 									GlobalUnlock(hg);

	push	ebx
	call	DWORD PTR __imp__GlobalUnlock@4

; 1028 : 									if (!SetClipboardData(CF_UNICODETEXT, hg)) GlobalFree(hg);

	push	ebx
	push	13					; 0000000dH
	call	DWORD PTR __imp__SetClipboardData@8
	test	eax, eax
	jne	SHORT $LN14@WindowProc
	push	ebx
	call	DWORD PTR __imp__GlobalFree@4
$LN14@WindowProc:

; 1029 : 								}
; 1030 : 								CloseClipboard();

	call	DWORD PTR __imp__CloseClipboard@0
	mov	ebx, DWORD PTR _hmenu$1$[ebp]
$LN12@WindowProc:

; 1031 : 							}
; 1032 : 							DestroyMenu(hmenu);

	push	ebx
	call	DWORD PTR __imp__DestroyMenu@4
	jmp	$LN11@WindowProc
?WindowProc@ZMainWnd@NT@@EAEJPAUHWND__@@IIJ@Z ENDP	; NT::ZMainWnd::WindowProc
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ??0ZMainWnd@NT@@QAE@XZ
_TEXT	SEGMENT
??0ZMainWnd@NT@@QAE@XZ PROC				; NT::ZMainWnd::ZMainWnd, COMDAT
; _this$ = ecx

; 1043 : 	ZMainWnd()

	push	esi
	mov	esi, ecx
	call	??0ZSDIFrameWnd@NT@@QAE@XZ		; NT::ZSDIFrameWnd::ZSDIFrameWnd

; 1044 : 	{
; 1045 : 		_hwnd = 0;

	and	DWORD PTR [esi+84], 0

; 1046 : 	}

	mov	eax, esi
	mov	DWORD PTR [esi], OFFSET ??_7ZMainWnd@NT@@6BZFrameMultiWnd@1@@
	mov	DWORD PTR [esi+28], OFFSET ??_7ZMainWnd@NT@@6BZIdle@1@@
	pop	esi
	ret	0
??0ZMainWnd@NT@@QAE@XZ ENDP				; NT::ZMainWnd::ZMainWnd
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\winZ\window.cpp
;	COMDAT ??_GZMainWnd@NT@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GZMainWnd@NT@@UAEPAXI@Z PROC				; NT::ZMainWnd::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	esi
	mov	esi, ecx
	call	??1ZSDIFrameWnd@NT@@UAE@XZ		; NT::ZSDIFrameWnd::~ZSDIFrameWnd
	test	BYTE PTR ___flags$[esp], 1
	je	SHORT $LN4@scalar
	test	BYTE PTR ___flags$[esp], 4
	jne	SHORT $LN3@scalar

; 22   : 	::operator delete(p);

	mov	ecx, esi
	call	??3@YAXPAX@Z				; operator delete

; 23   : 	gGUIrp.Release();

	call	?Release@RUNDOWN_REF@NT@@QAEXXZ		; NT::RUNDOWN_REF::Release
	jmp	SHORT $LN4@scalar
$LN3@scalar:
	push	88					; 00000058H
	push	esi
	call	?__global_delete@@YAXPAXI@Z		; __global_delete
	pop	ecx
	pop	ecx
$LN4@scalar:
	mov	eax, esi
	pop	esi
	ret	4
??_GZMainWnd@NT@@UAEPAXI@Z ENDP				; NT::ZMainWnd::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogspy
;	COMDAT ??1ZMainWnd@NT@@UAE@XZ
_TEXT	SEGMENT
??1ZMainWnd@NT@@UAE@XZ PROC				; NT::ZMainWnd::~ZMainWnd, COMDAT
; _this$ = ecx
	jmp	??1ZSDIFrameWnd@NT@@UAE@XZ		; NT::ZSDIFrameWnd::~ZSDIFrameWnd
??1ZMainWnd@NT@@UAE@XZ ENDP				; NT::ZMainWnd::~ZMainWnd
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\inc\rtlframe.h
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\inc\rtlframe.h
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\winz\window.h
; File o:\vc\Wobj\Wobj.cpp
; File o:\vc\inc\rtlframe.h
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?zmain@NT@@YGXXZ
_TEXT	SEGMENT
_reg$ = -176						; size = 4
_app$ = -172						; size = 20
_globals$ = -152					; size = 48
_font$ = -104						; size = 104
?zmain@NT@@YGXXZ PROC					; NT::zmain, COMDAT

; 1050 : {

	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
	sub	esp, 176				; 000000b0H
; File o:\vc\inc\rtlframe.h

; 8    : 		Flags = 0;

	and	DWORD PTR _globals$[esp+176], 0

; 9    : 		RtlPushFrame(this);

	lea	eax, DWORD PTR _globals$[esp+176]
; File o:\vc\Wobj\Wobj.cpp

; 1050 : {

	push	esi
	push	edi
; File o:\vc\inc\rtlframe.h

; 9    : 		RtlPushFrame(this);

	push	eax
	mov	DWORD PTR _globals$[esp+196], OFFSET ?s@?1??getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@3@XZ@4U43@B ; `NT::RTL_FRAME<NT::_ZGLOBALS>::getContext'::`2'::s
	call	DWORD PTR __imp__RtlPushFrame@4

; 40   : 	{

	lea	ecx, DWORD PTR _globals$[esp+196]
	call	??0_ZGLOBALS@NT@@QAE@XZ			; NT::_ZGLOBALS::_ZGLOBALS
; File o:\vc\Wobj\Wobj.cpp

; 1052 : 	ZApp app;

	lea	ecx, DWORD PTR _app$[esp+184]
	call	??0ZApp@NT@@QAE@XZ			; NT::ZApp::ZApp

; 1053 : 	ZRegistry reg;

	lea	ecx, DWORD PTR _reg$[esp+184]
	call	??0ZRegistry@NT@@QAE@XZ			; NT::ZRegistry::ZRegistry

; 1054 : 	ZFont font(TRUE);

	push	ecx
	lea	ecx, DWORD PTR _font$[esp+188]
	call	??0ZFont@NT@@QAE@H@Z			; NT::ZFont::ZFont

; 1055 : 
; 1056 : 	if (0 <= reg.Create(L"Software\\{9493D108-6D2D-4e29-9701-0A6E35125DAC}"))

	push	ecx
	lea	ecx, DWORD PTR _reg$[esp+188]
	call	?Create@ZRegistry@NT@@QAEJPB_W@Z	; NT::ZRegistry::Create
	test	eax, eax
	js	SHORT $LN4@zmain
; File o:\vc\winz\window.h

; 70   : 		return gui_new(cb);

	push	88					; 00000058H
	pop	ecx
	call	?gui_new@NT@@YGPAXI@Z			; NT::gui_new
; File o:\vc\Wobj\Wobj.cpp

; 1060 : 		if (ZMainWnd* p = new ZMainWnd)

	mov	edi, eax
	test	edi, edi
	je	SHORT $LN4@zmain

; 1043 : 	ZMainWnd()

	mov	ecx, edi
	call	??0ZSDIFrameWnd@NT@@QAE@XZ		; NT::ZSDIFrameWnd::ZSDIFrameWnd

; 1044 : 	{
; 1045 : 		_hwnd = 0;

	and	DWORD PTR [edi+84], 0

; 1061 : 		{
; 1062 : 			hwnd = p->ZSDIFrameWnd::Create(L"WinObj", (HINSTANCE)&__ImageBase, MAKEINTRESOURCE(IDR_MENU1), TRUE);// && font.Init()

	sub	esp, 16					; 00000010H
	mov	ecx, edi

; 1043 : 	ZMainWnd()

	mov	DWORD PTR [edi], OFFSET ??_7ZMainWnd@NT@@6BZFrameMultiWnd@1@@
	mov	DWORD PTR [edi+28], OFFSET ??_7ZMainWnd@NT@@6BZIdle@1@@

; 1061 : 		{
; 1062 : 			hwnd = p->ZSDIFrameWnd::Create(L"WinObj", (HINSTANCE)&__ImageBase, MAKEINTRESOURCE(IDR_MENU1), TRUE);// && font.Init()

	call	?Create@ZSDIFrameWnd@NT@@QAEPAUHWND__@@PB_WPAUHINSTANCE__@@0H@Z ; NT::ZSDIFrameWnd::Create

; 1063 : 
; 1064 : 			p->Release();

	mov	ecx, edi
	mov	esi, eax
	call	?Release@ZObject@NT@@QAEKXZ		; NT::ZObject::Release

; 1065 : 		}
; 1066 : 
; 1067 : 		if (hwnd)

	test	esi, esi
	je	SHORT $LN4@zmain

; 1068 : 		{
; 1069 : 			app.Run();

	lea	ecx, DWORD PTR _app$[esp+184]
	call	?Run@ZApp@NT@@QAEIXZ			; NT::ZApp::Run
$LN4@zmain:

; 1072 : }

	lea	ecx, DWORD PTR _font$[esp+184]
	call	??1ZFont@NT@@QAE@XZ			; NT::ZFont::~ZFont
	lea	ecx, DWORD PTR _reg$[esp+184]
	call	??1ZRegistry@NT@@QAE@XZ			; NT::ZRegistry::~ZRegistry
	lea	ecx, DWORD PTR _app$[esp+184]
	call	??1ZApp@NT@@QAE@XZ			; NT::ZApp::~ZApp
	lea	ecx, DWORD PTR _globals$[esp+196]
	call	??1_ZGLOBALS@NT@@QAE@XZ			; NT::_ZGLOBALS::~_ZGLOBALS
; File o:\vc\inc\rtlframe.h

; 14   : 		RtlPopFrame(this);

	lea	eax, DWORD PTR _globals$[esp+184]
	push	eax
	call	DWORD PTR __imp__RtlPopFrame@4
; File o:\vc\Wobj\Wobj.cpp

; 1072 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?zmain@NT@@YGXXZ ENDP					; NT::zmain
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\rtlframe.h
;	COMDAT ??1?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@QAE@XZ
_TEXT	SEGMENT
??1?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@QAE@XZ PROC		; NT::RTL_FRAME<NT::_ZGLOBALS>::~RTL_FRAME<NT::_ZGLOBALS>, COMDAT
; _this$ = ecx
	mov	edx, ecx
	lea	ecx, DWORD PTR [edx+12]
	call	??1_ZGLOBALS@NT@@QAE@XZ			; NT::_ZGLOBALS::~_ZGLOBALS

; 14   : 		RtlPopFrame(this);

	push	edx
	call	DWORD PTR __imp__RtlPopFrame@4
	ret	0
??1?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@QAE@XZ ENDP		; NT::RTL_FRAME<NT::_ZGLOBALS>::~RTL_FRAME<NT::_ZGLOBALS>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT @__security_check_cookie@4
_TEXT	SEGMENT
@__security_check_cookie@4 PROC				; COMDAT
; __StackCookie$ = ecx

; 1081 : 		if (__security_cookie != _StackCookie)

	test	ecx, ecx
	je	SHORT $LN2@

; 1082 : 		{
; 1083 : 			__debugbreak();

	int	3
$LN2@:

; 1084 : 		}
; 1085 : 	}

	ret	0
@__security_check_cookie@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT __ValidateImageBase
_TEXT	SEGMENT
_pImageBase$ = 8					; size = 4
__ValidateImageBase PROC				; COMDAT

; 1089 : 		return NT::RtlImageNtHeader(pImageBase) != 0;

	push	DWORD PTR _pImageBase$[esp-4]
	call	DWORD PTR __imp__RtlImageNtHeader@4
	neg	eax
	sbb	eax, eax
	neg	eax

; 1090 : 	}

	ret	0
__ValidateImageBase ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT __FindPESection
_TEXT	SEGMENT
_pImageBase$ = 8					; size = 4
_rva$ = 12						; size = 4
__FindPESection PROC					; COMDAT

; 1094 : 		return NT::RtlImageRvaToSection(NT::RtlImageNtHeader(pImageBase), pImageBase, rva);

	push	DWORD PTR _rva$[esp-4]
	push	DWORD PTR _pImageBase$[esp]
	push	DWORD PTR _pImageBase$[esp+4]
	call	DWORD PTR __imp__RtlImageNtHeader@4
	push	eax
	call	DWORD PTR __imp__RtlImageRvaToSection@12

; 1095 : 	}

	ret	0
__FindPESection ENDP
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?ep@NT@@YGXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?ep@NT@@YGXPAX@Z PROC					; NT::ep, COMDAT

; 1105 : 	initterm();

	call	_initterm@0

; 1106 : 
; 1107 : 	zmain();

	call	?zmain@NT@@YGXXZ			; NT::zmain

; 1108 : 
; 1109 : 	destroyterm();

	call	_destroyterm@0

; 1110 : 
; 1111 : 	ExitProcess(0);

	push	0
	call	DWORD PTR __imp__ExitProcess@4
$LN3@ep:
	int	3
?ep@NT@@YGXPAX@Z ENDP					; NT::ep
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\Wobj\Wobj.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\rtlframe.h
;	COMDAT ?get@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPAU12@XZ
_TEXT	SEGMENT
?get@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPAU12@XZ PROC	; NT::RTL_FRAME<NT::_ZGLOBALS>::get, COMDAT

; 19   : 		if (TEB_ACTIVE_FRAME* prf = RtlGetFrame())

	call	DWORD PTR __imp__RtlGetFrame@0
	jmp	SHORT $LN14@get
$LL6@get:

; 20   : 		{
; 21   : 			do 
; 22   : 			{
; 23   : 				if (prf->Context == ctx) return prf;

	cmp	DWORD PTR [eax+8], OFFSET ?s@?1??getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@3@XZ@4U43@B ; `NT::RTL_FRAME<NT::_ZGLOBALS>::getContext'::`2'::s
	je	SHORT $LN3@get

; 24   : 			} while (prf = prf->Previous);

	mov	eax, DWORD PTR [eax+4]
$LN14@get:
	test	eax, eax
	jne	SHORT $LL6@get
$LN3@get:

; 45   : 		return static_cast<RTL_FRAME*>(_RTL_FRAME::get(getContext()));
; 46   : 	}

	ret	0
?get@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPAU12@XZ ENDP	; NT::RTL_FRAME<NT::_ZGLOBALS>::get
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\rtlframe.h
;	COMDAT ??0?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@QAE@XZ
_TEXT	SEGMENT
??0?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@QAE@XZ PROC		; NT::RTL_FRAME<NT::_ZGLOBALS>::RTL_FRAME<NT::_ZGLOBALS>, COMDAT
; _this$ = ecx

; 40   : 	{

	push	esi
	mov	esi, ecx

; 9    : 		RtlPushFrame(this);

	push	esi
	and	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+8], OFFSET ?s@?1??getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@3@XZ@4U43@B ; `NT::RTL_FRAME<NT::_ZGLOBALS>::getContext'::`2'::s
	call	DWORD PTR __imp__RtlPushFrame@4

; 40   : 	{

	lea	ecx, DWORD PTR [esi+12]
	call	??0_ZGLOBALS@NT@@QAE@XZ			; NT::_ZGLOBALS::_ZGLOBALS

; 41   : 	}

	mov	eax, esi
	pop	esi
	ret	0
??0?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@QAE@XZ ENDP		; NT::RTL_FRAME<NT::_ZGLOBALS>::RTL_FRAME<NT::_ZGLOBALS>
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\rtlframe.h
;	COMDAT ?getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@2@XZ
_TEXT	SEGMENT
?getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@2@XZ PROC ; NT::RTL_FRAME<NT::_ZGLOBALS>::getContext, COMDAT

; 35   : 		static const TEB_ACTIVE_FRAME_CONTEXT s = { 0, __FUNCDNAME__ };
; 36   : 		return &s;

	mov	eax, OFFSET ?s@?1??getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@3@XZ@4U43@B ; `NT::RTL_FRAME<NT::_ZGLOBALS>::getContext'::`2'::s

; 37   : 	}

	ret	0
?getContext@?$RTL_FRAME@U_ZGLOBALS@NT@@@NT@@SGPBU_TEB_ACTIVE_FRAME_CONTEXT@2@XZ ENDP ; NT::RTL_FRAME<NT::_ZGLOBALS>::getContext
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\misc.h
;	COMDAT ??0CObjectAttributes@NT@@QAE@PB_WPAXK11@Z
_TEXT	SEGMENT
__ObjectName$ = 8					; size = 4
__RootDirectory$dead$ = 12				; size = 4
__Attributes$dead$ = 16					; size = 4
__SecurityDescriptor$dead$ = 20				; size = 4
__SecurityQualityOfService$dead$ = 24			; size = 4
??0CObjectAttributes@NT@@QAE@PB_WPAXK11@Z PROC		; NT::CObjectAttributes::CObjectAttributes, COMDAT
; _this$ = ecx

; 126  : 	CObjectAttributes(LPCWSTR _ObjectName,

	push	esi

; 127  : 		HANDLE _RootDirectory = 0,
; 128  : 		ULONG _Attributes = OBJ_CASE_INSENSITIVE,
; 129  : 		PVOID _SecurityDescriptor = 0,
; 130  : 		PVOID _SecurityQualityOfService = 0
; 131  : 		)
; 132  : 	{
; 133  : 		Length = sizeof OBJECT_ATTRIBUTES;
; 134  : 		RtlInitUnicodeString(ObjectName = &mus,_ObjectName);

	push	DWORD PTR __ObjectName$[esp]
	mov	esi, ecx
	lea	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [esi], 24			; 00000018H
	push	eax
	mov	DWORD PTR [esi+8], eax
	call	DWORD PTR __imp__RtlInitUnicodeString@8

; 135  : 		RootDirectory = _RootDirectory;

	xor	eax, eax

; 136  : 		Attributes = _Attributes;

	mov	DWORD PTR [esi+12], 64			; 00000040H
	mov	DWORD PTR [esi+4], eax

; 137  : 		SecurityDescriptor = _SecurityDescriptor;

	mov	DWORD PTR [esi+16], eax

; 138  : 		SecurityQualityOfService = _SecurityQualityOfService;

	mov	DWORD PTR [esi+20], eax

; 139  : 	}

	mov	eax, esi
	pop	esi
	ret	20					; 00000014H
??0CObjectAttributes@NT@@QAE@PB_WPAXK11@Z ENDP		; NT::CObjectAttributes::CObjectAttributes
_TEXT	ENDS
; Function compile flags: /Ogspy
; File o:\vc\inc\misc.h
;	COMDAT ??0CObjectAttributes@NT@@QAE@PBU_UNICODE_STRING@1@PAXK11@Z
_TEXT	SEGMENT
__ObjectName$ = 8					; size = 4
__RootDirectory$ = 12					; size = 4
__Attributes$dead$ = 16					; size = 4
__SecurityDescriptor$dead$ = 20				; size = 4
__SecurityQualityOfService$dead$ = 24			; size = 4
??0CObjectAttributes@NT@@QAE@PBU_UNICODE_STRING@1@PAXK11@Z PROC ; NT::CObjectAttributes::CObjectAttributes, COMDAT
; _this$ = ecx

; 141  : 		HANDLE _RootDirectory = 0,
; 142  : 		ULONG _Attributes = OBJ_CASE_INSENSITIVE,
; 143  : 		PVOID _SecurityDescriptor = 0,
; 144  : 		PVOID _SecurityQualityOfService = 0
; 145  : 		)
; 146  : 	{
; 147  : 		Length = sizeof OBJECT_ATTRIBUTES;
; 148  : 		ObjectName = (PUNICODE_STRING)_ObjectName;

	mov	eax, DWORD PTR __ObjectName$[esp-4]

; 149  : 		RootDirectory = _RootDirectory;
; 150  : 		Attributes = _Attributes;
; 151  : 		SecurityDescriptor = _SecurityDescriptor;

	and	DWORD PTR [ecx+16], 0

; 152  : 		SecurityQualityOfService = _SecurityQualityOfService;

	and	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR __RootDirectory$[esp-4]
	mov	DWORD PTR [ecx+4], eax

; 153  : 	}

	mov	eax, ecx
	mov	DWORD PTR [ecx], 24			; 00000018H
	mov	DWORD PTR [ecx+12], 64			; 00000040H
	ret	20					; 00000014H
??0CObjectAttributes@NT@@QAE@PBU_UNICODE_STRING@1@PAXK11@Z ENDP ; NT::CObjectAttributes::CObjectAttributes
_TEXT	ENDS
END
